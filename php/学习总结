单核可以禁用cpu中断，来保证原子性
多核不行，只能通过互斥

原子性本质：操作的中间状态对外不可见

总是先锁小的，left，right，避免死锁
最佳线程数 =CPU 核数 * [ 1 +（I/O 耗时 / CPU 耗时）]

sychronized 是语言级别的，

lock是sdk级别的

CountDownLatch 主要用来解决一个线程等待多个线程的场景

Semaphore 可以允许多个线程访问一个临界区。

其实原子类性能高的秘密很简单，硬件支持而已。CPU 为了解决并发问题，提供了 CAS 指令（CAS，全称是 Compare And Swap，即“比较并交换”）只有当目前 count 的值和期望值 expect 相等时，才会将 count 更新为 newValue。 实现一个线程安全的count += 1操作，“CAS+ 自旋”，解决 ABA 问题的思路其实很简单，增加一个版本号维度就可以了


这个和 socket 处理网络请求的机制有关，socket 处理 TCP 网络连接请求，是在一个独立的 socket 中，每当有一个 TCP 连接成功建立，都会创建一个新的 socket，之后对 TCP 连接的读写都是由新创建处理的 socket 完成的。也就是说处理 TCP 连接请求和读写请求是通过两个不同的 socket 完成的。上面我们在讨论网络请求的时候，为了简化模型，只是讨论了读写请求，而没有讨论连接请求。

在 Netty 中，bossGroup 就用来处理连接请求的，而 workerGroup 是用来处理读写请求的。bossGroup 处理完连接请求后，会将这个连接提交给 workerGroup 来处理， workerGroup 里面有多个 EventLoop，那新的连接会交给哪个 EventLoop 来处理呢？这就需要一个负载均衡算法，Netty 中目前使用的是轮询算法。

注意如果worker处理中，发起新的netty请求，就不一定是同一个worker线程处理了，注意不要使用threadlocal


所以第一种确保主备无延迟的方法是，每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0。如果还不等于 0 ，那就必须等到这个参数变为 0 才能执行查询请求。