2020-11-19 20:16:29.843 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.859 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:16:29.868 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/25a293d5be86cd89257191a55ce256aa?bkt=en-2fb6763f1c8fb10176e6ac0745626c542f9c6991338f8e52b4ddfccb81324d53a46f79d484ed69b1&fid=3757516097-778750-585168498837700&time=1605788188&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-knRX%2B8%2Bh730I3eU9pAbi0P904tY%3D&to=92&size=5056122&sta_dx=5056122&sta_cs=2358&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182963&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5056122&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-637ee824b139e504e2ef7be05e4f2be19e3fe4a5dc44518baebab3b4e0cd08194b9634f368a8969f&sl=76480590&expires=8h&rt=pr&r=972559466&mlogid=7510874474625307362&vbdid=64799653&fin=12%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510874474625307362&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9ed8fe6e50a509f409ca053a26f347f59&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=12%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
33, 33) 
 {executed in 2 msec}
2020-11-19 20:16:29.874 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.876 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:16:29.884 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/25a293d5be86cd89257191a55ce256aa?bkt=en-2fb6763f1c8fb10176e6ac0745626c542f9c6991338f8e52b4ddfccb81324d53a46f79d484ed69b1&fid=3757516097-778750-585168498837700&time=1605788188&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-knRX%2B8%2Bh730I3eU9pAbi0P904tY%3D&to=92&size=5056122&sta_dx=5056122&sta_cs=2358&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182963&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5056122&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-637ee824b139e504e2ef7be05e4f2be19e3fe4a5dc44518baebab3b4e0cd08194b9634f368a8969f&sl=76480590&expires=8h&rt=pr&r=972559466&mlogid=7510874474625307362&vbdid=64799653&fin=12%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510874474625307362&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9ed8fe6e50a509f409ca053a26f347f59&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=12%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
33, 33) 
 {executed in 1 msec}
2020-11-19 20:16:29.889 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.891 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:29.895 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.896 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:29.909 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-21 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">16</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 写的非常棒，又帮我看到了一个小黑盒中的天地。 
<br>小结： <br>1:二八法则-适用于许多的领域，对象在JVM对内存空间的生命周期也同样符合 <br> <br>2:为了更好的JVM性能以及充分利用对象生命周期的二八法则，JVM的作者将JVM的对内存空间进行了分代的处理 
<br> <br>3:堆内存空间=年轻代+老年代 <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;年轻代=Eden+from+to <br>&nbsp;&nbsp;&nbsp;&nbsp;年轻代用于分配新生的对象 
<br>&nbsp;&nbsp;&nbsp;&nbsp;Eden-通常用于存储新创建的对象，对内存空间是共享的，所以，直接在这里面划分空间需要进行同步 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from-当Eden区的空间耗尽时，JVM便会出发一次Minor 
GC 来收集新生代的垃圾，会把存活下来的对象放入Survivor区，也就是from区 <br>注意，from和to是变动的 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to-指向的Survivor区是空的，用于当发生Minor 
GC 时，存储Eden和from区中的存活对象，然后再交换from和to指针，以保证下一次Minor GC 时to指向的Survivor区还是空的。 <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;老年代-用于存储存活时间更久的对象，比如：15次Minor 
GC 还存活的对象就放入老年代中 <br> <br>4:堆内存分代后，会根据他们的不同特点来区别对待，进行垃圾回收的时候会使用不同的垃圾回收方式，针对新生代的垃圾回收器有如下三个：Serial、Parallel 
Scavenge、Parallel New，他们采用的都是标记-复制的垃圾回收算法。 <br>针对老年代的垃圾回收器有如下三个：Serial Old 、Parallel Old 、CMS，他们使用的都是标记-压缩的垃圾回收算法。 
<br> <br>5:TLAB（Thread Local Allocation Buffer）-这个技术是用于解决多线程竞争堆内存分配问题的，核心原理是对分配一些连续的内存空间 <br> 
<br>6:卡表-这个技术是用于解决减少老年代的全堆空间扫描 <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 好长的总结，赞一个</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>javaadu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 写得真好，搞清楚了之前没掌握透彻的概念： <br>（1）TLAB是为了避免对象分配时对内存的竞争 
<br>（2）卡表是为了处理minor gc时老年代对新生代的引用，为了避免整堆扫描而提出了卡表的概念 <br> <br>提个问题：JVM中堆内存根系统的物理内存是如何对应的，这个可以从哪里看？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 根系统指的是？<br><br>GC roots分布在HotSpot中的每个子系统里。可以在源码中搜oops_do</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>公子_小白</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">4</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好 <br>请问JVM分代收集新生代对象进入老年代，年龄为什么是15而不是其他的? <br>谢谢 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: HotSpot会在对象头中的标记字段里记录年龄，分配到的空间只有4位，最多只能记录到15</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以配合R大的文章 <br>http://rednaxelafx.iteye.com/blog/1042471 
<br>http://rednaxelafx.iteye.com/blog/174865 <br>http://rednaxelafx.iteye.com/blog/1044951 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/b6/ee3b4ef7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>herome</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师 建议是能画点图吗 😂 每一篇都是文字。 
相信画了图 不仅能让文章通俗易懂，也能让老师的文笔更好。 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLgXj6Axr2aRE3ZwickSicNhTlzP7mlevGBjZulTZlTTOyPHwLpN21Eu7RJDicWMDcBnhuRSN5IOuBWA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>愤怒的虾干</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1、当默认开启动态分配时，若ALIVE_OBJECT_SIZE小于33M几乎无FULL 
GC，大于则出现FULL GC。动态分配时Eden区大小不能小于Survivor区，即最少为新生代内存的1/3，单个Survivor区最大为新生代内存的1/3。故当ALIVE_OBJECT_SIZE大于33M时，Survivor区小于ALIVE_OBJECT_SIZE，导致Minor 
GC时需要复制到to区的数据大于to区容量，从而使得一部分数据提前晋升到老年区，多次提前晋升导致老年区无多余空间从而导致Full GC；当ALIVE_OBJECT_SIZE小于33M时，Survivor区容量总是近似的接近ALIVE_OBJECT_SIZE大小，使得每次Minor 
GC有效对象都可以复制到Survivor区，而晋升到老年代的对象大多是年龄达到次数要求，短期内不会挤满老年代空间，在有限时间内运行结束不会引发Full GC。 <br>2、当-XX:-UsePSAdaptiveSurvivorSizePolicy 
or -XX:SurvivorRatio=N关闭动态分配或指定Eden、Survivor比例时，只要ALIVE_OBJECT_SIZE小于Survivor容量，有限时间运行结束不会引发Full 
GC。反之会导致Full GC。 <br>@郑老师 是否是这样？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>公子_小白</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">2</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0"> 多谢老师的回复 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>西兹兹</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师好，请问java8开始之后的元数据区的回收是如何呢？这部分属于堆外内存吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/48/df/0ecd8c36.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>多巴胺老邮...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 郑老师您好 ！ 一直想问问CMS收集器中并发标记这一个步骤的作用是什么 
？ 为什么还要在初始标记的基础上多进行一次Roots Tracing呢？ 希望您能有空能够回复下 thx <br> </div> <!----> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/e4/27/73359af3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>骑车吃火锅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问老师，java类是如何被卸载的？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Leon 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师你好，写屏障不会判断引用是否指向新生代的对象，这里会不会提高MinorGC的成本呢？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 通过GC_roots探索存活对象的时候，有的对象在新生代，有的对象在老年代。如果当前对象处在老年代而且在赃卡中，需要继续深度遍历对象。若不在赃卡中，就没必要进一步深度遍历下去了。不知道我的理解对不？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的。卡表就是为了避免探索整个老年代，而只将脏表中的对象作为GC 
roots。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/76/09/cf7513c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>nero</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这也太狠了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/19/49/9452b2fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Theodore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师您好，我想咨询一下，你是否研究过类的GC。 <br>在大量反射、动态代理，CGLib等Bytecode框架、动态生成jsp 
等动态类对象（非实例对象）在jdk1.8中是否是使用MethodHandle实现的？这些动态类的GC细节能给我提供点学习资料吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/56/41/050144c7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Jadic</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> hi，想了解下，当前线程在申请TLAB的时候是如何决定本次申请的空间大小的，如何尽量不浪费又少申请次数？谢谢。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/4f/7d/930b2957.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>XuYJ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> cms不是标记清除吗 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>rakitten</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有两个问题想请教一下郑老师： <br>1、介绍GC的文档很多，我有个疑问：GC的代码哪里能看到？ <br>2、我们的后台服务一天内偶尔出现一次YGC耗时很长的情况（超过100ms，正常只有20ms），而且很难复现。我在想，能不能在GC发生的时候，触发一个Linux脚本，记录现场的线程信息以及堆栈信息 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/27/54/d38c34a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小泷哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 可以这么理解吗： <br>1、卡表记录老年代执行新生代的引用 <br>2、老年代的引用变更都会被当做堆新生代的引用，记录在卡表中。 
<br>3、只需要在老年代GC的时候，执行一次minor GC就行了，清理card table(包括CMS和G1)。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>life 
is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 记载来自一个刚刚迈进程序世界的coder <br> <br>java对象的生存周期 <br> <br>大部分对象的生命周期都很短，小部分对象的生命周期很长。 
<br> <br>因为这个特点，可以对jvm内存分代，不同代采用不同的回收方式。 <br> <br>年轻代要采用频繁的回收方式，快速回收大部分垃圾。老年代则采用不频繁但彻底的回收方式。 
<br> <br>JVM堆的划分 <br> <br>因为对象以上的特点，将堆分为两个代，老年代和新生代。新生代分为Eden和两个Survivor区。可以使用参数 “”，会动态的根据对象的生成速率以及survivor区的使用情况，调整Eden区和survivor区的比例。也可以使用参数“”，来固定Eden和survivor的比例。 
<br> <br>如何保证内存分配的线程安全 <br> <br>堆是共享的，所有的线程都会在堆上分配内存，那么jvm是如何保证内存分配是线程安全的？答案是，每个线程都会有TLAB(thread 
local allocation buffer)，这个是线程私有的。首先会在TLAB上分配，如果TLAB不够用，就需要通过加锁的方式，申请TLAB。 <br> <br>Eden区满了 
<br> <br>触发minor GC，eden和from依旧存活的对象会放置到to区。然后交换from to指针的指向。其中达到经历过一定回收次数的对象将会被晋升到老年代，对应JVM参数[]。同时如果也配置了[]参数，单个survivor区占用超过50%，经历次数较高的对象也会晋升到老年代。 
<br> <br>先提前说一个结论，minor GC有一个好处，发生GC时不会遍历堆内存，只会遍历Eden+survivor区！讲道理，老年代很可能拥有Eden+survivor区对象的引用，那minor 
GC只遍历年轻代，是怎么做到GC的呢？ <br> <br>卡表 <br> <br>HotSpot会将堆分割成一个个512字节大小的卡，然后维护一张卡表，每个卡在表中占据一个卡位。 <br> 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/57/449e76fb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QlDoors</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> &lt; 1/2 Suvivors 时，不会发生Full 
GC </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li>', 0, 'full_html', 'zh-hans', 33, 33) 
 {executed in 5 msec}
2020-11-19 20:16:29.920 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.921 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:29.933 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-21 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">16</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 写的非常棒，又帮我看到了一个小黑盒中的天地。 
<br>小结： <br>1:二八法则-适用于许多的领域，对象在JVM对内存空间的生命周期也同样符合 <br> <br>2:为了更好的JVM性能以及充分利用对象生命周期的二八法则，JVM的作者将JVM的对内存空间进行了分代的处理 
<br> <br>3:堆内存空间=年轻代+老年代 <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;年轻代=Eden+from+to <br>&nbsp;&nbsp;&nbsp;&nbsp;年轻代用于分配新生的对象 
<br>&nbsp;&nbsp;&nbsp;&nbsp;Eden-通常用于存储新创建的对象，对内存空间是共享的，所以，直接在这里面划分空间需要进行同步 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from-当Eden区的空间耗尽时，JVM便会出发一次Minor 
GC 来收集新生代的垃圾，会把存活下来的对象放入Survivor区，也就是from区 <br>注意，from和to是变动的 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to-指向的Survivor区是空的，用于当发生Minor 
GC 时，存储Eden和from区中的存活对象，然后再交换from和to指针，以保证下一次Minor GC 时to指向的Survivor区还是空的。 <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;老年代-用于存储存活时间更久的对象，比如：15次Minor 
GC 还存活的对象就放入老年代中 <br> <br>4:堆内存分代后，会根据他们的不同特点来区别对待，进行垃圾回收的时候会使用不同的垃圾回收方式，针对新生代的垃圾回收器有如下三个：Serial、Parallel 
Scavenge、Parallel New，他们采用的都是标记-复制的垃圾回收算法。 <br>针对老年代的垃圾回收器有如下三个：Serial Old 、Parallel Old 、CMS，他们使用的都是标记-压缩的垃圾回收算法。 
<br> <br>5:TLAB（Thread Local Allocation Buffer）-这个技术是用于解决多线程竞争堆内存分配问题的，核心原理是对分配一些连续的内存空间 <br> 
<br>6:卡表-这个技术是用于解决减少老年代的全堆空间扫描 <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 好长的总结，赞一个</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>javaadu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 写得真好，搞清楚了之前没掌握透彻的概念： <br>（1）TLAB是为了避免对象分配时对内存的竞争 
<br>（2）卡表是为了处理minor gc时老年代对新生代的引用，为了避免整堆扫描而提出了卡表的概念 <br> <br>提个问题：JVM中堆内存根系统的物理内存是如何对应的，这个可以从哪里看？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 根系统指的是？<br><br>GC roots分布在HotSpot中的每个子系统里。可以在源码中搜oops_do</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>公子_小白</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">4</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好 <br>请问JVM分代收集新生代对象进入老年代，年龄为什么是15而不是其他的? <br>谢谢 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: HotSpot会在对象头中的标记字段里记录年龄，分配到的空间只有4位，最多只能记录到15</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以配合R大的文章 <br>http://rednaxelafx.iteye.com/blog/1042471 
<br>http://rednaxelafx.iteye.com/blog/174865 <br>http://rednaxelafx.iteye.com/blog/1044951 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/b6/ee3b4ef7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>herome</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师 建议是能画点图吗 😂 每一篇都是文字。 
相信画了图 不仅能让文章通俗易懂，也能让老师的文笔更好。 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLgXj6Axr2aRE3ZwickSicNhTlzP7mlevGBjZulTZlTTOyPHwLpN21Eu7RJDicWMDcBnhuRSN5IOuBWA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>愤怒的虾干</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1、当默认开启动态分配时，若ALIVE_OBJECT_SIZE小于33M几乎无FULL 
GC，大于则出现FULL GC。动态分配时Eden区大小不能小于Survivor区，即最少为新生代内存的1/3，单个Survivor区最大为新生代内存的1/3。故当ALIVE_OBJECT_SIZE大于33M时，Survivor区小于ALIVE_OBJECT_SIZE，导致Minor 
GC时需要复制到to区的数据大于to区容量，从而使得一部分数据提前晋升到老年区，多次提前晋升导致老年区无多余空间从而导致Full GC；当ALIVE_OBJECT_SIZE小于33M时，Survivor区容量总是近似的接近ALIVE_OBJECT_SIZE大小，使得每次Minor 
GC有效对象都可以复制到Survivor区，而晋升到老年代的对象大多是年龄达到次数要求，短期内不会挤满老年代空间，在有限时间内运行结束不会引发Full GC。 <br>2、当-XX:-UsePSAdaptiveSurvivorSizePolicy 
or -XX:SurvivorRatio=N关闭动态分配或指定Eden、Survivor比例时，只要ALIVE_OBJECT_SIZE小于Survivor容量，有限时间运行结束不会引发Full 
GC。反之会导致Full GC。 <br>@郑老师 是否是这样？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>公子_小白</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">2</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0"> 多谢老师的回复 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>西兹兹</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师好，请问java8开始之后的元数据区的回收是如何呢？这部分属于堆外内存吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/48/df/0ecd8c36.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>多巴胺老邮...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 郑老师您好 ！ 一直想问问CMS收集器中并发标记这一个步骤的作用是什么 
？ 为什么还要在初始标记的基础上多进行一次Roots Tracing呢？ 希望您能有空能够回复下 thx <br> </div> <!----> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/e4/27/73359af3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>骑车吃火锅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问老师，java类是如何被卸载的？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Leon 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师你好，写屏障不会判断引用是否指向新生代的对象，这里会不会提高MinorGC的成本呢？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 通过GC_roots探索存活对象的时候，有的对象在新生代，有的对象在老年代。如果当前对象处在老年代而且在赃卡中，需要继续深度遍历对象。若不在赃卡中，就没必要进一步深度遍历下去了。不知道我的理解对不？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的。卡表就是为了避免探索整个老年代，而只将脏表中的对象作为GC 
roots。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/76/09/cf7513c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>nero</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这也太狠了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/19/49/9452b2fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Theodore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师您好，我想咨询一下，你是否研究过类的GC。 <br>在大量反射、动态代理，CGLib等Bytecode框架、动态生成jsp 
等动态类对象（非实例对象）在jdk1.8中是否是使用MethodHandle实现的？这些动态类的GC细节能给我提供点学习资料吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/56/41/050144c7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Jadic</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> hi，想了解下，当前线程在申请TLAB的时候是如何决定本次申请的空间大小的，如何尽量不浪费又少申请次数？谢谢。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/4f/7d/930b2957.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>XuYJ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> cms不是标记清除吗 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>rakitten</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有两个问题想请教一下郑老师： <br>1、介绍GC的文档很多，我有个疑问：GC的代码哪里能看到？ <br>2、我们的后台服务一天内偶尔出现一次YGC耗时很长的情况（超过100ms，正常只有20ms），而且很难复现。我在想，能不能在GC发生的时候，触发一个Linux脚本，记录现场的线程信息以及堆栈信息 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/27/54/d38c34a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小泷哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 可以这么理解吗： <br>1、卡表记录老年代执行新生代的引用 <br>2、老年代的引用变更都会被当做堆新生代的引用，记录在卡表中。 
<br>3、只需要在老年代GC的时候，执行一次minor GC就行了，清理card table(包括CMS和G1)。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>life 
is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 记载来自一个刚刚迈进程序世界的coder <br> <br>java对象的生存周期 <br> <br>大部分对象的生命周期都很短，小部分对象的生命周期很长。 
<br> <br>因为这个特点，可以对jvm内存分代，不同代采用不同的回收方式。 <br> <br>年轻代要采用频繁的回收方式，快速回收大部分垃圾。老年代则采用不频繁但彻底的回收方式。 
<br> <br>JVM堆的划分 <br> <br>因为对象以上的特点，将堆分为两个代，老年代和新生代。新生代分为Eden和两个Survivor区。可以使用参数 “”，会动态的根据对象的生成速率以及survivor区的使用情况，调整Eden区和survivor区的比例。也可以使用参数“”，来固定Eden和survivor的比例。 
<br> <br>如何保证内存分配的线程安全 <br> <br>堆是共享的，所有的线程都会在堆上分配内存，那么jvm是如何保证内存分配是线程安全的？答案是，每个线程都会有TLAB(thread 
local allocation buffer)，这个是线程私有的。首先会在TLAB上分配，如果TLAB不够用，就需要通过加锁的方式，申请TLAB。 <br> <br>Eden区满了 
<br> <br>触发minor GC，eden和from依旧存活的对象会放置到to区。然后交换from to指针的指向。其中达到经历过一定回收次数的对象将会被晋升到老年代，对应JVM参数[]。同时如果也配置了[]参数，单个survivor区占用超过50%，经历次数较高的对象也会晋升到老年代。 
<br> <br>先提前说一个结论，minor GC有一个好处，发生GC时不会遍历堆内存，只会遍历Eden+survivor区！讲道理，老年代很可能拥有Eden+survivor区对象的引用，那minor 
GC只遍历年轻代，是怎么做到GC的呢？ <br> <br>卡表 <br> <br>HotSpot会将堆分割成一个个512字节大小的卡，然后维护一张卡表，每个卡在表中占据一个卡位。 <br> 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/57/449e76fb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QlDoors</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> &lt; 1/2 Suvivors 时，不会发生Full 
GC </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li>', 0, 'full_html', 'zh-hans', 33, 33) 
 {executed in 5 msec}
2020-11-19 20:16:29.943 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.945 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:29.948 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.951 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:29.957 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 33, 'https://static001.geekbang.org/resource/image/b8/67/b88dfa407127f119d743d5a8d4881567.jpeg', 
33) 
 {executed in 0 msec}
2020-11-19 20:16:29.963 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.965 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:29.972 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 33, 'https://static001.geekbang.org/resource/image/b8/67/b88dfa407127f119d743d5a8d4881567.jpeg', 
33) 
 {executed in 1 msec}
2020-11-19 20:16:29.978 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.980 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:16:29.986 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 33, 33) 
 {executed in 1 msec}
2020-11-19 20:16:29.992 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.994 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:16:30.000 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 33, 33) 
 {executed in 0 msec}
2020-11-19 20:16:30.006 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497154737482603' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:16:30.007 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:47.918 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497154737482603' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:16:47.924 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:47.928 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('497154737482603', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:16:47.930 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('497154737482603', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:16:47.932 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|67            |
|--------------|

2020-11-19 20:16:47.951 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497154737482603' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:16:47.952 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:49.217 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497154737482603' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:16:49.219 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:49.222 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('497154737482603', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:16:49.223 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('497154737482603', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:16:49.225 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|68            |
|--------------|

2020-11-19 20:16:49.242 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='497154737482603' 
 {executed in 1 msec}
2020-11-19 20:16:49.244 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:49.248 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788209, 1) 
 {executed in 1 msec}
2020-11-19 20:16:49.250 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788209, 1) 
 {executed in 0 msec}
2020-11-19 20:16:49.251 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|34            |
|--------------|

2020-11-19 20:16:49.262 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd45960bc-c9a6-46fa-baa0-377d438d7b1c', 
34) 
 {executed in 1 msec}
2020-11-19 20:16:49.264 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd45960bc-c9a6-46fa-baa0-377d438d7b1c', 34) 
 {executed in 0 msec}
2020-11-19 20:16:49.266 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|34            |
|--------------|

2020-11-19 20:16:49.285 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=34, revision_default=1, revision_timestamp=1605788209, 
revision_uid=1 where vid=34 
 {executed in 1 msec}
2020-11-19 20:16:49.293 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.294 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:49.301 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '497154737482603', 'zh-hans', 34, 34) 
 {executed in 0 msec}
2020-11-19 20:16:49.308 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.310 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:49.316 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '497154737482603', 'zh-hans', 34, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.326 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=34 
 {executed in 2 msec}
2020-11-19 20:16:49.327 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:16:49.331 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=34 
 {executed in 1 msec}
2020-11-19 20:16:49.333 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:16:49.339 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 34, 0, 0, 32, 0, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.346 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.347 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:49.351 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.353 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:49.362 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>你应该听说过这么一句话：免费的其实是最贵的。</p> <p>Java 虚拟机的自动内存管理，将原本需要由开发人员手动回收的内存，交给垃圾回收器来自动回收。不过既然是自动机制，肯定没法做到像手动回收那般精准高效 
[1] ，而且还会带来不少与垃圾回收实现相关的问题。</p> <p>接下来的两篇，我们会深入探索 Java 虚拟机中的垃圾回收器。今天这一篇，我们来回顾一下垃圾回收的基础知识。</p> 
<h2>引用计数法与可达性分析</h2> <p>垃圾回收，顾名思义，便是将已经分配出去的，但却不再使用的内存回收回来，以便能够再次分配。在 Java 虚拟机的语境下，垃圾指的是死亡的对象所占据的堆空间。这里便涉及了一个关键的问题：如何辨别一个对象是存是亡？</p> 
<p>我们先来讲一种古老的辨别方法：引用计数法（reference counting）。它的做法是为每个对象添加一个引用计数器，用来统计指向该对象的引用个数。一旦某个对象的引用计数器为 
0，则说明该对象已经死亡，便可以被回收了。</p> <p>它的具体实现是这样子的：如果有一个引用，被赋值为某一对象，那么将该对象的引用计数器 +1。如果一个指向某一对象的引用，被赋值为其他值，那么将该对象的引用计数器 
-1。也就是说，我们需要截获所有的引用更新操作，并且相应地增减目标对象的引用计数器。</p><!-- [[[read_end]]] --> <p>除了需要额外的空间来存储计数器，以及繁琐的更新操作，引用计数法还有一个重大的漏洞，那便是无法处理循环引用对象。</p> 
<p>举个例子，假设对象 a 与 b 相互引用，除此之外没有其他引用指向 a 或者 b。在这种情况下，a 和 b 实际上已经死了，但由于它们的引用计数器皆不为 0，在引用计数法的心中，这两个对象还活着。因此，这些循环引用对象所占据的空间将不可回收，从而造成了内存泄露。</p> 
<p><img src="https://static001.geekbang.org/resource/image/85/b9/8546a9b3c6660a31ae24bef0ef0a35b9.png" 
alt=""></p> <p>目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（live set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。</p> 
<p>那么什么是 GC Roots 呢？我们可以暂时理解为由堆外指向堆内的引用，一般而言，GC Roots 包括（但不限于）如下几种：</p> <ol> <li>Java 方法栈桢中的局部变量；</li> 
<li>已加载类的静态变量；</li> <li>JNI handles；</li> <li>已启动且未停止的 Java 线程。</li> </ol> <p>可达性分析可以解决引用计数法所不能解决的循环引用问题。举例来说，即便对象 
a 和 b 相互引用，只要从 GC Roots 出发无法到达 a 或者 b，那么可达性分析便不会将它们加入存活对象合集之中。</p> <p>虽然可达性分析的算法本身很简明，但是在实践中还是有不少其他问题需要解决的。</p> 
<p>比如说，在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为 null）或者漏报（将引用设置为未被访问过的对象）。</p> <p>误报并没有什么伤害，Java 
虚拟机至多损失了部分垃圾回收的机会。漏报则比较麻烦，因为垃圾回收器可能回收事实上仍被引用的对象内存。一旦从原引用访问已经被回收了的对象，则很有可能会直接导致 Java 虚拟机崩溃。</p> 
<h2>Stop-the-world 以及安全点</h2> <p>怎么解决这个问题呢？在 Java 虚拟机里，传统的垃圾回收算法采用的是一种简单粗暴的方式，那便是 Stop-the-world，停止其他非垃圾回收线程的工作，直到完成垃圾回收。这也就造成了垃圾回收所谓的暂停时间（GC 
pause）。</p> <p>Java 虚拟机中的 Stop-the-world 是通过安全点（safepoint）机制来实现的。当 Java 虚拟机收到 Stop-the-world 
请求，它便会等待所有的线程都到达安全点，才允许请求 Stop-the-world 的线程进行独占的工作。</p> <p>这篇博客 [2] 还提到了一种比较另类的解释：安全词。一旦垃圾回收线程喊出了安全词，其他非垃圾回收线程便会一一停下。</p> 
<p>当然，安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java 虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。</p> 
<p>举个例子，当 Java 程序通过 JNI 执行本地代码时，如果这段代码不访问 Java 对象、调用 Java 方法或者返回至原 Java 方法，那么 Java 虚拟机的堆栈不会发生改变，也就代表着这段本地代码可以作为同一个安全点。</p> 
<p>只要不离开这个安全点，Java 虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p> <p>由于本地代码需要通过 JNI 的 API 来完成上述三个操作，因此 Java 
虚拟机仅需在 API 的入口处进行安全点检测（safepoint poll），测试是否有其他线程请求停留在安全点里，便可以在必要的时候挂起当前线程。</p> <p>除了执行 JNI 
本地代码外，Java 线程还有其他几种状态：解释执行字节码、执行即时编译器生成的机器码和线程阻塞。阻塞的线程由于处于 Java 虚拟机线程调度器的掌控之下，因此属于安全点。</p> 
<p>其他几种状态则是运行状态，需要虚拟机保证在可预见的时间内进入安全点。否则，垃圾回收线程可能长期处于等待所有线程进入安全点的状态，从而变相地提高了垃圾回收的暂停时间。</p> <p>对于解释执行来说，字节码与字节码之间皆可作为安全点。Java 
虚拟机采取的做法是，当有安全点请求时，执行一条字节码便进行一次安全点检测。</p> <p>执行即时编译器生成的机器码则比较复杂。由于这些代码直接运行在底层硬件之上，不受 Java 虚拟机掌控，因此在生成机器码时，即时编译器需要插入安全点检测，以避免机器码长时间没有安全点检测的情况。HotSpot 
虚拟机的做法便是在生成代码的方法出口以及非计数循环的循环回边（back-edge）处插入安全点检测。</p> <p>那么为什么不在每一条机器码或者每一个机器码基本块处插入安全点检测呢？原因主要有两个。</p> 
<p>第一，安全点检测本身也有一定的开销。不过 HotSpot 虚拟机已经将机器码中安全点检测简化为一个内存访问操作。在有安全点请求的情况下，Java 虚拟机会将安全点检测访问的内存所在的页设置为不可读，并且定义一个 
segfault 处理器，来截获因访问该不可读内存而触发 segfault 的线程，并将它们挂起。</p> <p>第二，即时编译器生成的机器码打乱了原本栈桢上的对象分布状况。在进入安全点时，机器码还需提供一些额外的信息，来表明哪些寄存器，或者当前栈帧上的哪些内存空间存放着指向对象的引用，以便垃圾回收器能够枚举 
GC Roots。</p> <p>由于这些信息需要不少空间来存储，因此即时编译器会尽量避免过多的安全点检测。</p> <p>不过，不同的即时编译器插入安全点检测的位置也可能不同。以 
Graal 为例，除了上述位置外，它还会在计数循环的循环回边处插入安全点检测。其他的虚拟机也可能选取方法入口而非方法出口来插入安全点检测。</p> <p>不管如何，其目的都是在可接受的性能开销以及内存开销之内，避免机器码长时间不进入安全点的情况，间接地减少垃圾回收的暂停时间。</p> 
<p>除了垃圾回收之外，Java 虚拟机其他一些对堆栈内容的一致性有要求的操作也会用到安全点这一机制。我会在涉及的时侯再进行具体的讲解。</p> <h2>垃圾回收的三种方式</h2> 
<p>当标记完所有的存活对象时，我们便可以进行死亡对象的回收工作了。主流的基础回收方式可分为三种。</p> <p>第一种是清除（sweep），即把死亡对象所占据的内存标记为空闲内存，并记录在一个空闲列表（free 
list）之中。当需要新建对象时，内存管理模块便会从该空闲列表中寻找空闲内存，并划分给新建的对象。</p> <p><img src="https://static001.geekbang.org/resource/image/f2/03/f225126be24826658ca5a899fcff5003.png" 
alt=""></p> <p>清除这种回收方式的原理及其简单，但是有两个缺点。一是会造成内存碎片。由于 Java 虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。</p> 
<p>另一个则是分配效率较低。如果是一块连续的内存空间，那么我们可以通过指针加法（pointer bumping）来做分配。而对于空闲列表，Java 虚拟机则需要逐个访问列表中的项，来查找能够放入新建对象的空闲内存。</p> 
<p>第二种是压缩（compact），即把存活的对象聚集到内存区域的起始位置，从而留下一段连续的内存空间。这种做法能够解决内存碎片化的问题，但代价是压缩算法的性能开销。</p> <p><img 
src="https://static001.geekbang.org/resource/image/41/39/415ee8e4aef12ff076b42e41660dad39.png" 
alt=""></p> <p>第三种则是复制（copy），即把内存区域分为两等分，分别用两个指针 from 和 to 来维护，并且只是用 from 指针指向的内存区域来分配内存。当发生垃圾回收时，便把存活的对象复制到 
to 指针指向的内存区域中，并且交换 from 指针和 to 指针的内容。复制这种回收方式同样能够解决内存碎片化的问题，但是它的缺点也极其明显，即堆空间的使用效率极其低下。</p> 
<p><img src="https://static001.geekbang.org/resource/image/47/61/4749cad235deb1542d4ca3b232ebf261.png" 
alt=""></p> <p>当然，现代的垃圾回收器往往会综合上述几种回收方式，综合它们优点的同时规避它们的缺点。在下一篇中我们会详细介绍 Java 虚拟机中垃圾回收算法的具体实现。</p> 
<h2>总结与实践</h2> <p>今天我介绍了垃圾回收的一些基础知识。</p> <p>Java 虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象。它从一系列 GC Roots 
出发，边标记边探索所有被引用的对象。</p> <p>为了防止在标记过程中堆栈的状态发生改变，Java 虚拟机采取安全点机制来实现 Stop-the-world 操作，暂停其他非垃圾回收线程。</p> 
<p>回收死亡对象的内存共有三种方式，分别为：会造成内存碎片的清除、性能开销较大的压缩、以及堆使用效率较低的复制。</p> <p>今天的实践环节，你可以体验一下无安全点检测的计数循环带来的长暂停。你可以分别测单独跑 
foo 方法或者 bar 方法的时间，然后与合起来跑的时间比较一下。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // time java SafepointTestp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> / 你还可以使用如下几个选项 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -XX:+PrintGC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -XX:+PrintGCApplicationStoppedTime </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // -XX:+PrintSafepointStatistics </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // -XX:+UseCountedLoopSafepoints </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class SafepointTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static double sum = 0; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 0x77777777; i++) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += Math.sqrt(i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void bar() { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 50_000_000; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Object().hashCode(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Thread(SafepointTest::foo).start(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Thread(SafepointTest::bar).start(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://media.giphy.com/media/EZ8QO0myvsSk/giphy.gif">https://media.giphy.com/media/EZ8QO0myvsSk/giphy.gif</a><br> 
[2] <a href="http://psy-lob-saw.blogspot.com/2015/12/safepoints.html">http://psy-lob-saw.blogspot.com/2015/12/safepoints.html</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 34, 34) 
 {executed in 2 msec}
2020-11-19 20:16:49.374 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.376 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:49.384 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>你应该听说过这么一句话：免费的其实是最贵的。</p> <p>Java 虚拟机的自动内存管理，将原本需要由开发人员手动回收的内存，交给垃圾回收器来自动回收。不过既然是自动机制，肯定没法做到像手动回收那般精准高效 
[1] ，而且还会带来不少与垃圾回收实现相关的问题。</p> <p>接下来的两篇，我们会深入探索 Java 虚拟机中的垃圾回收器。今天这一篇，我们来回顾一下垃圾回收的基础知识。</p> 
<h2>引用计数法与可达性分析</h2> <p>垃圾回收，顾名思义，便是将已经分配出去的，但却不再使用的内存回收回来，以便能够再次分配。在 Java 虚拟机的语境下，垃圾指的是死亡的对象所占据的堆空间。这里便涉及了一个关键的问题：如何辨别一个对象是存是亡？</p> 
<p>我们先来讲一种古老的辨别方法：引用计数法（reference counting）。它的做法是为每个对象添加一个引用计数器，用来统计指向该对象的引用个数。一旦某个对象的引用计数器为 
0，则说明该对象已经死亡，便可以被回收了。</p> <p>它的具体实现是这样子的：如果有一个引用，被赋值为某一对象，那么将该对象的引用计数器 +1。如果一个指向某一对象的引用，被赋值为其他值，那么将该对象的引用计数器 
-1。也就是说，我们需要截获所有的引用更新操作，并且相应地增减目标对象的引用计数器。</p><!-- [[[read_end]]] --> <p>除了需要额外的空间来存储计数器，以及繁琐的更新操作，引用计数法还有一个重大的漏洞，那便是无法处理循环引用对象。</p> 
<p>举个例子，假设对象 a 与 b 相互引用，除此之外没有其他引用指向 a 或者 b。在这种情况下，a 和 b 实际上已经死了，但由于它们的引用计数器皆不为 0，在引用计数法的心中，这两个对象还活着。因此，这些循环引用对象所占据的空间将不可回收，从而造成了内存泄露。</p> 
<p><img src="https://static001.geekbang.org/resource/image/85/b9/8546a9b3c6660a31ae24bef0ef0a35b9.png" 
alt=""></p> <p>目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（live set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。</p> 
<p>那么什么是 GC Roots 呢？我们可以暂时理解为由堆外指向堆内的引用，一般而言，GC Roots 包括（但不限于）如下几种：</p> <ol> <li>Java 方法栈桢中的局部变量；</li> 
<li>已加载类的静态变量；</li> <li>JNI handles；</li> <li>已启动且未停止的 Java 线程。</li> </ol> <p>可达性分析可以解决引用计数法所不能解决的循环引用问题。举例来说，即便对象 
a 和 b 相互引用，只要从 GC Roots 出发无法到达 a 或者 b，那么可达性分析便不会将它们加入存活对象合集之中。</p> <p>虽然可达性分析的算法本身很简明，但是在实践中还是有不少其他问题需要解决的。</p> 
<p>比如说，在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为 null）或者漏报（将引用设置为未被访问过的对象）。</p> <p>误报并没有什么伤害，Java 
虚拟机至多损失了部分垃圾回收的机会。漏报则比较麻烦，因为垃圾回收器可能回收事实上仍被引用的对象内存。一旦从原引用访问已经被回收了的对象，则很有可能会直接导致 Java 虚拟机崩溃。</p> 
<h2>Stop-the-world 以及安全点</h2> <p>怎么解决这个问题呢？在 Java 虚拟机里，传统的垃圾回收算法采用的是一种简单粗暴的方式，那便是 Stop-the-world，停止其他非垃圾回收线程的工作，直到完成垃圾回收。这也就造成了垃圾回收所谓的暂停时间（GC 
pause）。</p> <p>Java 虚拟机中的 Stop-the-world 是通过安全点（safepoint）机制来实现的。当 Java 虚拟机收到 Stop-the-world 
请求，它便会等待所有的线程都到达安全点，才允许请求 Stop-the-world 的线程进行独占的工作。</p> <p>这篇博客 [2] 还提到了一种比较另类的解释：安全词。一旦垃圾回收线程喊出了安全词，其他非垃圾回收线程便会一一停下。</p> 
<p>当然，安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java 虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。</p> 
<p>举个例子，当 Java 程序通过 JNI 执行本地代码时，如果这段代码不访问 Java 对象、调用 Java 方法或者返回至原 Java 方法，那么 Java 虚拟机的堆栈不会发生改变，也就代表着这段本地代码可以作为同一个安全点。</p> 
<p>只要不离开这个安全点，Java 虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p> <p>由于本地代码需要通过 JNI 的 API 来完成上述三个操作，因此 Java 
虚拟机仅需在 API 的入口处进行安全点检测（safepoint poll），测试是否有其他线程请求停留在安全点里，便可以在必要的时候挂起当前线程。</p> <p>除了执行 JNI 
本地代码外，Java 线程还有其他几种状态：解释执行字节码、执行即时编译器生成的机器码和线程阻塞。阻塞的线程由于处于 Java 虚拟机线程调度器的掌控之下，因此属于安全点。</p> 
<p>其他几种状态则是运行状态，需要虚拟机保证在可预见的时间内进入安全点。否则，垃圾回收线程可能长期处于等待所有线程进入安全点的状态，从而变相地提高了垃圾回收的暂停时间。</p> <p>对于解释执行来说，字节码与字节码之间皆可作为安全点。Java 
虚拟机采取的做法是，当有安全点请求时，执行一条字节码便进行一次安全点检测。</p> <p>执行即时编译器生成的机器码则比较复杂。由于这些代码直接运行在底层硬件之上，不受 Java 虚拟机掌控，因此在生成机器码时，即时编译器需要插入安全点检测，以避免机器码长时间没有安全点检测的情况。HotSpot 
虚拟机的做法便是在生成代码的方法出口以及非计数循环的循环回边（back-edge）处插入安全点检测。</p> <p>那么为什么不在每一条机器码或者每一个机器码基本块处插入安全点检测呢？原因主要有两个。</p> 
<p>第一，安全点检测本身也有一定的开销。不过 HotSpot 虚拟机已经将机器码中安全点检测简化为一个内存访问操作。在有安全点请求的情况下，Java 虚拟机会将安全点检测访问的内存所在的页设置为不可读，并且定义一个 
segfault 处理器，来截获因访问该不可读内存而触发 segfault 的线程，并将它们挂起。</p> <p>第二，即时编译器生成的机器码打乱了原本栈桢上的对象分布状况。在进入安全点时，机器码还需提供一些额外的信息，来表明哪些寄存器，或者当前栈帧上的哪些内存空间存放着指向对象的引用，以便垃圾回收器能够枚举 
GC Roots。</p> <p>由于这些信息需要不少空间来存储，因此即时编译器会尽量避免过多的安全点检测。</p> <p>不过，不同的即时编译器插入安全点检测的位置也可能不同。以 
Graal 为例，除了上述位置外，它还会在计数循环的循环回边处插入安全点检测。其他的虚拟机也可能选取方法入口而非方法出口来插入安全点检测。</p> <p>不管如何，其目的都是在可接受的性能开销以及内存开销之内，避免机器码长时间不进入安全点的情况，间接地减少垃圾回收的暂停时间。</p> 
<p>除了垃圾回收之外，Java 虚拟机其他一些对堆栈内容的一致性有要求的操作也会用到安全点这一机制。我会在涉及的时侯再进行具体的讲解。</p> <h2>垃圾回收的三种方式</h2> 
<p>当标记完所有的存活对象时，我们便可以进行死亡对象的回收工作了。主流的基础回收方式可分为三种。</p> <p>第一种是清除（sweep），即把死亡对象所占据的内存标记为空闲内存，并记录在一个空闲列表（free 
list）之中。当需要新建对象时，内存管理模块便会从该空闲列表中寻找空闲内存，并划分给新建的对象。</p> <p><img src="https://static001.geekbang.org/resource/image/f2/03/f225126be24826658ca5a899fcff5003.png" 
alt=""></p> <p>清除这种回收方式的原理及其简单，但是有两个缺点。一是会造成内存碎片。由于 Java 虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。</p> 
<p>另一个则是分配效率较低。如果是一块连续的内存空间，那么我们可以通过指针加法（pointer bumping）来做分配。而对于空闲列表，Java 虚拟机则需要逐个访问列表中的项，来查找能够放入新建对象的空闲内存。</p> 
<p>第二种是压缩（compact），即把存活的对象聚集到内存区域的起始位置，从而留下一段连续的内存空间。这种做法能够解决内存碎片化的问题，但代价是压缩算法的性能开销。</p> <p><img 
src="https://static001.geekbang.org/resource/image/41/39/415ee8e4aef12ff076b42e41660dad39.png" 
alt=""></p> <p>第三种则是复制（copy），即把内存区域分为两等分，分别用两个指针 from 和 to 来维护，并且只是用 from 指针指向的内存区域来分配内存。当发生垃圾回收时，便把存活的对象复制到 
to 指针指向的内存区域中，并且交换 from 指针和 to 指针的内容。复制这种回收方式同样能够解决内存碎片化的问题，但是它的缺点也极其明显，即堆空间的使用效率极其低下。</p> 
<p><img src="https://static001.geekbang.org/resource/image/47/61/4749cad235deb1542d4ca3b232ebf261.png" 
alt=""></p> <p>当然，现代的垃圾回收器往往会综合上述几种回收方式，综合它们优点的同时规避它们的缺点。在下一篇中我们会详细介绍 Java 虚拟机中垃圾回收算法的具体实现。</p> 
<h2>总结与实践</h2> <p>今天我介绍了垃圾回收的一些基础知识。</p> <p>Java 虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象。它从一系列 GC Roots 
出发，边标记边探索所有被引用的对象。</p> <p>为了防止在标记过程中堆栈的状态发生改变，Java 虚拟机采取安全点机制来实现 Stop-the-world 操作，暂停其他非垃圾回收线程。</p> 
<p>回收死亡对象的内存共有三种方式，分别为：会造成内存碎片的清除、性能开销较大的压缩、以及堆使用效率较低的复制。</p> <p>今天的实践环节，你可以体验一下无安全点检测的计数循环带来的长暂停。你可以分别测单独跑 
foo 方法或者 bar 方法的时间，然后与合起来跑的时间比较一下。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // time java SafepointTestp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> / 你还可以使用如下几个选项 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -XX:+PrintGC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -XX:+PrintGCApplicationStoppedTime </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // -XX:+PrintSafepointStatistics </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // -XX:+UseCountedLoopSafepoints </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class SafepointTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static double sum = 0; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 0x77777777; i++) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += Math.sqrt(i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void bar() { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 50_000_000; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Object().hashCode(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Thread(SafepointTest::foo).start(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Thread(SafepointTest::bar).start(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://media.giphy.com/media/EZ8QO0myvsSk/giphy.gif">https://media.giphy.com/media/EZ8QO0myvsSk/giphy.gif</a><br> 
[2] <a href="http://psy-lob-saw.blogspot.com/2015/12/safepoints.html">http://psy-lob-saw.blogspot.com/2015/12/safepoints.html</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 34, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.391 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=34 
 {executed in 1 msec}
2020-11-19 20:16:49.393 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:16:49.396 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=34 
 {executed in 1 msec}
2020-11-19 20:16:49.398 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:16:49.405 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788209, 1605788209, 1, 'zh-hans', 0, 1, 1, 
0, '11丨垃圾回收（上）', 1, 34, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.419 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=34 
 {executed in 1 msec}
2020-11-19 20:16:49.422 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:16:49.431 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788209, 1605788209, 1, 'zh-hans', 0, 
1, 1, 0, '11丨垃圾回收（上）', 'book', 1, 34, 34) 
 {executed in 0 msec}
2020-11-19 20:16:49.438 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=34 
 {executed in 2 msec}
2020-11-19 20:16:49.441 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:16:49.446 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.448 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:16:49.457 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/33141fddfc535b22db45d60ba8d0353d?bkt=en-4d166c071887761596d1004a3a3cf977635da60715e8fd5ac698e4000a963ef98bee5a112b686bdf&fid=3757516097-778750-751360983817322&time=1605788207&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ZhTkanWJ9vVbdxbYjO%2FCggxVH6w%3D&to=92&size=5873232&sta_dx=5873232&sta_cs=4364&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5873232&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-25b3284b0a6e97e9ad7ee3a94ae22bbf6e842500a4f83b7f72075f4ff1d977f7700c68c139e2312f&sl=76480590&expires=8h&rt=pr&r=584988946&mlogid=7510879537606156637&vbdid=64799653&fin=11%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510879537606156637&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be426d2f0ff7b79a01431aae7a00e79feb305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=11%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
34, 34) 
 {executed in 2 msec}
2020-11-19 20:16:49.476 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.478 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:16:49.485 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/33141fddfc535b22db45d60ba8d0353d?bkt=en-4d166c071887761596d1004a3a3cf977635da60715e8fd5ac698e4000a963ef98bee5a112b686bdf&fid=3757516097-778750-751360983817322&time=1605788207&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ZhTkanWJ9vVbdxbYjO%2FCggxVH6w%3D&to=92&size=5873232&sta_dx=5873232&sta_cs=4364&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5873232&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-25b3284b0a6e97e9ad7ee3a94ae22bbf6e842500a4f83b7f72075f4ff1d977f7700c68c139e2312f&sl=76480590&expires=8h&rt=pr&r=584988946&mlogid=7510879537606156637&vbdid=64799653&fin=11%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510879537606156637&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be426d2f0ff7b79a01431aae7a00e79feb305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=11%E4%B8%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
34, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.494 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=34 
 {executed in 2 msec}
2020-11-19 20:16:49.495 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:49.499 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.501 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:49.516 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢，此篇可用通俗易懂来形容，其他同学问的问题也很棒！ 
<br> <br>小结： <br> <br>1:垃圾回收-核心工作就是回收垃圾，哪关键点回来了。什么是垃圾？这个垃圾需要分类嘛？怎么定位垃圾？怎么回收垃圾？回收垃圾的方法都有哪些？他们都有什么优缺点？另外，就是我们为什么要学习垃圾回收？ 
<br> <br>2:站在JVM的视角来看 <br>垃圾-就是无用对象所占用的堆内存空间 <br>貌似不需要垃圾分类，识别垃圾并回收就行 <br>定位垃圾，是垃圾回收的关键点 <br> 
<br>晚安💤，明天继续写 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>旭东</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
赞，这种循序渐进的讲法，不知道了怎么工作，还知道了为啥要设计成这样，Why和what都和谐的在一起讲了 </div> <!----> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>茶底</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">23</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师下一期能讲一下g1算法吗。讲深一点😁 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢，此篇可用通俗易懂来形容，其他同学问的问题也很棒！ <br> <br>小结： 
<br> <br>1:垃圾回收-核心工作就是回收垃圾，哪关键点回来了。什么是垃圾？这个垃圾需要分类嘛？怎么定位垃圾？怎么回收垃圾？回收垃圾的方法都有哪些？他们都有什么优缺点？另外，就是我们为什么要学习垃圾回收？ 
<br> <br>2:站在JVM的视角来看 <br> <br>垃圾-就是无用对象所占用的堆内存空间 <br> <br>垃圾分类-貌似不需要垃圾分类，识别垃圾并回收就行 <br> <br>定位垃圾-是垃圾回收的关键点，无用的对象占用的堆空间即是垃圾，那就需要先定位无用的对象，这里的无用是不再使用的意思，咋判断呢？文中介绍了两种方法，计数法和标记法（祥看原文）核心在于能定位出无用的对象，后出现的方法往往比早出现的更好一点，这里也一样，标记法能解决计数法，解决不了的循环引用不能回收的问题，但是也存在其他的问题，误报和漏报的问题，误报浪费点垃圾回收的机会浪费点空间，漏报在多线程并发工作时可能会死JVM的，所以，比较严重，所以，JVM采用了简单粗暴的stop-the-world的方式来对待，所以，老年代的回收有卡顿的现象 
<br> <br>怎么回收垃圾-定位出垃圾，回收就是一个简单的事情了，当然也非常关键，把要回收的堆内存空间标记为可继续使用就行，下次有新对象能在此空间创建就行 <br> <br>回收垃圾的方法-文中介绍了三种，清除、压缩、复制 
<br> <br>清除法-简单，但易产生碎片，可能总空间够但分配不了的问题 <br>压缩法-能解决清除法的问题，但是复杂且耗性能 <br>复制法-折衷一些，但是空间利用率低，总之，各有千秋 
<br> <br>为什么要学-这个最容易，因为面试需要、装逼需要、升职加薪需要、人类天生好奇、还有免于被鄙视及可以鄙视其他人 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/zZiamzXOang0L4iaXa37k1wM8TqU6cqkQNCKZ9XUBWXPFndtvkXrtRGMLPur4zIvoYMHaicIU1fFibKTZJo8Lmnxug/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>suynan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 安全点的这个地方，看得我是一脸懵逼 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 疑问❓ <br>1:JVM的stop-the-world机制非常不友好，有哪些解决之道？原理是什么？ 
<br>2:压测时出现频繁的gc容易理解，但是有时出现毛刺是因为什么呢？ <br>3:fullgc有卡顿，对性能很不利，怎么避免呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
1. 采用并行GC可以减少需要STW的时间。它们会在即时编译器生成的代码中加入写屏障或者读屏障。<br><br>2. Y轴应该是时间，那毛刺就是长暂停。一般Full GC就会造成长暂停。<br><br>3. 
通过调整新生代大小，使对象在其生命周期内都待在新生代中。这样一来，Minor GC时就可以收集完这些短命对象了。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>彩色的沙漠</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> @正是那朵玫瑰老师有几个不明白的地方，误报和漏报不太明白： <br>1、假设A引用开始指向A1对象：A------&gt;A1,按老师说的误报就是将引用A指向null：A------&gt;null，那么此时A1对象不是没有引用了，不就可以垃圾回收了么，为什么会错过垃圾回收的机会呢？ 
<br>2、漏报，是将A引用指向一个未被访问的对象假设对象为B：A-----&gt;B,此时A引用原来指向的对象应该没有引用了吧，为什么会垃圾回收器可能会回收事实上仍被引用的对象呢？ 
<br> <br>2018-08-15 <br> <br>&nbsp;作者回复 <br> <br>这里指的是，GC已经标记完成，然后其他线程进行修改的情况(也是并发GC所要解决的问题)。 
<br> <br>当GC标记完成，还未开始回收时，你更新了其中一个引用，使之指向null，那么原来指向的对象本可以被回收的。 <br> <br>如果指向一个新的对象，这个对象可没有被标记为不能回收，垃圾回收器就直接给回收掉了 
<br> <br>老师我也有和@正是那朵玫瑰一样的问题，看了老师的讲解，还是不太明白。GC标记完成，那GC标记的是引用还是具体的堆空间对象。如果标记的具体的堆空间对象，并不会造成GC并发问题，误报和漏报，改变的是引用关系。请老师解答，谢谢！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，例子里的foo方法中的for循环，其中i变量类型我从int型改成long型后，长暂停的现象不存在了，请问是为何？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这是C2一个诡异的地方。<br><br>for (int i=start; i&lt;limit; i++) {..}<br><br>对于int类型的循环变量i，如果满足 
1) 基于该循环变量的循环出口只有一个，即i &lt; limit，2) 循环变量随着迭代的增量为常数，例子中i++即增量为1，以及循环变量的上限(当增量为负数时则是下限)为循环无关的，即limit应是循环无关，那么C2会将其判断成计数循环(counted 
loop)，然后默认不插入safepoint。<br><br>而对于long类型的循环变量，C2直接识别为非计数循环，需要插入safepoint。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-31 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 误报和漏报，我觉得可惜这样理解，垃圾回收是先标记活的对象，后回收死的对象，那么如果标记好后，其它线程产生了垃圾，即将活的变死了，这种内存是不会释放的。另外，如果这时产生了新对象，由于没被标记为活的，所以被释放了，这就危险了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/36/fd46331c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Jussi Lee</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 一、垃圾回收算法 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、引用计数法（文中已经介绍，主要的缺点是无法处理循环引用；在每次引用的产生和消除的时候，会伴随着一个加法或者减法的操作，对性能有一定的影响） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、标记清除法（从根节点出发开始所有可达的对象，未被标记的就是垃圾对象。主要缺点是产生空间碎片） <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、复制算法（将原空间分为两块，每次使用其中一块，在垃圾回收时，进行复制，然后转换使用的内存空间。主要的缺点是将系统的内存折半。主要适用于存活对象少，垃圾对象多的情况下） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、标记压缩法（从根出发对所有可达对象进行一次标记，然后进行压缩。最后进行清理） <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、分代算法（每一种垃圾回收算法都有其优缺点。分代算法是根据对象的特点分成几块，新建的对象放入新生代区域，当一个对象经历了几次复制后还存活则放入老年代。老年代因为对象存活率高复制算法不适用，因此采取标记清除或者标记压缩） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6、分区算法（把堆空间划分为连续的不同小区间。降低了GC产生的影响） </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/15/16/0aae41a1.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>no13bus</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 昨天看书正好看到这章节，真的不错 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>茶底</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师下一期能讲一下g1算法吗。讲深一点😁 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/a0/9f/71345740.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>黑崽</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 第二，即时编译器生成的机器码打乱了原本栈桢上的对象分布状况。没明白这个原因。第一个原因中解释，只要去访问一个内存地址就可以知道是不是要暂停了，那我只有判断完暂停以后再去恢复寄存器中状态不就可以了？反正只有一次，这个打乱不打乱有什么区别呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在GC时，我们需要知道哪个寄存器，以及哪个栈内存空间存放了指向对象的引用。这个信息需要记录下来。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fc/66/d7f7ad77.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>风动静泉</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有个内存泄露相关的问题想请教一下老师。 <br>基本描述: <br>一个单线程的程序中，在其run方法中有局部变量（map 
list等类型），也使用了该线程类ThreadDemo的全局变量（map），线程中会去执行ftp任务（同步）。 <br> <br>问题： <br>如果ftp任务由于某种原因阻塞了，调用ftp任务的线程ThreadDemo中的变量（局部变量和全局变量）会变成不可达状态吗？还是说此时线程也阻塞，会导致内存泄露？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/fe/c5/3467cf94.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>正是那朵玫...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师有几个不明白的地方，误报和漏报不太明白： <br>1、假设A引用开始指向A1对象：A------&gt;A1,按老师说的误报就是将引用A指向null：A------&gt;null，那么此时A1对象不是没有引用了，不就可以垃圾回收了么，为什么会错过垃圾回收的机会呢？ 
<br>2、漏报，是将A引用指向一个未被访问的对象假设对象为B：A-----&gt;B,此时A引用原来指向的对象应该没有引用了吧，为什么会垃圾回收器可能会回收事实上仍被引用的对象呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这里指的是，GC已经标记完成，然后其他线程进行修改的情况(也是并发GC所要解决的问题)。<br><br>当GC标记完成，还未开始回收时，你更新了其中一个引用，使之指向null，那么原来指向的对象本可以被回收的。<br><br>如果指向一个新的对象，这个对象可没有被标记为不能回收，垃圾回收器就直接给回收掉了</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 猜一下，作业里面的应该是Math.log(10) </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 厉害！这都看得出来！是Math.log10(i)，不过这个时间太长了，我新版本的代码是sqrt 。然后不知怎么给回滚到这个log10，而且还是乱的</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/18/07ee18ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>明天更美好</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 总算可以听的懂了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/b3/df/dc53c067.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>闪客sun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好，关于“在多线程环境下，其他线程可能会更新已经访问过的对象中的引用”，这句没太理解，网上查资料也没找到好答案。您可以帮我看看这块该怎么理解么？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>fcb的鱼</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为啥作为GC Roots 的对象是那几种呢，这里有什么讲究吗？！ </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/fb/af/5a9d2b58.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lyerox</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 正常理解，漏报是指将本来可回收对象这一次检查漏报了，而误报是将不是垃圾的对象误报成可回收对象。这样的话应该是误报的影响大才对啊。 
<br>这里漏报 和 误报应该说清楚，什么像什么上报什么吧？ </div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
34, 34) 
 {executed in 6 msec}
2020-11-19 20:16:49.529 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.531 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:16:49.547 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢，此篇可用通俗易懂来形容，其他同学问的问题也很棒！ 
<br> <br>小结： <br> <br>1:垃圾回收-核心工作就是回收垃圾，哪关键点回来了。什么是垃圾？这个垃圾需要分类嘛？怎么定位垃圾？怎么回收垃圾？回收垃圾的方法都有哪些？他们都有什么优缺点？另外，就是我们为什么要学习垃圾回收？ 
<br> <br>2:站在JVM的视角来看 <br>垃圾-就是无用对象所占用的堆内存空间 <br>貌似不需要垃圾分类，识别垃圾并回收就行 <br>定位垃圾，是垃圾回收的关键点 <br> 
<br>晚安💤，明天继续写 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>旭东</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
赞，这种循序渐进的讲法，不知道了怎么工作，还知道了为啥要设计成这样，Why和what都和谐的在一起讲了 </div> <!----> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>茶底</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">23</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师下一期能讲一下g1算法吗。讲深一点😁 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢，此篇可用通俗易懂来形容，其他同学问的问题也很棒！ <br> <br>小结： 
<br> <br>1:垃圾回收-核心工作就是回收垃圾，哪关键点回来了。什么是垃圾？这个垃圾需要分类嘛？怎么定位垃圾？怎么回收垃圾？回收垃圾的方法都有哪些？他们都有什么优缺点？另外，就是我们为什么要学习垃圾回收？ 
<br> <br>2:站在JVM的视角来看 <br> <br>垃圾-就是无用对象所占用的堆内存空间 <br> <br>垃圾分类-貌似不需要垃圾分类，识别垃圾并回收就行 <br> <br>定位垃圾-是垃圾回收的关键点，无用的对象占用的堆空间即是垃圾，那就需要先定位无用的对象，这里的无用是不再使用的意思，咋判断呢？文中介绍了两种方法，计数法和标记法（祥看原文）核心在于能定位出无用的对象，后出现的方法往往比早出现的更好一点，这里也一样，标记法能解决计数法，解决不了的循环引用不能回收的问题，但是也存在其他的问题，误报和漏报的问题，误报浪费点垃圾回收的机会浪费点空间，漏报在多线程并发工作时可能会死JVM的，所以，比较严重，所以，JVM采用了简单粗暴的stop-the-world的方式来对待，所以，老年代的回收有卡顿的现象 
<br> <br>怎么回收垃圾-定位出垃圾，回收就是一个简单的事情了，当然也非常关键，把要回收的堆内存空间标记为可继续使用就行，下次有新对象能在此空间创建就行 <br> <br>回收垃圾的方法-文中介绍了三种，清除、压缩、复制 
<br> <br>清除法-简单，但易产生碎片，可能总空间够但分配不了的问题 <br>压缩法-能解决清除法的问题，但是复杂且耗性能 <br>复制法-折衷一些，但是空间利用率低，总之，各有千秋 
<br> <br>为什么要学-这个最容易，因为面试需要、装逼需要、升职加薪需要、人类天生好奇、还有免于被鄙视及可以鄙视其他人 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/zZiamzXOang0L4iaXa37k1wM8TqU6cqkQNCKZ9XUBWXPFndtvkXrtRGMLPur4zIvoYMHaicIU1fFibKTZJo8Lmnxug/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>suynan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 安全点的这个地方，看得我是一脸懵逼 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 疑问❓ <br>1:JVM的stop-the-world机制非常不友好，有哪些解决之道？原理是什么？ 
<br>2:压测时出现频繁的gc容易理解，但是有时出现毛刺是因为什么呢？ <br>3:fullgc有卡顿，对性能很不利，怎么避免呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
1. 采用并行GC可以减少需要STW的时间。它们会在即时编译器生成的代码中加入写屏障或者读屏障。<br><br>2. Y轴应该是时间，那毛刺就是长暂停。一般Full GC就会造成长暂停。<br><br>3. 
通过调整新生代大小，使对象在其生命周期内都待在新生代中。这样一来，Minor GC时就可以收集完这些短命对象了。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>彩色的沙漠</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> @正是那朵玫瑰老师有几个不明白的地方，误报和漏报不太明白： <br>1、假设A引用开始指向A1对象：A------&gt;A1,按老师说的误报就是将引用A指向null：A------&gt;null，那么此时A1对象不是没有引用了，不就可以垃圾回收了么，为什么会错过垃圾回收的机会呢？ 
<br>2、漏报，是将A引用指向一个未被访问的对象假设对象为B：A-----&gt;B,此时A引用原来指向的对象应该没有引用了吧，为什么会垃圾回收器可能会回收事实上仍被引用的对象呢？ 
<br> <br>2018-08-15 <br> <br>&nbsp;作者回复 <br> <br>这里指的是，GC已经标记完成，然后其他线程进行修改的情况(也是并发GC所要解决的问题)。 
<br> <br>当GC标记完成，还未开始回收时，你更新了其中一个引用，使之指向null，那么原来指向的对象本可以被回收的。 <br> <br>如果指向一个新的对象，这个对象可没有被标记为不能回收，垃圾回收器就直接给回收掉了 
<br> <br>老师我也有和@正是那朵玫瑰一样的问题，看了老师的讲解，还是不太明白。GC标记完成，那GC标记的是引用还是具体的堆空间对象。如果标记的具体的堆空间对象，并不会造成GC并发问题，误报和漏报，改变的是引用关系。请老师解答，谢谢！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，例子里的foo方法中的for循环，其中i变量类型我从int型改成long型后，长暂停的现象不存在了，请问是为何？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这是C2一个诡异的地方。<br><br>for (int i=start; i&lt;limit; i++) {..}<br><br>对于int类型的循环变量i，如果满足 
1) 基于该循环变量的循环出口只有一个，即i &lt; limit，2) 循环变量随着迭代的增量为常数，例子中i++即增量为1，以及循环变量的上限(当增量为负数时则是下限)为循环无关的，即limit应是循环无关，那么C2会将其判断成计数循环(counted 
loop)，然后默认不插入safepoint。<br><br>而对于long类型的循环变量，C2直接识别为非计数循环，需要插入safepoint。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-31 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 误报和漏报，我觉得可惜这样理解，垃圾回收是先标记活的对象，后回收死的对象，那么如果标记好后，其它线程产生了垃圾，即将活的变死了，这种内存是不会释放的。另外，如果这时产生了新对象，由于没被标记为活的，所以被释放了，这就危险了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/36/fd46331c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Jussi Lee</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 一、垃圾回收算法 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、引用计数法（文中已经介绍，主要的缺点是无法处理循环引用；在每次引用的产生和消除的时候，会伴随着一个加法或者减法的操作，对性能有一定的影响） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、标记清除法（从根节点出发开始所有可达的对象，未被标记的就是垃圾对象。主要缺点是产生空间碎片） <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、复制算法（将原空间分为两块，每次使用其中一块，在垃圾回收时，进行复制，然后转换使用的内存空间。主要的缺点是将系统的内存折半。主要适用于存活对象少，垃圾对象多的情况下） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、标记压缩法（从根出发对所有可达对象进行一次标记，然后进行压缩。最后进行清理） <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、分代算法（每一种垃圾回收算法都有其优缺点。分代算法是根据对象的特点分成几块，新建的对象放入新生代区域，当一个对象经历了几次复制后还存活则放入老年代。老年代因为对象存活率高复制算法不适用，因此采取标记清除或者标记压缩） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6、分区算法（把堆空间划分为连续的不同小区间。降低了GC产生的影响） </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/15/16/0aae41a1.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>no13bus</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 昨天看书正好看到这章节，真的不错 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>茶底</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师下一期能讲一下g1算法吗。讲深一点😁 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/a0/9f/71345740.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>黑崽</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 第二，即时编译器生成的机器码打乱了原本栈桢上的对象分布状况。没明白这个原因。第一个原因中解释，只要去访问一个内存地址就可以知道是不是要暂停了，那我只有判断完暂停以后再去恢复寄存器中状态不就可以了？反正只有一次，这个打乱不打乱有什么区别呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在GC时，我们需要知道哪个寄存器，以及哪个栈内存空间存放了指向对象的引用。这个信息需要记录下来。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fc/66/d7f7ad77.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>风动静泉</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有个内存泄露相关的问题想请教一下老师。 <br>基本描述: <br>一个单线程的程序中，在其run方法中有局部变量（map 
list等类型），也使用了该线程类ThreadDemo的全局变量（map），线程中会去执行ftp任务（同步）。 <br> <br>问题： <br>如果ftp任务由于某种原因阻塞了，调用ftp任务的线程ThreadDemo中的变量（局部变量和全局变量）会变成不可达状态吗？还是说此时线程也阻塞，会导致内存泄露？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/fe/c5/3467cf94.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>正是那朵玫...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师有几个不明白的地方，误报和漏报不太明白： <br>1、假设A引用开始指向A1对象：A------&gt;A1,按老师说的误报就是将引用A指向null：A------&gt;null，那么此时A1对象不是没有引用了，不就可以垃圾回收了么，为什么会错过垃圾回收的机会呢？ 
<br>2、漏报，是将A引用指向一个未被访问的对象假设对象为B：A-----&gt;B,此时A引用原来指向的对象应该没有引用了吧，为什么会垃圾回收器可能会回收事实上仍被引用的对象呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这里指的是，GC已经标记完成，然后其他线程进行修改的情况(也是并发GC所要解决的问题)。<br><br>当GC标记完成，还未开始回收时，你更新了其中一个引用，使之指向null，那么原来指向的对象本可以被回收的。<br><br>如果指向一个新的对象，这个对象可没有被标记为不能回收，垃圾回收器就直接给回收掉了</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 猜一下，作业里面的应该是Math.log(10) </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 厉害！这都看得出来！是Math.log10(i)，不过这个时间太长了，我新版本的代码是sqrt 。然后不知怎么给回滚到这个log10，而且还是乱的</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/18/07ee18ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>明天更美好</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 总算可以听的懂了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/b3/df/dc53c067.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>闪客sun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好，关于“在多线程环境下，其他线程可能会更新已经访问过的对象中的引用”，这句没太理解，网上查资料也没找到好答案。您可以帮我看看这块该怎么理解么？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>fcb的鱼</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为啥作为GC Roots 的对象是那几种呢，这里有什么讲究吗？！ </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/fb/af/5a9d2b58.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lyerox</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 正常理解，漏报是指将本来可回收对象这一次检查漏报了，而误报是将不是垃圾的对象误报成可回收对象。这样的话应该是误报的影响大才对啊。 
<br>这里漏报 和 误报应该说清楚，什么像什么上报什么吧？ </div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
34, 34) 
 {executed in 6 msec}
2020-11-19 20:16:49.559 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.560 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:49.564 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.565 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:49.571 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 34, 'https://static001.geekbang.org/resource/image/52/c3/52ff1795756ef8a2a2e57df6d34420c3.jpg', 
34) 
 {executed in 1 msec}
2020-11-19 20:16:49.577 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.579 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:16:49.585 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 34, 'https://static001.geekbang.org/resource/image/52/c3/52ff1795756ef8a2a2e57df6d34420c3.jpg', 
34) 
 {executed in 1 msec}
2020-11-19 20:16:49.591 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.592 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:16:49.598 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 34, 34) 
 {executed in 0 msec}
2020-11-19 20:16:49.604 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=34 
 {executed in 1 msec}
2020-11-19 20:16:49.606 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:16:49.612 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 34, 34) 
 {executed in 1 msec}
2020-11-19 20:16:49.617 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='18197371768393' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:16:49.618 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:12.991 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='18197371768393' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:12.993 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:12.996 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('18197371768393', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:17:12.998 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('18197371768393', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:17:12.999 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|69            |
|--------------|

2020-11-19 20:17:13.014 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='18197371768393' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:17:13.015 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:13.470 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='18197371768393' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:17:13.471 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:13.474 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('18197371768393', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:17:13.475 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('18197371768393', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:17:13.477 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|70            |
|--------------|

2020-11-19 20:17:13.491 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='18197371768393' 
 {executed in 1 msec}
2020-11-19 20:17:13.492 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:13.496 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788233, 1) 
 {executed in 1 msec}
2020-11-19 20:17:13.497 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788233, 1) 
 {executed in 0 msec}
2020-11-19 20:17:13.499 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|35            |
|--------------|

2020-11-19 20:17:13.510 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '1189b0da-d112-44c9-9614-a8fe844a9a43', 
35) 
 {executed in 0 msec}
2020-11-19 20:17:13.511 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '1189b0da-d112-44c9-9614-a8fe844a9a43', 35) 
 {executed in 0 msec}
2020-11-19 20:17:13.513 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|35            |
|--------------|

2020-11-19 20:17:13.553 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=35, revision_default=1, revision_timestamp=1605788233, 
revision_uid=1 where vid=35 
 {executed in 1 msec}
2020-11-19 20:17:13.559 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.561 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:13.568 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '18197371768393', 'zh-hans', 35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.575 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.576 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:13.584 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '18197371768393', 'zh-hans', 35, 35) 
 {executed in 0 msec}
2020-11-19 20:17:13.591 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=35 
 {executed in 2 msec}
2020-11-19 20:17:13.592 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:13.596 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=35 
 {executed in 0 msec}
2020-11-19 20:17:13.597 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:13.604 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 35, 0, 0, 32, 0, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.609 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.611 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:13.614 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.616 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:13.626 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在 Java 程序中，我们拥有多种新建对象的方式。除了最为常见的 new 语句之外，我们还可以通过反射机制、Object.clone 
方法、反序列化以及 Unsafe.allocateInstance 方法来新建对象。</p> <p>其中，Object.clone 方法和反序列化通过直接复制已有的数据，来初始化新建对象的实例字段。Unsafe.allocateInstance 
方法则没有初始化实例字段，而 new 语句和反射机制，则是通过调用构造器来初始化实例字段。</p> <p>以 new 语句为例，它编译而成的字节码将包含用来请求内存的 new 指令，以及用来调用构造器的 
invokespecial 指令。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Foo foo = new Foo(); 编译而成的字节码 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 new Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3 dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
4 invokespecial Foo() </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
7 astore_1 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>提到构造器，就不得不提到 Java 对构造器的诸多约束。首先，如果一个类没有定义任何构造器的话， 
Java 编译器会自动添加一个无参数的构造器。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Foo 类构造器会调用其父类 Object 的构造器 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public Foo(); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 invokespecial java.lang.Object() [8] 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre><!-- [[[read_end]]] 
--> <p>然后，子类的构造器需要调用父类的构造器。如果父类存在无参数构造器的话，该调用可以是隐式的，也就是说 Java 编译器会自动添加对父类构造器的调用。但是，如果父类没有无参数构造器，那么子类的构造器则需要显式地调用父类带参数的构造器。</p> 
<p>显式调用又可分为两种，一是直接使用“super”关键字调用父类构造器，二是使用“this”关键字调用同一个类中的其他构造器。无论是直接的显式调用，还是间接的显式调用，都需要作为构造器的第一条语句，以便优先初始化继承而来的父类字段。（不过这可以通过调用其他生成参数的方法，或者字节码注入来绕开。）</p> 
<p>总而言之，当我们调用一个构造器时，它将优先调用父类的构造器，直至 Object 类。这些构造器的调用者皆为同一对象，也就是通过 new 指令新建而来的对象。</p> <p>你应该已经发现了其中的玄机：通过 
new 指令新建出来的对象，它的内存其实涵盖了所有父类中的实例字段。也就是说，虽然子类无法访问父类的私有实例字段，或者子类的实例字段隐藏了父类的同名实例字段，但是子类的实例还是会为这些父类实例字段分配内存的。</p> 
<p>这些字段在内存中的具体分布是怎么样的呢？今天我们就来看看对象的内存布局。</p> <h2>压缩指针</h2> <p>在 Java 虚拟机中，每个 Java 对象都有一个对象头（object 
header），这个由标记字段和类型指针所构成。其中，标记字段用以存储 Java 虚拟机有关该对象的运行数据，如哈希码、GC 信息以及锁信息，而类型指针则指向该对象的类。</p> <p>在 
64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java 对象在内存中的额外开销就是 16 个字节。以 Integer 类为例，它仅有一个 
int 类型的私有字段，占 4 个字节。因此，每一个 Integer 对象的额外内存开销至少是 400%。这也是为什么 Java 要引入基本类型的原因之一。</p> <p>为了尽量较少对象的内存使用量，64 
位 Java 虚拟机引入了压缩指针 [1] 的概念（对应虚拟机选项 -XX:+UseCompressedOops，默认开启），将堆中原本 64 位的 Java 对象指针压缩成 32 
位的。</p> <p>这样一来，对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节。当然，压缩指针不仅可以作用于对象头的类型指针，还可以作用于引用类型的字段，以及引用类型数组。</p> 
<p>那么压缩指针是什么原理呢？</p> <p>打个比方，路上停着的全是房车，而且每辆房车恰好占据两个停车位。现在，我们按照顺序给它们编号。也就是说，停在 0 号和 1 号停车位上的叫 
0 号车，停在 2 号和 3 号停车位上的叫 1 号车，依次类推。</p> <p>原本的内存寻址用的是车位号。比如说我有一个值为 6 的指针，代表第 6 个车位，那么沿着这个指针可以找到 
3 号车。现在我们规定指针里存的值是车号，比如 3 指代 3 号车。当需要查找 3 号车时，我便可以将该指针的值乘以 2，再沿着 6 号车位找到 3 号车。</p> <p>这样一来，32 
位压缩指针最多可以标记 2 的 32 次方辆车，对应着 2 的 33 次方个车位。当然，房车也有大小之分。大房车占据的车位可能是三个甚至是更多。不过这并不会影响我们的寻址算法：我们只需跳过部分车号，便可以保持原本车号 
*2 的寻址系统。</p> <p>上述模型有一个前提，你应该已经想到了，就是每辆车都从偶数号车位停起。这个概念我们称之为内存对齐（对应虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 
8）。</p> <p>默认情况下，Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数。如果一个对象用不到 8N 个字节，那么空白的那部分空间就浪费掉了。这些浪费掉的空间我们称之为对象间的填充（padding）。</p> 
<p>在默认情况下，Java 虚拟机中的 32 位压缩指针可以寻址到 2 的 35 次方个字节，也就是 32GB 的地址空间（超过 32GB 则会关闭压缩指针）。</p> <p>在对压缩指针解引用时，我们需要将其左移 
3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。</p> <p>此外，我们可以通过配置刚刚提到的内存对齐选项（-XX:ObjectAlignmentInBytes）来进一步提升寻址范围。但是，这同时也可能增加对象间填充，导致压缩指针没有达到原本节省空间的效果。</p> 
<p>举例来说，如果规定每辆车都需要从偶数车位号停起，那么对于占据两个车位的小房车来说刚刚好，而对于需要三个车位的大房车来说，也仅是浪费一个车位。</p> <p>但是如果规定需要从 
4 的倍数号车位停起，那么小房车则会浪费两个车位，而大房车至多可能浪费三个车位。</p> <p>当然，就算是关闭了压缩指针，Java 虚拟机还是会进行内存对齐。此外，内存对齐不仅存在于对象与对象之间，也存在于对象中的字段之间。比如说，Java 
虚拟机要求 long 字段、double 字段，以及非压缩指针状态下的引用字段地址为 8 的倍数。</p> <p>字段内存对齐的其中一个原因，是让字段只出现在同一 CPU 的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。</p> 
<p>下面我来介绍一下对象内存布局另一个有趣的特性：字段重排列。</p> <h2>字段重排列</h2> <p>字段重排列，顾名思义，就是 Java 虚拟机重新分配字段的先后顺序，以达到内存对齐的目的。Java 
虚拟机中有三种排列方法（对应 Java 虚拟机选项 -XX:FieldsAllocationStyle，默认值为 1），但都会遵循如下两个规则。</p> <p>其一，如果一个字段占据 
C 个字节，那么该字段的偏移量需要对齐至 NC。这里偏移量指的是字段地址与对象的起始地址差值。</p> <p>以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。</p> <p>其二，子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致。</p> 
<p>在具体实现中，Java 虚拟机还会对齐子类字段的起始位置。对于使用了压缩指针的 64 位虚拟机，子类第一个字段需要对齐至 4N；而对于关闭了压缩指针的 64 位虚拟机，子类第一个字段则需要对齐至 
8N。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class A { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> long l; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int i； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class B extends A { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long l; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我在文中贴了一段代码，里边定义了两个类 A 和 B，其中 B 继承 A。A 和 B 各自定义了一个 long 类型的实例字段和一个 int 类型的实例字段。下面我分别打印了 
B 类在启用压缩指针和未启用压缩指针时，各个字段的偏移量。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 启用压缩指针时，B 类的字段分布 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> B object internals: </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> OFFSET SIZE TYPE DESCRIPTION </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12 4 int A.i 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16 8 long A.l 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24 8 long B.l 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32 4 int B.i 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36 4 (loss due to the next object alignment) 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当启用压缩指针时，可以看到 Java 虚拟机将 A 类的 int 字段放置于 long 字段之前，以填充因为 long 字段对齐造成的 4 字节缺口。由于对象整体大小需要对齐至 
8N，因此对象的最后会有 4 字节的空白填充。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 关闭压缩指针时，B 类的字段分布 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> B object internals: </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> OFFSET SIZE TYPE DESCRIPTION </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16 8 long A.l </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24 4 int A.i </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28 4 (alignment/padding gap) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32 8 long B.l </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40 4 int B.i </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 44 4 (loss due to the next object alignment) 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当关闭压缩指针时，B 类字段的起始位置需对齐至 8N。这么一来，B 类字段的前后各有 4 字节的空白。那么我们可不可以将 B 类的 int 字段移至前面的空白中，从而节省这 
8 字节呢？</p> <p>我认为是可以的，并且我修改过后的 Java 虚拟机也没有跑崩。由于 HotSpot 中的这块代码年久失修，公司的同事也已经记不得是什么原因了，那么姑且先认为是一些历史遗留问题吧。</p> 
<p>Java 8 还引入了一个新的注释 @Contended，用来解决对象字段之间的虚共享（false sharing）问题 [2]。这个注释也会影响到字段的排列。</p> <p>虚共享是怎么回事呢？假设两个线程分别访问同一对象中不同的 
volatile 字段，逻辑上它们并没有共享内容，因此不需要同步。</p> <p>然而，如果这两个字段恰好在同一个缓存行中，那么对这些字段的写操作会导致缓存行的写回，也就造成了实质上的共享。（volatile 
字段和缓存行的故事我会在之后的篇章中详细介绍。）</p> <p>Java 虚拟机会让不同的 @Contended 字段处于独立的缓存行中，因此你会看到大量的空间被浪费掉。具体的分布算法属于实现细节，随着 
Java 版本的变动也比较大，因此这里就不做阐述了。</p> <p>如果你感兴趣，可以利用实践环节的工具，来查阅 Contended 字段的内存布局。注意使用虚拟机选项 -XX:-RestrictContended。如果你在 
Java 9 以上版本试验的话，在使用 javac 编译时需要添加 --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAME</p> 
<h2>总结和实践</h2> <p>今天我介绍了 Java 虚拟机构造对象的方式，所构造对象的大小，以及对象的内存布局。</p> <p>常见的 new 语句会被编译为 new 指令，以及对构造器的调用。每个类的构造器皆会直接或者间接调用父类的构造器，并且在同一个实例中初始化相应的字段。</p> 
<p>Java 虚拟机引入了压缩指针的概念，将原本的 64 位指针压缩成 32 位。压缩指针要求 Java 虚拟机堆中对象的起始地址要对齐至 8 的倍数。Java 虚拟机还会对每个类的字段进行重排列，使得字段也能够内存对齐。</p> 
<p>今天的实践环节比较简单，你可以使用我在工具篇中介绍过的 JOL 工具，来打印你工程中的类的字段分布情况。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
curl -L -O http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java -cp jol-cli-0.9-full.jar org.openjdk.jol.Main 
internals java.lang.String </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://wiki.openjdk.java.net/display/HotSpot/CompressedOops">https://wiki.openjdk.java.net/display/HotSpot/CompressedOops</a><br> 
[2] <a href="http://openjdk.java.net/jeps/142">http://openjdk.java.net/jeps/142</a></p> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 35, 35) 
 {executed in 2 msec}
2020-11-19 20:17:13.641 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.643 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:13.652 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在 Java 程序中，我们拥有多种新建对象的方式。除了最为常见的 new 语句之外，我们还可以通过反射机制、Object.clone 方法、反序列化以及 
Unsafe.allocateInstance 方法来新建对象。</p> <p>其中，Object.clone 方法和反序列化通过直接复制已有的数据，来初始化新建对象的实例字段。Unsafe.allocateInstance 
方法则没有初始化实例字段，而 new 语句和反射机制，则是通过调用构造器来初始化实例字段。</p> <p>以 new 语句为例，它编译而成的字节码将包含用来请求内存的 new 指令，以及用来调用构造器的 
invokespecial 指令。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Foo foo = new Foo(); 编译而成的字节码 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 new Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3 dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
4 invokespecial Foo() </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
7 astore_1 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>提到构造器，就不得不提到 Java 对构造器的诸多约束。首先，如果一个类没有定义任何构造器的话， 
Java 编译器会自动添加一个无参数的构造器。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Foo 类构造器会调用其父类 Object 的构造器 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public Foo(); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 invokespecial java.lang.Object() [8] 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre><!-- [[[read_end]]] 
--> <p>然后，子类的构造器需要调用父类的构造器。如果父类存在无参数构造器的话，该调用可以是隐式的，也就是说 Java 编译器会自动添加对父类构造器的调用。但是，如果父类没有无参数构造器，那么子类的构造器则需要显式地调用父类带参数的构造器。</p> 
<p>显式调用又可分为两种，一是直接使用“super”关键字调用父类构造器，二是使用“this”关键字调用同一个类中的其他构造器。无论是直接的显式调用，还是间接的显式调用，都需要作为构造器的第一条语句，以便优先初始化继承而来的父类字段。（不过这可以通过调用其他生成参数的方法，或者字节码注入来绕开。）</p> 
<p>总而言之，当我们调用一个构造器时，它将优先调用父类的构造器，直至 Object 类。这些构造器的调用者皆为同一对象，也就是通过 new 指令新建而来的对象。</p> <p>你应该已经发现了其中的玄机：通过 
new 指令新建出来的对象，它的内存其实涵盖了所有父类中的实例字段。也就是说，虽然子类无法访问父类的私有实例字段，或者子类的实例字段隐藏了父类的同名实例字段，但是子类的实例还是会为这些父类实例字段分配内存的。</p> 
<p>这些字段在内存中的具体分布是怎么样的呢？今天我们就来看看对象的内存布局。</p> <h2>压缩指针</h2> <p>在 Java 虚拟机中，每个 Java 对象都有一个对象头（object 
header），这个由标记字段和类型指针所构成。其中，标记字段用以存储 Java 虚拟机有关该对象的运行数据，如哈希码、GC 信息以及锁信息，而类型指针则指向该对象的类。</p> <p>在 
64 位的 Java 虚拟机中，对象头的标记字段占 64 位，而类型指针又占了 64 位。也就是说，每一个 Java 对象在内存中的额外开销就是 16 个字节。以 Integer 类为例，它仅有一个 
int 类型的私有字段，占 4 个字节。因此，每一个 Integer 对象的额外内存开销至少是 400%。这也是为什么 Java 要引入基本类型的原因之一。</p> <p>为了尽量较少对象的内存使用量，64 
位 Java 虚拟机引入了压缩指针 [1] 的概念（对应虚拟机选项 -XX:+UseCompressedOops，默认开启），将堆中原本 64 位的 Java 对象指针压缩成 32 
位的。</p> <p>这样一来，对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 16 字节降至 12 字节。当然，压缩指针不仅可以作用于对象头的类型指针，还可以作用于引用类型的字段，以及引用类型数组。</p> 
<p>那么压缩指针是什么原理呢？</p> <p>打个比方，路上停着的全是房车，而且每辆房车恰好占据两个停车位。现在，我们按照顺序给它们编号。也就是说，停在 0 号和 1 号停车位上的叫 
0 号车，停在 2 号和 3 号停车位上的叫 1 号车，依次类推。</p> <p>原本的内存寻址用的是车位号。比如说我有一个值为 6 的指针，代表第 6 个车位，那么沿着这个指针可以找到 
3 号车。现在我们规定指针里存的值是车号，比如 3 指代 3 号车。当需要查找 3 号车时，我便可以将该指针的值乘以 2，再沿着 6 号车位找到 3 号车。</p> <p>这样一来，32 
位压缩指针最多可以标记 2 的 32 次方辆车，对应着 2 的 33 次方个车位。当然，房车也有大小之分。大房车占据的车位可能是三个甚至是更多。不过这并不会影响我们的寻址算法：我们只需跳过部分车号，便可以保持原本车号 
*2 的寻址系统。</p> <p>上述模型有一个前提，你应该已经想到了，就是每辆车都从偶数号车位停起。这个概念我们称之为内存对齐（对应虚拟机选项 -XX:ObjectAlignmentInBytes，默认值为 
8）。</p> <p>默认情况下，Java 虚拟机堆中对象的起始地址需要对齐至 8 的倍数。如果一个对象用不到 8N 个字节，那么空白的那部分空间就浪费掉了。这些浪费掉的空间我们称之为对象间的填充（padding）。</p> 
<p>在默认情况下，Java 虚拟机中的 32 位压缩指针可以寻址到 2 的 35 次方个字节，也就是 32GB 的地址空间（超过 32GB 则会关闭压缩指针）。</p> <p>在对压缩指针解引用时，我们需要将其左移 
3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。</p> <p>此外，我们可以通过配置刚刚提到的内存对齐选项（-XX:ObjectAlignmentInBytes）来进一步提升寻址范围。但是，这同时也可能增加对象间填充，导致压缩指针没有达到原本节省空间的效果。</p> 
<p>举例来说，如果规定每辆车都需要从偶数车位号停起，那么对于占据两个车位的小房车来说刚刚好，而对于需要三个车位的大房车来说，也仅是浪费一个车位。</p> <p>但是如果规定需要从 
4 的倍数号车位停起，那么小房车则会浪费两个车位，而大房车至多可能浪费三个车位。</p> <p>当然，就算是关闭了压缩指针，Java 虚拟机还是会进行内存对齐。此外，内存对齐不仅存在于对象与对象之间，也存在于对象中的字段之间。比如说，Java 
虚拟机要求 long 字段、double 字段，以及非压缩指针状态下的引用字段地址为 8 的倍数。</p> <p>字段内存对齐的其中一个原因，是让字段只出现在同一 CPU 的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。</p> 
<p>下面我来介绍一下对象内存布局另一个有趣的特性：字段重排列。</p> <h2>字段重排列</h2> <p>字段重排列，顾名思义，就是 Java 虚拟机重新分配字段的先后顺序，以达到内存对齐的目的。Java 
虚拟机中有三种排列方法（对应 Java 虚拟机选项 -XX:FieldsAllocationStyle，默认值为 1），但都会遵循如下两个规则。</p> <p>其一，如果一个字段占据 
C 个字节，那么该字段的偏移量需要对齐至 NC。这里偏移量指的是字段地址与对象的起始地址差值。</p> <p>以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。</p> <p>其二，子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致。</p> 
<p>在具体实现中，Java 虚拟机还会对齐子类字段的起始位置。对于使用了压缩指针的 64 位虚拟机，子类第一个字段需要对齐至 4N；而对于关闭了压缩指针的 64 位虚拟机，子类第一个字段则需要对齐至 
8N。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class A { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> long l; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int i； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class B extends A { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long l; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我在文中贴了一段代码，里边定义了两个类 A 和 B，其中 B 继承 A。A 和 B 各自定义了一个 long 类型的实例字段和一个 int 类型的实例字段。下面我分别打印了 
B 类在启用压缩指针和未启用压缩指针时，各个字段的偏移量。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 启用压缩指针时，B 类的字段分布 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> B object internals: </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> OFFSET SIZE TYPE DESCRIPTION </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12 4 int A.i 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16 8 long A.l 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24 8 long B.l 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32 4 int B.i 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36 4 (loss due to the next object alignment) 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当启用压缩指针时，可以看到 Java 虚拟机将 A 类的 int 字段放置于 long 字段之前，以填充因为 long 字段对齐造成的 4 字节缺口。由于对象整体大小需要对齐至 
8N，因此对象的最后会有 4 字节的空白填充。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 关闭压缩指针时，B 类的字段分布 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> B object internals: </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> OFFSET SIZE TYPE DESCRIPTION </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12 4 (object header) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16 8 long A.l </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24 4 int A.i </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28 4 (alignment/padding gap) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32 8 long B.l </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40 4 int B.i </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 44 4 (loss due to the next object alignment) 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当关闭压缩指针时，B 类字段的起始位置需对齐至 8N。这么一来，B 类字段的前后各有 4 字节的空白。那么我们可不可以将 B 类的 int 字段移至前面的空白中，从而节省这 
8 字节呢？</p> <p>我认为是可以的，并且我修改过后的 Java 虚拟机也没有跑崩。由于 HotSpot 中的这块代码年久失修，公司的同事也已经记不得是什么原因了，那么姑且先认为是一些历史遗留问题吧。</p> 
<p>Java 8 还引入了一个新的注释 @Contended，用来解决对象字段之间的虚共享（false sharing）问题 [2]。这个注释也会影响到字段的排列。</p> <p>虚共享是怎么回事呢？假设两个线程分别访问同一对象中不同的 
volatile 字段，逻辑上它们并没有共享内容，因此不需要同步。</p> <p>然而，如果这两个字段恰好在同一个缓存行中，那么对这些字段的写操作会导致缓存行的写回，也就造成了实质上的共享。（volatile 
字段和缓存行的故事我会在之后的篇章中详细介绍。）</p> <p>Java 虚拟机会让不同的 @Contended 字段处于独立的缓存行中，因此你会看到大量的空间被浪费掉。具体的分布算法属于实现细节，随着 
Java 版本的变动也比较大，因此这里就不做阐述了。</p> <p>如果你感兴趣，可以利用实践环节的工具，来查阅 Contended 字段的内存布局。注意使用虚拟机选项 -XX:-RestrictContended。如果你在 
Java 9 以上版本试验的话，在使用 javac 编译时需要添加 --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAME</p> 
<h2>总结和实践</h2> <p>今天我介绍了 Java 虚拟机构造对象的方式，所构造对象的大小，以及对象的内存布局。</p> <p>常见的 new 语句会被编译为 new 指令，以及对构造器的调用。每个类的构造器皆会直接或者间接调用父类的构造器，并且在同一个实例中初始化相应的字段。</p> 
<p>Java 虚拟机引入了压缩指针的概念，将原本的 64 位指针压缩成 32 位。压缩指针要求 Java 虚拟机堆中对象的起始地址要对齐至 8 的倍数。Java 虚拟机还会对每个类的字段进行重排列，使得字段也能够内存对齐。</p> 
<p>今天的实践环节比较简单，你可以使用我在工具篇中介绍过的 JOL 工具，来打印你工程中的类的字段分布情况。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
curl -L -O http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java -cp jol-cli-0.9-full.jar org.openjdk.jol.Main 
internals java.lang.String </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://wiki.openjdk.java.net/display/HotSpot/CompressedOops">https://wiki.openjdk.java.net/display/HotSpot/CompressedOops</a><br> 
[2] <a href="http://openjdk.java.net/jeps/142">http://openjdk.java.net/jeps/142</a></p> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 35, 35) 
 {executed in 2 msec}
2020-11-19 20:17:13.666 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=35 
 {executed in 2 msec}
2020-11-19 20:17:13.668 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:13.671 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=35 
 {executed in 1 msec}
2020-11-19 20:17:13.674 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:17:13.680 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788233, 1605788233, 1, 'zh-hans', 0, 1, 1, 
0, '10丨Java对象的内存布局', 1, 35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.688 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=35 
 {executed in 2 msec}
2020-11-19 20:17:13.690 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:13.697 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788233, 1605788233, 1, 'zh-hans', 0, 
1, 1, 0, '10丨Java对象的内存布局', 'book', 1, 35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.704 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.705 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:13.709 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.711 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:13.719 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/e43d03377848690c76948dbead5f432c?bkt=en-06f5c65000af0ed669fc179de67683b7df4c793c1e381d0b59220b3b4b5cbcfebb48d02f5a050164&fid=3757516097-778750-611425326776453&time=1605788232&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-pYdVIqdEt%2FXSfAaheFBRepjsPNc%3D&to=92&size=5508981&sta_dx=5508981&sta_cs=4351&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5508981&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-88d59be81146324ba30e4667d4f973a405c6ccad9f50db1fedc9263c0f6a2f48aaa2e3ba4ef566b6&sl=76480590&expires=8h&rt=pr&r=759776603&mlogid=7510886266756971837&vbdid=64799653&fin=10%E4%B8%A8Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.mp3&bflag=92,34-92&rtype=1&dp-logid=7510886266756971837&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=76168191086d6f291dbdeeed6a729cb84bfd97778cbeda94&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=10%E4%B8%A8Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.mp3', 
35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.726 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=35 
 {executed in 2 msec}
2020-11-19 20:17:13.728 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:13.736 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/e43d03377848690c76948dbead5f432c?bkt=en-06f5c65000af0ed669fc179de67683b7df4c793c1e381d0b59220b3b4b5cbcfebb48d02f5a050164&fid=3757516097-778750-611425326776453&time=1605788232&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-pYdVIqdEt%2FXSfAaheFBRepjsPNc%3D&to=92&size=5508981&sta_dx=5508981&sta_cs=4351&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5508981&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-88d59be81146324ba30e4667d4f973a405c6ccad9f50db1fedc9263c0f6a2f48aaa2e3ba4ef566b6&sl=76480590&expires=8h&rt=pr&r=759776603&mlogid=7510886266756971837&vbdid=64799653&fin=10%E4%B8%A8Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.mp3&bflag=92,34-92&rtype=1&dp-logid=7510886266756971837&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=76168191086d6f291dbdeeed6a729cb84bfd97778cbeda94&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=10%E4%B8%A8Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.mp3', 
35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.744 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.746 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:13.750 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=35 
 {executed in 2 msec}
2020-11-19 20:17:13.751 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:13.765 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结 <br>1:Java中创建对象的方式 <br> <br>1-1:new 
-通过调用构造器来初始化实例字段 <br> <br>1-2:反射-通过调用构造器来初始化实例字段 <br> <br>1-3:Object.clone-通过直接复制已有的数据，来初始化新建对象的实例字段 
<br> <br>1-4:反序列化-通过直接复制已有的数据，来初始化新建对象的实例字段 <br> <br>1-5:Unsafe.allocateInstance-没有初始化对象的实例字段 
<br> <br>2:Java对象的空间占用 <br> <br>2-1:通过new创建的对象，涵盖了它所有父类中的对象实例的字段 <br> <br>2-2:对象头，由标记字段和类型指针构成 
<br> <br>2-3:标记字段，用于存储Java虚拟机有关该对象的运行数据，比如：哈希码、GC信息、锁信息等 <br> <br>2-4:类型指针，用于指向该对象的类 <br> <br>2-5:此对象的实例字段对应的内存空间 
<br> <br>3:压缩指针 <br>JVM的内存空间有限且昂贵，所以，能缩减的就缩减，通过一定的算法改进压缩类型指针的空间后仍可以寻址到对象的实例对应的类，所以，就采用了 <br> 
<br>4:字段重排 <br>意思是JVM会重新分配字段的位置，和我们Java源码中属性声明的位置存在差异，猜想Java编译器编译后的字节码是没有改变源码中字段声明的位置的，这样做是为了更好的实现内存对齐，内存对齐本质上会浪费一定的内存空间，不过可以减少内存行的读取次数，通过一消一涨的比对发现这样对于JVM的性能有一定的提高，所以，也就使用了这种方式，浪费点空间能提高性能也是值得的 
<br> <br>疑问❓ <br>1:为什么一个子类即使无法访问父类的私有实例字段，或者子类实例字段隐藏了父类的同名实例字段，子类的实例还是会为这些父类实例字段分配内存呢？ <br>另外，如果采用指针指向的方式定位父类实例的内容是否能更节省内存空间？ 
<br> <br>2:五种创建对象的方式，通过new指令新建出来的对象，他的内存其实涵盖了所有父类中的实例字段，其他的方式是怎样的哪？ <br> <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>life 
is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 对象头 <br> <br>每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。 
<br> <br>标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。 <br> <br>两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。 
<br> <br>压缩指针 <br> <br>为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。 
<br> <br>内存对齐 <br> <br>内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。 <br> 
<br>字段重排序 <br> <br>其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。 <br> <br>虚共享 <br> <br>当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。 
<br> <br>@Contented注解 <br> <br>该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。 <br> <br> 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞总结！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/ca/2d8c4733.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>amourling</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 作者大大辛苦了，货很干，搭配《深入理解java虚拟机》会很香 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 有一个小白问题，new一个对象(继承一个类)会调用父类构造器，这个可以理解，因为对象可能调用父类方法。那么为什么new对象会调用到object呢？这有什么用意吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 也就是说默认情况下，小于32G的堆内存中的对象引用为4个字节，一旦堆内存大于32G，对象引用为8个字节 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7a/e0/3d5b28ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>清歌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 讲内存布局没有图示。如果能配一些图来说明就更清晰了，纯文字不直观 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Mr.钧👻</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 想请教老师大大几个问题： <br>1、什么是CUP缓存行？ 
<br>2、如果跨缓存行的字段，为什么会降低执行效率？是因为某些读取程序，一行一行的读效率较高？还是因为以行分割呢？ <br>3、明显启用压缩指针，性能更高，但是为什么还会在64位情况下，不启用压缩指针的情况呢？ 
是因为CPU运行速度更快，可以护士不压缩指针导致的内存浪费吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>发条橙子 ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师， 对象头中的类型指针只是为了指该对象的类 ， 使用了压缩指针还有32位 
。可以有32g的地址空间， 一个类能用到 32 G的地址空间么????? </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/66/e8fb8ca2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xlogic</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 字段重排列 <br> <br>其一，如果一个字段占据 C 
个字节， 那么该字段的偏移量需要对齐至 NC。这里的偏移量指的是字段地址与对象的起始地址差值 <br> <br>以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。 <br> <br>个人理解：1. 应该是 Long 
类型；2. 因为 long 字段的占 8 个字节，所以偏移量是 N8，比12大的最接近的数就是 16，所以偏移量就是16，也就是说字段与对象的起始位置差是16。 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，请教您几个问题 <br>1：每个类都有一个对应的class对象，那么这class对象是什么时候生成的，存储jvm的哪个区域？ 
<br>2：类实例对象object header中的类型指针其实就是指向该类所属class的对象的指针吗？ <br>3：class对象的内存结构又是什么样子的呢？类似于普通Java实例对象吗？ 
<br>ps：这个指针压缩的原理有些困扰到我了。。。求解惑！！！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>everyok22</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">1</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 你文章里说： 64位的JVM中，不采用压缩指针的方式，标记字段与类型指针分别占用8个字节，而采用了压缩指针标记字段与类型指针都会压成32位（8字节）那对象头不是只占用8个字节么，为什么你说是12个字节 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 标记字段没有被压缩。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0c/20/ae6979bd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大能猫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近研究String时遇到一个跟Java内存相关的问题：常量池里到底有没有存放对象？ 
<br>常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic Reference）； <br>如果常量池里有一个“hello”的字面量，这个字面量算是一个对象吗？如果不算对象，那么它所指向的对象又存放在哪里呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: String literal指向的对象存放在JVM的String pool里。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/c4/f3/97599e4b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>DesertSnow</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 超类啊这是 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>天王</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 一个JAVA对象可以通过new，反序列化，clone等多种方式创建对象。new的时候，首先会为对象申请内存，然后调用构造器创建对象，初始化字段，会默认调用无参构造器对象，也会先调用父类的构造器，如果父类构造器无参，则隐式调用，如果是有参构造函数，则显式调用。子类的实例会为父类实例字段分配内存。 
<br>在内存中的布局，创建对象的时候会在为对象分配内存，一个对象有对象头，对象头里面存储的是标记字段和类型指针，对象头里面有哈希码，gc等信息，类型指针存的是指向类的引用，各自占用64位，8个字节，这是每个对象额外存储的，这样所以引入了基础类型。压缩指针可以将类型指针压成32位的，节省4个字节，压缩指针还可以压缩字段以及引用类型数组。压缩指针的原理，java对象默认的起始位置是8的位数，如果一个对象用不到8N，剩下的空间就浪费了，浪费的空间叫对象间的填充。对齐方式叫内存对齐，可以通过内存对齐选项来提升寻址范围，但是也容易导致对象填充。内存对象不仅存在于对象与对象之间，也存在于字段与字段中间，字段对齐的一个原因是，让字段出现在同一CPU的缓存行中，跨缓存行会影响执行效率。字段重排列，会重新分配字段的顺序，以达到内存对齐的目的。有2个选择，一个是字段偏移量是NC，子类字段的偏移量需要与父类对应字段的偏移量保持一致。使用了压缩指针的对象，子类第一个字段需要对齐至4N，没用压缩指针的对齐至8N。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 因此，每一个 Integer 对象的额外内存开销至少是 400%。这句话实在令人费解，400%的单位是什么，4字节？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/zZiamzXOang0L4iaXa37k1wM8TqU6cqkQNCKZ9XUBWXPFndtvkXrtRGMLPur4zIvoYMHaicIU1fFibKTZJo8Lmnxug/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>suynan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 上班间隙悄悄看了开头的一点点，真的好多干货，准备一周时间啃完一遍 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。 <br> <br> <br>long存储的值占用8个字节，默认情况是以8N的位置开始占用的，所以long一共占用20个字节。所以当存储下一个long时，只能从第24个字节的位置开始存，那么20-23的位置就被浪费了。 
<br> <br>老师，我这理解有问题么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 
32GB 地址空间的伪 64 位指针了。 <br> <br> <br>这句话不理解，老师能否具体讲解下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/1a/41/3d87f7ac.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>橙生北国</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这时候写留言不知道能不能跟上，老师，请问如果我new一个对象，它会影响JVM五个区域中的几个？大概是怎么影响的。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，“堆中原本 64 位的 Java 对象指针压缩成 
32 位”这几句话中的“64位java对象指针”是个啥？在哪里？为什么会影响想到对象头中类型指针？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 35, 35) 
 {executed in 6 msec}
2020-11-19 20:17:13.776 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.777 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:13.793 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结 <br>1:Java中创建对象的方式 <br> <br>1-1:new 
-通过调用构造器来初始化实例字段 <br> <br>1-2:反射-通过调用构造器来初始化实例字段 <br> <br>1-3:Object.clone-通过直接复制已有的数据，来初始化新建对象的实例字段 
<br> <br>1-4:反序列化-通过直接复制已有的数据，来初始化新建对象的实例字段 <br> <br>1-5:Unsafe.allocateInstance-没有初始化对象的实例字段 
<br> <br>2:Java对象的空间占用 <br> <br>2-1:通过new创建的对象，涵盖了它所有父类中的对象实例的字段 <br> <br>2-2:对象头，由标记字段和类型指针构成 
<br> <br>2-3:标记字段，用于存储Java虚拟机有关该对象的运行数据，比如：哈希码、GC信息、锁信息等 <br> <br>2-4:类型指针，用于指向该对象的类 <br> <br>2-5:此对象的实例字段对应的内存空间 
<br> <br>3:压缩指针 <br>JVM的内存空间有限且昂贵，所以，能缩减的就缩减，通过一定的算法改进压缩类型指针的空间后仍可以寻址到对象的实例对应的类，所以，就采用了 <br> 
<br>4:字段重排 <br>意思是JVM会重新分配字段的位置，和我们Java源码中属性声明的位置存在差异，猜想Java编译器编译后的字节码是没有改变源码中字段声明的位置的，这样做是为了更好的实现内存对齐，内存对齐本质上会浪费一定的内存空间，不过可以减少内存行的读取次数，通过一消一涨的比对发现这样对于JVM的性能有一定的提高，所以，也就使用了这种方式，浪费点空间能提高性能也是值得的 
<br> <br>疑问❓ <br>1:为什么一个子类即使无法访问父类的私有实例字段，或者子类实例字段隐藏了父类的同名实例字段，子类的实例还是会为这些父类实例字段分配内存呢？ <br>另外，如果采用指针指向的方式定位父类实例的内容是否能更节省内存空间？ 
<br> <br>2:五种创建对象的方式，通过new指令新建出来的对象，他的内存其实涵盖了所有父类中的实例字段，其他的方式是怎样的哪？ <br> <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>life 
is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 对象头 <br> <br>每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。 
<br> <br>标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。 <br> <br>两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。 
<br> <br>压缩指针 <br> <br>为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。 
<br> <br>内存对齐 <br> <br>内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。 <br> 
<br>字段重排序 <br> <br>其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。 <br> <br>虚共享 <br> <br>当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。 
<br> <br>@Contented注解 <br> <br>该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。 <br> <br> 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞总结！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/ca/2d8c4733.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>amourling</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 作者大大辛苦了，货很干，搭配《深入理解java虚拟机》会很香 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 有一个小白问题，new一个对象(继承一个类)会调用父类构造器，这个可以理解，因为对象可能调用父类方法。那么为什么new对象会调用到object呢？这有什么用意吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 也就是说默认情况下，小于32G的堆内存中的对象引用为4个字节，一旦堆内存大于32G，对象引用为8个字节 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7a/e0/3d5b28ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>清歌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 讲内存布局没有图示。如果能配一些图来说明就更清晰了，纯文字不直观 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Mr.钧👻</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 想请教老师大大几个问题： <br>1、什么是CUP缓存行？ 
<br>2、如果跨缓存行的字段，为什么会降低执行效率？是因为某些读取程序，一行一行的读效率较高？还是因为以行分割呢？ <br>3、明显启用压缩指针，性能更高，但是为什么还会在64位情况下，不启用压缩指针的情况呢？ 
是因为CPU运行速度更快，可以护士不压缩指针导致的内存浪费吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>发条橙子 ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师， 对象头中的类型指针只是为了指该对象的类 ， 使用了压缩指针还有32位 
。可以有32g的地址空间， 一个类能用到 32 G的地址空间么????? </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/66/e8fb8ca2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xlogic</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 字段重排列 <br> <br>其一，如果一个字段占据 C 
个字节， 那么该字段的偏移量需要对齐至 NC。这里的偏移量指的是字段地址与对象的起始地址差值 <br> <br>以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。 <br> <br>个人理解：1. 应该是 Long 
类型；2. 因为 long 字段的占 8 个字节，所以偏移量是 N8，比12大的最接近的数就是 16，所以偏移量就是16，也就是说字段与对象的起始位置差是16。 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，请教您几个问题 <br>1：每个类都有一个对应的class对象，那么这class对象是什么时候生成的，存储jvm的哪个区域？ 
<br>2：类实例对象object header中的类型指针其实就是指向该类所属class的对象的指针吗？ <br>3：class对象的内存结构又是什么样子的呢？类似于普通Java实例对象吗？ 
<br>ps：这个指针压缩的原理有些困扰到我了。。。求解惑！！！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>everyok22</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">1</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 你文章里说： 64位的JVM中，不采用压缩指针的方式，标记字段与类型指针分别占用8个字节，而采用了压缩指针标记字段与类型指针都会压成32位（8字节）那对象头不是只占用8个字节么，为什么你说是12个字节 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 标记字段没有被压缩。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0c/20/ae6979bd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大能猫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近研究String时遇到一个跟Java内存相关的问题：常量池里到底有没有存放对象？ 
<br>常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic Reference）； <br>如果常量池里有一个“hello”的字面量，这个字面量算是一个对象吗？如果不算对象，那么它所指向的对象又存放在哪里呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: String literal指向的对象存放在JVM的String pool里。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/c4/f3/97599e4b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>DesertSnow</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 超类啊这是 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>天王</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 一个JAVA对象可以通过new，反序列化，clone等多种方式创建对象。new的时候，首先会为对象申请内存，然后调用构造器创建对象，初始化字段，会默认调用无参构造器对象，也会先调用父类的构造器，如果父类构造器无参，则隐式调用，如果是有参构造函数，则显式调用。子类的实例会为父类实例字段分配内存。 
<br>在内存中的布局，创建对象的时候会在为对象分配内存，一个对象有对象头，对象头里面存储的是标记字段和类型指针，对象头里面有哈希码，gc等信息，类型指针存的是指向类的引用，各自占用64位，8个字节，这是每个对象额外存储的，这样所以引入了基础类型。压缩指针可以将类型指针压成32位的，节省4个字节，压缩指针还可以压缩字段以及引用类型数组。压缩指针的原理，java对象默认的起始位置是8的位数，如果一个对象用不到8N，剩下的空间就浪费了，浪费的空间叫对象间的填充。对齐方式叫内存对齐，可以通过内存对齐选项来提升寻址范围，但是也容易导致对象填充。内存对象不仅存在于对象与对象之间，也存在于字段与字段中间，字段对齐的一个原因是，让字段出现在同一CPU的缓存行中，跨缓存行会影响执行效率。字段重排列，会重新分配字段的顺序，以达到内存对齐的目的。有2个选择，一个是字段偏移量是NC，子类字段的偏移量需要与父类对应字段的偏移量保持一致。使用了压缩指针的对象，子类第一个字段需要对齐至4N，没用压缩指针的对齐至8N。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 因此，每一个 Integer 对象的额外内存开销至少是 400%。这句话实在令人费解，400%的单位是什么，4字节？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/zZiamzXOang0L4iaXa37k1wM8TqU6cqkQNCKZ9XUBWXPFndtvkXrtRGMLPur4zIvoYMHaicIU1fFibKTZJo8Lmnxug/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>suynan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 上班间隙悄悄看了开头的一点点，真的好多干货，准备一周时间啃完一遍 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 
64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。 <br> <br> <br>long存储的值占用8个字节，默认情况是以8N的位置开始占用的，所以long一共占用20个字节。所以当存储下一个long时，只能从第24个字节的位置开始存，那么20-23的位置就被浪费了。 
<br> <br>老师，我这理解有问题么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 
32GB 地址空间的伪 64 位指针了。 <br> <br> <br>这句话不理解，老师能否具体讲解下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/1a/41/3d87f7ac.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>橙生北国</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这时候写留言不知道能不能跟上，老师，请问如果我new一个对象，它会影响JVM五个区域中的几个？大概是怎么影响的。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，“堆中原本 64 位的 Java 对象指针压缩成 
32 位”这几句话中的“64位java对象指针”是个啥？在哪里？为什么会影响想到对象头中类型指针？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 35, 35) 
 {executed in 7 msec}
2020-11-19 20:17:13.802 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.804 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:13.807 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=35 
 {executed in 0 msec}
2020-11-19 20:17:13.809 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:13.815 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 35, 'https://static001.geekbang.org/resource/image/8e/92/8eda743c128a33fe446358b740978792.jpg', 
35) 
 {executed in 0 msec}
2020-11-19 20:17:13.822 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.824 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:13.830 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 35, 'https://static001.geekbang.org/resource/image/8e/92/8eda743c128a33fe446358b740978792.jpg', 
35) 
 {executed in 0 msec}
2020-11-19 20:17:13.837 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.838 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:13.845 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.851 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=35 
 {executed in 1 msec}
2020-11-19 20:17:13.853 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:13.859 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 35, 35) 
 {executed in 1 msec}
2020-11-19 20:17:13.865 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119466203911868' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:13.866 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:30.738 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119466203911868' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:30.740 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:30.743 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1119466203911868', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:17:30.744 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1119466203911868', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:17:30.745 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|71            |
|--------------|

2020-11-19 20:17:30.759 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119466203911868' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:17:30.761 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:31.371 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119466203911868' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:17:31.372 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:31.375 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1119466203911868', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:17:31.376 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1119466203911868', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:17:31.377 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|72            |
|--------------|

2020-11-19 20:17:31.391 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1119466203911868' 
 {executed in 1 msec}
2020-11-19 20:17:31.392 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:31.396 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788251, 1) 
 {executed in 1 msec}
2020-11-19 20:17:31.397 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788251, 1) 
 {executed in 0 msec}
2020-11-19 20:17:31.398 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|36            |
|--------------|

2020-11-19 20:17:31.408 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'f298485e-b6e4-428e-b46f-e6326a98bafa', 
36) 
 {executed in 1 msec}
2020-11-19 20:17:31.409 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'f298485e-b6e4-428e-b46f-e6326a98bafa', 36) 
 {executed in 0 msec}
2020-11-19 20:17:31.410 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|36            |
|--------------|

2020-11-19 20:17:31.423 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=36, revision_default=1, revision_timestamp=1605788251, 
revision_uid=1 where vid=36 
 {executed in 0 msec}
2020-11-19 20:17:31.429 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.431 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:31.437 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1119466203911868', 'zh-hans', 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.443 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=36 
 {executed in 0 msec}
2020-11-19 20:17:31.444 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:31.450 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1119466203911868', 'zh-hans', 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.456 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=36 
 {executed in 1 msec}
2020-11-19 20:17:31.457 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:31.460 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=36 
 {executed in 0 msec}
2020-11-19 20:17:31.462 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:31.468 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 36, 0, 0, 32, 0, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.474 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.476 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:31.479 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.481 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:31.507 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>上回讲到，为了让所有的动物都能参加赛马，Java 7 引入了 invokedynamic 机制，允许调用任意类的“赛跑”方法。不过，我们并没有讲解 
invokedynamic，而是深入地探讨了它所依赖的方法句柄。</p> <p>今天，我便来正式地介绍 invokedynamic 指令，讲讲它是如何生成调用点，并且允许应用程序自己决定链接至哪一个方法中的。</p> 
<h2>invokedynamic 指令</h2> <p>invokedynamic 是 Java 7 引入的一条新指令，用以支持动态语言的方法调用。具体来说，它将调用点（CallSite）抽象成一个 
Java 类，并且将原本由 Java 虚拟机控制的方法调用以及方法链接暴露给了应用程序。在运行过程中，每一条 invokedynamic 指令将捆绑一个调用点，并且会调用该调用点所链接的方法句柄。</p> 
<p>在第一次执行 invokedynamic 指令时，Java 虚拟机会调用该指令所对应的启动方法（BootStrap Method），来生成前面提到的调用点，并且将之绑定至该 invokedynamic 
指令中。在之后的运行过程中，Java 虚拟机则会直接调用绑定的调用点所链接的方法句柄。</p> <p>在字节码中，启动方法是用方法句柄来指定的。这个方法句柄指向一个返回类型为调用点的静态方法。该方法必须接收三个固定的参数，分别为一个 
Lookup 类实例，一个用来指代目标方法名字的字符串，以及该调用点能够链接的方法句柄的类型。</p><!-- [[[read_end]]] --> <p>除了这三个必需参数之外，启动方法还可以接收若干个其他的参数，用来辅助生成调用点，或者定位所要链接的目标方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Horse { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
System.out.println("Horse.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Deer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Deer.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // javac Circuit.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // java Circuit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Circuit { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void startRace(Object obj) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // aload obj </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // invokedynamic race() </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> startRace(new Horse()); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // startRace(new Deer()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static CallSite bootstrap(MethodHandles.Lookup l, String name, MethodType callSiteType) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandle mh = l.findVirtual(Horse.class, name, MethodType.methodType(void.class)); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new ConstantCallSite(mh.asType(callSiteType)); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文稿中贴了一段代码，其中便包含一个启动方法。它将接收前面提到的三个固定参数，并且返回一个链接至 
Horse.race 方法的 ConstantCallSite。</p> <p>这里的 ConstantCallSite 是一种不可以更改链接对象的调用点。除此之外，Java 核心类库还提供多种可以更改链接对象的调用点，比如 
MutableCallSite 和 VolatileCallSite。</p> <p>这两者的区别就好比正常字段和 volatile 字段之间的区别。此外，应用程序还可以自定义调用点类，来满足特定的重链接需求。</p> 
<p>由于 Java 暂不支持直接生成 invokedynamic 指令 [1]，所以接下来我会借助之前介绍过的字节码工具 ASM 来实现这一目的。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.io.IOException; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.nio.file.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.objectweb.asm.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // javac -cp /path/to/asm-all-6.0_BETA.jar:. ASMHelper.java </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -cp /path/to/asm-all-6.0_BETA.jar:. 
ASMHelper </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // java 
Circuit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class ASMHelper implements Opcodes { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static class MyMethodVisitor extends MethodVisitor { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final String BOOTSTRAP_CLASS_NAME = Circuit.class.getName().replace(''.'', ''/''); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private static final String BOOTSTRAP_METHOD_NAME 
= "bootstrap"; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final String BOOTSTRAP_METHOD_DESC = MethodType </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .methodType(CallSite.class, MethodHandles.Lookup.class, String.class, 
MethodType.class) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
.toMethodDescriptorString(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private static final String TARGET_METHOD_NAME 
= "race"; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> private 
static final String TARGET_METHOD_DESC = "(Ljava/lang/Object;)V"; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final MethodVisitor mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public MyMethodVisitor(int api, MethodVisitor mv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> super(api); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> this.mv = mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void visitCode() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ALOAD, 0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Handle h = new Handle(H_INVOKESTATIC, BOOTSTRAP_CLASS_NAME, BOOTSTRAP_METHOD_NAME, 
BOOTSTRAP_METHOD_DESC, false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitInvokeDynamicInsn(TARGET_METHOD_NAME, TARGET_METHOD_DESC, h); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitInsn(RETURN); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitMaxs(1, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitEnd(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws IOException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="43"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
ClassReader cr = new ClassReader("Circuit"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassVisitor cv = new ClassVisitor(ASM6, 
cw) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MethodVisitor visitMethod(int access, 
String name, String descriptor, String signature, </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> String[] exceptions) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodVisitor visitor = super.visitMethod(access, name, descriptor, 
signature, exceptions); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="50"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if ("startRace".equals(name)) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return new MyMethodVisitor(ASM6, visitor); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="53"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return visitor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> cr.accept(cv, ClassReader.SKIP_FRAMES); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Files.write(Paths.get("Circuit.class"), cw.toByteArray()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>你无需理解上面这段代码的具体含义，只须了解它会更改同一目录下 Circuit 
类的 startRace(Object) 方法，使之包含 invokedynamic 指令，执行所谓的赛跑方法。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void startRace(java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: invokedynamic #80, 0 // race:(Ljava/lang/Object;)V </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果你足够细心的话，你会发现该指令所调用的赛跑方法的描述符，和 
Horse.race 方法或者 Deer.race 方法的描述符并不一致。这是因为 invokedynamic 指令最终调用的是方法句柄，而方法句柄会将调用者当成第一个参数。因此，刚刚提到的那两个方法恰恰符合这个描述符所对应的方法句柄类型。</p> 
<p>到目前为止，我们已经可以通过 invokedynamic 调用 Horse.race 方法了。为了支持调用任意类的 race 方法，我实现了一个简单的单态内联缓存。如果调用者的类型命中缓存中的类型，便直接调用缓存中的方法句柄，否则便更新缓存。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 需要更改 ASMHelper.MyMethodVisitor 中的 BOOTSTRAP_CLASS_NAME </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class MonomorphicInlineCache { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private final MethodHandles.Lookup lookup; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private final String name; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public MonomorphicInlineCache(MethodHandles.Lookup lookup, String 
name) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.lookup 
= lookup; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.name 
= name; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private Class&lt;?&gt; cachedClass = null; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private MethodHandle mh = null; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void invoke(Object receiver) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (cachedClass != receiver.getClass()) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cachedClass = receiver.getClass(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh = lookup.findVirtual(cachedClass, name, 
MethodType.methodType(void.class)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invoke(receiver); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static CallSite bootstrap(MethodHandles.Lookup l, String 
name, MethodType callSiteType) throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MonomorphicInlineCache ic = new MonomorphicInlineCache(l, name); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findVirtual(MonomorphicInlineCache.class, 
"invoke", MethodType.methodType(void.class, Object.class)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new ConstantCallSite(mh.bindTo(ic)); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，尽管 invokedynamic 指令调用的是所谓的 race 方法，但是实际上我返回了一个链接至名为“invoke”的方法的调用点。由于调用点仅要求方法句柄的类型能够匹配，因此这个链接是合法的。</p> 
<p>不过，这正是 invokedynamic 的目的，也就是将调用点与目标方法的链接交由应用程序来做，并且依赖于应用程序对目标方法进行验证。所以，如果应用程序将赛跑方法链接至兔子的睡觉方法，那也只能怪应用程序自己了。</p> 
<h2>Java 8 的 Lambda 表达式</h2> <p>在 Java 8 中，Lambda 表达式也是借助 invokedynamic 来实现的。</p> <p>具体来说，Java 
编译器利用 invokedynamic 指令来生成实现了函数式接口的适配器。这里的函数式接口指的是仅包括一个非 default 接口方法的接口，一般通过 @FunctionalInterface 
注解。不过就算是没有使用该注解，Java 编译器也会将符合条件的接口辨认为函数式接口。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int x 
= .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> IntStream.of(1, 
2, 3).map(i -&gt; i * 2).map(i -&gt; i * x); </div></td> </tr> </tbody> </table></code> <div 
class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码会对 
IntStream 中的元素进行两次映射。我们知道，映射方法 map 所接收的参数是 IntUnaryOperator（这是一个函数式接口）。也就是说，在运行过程中我们需要将 i-&gt;i<em>2 
和 i-&gt;i</em>x 这两个 Lambda 表达式转化成 IntUnaryOperator 的实例。这个转化过程便是由 invokedynamic 来实现的。</p> <p>在编译过程中，Java 
编译器会对 Lambda 表达式进行解语法糖（desugar），生成一个方法来保存 Lambda 表达式的内容。该方法的参数列表不仅包含原本 Lambda 表达式的参数，还包含它所捕获的变量。(注：方法引用，如 
Horse::race，则不会生成生成额外的方法。)</p> <p>在上面那个例子中，第一个 Lambda 表达式没有捕获其他变量，而第二个 Lambda 表达式（也就是 i-&gt;i*x）则会捕获局部变量 
x。这两个 Lambda 表达式对应的方法如下所示。可以看到，所捕获的变量同样也会作为参数传入生成的方法之中。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i -&gt; i * 2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static int lambda$0(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_2 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i -&gt; i * x </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static int lambda$1(int, int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>第一次执行 invokedynamic 指令时，它所对应的启动方法会通过 ASM 
来生成一个适配器类。这个适配器类实现了对应的函数式接口，在我们的例子中，也就是 IntUnaryOperator。启动方法的返回值是一个 ConstantCallSite，其链接对象为一个返回适配器类实例的方法句柄。</p> 
<p>根据 Lambda 表达式是否捕获其他变量，启动方法生成的适配器类以及所链接的方法句柄皆不同。</p> <p>如果该 Lambda 表达式没有捕获其他变量，那么可以认为它是上下文无关的。因此，启动方法将新建一个适配器类的实例，并且生成一个特殊的方法句柄，始终返回该实例。</p> 
<p>如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 指令，我们都要更新这些捕获了的变量，以防止它们发生了变化。</p> <p>另外，为了保证 
Lambda 表达式的线程安全，我们无法共享同一个适配器类的实例。因此，在每次执行 invokedynamic 指令时，所调用的方法句柄都需要新建一个适配器类实例。</p> <p>在这种情况下，启动方法生成的适配器类将包含一个额外的静态方法，来构造适配器类的实例。该方法将接收这些捕获的参数，并且将它们保存为适配器类实例的实例字段。</p> 
<p>你可以通过虚拟机参数 -Djdk.internal.lambda.dumpProxyClasses=/DUMP/PATH 导出这些具体的适配器类。这里我导出了上面这个例子中两个 
Lambda 表达式对应的适配器类。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // i-&gt;i*2 对应的适配器类 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> final class LambdaTest$$Lambda$1 implements 
IntUnaryOperator { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private LambdaTest$$Lambda$1(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial java/lang/Object."&lt;init&gt;":()V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int applyAsInt(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokestatic LambdaTest.lambda$0:(I)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i-&gt;i*x 对应的适配器类 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class LambdaTest$$Lambda$2 implements IntUnaryOperator { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private final int arg$1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private LambdaTest$$Lambda$2(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial 
java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6: putfield arg$1:I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static java.util.function.IntUnaryOperator get$Lambda(int); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: new LambdaTest$$Lambda$2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: invokespecial "&lt;init&gt;":(I)V </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: areturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int applyAsInt(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="40"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: getfield 
arg$1:I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: iload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokestatic LambdaTest.lambda$1:(II)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，捕获了局部变量的 
Lambda 表达式多出了一个 get$Lambda 的方法。启动方法便会所返回的调用点链接至指向该方法的方法句柄。也就是说，每次执行 invokedynamic 指令时，都会调用至这个方法中，并构造一个新的适配器类实例。</p> 
<p>这个多出来的新建实例会对程序性能造成影响吗？</p> <h2>Lambda 以及方法句柄的性能分析</h2> <p>我再次请出测试反射调用性能开销的那段代码，并将其改造成使用 
Lambda 表达式的 v6 版本。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v6 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.function.IntConsumer; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ((IntConsumer) j -&gt; Test.target(j)).accept(128); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // ((IntConsumer) Test::target.accept(128); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>测量结果显示，它与直接调用的性能并无太大的区别。也就是说，即时编译器能够将转换 Lambda 表达式所使用的 invokedynamic，以及对 IntConsumer.accept 
方法的调用统统内联进来，最终优化为空操作。</p> <p>这个其实不难理解：Lambda 表达式所使用的 invokedynamic 将绑定一个 ConstantCallSite，其链接的目标方法无法改变。因此，即时编译器会将该目标方法直接内联进来。对于这类没有捕获变量的 
Lambda 表达式而言，目标方法只完成了一个动作，便是加载缓存的适配器类常量。</p> <p>另一方面，对 IntConsumer.accept 方法的调用实则是对适配器类的 accept 
方法的调用。</p> <p>如果你查看了 accept 方法对应的字节码的话，你会发现它仅包含一个方法调用，调用至 Java 编译器在解 Lambda 语法糖时生成的方法。</p> 
<p>该方法的内容便是 Lambda 表达式的内容，也就是直接调用目标方法 Test.target。将这几个方法调用内联进来之后，原本对 accept 方法的调用则会被优化为空操作。</p> 
<p>下面我将之前的代码更改为带捕获变量的 v7 版本。理论上，每次调用 invokedynamic 指令，Java 虚拟机都会新建一个适配器类的实例。然而，实际运行结果还是与直接调用的性能一致。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v7 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.util.function.IntConsumer; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int x = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
((IntConsumer) j -&gt; Test.target(x + j)).accept(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>显然，即时编译器的逃逸分析又将该新建实例给优化掉了。我们可以通过虚拟机参数 
-XX:-DoEscapeAnalysis 来关闭逃逸分析。果然，这时候测得的值约为直接调用的 2.5 倍。</p> <p>尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。它需要同时满足两件事：invokedynamic 
指令所执行的方法句柄能够内联，和接下来的对 accept 方法的调用也能内联。</p> <p>只有这样，逃逸分析才能判定该适配器实例不逃逸。否则，我们会在运行过程中不停地生成适配器类实例。所以，我们应当尽量使用非捕获的 
Lambda 表达式。</p> <h2>总结与实践</h2> <p>今天我介绍了 invokedynamic 指令以及 Lambda 表达式的实现。</p> <p>invokedymaic 
指令抽象出调用点的概念，并且将调用该调用点所链接的方法句柄。在第一次执行 invokedynamic 指令时，Java 虚拟机将执行它所对应的启动方法，生成并且绑定一个调用点。之后如果再次执行该指令，Java 
虚拟机则直接调用已经绑定了的调用点所链接的方法。</p> <p>Lambda 表达式到函数式接口的转换是通过 invokedynamic 指令来实现的。该 invokedynamic 
指令对应的启动方法将通过 ASM 生成一个适配器类。</p> <p>对于没有捕获其他变量的 Lambda 表达式，该 invokedynamic 指令始终返回同一个适配器类的实例。对于捕获了其他变量的 
Lambda 表达式，每次执行 invokedynamic 指令将新建一个适配器类实例。</p> <p>不管是捕获型的还是未捕获型的 Lambda 表达式，它们的性能上限皆可以达到直接调用的性能。其中，捕获型 
Lambda 表达式借助了即时编译器中的逃逸分析，来避免实际的新建适配器类实例的操作。</p> <p>在上一篇的课后实践中，你应该测过这一段代码的性能开销了。我这边测得的结果约为直接调用的 
3.5 倍。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v8 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.MethodHandle; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.MethodHandles; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.MethodType; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle 
mh = l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invokeExact(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，它与使用 Lambda 表达式或者方法引用的差别在于，即时编译器无法将该方法句柄识别为常量，从而无法进行内联。那么如果将它变成常量行不行呢？</p> 
<p>一种方法便是将其赋值给 final 的静态变量，如下面的 v9 版本所示：</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // v9 
版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.invoke.MethodHandle; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.lang.invoke.MethodHandles; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.MethodType; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static final MethodHandle mh; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> try 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> mh = 
l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(128); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这个版本测得的数据和直接调用的性能数据一致。也就是说，即时编译器能够将该方法句柄完全内联进来，成为空操作。</p> <p>今天的实践环节，我们来继续探索方法句柄的性能。运行下面的 
v10 版本以及 v11 版本，比较它们的性能并思考为什么。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v10 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static class MyCallSite { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final MethodHandle mh; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public MyCallSite() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh = findTarget(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static MethodHandle findTarget() { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final MyCallSite myCallSite = new MyCallSite(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> myCallSite.mh.invokeExact(128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v11 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static class MyCallSite extends 
ConstantCallSite { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MyCallSite() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super(findTarget()); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="56"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static MethodHandle findTarget() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="58"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return l.findStatic(Test.class, "target", 
t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="61"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } catch 
(Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="62"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="63"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="66"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static final MyCallSite myCallSite 
= new MyCallSite(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="68"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="70"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="78"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
myCallSite.getTarget().invokeExact(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="80"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>感谢你的收听，我们下次再见。</p> 
<p>[1] <a href="http://openjdk.java.net/jeps/303">http://openjdk.java.net/jeps/303</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 36, 36) 
 {executed in 11 msec}
2020-11-19 20:17:31.525 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.527 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:31.549 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>上回讲到，为了让所有的动物都能参加赛马，Java 7 引入了 invokedynamic 机制，允许调用任意类的“赛跑”方法。不过，我们并没有讲解 
invokedynamic，而是深入地探讨了它所依赖的方法句柄。</p> <p>今天，我便来正式地介绍 invokedynamic 指令，讲讲它是如何生成调用点，并且允许应用程序自己决定链接至哪一个方法中的。</p> 
<h2>invokedynamic 指令</h2> <p>invokedynamic 是 Java 7 引入的一条新指令，用以支持动态语言的方法调用。具体来说，它将调用点（CallSite）抽象成一个 
Java 类，并且将原本由 Java 虚拟机控制的方法调用以及方法链接暴露给了应用程序。在运行过程中，每一条 invokedynamic 指令将捆绑一个调用点，并且会调用该调用点所链接的方法句柄。</p> 
<p>在第一次执行 invokedynamic 指令时，Java 虚拟机会调用该指令所对应的启动方法（BootStrap Method），来生成前面提到的调用点，并且将之绑定至该 invokedynamic 
指令中。在之后的运行过程中，Java 虚拟机则会直接调用绑定的调用点所链接的方法句柄。</p> <p>在字节码中，启动方法是用方法句柄来指定的。这个方法句柄指向一个返回类型为调用点的静态方法。该方法必须接收三个固定的参数，分别为一个 
Lookup 类实例，一个用来指代目标方法名字的字符串，以及该调用点能够链接的方法句柄的类型。</p><!-- [[[read_end]]] --> <p>除了这三个必需参数之外，启动方法还可以接收若干个其他的参数，用来辅助生成调用点，或者定位所要链接的目标方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Horse { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
System.out.println("Horse.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Deer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Deer.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // javac Circuit.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // java Circuit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Circuit { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void startRace(Object obj) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // aload obj </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // invokedynamic race() </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> startRace(new Horse()); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // startRace(new Deer()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static CallSite bootstrap(MethodHandles.Lookup l, String name, MethodType callSiteType) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandle mh = l.findVirtual(Horse.class, name, MethodType.methodType(void.class)); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new ConstantCallSite(mh.asType(callSiteType)); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文稿中贴了一段代码，其中便包含一个启动方法。它将接收前面提到的三个固定参数，并且返回一个链接至 
Horse.race 方法的 ConstantCallSite。</p> <p>这里的 ConstantCallSite 是一种不可以更改链接对象的调用点。除此之外，Java 核心类库还提供多种可以更改链接对象的调用点，比如 
MutableCallSite 和 VolatileCallSite。</p> <p>这两者的区别就好比正常字段和 volatile 字段之间的区别。此外，应用程序还可以自定义调用点类，来满足特定的重链接需求。</p> 
<p>由于 Java 暂不支持直接生成 invokedynamic 指令 [1]，所以接下来我会借助之前介绍过的字节码工具 ASM 来实现这一目的。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.io.IOException; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.nio.file.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.objectweb.asm.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // javac -cp /path/to/asm-all-6.0_BETA.jar:. ASMHelper.java </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -cp /path/to/asm-all-6.0_BETA.jar:. 
ASMHelper </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // java 
Circuit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class ASMHelper implements Opcodes { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static class MyMethodVisitor extends MethodVisitor { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final String BOOTSTRAP_CLASS_NAME = Circuit.class.getName().replace(''.'', ''/''); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private static final String BOOTSTRAP_METHOD_NAME 
= "bootstrap"; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final String BOOTSTRAP_METHOD_DESC = MethodType </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .methodType(CallSite.class, MethodHandles.Lookup.class, String.class, 
MethodType.class) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
.toMethodDescriptorString(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private static final String TARGET_METHOD_NAME 
= "race"; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> private 
static final String TARGET_METHOD_DESC = "(Ljava/lang/Object;)V"; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final MethodVisitor mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public MyMethodVisitor(int api, MethodVisitor mv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> super(api); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> this.mv = mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void visitCode() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ALOAD, 0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Handle h = new Handle(H_INVOKESTATIC, BOOTSTRAP_CLASS_NAME, BOOTSTRAP_METHOD_NAME, 
BOOTSTRAP_METHOD_DESC, false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitInvokeDynamicInsn(TARGET_METHOD_NAME, TARGET_METHOD_DESC, h); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitInsn(RETURN); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitMaxs(1, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitEnd(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws IOException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="43"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
ClassReader cr = new ClassReader("Circuit"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassVisitor cv = new ClassVisitor(ASM6, 
cw) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MethodVisitor visitMethod(int access, 
String name, String descriptor, String signature, </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> String[] exceptions) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodVisitor visitor = super.visitMethod(access, name, descriptor, 
signature, exceptions); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="50"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if ("startRace".equals(name)) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return new MyMethodVisitor(ASM6, visitor); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="53"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return visitor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> cr.accept(cv, ClassReader.SKIP_FRAMES); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Files.write(Paths.get("Circuit.class"), cw.toByteArray()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>你无需理解上面这段代码的具体含义，只须了解它会更改同一目录下 Circuit 
类的 startRace(Object) 方法，使之包含 invokedynamic 指令，执行所谓的赛跑方法。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void startRace(java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: invokedynamic #80, 0 // race:(Ljava/lang/Object;)V </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果你足够细心的话，你会发现该指令所调用的赛跑方法的描述符，和 
Horse.race 方法或者 Deer.race 方法的描述符并不一致。这是因为 invokedynamic 指令最终调用的是方法句柄，而方法句柄会将调用者当成第一个参数。因此，刚刚提到的那两个方法恰恰符合这个描述符所对应的方法句柄类型。</p> 
<p>到目前为止，我们已经可以通过 invokedynamic 调用 Horse.race 方法了。为了支持调用任意类的 race 方法，我实现了一个简单的单态内联缓存。如果调用者的类型命中缓存中的类型，便直接调用缓存中的方法句柄，否则便更新缓存。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 需要更改 ASMHelper.MyMethodVisitor 中的 BOOTSTRAP_CLASS_NAME </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class MonomorphicInlineCache { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private final MethodHandles.Lookup lookup; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private final String name; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public MonomorphicInlineCache(MethodHandles.Lookup lookup, String 
name) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.lookup 
= lookup; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.name 
= name; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private Class&lt;?&gt; cachedClass = null; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private MethodHandle mh = null; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void invoke(Object receiver) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (cachedClass != receiver.getClass()) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cachedClass = receiver.getClass(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh = lookup.findVirtual(cachedClass, name, 
MethodType.methodType(void.class)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invoke(receiver); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static CallSite bootstrap(MethodHandles.Lookup l, String 
name, MethodType callSiteType) throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MonomorphicInlineCache ic = new MonomorphicInlineCache(l, name); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findVirtual(MonomorphicInlineCache.class, 
"invoke", MethodType.methodType(void.class, Object.class)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new ConstantCallSite(mh.bindTo(ic)); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，尽管 invokedynamic 指令调用的是所谓的 race 方法，但是实际上我返回了一个链接至名为“invoke”的方法的调用点。由于调用点仅要求方法句柄的类型能够匹配，因此这个链接是合法的。</p> 
<p>不过，这正是 invokedynamic 的目的，也就是将调用点与目标方法的链接交由应用程序来做，并且依赖于应用程序对目标方法进行验证。所以，如果应用程序将赛跑方法链接至兔子的睡觉方法，那也只能怪应用程序自己了。</p> 
<h2>Java 8 的 Lambda 表达式</h2> <p>在 Java 8 中，Lambda 表达式也是借助 invokedynamic 来实现的。</p> <p>具体来说，Java 
编译器利用 invokedynamic 指令来生成实现了函数式接口的适配器。这里的函数式接口指的是仅包括一个非 default 接口方法的接口，一般通过 @FunctionalInterface 
注解。不过就算是没有使用该注解，Java 编译器也会将符合条件的接口辨认为函数式接口。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int x 
= .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> IntStream.of(1, 
2, 3).map(i -&gt; i * 2).map(i -&gt; i * x); </div></td> </tr> </tbody> </table></code> <div 
class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码会对 
IntStream 中的元素进行两次映射。我们知道，映射方法 map 所接收的参数是 IntUnaryOperator（这是一个函数式接口）。也就是说，在运行过程中我们需要将 i-&gt;i<em>2 
和 i-&gt;i</em>x 这两个 Lambda 表达式转化成 IntUnaryOperator 的实例。这个转化过程便是由 invokedynamic 来实现的。</p> <p>在编译过程中，Java 
编译器会对 Lambda 表达式进行解语法糖（desugar），生成一个方法来保存 Lambda 表达式的内容。该方法的参数列表不仅包含原本 Lambda 表达式的参数，还包含它所捕获的变量。(注：方法引用，如 
Horse::race，则不会生成生成额外的方法。)</p> <p>在上面那个例子中，第一个 Lambda 表达式没有捕获其他变量，而第二个 Lambda 表达式（也就是 i-&gt;i*x）则会捕获局部变量 
x。这两个 Lambda 表达式对应的方法如下所示。可以看到，所捕获的变量同样也会作为参数传入生成的方法之中。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i -&gt; i * 2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static int lambda$0(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_2 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i -&gt; i * x </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static int lambda$1(int, int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>第一次执行 invokedynamic 指令时，它所对应的启动方法会通过 ASM 
来生成一个适配器类。这个适配器类实现了对应的函数式接口，在我们的例子中，也就是 IntUnaryOperator。启动方法的返回值是一个 ConstantCallSite，其链接对象为一个返回适配器类实例的方法句柄。</p> 
<p>根据 Lambda 表达式是否捕获其他变量，启动方法生成的适配器类以及所链接的方法句柄皆不同。</p> <p>如果该 Lambda 表达式没有捕获其他变量，那么可以认为它是上下文无关的。因此，启动方法将新建一个适配器类的实例，并且生成一个特殊的方法句柄，始终返回该实例。</p> 
<p>如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 指令，我们都要更新这些捕获了的变量，以防止它们发生了变化。</p> <p>另外，为了保证 
Lambda 表达式的线程安全，我们无法共享同一个适配器类的实例。因此，在每次执行 invokedynamic 指令时，所调用的方法句柄都需要新建一个适配器类实例。</p> <p>在这种情况下，启动方法生成的适配器类将包含一个额外的静态方法，来构造适配器类的实例。该方法将接收这些捕获的参数，并且将它们保存为适配器类实例的实例字段。</p> 
<p>你可以通过虚拟机参数 -Djdk.internal.lambda.dumpProxyClasses=/DUMP/PATH 导出这些具体的适配器类。这里我导出了上面这个例子中两个 
Lambda 表达式对应的适配器类。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // i-&gt;i*2 对应的适配器类 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> final class LambdaTest$$Lambda$1 implements 
IntUnaryOperator { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private LambdaTest$$Lambda$1(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial java/lang/Object."&lt;init&gt;":()V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int applyAsInt(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokestatic LambdaTest.lambda$0:(I)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// i-&gt;i*x 对应的适配器类 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class LambdaTest$$Lambda$2 implements IntUnaryOperator { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private final int arg$1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private LambdaTest$$Lambda$2(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial 
java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6: putfield arg$1:I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static java.util.function.IntUnaryOperator get$Lambda(int); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: new LambdaTest$$Lambda$2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: invokespecial "&lt;init&gt;":(I)V </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: areturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int applyAsInt(int); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="40"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: getfield 
arg$1:I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: iload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokestatic LambdaTest.lambda$1:(II)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，捕获了局部变量的 
Lambda 表达式多出了一个 get$Lambda 的方法。启动方法便会所返回的调用点链接至指向该方法的方法句柄。也就是说，每次执行 invokedynamic 指令时，都会调用至这个方法中，并构造一个新的适配器类实例。</p> 
<p>这个多出来的新建实例会对程序性能造成影响吗？</p> <h2>Lambda 以及方法句柄的性能分析</h2> <p>我再次请出测试反射调用性能开销的那段代码，并将其改造成使用 
Lambda 表达式的 v6 版本。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v6 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.function.IntConsumer; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ((IntConsumer) j -&gt; Test.target(j)).accept(128); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // ((IntConsumer) Test::target.accept(128); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>测量结果显示，它与直接调用的性能并无太大的区别。也就是说，即时编译器能够将转换 Lambda 表达式所使用的 invokedynamic，以及对 IntConsumer.accept 
方法的调用统统内联进来，最终优化为空操作。</p> <p>这个其实不难理解：Lambda 表达式所使用的 invokedynamic 将绑定一个 ConstantCallSite，其链接的目标方法无法改变。因此，即时编译器会将该目标方法直接内联进来。对于这类没有捕获变量的 
Lambda 表达式而言，目标方法只完成了一个动作，便是加载缓存的适配器类常量。</p> <p>另一方面，对 IntConsumer.accept 方法的调用实则是对适配器类的 accept 
方法的调用。</p> <p>如果你查看了 accept 方法对应的字节码的话，你会发现它仅包含一个方法调用，调用至 Java 编译器在解 Lambda 语法糖时生成的方法。</p> 
<p>该方法的内容便是 Lambda 表达式的内容，也就是直接调用目标方法 Test.target。将这几个方法调用内联进来之后，原本对 accept 方法的调用则会被优化为空操作。</p> 
<p>下面我将之前的代码更改为带捕获变量的 v7 版本。理论上，每次调用 invokedynamic 指令，Java 虚拟机都会新建一个适配器类的实例。然而，实际运行结果还是与直接调用的性能一致。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v7 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.util.function.IntConsumer; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int x = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
((IntConsumer) j -&gt; Test.target(x + j)).accept(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>显然，即时编译器的逃逸分析又将该新建实例给优化掉了。我们可以通过虚拟机参数 
-XX:-DoEscapeAnalysis 来关闭逃逸分析。果然，这时候测得的值约为直接调用的 2.5 倍。</p> <p>尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。它需要同时满足两件事：invokedynamic 
指令所执行的方法句柄能够内联，和接下来的对 accept 方法的调用也能内联。</p> <p>只有这样，逃逸分析才能判定该适配器实例不逃逸。否则，我们会在运行过程中不停地生成适配器类实例。所以，我们应当尽量使用非捕获的 
Lambda 表达式。</p> <h2>总结与实践</h2> <p>今天我介绍了 invokedynamic 指令以及 Lambda 表达式的实现。</p> <p>invokedymaic 
指令抽象出调用点的概念，并且将调用该调用点所链接的方法句柄。在第一次执行 invokedynamic 指令时，Java 虚拟机将执行它所对应的启动方法，生成并且绑定一个调用点。之后如果再次执行该指令，Java 
虚拟机则直接调用已经绑定了的调用点所链接的方法。</p> <p>Lambda 表达式到函数式接口的转换是通过 invokedynamic 指令来实现的。该 invokedynamic 
指令对应的启动方法将通过 ASM 生成一个适配器类。</p> <p>对于没有捕获其他变量的 Lambda 表达式，该 invokedynamic 指令始终返回同一个适配器类的实例。对于捕获了其他变量的 
Lambda 表达式，每次执行 invokedynamic 指令将新建一个适配器类实例。</p> <p>不管是捕获型的还是未捕获型的 Lambda 表达式，它们的性能上限皆可以达到直接调用的性能。其中，捕获型 
Lambda 表达式借助了即时编译器中的逃逸分析，来避免实际的新建适配器类实例的操作。</p> <p>在上一篇的课后实践中，你应该测过这一段代码的性能开销了。我这边测得的结果约为直接调用的 
3.5 倍。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v8 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.MethodHandle; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.MethodHandles; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.MethodType; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle 
mh = l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invokeExact(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，它与使用 Lambda 表达式或者方法引用的差别在于，即时编译器无法将该方法句柄识别为常量，从而无法进行内联。那么如果将它变成常量行不行呢？</p> 
<p>一种方法便是将其赋值给 final 的静态变量，如下面的 v9 版本所示：</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // v9 
版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.invoke.MethodHandle; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.lang.invoke.MethodHandles; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.MethodType; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static final MethodHandle mh; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> try 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> mh = 
l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(128); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这个版本测得的数据和直接调用的性能数据一致。也就是说，即时编译器能够将该方法句柄完全内联进来，成为空操作。</p> <p>今天的实践环节，我们来继续探索方法句柄的性能。运行下面的 
v10 版本以及 v11 版本，比较它们的性能并思考为什么。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v10 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static class MyCallSite { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final MethodHandle mh; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public MyCallSite() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh = findTarget(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static MethodHandle findTarget() { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
l.findStatic(Test.class, "target", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final MyCallSite myCallSite = new MyCallSite(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> myCallSite.mh.invokeExact(128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v11 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static class MyCallSite extends 
ConstantCallSite { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MyCallSite() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super(findTarget()); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="56"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static MethodHandle findTarget() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="58"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return l.findStatic(Test.class, "target", 
t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="61"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } catch 
(Throwable e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="62"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="63"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="66"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static final MyCallSite myCallSite 
= new MyCallSite(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="68"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="70"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long current = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i % 100_000_000 == 0) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long temp = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(temp - current); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="78"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
myCallSite.getTarget().invokeExact(128); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="80"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>感谢你的收听，我们下次再见。</p> 
<p>[1] <a href="http://openjdk.java.net/jeps/303">http://openjdk.java.net/jeps/303</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 36, 36) 
 {executed in 6 msec}
2020-11-19 20:17:31.567 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=36 
 {executed in 1 msec}
2020-11-19 20:17:31.569 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:31.574 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=36 
 {executed in 1 msec}
2020-11-19 20:17:31.576 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:17:31.583 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788251, 1605788251, 1, 'zh-hans', 0, 1, 1, 
0, '09丨JVM是怎么实现invokedynamic的？（下）', 1, 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.590 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=36 
 {executed in 1 msec}
2020-11-19 20:17:31.592 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:31.599 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788251, 1605788251, 1, 'zh-hans', 0, 
1, 1, 0, '09丨JVM是怎么实现invokedynamic的？（下）', 'book', 1, 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.605 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.606 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:31.609 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.611 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:31.617 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/613ba392fd5af79914362c71a4c1fdec?bkt=en-29a7ad5d1913bc6f150c0dcdf8a49030e60c6c317d719b838e6037e4ee45dbc606d65a94521e1f3e&fid=3757516097-778750-1124099913543999&time=1605788249&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-qvCpusUUcKtFqoW3gNW%2B21j14%2FY%3D&to=92&size=5614307&sta_dx=5614307&sta_cs=4336&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182961&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5614307&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c5fe7e9cfdc30d2b725635b2b221fb2e0d18e689c940b349457d937574e11bfed61f48928fc13f3b&sl=76480590&expires=8h&rt=pr&r=213020159&mlogid=7510891030680723701&vbdid=64799653&fin=09%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510891030680723701&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea95466cced4b5cbe63ac9239cfde75fe0a&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=09%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
36, 36) 
 {executed in 0 msec}
2020-11-19 20:17:31.625 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.626 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:31.633 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/613ba392fd5af79914362c71a4c1fdec?bkt=en-29a7ad5d1913bc6f150c0dcdf8a49030e60c6c317d719b838e6037e4ee45dbc606d65a94521e1f3e&fid=3757516097-778750-1124099913543999&time=1605788249&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-qvCpusUUcKtFqoW3gNW%2B21j14%2FY%3D&to=92&size=5614307&sta_dx=5614307&sta_cs=4336&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182961&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5614307&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c5fe7e9cfdc30d2b725635b2b221fb2e0d18e689c940b349457d937574e11bfed61f48928fc13f3b&sl=76480590&expires=8h&rt=pr&r=213020159&mlogid=7510891030680723701&vbdid=64799653&fin=09%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510891030680723701&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea95466cced4b5cbe63ac9239cfde75fe0a&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=09%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
36, 36) 
 {executed in 0 msec}
2020-11-19 20:17:31.642 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.643 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:31.647 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.648 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:31.660 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我知道Java对Lambda有个规定：“The variable used in Lambda 
should be final or effectively final"，也就是说Lambda表达式捕获的变量必须是final或等同于final的。而文中您又讲到：“对于捕获了变量的Lambda，每次invokedynamic都需要新建适配器类实例，以防止他们发生变化”。JVM之所以这么做，是因为这种final的要求仅限于Java 
source层面，在bytecode层面是是无法保证的。我理解的对吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 语言里的final，是对于当前方法调用而言的。这是因为它实际上就传了个值进去。比如说你定义了int 
a，然后传入 i -&gt; i +a里，那么之后你对a的修改lambda是看不到的。<br><br>适配器针对的是多次不同调用，比如说每次调用你定义的final int a都不一样。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 一直没理解“逃逸分析”啥意思？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 逃逸分析是指通过数据流分析，判断一个对象会不会被传递到当前编译的方法之外。比如说你调用了一个方法，将一个新建的对象作为参数传递出去，如果这个方法没有被内联，则说明该新建对象会逃逸。<br><br>逃逸分析是一项比较重要的优化，我后面会详细讲。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> https://zhuanlan.zhihu.com/p/26389041 <br>https://zhuanlan.zhihu.com/p/30936412 
<br>可以和 Shijie 大大的两篇文章配合着看。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 赞！</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4Tosj3tAYvdgDfa32FAu85ibEicxhtibU4ibdm3YAgvTWwukycMlVfPwea9sL2bFSdBeymWI7iaIbg0g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>karl</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看了两遍 勉强有个概念了 <br>还是基础不够 看不懂啊 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: invokedynamic涉及到的东西很多，底层实现也在不断改进。看懂个大概就好啦</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/01/50/c832a9b2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>微笑</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 
指令，我们都要更新这些捕获了的变化。 <br>问题：捕获的变量必须是final，为什么还会变呢，为什么会线程不安全呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小鳄鱼</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，看来上一篇和这篇，又两个问题： <br>1. 尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。那么什么情况下不奏效呢？ 
<br>2. 什么情况下编译器会将句柄识别成常量？除了本文中将MethodHandler定义为常量外，在其他什么情况下能识别为常量呢 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，我有两个问题，1是我看了几个有invokedynmaic指令的文件，都是invokedynamic 
#31, 0这种形式，似乎后面这个0没有什么作用，网上invokedynamic的解说也大多过时，我使用的是1.8.0_181版本。2. v10版本和v11版本性能的差距我猜想是v10版本不能正确的内联方法吧？虽然mh是final的，但是字节码层面已经丢失这个信息了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 这个数字0，指的是第几个bootstrap method，你多定义几个lambda，应该可以见到1 2 3等等。<br><br>2. 
对的，是不能内联。不过，字节码中字段处还是会有final标志的。C2认为final实例字段在编译过程中不应该被认为是不变的，因为应用程序可能通过Unsafe来更改。Graal认为可以当成不变的，毕竟Java语言规范没有规定不可以。<br><br>V11的话，可以看出ConstantCallsite及时子类被特殊对待了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ3TyRm5FrBNBROLeVTOyj67foqPKW99ib0t8nKKcmz9BC5h2xfLJQ0zPJlGMZQTwqjU37zwyhvcnA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夕林语</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> v10和v11的区别仅仅是v11的内部类继承了ConstantCallSite，ConstantCallSite是不可被更改链接的调用点，是不是说明v11的内部类被内联了？从而可以达到和直接调用近似的执行效率 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小橙橙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 其实有个地方一直没有想透，为什么要学习字节码，学习字节码对我们日常开发有什么作用吗，老师能否给指点迷津一下？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 主要是了解底层实现。<br><br>对普通的日常开发可能作用不大。对于进阶的，比如分析应用的性能瓶颈，了解字节码将有所帮助。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 单态内联缓存的实现代码段，bootstrap方法的实现有问题，没有return一个CallSite类型返回值。另外，这篇有点难度了，看了三遍，勉强理解。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7a/ec/f39349f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小江</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师邮箱可以提供一下吗，咨询一个问题，经过btrace增强后class文件错误问题 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/84/4d/97691ff9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>自来也</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 示例应该用jdk.internal.org.objectweb.asm.*包吧？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 36, 36) 
 {executed in 3 msec}
2020-11-19 20:17:31.671 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=36 
 {executed in 2 msec}
2020-11-19 20:17:31.672 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:31.682 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我知道Java对Lambda有个规定：“The variable used in Lambda 
should be final or effectively final"，也就是说Lambda表达式捕获的变量必须是final或等同于final的。而文中您又讲到：“对于捕获了变量的Lambda，每次invokedynamic都需要新建适配器类实例，以防止他们发生变化”。JVM之所以这么做，是因为这种final的要求仅限于Java 
source层面，在bytecode层面是是无法保证的。我理解的对吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 语言里的final，是对于当前方法调用而言的。这是因为它实际上就传了个值进去。比如说你定义了int 
a，然后传入 i -&gt; i +a里，那么之后你对a的修改lambda是看不到的。<br><br>适配器针对的是多次不同调用，比如说每次调用你定义的final int a都不一样。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 一直没理解“逃逸分析”啥意思？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 逃逸分析是指通过数据流分析，判断一个对象会不会被传递到当前编译的方法之外。比如说你调用了一个方法，将一个新建的对象作为参数传递出去，如果这个方法没有被内联，则说明该新建对象会逃逸。<br><br>逃逸分析是一项比较重要的优化，我后面会详细讲。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> https://zhuanlan.zhihu.com/p/26389041 <br>https://zhuanlan.zhihu.com/p/30936412 
<br>可以和 Shijie 大大的两篇文章配合着看。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 赞！</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4Tosj3tAYvdgDfa32FAu85ibEicxhtibU4ibdm3YAgvTWwukycMlVfPwea9sL2bFSdBeymWI7iaIbg0g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>karl</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看了两遍 勉强有个概念了 <br>还是基础不够 看不懂啊 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: invokedynamic涉及到的东西很多，底层实现也在不断改进。看懂个大概就好啦</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/01/50/c832a9b2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>微笑</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 
指令，我们都要更新这些捕获了的变化。 <br>问题：捕获的变量必须是final，为什么还会变呢，为什么会线程不安全呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小鳄鱼</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，看来上一篇和这篇，又两个问题： <br>1. 尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。那么什么情况下不奏效呢？ 
<br>2. 什么情况下编译器会将句柄识别成常量？除了本文中将MethodHandler定义为常量外，在其他什么情况下能识别为常量呢 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，我有两个问题，1是我看了几个有invokedynmaic指令的文件，都是invokedynamic 
#31, 0这种形式，似乎后面这个0没有什么作用，网上invokedynamic的解说也大多过时，我使用的是1.8.0_181版本。2. v10版本和v11版本性能的差距我猜想是v10版本不能正确的内联方法吧？虽然mh是final的，但是字节码层面已经丢失这个信息了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 这个数字0，指的是第几个bootstrap method，你多定义几个lambda，应该可以见到1 2 3等等。<br><br>2. 
对的，是不能内联。不过，字节码中字段处还是会有final标志的。C2认为final实例字段在编译过程中不应该被认为是不变的，因为应用程序可能通过Unsafe来更改。Graal认为可以当成不变的，毕竟Java语言规范没有规定不可以。<br><br>V11的话，可以看出ConstantCallsite及时子类被特殊对待了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ3TyRm5FrBNBROLeVTOyj67foqPKW99ib0t8nKKcmz9BC5h2xfLJQ0zPJlGMZQTwqjU37zwyhvcnA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夕林语</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> v10和v11的区别仅仅是v11的内部类继承了ConstantCallSite，ConstantCallSite是不可被更改链接的调用点，是不是说明v11的内部类被内联了？从而可以达到和直接调用近似的执行效率 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小橙橙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 其实有个地方一直没有想透，为什么要学习字节码，学习字节码对我们日常开发有什么作用吗，老师能否给指点迷津一下？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 主要是了解底层实现。<br><br>对普通的日常开发可能作用不大。对于进阶的，比如分析应用的性能瓶颈，了解字节码将有所帮助。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 单态内联缓存的实现代码段，bootstrap方法的实现有问题，没有return一个CallSite类型返回值。另外，这篇有点难度了，看了三遍，勉强理解。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7a/ec/f39349f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小江</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师邮箱可以提供一下吗，咨询一个问题，经过btrace增强后class文件错误问题 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/84/4d/97691ff9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>自来也</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 示例应该用jdk.internal.org.objectweb.asm.*包吧？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 36, 36) 
 {executed in 2 msec}
2020-11-19 20:17:31.691 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.692 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:31.695 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.697 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:31.703 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 36, 'https://static001.geekbang.org/resource/image/66/0d/669bb4c80fbee3c69aee0316c37ed90d.jpg', 
36) 
 {executed in 1 msec}
2020-11-19 20:17:31.708 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.709 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:31.715 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 36, 'https://static001.geekbang.org/resource/image/66/0d/669bb4c80fbee3c69aee0316c37ed90d.jpg', 
36) 
 {executed in 0 msec}
2020-11-19 20:17:31.721 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.723 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:31.729 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.735 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=36 
 {executed in 1 msec}
2020-11-19 20:17:31.737 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:31.743 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 36, 36) 
 {executed in 1 msec}
2020-11-19 20:17:31.749 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='286728008047880' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:31.750 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:55.307 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='286728008047880' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:55.309 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:55.312 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('286728008047880', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:17:55.313 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('286728008047880', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:17:55.314 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|73            |
|--------------|

2020-11-19 20:17:55.327 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='286728008047880' 
and bookchecke0_.name='media' 
 {executed in 0 msec}
2020-11-19 20:17:55.329 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:55.912 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='286728008047880' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:17:55.913 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:17:55.916 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('286728008047880', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:17:55.918 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('286728008047880', 
1, 'media') 
 {executed in 1 msec}
2020-11-19 20:17:55.919 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|74            |
|--------------|

2020-11-19 20:17:55.933 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='286728008047880' 
 {executed in 1 msec}
2020-11-19 20:17:55.935 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:55.938 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788275, 1) 
 {executed in 1 msec}
2020-11-19 20:17:55.939 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788275, 1) 
 {executed in 0 msec}
2020-11-19 20:17:55.941 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|37            |
|--------------|

2020-11-19 20:17:55.950 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '18119252-adff-4df8-a074-50160a0e9f22', 
37) 
 {executed in 0 msec}
2020-11-19 20:17:55.952 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '18119252-adff-4df8-a074-50160a0e9f22', 37) 
 {executed in 1 msec}
2020-11-19 20:17:55.953 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|37            |
|--------------|

2020-11-19 20:17:55.973 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=37, revision_default=1, revision_timestamp=1605788275, 
revision_uid=1 where vid=37 
 {executed in 1 msec}
2020-11-19 20:17:55.980 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:55.982 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:55.988 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '286728008047880', 'zh-hans', 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:55.994 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:55.996 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:17:56.002 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '286728008047880', 'zh-hans', 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.008 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=37 
 {executed in 1 msec}
2020-11-19 20:17:56.009 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:56.013 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=37 
 {executed in 1 msec}
2020-11-19 20:17:56.015 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:17:56.021 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 37, 0, 0, 32, 0, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.027 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.028 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:56.032 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.034 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:56.047 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>前不久，“虚拟机”赛马俱乐部来了个年轻人，标榜自己是动态语言，是先进分子。</p> <p>这一天，先进分子牵着一头鹿进来，说要参加赛马。咱部里的老学究 
Java 就不同意了呀，鹿又不是马，哪能参加赛马。</p> <p>当然了，这种墨守成规的调用方式，自然是先进分子所不齿的。现在年轻人里流行的是鸭子类型（duck typing）[1]，只要是跑起来像只马的，它就是一只马，也就能够参加赛马比赛。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Horse { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Horse.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Deer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Deer.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Cobra { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("How do you turn this on?"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>(如何用同一种方式调用他们的赛跑方法？)</p> <p>说到了这里，如果我们将赛跑定义为对赛跑方法（对应上述代码中的 
race()）的调用的话，那么这个故事的关键，就在于能不能在马场中调用非马类型的赛跑方法。</p> <p>为了解答这个问题，我们先来回顾一下 Java 里的方法调用。在 Java 中，方法调用会被编译为 
invokestatic，invokespecial，invokevirtual 以及 invokeinterface 四种指令。这些指令与包含目标方法类名、方法名以及方法描述符的符号引用捆绑。在实际运行之前，Java 
虚拟机将根据这个符号引用链接到具体的目标方法。</p><!-- [[[read_end]]] --> <p>可以看到，在这四种调用指令中，Java 虚拟机明确要求方法调用需要提供目标方法的类名。在这种体系下，我们有两个解决方案。一是调用其中一种类型的赛跑方法，比如说马类的赛跑方法。对于非马的类型，则给它套一层马甲，当成马来赛跑。</p> 
<p>另外一种解决方式，是通过反射机制，来查找并且调用各个类型中的赛跑方法，以此模拟真正的赛跑。</p> <p>显然，比起直接调用，这两种方法都相当复杂，执行效率也可想而知。为了解决这个问题，Java 
7 引入了一条新的指令 invokedynamic。该指令的调用机制抽象出调用点这一个概念，并允许应用程序将调用点链接至任意符合条件的方法上。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void startRace(java.lang.Object) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 // 加载一个任意对象 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokedynamic race // 调用赛跑方法 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>(理想的调用方式)</p> 
<p>作为 invokedynamic 的准备工作，Java 7 引入了更加底层、更加灵活的方法抽象 ：方法句柄（MethodHandle）。</p> <h2>方法句柄的概念</h2> 
<p>方法句柄是一个强类型的，能够被直接执行的引用 [2]。该引用可以指向常规的静态方法或者实例方法，也可以指向构造器或者字段。当指向字段时，方法句柄实则指向包含字段访问字节码的虚构方法，语义上等价于目标字段的 
getter 或者 setter 方法。</p> <p>这里需要注意的是，它并不会直接指向目标字段所在类中的 getter/setter，毕竟你无法保证已有的 getter/setter 
方法就是在访问目标字段。</p> <p>方法句柄的类型（MethodType）是由所指向方法的参数类型以及返回类型组成的。它是用来确认方法句柄是否适配的唯一关键。当使用方法句柄时，我们其实并不关心方法句柄所指向方法的类名或者方法名。</p> 
<p>打个比方，如果兔子的“赛跑”方法和“睡觉”方法的参数类型以及返回类型一致，那么对于兔子递过来的一个方法句柄，我们并不知道会是哪一个方法。</p> <p>方法句柄的创建是通过 MethodHandles.Lookup 
类来完成的。它提供了多个 API，既可以使用反射 API 中的 Method 来查找，也可以根据类、方法名以及方法句柄类型来查找。</p> <p>当使用后者这种查找方式时，用户需要区分具体的调用类型，比如说对于用 
invokestatic 调用的静态方法，我们需要使用 Lookup.findStatic 方法；对于用 invokevirutal 调用的实例方法，以及用 invokeinterface 
调用的接口方法，我们需要使用 findVirtual 方法；对于用 invokespecial 调用的实例方法，我们则需要使用 findSpecial 方法。</p> <p>调用方法句柄，和原本对应的调用指令是一致的。也就是说，对于原本用 
invokevirtual 调用的方法句柄，它也会采用动态绑定；而对于原本用 invkespecial 调用的方法句柄，它会采用静态绑定。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> private 
static void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
.. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static Lookup lookup() { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return MethodHandles.lookup(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 获取方法句柄的不同方式 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = Foo.lookup(); 
// 具备 Foo 类的访问权限 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Method m = Foo.class.getDeclaredMethod("bar", Object.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodHandle mh0 = l.unreflect(m); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodType t = MethodType.methodType(void.class, Object.class); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh1 = l.findStatic(Foo.class, 
"bar", t); </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>方法句柄同样也有权限问题。但它与反射 API 不同，其权限检查是在句柄的创建阶段完成的。在实际调用过程中，Java 
虚拟机并不会检查方法句柄的权限。如果该句柄被多次调用的话，那么与反射调用相比，它将省下重复权限检查的开销。</p> <p>需要注意的是，方法句柄的访问权限不取决于方法句柄的创建位置，而是取决于 
Lookup 对象的创建位置。</p> <p>举个例子，对于一个私有字段，如果 Lookup 对象是在私有字段所在类中获取的，那么这个 Lookup 对象便拥有对该私有字段的访问权限，即使是在所在类的外边，也能够通过该 
Lookup 对象创建该私有字段的 getter 或者 setter。</p> <p>由于方法句柄没有运行时权限检查，因此，应用程序需要负责方法句柄的管理。一旦它发布了某些指向私有方法的方法句柄，那么这些私有方法便被暴露出去了。</p> 
<h2>方法句柄的操作</h2> <p>方法句柄的调用可分为两种，一是需要严格匹配参数类型的 invokeExact。它有多严格呢？假设一个方法句柄将接收一个 Object 类型的参数，如果你直接传入 
String 作为实际参数，那么方法句柄的调用会在运行时抛出方法类型不匹配的异常。正确的调用方式是将该 String 显式转化为 Object 类型。</p> <p>在普通 Java 
方法调用中，我们只有在选择重载方法时，才会用到这种显式转化。这是因为经过显式转化后，参数的声明类型发生了改变，因此有可能匹配到不同的方法描述符，从而选取不同的目标方法。调用方法句柄也是利用同样的原理，并且涉及了一个签名多态性（signature 
polymorphism）的概念。（在这里我们暂且认为签名等同于方法描述符。）</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
final native @PolymorphicSignature Object invokeExact(Object... args) throws Throwable; </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>方法句柄 API 有一个特殊的注解类 @PolymorphicSignature。在碰到被它注解的方法调用时，Java 编译器会根据所传入参数的声明类型来生成方法描述符，而不是采用目标方法所声明的描述符。</p> 
<p>在刚才的例子中，当传入的参数是 String 时，对应的方法描述符包含 String 类；而当我们转化为 Object 时，对应的方法描述符则包含 Object 类。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test(MethodHandle mh, String s) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(s); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact((Object) s); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的 Java 字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(MethodHandle, String) throws java.lang.Throwable; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 2: invokevirtual MethodHandle.invokeExact:(Ljava/lang/String;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: invokevirtual MethodHandle.invokeExact:(Ljava/lang/Object;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>invokeExact 会确认该 invokevirtual 指令对应的方法描述符，和该方法句柄的类型是否严格匹配。在不匹配的情况下，便会在运行时抛出异常。</p> <p>如果你需要自动适配参数类型，那么你可以选取方法句柄的第二种调用方式 
invoke。它同样是一个签名多态性的方法。invoke 会调用 MethodHandle.asType 方法，生成一个适配器方法句柄，对传入的参数进行适配，再调用原方法句柄。调用原方法句柄的返回值同样也会先进行适配，然后再返回给调用者。</p> 
<p>方法句柄还支持增删改参数的操作，这些操作都是通过生成另一个方法句柄来实现的。这其中，改操作就是刚刚介绍的 MethodHandle.asType 方法。删操作指的是将传入的部分参数就地抛弃，再调用另一个方法句柄。它对应的 
API 是 MethodHandles.dropArguments 方法。</p> <p>增操作则非常有意思。它会往传入的参数中插入额外的参数，再调用另一个方法句柄，它对应的 API 
是 MethodHandle.bindTo 方法。Java 8 中捕获类型的 Lambda 表达式便是用这种操作来实现的，下一篇我会详细进行解释。</p> <p>增操作还可以用来实现方法的柯里化 
[3]。举个例子，有一个指向 f(x, y) 的方法句柄，我们可以通过将 x 绑定为 4，生成另一个方法句柄 g(y) = f(4, y)。在执行过程中，每当调用 g(y) 的方法句柄，它会在参数列表最前面插入一个 
4，再调用指向 f(x, y) 的方法句柄。</p> <h2>方法句柄的实现</h2> <p>下面我们来看看 HotSpot 虚拟机中方法句柄调用的具体实现。（由于篇幅原因，这里只讨论 
DirectMethodHandle。）</p> <p>前面提到，调用方法句柄所使用的 invokeExact 或者 invoke 方法具备签名多态性的特性。它们会根据具体的传入参数来生成方法描述符。那么，拥有这个描述符的方法实际存在吗？对 
invokeExact 或者 invoke 的调用具体会进入哪个方法呢？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> new Exception().printStackTrace(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, Object.class); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findStatic(Foo.class, 
"bar", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(new 
Object()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>和查阅反射调用的方式一样，我们可以通过新建异常实例来查看栈轨迹。打印出来的占轨迹如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> java.lang.Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Foo.bar(Foo.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Foo.main(Foo.java:12) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>也就是说，invokeExact 
的目标方法竟然就是方法句柄指向的方法。</p> <p>先别高兴太早。我刚刚提到过，invokeExact 会对参数的类型进行校验，并在不匹配的情况下抛出异常。如果它直接调用了方法句柄所指向的方法，那么这部分参数类型校验的逻辑将无处安放。因此，唯一的可能便是 
Java 虚拟机隐藏了部分栈信息。</p> <p>当我们启用了 -XX:+ShowHiddenFrames 这个参数来打印被 Java 虚拟机隐藏了的栈信息时，你会发现 main 方法和目标方法中间隔着两个貌似是生成的方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames Foo 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.bar(Foo.java:5) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.invoke.DirectMethodHandle$Holder. 
invokeStatic(DirectMethodHandle$Holder:1000010) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/java.lang.invoke.LambdaForm$MH000/766572210. invokeExact_MT000_LLL_V(LambdaForm$MH000:1000019) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:12) </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>实际上，Java 虚拟机会对 invokeExact 调用做特殊处理，调用至一个共享的、与方法句柄类型相关的特殊适配器中。这个适配器是一个 LambdaForm，我们可以通过添加虚拟机参数将之导出成 
class 文件（-Djava.lang.invoke.MethodHandle.DUMP_CLASS_FILES=true）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class java.lang.invoke.LambdaForm$MH000 { static void invokeExact_MT000_LLLLV(jeava.lang.bject, 
jjava.lang.bject, jjava.lang.bject); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 : checkcast 
#14 //Mclass java/lang/invoke/ethodHandle </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> : dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
5 : astore_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> : aload_32 
: checkcast #16 //Mclass java/lang/invoke/ethodType </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: invokestatic I#22 // Method java/lang/invoke/nvokers.checkExactType:(MLjava/lang/invoke/ethodHandle,;Ljava/lang/invoke/ethodType);V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: invokestatic #26 I // Method java/lang/invoke/nvokers.checkCustomized:(MLjava/lang/invoke/ethodHandle);V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 17: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 18: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: ainvakevirtudl #30 2 // Methodijava/lang/nvokev/ethodHandle.invokeBasic:(LLeava/lang/bject;;V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 23 return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，在这个适配器中，它会调用 Invokers.checkExactType 
方法来检查参数类型，然后调用 Invokers.checkCustomized 方法。后者会在方法句柄的执行次数超过一个阈值时进行优化（对应参数 -Djava.lang.invoke.MethodHandle.CUSTOMIZE_THRESHOLD，默认值为 
127）。最后，它会调用方法句柄的 invokeBasic 方法。</p> <p>Java 虚拟机同样会对 invokeBasic 调用做特殊处理，这会将调用至方法句柄本身所持有的适配器中。这个适配器同样是一个 
LambdaForm，你可以通过反射机制将其打印出来。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 该方法句柄持有的 LambdaForm 实例的 toString() 
结果 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> DMH.invokeStatic_L_V=Lambda(a0:L,a1:L)=&gt;{ 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t2:L=DirectMethodHandle.internalMemberName(a0:L); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t3:V=MethodHandle.linkToStatic(a1:L,t2:L);void} 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这个适配器将获取方法句柄中的 MemberName 类型的字段，并且以它为参数调用 linkToStatic 方法。估计你已经猜到了，Java 虚拟机也会对 
linkToStatic 调用做特殊处理，它将根据传入的 MemberName 参数所存储的方法地址或者方法表索引，直接跳转至目标方法。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class MemberName implements Member, Cloneable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
//@Injected JVM_Method* vmtarget; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> //@Injected int vmindex; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>那么前面那个适配器中的优化又是怎么回事？实际上，方法句柄一开始持有的适配器是共享的。当它被多次调用之后，Invokers.checkCustomized 
方法会为该方法句柄生成一个特有的适配器。这个特有的适配器会将方法句柄作为常量，直接获取其 MemberName 类型的字段，并继续后面的 linkToStatic 调用。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> final class java.lang.invoke.LambdaForm$DMH000 { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static void invokeStatic000_LL_V(java.lang.Object, 
java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: ldc 
#14 // String CONSTANT_PLACEHOLDER_1 &lt;&lt;Foo.bar(Object)void/invokeStatic&gt;&gt; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: checkcast #16 // class java/lang/invoke/MethodHandle 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: astore_0 // 上面的优化代码覆盖了传入的方法句柄 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: aload_0 // 从这里开始跟初始版本一致 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: invokestatic #22 // Method java/lang/invoke/DirectMethodHandle.internalMemberName:(Ljava/lang/Object;)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: checkcast #24 // class java/lang/invoke/MemberName 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: invokestatic #28 // Method java/lang/invoke/MethodHandle.linkToStatic:(Ljava/lang/Object;Ljava/lang/invoke/MemberName;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>可以看到，方法句柄的调用和反射调用一样，都是间接调用。因此，它也会面临无法内联的问题。不过，与反射调用不同的是，方法句柄的内联瓶颈在于即时编译器能否将该方法句柄识别为常量。具体内容我会在下一篇中进行详细的解释。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 invokedynamic 底层机制的基石：方法句柄。</p> <p>方法句柄是一个强类型的、能够被直接执行的引用。它仅关心所指向方法的参数类型以及返回类型，而不关心方法所在的类以及方法名。方法句柄的权限检查发生在创建过程中，相较于反射调用节省了调用时反复权限检查的开销。</p> 
<p>方法句柄可以通过 invokeExact 以及 invoke 来调用。其中，invokeExact 要求传入的参数和所指向方法的描述符严格匹配。方法句柄还支持增删改参数的操作，这些操作是通过生成另一个充当适配器的方法句柄来实现的。</p> 
<p>方法句柄的调用和反射调用一样，都是间接调用，同样会面临无法内联的问题。</p> <p>今天的实践环节，我们来测量一下方法句柄的性能。你可以尝试通过重构代码，将方法句柄变成常量，来提升方法句柄调用的性能。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, Object.class); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findVirtual(Foo.class, 
"bar", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invokeExact(new Foo(), new Object()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>[1] 
<a href="https://en.wikipedia.org/wiki/Duck_typing">https://en.wikipedia.org/wiki/Duck_typing</a><br> 
[2]<br> <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/invoke/MethodHandle.html">https://docs.oracle.com/javase/10/docs/api/java/lang/invoke/MethodHandle.html</a><br> 
[3]<br> <a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 37, 37) 
 {executed in 3 msec}
2020-11-19 20:17:56.060 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.062 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:17:56.097 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>前不久，“虚拟机”赛马俱乐部来了个年轻人，标榜自己是动态语言，是先进分子。</p> <p>这一天，先进分子牵着一头鹿进来，说要参加赛马。咱部里的老学究 
Java 就不同意了呀，鹿又不是马，哪能参加赛马。</p> <p>当然了，这种墨守成规的调用方式，自然是先进分子所不齿的。现在年轻人里流行的是鸭子类型（duck typing）[1]，只要是跑起来像只马的，它就是一只马，也就能够参加赛马比赛。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Horse { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Horse.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Deer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("Deer.race()"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Cobra { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void race() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("How do you turn this on?"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>(如何用同一种方式调用他们的赛跑方法？)</p> <p>说到了这里，如果我们将赛跑定义为对赛跑方法（对应上述代码中的 
race()）的调用的话，那么这个故事的关键，就在于能不能在马场中调用非马类型的赛跑方法。</p> <p>为了解答这个问题，我们先来回顾一下 Java 里的方法调用。在 Java 中，方法调用会被编译为 
invokestatic，invokespecial，invokevirtual 以及 invokeinterface 四种指令。这些指令与包含目标方法类名、方法名以及方法描述符的符号引用捆绑。在实际运行之前，Java 
虚拟机将根据这个符号引用链接到具体的目标方法。</p><!-- [[[read_end]]] --> <p>可以看到，在这四种调用指令中，Java 虚拟机明确要求方法调用需要提供目标方法的类名。在这种体系下，我们有两个解决方案。一是调用其中一种类型的赛跑方法，比如说马类的赛跑方法。对于非马的类型，则给它套一层马甲，当成马来赛跑。</p> 
<p>另外一种解决方式，是通过反射机制，来查找并且调用各个类型中的赛跑方法，以此模拟真正的赛跑。</p> <p>显然，比起直接调用，这两种方法都相当复杂，执行效率也可想而知。为了解决这个问题，Java 
7 引入了一条新的指令 invokedynamic。该指令的调用机制抽象出调用点这一个概念，并允许应用程序将调用点链接至任意符合条件的方法上。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void startRace(java.lang.Object) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 // 加载一个任意对象 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokedynamic race // 调用赛跑方法 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>(理想的调用方式)</p> 
<p>作为 invokedynamic 的准备工作，Java 7 引入了更加底层、更加灵活的方法抽象 ：方法句柄（MethodHandle）。</p> <h2>方法句柄的概念</h2> 
<p>方法句柄是一个强类型的，能够被直接执行的引用 [2]。该引用可以指向常规的静态方法或者实例方法，也可以指向构造器或者字段。当指向字段时，方法句柄实则指向包含字段访问字节码的虚构方法，语义上等价于目标字段的 
getter 或者 setter 方法。</p> <p>这里需要注意的是，它并不会直接指向目标字段所在类中的 getter/setter，毕竟你无法保证已有的 getter/setter 
方法就是在访问目标字段。</p> <p>方法句柄的类型（MethodType）是由所指向方法的参数类型以及返回类型组成的。它是用来确认方法句柄是否适配的唯一关键。当使用方法句柄时，我们其实并不关心方法句柄所指向方法的类名或者方法名。</p> 
<p>打个比方，如果兔子的“赛跑”方法和“睡觉”方法的参数类型以及返回类型一致，那么对于兔子递过来的一个方法句柄，我们并不知道会是哪一个方法。</p> <p>方法句柄的创建是通过 MethodHandles.Lookup 
类来完成的。它提供了多个 API，既可以使用反射 API 中的 Method 来查找，也可以根据类、方法名以及方法句柄类型来查找。</p> <p>当使用后者这种查找方式时，用户需要区分具体的调用类型，比如说对于用 
invokestatic 调用的静态方法，我们需要使用 Lookup.findStatic 方法；对于用 invokevirutal 调用的实例方法，以及用 invokeinterface 
调用的接口方法，我们需要使用 findVirtual 方法；对于用 invokespecial 调用的实例方法，我们则需要使用 findSpecial 方法。</p> <p>调用方法句柄，和原本对应的调用指令是一致的。也就是说，对于原本用 
invokevirtual 调用的方法句柄，它也会采用动态绑定；而对于原本用 invkespecial 调用的方法句柄，它会采用静态绑定。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> private 
static void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
.. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static Lookup lookup() { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return MethodHandles.lookup(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 获取方法句柄的不同方式 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandles.Lookup l = Foo.lookup(); 
// 具备 Foo 类的访问权限 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Method m = Foo.class.getDeclaredMethod("bar", Object.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodHandle mh0 = l.unreflect(m); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodType t = MethodType.methodType(void.class, Object.class); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh1 = l.findStatic(Foo.class, 
"bar", t); </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>方法句柄同样也有权限问题。但它与反射 API 不同，其权限检查是在句柄的创建阶段完成的。在实际调用过程中，Java 
虚拟机并不会检查方法句柄的权限。如果该句柄被多次调用的话，那么与反射调用相比，它将省下重复权限检查的开销。</p> <p>需要注意的是，方法句柄的访问权限不取决于方法句柄的创建位置，而是取决于 
Lookup 对象的创建位置。</p> <p>举个例子，对于一个私有字段，如果 Lookup 对象是在私有字段所在类中获取的，那么这个 Lookup 对象便拥有对该私有字段的访问权限，即使是在所在类的外边，也能够通过该 
Lookup 对象创建该私有字段的 getter 或者 setter。</p> <p>由于方法句柄没有运行时权限检查，因此，应用程序需要负责方法句柄的管理。一旦它发布了某些指向私有方法的方法句柄，那么这些私有方法便被暴露出去了。</p> 
<h2>方法句柄的操作</h2> <p>方法句柄的调用可分为两种，一是需要严格匹配参数类型的 invokeExact。它有多严格呢？假设一个方法句柄将接收一个 Object 类型的参数，如果你直接传入 
String 作为实际参数，那么方法句柄的调用会在运行时抛出方法类型不匹配的异常。正确的调用方式是将该 String 显式转化为 Object 类型。</p> <p>在普通 Java 
方法调用中，我们只有在选择重载方法时，才会用到这种显式转化。这是因为经过显式转化后，参数的声明类型发生了改变，因此有可能匹配到不同的方法描述符，从而选取不同的目标方法。调用方法句柄也是利用同样的原理，并且涉及了一个签名多态性（signature 
polymorphism）的概念。（在这里我们暂且认为签名等同于方法描述符。）</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
final native @PolymorphicSignature Object invokeExact(Object... args) throws Throwable; </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>方法句柄 API 有一个特殊的注解类 @PolymorphicSignature。在碰到被它注解的方法调用时，Java 编译器会根据所传入参数的声明类型来生成方法描述符，而不是采用目标方法所声明的描述符。</p> 
<p>在刚才的例子中，当传入的参数是 String 时，对应的方法描述符包含 String 类；而当我们转化为 Object 时，对应的方法描述符则包含 Object 类。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test(MethodHandle mh, String s) throws Throwable { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(s); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact((Object) s); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的 Java 字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(MethodHandle, String) throws java.lang.Throwable; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 2: invokevirtual MethodHandle.invokeExact:(Ljava/lang/String;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: invokevirtual MethodHandle.invokeExact:(Ljava/lang/Object;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>invokeExact 会确认该 invokevirtual 指令对应的方法描述符，和该方法句柄的类型是否严格匹配。在不匹配的情况下，便会在运行时抛出异常。</p> <p>如果你需要自动适配参数类型，那么你可以选取方法句柄的第二种调用方式 
invoke。它同样是一个签名多态性的方法。invoke 会调用 MethodHandle.asType 方法，生成一个适配器方法句柄，对传入的参数进行适配，再调用原方法句柄。调用原方法句柄的返回值同样也会先进行适配，然后再返回给调用者。</p> 
<p>方法句柄还支持增删改参数的操作，这些操作都是通过生成另一个方法句柄来实现的。这其中，改操作就是刚刚介绍的 MethodHandle.asType 方法。删操作指的是将传入的部分参数就地抛弃，再调用另一个方法句柄。它对应的 
API 是 MethodHandles.dropArguments 方法。</p> <p>增操作则非常有意思。它会往传入的参数中插入额外的参数，再调用另一个方法句柄，它对应的 API 
是 MethodHandle.bindTo 方法。Java 8 中捕获类型的 Lambda 表达式便是用这种操作来实现的，下一篇我会详细进行解释。</p> <p>增操作还可以用来实现方法的柯里化 
[3]。举个例子，有一个指向 f(x, y) 的方法句柄，我们可以通过将 x 绑定为 4，生成另一个方法句柄 g(y) = f(4, y)。在执行过程中，每当调用 g(y) 的方法句柄，它会在参数列表最前面插入一个 
4，再调用指向 f(x, y) 的方法句柄。</p> <h2>方法句柄的实现</h2> <p>下面我们来看看 HotSpot 虚拟机中方法句柄调用的具体实现。（由于篇幅原因，这里只讨论 
DirectMethodHandle。）</p> <p>前面提到，调用方法句柄所使用的 invokeExact 或者 invoke 方法具备签名多态性的特性。它们会根据具体的传入参数来生成方法描述符。那么，拥有这个描述符的方法实际存在吗？对 
invokeExact 或者 invoke 的调用具体会进入哪个方法呢？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.invoke.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> new Exception().printStackTrace(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, Object.class); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findStatic(Foo.class, 
"bar", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> mh.invokeExact(new 
Object()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>和查阅反射调用的方式一样，我们可以通过新建异常实例来查看栈轨迹。打印出来的占轨迹如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> java.lang.Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Foo.bar(Foo.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Foo.main(Foo.java:12) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>也就是说，invokeExact 
的目标方法竟然就是方法句柄指向的方法。</p> <p>先别高兴太早。我刚刚提到过，invokeExact 会对参数的类型进行校验，并在不匹配的情况下抛出异常。如果它直接调用了方法句柄所指向的方法，那么这部分参数类型校验的逻辑将无处安放。因此，唯一的可能便是 
Java 虚拟机隐藏了部分栈信息。</p> <p>当我们启用了 -XX:+ShowHiddenFrames 这个参数来打印被 Java 虚拟机隐藏了的栈信息时，你会发现 main 方法和目标方法中间隔着两个貌似是生成的方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames Foo 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.bar(Foo.java:5) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.invoke.DirectMethodHandle$Holder. 
invokeStatic(DirectMethodHandle$Holder:1000010) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/java.lang.invoke.LambdaForm$MH000/766572210. invokeExact_MT000_LLL_V(LambdaForm$MH000:1000019) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:12) </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>实际上，Java 虚拟机会对 invokeExact 调用做特殊处理，调用至一个共享的、与方法句柄类型相关的特殊适配器中。这个适配器是一个 LambdaForm，我们可以通过添加虚拟机参数将之导出成 
class 文件（-Djava.lang.invoke.MethodHandle.DUMP_CLASS_FILES=true）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class java.lang.invoke.LambdaForm$MH000 { static void invokeExact_MT000_LLLLV(jeava.lang.bject, 
jjava.lang.bject, jjava.lang.bject); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 : checkcast 
#14 //Mclass java/lang/invoke/ethodHandle </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> : dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
5 : astore_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> : aload_32 
: checkcast #16 //Mclass java/lang/invoke/ethodType </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: invokestatic I#22 // Method java/lang/invoke/nvokers.checkExactType:(MLjava/lang/invoke/ethodHandle,;Ljava/lang/invoke/ethodType);V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: invokestatic #26 I // Method java/lang/invoke/nvokers.checkCustomized:(MLjava/lang/invoke/ethodHandle);V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 17: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 18: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: ainvakevirtudl #30 2 // Methodijava/lang/nvokev/ethodHandle.invokeBasic:(LLeava/lang/bject;;V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 23 return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，在这个适配器中，它会调用 Invokers.checkExactType 
方法来检查参数类型，然后调用 Invokers.checkCustomized 方法。后者会在方法句柄的执行次数超过一个阈值时进行优化（对应参数 -Djava.lang.invoke.MethodHandle.CUSTOMIZE_THRESHOLD，默认值为 
127）。最后，它会调用方法句柄的 invokeBasic 方法。</p> <p>Java 虚拟机同样会对 invokeBasic 调用做特殊处理，这会将调用至方法句柄本身所持有的适配器中。这个适配器同样是一个 
LambdaForm，你可以通过反射机制将其打印出来。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 该方法句柄持有的 LambdaForm 实例的 toString() 
结果 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> DMH.invokeStatic_L_V=Lambda(a0:L,a1:L)=&gt;{ 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t2:L=DirectMethodHandle.internalMemberName(a0:L); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t3:V=MethodHandle.linkToStatic(a1:L,t2:L);void} 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这个适配器将获取方法句柄中的 MemberName 类型的字段，并且以它为参数调用 linkToStatic 方法。估计你已经猜到了，Java 虚拟机也会对 
linkToStatic 调用做特殊处理，它将根据传入的 MemberName 参数所存储的方法地址或者方法表索引，直接跳转至目标方法。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final class MemberName implements Member, Cloneable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
//@Injected JVM_Method* vmtarget; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> //@Injected int vmindex; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>那么前面那个适配器中的优化又是怎么回事？实际上，方法句柄一开始持有的适配器是共享的。当它被多次调用之后，Invokers.checkCustomized 
方法会为该方法句柄生成一个特有的适配器。这个特有的适配器会将方法句柄作为常量，直接获取其 MemberName 类型的字段，并继续后面的 linkToStatic 调用。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> final class java.lang.invoke.LambdaForm$DMH000 { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static void invokeStatic000_LL_V(java.lang.Object, 
java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: ldc 
#14 // String CONSTANT_PLACEHOLDER_1 &lt;&lt;Foo.bar(Object)void/invokeStatic&gt;&gt; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: checkcast #16 // class java/lang/invoke/MethodHandle 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: astore_0 // 上面的优化代码覆盖了传入的方法句柄 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: aload_0 // 从这里开始跟初始版本一致 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: invokestatic #22 // Method java/lang/invoke/DirectMethodHandle.internalMemberName:(Ljava/lang/Object;)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: checkcast #24 // class java/lang/invoke/MemberName 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: invokestatic #28 // Method java/lang/invoke/MethodHandle.linkToStatic:(Ljava/lang/Object;Ljava/lang/invoke/MemberName;)V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>可以看到，方法句柄的调用和反射调用一样，都是间接调用。因此，它也会面临无法内联的问题。不过，与反射调用不同的是，方法句柄的内联瓶颈在于即时编译器能否将该方法句柄识别为常量。具体内容我会在下一篇中进行详细的解释。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 invokedynamic 底层机制的基石：方法句柄。</p> <p>方法句柄是一个强类型的、能够被直接执行的引用。它仅关心所指向方法的参数类型以及返回类型，而不关心方法所在的类以及方法名。方法句柄的权限检查发生在创建过程中，相较于反射调用节省了调用时反复权限检查的开销。</p> 
<p>方法句柄可以通过 invokeExact 以及 invoke 来调用。其中，invokeExact 要求传入的参数和所指向方法的描述符严格匹配。方法句柄还支持增删改参数的操作，这些操作是通过生成另一个充当适配器的方法句柄来实现的。</p> 
<p>方法句柄的调用和反射调用一样，都是间接调用，同样会面临无法内联的问题。</p> <p>今天的实践环节，我们来测量一下方法句柄的性能。你可以尝试通过重构代码，将方法句柄变成常量，来提升方法句柄调用的性能。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void bar(Object o) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Throwable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
MethodHandles.Lookup l = MethodHandles.lookup(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodType t = MethodType.methodType(void.class, Object.class); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodHandle mh = l.findVirtual(Foo.class, 
"bar", t); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mh.invokeExact(new Foo(), new Object()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>[1] 
<a href="https://en.wikipedia.org/wiki/Duck_typing">https://en.wikipedia.org/wiki/Duck_typing</a><br> 
[2]<br> <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/invoke/MethodHandle.html">https://docs.oracle.com/javase/10/docs/api/java/lang/invoke/MethodHandle.html</a><br> 
[3]<br> <a href="https://en.wikipedia.org/wiki/Currying">https://en.wikipedia.org/wiki/Currying</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 37, 37) 
 {executed in 3 msec}
2020-11-19 20:17:56.111 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=37 
 {executed in 1 msec}
2020-11-19 20:17:56.114 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:56.118 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=37 
 {executed in 2 msec}
2020-11-19 20:17:56.120 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:17:56.126 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788276, 1605788276, 1, 'zh-hans', 0, 1, 1, 
0, '08丨JVM是怎么实现invokedynamic的？（上）', 1, 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.133 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=37 
 {executed in 1 msec}
2020-11-19 20:17:56.135 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:17:56.142 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788276, 1605788276, 1, 'zh-hans', 0, 
1, 1, 0, '08丨JVM是怎么实现invokedynamic的？（上）', 'book', 1, 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.148 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.150 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:56.153 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.155 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:56.161 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5127d9ae1fa9b8f21453d634c3680e66?bkt=en-2fb6763f1c8fb1010d6c7c87af8929a8ccadcf13b43367e6a7c9de2cdacf67c3a2f8167aa375a844&fid=3757516097-778750-33869851494714&time=1605788274&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-rxswhIK3vn1Iz6KCcKDQ70JRfnU%3D&to=92&size=6105200&sta_dx=6105200&sta_cs=4337&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182961&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6105200&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-60db1fe674cf1ffcced38a11cdcfece9146cd2de78b03720e1e65673aace4bd7e93aa2c28b776490&sl=76480590&expires=8h&rt=pr&r=173634937&mlogid=7510897654244893348&vbdid=64799653&fin=08%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510897654244893348&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542501734d8ca037459b26e1f4b7f439d204b&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=08%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.167 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.169 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:17:56.177 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5127d9ae1fa9b8f21453d634c3680e66?bkt=en-2fb6763f1c8fb1010d6c7c87af8929a8ccadcf13b43367e6a7c9de2cdacf67c3a2f8167aa375a844&fid=3757516097-778750-33869851494714&time=1605788274&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-rxswhIK3vn1Iz6KCcKDQ70JRfnU%3D&to=92&size=6105200&sta_dx=6105200&sta_cs=4337&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182961&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6105200&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-60db1fe674cf1ffcced38a11cdcfece9146cd2de78b03720e1e65673aace4bd7e93aa2c28b776490&sl=76480590&expires=8h&rt=pr&r=173634937&mlogid=7510897654244893348&vbdid=64799653&fin=08%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510897654244893348&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542501734d8ca037459b26e1f4b7f439d204b&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=08%E4%B8%A8JVM%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0invokedynamic%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
37, 37) 
 {executed in 2 msec}
2020-11-19 20:17:56.183 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.185 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:56.188 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.190 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:56.203 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>秋天</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个东西的应用场景是什么？讲的挺深，联系不起来知识 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 那么方法句柄是否可以取代反射了呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这篇读的好吃力，我的一个建议，先抛出一个使用方法句柄的代码例子，然后再剖析代码在虚拟机的实际过程。自顶向下的讲，由浅入深，这篇直接自底向上了，咬咬牙读到最后，才发现这是类似反射的模拟方法调用的方法 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/59/08065309.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雨亦奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 个人觉得还是按老师的课程安排来走吧。跳来跳去的讲可能会零散不系统。上面两位的说法我不赞同。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Yoph</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄VS反射VS代理： <br>从访问控制层面来讲，反射需要调用setAccesible()，可能会受到安全管理器的禁止警告；代理有些情况下通过内部类实现，但是内部类只能访问受限的函数或字段；而方法句柄则在上下文中对所有方法都有完整的访问权限，并且不会受到安全管理器的限制，这是方法句柄的优势之一。 
<br>从执行速度层面来讲，在上一篇中老师也讲到了反射的性能会受到参数方法、类型的自动装箱和拆箱、方法内联的影响，相对来讲反射算是执行较慢的了（当然并没有和方法句柄通过执行具体操作示例作对比，可能在不同的JVM配置情况下执行情况不一样，比如解释器模式或编译模式下等）；通过代理的方式因调用JAVA函数实现，速度与其它调用函数的速度是一样的，相对较快；而方法句柄可能不会有代理方式那样的执行速度快，但同样会受到JVM等不同的配置导致速度不同，但从JVM设计者的角度来说，应该是力求达到像调用函数一样快的速度，目前可能是达不到的。 
<br>从类的开销层面来讲，代理通常声明多个类，需要占用方法区，而方法句柄并不需要像代理一样有多个类的开销，不需要方法区的开销。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄VS反射VS代理： <br>从访问控制层面来讲，反射需要调用setAccesible()，可能会受到安全管理器的禁止警告；代理有些情况下通过内部类实现，但是内部类只能访问受限的函数或字段；而方法句柄则在上下文中对所有方法都有完整的访问权限，并且不会受到安全管理器的限制，这是方法句柄的优势之一。 
<br>从执行速度层面来讲，在上一篇中老师也讲到了反射的性能会受到参数方法、类型的自动装箱和拆箱、方法内联的影响，相对来讲反射算是执行较慢的了（当然并没有和方法句柄通过执行具体操作示例作对比，可能在不同的JVM配置情况下执行情况不一样，比如解释器模式或编译模式下等）；通过代理的方式因调用JAVA函数实现，速度与其它调用函数的速度是一样的，相对较快；而方法句柄可能不会有代理方式那样的执行速度快，但同样会受到JVM等不同的配置导致速度不同，但从JVM设计者的角度来说，应该是力求达到像调用函数一样快的速度，目前可能是达不到的。 
<br>从类的开销层面来讲，代理通常声明多个类，需要占用方法区，而方法句柄并不需要像代理一样有多个类的开销，不需要方法区的开销。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄其实就是可以取得与反射相同的效果，不过方法句柄使用的代码更简洁。使用方法句柄，可以去掉反射中很多套路化的代码，提高代码的可读性。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪，我看了一下MethodHandle的增操作，即你所提到的bindTo这个API，它貌似只能用于为virtual 
method绑定第一个参数（即caller的this*指针），并不能普适地为方法绑定一个任意参数（例如把参数列表(int, int)里的第一个参数绑定为常数4）。那么你例子中所提到的更为一般性的柯里化又是怎么实现的呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出 :)<br>bindTo确实限制了只能使用引用类型，而且正如你所说普遍是用来绑定this的。但是由于方法句柄不区分调用者和参数，所以还是可以滥用的。<br><br>你可以试试用Integer，然后使用静态方法，或者在使用virtual方法时将bindTo返回的方法句柄再bindTo一个Integer.valueOf(4)<br><br>BoundMethodHande里有各种非公有的bindArgument*方法，感兴趣可以了解一下</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 想问下老师，为啥在jdk1.8上面分别用反射和方法句柄测试，发现执行次数量特别大的时候方法句柄执行效率反而比反射差，执行数量小的时候比反射执行效率高，不知道为什么，请老师点拨？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/25/80/fdd5a88f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ﹏雨天__...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有些内容，第一遍读总是看不懂，听不明白，当你多次读了之后，并查阅相关内容后，你会发现雨迪老师讲的内容，真的很到位，值得学习。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/c6/6a/b3fab71d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>鑫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> invokedynamic与方法句柄的关系是怎么样的?f方法句柄替invokedynamic抽象出调用点? 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/15/14/98/0251b8fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Cy190622</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 当使用方法句柄时，我们不关心方法句柄指向方法的类名或者方法名。 
<br>那怎么区分不同类同名方法 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJ4C5xMfrgT295JdyiaLFJvf5aGOC1y5IKXIles7iaDwSxoiaEru8icjszZtnMm7ibx0ibQTibqTmLEaflIg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>松鼠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 反射的权限检查是在编译期完成的，怎么会有权限检查的开销？ </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 暂时只能想到把他绑定到一个固定的 “Foo” 实例上。。。。 <br>import java.lang.invoke.*; 
<br> <br>public class Foo { <br>&nbsp;&nbsp;public void bar(Object o) { <br>&nbsp;&nbsp;} <br> 
<br>&nbsp;&nbsp;public static void main(String[] args) throws Throwable { <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodHandles.Lookup 
l = MethodHandles.lookup(); <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodType t = MethodType.methodType(void.class, 
Object.class); <br>&nbsp;&nbsp;&nbsp;&nbsp;Foo foo = new Foo(); <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodHandle 
mh = l.findVirtual(Foo.class, "bar", t).bindTo(foo); <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;long 
current = System.currentTimeMillis(); <br>&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 1; i &lt;= 2_000_000_000; 
i++) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 100_000_000 == 0) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long 
temp = System.currentTimeMillis(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(temp 
- current); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current = temp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mh.invokeExact(new Object()); <br>&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;} <br>} <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> "方法句柄 API 有一个特殊的注解类 
@PolymorphicSignature。在碰到被它注解的方法调用时"这句话的"被它注解的方法调用时"是不是就是"调用的方法被它注解时"？ </div> <!----> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这篇文章我是花比较长时间去读，有个地方想了很久，文档里也没明示，我自己尝试写代码操作方法句柄参数，为什么MethodType.methodType()里指定的首参类型(ptype0)，居然是方法调用实例的类型，而不是方法的参数类型，这个为什么是这么设计呢？有什么渊源？想了解一下 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/4e/95/362c305a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>FortyTo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，反射和动态绑定有什么不同，感觉实现的功能都一样. 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/c9/f44cb7f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>爪哇夜未眠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师能讲下JVM对线程的实现方式吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
37, 37) 
 {executed in 5 msec}
2020-11-19 20:17:56.215 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.217 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:17:56.229 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>秋天</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个东西的应用场景是什么？讲的挺深，联系不起来知识 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 那么方法句柄是否可以取代反射了呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这篇读的好吃力，我的一个建议，先抛出一个使用方法句柄的代码例子，然后再剖析代码在虚拟机的实际过程。自顶向下的讲，由浅入深，这篇直接自底向上了，咬咬牙读到最后，才发现这是类似反射的模拟方法调用的方法 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/59/08065309.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雨亦奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 个人觉得还是按老师的课程安排来走吧。跳来跳去的讲可能会零散不系统。上面两位的说法我不赞同。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Yoph</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄VS反射VS代理： <br>从访问控制层面来讲，反射需要调用setAccesible()，可能会受到安全管理器的禁止警告；代理有些情况下通过内部类实现，但是内部类只能访问受限的函数或字段；而方法句柄则在上下文中对所有方法都有完整的访问权限，并且不会受到安全管理器的限制，这是方法句柄的优势之一。 
<br>从执行速度层面来讲，在上一篇中老师也讲到了反射的性能会受到参数方法、类型的自动装箱和拆箱、方法内联的影响，相对来讲反射算是执行较慢的了（当然并没有和方法句柄通过执行具体操作示例作对比，可能在不同的JVM配置情况下执行情况不一样，比如解释器模式或编译模式下等）；通过代理的方式因调用JAVA函数实现，速度与其它调用函数的速度是一样的，相对较快；而方法句柄可能不会有代理方式那样的执行速度快，但同样会受到JVM等不同的配置导致速度不同，但从JVM设计者的角度来说，应该是力求达到像调用函数一样快的速度，目前可能是达不到的。 
<br>从类的开销层面来讲，代理通常声明多个类，需要占用方法区，而方法句柄并不需要像代理一样有多个类的开销，不需要方法区的开销。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄VS反射VS代理： <br>从访问控制层面来讲，反射需要调用setAccesible()，可能会受到安全管理器的禁止警告；代理有些情况下通过内部类实现，但是内部类只能访问受限的函数或字段；而方法句柄则在上下文中对所有方法都有完整的访问权限，并且不会受到安全管理器的限制，这是方法句柄的优势之一。 
<br>从执行速度层面来讲，在上一篇中老师也讲到了反射的性能会受到参数方法、类型的自动装箱和拆箱、方法内联的影响，相对来讲反射算是执行较慢的了（当然并没有和方法句柄通过执行具体操作示例作对比，可能在不同的JVM配置情况下执行情况不一样，比如解释器模式或编译模式下等）；通过代理的方式因调用JAVA函数实现，速度与其它调用函数的速度是一样的，相对较快；而方法句柄可能不会有代理方式那样的执行速度快，但同样会受到JVM等不同的配置导致速度不同，但从JVM设计者的角度来说，应该是力求达到像调用函数一样快的速度，目前可能是达不到的。 
<br>从类的开销层面来讲，代理通常声明多个类，需要占用方法区，而方法句柄并不需要像代理一样有多个类的开销，不需要方法区的开销。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 方法句柄其实就是可以取得与反射相同的效果，不过方法句柄使用的代码更简洁。使用方法句柄，可以去掉反射中很多套路化的代码，提高代码的可读性。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪，我看了一下MethodHandle的增操作，即你所提到的bindTo这个API，它貌似只能用于为virtual 
method绑定第一个参数（即caller的this*指针），并不能普适地为方法绑定一个任意参数（例如把参数列表(int, int)里的第一个参数绑定为常数4）。那么你例子中所提到的更为一般性的柯里化又是怎么实现的呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出 :)<br>bindTo确实限制了只能使用引用类型，而且正如你所说普遍是用来绑定this的。但是由于方法句柄不区分调用者和参数，所以还是可以滥用的。<br><br>你可以试试用Integer，然后使用静态方法，或者在使用virtual方法时将bindTo返回的方法句柄再bindTo一个Integer.valueOf(4)<br><br>BoundMethodHande里有各种非公有的bindArgument*方法，感兴趣可以了解一下</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 想问下老师，为啥在jdk1.8上面分别用反射和方法句柄测试，发现执行次数量特别大的时候方法句柄执行效率反而比反射差，执行数量小的时候比反射执行效率高，不知道为什么，请老师点拨？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/25/80/fdd5a88f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ﹏雨天__...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有些内容，第一遍读总是看不懂，听不明白，当你多次读了之后，并查阅相关内容后，你会发现雨迪老师讲的内容，真的很到位，值得学习。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/c6/6a/b3fab71d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>鑫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> invokedynamic与方法句柄的关系是怎么样的?f方法句柄替invokedynamic抽象出调用点? 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/15/14/98/0251b8fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Cy190622</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 当使用方法句柄时，我们不关心方法句柄指向方法的类名或者方法名。 
<br>那怎么区分不同类同名方法 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJ4C5xMfrgT295JdyiaLFJvf5aGOC1y5IKXIles7iaDwSxoiaEru8icjszZtnMm7ibx0ibQTibqTmLEaflIg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>松鼠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 反射的权限检查是在编译期完成的，怎么会有权限检查的开销？ </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 暂时只能想到把他绑定到一个固定的 “Foo” 实例上。。。。 <br>import java.lang.invoke.*; 
<br> <br>public class Foo { <br>&nbsp;&nbsp;public void bar(Object o) { <br>&nbsp;&nbsp;} <br> 
<br>&nbsp;&nbsp;public static void main(String[] args) throws Throwable { <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodHandles.Lookup 
l = MethodHandles.lookup(); <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodType t = MethodType.methodType(void.class, 
Object.class); <br>&nbsp;&nbsp;&nbsp;&nbsp;Foo foo = new Foo(); <br>&nbsp;&nbsp;&nbsp;&nbsp;MethodHandle 
mh = l.findVirtual(Foo.class, "bar", t).bindTo(foo); <br> <br>&nbsp;&nbsp;&nbsp;&nbsp;long 
current = System.currentTimeMillis(); <br>&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 1; i &lt;= 2_000_000_000; 
i++) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 100_000_000 == 0) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long 
temp = System.currentTimeMillis(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(temp 
- current); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current = temp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mh.invokeExact(new Object()); <br>&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;} <br>} <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> "方法句柄 API 有一个特殊的注解类 
@PolymorphicSignature。在碰到被它注解的方法调用时"这句话的"被它注解的方法调用时"是不是就是"调用的方法被它注解时"？ </div> <!----> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这篇文章我是花比较长时间去读，有个地方想了很久，文档里也没明示，我自己尝试写代码操作方法句柄参数，为什么MethodType.methodType()里指定的首参类型(ptype0)，居然是方法调用实例的类型，而不是方法的参数类型，这个为什么是这么设计呢？有什么渊源？想了解一下 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/4e/95/362c305a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>FortyTo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，反射和动态绑定有什么不同，感觉实现的功能都一样. 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/c9/f44cb7f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>爪哇夜未眠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师能讲下JVM对线程的实现方式吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
37, 37) 
 {executed in 5 msec}
2020-11-19 20:17:56.235 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.237 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:56.240 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=37 
 {executed in 0 msec}
2020-11-19 20:17:56.242 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:56.248 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 37, 'https://static001.geekbang.org/resource/image/d0/21/d01b957f98cbc13fbd9f7675c702cf21.jpg', 
37) 
 {executed in 1 msec}
2020-11-19 20:17:56.255 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.256 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:17:56.263 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 37, 'https://static001.geekbang.org/resource/image/d0/21/d01b957f98cbc13fbd9f7675c702cf21.jpg', 
37) 
 {executed in 1 msec}
2020-11-19 20:17:56.268 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.270 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:56.277 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.283 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=37 
 {executed in 1 msec}
2020-11-19 20:17:56.284 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:17:56.291 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 37, 37) 
 {executed in 1 msec}
2020-11-19 20:17:56.298 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='353813022937668' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:17:56.300 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:13.753 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='353813022937668' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:18:13.755 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:13.758 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('353813022937668', 1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:18:13.760 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('353813022937668', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:18:13.761 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|75            |
|--------------|

2020-11-19 20:18:13.776 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='353813022937668' 
and bookchecke0_.name='media' 
 {executed in 0 msec}
2020-11-19 20:18:13.778 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:14.171 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='353813022937668' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:18:14.173 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:14.178 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('353813022937668', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:18:14.180 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('353813022937668', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:18:14.183 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|76            |
|--------------|

2020-11-19 20:18:14.209 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='353813022937668' 
 {executed in 1 msec}
2020-11-19 20:18:14.211 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:14.214 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788294, 1) 
 {executed in 1 msec}
2020-11-19 20:18:14.215 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788294, 1) 
 {executed in 0 msec}
2020-11-19 20:18:14.216 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|38            |
|--------------|

2020-11-19 20:18:14.227 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '6108bdec-4f5e-4704-867f-2c3e84c4b73c', 
38) 
 {executed in 1 msec}
2020-11-19 20:18:14.228 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '6108bdec-4f5e-4704-867f-2c3e84c4b73c', 38) 
 {executed in 0 msec}
2020-11-19 20:18:14.230 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|38            |
|--------------|

2020-11-19 20:18:14.244 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=38, revision_default=1, revision_timestamp=1605788294, 
revision_uid=1 where vid=38 
 {executed in 0 msec}
2020-11-19 20:18:14.249 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.251 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:14.257 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '353813022937668', 'zh-hans', 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.263 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.264 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:14.271 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '353813022937668', 'zh-hans', 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.276 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=38 
 {executed in 1 msec}
2020-11-19 20:18:14.278 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:18:14.281 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=38 
 {executed in 1 msec}
2020-11-19 20:18:14.283 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:18:14.289 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 38, 0, 0, 32, 0, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.294 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=38 
 {executed in 0 msec}
2020-11-19 20:18:14.296 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:14.299 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.301 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:14.321 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>今天我们来聊聊 Java 里的反射机制。</p> <p>反射是 Java 语言中一个相当重要的特性，它允许正在运行的 
Java 程序观测，甚至是修改程序的动态行为。</p> <p>举例来说，我们可以通过 Class 对象枚举该类中的所有方法，我们还可以通过 Method.setAccessible（位于 
java.lang.reflect 包，该方法继承自 AccessibleObject）绕过 Java 语言的访问权限，在私有方法所在类之外的地方调用该方法。</p> <p>反射在 
Java 中的应用十分广泛。开发人员日常接触到的 Java 集成开发环境（IDE）便运用了这一功能：每当我们敲入点号时，IDE 便会根据点号前的内容，动态展示可以访问的字段或者方法。</p> 
<p>另一个日常应用则是 Java 调试器，它能够在调试过程中枚举某一对象所有字段的值。</p> <p><img src="https://static001.geekbang.org/resource/image/ce/75/ceeabb2dbdd80577feaecd0879e42675.png" 
alt=""></p> <p>（图中 eclipse 的自动提示使用了反射）</p> <p>在 Web 开发中，我们经常能够接触到各种可配置的通用框架。为了保证框架的可扩展性，它们往往借助 
Java 的反射机制，根据配置文件来加载不同的类。举例来说，Spring 框架的依赖反转（IoC），便是依赖于反射机制。</p> <p>然而，我相信不少开发人员都嫌弃反射机制比较慢。甚至是甲骨文关于反射的教学网页 
[1]，也强调了反射性能开销大的缺点。</p><!-- [[[read_end]]] --> <p>今天我们便来了解一下反射的实现机制，以及它性能糟糕的原因。如果你对反射 API 不是特别熟悉的话，你可以查阅我放在文稿末尾的附录。</p> 
<h2>反射调用的实现</h2> <p>首先，我们来看看方法的反射调用，也就是 Method.invoke，是怎么实现的。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public final class Method extends Executable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Object invoke(Object obj, Object... args) throws ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // 权限检查 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodAccessor ma = methodAccessor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (ma == null) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ma = acquireMethodAccessor(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return ma.invoke(obj, args); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>如果你查阅 Method.invoke 的源代码，那么你会发现，它实际上委派给 
MethodAccessor 来处理。MethodAccessor 是一个接口，它有两个已有的具体实现：一个通过本地方法来实现反射调用，另一个则使用了委派模式。为了方便记忆，我便用“本地实现”和“委派实现”来指代这两者。</p> 
<p>每个 Method 实例的第一次反射调用都会生成一个委派实现，它所委派的具体实现便是一个本地实现。本地实现非常容易理解。当进入了 Java 虚拟机内部之后，我们便拥有了 Method 
实例所指向方法的具体地址。这时候，反射调用无非就是将传入的参数准备好，然后调用进入目标方法。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// v0 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Test { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void target(int i) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Exception("#" + i).printStackTrace(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 
0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# 不同版本的输出略有不同，这里我使用了 Java 10。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java Test </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception: 
#0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.target(Test.java:5) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke0(Native Method) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
a t java.base/jdk.internal.reflect.NativeMethodAccessorImpl. .invoke(NativeMethodAccessorImpl.java:62) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.i 
.invoke(DelegatingMethodAccessorImpl.java:43) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> java.base/java.lang.reflect.Method.invoke(Method.java:564) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t Test.main(Test.java:131 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>为了方便理解，我们可以打印一下反射调用到目标方法时的栈轨迹。在上面的 v0 版本代码中，我们获取了一个指向 Test.target 方法的 Method 
对象，并且用它来进行反射调用。在 Test.target 中，我会打印出栈轨迹。</p> <p>可以看到，反射调用先是调用了 Method.invoke，然后进入委派实现（DelegatingMethodAccessorImpl），再然后进入本地实现（NativeMethodAccessorImpl），最后到达目标方法。</p> 
<p>这里你可能会疑问，为什么反射调用还要采取委派实现作为中间层？直接交给本地实现不可以么？</p> <p>其实，Java 的反射调用机制还设立了另一种动态生成字节码的实现（下称动态实现），直接使用 
invoke 指令来调用目标方法。之所以采用委派实现，便是为了能够在本地实现以及动态实现中切换。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 动态实现的伪代码，这里只列举了关键的调用逻辑，其实它还包括调用者检测、参数检测的字节码。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package jdk.internal.reflect; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class GeneratedMethodAccessor1 extends ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Overrides </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public Object invoke(Object obj, Object[] args) throws ... { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Test.target((int) args[0]); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return null; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>动态实现和本地实现相比，其运行效率要快上 20 倍 [2] 。这是因为动态实现无需经过 
Java 到 C++ 再到 Java 的切换，但由于生成字节码十分耗时，仅调用一次的话，反而是本地实现要快上 3 到 4 倍 [3]。</p> <p>考虑到许多反射调用仅会执行一次，Java 
虚拟机设置了一个阈值 15（可以通过 -Dsun.reflect.inflationThreshold= 来调整），当某个反射调用的调用次数在 15 之下时，采用本地实现；当达到 15 
时，便开始动态生成字节码，并将委派实现的委派对象切换至动态实现，这个过程我们称之为 Inflation。</p> <p>为了观察这个过程，我将刚才的例子更改为下面的 v1 版本。它会将反射调用循环 
20 次。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v1 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> new Exception("#" + i).printStackTrace(); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for 
(int i = 0; i &lt; 20; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
method.invoke(null, i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 使用 -verbose:class 打印加载的类 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -verbose:class Test </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> java.lang.Exception: #14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Test.target(Test.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl .invoke0(Native 
Method) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke(NativeMethodAccessorImpl.java:62) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [0.158s][info][class,load] ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [0.160s][info][class,load] jdk.internal.reflect.GeneratedMethodAccessor1 
source: __JVM_DefineClass__ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
java.lang.Exception: #15 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at Test.target(Test.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl .invoke0(Native Method) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke(NativeMethodAccessorImpl.java:62) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception: #16 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.target(Test.java:5) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at jdk.internal.reflect.GeneratedMethodAccessor1 
.invoke(Unknown Source) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，在第 
15 次（从 0 开始数）反射调用时，我们便触发了动态实现的生成。这时候，Java 虚拟机额外加载了不少类。其中，最重要的当属 GeneratedMethodAccessor1（第 
30 行）。并且，从第 16 次反射调用开始，我们便切换至这个刚刚生成的动态实现（第 40 行）。</p> <p>反射调用的 Inflation 机制是可以通过参数（-Dsun.reflect.noInflation=true）来关闭的。这样一来，在反射调用一开始便会直接生成动态实现，而不会使用委派实现或者本地实现。</p> 
<h2>反射调用的开销</h2> <p>下面，我们便来拆解反射调用的性能开销。</p> <p>在刚才的例子中，我们先后进行了 Class.forName，Class.getMethod 
以及 Method.invoke 三个操作。其中，Class.forName 会调用本地方法，Class.getMethod 则会遍历该类的公有方法。如果没有匹配到，它还将遍历父类的公有方法。可想而知，这两个操作都非常费时。</p> 
<p>值得注意的是，以 getMethod 为代表的查找方法操作，会返回查找得到结果的一份拷贝。因此，我们应当避免在热点代码中使用返回 Method 数组的 getMethods 或者 
getDeclaredMethods 方法，以减少不必要的堆空间消耗。</p> <p>在实践中，我们往往会在应用程序中缓存 Class.forName 和 Class.getMethod 
的结果。因此，下面我就只关注反射调用本身的性能开销。</p> <p>为了比较直接调用和反射调用的性能差距，我将前面的例子改为下面的 v2 版本。它会将反射调用循环二十亿次。此外，它还将记录下每跑一亿次的时间。</p> 
<p>我将取最后五个记录的平均值，作为预热后的峰值性能。（注：这种性能评估方式并不严谨，我会在专栏的第三部分介绍如何用 JMH 来测性能。）</p> <p>在我这个老笔记本上，一亿次直接调用耗费的时间大约在 
120ms。这和不调用的时间是一致的。其原因在于这段代码属于热循环，同样会触发即时编译。并且，即时编译会将对 Test.target 的调用内联进来，从而消除了调用的开销。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v2 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> mport java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>下面我将以 
120ms 作为基准，来比较反射调用的性能开销。</p> <p>由于目标方法 Test.target 接收一个 int 类型的参数，因此我传入 128 作为反射调用的参数，测得的结果约为基准的 
2.7 倍。我们暂且不管这个数字是高是低，先来看看在反射调用之前字节码都做了什么。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 59: aload_2 
// 加载 Method 对象 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
60: aconst_null // 反射调用的第一个参数 null </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 61: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 62: anewarray Object // 生成一个长度为 1 的 Object 数组 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 65: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 66: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 67: sipush 128 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 70: invokestatic Integer.valueOf // 将 128 自动装箱成 Integer </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 73: aastore // 存入 Object 数组中 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 74: invokevirtual Method.invoke // 反射调用 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里我截取了循环中反射调用编译而成的字节码。可以看到，这段字节码除了反射调用外，还额外做了两个操作。</p> <p>第一，由于 Method.invoke 
是一个变长参数方法，在字节码层面它的最后一个参数会是 Object 数组（感兴趣的同学私下可以用 javap 查看）。Java 编译器会在方法调用处生成一个长度为传入参数数量的 Object 
数组，并将传入参数一一存储进该数组中。</p> <p>第二，由于 Object 数组不能存储基本类型，Java 编译器会对传入的基本类型参数进行自动装箱。</p> <p>这两个操作除了带来性能开销外，还可能占用堆内存，使得 
GC 更加频繁。（如果你感兴趣的话，可以用虚拟机参数 -XX:+PrintGC 试试。）那么，如何消除这部分开销呢？</p> <p>关于第二个自动装箱，Java 缓存了 [-128, 
127] 中所有整数所对应的 Integer 对象。当需要自动装箱的整数在这个范围之内时，便返回缓存的 Integer，否则需要新建一个 Integer 对象。</p> <p>因此，我们可以将这个缓存的范围扩大至覆盖 
128（对应参数<br> -Djava.lang.Integer.IntegerCache.high=128），便可以避免需要新建 Integer 对象的场景。</p> <p>或者，我们可以在循环外缓存 
128 自动装箱得到的 Integer 对象，并且直接传入反射调用中。这两种方法测得的结果差不多，约为基准的 1.8 倍。</p> <p>现在我们再回来看看第一个因变长参数而自动生成的 
Object 数组。既然每个反射调用对应的参数个数是固定的，那么我们可以选择在循环外新建一个 Object 数组，设置好参数，并直接交给反射调用。改好的代码可以参照文稿中的 v3 版本。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v3 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] arg = new Object[1]; // 在循环外构造参数数组 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> arg[0] = 128; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, arg); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>测得的结果反而更糟糕了，为基准的 2.9 倍。这是为什么呢？</p> <p>如果你在上一步解决了自动装箱之后查看运行时的 GC 状况，你会发现这段程序并不会触发 
GC。其原因在于，原本的反射调用被内联了，从而使得即时编译器中的逃逸分析将原本新建的 Object 数组判定为不逃逸的对象。</p> <p>如果一个对象不逃逸，那么即时编译器可以选择栈分配甚至是虚拟分配，也就是不占用堆空间。具体我会在本专栏的第二部分详细解释。</p> 
<p>如果在循环外新建数组，即时编译器无法确定这个数组会不会中途被更改，因此无法优化掉访问数组的操作，可谓是得不偿失。</p> <p>到目前为止，我们的最好记录是 1.8 倍。那能不能再进一步提升呢？</p> 
<p>刚才我曾提到，可以关闭反射调用的 Inflation 机制，从而取消委派实现，并且直接使用动态实现。此外，每次反射调用都会检查目标方法的权限，而这个检查同样可以在 Java 代码里关闭，在关闭了这两项机制之后，也就得到了我们的 
v4 版本，它测得的结果约为基准的 1.3 倍。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v4 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 在运行指令中添加如下两个虚拟机参数： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// -Djava.lang.Integer.IntegerCache.high=128 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -Dsun.reflect.noInflation=true </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>到这里，我们基本上把反射调用的水分都榨干了。接下来，我来把反射调用的性能开销给提回去。</p> 
<p>首先，在这个例子中，之所以反射调用能够变得这么快，主要是因为即时编译器中的方法内联。在关闭了 Inflation 的情况下，内联的瓶颈在于 Method.invoke 方法中对 
MethodAccessor.invoke 方法的调用。</p> <p><img src="https://static001.geekbang.org/resource/image/93/b5/93dec45b7af7951a2b6daeb01941b9b5.png" 
alt=""></p> <p>我会在后面的文章中介绍方法内联的具体实现，这里先说个结论：在生产环境中，我们往往拥有多个不同的反射调用，对应多个 GeneratedMethodAccessor，也就是动态实现。</p> 
<p>由于 Java 虚拟机的关于上述调用点的类型 profile（注：对于 invokevirtual 或者 invokeinterface，Java 虚拟机会记录下调用者的具体类型，我们称之为类型 
profile）无法同时记录这么多个类，因此可能造成所测试的反射调用没有被内联的情况。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // v5 
版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Test { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void target(int i) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> polluteProfile(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void polluteProfile() throws 
Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Method 
method1 = Test.class.getMethod("target1", int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method2 = Test.class.getMethod("target2", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 2000; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method1.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method2.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target1(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target2(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在上面的 v5 版本中，我在测试循环之前调用了 polluteProfile 
的方法。该方法将反射调用另外两个方法，并且循环上 2000 遍。</p> <p>而测试循环则保持不变。测得的结果约为基准的 6.7 倍。也就是说，只要误扰了 Method.invoke 
方法的类型 profile，性能开销便会从 1.3 倍上升至 6.7 倍。</p> <p>之所以这么慢，除了没有内联之外，另外一个原因是逃逸分析不再起效。这时候，我们便可以采用刚才 
v3 版本中的解决方案，在循环外构造参数数组，并直接传递给反射调用。这样子测得的结果约为基准的 5.2 倍。</p> <p>除此之外，我们还可以提高 Java 虚拟机关于每个调用能够记录的类型数目（对应虚拟机参数 
-XX:TypeProfileWidth，默认值为 2，这里设置为 3）。最终测得的结果约为基准的 2.8 倍，尽管它和原本的 1.3 倍还有一定的差距，但总算是比 6.7 倍好多了。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 里的反射机制。</p> <p>在默认情况下，方法的反射调用为委派实现，委派给本地实现来进行方法调用。在调用超过 15 次之后，委派实现便会将委派对象切换至动态实现。这个动态实现的字节码是自动生成的，它将直接使用 
invoke 指令来调用目标方法。</p> <p>方法的反射调用会带来不少性能开销，原因主要有三个：变长参数方法导致的 Object 数组，基本类型的自动装箱、拆箱，还有最重要的方法内联。</p> 
<p>今天的实践环节，你可以将最后一段代码中 polluteProfile 方法的两个 Method 对象，都改成获取名字为“target”的方法。请问这两个获得的 Method 对象是同一个吗（==）？他们 
equal 吗（.equals(…)）？对我们的运行结果有什么影响？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> polluteProfile(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void polluteProfile() throws 
Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Method 
method1 = Test.class.getMethod("target", int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method2 = Test.class.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 2000; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method1.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method2.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target1(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target2(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>附录：反射 
API 简介</h2> <p>通常来说，使用反射 API 的第一步便是获取 Class 对象。在 Java 中常见的有这么三种。</p> <ol> <li>使用静态方法 Class.forName 
来获取。</li> <li>调用对象的 getClass() 方法。</li> <li>直接用类名 +“.class”访问。对于基本类型来说，它们的包装类型（wrapper classes）拥有一个名为“TYPE”的 
final 静态字段，指向该基本类型对应的 Class 对象。</li> </ol> <p>例如，Integer.TYPE 指向 int.class。对于数组类型来说，可以使用类名 
+“[ ].class”来访问，如 int[ ].class。</p> <p>除此之外，Class 类和 java.lang.reflect 包中还提供了许多返回 Class 对象的方法。例如，对于数组类的 
Class 对象，调用 Class.getComponentType() 方法可以获得数组元素的类型。</p> <p>一旦得到了 Class 对象，我们便可以正式地使用反射功能了。下面我列举了较为常用的几项。</p> 
<ol> <li> <p>使用 newInstance() 来生成一个该类的实例。它要求该类中拥有一个无参数的构造器。</p> </li> <li> <p>使用 isInstance(Object) 
来判断一个对象是否该类的实例，语法上等同于 instanceof 关键字（JIT 优化时会有差别，我会在本专栏的第二部分详细介绍）。</p> </li> <li> <p>使用 Array.newInstance(Class,int) 
来构造该类型的数组。</p> </li> <li> <p>使用 getFields()/getConstructors()/getMethods() 来访问该类的成员。除了这三个之外，Class 
类还提供了许多其他方法，详见 [4]。需要注意的是，方法名中带 Declared 的不会返回父类的成员，但是会返回私有成员；而不带 Declared 的则相反。</p> </li> 
</ol> <p>当获得了类成员之后，我们可以进一步做如下操作。</p> <ul> <li>使用 Constructor/Field/Method.setAccessible(true) 
来绕开 Java 语言的访问限制。</li> <li>使用 Constructor.newInstance(Object[]) 来生成该类的实例。</li> <li>使用 Field.get/set(Object) 
来访问字段的值。</li> <li>使用 Method.invoke(Object, Object[]) 来调用方法。</li> </ul> <p>有关反射 API 的其他用法，可以参考 
reflect 包的 javadoc [5] ，这里就不详细展开了。</p> <p>[1] : <a href="https://docs.oracle.com/javase/tutorial/reflect/">https://docs.oracle.com/javase/tutorial/reflect/</a><br> 
[2]: <a href="http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l80">http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l80</a><br> 
[3]: <a href="http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l78">http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l78</a><br> 
[4]: <a href="https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html">https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html</a><br> 
[5]: <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/package-summary.html">https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/package-summary.html</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 38, 38) 
 {executed in 7 msec}
2020-11-19 20:18:14.341 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.342 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:14.362 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>今天我们来聊聊 Java 里的反射机制。</p> <p>反射是 Java 语言中一个相当重要的特性，它允许正在运行的 Java 程序观测，甚至是修改程序的动态行为。</p> 
<p>举例来说，我们可以通过 Class 对象枚举该类中的所有方法，我们还可以通过 Method.setAccessible（位于 java.lang.reflect 包，该方法继承自 
AccessibleObject）绕过 Java 语言的访问权限，在私有方法所在类之外的地方调用该方法。</p> <p>反射在 Java 中的应用十分广泛。开发人员日常接触到的 Java 
集成开发环境（IDE）便运用了这一功能：每当我们敲入点号时，IDE 便会根据点号前的内容，动态展示可以访问的字段或者方法。</p> <p>另一个日常应用则是 Java 调试器，它能够在调试过程中枚举某一对象所有字段的值。</p> 
<p><img src="https://static001.geekbang.org/resource/image/ce/75/ceeabb2dbdd80577feaecd0879e42675.png" 
alt=""></p> <p>（图中 eclipse 的自动提示使用了反射）</p> <p>在 Web 开发中，我们经常能够接触到各种可配置的通用框架。为了保证框架的可扩展性，它们往往借助 
Java 的反射机制，根据配置文件来加载不同的类。举例来说，Spring 框架的依赖反转（IoC），便是依赖于反射机制。</p> <p>然而，我相信不少开发人员都嫌弃反射机制比较慢。甚至是甲骨文关于反射的教学网页 
[1]，也强调了反射性能开销大的缺点。</p><!-- [[[read_end]]] --> <p>今天我们便来了解一下反射的实现机制，以及它性能糟糕的原因。如果你对反射 API 不是特别熟悉的话，你可以查阅我放在文稿末尾的附录。</p> 
<h2>反射调用的实现</h2> <p>首先，我们来看看方法的反射调用，也就是 Method.invoke，是怎么实现的。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public final class Method extends Executable { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Object invoke(Object obj, Object... args) throws ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // 权限检查 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MethodAccessor ma = methodAccessor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (ma == null) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ma = acquireMethodAccessor(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return ma.invoke(obj, args); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>如果你查阅 Method.invoke 的源代码，那么你会发现，它实际上委派给 
MethodAccessor 来处理。MethodAccessor 是一个接口，它有两个已有的具体实现：一个通过本地方法来实现反射调用，另一个则使用了委派模式。为了方便记忆，我便用“本地实现”和“委派实现”来指代这两者。</p> 
<p>每个 Method 实例的第一次反射调用都会生成一个委派实现，它所委派的具体实现便是一个本地实现。本地实现非常容易理解。当进入了 Java 虚拟机内部之后，我们便拥有了 Method 
实例所指向方法的具体地址。这时候，反射调用无非就是将传入的参数准备好，然后调用进入目标方法。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// v0 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Test { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void target(int i) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new Exception("#" + i).printStackTrace(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 
0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# 不同版本的输出略有不同，这里我使用了 Java 10。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java Test </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception: 
#0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.target(Test.java:5) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke0(Native Method) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
a t java.base/jdk.internal.reflect.NativeMethodAccessorImpl. .invoke(NativeMethodAccessorImpl.java:62) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.i 
.invoke(DelegatingMethodAccessorImpl.java:43) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> java.base/java.lang.reflect.Method.invoke(Method.java:564) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t Test.main(Test.java:131 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>为了方便理解，我们可以打印一下反射调用到目标方法时的栈轨迹。在上面的 v0 版本代码中，我们获取了一个指向 Test.target 方法的 Method 
对象，并且用它来进行反射调用。在 Test.target 中，我会打印出栈轨迹。</p> <p>可以看到，反射调用先是调用了 Method.invoke，然后进入委派实现（DelegatingMethodAccessorImpl），再然后进入本地实现（NativeMethodAccessorImpl），最后到达目标方法。</p> 
<p>这里你可能会疑问，为什么反射调用还要采取委派实现作为中间层？直接交给本地实现不可以么？</p> <p>其实，Java 的反射调用机制还设立了另一种动态生成字节码的实现（下称动态实现），直接使用 
invoke 指令来调用目标方法。之所以采用委派实现，便是为了能够在本地实现以及动态实现中切换。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 动态实现的伪代码，这里只列举了关键的调用逻辑，其实它还包括调用者检测、参数检测的字节码。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package jdk.internal.reflect; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class GeneratedMethodAccessor1 extends ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Overrides </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public Object invoke(Object obj, Object[] args) throws ... { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Test.target((int) args[0]); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return null; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>动态实现和本地实现相比，其运行效率要快上 20 倍 [2] 。这是因为动态实现无需经过 
Java 到 C++ 再到 Java 的切换，但由于生成字节码十分耗时，仅调用一次的话，反而是本地实现要快上 3 到 4 倍 [3]。</p> <p>考虑到许多反射调用仅会执行一次，Java 
虚拟机设置了一个阈值 15（可以通过 -Dsun.reflect.inflationThreshold= 来调整），当某个反射调用的调用次数在 15 之下时，采用本地实现；当达到 15 
时，便开始动态生成字节码，并将委派实现的委派对象切换至动态实现，这个过程我们称之为 Inflation。</p> <p>为了观察这个过程，我将刚才的例子更改为下面的 v1 版本。它会将反射调用循环 
20 次。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // v1 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> new Exception("#" + i).printStackTrace(); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for 
(int i = 0; i &lt; 20; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
method.invoke(null, i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 使用 -verbose:class 打印加载的类 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -verbose:class Test </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> java.lang.Exception: #14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at Test.target(Test.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl .invoke0(Native 
Method) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke(NativeMethodAccessorImpl.java:62) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [0.158s][info][class,load] ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [0.160s][info][class,load] jdk.internal.reflect.GeneratedMethodAccessor1 
source: __JVM_DefineClass__ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
java.lang.Exception: #15 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at Test.target(Test.java:5) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl .invoke0(Native Method) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl 
.invoke(NativeMethodAccessorImpl.java:62) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java.lang.Exception: #16 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.target(Test.java:5) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at jdk.internal.reflect.GeneratedMethodAccessor1 
.invoke(Unknown Source) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl .invoke(DelegatingMethodAccessorImpl.java:43) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at java.base/java.lang.reflect.Method.invoke(Method.java:564) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Test.main(Test.java:12) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，在第 
15 次（从 0 开始数）反射调用时，我们便触发了动态实现的生成。这时候，Java 虚拟机额外加载了不少类。其中，最重要的当属 GeneratedMethodAccessor1（第 
30 行）。并且，从第 16 次反射调用开始，我们便切换至这个刚刚生成的动态实现（第 40 行）。</p> <p>反射调用的 Inflation 机制是可以通过参数（-Dsun.reflect.noInflation=true）来关闭的。这样一来，在反射调用一开始便会直接生成动态实现，而不会使用委派实现或者本地实现。</p> 
<h2>反射调用的开销</h2> <p>下面，我们便来拆解反射调用的性能开销。</p> <p>在刚才的例子中，我们先后进行了 Class.forName，Class.getMethod 
以及 Method.invoke 三个操作。其中，Class.forName 会调用本地方法，Class.getMethod 则会遍历该类的公有方法。如果没有匹配到，它还将遍历父类的公有方法。可想而知，这两个操作都非常费时。</p> 
<p>值得注意的是，以 getMethod 为代表的查找方法操作，会返回查找得到结果的一份拷贝。因此，我们应当避免在热点代码中使用返回 Method 数组的 getMethods 或者 
getDeclaredMethods 方法，以减少不必要的堆空间消耗。</p> <p>在实践中，我们往往会在应用程序中缓存 Class.forName 和 Class.getMethod 
的结果。因此，下面我就只关注反射调用本身的性能开销。</p> <p>为了比较直接调用和反射调用的性能差距，我将前面的例子改为下面的 v2 版本。它会将反射调用循环二十亿次。此外，它还将记录下每跑一亿次的时间。</p> 
<p>我将取最后五个记录的平均值，作为预热后的峰值性能。（注：这种性能评估方式并不严谨，我会在专栏的第三部分介绍如何用 JMH 来测性能。）</p> <p>在我这个老笔记本上，一亿次直接调用耗费的时间大约在 
120ms。这和不调用的时间是一致的。其原因在于这段代码属于热循环，同样会触发即时编译。并且，即时编译会将对 Test.target 的调用内联进来，从而消除了调用的开销。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v2 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> mport java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>下面我将以 
120ms 作为基准，来比较反射调用的性能开销。</p> <p>由于目标方法 Test.target 接收一个 int 类型的参数，因此我传入 128 作为反射调用的参数，测得的结果约为基准的 
2.7 倍。我们暂且不管这个数字是高是低，先来看看在反射调用之前字节码都做了什么。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 59: aload_2 
// 加载 Method 对象 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
60: aconst_null // 反射调用的第一个参数 null </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 61: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 62: anewarray Object // 生成一个长度为 1 的 Object 数组 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 65: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 66: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 67: sipush 128 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 70: invokestatic Integer.valueOf // 将 128 自动装箱成 Integer </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 73: aastore // 存入 Object 数组中 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 74: invokevirtual Method.invoke // 反射调用 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里我截取了循环中反射调用编译而成的字节码。可以看到，这段字节码除了反射调用外，还额外做了两个操作。</p> <p>第一，由于 Method.invoke 
是一个变长参数方法，在字节码层面它的最后一个参数会是 Object 数组（感兴趣的同学私下可以用 javap 查看）。Java 编译器会在方法调用处生成一个长度为传入参数数量的 Object 
数组，并将传入参数一一存储进该数组中。</p> <p>第二，由于 Object 数组不能存储基本类型，Java 编译器会对传入的基本类型参数进行自动装箱。</p> <p>这两个操作除了带来性能开销外，还可能占用堆内存，使得 
GC 更加频繁。（如果你感兴趣的话，可以用虚拟机参数 -XX:+PrintGC 试试。）那么，如何消除这部分开销呢？</p> <p>关于第二个自动装箱，Java 缓存了 [-128, 
127] 中所有整数所对应的 Integer 对象。当需要自动装箱的整数在这个范围之内时，便返回缓存的 Integer，否则需要新建一个 Integer 对象。</p> <p>因此，我们可以将这个缓存的范围扩大至覆盖 
128（对应参数<br> -Djava.lang.Integer.IntegerCache.high=128），便可以避免需要新建 Integer 对象的场景。</p> <p>或者，我们可以在循环外缓存 
128 自动装箱得到的 Integer 对象，并且直接传入反射调用中。这两种方法测得的结果差不多，约为基准的 1.8 倍。</p> <p>现在我们再回来看看第一个因变长参数而自动生成的 
Object 数组。既然每个反射调用对应的参数个数是固定的，那么我们可以选择在循环外新建一个 Object 数组，设置好参数，并直接交给反射调用。改好的代码可以参照文稿中的 v3 版本。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v3 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Class&lt;?&gt; klass = Class.forName("Test"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Method method = klass.getMethod("target", 
int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] arg = new Object[1]; // 在循环外构造参数数组 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> arg[0] = 128; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, arg); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>测得的结果反而更糟糕了，为基准的 2.9 倍。这是为什么呢？</p> <p>如果你在上一步解决了自动装箱之后查看运行时的 GC 状况，你会发现这段程序并不会触发 
GC。其原因在于，原本的反射调用被内联了，从而使得即时编译器中的逃逸分析将原本新建的 Object 数组判定为不逃逸的对象。</p> <p>如果一个对象不逃逸，那么即时编译器可以选择栈分配甚至是虚拟分配，也就是不占用堆空间。具体我会在本专栏的第二部分详细解释。</p> 
<p>如果在循环外新建数组，即时编译器无法确定这个数组会不会中途被更改，因此无法优化掉访问数组的操作，可谓是得不偿失。</p> <p>到目前为止，我们的最好记录是 1.8 倍。那能不能再进一步提升呢？</p> 
<p>刚才我曾提到，可以关闭反射调用的 Inflation 机制，从而取消委派实现，并且直接使用动态实现。此外，每次反射调用都会检查目标方法的权限，而这个检查同样可以在 Java 代码里关闭，在关闭了这两项机制之后，也就得到了我们的 
v4 版本，它测得的结果约为基准的 1.3 倍。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // v4 版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 在运行指令中添加如下两个虚拟机参数： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// -Djava.lang.Integer.IntegerCache.high=128 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // -Dsun.reflect.noInflation=true </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>到这里，我们基本上把反射调用的水分都榨干了。接下来，我来把反射调用的性能开销给提回去。</p> 
<p>首先，在这个例子中，之所以反射调用能够变得这么快，主要是因为即时编译器中的方法内联。在关闭了 Inflation 的情况下，内联的瓶颈在于 Method.invoke 方法中对 
MethodAccessor.invoke 方法的调用。</p> <p><img src="https://static001.geekbang.org/resource/image/93/b5/93dec45b7af7951a2b6daeb01941b9b5.png" 
alt=""></p> <p>我会在后面的文章中介绍方法内联的具体实现，这里先说个结论：在生产环境中，我们往往拥有多个不同的反射调用，对应多个 GeneratedMethodAccessor，也就是动态实现。</p> 
<p>由于 Java 虚拟机的关于上述调用点的类型 profile（注：对于 invokevirtual 或者 invokeinterface，Java 虚拟机会记录下调用者的具体类型，我们称之为类型 
profile）无法同时记录这么多个类，因此可能造成所测试的反射调用没有被内联的情况。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // v5 
版本 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> import 
java.lang.reflect.Method; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Test { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void target(int i) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> polluteProfile(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void polluteProfile() throws 
Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Method 
method1 = Test.class.getMethod("target1", int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method2 = Test.class.getMethod("target2", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 2000; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method1.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method2.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target1(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target2(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在上面的 v5 版本中，我在测试循环之前调用了 polluteProfile 
的方法。该方法将反射调用另外两个方法，并且循环上 2000 遍。</p> <p>而测试循环则保持不变。测得的结果约为基准的 6.7 倍。也就是说，只要误扰了 Method.invoke 
方法的类型 profile，性能开销便会从 1.3 倍上升至 6.7 倍。</p> <p>之所以这么慢，除了没有内联之外，另外一个原因是逃逸分析不再起效。这时候，我们便可以采用刚才 
v3 版本中的解决方案，在循环外构造参数数组，并直接传递给反射调用。这样子测得的结果约为基准的 5.2 倍。</p> <p>除此之外，我们还可以提高 Java 虚拟机关于每个调用能够记录的类型数目（对应虚拟机参数 
-XX:TypeProfileWidth，默认值为 2，这里设置为 3）。最终测得的结果约为基准的 2.8 倍，尽管它和原本的 1.3 倍还有一定的差距，但总算是比 6.7 倍好多了。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 里的反射机制。</p> <p>在默认情况下，方法的反射调用为委派实现，委派给本地实现来进行方法调用。在调用超过 15 次之后，委派实现便会将委派对象切换至动态实现。这个动态实现的字节码是自动生成的，它将直接使用 
invoke 指令来调用目标方法。</p> <p>方法的反射调用会带来不少性能开销，原因主要有三个：变长参数方法导致的 Object 数组，基本类型的自动装箱、拆箱，还有最重要的方法内联。</p> 
<p>今天的实践环节，你可以将最后一段代码中 polluteProfile 方法的两个 Method 对象，都改成获取名字为“target”的方法。请问这两个获得的 Method 对象是同一个吗（==）？他们 
equal 吗（.equals(…)）？对我们的运行结果有什么影响？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.lang.reflect.Method; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Test { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 空方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Class&lt;?&gt; klass = Class.forName("Test"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method = klass.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.setAccessible(true); // 关闭权限检查 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> polluteProfile(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long current = System.currentTimeMillis(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method.invoke(null, 128); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void polluteProfile() throws 
Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Method 
method1 = Test.class.getMethod("target", int.class); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Method method2 = Test.class.getMethod("target", int.class); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 2000; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method1.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> method2.invoke(null, 0); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void target1(int i) { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void target2(int i) { } </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>附录：反射 
API 简介</h2> <p>通常来说，使用反射 API 的第一步便是获取 Class 对象。在 Java 中常见的有这么三种。</p> <ol> <li>使用静态方法 Class.forName 
来获取。</li> <li>调用对象的 getClass() 方法。</li> <li>直接用类名 +“.class”访问。对于基本类型来说，它们的包装类型（wrapper classes）拥有一个名为“TYPE”的 
final 静态字段，指向该基本类型对应的 Class 对象。</li> </ol> <p>例如，Integer.TYPE 指向 int.class。对于数组类型来说，可以使用类名 
+“[ ].class”来访问，如 int[ ].class。</p> <p>除此之外，Class 类和 java.lang.reflect 包中还提供了许多返回 Class 对象的方法。例如，对于数组类的 
Class 对象，调用 Class.getComponentType() 方法可以获得数组元素的类型。</p> <p>一旦得到了 Class 对象，我们便可以正式地使用反射功能了。下面我列举了较为常用的几项。</p> 
<ol> <li> <p>使用 newInstance() 来生成一个该类的实例。它要求该类中拥有一个无参数的构造器。</p> </li> <li> <p>使用 isInstance(Object) 
来判断一个对象是否该类的实例，语法上等同于 instanceof 关键字（JIT 优化时会有差别，我会在本专栏的第二部分详细介绍）。</p> </li> <li> <p>使用 Array.newInstance(Class,int) 
来构造该类型的数组。</p> </li> <li> <p>使用 getFields()/getConstructors()/getMethods() 来访问该类的成员。除了这三个之外，Class 
类还提供了许多其他方法，详见 [4]。需要注意的是，方法名中带 Declared 的不会返回父类的成员，但是会返回私有成员；而不带 Declared 的则相反。</p> </li> 
</ol> <p>当获得了类成员之后，我们可以进一步做如下操作。</p> <ul> <li>使用 Constructor/Field/Method.setAccessible(true) 
来绕开 Java 语言的访问限制。</li> <li>使用 Constructor.newInstance(Object[]) 来生成该类的实例。</li> <li>使用 Field.get/set(Object) 
来访问字段的值。</li> <li>使用 Method.invoke(Object, Object[]) 来调用方法。</li> </ul> <p>有关反射 API 的其他用法，可以参考 
reflect 包的 javadoc [5] ，这里就不详细展开了。</p> <p>[1] : <a href="https://docs.oracle.com/javase/tutorial/reflect/">https://docs.oracle.com/javase/tutorial/reflect/</a><br> 
[2]: <a href="http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l80">http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l80</a><br> 
[3]: <a href="http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l78">http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/reflect/ReflectionFactory.java#l78</a><br> 
[4]: <a href="https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html">https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html</a><br> 
[5]: <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/package-summary.html">https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/package-summary.html</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 38, 38) 
 {executed in 7 msec}
2020-11-19 20:18:14.378 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=38 
 {executed in 1 msec}
2020-11-19 20:18:14.380 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:18:14.384 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=38 
 {executed in 1 msec}
2020-11-19 20:18:14.386 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:18:14.393 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788294, 1605788294, 1, 'zh-hans', 0, 1, 1, 
0, '07丨JVM是如何实现反射的？', 1, 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.399 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=38 
 {executed in 1 msec}
2020-11-19 20:18:14.401 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:18:14.408 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788294, 1605788294, 1, 'zh-hans', 0, 
1, 1, 0, '07丨JVM是如何实现反射的？', 'book', 1, 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.414 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.416 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:14.420 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.422 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:14.430 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/00d0f4aa09e7004d9632edea1ce4fea8?bkt=en-24c643f198a62f88fe1a56b42932ed1d43e3bfec3091820f3f53066d2be1e257cad73c45a2d8af4b&fid=3757516097-778750-147302430940813&time=1605788292&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-iScQpOF6OfM3yguaCtvukknCZ7Y%3D&to=92&size=5997993&sta_dx=5997993&sta_cs=4364&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5997993&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-0bd953496d7d4a0aa07af7b57e07fbb920cc33d2352796bd3dc78b6c6059de0db5704592ae875102&sl=76480590&expires=8h&rt=pr&r=711500241&mlogid=7510902577093048187&vbdid=64799653&fin=07%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510902577093048187&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea99e90ed857b643f19bbb67202e4b1550e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=07%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%EF%BC%9F.mp3', 
38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.436 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.438 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:14.445 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/00d0f4aa09e7004d9632edea1ce4fea8?bkt=en-24c643f198a62f88fe1a56b42932ed1d43e3bfec3091820f3f53066d2be1e257cad73c45a2d8af4b&fid=3757516097-778750-147302430940813&time=1605788292&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-iScQpOF6OfM3yguaCtvukknCZ7Y%3D&to=92&size=5997993&sta_dx=5997993&sta_cs=4364&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182962&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5997993&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-0bd953496d7d4a0aa07af7b57e07fbb920cc33d2352796bd3dc78b6c6059de0db5704592ae875102&sl=76480590&expires=8h&rt=pr&r=711500241&mlogid=7510902577093048187&vbdid=64799653&fin=07%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510902577093048187&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea99e90ed857b643f19bbb67202e4b1550e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=07%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%B0%84%E7%9A%84%EF%BC%9F.mp3', 
38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.453 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=38 
 {executed in 2 msec}
2020-11-19 20:18:14.455 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:14.459 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.461 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:14.481 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好，提个建议，您讲课过程中经常提到一些概念名词，您讲课总是预设了一个前提，就是假设我们已经知道那个概念，然而并不清楚。比如本文中被不断提到的内联，什么是内联呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议！方法内联指的是编译器在编译一个方法时，将某个方法调用的目标方法也纳入编译范围内，并用其返回值替代原方法调用这么个过程。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/37/30/bbf76b79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaguangme</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">20</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 开发人员日常接触到的 Java 集成开发环境（IDE）便运用了这一功能：每当我们敲入点号时，IDE 
便会根据点号前的内容，动态展示可以访问的字段或者方法。//这个应该是不完全正确的，大部分应该是靠语法树来实现的。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢指出！</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结 <br>1:反射机制是Java语言的一个非常重要的特性，通过这个特性，我们能够动态的监控、调用、修改类的行为，许多的框架实现就用到了Java语言反射的机制 
<br> <br>2:使用反射挺好的，但它也是不完美的，复杂的操作往往更耗时间和精力，使用反射也是一样，性能低下是她所被人诟病的一个地方，那为什么方法的反射如此耗费性能呐？它的性能耗在那里呢？方法的反射调用会带来不少性能开销，原因主要有三个：变长参数方法导致的 
Object 数组，基本类型的自动装箱、拆箱，还有最重要的方法内联。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/03/90/582af5c5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李杰</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当某个反射调用的调用次数在 15 之下时，采用本地实现；当达到 15 时，便开始动态生成字节码... 
<br>———可以认为第16次反射调用时的耗时是最长的吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 动态生成发生在第15次(从0开始数的话)，所以第15次比较耗时。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fe/15/ccda05bb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kisho</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师，你好, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“动态实现无需经过Java到C++再到Java的切换”,这句话没太明白，能在解释下么？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在v0版本中我贴了一段stacktrace，你可以看到中间有个native method，这就是C++代码，也就是它先调用至这个C++代码，在C++代码里面再调用至Java代码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/70/fc/77f60338.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Stephen</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，有三个知识点不太明白:内联、逃逸分析以及inflation机制 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪您好，我有两个问题： <br> <br>一是我自己的测试结果和文章中有些出入。在我自己的mac+jdk10环境中，v3版本的代码和v2版本性能是差不多的，多次测试看v3还略好一些。从v2的GC 
log来看for循环的每一亿次iteration中间都会有GC发生，似乎说明这里的escape analysis并没有做到allocation on stack。您能想到这是什么原因么？另有个小建议就是文章中提到测试结果时，注明一下您的环境。 
<br> <br>另一个问题是在您v5版本的代码中，您故意用method1和method2两个对象霸占了2个ProfileType的位子，导致被测的反射操作性能很低。这是因为此处invoke方法的inline是压根儿就没有做呢？还是因为inline是依据target1或者target2来做的，而实际运行时发现类型不一致又触发了deoptimization呢？ 
<br> <br>望解答，谢谢~ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议，我也是mac+jdk10。我这边裸跑v2是2.7x(因为每次要新建整数对象所以有GC)，加大整数缓存后跑v2是1.8x(无GC)。你是否忘了加大整数缓存？<br><br>第二个问题，研究得很深！Method.invoke一直会被内联，但是它里面的MethodAccesor.invoke则不一定。<br><br>实际上，在C2编译之前循环代码已经运行过非常多次，也就是说MethodAccesor.invoke已经看到多次调用至target()的动态实现。在profile里会显示为有target1，有target2，但是profile不完整，即还有一大部分的调用者类型没有记录。<br><br>这时候C2会选择不inline这个MethodAccesor.invoke调用，直接做虚调用。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师请教个问题，如果手动修改某个Java字节码文件，如果JVM不重新加载此文件，有什么方式能让JVM识别并执行修改的内容呢？ 
<br>如果一定需要JVM加载后才能识别并执行，有什么好的手动触发的方法呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 你可以搜一下class redefinition的相关资料。我以前用cagent做过，Javaagent应该也可以。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>life is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 总结一下 <br>反射有两种实现方式： <br> <br>本地方法调用（就是字节码中已经定义好的方法） 
<br> <br>动态生成字节码 <br> <br> <br>两者有什么区别？ <br> <br>动态生成字节码（以下简称动态实现），生成字节码的过程很慢（类似于准备工作），但是执行效率高。 
<br> <br>本地方法调用，不用生成字节码，直接调用本地方法。所以准备工作几乎没有，很快。但是执行效率就差很多。 <br> <br> <br>JVM如何做决定选择哪种实现方式？ 
<br> <br>通过反射执行的次数来决定，默认值是15。15次之前直接本地调用，之后动态实现。 <br> <br> <br>JVM为啥分两种实现方式？ <br> <br>本地实现的调用流程复杂。而在执行多次的情况下，复杂意味着性能损耗，所以有一种适合多次执行的解决方案，就是动态生成字节码。 
<br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM加载了一个Java字节码文件，在不停止JVM的情况下能再次的加载同一个Java字节码文件吗？如果能是覆盖了原来的那个Java字节码文件还是怎么着了呢？ 
<br>在IDE中是可以直接修改Java源代码的，然后可以手动触发Java源代码的编译和重新加载，请问老师知道IDE是怎么实现的吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> MethodAccessor实例创建在ReflectionFactory中，如下代码： 
<br>public class ReflectionFactory { <br>&nbsp;&nbsp;&nbsp;&nbsp;private static boolean noInflation 
= false; <br>&nbsp;&nbsp;&nbsp;&nbsp;private static int inflationThreshold = 15; <br>&nbsp;&nbsp;&nbsp; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;public MethodAccessor newMethodAccessor(Method method) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkInitted(); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (noInflation) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
new MethodAccessorGenerator(). <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generateMethod(method.getDeclaringClass(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getName(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getParameterTypes(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getReturnType(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getExceptionTypes(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getModifiers()); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NativeMethodAccessorImpl 
acc = <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new 
NativeMethodAccessorImpl(method); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DelegatingMethodAccessorImpl 
res = <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new 
DelegatingMethodAccessorImpl(acc); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acc.setParent(res); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return res; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br> <br>实际的MethodAccessor实现有两个版本，一个是Java实现的，另一个是native 
code实现的。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小鳄鱼</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 不是同个对象，但equal。老师说了，返回的是目标方法的一份拷贝 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/70/fc/77f60338.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Stephen</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，有三个知识点不太明白，分别是:内联、逃逸分析以及inflation机制 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 内联和逃逸分析后面有两篇会专门介绍，反射的inflation机制是当反射被频繁调用时，动态生成一个类来做直接调用的机制，可以加速反射调用</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/86/a8/427879a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>vick</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请教一个问题，本地实现可以用java来替代c++的实现方式吗？这样就可以避过C++的额外开销？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 之所以叫本地实现，就是因为它用的C++代码。如果用Java来实现，就不会这么叫啦 
:)<br><br>JVM有用Java来替代的实现方式，也就是文中介绍的动态实现。它是根据反射调用的目标方法来动态生成字节码的。</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/dc/65/f85ba9cd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>once</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问老师 是不是本地方法的性能一般都不是很好呢 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
需要经过JNI，所以性能很不好。<br><br>不过即时编译器可能会将某些指定的本地方法调用给替换掉。这些特定的本地方法叫intrinsics，下周一会讲。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沉淀的梦想</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在v5版本中，为什么我设置TypeProfileWidth为3，速度并没有变快呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 可以再增大到8试试。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/75/65/435b21f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小明</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以看看这篇博客 有详细的生成动态调用的解释 <br>http://rednaxelafx.iteye.com/blog/548536 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文章中“一亿次直接调用耗费的时间大约在 120ms。这和不调用的时间是一致的。”这句话是不是病句啊？不调用指的是什么？指的是直接调用吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出！不调用就是字面意思，不做任何调用，也就是除了每一亿次调用的打印语句之外，循环就不包含其它东西了。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 最后的问题，==是false，equals是true，对性能的影响我不知道怎么看。。。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>西兹兹</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> "无法同时记录这么多个类"，老师好， <br>这个问题我看了第5、7课，还是不大理解这个profile是什么意思； 
<br>是虚拟机里每一个类/接口都默认有2个profile记住？ <br>还是虚拟机全局只记录任意一个类/接口，总共才2个profile？ <br> <br>假设是是虚拟机里每一个类/接口都默认有2个profile记住， 
<br>如果一个类只有1个实现类，这个实现类有4个虚方法，那虚拟机如何决定只内联缓存哪2个方法？先调用先缓存？还是最后调用的缓存？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
38, 38) 
 {executed in 10 msec}
2020-11-19 20:18:14.498 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=38 
 {executed in 2 msec}
2020-11-19 20:18:14.500 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:14.520 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师您好，提个建议，您讲课过程中经常提到一些概念名词，您讲课总是预设了一个前提，就是假设我们已经知道那个概念，然而并不清楚。比如本文中被不断提到的内联，什么是内联呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议！方法内联指的是编译器在编译一个方法时，将某个方法调用的目标方法也纳入编译范围内，并用其返回值替代原方法调用这么个过程。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/37/30/bbf76b79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaguangme</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">20</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 开发人员日常接触到的 Java 集成开发环境（IDE）便运用了这一功能：每当我们敲入点号时，IDE 
便会根据点号前的内容，动态展示可以访问的字段或者方法。//这个应该是不完全正确的，大部分应该是靠语法树来实现的。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢指出！</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结 <br>1:反射机制是Java语言的一个非常重要的特性，通过这个特性，我们能够动态的监控、调用、修改类的行为，许多的框架实现就用到了Java语言反射的机制 
<br> <br>2:使用反射挺好的，但它也是不完美的，复杂的操作往往更耗时间和精力，使用反射也是一样，性能低下是她所被人诟病的一个地方，那为什么方法的反射如此耗费性能呐？它的性能耗在那里呢？方法的反射调用会带来不少性能开销，原因主要有三个：变长参数方法导致的 
Object 数组，基本类型的自动装箱、拆箱，还有最重要的方法内联。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/03/90/582af5c5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李杰</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当某个反射调用的调用次数在 15 之下时，采用本地实现；当达到 15 时，便开始动态生成字节码... 
<br>———可以认为第16次反射调用时的耗时是最长的吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 动态生成发生在第15次(从0开始数的话)，所以第15次比较耗时。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fe/15/ccda05bb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kisho</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师，你好, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“动态实现无需经过Java到C++再到Java的切换”,这句话没太明白，能在解释下么？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在v0版本中我贴了一段stacktrace，你可以看到中间有个native method，这就是C++代码，也就是它先调用至这个C++代码，在C++代码里面再调用至Java代码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/70/fc/77f60338.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Stephen</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，有三个知识点不太明白:内联、逃逸分析以及inflation机制 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪您好，我有两个问题： <br> <br>一是我自己的测试结果和文章中有些出入。在我自己的mac+jdk10环境中，v3版本的代码和v2版本性能是差不多的，多次测试看v3还略好一些。从v2的GC 
log来看for循环的每一亿次iteration中间都会有GC发生，似乎说明这里的escape analysis并没有做到allocation on stack。您能想到这是什么原因么？另有个小建议就是文章中提到测试结果时，注明一下您的环境。 
<br> <br>另一个问题是在您v5版本的代码中，您故意用method1和method2两个对象霸占了2个ProfileType的位子，导致被测的反射操作性能很低。这是因为此处invoke方法的inline是压根儿就没有做呢？还是因为inline是依据target1或者target2来做的，而实际运行时发现类型不一致又触发了deoptimization呢？ 
<br> <br>望解答，谢谢~ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议，我也是mac+jdk10。我这边裸跑v2是2.7x(因为每次要新建整数对象所以有GC)，加大整数缓存后跑v2是1.8x(无GC)。你是否忘了加大整数缓存？<br><br>第二个问题，研究得很深！Method.invoke一直会被内联，但是它里面的MethodAccesor.invoke则不一定。<br><br>实际上，在C2编译之前循环代码已经运行过非常多次，也就是说MethodAccesor.invoke已经看到多次调用至target()的动态实现。在profile里会显示为有target1，有target2，但是profile不完整，即还有一大部分的调用者类型没有记录。<br><br>这时候C2会选择不inline这个MethodAccesor.invoke调用，直接做虚调用。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师请教个问题，如果手动修改某个Java字节码文件，如果JVM不重新加载此文件，有什么方式能让JVM识别并执行修改的内容呢？ 
<br>如果一定需要JVM加载后才能识别并执行，有什么好的手动触发的方法呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 你可以搜一下class redefinition的相关资料。我以前用cagent做过，Javaagent应该也可以。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>life is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 总结一下 <br>反射有两种实现方式： <br> <br>本地方法调用（就是字节码中已经定义好的方法） 
<br> <br>动态生成字节码 <br> <br> <br>两者有什么区别？ <br> <br>动态生成字节码（以下简称动态实现），生成字节码的过程很慢（类似于准备工作），但是执行效率高。 
<br> <br>本地方法调用，不用生成字节码，直接调用本地方法。所以准备工作几乎没有，很快。但是执行效率就差很多。 <br> <br> <br>JVM如何做决定选择哪种实现方式？ 
<br> <br>通过反射执行的次数来决定，默认值是15。15次之前直接本地调用，之后动态实现。 <br> <br> <br>JVM为啥分两种实现方式？ <br> <br>本地实现的调用流程复杂。而在执行多次的情况下，复杂意味着性能损耗，所以有一种适合多次执行的解决方案，就是动态生成字节码。 
<br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM加载了一个Java字节码文件，在不停止JVM的情况下能再次的加载同一个Java字节码文件吗？如果能是覆盖了原来的那个Java字节码文件还是怎么着了呢？ 
<br>在IDE中是可以直接修改Java源代码的，然后可以手动触发Java源代码的编译和重新加载，请问老师知道IDE是怎么实现的吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/08/4e/87e40222.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Yoph</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> MethodAccessor实例创建在ReflectionFactory中，如下代码： 
<br>public class ReflectionFactory { <br>&nbsp;&nbsp;&nbsp;&nbsp;private static boolean noInflation 
= false; <br>&nbsp;&nbsp;&nbsp;&nbsp;private static int inflationThreshold = 15; <br>&nbsp;&nbsp;&nbsp; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;public MethodAccessor newMethodAccessor(Method method) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkInitted(); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (noInflation) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
new MethodAccessorGenerator(). <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generateMethod(method.getDeclaringClass(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getName(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getParameterTypes(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getReturnType(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getExceptionTypes(), 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getModifiers()); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NativeMethodAccessorImpl 
acc = <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new 
NativeMethodAccessorImpl(method); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DelegatingMethodAccessorImpl 
res = <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new 
DelegatingMethodAccessorImpl(acc); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acc.setParent(res); 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return res; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
<br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br> <br>实际的MethodAccessor实现有两个版本，一个是Java实现的，另一个是native 
code实现的。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小鳄鱼</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 不是同个对象，但equal。老师说了，返回的是目标方法的一份拷贝 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/70/fc/77f60338.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Stephen</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，有三个知识点不太明白，分别是:内联、逃逸分析以及inflation机制 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 内联和逃逸分析后面有两篇会专门介绍，反射的inflation机制是当反射被频繁调用时，动态生成一个类来做直接调用的机制，可以加速反射调用</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/86/a8/427879a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>vick</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请教一个问题，本地实现可以用java来替代c++的实现方式吗？这样就可以避过C++的额外开销？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 之所以叫本地实现，就是因为它用的C++代码。如果用Java来实现，就不会这么叫啦 
:)<br><br>JVM有用Java来替代的实现方式，也就是文中介绍的动态实现。它是根据反射调用的目标方法来动态生成字节码的。</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/dc/65/f85ba9cd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>once</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问老师 是不是本地方法的性能一般都不是很好呢 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
需要经过JNI，所以性能很不好。<br><br>不过即时编译器可能会将某些指定的本地方法调用给替换掉。这些特定的本地方法叫intrinsics，下周一会讲。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沉淀的梦想</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在v5版本中，为什么我设置TypeProfileWidth为3，速度并没有变快呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 可以再增大到8试试。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/75/65/435b21f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小明</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以看看这篇博客 有详细的生成动态调用的解释 <br>http://rednaxelafx.iteye.com/blog/548536 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文章中“一亿次直接调用耗费的时间大约在 120ms。这和不调用的时间是一致的。”这句话是不是病句啊？不调用指的是什么？指的是直接调用吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢指出！不调用就是字面意思，不做任何调用，也就是除了每一亿次调用的打印语句之外，循环就不包含其它东西了。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-06 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 最后的问题，==是false，equals是true，对性能的影响我不知道怎么看。。。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>西兹兹</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> "无法同时记录这么多个类"，老师好， <br>这个问题我看了第5、7课，还是不大理解这个profile是什么意思； 
<br>是虚拟机里每一个类/接口都默认有2个profile记住？ <br>还是虚拟机全局只记录任意一个类/接口，总共才2个profile？ <br> <br>假设是是虚拟机里每一个类/接口都默认有2个profile记住， 
<br>如果一个类只有1个实现类，这个实现类有4个虚方法，那虚拟机如何决定只内联缓存哪2个方法？先调用先缓存？还是最后调用的缓存？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
38, 38) 
 {executed in 11 msec}
2020-11-19 20:18:14.530 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.531 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:14.535 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.537 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:14.543 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 38, 'https://static001.geekbang.org/resource/image/4f/0e/4f25cb0a83efe4097168eee9ad24170e.jpg', 
38) 
 {executed in 1 msec}
2020-11-19 20:18:14.588 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.591 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:14.602 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 38, 'https://static001.geekbang.org/resource/image/4f/0e/4f25cb0a83efe4097168eee9ad24170e.jpg', 
38) 
 {executed in 1 msec}
2020-11-19 20:18:14.620 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.622 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:18:14.629 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.666 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=38 
 {executed in 1 msec}
2020-11-19 20:18:14.668 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:18:14.676 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 38, 38) 
 {executed in 1 msec}
2020-11-19 20:18:14.699 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='729745597893613' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:18:14.700 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:44.864 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='729745597893613' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:18:44.866 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:44.869 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('729745597893613', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:18:44.870 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('729745597893613', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:18:44.872 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|77            |
|--------------|

2020-11-19 20:18:44.885 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='729745597893613' 
and bookchecke0_.name='media' 
 {executed in 0 msec}
2020-11-19 20:18:44.887 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:45.347 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='729745597893613' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:18:45.349 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:18:45.352 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('729745597893613', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:18:45.354 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('729745597893613', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:18:45.355 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|78            |
|--------------|

2020-11-19 20:18:45.369 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='729745597893613' 
 {executed in 1 msec}
2020-11-19 20:18:45.370 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:45.374 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788325, 1) 
 {executed in 1 msec}
2020-11-19 20:18:45.375 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788325, 1) 
 {executed in 0 msec}
2020-11-19 20:18:45.376 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|39            |
|--------------|

2020-11-19 20:18:45.386 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd668c647-b752-463e-93e2-1c6fe1712b12', 
39) 
 {executed in 0 msec}
2020-11-19 20:18:45.388 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd668c647-b752-463e-93e2-1c6fe1712b12', 39) 
 {executed in 0 msec}
2020-11-19 20:18:45.390 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|39            |
|--------------|

2020-11-19 20:18:45.404 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=39, revision_default=1, revision_timestamp=1605788325, 
revision_uid=1 where vid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.410 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.411 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:45.418 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '729745597893613', 'zh-hans', 39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.424 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.426 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:18:45.432 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '729745597893613', 'zh-hans', 39, 39) 
 {executed in 0 msec}
2020-11-19 20:18:45.441 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.443 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:18:45.446 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.448 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:18:45.454 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 39, 0, 0, 32, 0, 39) 
 {executed in 0 msec}
2020-11-19 20:18:45.470 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.472 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:45.475 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.477 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:45.491 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>今天我们来讲讲 Java 虚拟机的异常处理。首先提醒你一下，本篇文章代码较多，你可以点击文稿查看具体代码。</p> 
<p>众所周知，异常处理的两大组成要素是抛出异常和捕获异常。这两大要素共同实现程序控制流的非正常转移。</p> <p>抛出异常可分为显式和隐式两种。显式抛异常的主体是应用程序，它指的是在程序中使用“throw”关键字，手动将异常实例抛出。</p> 
<p>隐式抛异常的主体则是 Java 虚拟机，它指的是 Java 虚拟机在执行过程中，碰到无法继续执行的异常状态，自动抛出异常。举例来说，Java 虚拟机在执行读取数组操作时，发现输入的索引值是负数，故而抛出数组索引越界异常（ArrayIndexOutOfBoundsException）。</p> 
<p>捕获异常则涉及了如下三种代码块。</p> <ol> <li> <p>try 代码块：用来标记需要进行异常监控的代码。</p> </li> <li> <p>catch 代码块：跟在 
try 代码块之后，用来捕获在 try 代码块中触发的某种指定类型的异常。除了声明所捕获异常的类型之外，catch 代码块还定义了针对该异常类型的异常处理器。在 Java 中，try 
代码块后面可以跟着多个 catch 代码块，来捕获不同类型的异常。Java 虚拟机会从上至下匹配异常处理器。因此，前面的 catch 代码块所捕获的异常类型不能覆盖后边的，否则编译器会报错。</p> 
</li> <li> <p>finally 代码块：跟在 try 代码块和 catch 代码块之后，用来声明一段必定运行的代码。它的设计初衷是为了避免跳过某些关键的清理代码，例如关闭已打开的系统资源。</p> 
</li> </ol><!-- [[[read_end]]] --> <p>在程序正常执行的情况下，这段代码会在 try 代码块之后运行。否则，也就是 try 代码块触发异常的情况下，如果该异常没有被捕获，finally 
代码块会直接运行，并且在运行之后重新抛出该异常。</p> <p>如果该异常被 catch 代码块捕获，finally 代码块则在 catch 代码块之后运行。在某些不幸的情况下，catch 
代码块也触发了异常，那么 finally 代码块同样会运行，并会抛出 catch 代码块触发的异常。在某些极端不幸的情况下，finally 代码块也触发了异常，那么只好中断当前 finally 
代码块的执行，并往外抛异常。</p> <p>上面这段听起来有点绕，但是等我讲完 Java 虚拟机的异常处理机制之后，你便会明白这其中的道理。</p> <h2>异常的基本概念</h2> 
<p>在 Java 语言规范中，所有异常都是 Throwable 类或者其子类的实例。Throwable 有两大直接子类。第一个是 Error，涵盖程序不应捕获的异常。当程序触发 Error 
时，它的执行状态已经无法恢复，需要中止线程甚至是中止虚拟机。第二子类则是 Exception，涵盖程序可能需要捕获并且处理的异常。</p> <p><img src="https://static001.geekbang.org/resource/image/47/93/47c8429fc30aec201286b47f3c1a5993.png" 
alt=""></p> <p>Exception 有一个特殊的子类 RuntimeException，用来表示“程序虽然无法继续执行，但是还能抢救一下”的情况。前边提到的数组索引越界便是其中的一种。</p> 
<p>RuntimeException 和 Error 属于 Java 里的非检查异常（unchecked exception）。其他异常则属于检查异常（checked exception）。在 
Java 语法中，所有的检查异常都需要程序显式地捕获，或者在方法声明中用 throws 关键字标注。通常情况下，程序中自定义的异常应为检查异常，以便最大化利用 Java 编译器的编译时检查。</p> 
<p>异常实例的构造十分昂贵。这是由于在构造异常实例时，Java 虚拟机便需要生成该异常的栈轨迹（stack trace）。该操作会逐一访问当前线程的 Java 栈帧，并且记录下各种调试信息，包括栈帧所指向方法的名字，方法所在的类名、文件名，以及在代码中的第几行触发该异常。</p> 
<p>当然，在生成栈轨迹时，Java 虚拟机会忽略掉异常构造器以及填充栈帧的 Java 方法（Throwable.fillInStackTrace），直接从新建异常位置开始算起。此外，Java 
虚拟机还会忽略标记为不可见的 Java 方法栈帧。我们在介绍 Lambda 的时候会看到具体的例子。</p> <p>既然异常实例的构造十分昂贵，我们是否可以缓存异常实例，在需要用到的时候直接抛出呢？从语法角度上来看，这是允许的。然而，该异常对应的栈轨迹并非 
throw 语句的位置，而是新建异常的位置。</p> <p>因此，这种做法可能会误导开发人员，使其定位到错误的位置。这也是为什么在实践中，我们往往选择抛出新建异常实例的原因。</p> 
<h2>Java 虚拟机是如何捕获异常的？</h2> <p>在编译生成的字节码中，每个方法都附带一个异常表。异常表中的每一个条目代表一个异常处理器，并且由 from 指针、to 指针、target 
指针以及所捕获的异常类型构成。这些指针的值是字节码索引（bytecode index，bci），用以定位字节码。</p> <p>其中，from 指针和 to 指针标示了该异常处理器所监控的范围，例如 
try 代码块所覆盖的范围。target 指针则指向异常处理器的起始位置，例如 catch 代码块的起始位置。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mayThrowException(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> e.printStackTrace(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的 Java 字节码 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(java.lang.String[]); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: invokestatic mayThrowException:()V </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: goto 11 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: invokevirtual java.lang.Exception.printStackTrace 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 3 6 Class java/lang/Exception // 异常表条目 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，在上图的 
main 方法中，我定义了一段 try-catch 代码。其中，catch 代码块所捕获的异常类型为 Exception。</p> <p>编译过后，该方法的异常表拥有一个条目。其 from 
指针和 to 指针分别为 0 和 3，代表它的监控范围从索引为 0 的字节码开始，到索引为 3 的字节码结束（不包括 3）。该条目的 target 指针是 6，代表这个异常处理器从索引为 
6 的字节码开始。条目的最后一列，代表该异常处理器所捕获的异常类型正是 Exception。</p> <p>当程序触发异常时，Java 虚拟机会从上至下遍历异常表中的所有条目。当触发异常的字节码的索引值在某个异常表条目的监控范围内，Java 
虚拟机会判断所抛出的异常和该条目想要捕获的异常是否匹配。如果匹配，Java 虚拟机会将控制流转移至该条目 target 指针指向的字节码。</p> <p>如果遍历完所有异常表条目，Java 
虚拟机仍未匹配到异常处理器，那么它会弹出当前方法对应的 Java 栈帧，并且在调用者（caller）中重复上述操作。在最坏情况下，Java 虚拟机需要遍历当前线程 Java 栈上所有方法的异常表。</p> 
<p>finally 代码块的编译比较复杂。当前版本 Java 编译器的做法，是复制 finally 代码块的内容，分别放在 try-catch 代码块所有正常执行路径以及异常执行路径的出口中。</p> 
<p><img src="https://static001.geekbang.org/resource/image/17/06/17e2a3053b06b0a4383884f106e31c06.png" 
alt=""></p> <p>针对异常执行路径，Java 编译器会生成一个或多个异常表条目，监控整个 try-catch 代码块，并且捕获所有种类的异常（在 javap 中以 any 
指代）。这些异常表条目的 target 指针将指向另一份复制的 finally 代码块。并且，在这个 finally 代码块的最后，Java 编译器会重新抛出所捕获的异常。</p> 
<p>如果你感兴趣的话，可以用 javap 工具来查看下面这段包含了 try-catch-finally 代码块的编译结果。为了更好地区分每个代码块，我定义了四个实例字段：tryBlock、catchBlock、finallyBlock、以及 
methodExit，并且仅在对应的代码块中访问这些字段。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -c Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: putfield #20 // Field tryBlock:I </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: goto 30 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: putfield #22 // Field catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 23: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: athrow </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 31: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 37: putfield #26 // Field methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 5 8 Class java/lang/Exception </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 14 22 any </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="55"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>可以看到，编译结果包含三份 finally 代码块。其中，前两份分别位于 try 代码块和 catch 代码块的正常执行路径出口。最后一份则作为异常处理器，监控 
try 代码块以及 catch 代码块。它将捕获 try 代码块触发的、未被 catch 代码块捕获的异常，以及 catch 代码块触发的异常。</p> <p>这里有一个小问题，如果 
catch 代码块捕获了异常，并且触发了另一个异常，那么 finally 捕获并且重抛的异常是哪个呢？答案是后者。也就是说原本的异常便会被忽略掉，这对于代码调试来说十分不利。</p> 
<h2>Java 7 的 Supressed 异常以及语法糖</h2> <p>Java 7 引入了 Supressed 异常来解决这个问题。这个新特性允许开发人员将一个异常附于另一个异常之上。因此，抛出的异常可以附带多个异常的信息。</p> 
<p>然而，Java 层面的 finally 代码块缺少指向所捕获异常的引用，所以这个新特性使用起来非常繁琐。</p> <p>为此，Java 7 专门构造了一个名为 try-with-resources 
的语法糖，在字节码层面自动使用 Supressed 异常。当然，该语法糖的主要目的并不是使用 Supressed 异常，而是精简资源打开关闭的用法。</p> <p>在 Java 7 
之前，对于打开的资源，我们需要定义一个 finally 代码块，来确保该资源在正常或者异常执行状况下都能关闭。</p> <p>资源的关闭操作本身容易触发异常。因此，如果同时打开多个资源，那么每一个资源都要对应一个独立的 
try-finally 代码块，以保证每个资源都能够关闭。这样一来，代码将会变得十分繁琐。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in0 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in1 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in2 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> in0 = new FileInputStream(new File("in0.txt")); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
in1 = new FileInputStream(new File("in1.txt")); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> in2 
= new FileInputStream(new File("in2.txt")); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in2 
!= null) in2.close(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } finally { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in1 != null) in1.close(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (in0 != null) in0.close(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>Java 7 的 try-with-resources 语法糖，极大地简化了上述代码。程序可以在 try 关键字后声明并实例化实现了 AutoCloseable 
接口的类，编译器将自动添加对应的 close() 操作。在声明多个 AutoCloseable 实例的情况下，编译生成的字节码类似于上面手工编写代码的编译结果。与手工代码相比，try-with-resources 
还会使用 Supressed 异常的功能，来避免原异常“被消失”。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo implements AutoCloseable 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private final String name; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public Foo(String name) { this.name = 
name; } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void close() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(name); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try (Foo foo0 = new Foo("Foo0"); // try-with-resources 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo1 = new Foo("Foo1"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo2 = new Foo("Foo2")) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new RuntimeException("Initial"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 运行结果： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception in thread "main" java.lang.RuntimeException: Initial </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:18) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>除了 try-with-resources 
语法糖之外，Java 7 还支持在同一 catch 代码块中捕获多种异常。实际实现非常简单，生成多个异常表条目即可。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 在同一 catch 代码块中捕获多种异常 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } catch (SomeException | OtherException 
e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机的异常处理机制。</p> <p>Java 的异常分为 Exception 和 Error 两种，而 Exception 又分为 RuntimeException 
和其他类型。RuntimeException 和 Error 属于非检查异常。其他的 Exception 皆属于检查异常，在触发时需要显式捕获，或者在方法头用 throws 关键字声明。</p> 
<p>Java 字节码中，每个方法对应一个异常表。当程序触发异常时，Java 虚拟机将查找异常表，并依此决定需要将控制流转移至哪个异常处理器之中。Java 代码中的 catch 代码块和 
finally 代码块都会生成异常表条目。</p> <p>Java 7 引入了 Supressed 异常、try-with-resources，以及多异常捕获。后两者属于语法糖，能够极大地精简我们的代码。</p> 
<p>那么今天的实践环节，你可以看看其他控制流语句与 finally 代码块之间的协作。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译并用 javap -c 查看编译后的字节码 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 100; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &lt; 50) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
if (i &lt; 80) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
break; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 39, 39) 
 {executed in 4 msec}
2020-11-19 20:18:45.501 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.503 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:18:45.518 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>今天我们来讲讲 Java 虚拟机的异常处理。首先提醒你一下，本篇文章代码较多，你可以点击文稿查看具体代码。</p> <p>众所周知，异常处理的两大组成要素是抛出异常和捕获异常。这两大要素共同实现程序控制流的非正常转移。</p> 
<p>抛出异常可分为显式和隐式两种。显式抛异常的主体是应用程序，它指的是在程序中使用“throw”关键字，手动将异常实例抛出。</p> <p>隐式抛异常的主体则是 Java 虚拟机，它指的是 
Java 虚拟机在执行过程中，碰到无法继续执行的异常状态，自动抛出异常。举例来说，Java 虚拟机在执行读取数组操作时，发现输入的索引值是负数，故而抛出数组索引越界异常（ArrayIndexOutOfBoundsException）。</p> 
<p>捕获异常则涉及了如下三种代码块。</p> <ol> <li> <p>try 代码块：用来标记需要进行异常监控的代码。</p> </li> <li> <p>catch 代码块：跟在 
try 代码块之后，用来捕获在 try 代码块中触发的某种指定类型的异常。除了声明所捕获异常的类型之外，catch 代码块还定义了针对该异常类型的异常处理器。在 Java 中，try 
代码块后面可以跟着多个 catch 代码块，来捕获不同类型的异常。Java 虚拟机会从上至下匹配异常处理器。因此，前面的 catch 代码块所捕获的异常类型不能覆盖后边的，否则编译器会报错。</p> 
</li> <li> <p>finally 代码块：跟在 try 代码块和 catch 代码块之后，用来声明一段必定运行的代码。它的设计初衷是为了避免跳过某些关键的清理代码，例如关闭已打开的系统资源。</p> 
</li> </ol><!-- [[[read_end]]] --> <p>在程序正常执行的情况下，这段代码会在 try 代码块之后运行。否则，也就是 try 代码块触发异常的情况下，如果该异常没有被捕获，finally 
代码块会直接运行，并且在运行之后重新抛出该异常。</p> <p>如果该异常被 catch 代码块捕获，finally 代码块则在 catch 代码块之后运行。在某些不幸的情况下，catch 
代码块也触发了异常，那么 finally 代码块同样会运行，并会抛出 catch 代码块触发的异常。在某些极端不幸的情况下，finally 代码块也触发了异常，那么只好中断当前 finally 
代码块的执行，并往外抛异常。</p> <p>上面这段听起来有点绕，但是等我讲完 Java 虚拟机的异常处理机制之后，你便会明白这其中的道理。</p> <h2>异常的基本概念</h2> 
<p>在 Java 语言规范中，所有异常都是 Throwable 类或者其子类的实例。Throwable 有两大直接子类。第一个是 Error，涵盖程序不应捕获的异常。当程序触发 Error 
时，它的执行状态已经无法恢复，需要中止线程甚至是中止虚拟机。第二子类则是 Exception，涵盖程序可能需要捕获并且处理的异常。</p> <p><img src="https://static001.geekbang.org/resource/image/47/93/47c8429fc30aec201286b47f3c1a5993.png" 
alt=""></p> <p>Exception 有一个特殊的子类 RuntimeException，用来表示“程序虽然无法继续执行，但是还能抢救一下”的情况。前边提到的数组索引越界便是其中的一种。</p> 
<p>RuntimeException 和 Error 属于 Java 里的非检查异常（unchecked exception）。其他异常则属于检查异常（checked exception）。在 
Java 语法中，所有的检查异常都需要程序显式地捕获，或者在方法声明中用 throws 关键字标注。通常情况下，程序中自定义的异常应为检查异常，以便最大化利用 Java 编译器的编译时检查。</p> 
<p>异常实例的构造十分昂贵。这是由于在构造异常实例时，Java 虚拟机便需要生成该异常的栈轨迹（stack trace）。该操作会逐一访问当前线程的 Java 栈帧，并且记录下各种调试信息，包括栈帧所指向方法的名字，方法所在的类名、文件名，以及在代码中的第几行触发该异常。</p> 
<p>当然，在生成栈轨迹时，Java 虚拟机会忽略掉异常构造器以及填充栈帧的 Java 方法（Throwable.fillInStackTrace），直接从新建异常位置开始算起。此外，Java 
虚拟机还会忽略标记为不可见的 Java 方法栈帧。我们在介绍 Lambda 的时候会看到具体的例子。</p> <p>既然异常实例的构造十分昂贵，我们是否可以缓存异常实例，在需要用到的时候直接抛出呢？从语法角度上来看，这是允许的。然而，该异常对应的栈轨迹并非 
throw 语句的位置，而是新建异常的位置。</p> <p>因此，这种做法可能会误导开发人员，使其定位到错误的位置。这也是为什么在实践中，我们往往选择抛出新建异常实例的原因。</p> 
<h2>Java 虚拟机是如何捕获异常的？</h2> <p>在编译生成的字节码中，每个方法都附带一个异常表。异常表中的每一个条目代表一个异常处理器，并且由 from 指针、to 指针、target 
指针以及所捕获的异常类型构成。这些指针的值是字节码索引（bytecode index，bci），用以定位字节码。</p> <p>其中，from 指针和 to 指针标示了该异常处理器所监控的范围，例如 
try 代码块所覆盖的范围。target 指针则指向异常处理器的起始位置，例如 catch 代码块的起始位置。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mayThrowException(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> e.printStackTrace(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的 Java 字节码 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(java.lang.String[]); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: invokestatic mayThrowException:()V </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: goto 11 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: invokevirtual java.lang.Exception.printStackTrace 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 3 6 Class java/lang/Exception // 异常表条目 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，在上图的 
main 方法中，我定义了一段 try-catch 代码。其中，catch 代码块所捕获的异常类型为 Exception。</p> <p>编译过后，该方法的异常表拥有一个条目。其 from 
指针和 to 指针分别为 0 和 3，代表它的监控范围从索引为 0 的字节码开始，到索引为 3 的字节码结束（不包括 3）。该条目的 target 指针是 6，代表这个异常处理器从索引为 
6 的字节码开始。条目的最后一列，代表该异常处理器所捕获的异常类型正是 Exception。</p> <p>当程序触发异常时，Java 虚拟机会从上至下遍历异常表中的所有条目。当触发异常的字节码的索引值在某个异常表条目的监控范围内，Java 
虚拟机会判断所抛出的异常和该条目想要捕获的异常是否匹配。如果匹配，Java 虚拟机会将控制流转移至该条目 target 指针指向的字节码。</p> <p>如果遍历完所有异常表条目，Java 
虚拟机仍未匹配到异常处理器，那么它会弹出当前方法对应的 Java 栈帧，并且在调用者（caller）中重复上述操作。在最坏情况下，Java 虚拟机需要遍历当前线程 Java 栈上所有方法的异常表。</p> 
<p>finally 代码块的编译比较复杂。当前版本 Java 编译器的做法，是复制 finally 代码块的内容，分别放在 try-catch 代码块所有正常执行路径以及异常执行路径的出口中。</p> 
<p><img src="https://static001.geekbang.org/resource/image/17/06/17e2a3053b06b0a4383884f106e31c06.png" 
alt=""></p> <p>针对异常执行路径，Java 编译器会生成一个或多个异常表条目，监控整个 try-catch 代码块，并且捕获所有种类的异常（在 javap 中以 any 
指代）。这些异常表条目的 target 指针将指向另一份复制的 finally 代码块。并且，在这个 finally 代码块的最后，Java 编译器会重新抛出所捕获的异常。</p> 
<p>如果你感兴趣的话，可以用 javap 工具来查看下面这段包含了 try-catch-finally 代码块的编译结果。为了更好地区分每个代码块，我定义了四个实例字段：tryBlock、catchBlock、finallyBlock、以及 
methodExit，并且仅在对应的代码块中访问这些字段。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -c Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: putfield #20 // Field tryBlock:I </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: goto 30 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: putfield #22 // Field catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 23: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: athrow </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 31: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 32: putfield #24 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 37: putfield #26 // Field methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 5 8 Class java/lang/Exception </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 14 22 any </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="55"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>可以看到，编译结果包含三份 finally 代码块。其中，前两份分别位于 try 代码块和 catch 代码块的正常执行路径出口。最后一份则作为异常处理器，监控 
try 代码块以及 catch 代码块。它将捕获 try 代码块触发的、未被 catch 代码块捕获的异常，以及 catch 代码块触发的异常。</p> <p>这里有一个小问题，如果 
catch 代码块捕获了异常，并且触发了另一个异常，那么 finally 捕获并且重抛的异常是哪个呢？答案是后者。也就是说原本的异常便会被忽略掉，这对于代码调试来说十分不利。</p> 
<h2>Java 7 的 Supressed 异常以及语法糖</h2> <p>Java 7 引入了 Supressed 异常来解决这个问题。这个新特性允许开发人员将一个异常附于另一个异常之上。因此，抛出的异常可以附带多个异常的信息。</p> 
<p>然而，Java 层面的 finally 代码块缺少指向所捕获异常的引用，所以这个新特性使用起来非常繁琐。</p> <p>为此，Java 7 专门构造了一个名为 try-with-resources 
的语法糖，在字节码层面自动使用 Supressed 异常。当然，该语法糖的主要目的并不是使用 Supressed 异常，而是精简资源打开关闭的用法。</p> <p>在 Java 7 
之前，对于打开的资源，我们需要定义一个 finally 代码块，来确保该资源在正常或者异常执行状况下都能关闭。</p> <p>资源的关闭操作本身容易触发异常。因此，如果同时打开多个资源，那么每一个资源都要对应一个独立的 
try-finally 代码块，以保证每个资源都能够关闭。这样一来，代码将会变得十分繁琐。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in0 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in1 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> FileInputStream 
in2 = null; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> in0 = new FileInputStream(new File("in0.txt")); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
in1 = new FileInputStream(new File("in1.txt")); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> in2 
= new FileInputStream(new File("in2.txt")); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in2 
!= null) in2.close(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } finally { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in1 != null) in1.close(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (in0 != null) in0.close(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>Java 7 的 try-with-resources 语法糖，极大地简化了上述代码。程序可以在 try 关键字后声明并实例化实现了 AutoCloseable 
接口的类，编译器将自动添加对应的 close() 操作。在声明多个 AutoCloseable 实例的情况下，编译生成的字节码类似于上面手工编写代码的编译结果。与手工代码相比，try-with-resources 
还会使用 Supressed 异常的功能，来避免原异常“被消失”。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo implements AutoCloseable 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private final String name; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public Foo(String name) { this.name = 
name; } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void close() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(name); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> try (Foo foo0 = new Foo("Foo0"); // try-with-resources 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo1 = new Foo("Foo1"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo2 = new Foo("Foo2")) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new RuntimeException("Initial"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 运行结果： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception in thread "main" java.lang.RuntimeException: Initial </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:18) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Suppressed: java.lang.RuntimeException: 
Foo0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.close(Foo.java:13) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> at Foo.main(Foo.java:19) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>除了 try-with-resources 
语法糖之外，Java 7 还支持在同一 catch 代码块中捕获多种异常。实际实现非常简单，生成多个异常表条目即可。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 在同一 catch 代码块中捕获多种异常 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } catch (SomeException | OtherException 
e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机的异常处理机制。</p> <p>Java 的异常分为 Exception 和 Error 两种，而 Exception 又分为 RuntimeException 
和其他类型。RuntimeException 和 Error 属于非检查异常。其他的 Exception 皆属于检查异常，在触发时需要显式捕获，或者在方法头用 throws 关键字声明。</p> 
<p>Java 字节码中，每个方法对应一个异常表。当程序触发异常时，Java 虚拟机将查找异常表，并依此决定需要将控制流转移至哪个异常处理器之中。Java 代码中的 catch 代码块和 
finally 代码块都会生成异常表条目。</p> <p>Java 7 引入了 Supressed 异常、try-with-resources，以及多异常捕获。后两者属于语法糖，能够极大地精简我们的代码。</p> 
<p>那么今天的实践环节，你可以看看其他控制流语句与 finally 代码块之间的协作。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译并用 javap -c 查看编译后的字节码 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 100; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &lt; 50) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
if (i &lt; 80) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
break; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 39, 39) 
 {executed in 4 msec}
2020-11-19 20:18:45.532 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.534 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:18:45.539 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.541 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:18:45.548 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788325, 1605788325, 1, 'zh-hans', 0, 1, 1, 
0, '06丨JVM是如何处理异常的？', 1, 39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.557 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=39 
 {executed in 1 msec}
2020-11-19 20:18:45.559 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:18:45.566 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788325, 1605788325, 1, 'zh-hans', 0, 
1, 1, 0, '06丨JVM是如何处理异常的？', 'book', 1, 39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.574 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.575 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:45.580 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.582 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:45.590 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5570766e791871b0684e429d97cd2782?bkt=en-26dcfdb4e5ee1a49df409cc07a7c90c23c4985b835a8eebfc0209bd68c02a94228f0219b7cd399a3&fid=3757516097-778750-58193148135858&time=1605788323&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-XodzG3xra7R9Gw2KU6AFo%2FN8SbU%3D&to=92&size=5513996&sta_dx=5513996&sta_cs=4374&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182959&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5513996&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-16c38dec2942d9a1a4f791c3287bc24aa192b2c20086c46ac77086afdce544edd94fc37179cff634&sl=76480590&expires=8h&rt=pr&r=940464014&mlogid=7510910927879385558&vbdid=64799653&fin=06%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510910927879385558&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=7fc3f8cfee4ed9b48b636555d6881f814249877a530ba25d&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=06%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%EF%BC%9F.mp3', 
39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.598 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.600 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:18:45.608 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5570766e791871b0684e429d97cd2782?bkt=en-26dcfdb4e5ee1a49df409cc07a7c90c23c4985b835a8eebfc0209bd68c02a94228f0219b7cd399a3&fid=3757516097-778750-58193148135858&time=1605788323&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-XodzG3xra7R9Gw2KU6AFo%2FN8SbU%3D&to=92&size=5513996&sta_dx=5513996&sta_cs=4374&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182959&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5513996&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-16c38dec2942d9a1a4f791c3287bc24aa192b2c20086c46ac77086afdce544edd94fc37179cff634&sl=76480590&expires=8h&rt=pr&r=940464014&mlogid=7510910927879385558&vbdid=64799653&fin=06%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510910927879385558&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=7fc3f8cfee4ed9b48b636555d6881f814249877a530ba25d&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=06%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%EF%BC%9F.mp3', 
39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.614 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.615 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:45.619 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.621 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:45.631 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">79</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感谢雨迪！ <br>这节让我终于搞清楚了两个疑惑！ <br> 
<br>1:使用异常捕获的代码为什么比较耗费性能？ <br>因为构造异常的实例比较耗性能。这从代码层面很难理解，不过站在JVM的角度来看就简单了，因为JVM在构造异常实例时需要生成该异常的栈轨迹。这个操作会逐一访问当前线程的栈帧，并且记录下各种调试信息，包括栈帧所指向方法的名字，方法所在的类名、文件名，以及在代码中的第几行触发该异常等信息。 
<br>虽然具体不清楚JVM的实现细节，但是看描述这件事情也是比较费时费力的。 <br> <br>2:finally是怎么实现无论异常与否都能被执行的？ <br>这个事情是由编译器来实现的，现在的做法是这样的，编译器在编译Java代码时，会复制finally代码块的内容，然后分别放在try-catch代码块所有的正常执行路径及异常执行路径的出口中。 
<br> <br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> throw exception性能差fillstacktrace除了遍历堆栈以外，如果有inline 
代码消除等编译优化发生，是不是要先“去优化”完了再fill？要不然可能出现错误堆栈和代码对不上的情况 <br> <br>throw exception估计也会影响jit的优化，进而影响整体性能 
<br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 思考得很深，赞一个！<br><br>即时编译器生成的代码会保存原始的栈信息，以便去优化时能够复原。fillStackTrace也会读取这些信息的，所以不用先去优化再fill。<br><br>抛异常本身带来了额外的执行路径。通常如果能够将异常处理器也编译进去，那么不会有太大影响。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/9e/833b272e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阿坤</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果finally有return语句，catch内throw的异常会被忽略，这个从jvm层面怎么解释呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: catch里抛的异常会被finally捕获了，再执行完finally代码后重新抛出该异常。由于finally代码块有个return语句，在重新抛出前就返回了。<br><br>你可以利用这篇文章的知识，就着javap的输出，分析一下具体的程序路径</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/cd/0e06bd0f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Krloy</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于try catch的疑问 <br> <br>如果for里面中写 try catch 
一百条数据中有1条数据异常 程序正常执行 会返回99条数据 <br>如果for里面不写 try catch写外面 程序正常执行 但是数据返回0 <br> <br>try catch 
异常实例构造非常昂贵，因为虚拟机会生成改异常的栈轨迹，改操作会逐一访问改线程栈帧，并记录下各种调试信息。 <br> <br>那么如果我在for中写try catch 的话 会不会每次循环都生成一个异常实例？ 
<br>上面两种写try catch的方法 哪种要更好点 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> &nbsp;&nbsp;&nbsp;&nbsp;看完今天的文章有几个疑问 <br> <br>&nbsp;&nbsp;&nbsp;1方法的异常表是包含RuntimeException这种非check类型的异常吧？如果是那么每个方法都有异常表，那么是不是每个异常表中都有像ArrayIndexOutOfBoundsException这类型异常了。这类公共异常是私有还是共享呢 
<br> <br>&nbsp;&nbsp;&nbsp;2像catch自定义异常，也会添加的当前方法的异常表里吗？ <br> <br>&nbsp;&nbsp;&nbsp;3 我们常常看到的异常调用栈，这里方法调用信息其实就是弹出方法栈帧吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1 检查异常这个概念只在源代码中出现。异常表不是声明这段代码所有有可能抛出的异常，而是声明会被捕获的异常。<br><br>2 
会的<br><br>3 栈轨迹 跟 弹出方法栈帧 是两个概念。你可以直接新建一个异常，然后不抛出，直接打印调用栈。这个时候是不会弹出当前栈帧的。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/b7/37/36ce456f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王小臭</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 辛苦老师了，这么早更新 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/e1/a9/2774e870.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>孤独患者</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果在业务层的代码中使用Assert来判断参数是否有问题，然后在调用方捕捉异常，这样会不会耗性能 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 首先走抛出异常捕获异常的异常执行路径的话，性能肯定是很慢的，因此最好在参数出现问题的概率很小的情况下使用这种方式。<br><br>另外，你说的Assert是某个库的工具类，还是assert语句？后者的话，一般只在开发环境中启用吧。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/13/56/6a062937.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>gentleman...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 就是checked异常 一直不try 
catch ，jvm会怎么个处理流程呢 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/53/ab/6c07638a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>MissSunda...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-28 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这一篇是看的明白的的一篇。😂 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，请教您一个问题，jvm在执行字节码指令的过程中，在什么情况下会由顺序执行变为跳转执行？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> Java 虚拟机会忽略掉异常构造器以及填充栈帧的 Java 
方法（Throwable.fillInStackTrace），直接从新建异常位置开始算起。 <br>Java 虚拟机还会忽略标记为不可见的 Java 方法栈帧。 <br> <br>请问老师，填充栈帧的 
Java 方法和不可见的 Java 方法栈帧，是什么 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 前者指Throwable.fillStackTrace以及异常的构造器，后者为Java虚拟机不想让用户看到的栈帧，比如说方法句柄的适配器类中的方法。之后讲Lambda时会有具体的例子。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fe/59/29913e7b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吴伟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 检查异常和非检查异常也就是其他书籍中说的编译期异常和运行时异常？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 编译期异常和运行时异常这种划分有点奇怪。<br><br>检查异常也会在运行过程中抛出。但是它会要求编译器检查代码有没有显式地处理该异常。非检查异常包括Error和RuntimeException(会不会那本书直译为”运行时异常”？)，这两个则不要求编译器显式处理。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/bf/c8f343a3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>南城风戈</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 沙发 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>左瞳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 捕捉异常代码性能差是因为需要生成该异常的栈轨迹，就算不捕捉，也会打印该异常的的栈轨迹啊，那性能本来就差啊，何来捕捉异常性能差之说？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/b4/82/62548de6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jack Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-09 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，想请教你一下，这个：如果遍历完所有异常表条目，Java 
虚拟机仍未匹配到异常处理器，那么它会弹出当前方法对应的 Java 栈帧，并且在调用者（caller）中重复上述操作。在最坏情况下，Java 虚拟机需要遍历当前线程 Java 栈上所有方法的异常表。 
这里我的理解是不是一个循环遍历，直至找到对应的catch块为止呢，如果没有找到对应的catch，那么就直接抛出还是？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/b4/82/62548de6.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>jack 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师想了解下，finally那张图，如果第二个，蓝色块，正常执行块那里，如果蓝色finally代码块出现了异常，那么是不是重新抛出异常呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/55/c9/571c0f7c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>dengyp</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问JVM 对RuntimeException 的处理机制是怎样的呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjDxrsib6EUtKt6ROhrCNXlEQSoZQNlCG4mPjCGyvicibYbUlGrwiarMSTV3LNoE7IPtDf1NDZ4X2ib2g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_75b4c...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 对于实践环节表示看不懂字节码代码，无法理解，老师能不能在后篇解释下前篇遗留的问题 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一个坏人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师好，请教你一个问题。既然异常处理比较耗性能，我们应该杜绝用异常来实现业务的控制流程？比如下面代码： 
<br>try { <br>&nbsp;&nbsp;UserManager.login(xx,xx); <br>用户登陆以后的主事件流代码 <br>} catch (UserNotFoundException 
e); { <br>用户名称没有的事件处理，例如产生一个提示用户注册的页面 <br>} catch (PasswordNotMatchException e); { <br>密码不对的事件处理，例如forward到重新登陆的页面 
<br>} </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/13/56/6a062937.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>gentleman...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师 如果异常 一直往外抛，比如在controller层的方法上，还往外抛，那jvm又是怎么处理的呢 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 39, 39) 
 {executed in 3 msec}
2020-11-19 20:18:45.642 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.644 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:18:45.666 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">79</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感谢雨迪！ <br>这节让我终于搞清楚了两个疑惑！ <br> 
<br>1:使用异常捕获的代码为什么比较耗费性能？ <br>因为构造异常的实例比较耗性能。这从代码层面很难理解，不过站在JVM的角度来看就简单了，因为JVM在构造异常实例时需要生成该异常的栈轨迹。这个操作会逐一访问当前线程的栈帧，并且记录下各种调试信息，包括栈帧所指向方法的名字，方法所在的类名、文件名，以及在代码中的第几行触发该异常等信息。 
<br>虽然具体不清楚JVM的实现细节，但是看描述这件事情也是比较费时费力的。 <br> <br>2:finally是怎么实现无论异常与否都能被执行的？ <br>这个事情是由编译器来实现的，现在的做法是这样的，编译器在编译Java代码时，会复制finally代码块的内容，然后分别放在try-catch代码块所有的正常执行路径及异常执行路径的出口中。 
<br> <br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> throw exception性能差fillstacktrace除了遍历堆栈以外，如果有inline 
代码消除等编译优化发生，是不是要先“去优化”完了再fill？要不然可能出现错误堆栈和代码对不上的情况 <br> <br>throw exception估计也会影响jit的优化，进而影响整体性能 
<br> <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 思考得很深，赞一个！<br><br>即时编译器生成的代码会保存原始的栈信息，以便去优化时能够复原。fillStackTrace也会读取这些信息的，所以不用先去优化再fill。<br><br>抛异常本身带来了额外的执行路径。通常如果能够将异常处理器也编译进去，那么不会有太大影响。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/9e/833b272e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阿坤</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果finally有return语句，catch内throw的异常会被忽略，这个从jvm层面怎么解释呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: catch里抛的异常会被finally捕获了，再执行完finally代码后重新抛出该异常。由于finally代码块有个return语句，在重新抛出前就返回了。<br><br>你可以利用这篇文章的知识，就着javap的输出，分析一下具体的程序路径</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/cd/0e06bd0f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Krloy</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于try catch的疑问 <br> <br>如果for里面中写 try catch 
一百条数据中有1条数据异常 程序正常执行 会返回99条数据 <br>如果for里面不写 try catch写外面 程序正常执行 但是数据返回0 <br> <br>try catch 
异常实例构造非常昂贵，因为虚拟机会生成改异常的栈轨迹，改操作会逐一访问改线程栈帧，并记录下各种调试信息。 <br> <br>那么如果我在for中写try catch 的话 会不会每次循环都生成一个异常实例？ 
<br>上面两种写try catch的方法 哪种要更好点 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> &nbsp;&nbsp;&nbsp;&nbsp;看完今天的文章有几个疑问 <br> <br>&nbsp;&nbsp;&nbsp;1方法的异常表是包含RuntimeException这种非check类型的异常吧？如果是那么每个方法都有异常表，那么是不是每个异常表中都有像ArrayIndexOutOfBoundsException这类型异常了。这类公共异常是私有还是共享呢 
<br> <br>&nbsp;&nbsp;&nbsp;2像catch自定义异常，也会添加的当前方法的异常表里吗？ <br> <br>&nbsp;&nbsp;&nbsp;3 我们常常看到的异常调用栈，这里方法调用信息其实就是弹出方法栈帧吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1 检查异常这个概念只在源代码中出现。异常表不是声明这段代码所有有可能抛出的异常，而是声明会被捕获的异常。<br><br>2 
会的<br><br>3 栈轨迹 跟 弹出方法栈帧 是两个概念。你可以直接新建一个异常，然后不抛出，直接打印调用栈。这个时候是不会弹出当前栈帧的。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/b7/37/36ce456f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王小臭</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 辛苦老师了，这么早更新 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/e1/a9/2774e870.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>孤独患者</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果在业务层的代码中使用Assert来判断参数是否有问题，然后在调用方捕捉异常，这样会不会耗性能 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 首先走抛出异常捕获异常的异常执行路径的话，性能肯定是很慢的，因此最好在参数出现问题的概率很小的情况下使用这种方式。<br><br>另外，你说的Assert是某个库的工具类，还是assert语句？后者的话，一般只在开发环境中启用吧。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/13/56/6a062937.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>gentleman...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 就是checked异常 一直不try 
catch ，jvm会怎么个处理流程呢 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/53/ab/6c07638a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>MissSunda...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-28 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这一篇是看的明白的的一篇。😂 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，请教您一个问题，jvm在执行字节码指令的过程中，在什么情况下会由顺序执行变为跳转执行？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> Java 虚拟机会忽略掉异常构造器以及填充栈帧的 Java 
方法（Throwable.fillInStackTrace），直接从新建异常位置开始算起。 <br>Java 虚拟机还会忽略标记为不可见的 Java 方法栈帧。 <br> <br>请问老师，填充栈帧的 
Java 方法和不可见的 Java 方法栈帧，是什么 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 前者指Throwable.fillStackTrace以及异常的构造器，后者为Java虚拟机不想让用户看到的栈帧，比如说方法句柄的适配器类中的方法。之后讲Lambda时会有具体的例子。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fe/59/29913e7b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吴伟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 检查异常和非检查异常也就是其他书籍中说的编译期异常和运行时异常？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 编译期异常和运行时异常这种划分有点奇怪。<br><br>检查异常也会在运行过程中抛出。但是它会要求编译器检查代码有没有显式地处理该异常。非检查异常包括Error和RuntimeException(会不会那本书直译为”运行时异常”？)，这两个则不要求编译器显式处理。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/bf/c8f343a3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>南城风戈</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 沙发 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>左瞳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 捕捉异常代码性能差是因为需要生成该异常的栈轨迹，就算不捕捉，也会打印该异常的的栈轨迹啊，那性能本来就差啊，何来捕捉异常性能差之说？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/b4/82/62548de6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jack Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-09 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，想请教你一下，这个：如果遍历完所有异常表条目，Java 
虚拟机仍未匹配到异常处理器，那么它会弹出当前方法对应的 Java 栈帧，并且在调用者（caller）中重复上述操作。在最坏情况下，Java 虚拟机需要遍历当前线程 Java 栈上所有方法的异常表。 
这里我的理解是不是一个循环遍历，直至找到对应的catch块为止呢，如果没有找到对应的catch，那么就直接抛出还是？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/b4/82/62548de6.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>jack 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师想了解下，finally那张图，如果第二个，蓝色块，正常执行块那里，如果蓝色finally代码块出现了异常，那么是不是重新抛出异常呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/55/c9/571c0f7c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>dengyp</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问JVM 对RuntimeException 的处理机制是怎样的呢 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjDxrsib6EUtKt6ROhrCNXlEQSoZQNlCG4mPjCGyvicibYbUlGrwiarMSTV3LNoE7IPtDf1NDZ4X2ib2g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_75b4c...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 对于实践环节表示看不懂字节码代码，无法理解，老师能不能在后篇解释下前篇遗留的问题 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一个坏人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师好，请教你一个问题。既然异常处理比较耗性能，我们应该杜绝用异常来实现业务的控制流程？比如下面代码： 
<br>try { <br>&nbsp;&nbsp;UserManager.login(xx,xx); <br>用户登陆以后的主事件流代码 <br>} catch (UserNotFoundException 
e); { <br>用户名称没有的事件处理，例如产生一个提示用户注册的页面 <br>} catch (PasswordNotMatchException e); { <br>密码不对的事件处理，例如forward到重新登陆的页面 
<br>} </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/13/56/6a062937.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>gentleman...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师 如果异常 一直往外抛，比如在controller层的方法上，还往外抛，那jvm又是怎么处理的呢 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 39, 39) 
 {executed in 14 msec}
2020-11-19 20:18:45.701 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.703 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:45.707 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.709 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:45.716 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 39, 'https://static001.geekbang.org/resource/image/26/82/26f97c013591f90d77fd5d7715a47582.jpg', 
39) 
 {executed in 1 msec}
2020-11-19 20:18:45.728 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.730 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:18:45.738 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 39, 'https://static001.geekbang.org/resource/image/26/82/26f97c013591f90d77fd5d7715a47582.jpg', 
39) 
 {executed in 1 msec}
2020-11-19 20:18:45.744 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.746 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:18:45.753 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.765 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=39 
 {executed in 1 msec}
2020-11-19 20:18:45.767 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:18:45.775 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 39, 39) 
 {executed in 1 msec}
2020-11-19 20:18:45.783 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1032759964878680' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:18:45.784 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:09.347 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1032759964878680' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:19:09.351 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:09.358 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1032759964878680', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:19:09.361 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1032759964878680', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:19:09.363 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|79            |
|--------------|

2020-11-19 20:19:09.390 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1032759964878680' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:09.392 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:09.770 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1032759964878680' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:09.773 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:09.777 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1032759964878680', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:19:09.779 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1032759964878680', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:19:09.781 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|80            |
|--------------|

2020-11-19 20:19:09.806 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1032759964878680' 
 {executed in 1 msec}
2020-11-19 20:19:09.808 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:09.812 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788349, 1) 
 {executed in 1 msec}
2020-11-19 20:19:09.814 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788349, 1) 
 {executed in 0 msec}
2020-11-19 20:19:09.816 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|40            |
|--------------|

2020-11-19 20:19:09.829 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'de1c2a3e-64bb-42d3-ad99-9ac1338a8862', 
40) 
 {executed in 0 msec}
2020-11-19 20:19:09.831 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'de1c2a3e-64bb-42d3-ad99-9ac1338a8862', 40) 
 {executed in 1 msec}
2020-11-19 20:19:09.832 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|40            |
|--------------|

2020-11-19 20:19:09.846 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=40, revision_default=1, revision_timestamp=1605788349, 
revision_uid=1 where vid=40 
 {executed in 1 msec}
2020-11-19 20:19:09.853 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.855 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:09.861 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1032759964878680', 'zh-hans', 40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:09.867 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.869 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:09.875 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1032759964878680', 'zh-hans', 40, 40) 
 {executed in 0 msec}
2020-11-19 20:19:09.881 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=40 
 {executed in 1 msec}
2020-11-19 20:19:09.883 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:09.886 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=40 
 {executed in 0 msec}
2020-11-19 20:19:09.888 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:09.895 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 40, 0, 0, 32, 0, 40) 
 {executed in 1 msec}
2020-11-19 20:19:09.900 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.902 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:09.905 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.908 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:09.917 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>我在读博士的时候，最怕的事情就是被问有没有新的 Idea。有一次我被老板问急了，就随口说了一个。</p> <p>这个 
Idea 究竟是什么呢，我们知道，设计模式大量使用了虚方法来实现多态。但是虚方法的性能效率并不高，所以我就说，是否能够在此基础上写篇文章，评估每一种设计模式因为虚方法调用而造成的性能开销，并且在文章中强烈谴责一下？</p> 
<p>当时呢，我老板教的是一门高级程序设计的课，其中有好几节课刚好在讲设计模式的各种好处。所以，我说完这个 Idea，就看到老板的神色略有不悦了，脸上写满了“小郑啊，你这是舍本逐末啊”，于是，我就连忙挽尊，说我是开玩笑的。</p> 
<p>在这里呢，我犯的错误其实有两个。第一，我不应该因为虚方法的性能效率，而放弃良好的设计。第二，通常来说，Java 虚拟机中虚方法调用的性能开销并不大，有些时候甚至可以完全消除。第一个错误是原则上的，这里就不展开了。至于第二个错误，我们今天便来聊一聊 
Java 虚拟机中虚方法调用的具体实现。</p> <p>首先，我们来看一个模拟出国边检的小例子。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
abstract class Passenger { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
abstract void passThroughImmigration(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public String toString() { ... } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class ForeignerPassenger extends Passenger { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void passThroughImmigration() { /* 进外国人通道 */ } </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ChinesePassenger extends Passenger { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void passThroughImmigration() { /* 进中国人通道 */ } </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void visitDutyFreeShops() { /* 逛免税店 */ 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Passenger passenger = ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
passenger.passThroughImmigration(); </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了一个抽象类，叫做 Passenger，这个类中有一个名为 passThroughImmigration 
的抽象方法，以及重写自 Object 类的 toString 方法。</p><!-- [[[read_end]]] --> <p>然后，我将 Passenger 粗暴地分为两种：ChinesePassenger 
和 ForeignerPassenger。</p> <p>两个类分别实现了 passThroughImmigration 这个方法，具体来说，就是中国人走中国人通道，外国人走外国人通道。由于咱们储蓄较多，所以我在 
ChinesePassenger 这个类中，还特意添加了一个叫做 visitDutyFreeShops 的方法。</p> <p>那么在实际运行过程中，Java 虚拟机是如何高效地确定每个 
Passenger 实例应该去哪条通道的呢？我们一起来看一下。</p> <h2>1. 虚方法调用</h2> <p>在上一篇中我曾经提到，Java 里所有非私有实例方法调用都会被编译成 
invokevirtual 指令，而接口方法调用都会被编译成 invokeinterface 指令。这两种指令，均属于 Java 虚拟机中的虚方法调用。</p> <p>在绝大多数情况下，Java 
虚拟机需要根据调用者的动态类型，来确定虚方法调用的目标方法。这个过程我们称之为动态绑定。那么，相对于静态绑定的非虚方法调用来说，虚方法调用更加耗时。</p> <p>在 Java 虚拟机中，静态绑定包括用于调用静态方法的 
invokestatic 指令，和用于调用构造器、私有实例方法以及超类非私有实例方法的 invokespecial 指令。如果虚方法调用指向一个标记为 final 的方法，那么 Java 
虚拟机也可以静态绑定该虚方法调用的目标方法。</p> <p>Java 虚拟机中采取了一种用空间换取时间的策略来实现动态绑定。它为每个类生成一张方法表，用以快速定位目标方法。那么方法表具体是怎样实现的呢？</p> 
<h2>2. 方法表</h2> <p>在介绍那篇类加载机制的链接部分中，我曾提到类加载的准备阶段，它除了为静态字段分配内存之外，还会构造与该类相关联的方法表。</p> <p>这个数据结构，便是 
Java 虚拟机实现动态绑定的关键所在。下面我将以 invokevirtual 所使用的虚方法表（virtual method table，vtable）为例介绍方法表的用法。invokeinterface 
所使用的接口方法表（interface method table，itable）稍微复杂些，但是原理其实是类似的。</p> <p>方法表本质上是一个数组，每个数组元素指向一个当前类及其祖先类中非私有的实例方法。</p> 
<p>这些方法可能是具体的、可执行的方法，也可能是没有相应字节码的抽象方法。方法表满足两个特质：其一，子类方法表中包含父类方法表中的所有方法；其二，子类方法在方法表中的索引值，与它所重写的父类方法的索引值相同。</p> 
<p>我们知道，方法调用指令中的符号引用会在执行之前解析成实际引用。对于静态绑定的方法调用而言，实际引用将指向具体的目标方法。对于动态绑定的方法调用而言，实际引用则是方法表的索引值（实际上并不仅是索引值）。</p> 
<p>在执行过程中，Java 虚拟机将获取调用者的实际类型，并在该实际类型的虚方法表中，根据索引值获得目标方法。这个过程便是动态绑定。</p> <p><img src="https://static001.geekbang.org/resource/image/f1/c3/f1ff9dcb297a458981bd1d189a5b04c3.png" 
alt=""></p> <p>在我们的例子中，Passenger 类的方法表包括两个方法：</p> <ul> <li>toString</li> <li>passThroughImmigration，</li> 
</ul> <p>它们分别对应 0 号和 1 号。之所以方法表调换了 toString 方法和 passThroughImmigration 方法的位置，是因为 toString 方法的索引值需要与 
Object 类中同名方法的索引值一致。为了保持简洁，这里我就不考虑 Object 类中的其他方法。</p> <p>ForeignerPassenger 的方法表同样有两行。其中，0 
号方法指向继承而来的 Passenger 类的 toString 方法。1 号方法则指向自己重写的 passThroughImmigration 方法。</p> <p>ChinesePassenger 
的方法表则包括三个方法，除了继承而来的 Passenger 类的 toString 方法，自己重写的 passThroughImmigration 方法之外，还包括独有的 visitDutyFreeShops 
方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Passenger passenger = ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> passenger.passThroughImmigration(); </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这里，Java 
虚拟机的工作可以想象为导航员。每当来了一个乘客需要出境，导航员会先问是中国人还是外国人（获取动态类型），然后翻出中国人 / 外国人对应的小册子（获取动态类型的方法表），小册子的第 1 
页便写着应该到哪条通道办理出境手续（用 1 作为索引来查找方法表所对应的目标方法）。</p> <p>实际上，使用了方法表的动态绑定与静态绑定相比，仅仅多出几个内存解引用操作：访问栈上的调用者，读取调用者的动态类型，读取该类型的方法表，读取方法表中某个索引值所对应的目标方法。相对于创建并初始化 
Java 栈帧来说，这几个内存解引用操作的开销简直可以忽略不计。</p> <p>那么我们是否可以认为虚方法调用对性能没有太大影响呢？</p> <p>其实是不能的，上述优化的效果看上去十分美好，但实际上仅存在于解释执行中，或者即时编译代码的最坏情况中。这是因为即时编译还拥有另外两种性能更好的优化手段：内联缓存（inlining 
cache）和方法内联（method inlining）。下面我便来介绍第一种内联缓存。</p> <h2>3. 内联缓存</h2> <p>内联缓存是一种加快动态绑定的优化技术。它能够缓存虚方法调用中调用者的动态类型，以及该类型所对应的目标方法。在之后的执行过程中，如果碰到已缓存的类型，内联缓存便会直接调用该类型所对应的目标方法。如果没有碰到已缓存的类型，内联缓存则会退化至使用基于方法表的动态绑定。</p> 
<p>在我们的例子中，这相当于导航员记住了上一个出境乘客的国籍和对应的通道，例如中国人，走了左边通道出境。那么下一个乘客想要出境的时候，导航员会先问是不是中国人，是的话就走左边通道。如果不是的话，只好拿出外国人的小册子，翻到第 
1 页，再告知查询结果：右边。</p> <p>在针对多态的优化手段中，我们通常会提及以下三个术语。</p> <ol> <li>单态（monomorphic）指的是仅有一种状态的情况。</li> 
<li>多态（polymorphic）指的是有限数量种状态的情况。二态（bimorphic）是多态的其中一种。</li> <li>超多态（megamorphic）指的是更多种状态的情况。通常我们用一个具体数值来区分多态和超多态。在这个数值之下，我们称之为多态。否则，我们称之为超多态。</li> 
</ol> <p>对于内联缓存来说，我们也有对应的单态内联缓存、多态内联缓存和超多态内联缓存。单态内联缓存，顾名思义，便是只缓存了一种动态类型以及它所对应的目标方法。它的实现非常简单：比较所缓存的动态类型，如果命中，则直接调用对应的目标方法。</p> 
<p>多态内联缓存则缓存了多个动态类型及其目标方法。它需要逐个将所缓存的动态类型与当前动态类型进行比较，如果命中，则调用对应的目标方法。</p> <p>一般来说，我们会将更加热门的动态类型放在前面。在实践中，大部分的虚方法调用均是单态的，也就是只有一种动态类型。为了节省内存空间，Java 
虚拟机只采用单态内联缓存。</p> <p>前面提到，当内联缓存没有命中的情况下，Java 虚拟机需要重新使用方法表进行动态绑定。对于内联缓存中的内容，我们有两种选择。一是替换单态内联缓存中的纪录。这种做法就好比 
CPU 中的数据缓存，它对数据的局部性有要求，即在替换内联缓存之后的一段时间内，方法调用的调用者的动态类型应当保持一致，从而能够有效地利用内联缓存。</p> <p>因此，在最坏情况下，我们用两种不同类型的调用者，轮流执行该方法调用，那么每次进行方法调用都将替换内联缓存。也就是说，只有写缓存的额外开销，而没有用缓存的性能提升。</p> 
<p>另外一种选择则是劣化为超多态状态。这也是 Java 虚拟机的具体实现方式。处于这种状态下的内联缓存，实际上放弃了优化的机会。它将直接访问方法表，来动态绑定目标方法。与替换内联缓存纪录的做法相比，它牺牲了优化的机会，但是节省了写缓存的额外开销。</p> 
<p>具体到我们的例子，如果来了一队乘客，其中外国人和中国人依次隔开，那么在重复使用的单态内联缓存中，导航员需要反复记住上个出境的乘客，而且记住的信息在处理下一乘客时又会被替换掉。因此，倒不如一直不记，以此来节省脑细胞。</p> 
<p>虽然内联缓存附带内联二字，但是它并没有内联目标方法。这里需要明确的是，任何方法调用除非被内联，否则都会有固定开销。这些开销来源于保存程序在该方法中的执行位置，以及新建、压入和弹出新方法所使用的栈帧。</p> 
<p>对于极其简单的方法而言，比如说 getter/setter，这部分固定开销占据的 CPU 时间甚至超过了方法本身。此外，在即时编译中，方法内联不仅仅能够消除方法调用的固定开销，而且还增加了进一步优化的可能性，我们会在专栏的第二部分详细介绍方法内联的内容。</p> 
<h2>总结与实践</h2> <p>今天我介绍了虚方法调用在 Java 虚拟机中的实现方式。</p> <p>虚方法调用包括 invokevirtual 指令和 invokeinterface 
指令。如果这两种指令所声明的目标方法被标记为 final，那么 Java 虚拟机会采用静态绑定。</p> <p>否则，Java 虚拟机将采用动态绑定，在运行过程中根据调用者的动态类型，来决定具体的目标方法。</p> 
<p>Java 虚拟机的动态绑定是通过方法表这一数据结构来实现的。方法表中每一个重写方法的索引值，与父类方法表中被重写的方法的索引值一致。</p> <p>在解析虚方法调用时，Java 
虚拟机会纪录下所声明的目标方法的索引值，并且在运行过程中根据这个索引值查找具体的目标方法。</p> <p>Java 虚拟机中的即时编译器会使用内联缓存来加速动态绑定。Java 虚拟机所采用的单态内联缓存将纪录调用者的动态类型，以及它所对应的目标方法。</p> 
<p>当碰到新的调用者时，如果其动态类型与缓存中的类型匹配，则直接调用缓存的目标方法。</p> <p>否则，Java 虚拟机将该内联缓存劣化为超多态内联缓存，在今后的执行过程中直接使用方法表进行动态绑定。</p> 
<p>在今天的实践环节，我们来观测一下单态内联缓存和超多态内联缓存的性能差距。为了消除方法内联的影响，请使用如下的命令。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with: java -XX:CompileCommand=''dontinline,*.passThroughImmigration'' Passenger </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public abstract class Passenger { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> abstract void passThroughImmigration(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Passenger a = new ChinesePassenger(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Passenger b = new ForeignerPassenger(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Passenger c = (i &lt; 1_000_000_000) ? a : b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> c.passThroughImmigration(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ChinesePassenger extends Passenger { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override void passThroughImmigration() 
{} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class ForeignerPassenger extends Passenger 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override void passThroughImmigration() 
{} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 40, 40) 
 {executed in 2 msec}
2020-11-19 20:19:09.928 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.930 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:09.939 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>我在读博士的时候，最怕的事情就是被问有没有新的 Idea。有一次我被老板问急了，就随口说了一个。</p> <p>这个 Idea 究竟是什么呢，我们知道，设计模式大量使用了虚方法来实现多态。但是虚方法的性能效率并不高，所以我就说，是否能够在此基础上写篇文章，评估每一种设计模式因为虚方法调用而造成的性能开销，并且在文章中强烈谴责一下？</p> 
<p>当时呢，我老板教的是一门高级程序设计的课，其中有好几节课刚好在讲设计模式的各种好处。所以，我说完这个 Idea，就看到老板的神色略有不悦了，脸上写满了“小郑啊，你这是舍本逐末啊”，于是，我就连忙挽尊，说我是开玩笑的。</p> 
<p>在这里呢，我犯的错误其实有两个。第一，我不应该因为虚方法的性能效率，而放弃良好的设计。第二，通常来说，Java 虚拟机中虚方法调用的性能开销并不大，有些时候甚至可以完全消除。第一个错误是原则上的，这里就不展开了。至于第二个错误，我们今天便来聊一聊 
Java 虚拟机中虚方法调用的具体实现。</p> <p>首先，我们来看一个模拟出国边检的小例子。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
abstract class Passenger { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
abstract void passThroughImmigration(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public String toString() { ... } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class ForeignerPassenger extends Passenger { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void passThroughImmigration() { /* 进外国人通道 */ } </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ChinesePassenger extends Passenger { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void passThroughImmigration() { /* 进中国人通道 */ } </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void visitDutyFreeShops() { /* 逛免税店 */ 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Passenger passenger = ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
passenger.passThroughImmigration(); </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了一个抽象类，叫做 Passenger，这个类中有一个名为 passThroughImmigration 
的抽象方法，以及重写自 Object 类的 toString 方法。</p><!-- [[[read_end]]] --> <p>然后，我将 Passenger 粗暴地分为两种：ChinesePassenger 
和 ForeignerPassenger。</p> <p>两个类分别实现了 passThroughImmigration 这个方法，具体来说，就是中国人走中国人通道，外国人走外国人通道。由于咱们储蓄较多，所以我在 
ChinesePassenger 这个类中，还特意添加了一个叫做 visitDutyFreeShops 的方法。</p> <p>那么在实际运行过程中，Java 虚拟机是如何高效地确定每个 
Passenger 实例应该去哪条通道的呢？我们一起来看一下。</p> <h2>1. 虚方法调用</h2> <p>在上一篇中我曾经提到，Java 里所有非私有实例方法调用都会被编译成 
invokevirtual 指令，而接口方法调用都会被编译成 invokeinterface 指令。这两种指令，均属于 Java 虚拟机中的虚方法调用。</p> <p>在绝大多数情况下，Java 
虚拟机需要根据调用者的动态类型，来确定虚方法调用的目标方法。这个过程我们称之为动态绑定。那么，相对于静态绑定的非虚方法调用来说，虚方法调用更加耗时。</p> <p>在 Java 虚拟机中，静态绑定包括用于调用静态方法的 
invokestatic 指令，和用于调用构造器、私有实例方法以及超类非私有实例方法的 invokespecial 指令。如果虚方法调用指向一个标记为 final 的方法，那么 Java 
虚拟机也可以静态绑定该虚方法调用的目标方法。</p> <p>Java 虚拟机中采取了一种用空间换取时间的策略来实现动态绑定。它为每个类生成一张方法表，用以快速定位目标方法。那么方法表具体是怎样实现的呢？</p> 
<h2>2. 方法表</h2> <p>在介绍那篇类加载机制的链接部分中，我曾提到类加载的准备阶段，它除了为静态字段分配内存之外，还会构造与该类相关联的方法表。</p> <p>这个数据结构，便是 
Java 虚拟机实现动态绑定的关键所在。下面我将以 invokevirtual 所使用的虚方法表（virtual method table，vtable）为例介绍方法表的用法。invokeinterface 
所使用的接口方法表（interface method table，itable）稍微复杂些，但是原理其实是类似的。</p> <p>方法表本质上是一个数组，每个数组元素指向一个当前类及其祖先类中非私有的实例方法。</p> 
<p>这些方法可能是具体的、可执行的方法，也可能是没有相应字节码的抽象方法。方法表满足两个特质：其一，子类方法表中包含父类方法表中的所有方法；其二，子类方法在方法表中的索引值，与它所重写的父类方法的索引值相同。</p> 
<p>我们知道，方法调用指令中的符号引用会在执行之前解析成实际引用。对于静态绑定的方法调用而言，实际引用将指向具体的目标方法。对于动态绑定的方法调用而言，实际引用则是方法表的索引值（实际上并不仅是索引值）。</p> 
<p>在执行过程中，Java 虚拟机将获取调用者的实际类型，并在该实际类型的虚方法表中，根据索引值获得目标方法。这个过程便是动态绑定。</p> <p><img src="https://static001.geekbang.org/resource/image/f1/c3/f1ff9dcb297a458981bd1d189a5b04c3.png" 
alt=""></p> <p>在我们的例子中，Passenger 类的方法表包括两个方法：</p> <ul> <li>toString</li> <li>passThroughImmigration，</li> 
</ul> <p>它们分别对应 0 号和 1 号。之所以方法表调换了 toString 方法和 passThroughImmigration 方法的位置，是因为 toString 方法的索引值需要与 
Object 类中同名方法的索引值一致。为了保持简洁，这里我就不考虑 Object 类中的其他方法。</p> <p>ForeignerPassenger 的方法表同样有两行。其中，0 
号方法指向继承而来的 Passenger 类的 toString 方法。1 号方法则指向自己重写的 passThroughImmigration 方法。</p> <p>ChinesePassenger 
的方法表则包括三个方法，除了继承而来的 Passenger 类的 toString 方法，自己重写的 passThroughImmigration 方法之外，还包括独有的 visitDutyFreeShops 
方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Passenger passenger = ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> passenger.passThroughImmigration(); </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这里，Java 
虚拟机的工作可以想象为导航员。每当来了一个乘客需要出境，导航员会先问是中国人还是外国人（获取动态类型），然后翻出中国人 / 外国人对应的小册子（获取动态类型的方法表），小册子的第 1 
页便写着应该到哪条通道办理出境手续（用 1 作为索引来查找方法表所对应的目标方法）。</p> <p>实际上，使用了方法表的动态绑定与静态绑定相比，仅仅多出几个内存解引用操作：访问栈上的调用者，读取调用者的动态类型，读取该类型的方法表，读取方法表中某个索引值所对应的目标方法。相对于创建并初始化 
Java 栈帧来说，这几个内存解引用操作的开销简直可以忽略不计。</p> <p>那么我们是否可以认为虚方法调用对性能没有太大影响呢？</p> <p>其实是不能的，上述优化的效果看上去十分美好，但实际上仅存在于解释执行中，或者即时编译代码的最坏情况中。这是因为即时编译还拥有另外两种性能更好的优化手段：内联缓存（inlining 
cache）和方法内联（method inlining）。下面我便来介绍第一种内联缓存。</p> <h2>3. 内联缓存</h2> <p>内联缓存是一种加快动态绑定的优化技术。它能够缓存虚方法调用中调用者的动态类型，以及该类型所对应的目标方法。在之后的执行过程中，如果碰到已缓存的类型，内联缓存便会直接调用该类型所对应的目标方法。如果没有碰到已缓存的类型，内联缓存则会退化至使用基于方法表的动态绑定。</p> 
<p>在我们的例子中，这相当于导航员记住了上一个出境乘客的国籍和对应的通道，例如中国人，走了左边通道出境。那么下一个乘客想要出境的时候，导航员会先问是不是中国人，是的话就走左边通道。如果不是的话，只好拿出外国人的小册子，翻到第 
1 页，再告知查询结果：右边。</p> <p>在针对多态的优化手段中，我们通常会提及以下三个术语。</p> <ol> <li>单态（monomorphic）指的是仅有一种状态的情况。</li> 
<li>多态（polymorphic）指的是有限数量种状态的情况。二态（bimorphic）是多态的其中一种。</li> <li>超多态（megamorphic）指的是更多种状态的情况。通常我们用一个具体数值来区分多态和超多态。在这个数值之下，我们称之为多态。否则，我们称之为超多态。</li> 
</ol> <p>对于内联缓存来说，我们也有对应的单态内联缓存、多态内联缓存和超多态内联缓存。单态内联缓存，顾名思义，便是只缓存了一种动态类型以及它所对应的目标方法。它的实现非常简单：比较所缓存的动态类型，如果命中，则直接调用对应的目标方法。</p> 
<p>多态内联缓存则缓存了多个动态类型及其目标方法。它需要逐个将所缓存的动态类型与当前动态类型进行比较，如果命中，则调用对应的目标方法。</p> <p>一般来说，我们会将更加热门的动态类型放在前面。在实践中，大部分的虚方法调用均是单态的，也就是只有一种动态类型。为了节省内存空间，Java 
虚拟机只采用单态内联缓存。</p> <p>前面提到，当内联缓存没有命中的情况下，Java 虚拟机需要重新使用方法表进行动态绑定。对于内联缓存中的内容，我们有两种选择。一是替换单态内联缓存中的纪录。这种做法就好比 
CPU 中的数据缓存，它对数据的局部性有要求，即在替换内联缓存之后的一段时间内，方法调用的调用者的动态类型应当保持一致，从而能够有效地利用内联缓存。</p> <p>因此，在最坏情况下，我们用两种不同类型的调用者，轮流执行该方法调用，那么每次进行方法调用都将替换内联缓存。也就是说，只有写缓存的额外开销，而没有用缓存的性能提升。</p> 
<p>另外一种选择则是劣化为超多态状态。这也是 Java 虚拟机的具体实现方式。处于这种状态下的内联缓存，实际上放弃了优化的机会。它将直接访问方法表，来动态绑定目标方法。与替换内联缓存纪录的做法相比，它牺牲了优化的机会，但是节省了写缓存的额外开销。</p> 
<p>具体到我们的例子，如果来了一队乘客，其中外国人和中国人依次隔开，那么在重复使用的单态内联缓存中，导航员需要反复记住上个出境的乘客，而且记住的信息在处理下一乘客时又会被替换掉。因此，倒不如一直不记，以此来节省脑细胞。</p> 
<p>虽然内联缓存附带内联二字，但是它并没有内联目标方法。这里需要明确的是，任何方法调用除非被内联，否则都会有固定开销。这些开销来源于保存程序在该方法中的执行位置，以及新建、压入和弹出新方法所使用的栈帧。</p> 
<p>对于极其简单的方法而言，比如说 getter/setter，这部分固定开销占据的 CPU 时间甚至超过了方法本身。此外，在即时编译中，方法内联不仅仅能够消除方法调用的固定开销，而且还增加了进一步优化的可能性，我们会在专栏的第二部分详细介绍方法内联的内容。</p> 
<h2>总结与实践</h2> <p>今天我介绍了虚方法调用在 Java 虚拟机中的实现方式。</p> <p>虚方法调用包括 invokevirtual 指令和 invokeinterface 
指令。如果这两种指令所声明的目标方法被标记为 final，那么 Java 虚拟机会采用静态绑定。</p> <p>否则，Java 虚拟机将采用动态绑定，在运行过程中根据调用者的动态类型，来决定具体的目标方法。</p> 
<p>Java 虚拟机的动态绑定是通过方法表这一数据结构来实现的。方法表中每一个重写方法的索引值，与父类方法表中被重写的方法的索引值一致。</p> <p>在解析虚方法调用时，Java 
虚拟机会纪录下所声明的目标方法的索引值，并且在运行过程中根据这个索引值查找具体的目标方法。</p> <p>Java 虚拟机中的即时编译器会使用内联缓存来加速动态绑定。Java 虚拟机所采用的单态内联缓存将纪录调用者的动态类型，以及它所对应的目标方法。</p> 
<p>当碰到新的调用者时，如果其动态类型与缓存中的类型匹配，则直接调用缓存的目标方法。</p> <p>否则，Java 虚拟机将该内联缓存劣化为超多态内联缓存，在今后的执行过程中直接使用方法表进行动态绑定。</p> 
<p>在今天的实践环节，我们来观测一下单态内联缓存和超多态内联缓存的性能差距。为了消除方法内联的影响，请使用如下的命令。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with: java -XX:CompileCommand=''dontinline,*.passThroughImmigration'' Passenger </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public abstract class Passenger { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> abstract void passThroughImmigration(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Passenger a = new ChinesePassenger(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Passenger b = new ForeignerPassenger(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> long current = System.currentTimeMillis(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 1; i &lt;= 2_000_000_000; 
i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i 
% 100_000_000 == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
long temp = System.currentTimeMillis(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println(temp - current); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> current = temp; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Passenger c = (i &lt; 1_000_000_000) ? a : b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> c.passThroughImmigration(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ChinesePassenger extends Passenger { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override void passThroughImmigration() 
{} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class ForeignerPassenger extends Passenger 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override void passThroughImmigration() 
{} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 40, 40) 
 {executed in 2 msec}
2020-11-19 20:19:09.951 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=40 
 {executed in 1 msec}
2020-11-19 20:19:09.953 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:09.956 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=40 
 {executed in 1 msec}
2020-11-19 20:19:09.958 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:19:09.965 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788349, 1605788349, 1, 'zh-hans', 0, 1, 1, 
0, '05丨JVM是如何执行方法调用的？（下）', 1, 40, 40) 
 {executed in 0 msec}
2020-11-19 20:19:09.971 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=40 
 {executed in 1 msec}
2020-11-19 20:19:09.974 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:09.982 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788349, 1605788349, 1, 'zh-hans', 0, 
1, 1, 0, '05丨JVM是如何执行方法调用的？（下）', 'book', 1, 40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:09.988 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.989 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:09.993 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:09.995 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:10.002 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/9a10b5afcc9a7b7dbafd0fe3ada86a86?bkt=en-06f5c65000af0ed6edb9cd08bb105f4aa13f142f92ef515d368afda85216a68f4052a87fc3b6d365&fid=3757516097-778750-1055038636807605&time=1605788348&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-DH5%2B%2B8MceImxQR%2BVXJSWBq%2BOnqM%3D&to=92&size=6391502&sta_dx=6391502&sta_cs=4363&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182959&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6391502&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-18ae3985559af3c4888535fd751559b79521f2d493b2d7461dbd6dd2e8080d2a9e4f8f69e23d7fcd&sl=76480590&expires=8h&rt=pr&r=760790349&mlogid=7510917508066416710&vbdid=64799653&fin=05%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510917508066416710&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b166e1f313073ed9b22859cf60ad17917f&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=05%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:10.008 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.010 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:10.017 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/9a10b5afcc9a7b7dbafd0fe3ada86a86?bkt=en-06f5c65000af0ed6edb9cd08bb105f4aa13f142f92ef515d368afda85216a68f4052a87fc3b6d365&fid=3757516097-778750-1055038636807605&time=1605788348&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-DH5%2B%2B8MceImxQR%2BVXJSWBq%2BOnqM%3D&to=92&size=6391502&sta_dx=6391502&sta_cs=4363&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182959&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6391502&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-18ae3985559af3c4888535fd751559b79521f2d493b2d7461dbd6dd2e8080d2a9e4f8f69e23d7fcd&sl=76480590&expires=8h&rt=pr&r=760790349&mlogid=7510917508066416710&vbdid=64799653&fin=05%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510917508066416710&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b166e1f313073ed9b22859cf60ad17917f&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=05%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:10.023 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.024 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:10.027 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.029 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:10.039 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/51/96/53ffbb95.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>啊一大狗</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-31 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这套课很好，谢谢！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fa/29/f1ede67b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Tony</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">42</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 同提建议，代码使用英文。刚学java基础时，有老师为了便于理解用中文命名。现在都来学jvm，对java很熟悉了，看到中文不仅不会觉得通俗易懂，反而特别别扭。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>原本是英文的，录音的时候觉得老要切换，就给换了。。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>C_love</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 提个小建议，能否在代码中都使用英文？毕竟使用中文作对象名不值得提倡 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/2f/32/db8e5674.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨军</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不太理解一个问题：“Java的动态类型运行期才可知”，在编译期代码写完之后应该就已经确定了吧，比如A是B的子类，“B 
b = new B(); b= new A()”这种情况下b的动态类型是A，Java编译器在编译阶段就可以确定啊，为什么说动态类型直到运行期才可知? <br>诚心求老师解惑，这个问题对我理解Java的动态绑定机制很关键-.- 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/76/e5ffbdf1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lxz</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 建议结合java代码及其对应的字节码来讲解，比如常量池，方法表在字节码中对应的位置，干讲一点印象也没有 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/31/f4/d08eeec4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>CHEN</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 没用过中文写代码，居然认为中文会编译错误T﹏T <br>老师是为了课件方便这样写，自己写作业就改下呗，又没规定要每个字照抄 
<br>[root@localhost cqq]# javac Passenger.java <br>[root@localhost cqq]# java Passenger <br>cost 
time : 1167 <br>cost time : 3156 <br>[root@localhost cqq]# java -XX:CompileCommand=''dontinline,*.exit'' 
Passenger <br>CompilerOracle: dontinline *.exit <br>cost time : 3709 <br>cost time : 7557 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 哈，我以前也认为无法编译，直到有一次我看到一个俄语的方法名。。<br><br>另外，如果你用javap -v查看常量池的话，你会发现类名方法名以及方法描述符都是用UTF8来存的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:虚方法 <br>方法重写的方法，可认为就是虚方法 <br> 
<br>2:JVM怎么执行虚方法 <br>通过方法表，一个二维表结构，标示出类的类型、虚方法的序号。当调用虚方法的时候，先确定类型，再根据类型找方法 <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/79/a2/18815f9c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>J</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> win10: <br>java -XX:CompileCommand=dontinline,*.exit 
Passenger 这样是对的 <br>java -XX:CompileCommand=‘dontinline,*.exit’ Passenger 这样是错的 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于单态内联缓存中的记录，hotspot采用了超多态。也就是如果该调用者的动态类型不是缓存中的类型的话，直接通过基于方法表来找到具体的目标方法。那么内联缓存中的类型是永久不变，一直是第一次缓存的那个调用者类型吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/10/37/6c6b5e32.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吾是锋子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师，您好。有个具体的问题想请教下，String类里面indexOf(String 
str)调用的是自己类里面indexOf(String str, int fromIndex)方法，但我自己在测试的时候却发现两个方法的速度有很明显的差异，看字节码也没有发现什么特殊。 
<br>不知道是不是我忽略了什么，希望您能抽空点拨下，感谢！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: HotSpot里有String.indexOf intrinsic，用了很多向量化指令，所以性能会快很多的。<br><br>关于intrinsic的概念，你可以理解为HotSpot识别指定方法后，将其替代为语意等价的高效实现。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/45/91/246c7698.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>方枪枪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不能明确一个问题，执行哪个方法，是不是都是在运行的时候确定的，如果是的话，coding的时候，写一个不存在的方法or传入不存在的参数，编译会报错，那这个合法性的检测，是一个什么逻辑？另外关于方法的确定，对于Java来说，是按照传入的形参确定执行哪个重写的方法，对于 
groovy 是按照实际类型确定执行哪个方法，这两个区别在JVM层面是如何实现的？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 合法性检测是根据编译器能找到的class文件来判定的。你可以在编译后，移除掉相应的class文件或者库文件，就会出现你所说的不存在的方法的情况了。<br><br>第二个问题，在各自的编译器中已经作出区分了。在Java字节码中就只是根据类名，方法名和方法描述符来定位方法的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/10/44/e7437824.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>和风暖林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 代码用汉语也挺好的呀。来这都是学jvm的，没有来学编码规范的吧…… 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，多谢支持。不过汉语编程有个问题，没办法区分大小写，因此变量名和类名容易混淆</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7b/c0/517781b8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>左岸🌸开</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么调用超类非私有实例方法会属于静态绑定呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
通过super关键字来调用父类方法，本意就是想要调用父类的特定方法，而不是根据具体类型决定目标方法。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7gP4Nibo4m4MOvbqd4yuK1Bf4ULQeSb3d37zyw5nKAHlHze89yTp4NWRLEbq72iaiaO8NKpOUnHw3g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>加久</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 任何方法调用除非被内联，否则都会有固定开销。这些开销来源于保存程序在该方法中的执行位置，以及新建、压入和... 
<br> <br>命中内联缓存后，不用开辟新的栈帧了？？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Rain</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不太理解一个问题：“Java的动态类型运行期才可知”，在编译期代码写完之后应该就已经确定了吧，比如A是B的子类，“B 
b = new B(); b= new A()”这种情况下b的动态类型是A，Java编译器在编译阶段就可以确定啊，为什么说动态类型直到运行期才可知? <br>诚心求老师解惑，这个问题对我理解Java的动态绑定机制很关键-.- 
<br> <br> <br>@杨军，我的理解是，假设C是B的另外一个子类，你的上述两句代码有可能运行在多线程环境中。假设第二行代码运行之后切换到了另外一个线程中，且b = new C() 
<br>这个情况下，线程再切换到你的那两行代码后面的时候就不一定是A了，刘必须要在运行过程中才能确定了。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 3:缓存 <br>凡是需要提高性能的地方都需要使用，这个方法也是人类经常使用的方式，计算机中使用的也比较多，使用缓存的基本理念是，一将需要的东西提前加工好，二将加工好的东西放在获取速度更快更方便的地方 
<br> <br>4:内联缓存 <br>是JVM为了提高动态绑定或者根据动态的类类型找目标方法的一种方式，这是以空间换时间的优化思路，需要权衡利弊，视场景使用 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/37/ea588860.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>礼貌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 汉语编程？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，这个对于VM实现者来说可是feature，毕竟要存储UTF8。不过以后的代码会换到英文的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5e/ff/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王旭林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，打印耗时的System.out.println 用的太多了吧？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你是指课后作业吗？<br><br>打印语句每一亿次循环只会运行一次，相对来说并不耗时。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>Geek_8b249...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2019-05-07 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 结果： <br>inline 
<br>170 // a <br>... <br>170 <br>210 // b <br>... <br>210 <br> <br>dontinline <br>360 // a 
<br>... <br>360 <br>420 // b <br>... <br>420 <br> <br>结果如上，有两个问题 <br>1、使用内联（inline），执行a的时候用了cache，所以比b快。那为什么不使用内联（dontinline）的时候a还是比b快，不是应该ab一样了吗？ 
<br>2、使用内联时候的b（已经退化为超多态）的时间，为什么和不使用内联的a或b时间都不相同？（如果我的问题1无误，则内联b与非内联ab三者时间相同） <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 简单通俗易懂，厉害厉害！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:10.060 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.061 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:10.071 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/51/96/53ffbb95.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>啊一大狗</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-31 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这套课很好，谢谢！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fa/29/f1ede67b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Tony</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">42</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 同提建议，代码使用英文。刚学java基础时，有老师为了便于理解用中文命名。现在都来学jvm，对java很熟悉了，看到中文不仅不会觉得通俗易懂，反而特别别扭。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>原本是英文的，录音的时候觉得老要切换，就给换了。。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>C_love</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 提个小建议，能否在代码中都使用英文？毕竟使用中文作对象名不值得提倡 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/2f/32/db8e5674.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨军</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不太理解一个问题：“Java的动态类型运行期才可知”，在编译期代码写完之后应该就已经确定了吧，比如A是B的子类，“B 
b = new B(); b= new A()”这种情况下b的动态类型是A，Java编译器在编译阶段就可以确定啊，为什么说动态类型直到运行期才可知? <br>诚心求老师解惑，这个问题对我理解Java的动态绑定机制很关键-.- 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/76/e5ffbdf1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lxz</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 建议结合java代码及其对应的字节码来讲解，比如常量池，方法表在字节码中对应的位置，干讲一点印象也没有 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/31/f4/d08eeec4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>CHEN</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 没用过中文写代码，居然认为中文会编译错误T﹏T <br>老师是为了课件方便这样写，自己写作业就改下呗，又没规定要每个字照抄 
<br>[root@localhost cqq]# javac Passenger.java <br>[root@localhost cqq]# java Passenger <br>cost 
time : 1167 <br>cost time : 3156 <br>[root@localhost cqq]# java -XX:CompileCommand=''dontinline,*.exit'' 
Passenger <br>CompilerOracle: dontinline *.exit <br>cost time : 3709 <br>cost time : 7557 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 哈，我以前也认为无法编译，直到有一次我看到一个俄语的方法名。。<br><br>另外，如果你用javap -v查看常量池的话，你会发现类名方法名以及方法描述符都是用UTF8来存的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:虚方法 <br>方法重写的方法，可认为就是虚方法 <br> 
<br>2:JVM怎么执行虚方法 <br>通过方法表，一个二维表结构，标示出类的类型、虚方法的序号。当调用虚方法的时候，先确定类型，再根据类型找方法 <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/79/a2/18815f9c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>J</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> win10: <br>java -XX:CompileCommand=dontinline,*.exit 
Passenger 这样是对的 <br>java -XX:CompileCommand=‘dontinline,*.exit’ Passenger 这样是错的 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于单态内联缓存中的记录，hotspot采用了超多态。也就是如果该调用者的动态类型不是缓存中的类型的话，直接通过基于方法表来找到具体的目标方法。那么内联缓存中的类型是永久不变，一直是第一次缓存的那个调用者类型吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/10/37/6c6b5e32.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吾是锋子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师，您好。有个具体的问题想请教下，String类里面indexOf(String 
str)调用的是自己类里面indexOf(String str, int fromIndex)方法，但我自己在测试的时候却发现两个方法的速度有很明显的差异，看字节码也没有发现什么特殊。 
<br>不知道是不是我忽略了什么，希望您能抽空点拨下，感谢！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: HotSpot里有String.indexOf intrinsic，用了很多向量化指令，所以性能会快很多的。<br><br>关于intrinsic的概念，你可以理解为HotSpot识别指定方法后，将其替代为语意等价的高效实现。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/45/91/246c7698.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>方枪枪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不能明确一个问题，执行哪个方法，是不是都是在运行的时候确定的，如果是的话，coding的时候，写一个不存在的方法or传入不存在的参数，编译会报错，那这个合法性的检测，是一个什么逻辑？另外关于方法的确定，对于Java来说，是按照传入的形参确定执行哪个重写的方法，对于 
groovy 是按照实际类型确定执行哪个方法，这两个区别在JVM层面是如何实现的？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 合法性检测是根据编译器能找到的class文件来判定的。你可以在编译后，移除掉相应的class文件或者库文件，就会出现你所说的不存在的方法的情况了。<br><br>第二个问题，在各自的编译器中已经作出区分了。在Java字节码中就只是根据类名，方法名和方法描述符来定位方法的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/10/44/e7437824.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>和风暖林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 代码用汉语也挺好的呀。来这都是学jvm的，没有来学编码规范的吧…… 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，多谢支持。不过汉语编程有个问题，没办法区分大小写，因此变量名和类名容易混淆</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7b/c0/517781b8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>左岸🌸开</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么调用超类非私有实例方法会属于静态绑定呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
通过super关键字来调用父类方法，本意就是想要调用父类的特定方法，而不是根据具体类型决定目标方法。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7gP4Nibo4m4MOvbqd4yuK1Bf4ULQeSb3d37zyw5nKAHlHze89yTp4NWRLEbq72iaiaO8NKpOUnHw3g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>加久</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 任何方法调用除非被内联，否则都会有固定开销。这些开销来源于保存程序在该方法中的执行位置，以及新建、压入和... 
<br> <br>命中内联缓存后，不用开辟新的栈帧了？？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Rain</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直不太理解一个问题：“Java的动态类型运行期才可知”，在编译期代码写完之后应该就已经确定了吧，比如A是B的子类，“B 
b = new B(); b= new A()”这种情况下b的动态类型是A，Java编译器在编译阶段就可以确定啊，为什么说动态类型直到运行期才可知? <br>诚心求老师解惑，这个问题对我理解Java的动态绑定机制很关键-.- 
<br> <br> <br>@杨军，我的理解是，假设C是B的另外一个子类，你的上述两句代码有可能运行在多线程环境中。假设第二行代码运行之后切换到了另外一个线程中，且b = new C() 
<br>这个情况下，线程再切换到你的那两行代码后面的时候就不一定是A了，刘必须要在运行过程中才能确定了。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 3:缓存 <br>凡是需要提高性能的地方都需要使用，这个方法也是人类经常使用的方式，计算机中使用的也比较多，使用缓存的基本理念是，一将需要的东西提前加工好，二将加工好的东西放在获取速度更快更方便的地方 
<br> <br>4:内联缓存 <br>是JVM为了提高动态绑定或者根据动态的类类型找目标方法的一种方式，这是以空间换时间的优化思路，需要权衡利弊，视场景使用 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/37/ea588860.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>礼貌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 汉语编程？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，这个对于VM实现者来说可是feature，毕竟要存储UTF8。不过以后的代码会换到英文的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5e/ff/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王旭林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，打印耗时的System.out.println 用的太多了吧？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你是指课后作业吗？<br><br>打印语句每一亿次循环只会运行一次，相对来说并不耗时。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>Geek_8b249...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2019-05-07 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 结果： <br>inline 
<br>170 // a <br>... <br>170 <br>210 // b <br>... <br>210 <br> <br>dontinline <br>360 // a 
<br>... <br>360 <br>420 // b <br>... <br>420 <br> <br>结果如上，有两个问题 <br>1、使用内联（inline），执行a的时候用了cache，所以比b快。那为什么不使用内联（dontinline）的时候a还是比b快，不是应该ab一样了吗？ 
<br>2、使用内联时候的b（已经退化为超多态）的时间，为什么和不使用内联的a或b时间都不相同？（如果我的问题1无误，则内联b与非内联ab三者时间相同） <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 简单通俗易懂，厉害厉害！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 40, 40) 
 {executed in 2 msec}
2020-11-19 20:19:10.083 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=40 
 {executed in 2 msec}
2020-11-19 20:19:10.085 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:10.088 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.090 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:10.097 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 40, 'https://static001.geekbang.org/resource/image/d0/a9/d04d3fdd78caf19bca1787f789bbdea9.jpg', 
40) 
 {executed in 0 msec}
2020-11-19 20:19:10.103 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.105 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:10.111 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 40, 'https://static001.geekbang.org/resource/image/d0/a9/d04d3fdd78caf19bca1787f789bbdea9.jpg', 
40) 
 {executed in 0 msec}
2020-11-19 20:19:10.117 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.118 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:10.125 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:10.130 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=40 
 {executed in 1 msec}
2020-11-19 20:19:10.131 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:10.138 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 40, 40) 
 {executed in 1 msec}
2020-11-19 20:19:10.144 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='413678254023884' 
and bookchecke0_.name='net_content' 
 {executed in 0 msec}
2020-11-19 20:19:10.145 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:27.654 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='413678254023884' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:19:27.658 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:27.665 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('413678254023884', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:19:27.668 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('413678254023884', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:19:27.671 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|81            |
|--------------|

2020-11-19 20:19:27.709 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='413678254023884' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:27.710 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:28.099 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='413678254023884' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:28.101 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:28.105 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('413678254023884', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:19:28.106 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('413678254023884', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:19:28.107 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|82            |
|--------------|

2020-11-19 20:19:28.122 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='413678254023884' 
 {executed in 1 msec}
2020-11-19 20:19:28.123 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:28.127 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788368, 1) 
 {executed in 1 msec}
2020-11-19 20:19:28.128 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788368, 1) 
 {executed in 0 msec}
2020-11-19 20:19:28.129 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|41            |
|--------------|

2020-11-19 20:19:28.139 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '694b68f6-5ea3-4d81-9720-3d758724bf9f', 
41) 
 {executed in 1 msec}
2020-11-19 20:19:28.140 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '694b68f6-5ea3-4d81-9720-3d758724bf9f', 41) 
 {executed in 0 msec}
2020-11-19 20:19:28.142 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|41            |
|--------------|

2020-11-19 20:19:28.157 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=41, revision_default=1, revision_timestamp=1605788368, 
revision_uid=1 where vid=41 
 {executed in 1 msec}
2020-11-19 20:19:28.164 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.165 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:28.172 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '413678254023884', 'zh-hans', 41, 41) 
 {executed in 1 msec}
2020-11-19 20:19:28.178 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.180 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:28.186 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '413678254023884', 'zh-hans', 41, 41) 
 {executed in 0 msec}
2020-11-19 20:19:28.192 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=41 
 {executed in 1 msec}
2020-11-19 20:19:28.194 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:28.197 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=41 
 {executed in 1 msec}
2020-11-19 20:19:28.199 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:28.205 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 41, 0, 0, 32, 0, 41) 
 {executed in 0 msec}
2020-11-19 20:19:28.211 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.213 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:28.216 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.218 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:28.229 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>前不久在写代码的时候，我不小心踩到一个可变长参数的坑。你或许已经猜到了，它正是可变长参数方法的重载造成的。（注：官方文档建议避免重载可变长参数方法，见 
[1] 的最后一段。）</p> <p>我把踩坑的过程放在了文稿里，你可以点击查看。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> void 
invoke(Object obj, Object... args) { ... } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void invoke(String s, Object obj, Object... args) { ... } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> invoke(null, 1); // 调用第二个 invoke 方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> invoke(null, 1, 2); // 调用第二个 invoke 方法 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> invoke(null, new Object[]{1}); // 只有手动绕开可变长参数的语法糖， 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 才能调用第一个 invoke 方法 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>当时情况是这样子的，某个 
API 定义了两个同名的重载方法。其中，第一个接收一个 Object，以及声明为 Object…的变长参数；而第二个则接收一个 String、一个 Object，以及声明为 Object…的变长参数。</p> 
<p>这里我想调用第一个方法，传入的参数为 (null, 1)。也就是说，声明为 Object 的形式参数所对应的实际参数为 null，而变长参数则对应 1。</p> <p>通常来说，之所以不提倡可变长参数方法的重载，是因为 
Java 编译器可能无法决定应该调用哪个目标方法。</p> <p>在这种情况下，编译器会报错，并且提示这个方法调用有二义性。然而，Java 编译器直接将我的方法调用识别为调用第二个方法，这究竟是为什么呢？</p> 
<p>带着这个问题，我们来看一看 Java 虚拟机是怎么识别目标方法的。</p> <h2>重载与重写</h2> <p>在 Java 程序里，如果同一个类中出现多个名字相同，并且参数类型相同的方法，那么它无法通过编译。也就是说，在正常情况下，如果我们想要在同一个类中定义名字相同的方法，那么它们的参数类型必须不同。这些方法之间的关系，我们称之为重载。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 小知识：这个限制可以通过字节码工具绕开。也就是说，在编译完成之后，我们可以再向 
class 文件中添加方法名和参数类型相同，而返回类型不同的方法。当这种包括多个方法名相同、参数类型相同，而返回类型不同的方法的类，出现在 Java 编译器的用户类路径上时，它是怎么确定需要调用哪个方法的呢？当前版本的 
Java 编译器会直接选取第一个方法名以及参数类型匹配的方法。并且，它会根据所选取方法的返回类型来决定可不可以通过编译，以及需不需要进行值转换等。 </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java 编译器会根据所传入参数的声明类型（注意与实际类型区分）来选取重载方法。选取的过程共分为三个阶段：</p> 
<ol> <li>在不考虑对基本类型自动装拆箱（auto-boxing，auto-unboxing），以及可变长参数的情况下选取重载方法；</li> <li>如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法；</li> 
<li>如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。</li> </ol> <p>如果 Java 编译器在同一个阶段中找到了多个适配的方法，那么它会在其中选择一个最为贴切的，而决定贴切程度的一个关键就是形式参数类型的继承关系。</p> 
<p>在开头的例子中，当传入 null 时，它既可以匹配第一个方法中声明为 Object 的形式参数，也可以匹配第二个方法中声明为 String 的形式参数。由于 String 是 
Object 的子类，因此 Java 编译器会认为第二个方法更为贴切。</p> <p>除了同一个类中的方法，重载也可以作用于这个类所继承而来的方法。也就是说，如果子类定义了与父类中非私有方法同名的方法，而且这两个方法的参数类型不同，那么在子类中，这两个方法同样构成了重载。</p> 
<p>那么，如果子类定义了与父类中非私有方法同名的方法，而且这两个方法的参数类型相同，那么这两个方法之间又是什么关系呢？</p> <p>如果这两个方法都是静态的，那么子类中的方法隐藏了父类中的方法。如果这两个方法都不是静态的，且都不是私有的，那么子类的方法重写了父类中的方法。</p> 
<p>众所周知，Java 是一门面向对象的编程语言，它的一个重要特性便是多态。而方法重写，正是多态最重要的一种体现方式：它允许子类在继承父类部分功能的同时，拥有自己独特的行为。</p> 
<p>打个比方，如果你经常漫游，那么你可能知道，拨打 10086 会根据你当前所在地，连接到当地的客服。重写调用也是如此：它会根据调用者的动态类型，来选取实际的目标方法。</p> <h2>JVM 
的静态绑定和动态绑定</h2> <p>接下来，我们来看看 Java 虚拟机是怎么识别方法的。</p> <p>Java 虚拟机识别方法的关键在于类名、方法名以及方法描述符（method 
descriptor）。前面两个就不做过多的解释了。至于方法描述符，它是由方法的参数类型以及返回类型所构成。在同一个类中，如果同时出现多个名字相同且描述符也相同的方法，那么 Java 
虚拟机会在类的验证阶段报错。</p> <p>可以看到，Java 虚拟机与 Java 语言不同，它并不限制名字与参数类型相同，但返回类型不同的方法出现在同一个类中，对于调用这些方法的字节码来说，由于字节码所附带的方法描述符包含了返回类型，因此 
Java 虚拟机能够准确地识别目标方法。</p> <p>Java 虚拟机中关于方法重写的判定同样基于方法描述符。也就是说，如果子类定义了与父类中非私有、非静态方法同名的方法，那么只有当这两个方法的参数类型以及返回类型一致，Java 
虚拟机才会判定为重写。</p> <p>对于 Java 语言中重写而 Java 虚拟机中非重写的情况，编译器会通过生成桥接方法 [2] 来实现 Java 中的重写语义。</p> <p>由于对重载方法的区分在编译阶段已经完成，我们可以认为 
Java 虚拟机不存在重载这一概念。因此，在某些文章中，重载也被称为静态绑定（static binding），或者编译时多态（compile-time polymorphism）；而重写则被称为动态绑定（dynamic 
binding）。</p> <p>这个说法在 Java 虚拟机语境下并非完全正确。这是因为某个类中的重载方法可能被它的子类所重写，因此 Java 编译器会将所有对非私有实例方法的调用编译为需要动态绑定的类型。</p> 
<p>确切地说，Java 虚拟机中的静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。</p> <p>具体来说，Java 
字节码中与调用相关的指令共有五种。</p> <ol> <li>invokestatic：用于调用静态方法。</li> <li>invokespecial：用于调用私有实例方法、构造器，以及使用 
super 关键字调用父类的实例方法或构造器，和所实现接口的默认方法。</li> <li>invokevirtual：用于调用非私有实例方法。</li> <li>invokeinterface：用于调用接口方法。</li> 
<li>invokedynamic：用于调用动态方法。</li> </ol> <p>由于 invokedynamic 指令较为复杂，我将在后面的篇章中单独介绍。这里我们只讨论前四种。</p> 
<p>我在文章中贴了一段代码，展示了编译生成这四种调用指令的情况。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interface 客户 { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean isVIP(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class 商户 { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
double 折后价格 (double 原价, 客户 某客户) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return 原价 * 0.8d; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class 奸商 extends 商户 { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double 折后价格 (double 原价, 客户 某客户) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (某客户.isVIP()) { // invokeinterface 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 原价 * 价格歧视 (); // invokestatic </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return super. 折后价格 (原价, 某客户); // invokespecial </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static double 价格歧视 () { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 咱们的杀熟算法太粗暴了，应该将客户城市作为随机数生成器的种子。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new Random() // invokespecial </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> .nextDouble() // invokevirtual </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> + 0.8d; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在代码中，“商户”类定义了一个成员方法，叫做“折后价格”，它将接收一个 double 类型的参数，以及一个“客户”类型的参数。这里“客户”是一个接口，它定义了一个接口方法，叫“isVIP”。</p> 
<p>我们还定义了另一个叫做“奸商”的类，它继承了“商户”类，并且重写了“折后价格”这个方法。如果客户是 VIP，那么它会被给到一个更低的折扣。</p> <p>在这个方法中，我们首先会调用“客户”接口的”isVIP“方法。该调用会被编译为 
invokeinterface 指令。</p> <p>如果客户是 VIP，那么我们会调用奸商类的一个名叫“价格歧视”的静态方法。该调用会被编译为 invokestatic 指令。如果客户不是 
VIP，那么我们会通过 super 关键字调用父类的“折后价格”方法。该调用会被编译为 invokespecial 指令。</p> <p>在静态方法“价格歧视”中，我们会调用 Random 
类的构造器。该调用会被编译为 invokespecial 指令。然后我们会以这个新建的 Random 对象为调用者，调用 Random 类中的 nextDouble 方法。该调用会被编译为 
invokevirutal 指令。</p> <p>对于 invokestatic 以及 invokespecial 而言，Java 虚拟机能够直接识别具体的目标方法。</p> <p>而对于 
invokevirtual 以及 invokeinterface 而言，在绝大部分情况下，虚拟机需要在执行过程中，根据调用者的动态类型，来确定具体的目标方法。</p> <p>唯一的例外在于，如果虚拟机能够确定目标方法有且仅有一个，比如说目标方法被标记为 
final[3][4]，那么它可以不通过动态类型，直接确定目标方法。</p> <h2>调用指令的符号引用</h2> <p>在编译过程中，我们并不知道目标方法的具体内存地址。因此，Java 
编译器会暂时用符号引用来表示该目标方法。这一符号引用包括目标方法所在的类或接口的名字，以及目标方法的方法名和方法描述符。</p> <p>符号引用存储在 class 文件的常量池之中。根据目标方法是否为接口方法，这些引用可分为接口符号引用和非接口符号引用。我在文章中贴了一个例子，利用“javap 
-v”打印某个类的常量池，如果你感兴趣的话可以到文章中查看。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 在奸商.class 的常量池中，#16 为接口符号引用，指向接口方法 
" 客户.isVIP()"。而 #22 为非接口符号引用，指向静态方法 " 奸商. 价格歧视 ()"。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -v 奸商.class ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#16 = InterfaceMethodref #27.#29 // 客户.isVIP:()Z </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#22 = Methodref #1.#33 // 奸商. 价格歧视:()D </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上一篇中我曾提到过，在执行使用了符号引用的字节码前，Java 虚拟机需要解析这些符号引用，并替换为实际引用。</p> 
<p>对于非接口符号引用，假定该符号引用所指向的类为 C，则 Java 虚拟机会按照如下步骤进行查找。</p> <ol> <li>在 C 中查找符合名字及描述符的方法。</li> <li>如果没有找到，在 
C 的父类中继续搜索，直至 Object 类。</li> <li>如果没有找到，在 C 所直接实现或间接实现的接口中搜索，这一步搜索得到的目标方法必须是非私有、非静态的。并且，如果目标方法在间接实现的接口中，则需满足 
C 与该接口之间没有其他符合条件的目标方法。如果有多个符合条件的目标方法，则任意返回其中一个。</li> </ol> <p>从这个解析算法可以看出，静态方法也可以通过子类来调用。此外，子类的静态方法会隐藏（注意与重写区分）父类中的同名、同描述符的静态方法。</p> 
<p>对于接口符号引用，假定该符号引用所指向的接口为 I，则 Java 虚拟机会按照如下步骤进行查找。</p> <ol> <li>在 I 中查找符合名字及描述符的方法。</li> <li>如果没有找到，在 
Object 类中的公有实例方法中搜索。</li> <li>如果没有找到，则在 I 的超接口中搜索。这一步的搜索结果的要求与非接口符号引用步骤 3 的要求一致。</li> </ol> 
<p>经过上述的解析步骤之后，符号引用会被解析成实际引用。对于可以静态绑定的方法调用而言，实际引用是一个指向方法的指针。对于需要动态绑定的方法调用而言，实际引用则是一个方法表的索引。具体什么是方法表，我会在下一篇中做出解答。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 以及 Java 虚拟机是如何识别目标方法的。</p> <p>在 Java 中，方法存在重载以及重写的概念，重载指的是方法名相同而参数类型不相同的方法之间的关系，重写指的是方法名相同并且参数类型也相同的方法之间的关系。</p> 
<p>Java 虚拟机识别方法的方式略有不同，除了方法名和参数类型之外，它还会考虑返回类型。</p> <p>在 Java 虚拟机中，静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。由于 
Java 编译器已经区分了重载的方法，因此可以认为 Java 虚拟机中不存在重载。</p> <p>在 class 文件中，Java 编译器会用符号引用指代目标方法。在执行调用指令前，它所附带的符号引用需要被解析成实际引用。对于可以静态绑定的方法调用而言，实际引用为目标方法的指针。对于需要动态绑定的方法调用而言，实际引用为辅助动态绑定的信息。</p> 
<p>在文中我曾提到，Java 的重写与 Java 虚拟机中的重写并不一致，但是编译器会通过生成桥接方法来弥补。今天的实践环节，我们来看一下两个生成桥接方法的例子。你可以通过“javap 
-v”来查看 class 文件所包含的方法。</p> <ol> <li>重写方法的返回类型不一致：</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
interface Customer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
boolean isVIP(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Merchant { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Number actionPrice(double price, Customer customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class NaiveMerchant extends Merchant { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Double actionPrice(double price, Customer customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <ol> <li>范型参数类型造成的方法参数类型不一致：</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
interface Customer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
boolean isVIP(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Merchant&lt;T extends Customer&gt; { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public double actionPrice(double price, 
T customer) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class VIPOnlyMerchant extends Merchant&lt;VIP&gt; { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(double price, VIP customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/varargs.html">https://docs.oracle.com/javase/8/docs/technotes/guides/language/varargs.html</a><br> 
[2]<br> <a href="https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html">https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html</a><br> 
[3]<br> <a href="https://wiki.openjdk.java.net/display/HotSpot/VirtualCalls">https://wiki.openjdk.java.net/display/HotSpot/VirtualCalls</a><br> 
[4]<br> <a href="https://wiki.openjdk.java.net/display/HotSpot/InterfaceCalls">https://wiki.openjdk.java.net/display/HotSpot/InterfaceCalls</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 41, 41) 
 {executed in 2 msec}
2020-11-19 20:19:28.238 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.240 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:28.251 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>前不久在写代码的时候，我不小心踩到一个可变长参数的坑。你或许已经猜到了，它正是可变长参数方法的重载造成的。（注：官方文档建议避免重载可变长参数方法，见 
[1] 的最后一段。）</p> <p>我把踩坑的过程放在了文稿里，你可以点击查看。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> void 
invoke(Object obj, Object... args) { ... } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void invoke(String s, Object obj, Object... args) { ... } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> invoke(null, 1); // 调用第二个 invoke 方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> invoke(null, 1, 2); // 调用第二个 invoke 方法 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> invoke(null, new Object[]{1}); // 只有手动绕开可变长参数的语法糖， 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 才能调用第一个 invoke 方法 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>当时情况是这样子的，某个 
API 定义了两个同名的重载方法。其中，第一个接收一个 Object，以及声明为 Object…的变长参数；而第二个则接收一个 String、一个 Object，以及声明为 Object…的变长参数。</p> 
<p>这里我想调用第一个方法，传入的参数为 (null, 1)。也就是说，声明为 Object 的形式参数所对应的实际参数为 null，而变长参数则对应 1。</p> <p>通常来说，之所以不提倡可变长参数方法的重载，是因为 
Java 编译器可能无法决定应该调用哪个目标方法。</p> <p>在这种情况下，编译器会报错，并且提示这个方法调用有二义性。然而，Java 编译器直接将我的方法调用识别为调用第二个方法，这究竟是为什么呢？</p> 
<p>带着这个问题，我们来看一看 Java 虚拟机是怎么识别目标方法的。</p> <h2>重载与重写</h2> <p>在 Java 程序里，如果同一个类中出现多个名字相同，并且参数类型相同的方法，那么它无法通过编译。也就是说，在正常情况下，如果我们想要在同一个类中定义名字相同的方法，那么它们的参数类型必须不同。这些方法之间的关系，我们称之为重载。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 小知识：这个限制可以通过字节码工具绕开。也就是说，在编译完成之后，我们可以再向 
class 文件中添加方法名和参数类型相同，而返回类型不同的方法。当这种包括多个方法名相同、参数类型相同，而返回类型不同的方法的类，出现在 Java 编译器的用户类路径上时，它是怎么确定需要调用哪个方法的呢？当前版本的 
Java 编译器会直接选取第一个方法名以及参数类型匹配的方法。并且，它会根据所选取方法的返回类型来决定可不可以通过编译，以及需不需要进行值转换等。 </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>重载的方法在编译过程中即可完成识别。具体到每一个方法调用，Java 编译器会根据所传入参数的声明类型（注意与实际类型区分）来选取重载方法。选取的过程共分为三个阶段：</p> 
<ol> <li>在不考虑对基本类型自动装拆箱（auto-boxing，auto-unboxing），以及可变长参数的情况下选取重载方法；</li> <li>如果在第 1 个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法；</li> 
<li>如果在第 2 个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。</li> </ol> <p>如果 Java 编译器在同一个阶段中找到了多个适配的方法，那么它会在其中选择一个最为贴切的，而决定贴切程度的一个关键就是形式参数类型的继承关系。</p> 
<p>在开头的例子中，当传入 null 时，它既可以匹配第一个方法中声明为 Object 的形式参数，也可以匹配第二个方法中声明为 String 的形式参数。由于 String 是 
Object 的子类，因此 Java 编译器会认为第二个方法更为贴切。</p> <p>除了同一个类中的方法，重载也可以作用于这个类所继承而来的方法。也就是说，如果子类定义了与父类中非私有方法同名的方法，而且这两个方法的参数类型不同，那么在子类中，这两个方法同样构成了重载。</p> 
<p>那么，如果子类定义了与父类中非私有方法同名的方法，而且这两个方法的参数类型相同，那么这两个方法之间又是什么关系呢？</p> <p>如果这两个方法都是静态的，那么子类中的方法隐藏了父类中的方法。如果这两个方法都不是静态的，且都不是私有的，那么子类的方法重写了父类中的方法。</p> 
<p>众所周知，Java 是一门面向对象的编程语言，它的一个重要特性便是多态。而方法重写，正是多态最重要的一种体现方式：它允许子类在继承父类部分功能的同时，拥有自己独特的行为。</p> 
<p>打个比方，如果你经常漫游，那么你可能知道，拨打 10086 会根据你当前所在地，连接到当地的客服。重写调用也是如此：它会根据调用者的动态类型，来选取实际的目标方法。</p> <h2>JVM 
的静态绑定和动态绑定</h2> <p>接下来，我们来看看 Java 虚拟机是怎么识别方法的。</p> <p>Java 虚拟机识别方法的关键在于类名、方法名以及方法描述符（method 
descriptor）。前面两个就不做过多的解释了。至于方法描述符，它是由方法的参数类型以及返回类型所构成。在同一个类中，如果同时出现多个名字相同且描述符也相同的方法，那么 Java 
虚拟机会在类的验证阶段报错。</p> <p>可以看到，Java 虚拟机与 Java 语言不同，它并不限制名字与参数类型相同，但返回类型不同的方法出现在同一个类中，对于调用这些方法的字节码来说，由于字节码所附带的方法描述符包含了返回类型，因此 
Java 虚拟机能够准确地识别目标方法。</p> <p>Java 虚拟机中关于方法重写的判定同样基于方法描述符。也就是说，如果子类定义了与父类中非私有、非静态方法同名的方法，那么只有当这两个方法的参数类型以及返回类型一致，Java 
虚拟机才会判定为重写。</p> <p>对于 Java 语言中重写而 Java 虚拟机中非重写的情况，编译器会通过生成桥接方法 [2] 来实现 Java 中的重写语义。</p> <p>由于对重载方法的区分在编译阶段已经完成，我们可以认为 
Java 虚拟机不存在重载这一概念。因此，在某些文章中，重载也被称为静态绑定（static binding），或者编译时多态（compile-time polymorphism）；而重写则被称为动态绑定（dynamic 
binding）。</p> <p>这个说法在 Java 虚拟机语境下并非完全正确。这是因为某个类中的重载方法可能被它的子类所重写，因此 Java 编译器会将所有对非私有实例方法的调用编译为需要动态绑定的类型。</p> 
<p>确切地说，Java 虚拟机中的静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。</p> <p>具体来说，Java 
字节码中与调用相关的指令共有五种。</p> <ol> <li>invokestatic：用于调用静态方法。</li> <li>invokespecial：用于调用私有实例方法、构造器，以及使用 
super 关键字调用父类的实例方法或构造器，和所实现接口的默认方法。</li> <li>invokevirtual：用于调用非私有实例方法。</li> <li>invokeinterface：用于调用接口方法。</li> 
<li>invokedynamic：用于调用动态方法。</li> </ol> <p>由于 invokedynamic 指令较为复杂，我将在后面的篇章中单独介绍。这里我们只讨论前四种。</p> 
<p>我在文章中贴了一段代码，展示了编译生成这四种调用指令的情况。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interface 客户 { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean isVIP(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class 商户 { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
double 折后价格 (double 原价, 客户 某客户) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return 原价 * 0.8d; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class 奸商 extends 商户 { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double 折后价格 (double 原价, 客户 某客户) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (某客户.isVIP()) { // invokeinterface 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 原价 * 价格歧视 (); // invokestatic </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return super. 折后价格 (原价, 某客户); // invokespecial </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static double 价格歧视 () { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 咱们的杀熟算法太粗暴了，应该将客户城市作为随机数生成器的种子。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new Random() // invokespecial </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> .nextDouble() // invokevirtual </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> + 0.8d; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在代码中，“商户”类定义了一个成员方法，叫做“折后价格”，它将接收一个 double 类型的参数，以及一个“客户”类型的参数。这里“客户”是一个接口，它定义了一个接口方法，叫“isVIP”。</p> 
<p>我们还定义了另一个叫做“奸商”的类，它继承了“商户”类，并且重写了“折后价格”这个方法。如果客户是 VIP，那么它会被给到一个更低的折扣。</p> <p>在这个方法中，我们首先会调用“客户”接口的”isVIP“方法。该调用会被编译为 
invokeinterface 指令。</p> <p>如果客户是 VIP，那么我们会调用奸商类的一个名叫“价格歧视”的静态方法。该调用会被编译为 invokestatic 指令。如果客户不是 
VIP，那么我们会通过 super 关键字调用父类的“折后价格”方法。该调用会被编译为 invokespecial 指令。</p> <p>在静态方法“价格歧视”中，我们会调用 Random 
类的构造器。该调用会被编译为 invokespecial 指令。然后我们会以这个新建的 Random 对象为调用者，调用 Random 类中的 nextDouble 方法。该调用会被编译为 
invokevirutal 指令。</p> <p>对于 invokestatic 以及 invokespecial 而言，Java 虚拟机能够直接识别具体的目标方法。</p> <p>而对于 
invokevirtual 以及 invokeinterface 而言，在绝大部分情况下，虚拟机需要在执行过程中，根据调用者的动态类型，来确定具体的目标方法。</p> <p>唯一的例外在于，如果虚拟机能够确定目标方法有且仅有一个，比如说目标方法被标记为 
final[3][4]，那么它可以不通过动态类型，直接确定目标方法。</p> <h2>调用指令的符号引用</h2> <p>在编译过程中，我们并不知道目标方法的具体内存地址。因此，Java 
编译器会暂时用符号引用来表示该目标方法。这一符号引用包括目标方法所在的类或接口的名字，以及目标方法的方法名和方法描述符。</p> <p>符号引用存储在 class 文件的常量池之中。根据目标方法是否为接口方法，这些引用可分为接口符号引用和非接口符号引用。我在文章中贴了一个例子，利用“javap 
-v”打印某个类的常量池，如果你感兴趣的话可以到文章中查看。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 在奸商.class 的常量池中，#16 为接口符号引用，指向接口方法 
" 客户.isVIP()"。而 #22 为非接口符号引用，指向静态方法 " 奸商. 价格歧视 ()"。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -v 奸商.class ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#16 = InterfaceMethodref #27.#29 // 客户.isVIP:()Z </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#22 = Methodref #1.#33 // 奸商. 价格歧视:()D </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上一篇中我曾提到过，在执行使用了符号引用的字节码前，Java 虚拟机需要解析这些符号引用，并替换为实际引用。</p> 
<p>对于非接口符号引用，假定该符号引用所指向的类为 C，则 Java 虚拟机会按照如下步骤进行查找。</p> <ol> <li>在 C 中查找符合名字及描述符的方法。</li> <li>如果没有找到，在 
C 的父类中继续搜索，直至 Object 类。</li> <li>如果没有找到，在 C 所直接实现或间接实现的接口中搜索，这一步搜索得到的目标方法必须是非私有、非静态的。并且，如果目标方法在间接实现的接口中，则需满足 
C 与该接口之间没有其他符合条件的目标方法。如果有多个符合条件的目标方法，则任意返回其中一个。</li> </ol> <p>从这个解析算法可以看出，静态方法也可以通过子类来调用。此外，子类的静态方法会隐藏（注意与重写区分）父类中的同名、同描述符的静态方法。</p> 
<p>对于接口符号引用，假定该符号引用所指向的接口为 I，则 Java 虚拟机会按照如下步骤进行查找。</p> <ol> <li>在 I 中查找符合名字及描述符的方法。</li> <li>如果没有找到，在 
Object 类中的公有实例方法中搜索。</li> <li>如果没有找到，则在 I 的超接口中搜索。这一步的搜索结果的要求与非接口符号引用步骤 3 的要求一致。</li> </ol> 
<p>经过上述的解析步骤之后，符号引用会被解析成实际引用。对于可以静态绑定的方法调用而言，实际引用是一个指向方法的指针。对于需要动态绑定的方法调用而言，实际引用则是一个方法表的索引。具体什么是方法表，我会在下一篇中做出解答。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 以及 Java 虚拟机是如何识别目标方法的。</p> <p>在 Java 中，方法存在重载以及重写的概念，重载指的是方法名相同而参数类型不相同的方法之间的关系，重写指的是方法名相同并且参数类型也相同的方法之间的关系。</p> 
<p>Java 虚拟机识别方法的方式略有不同，除了方法名和参数类型之外，它还会考虑返回类型。</p> <p>在 Java 虚拟机中，静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。由于 
Java 编译器已经区分了重载的方法，因此可以认为 Java 虚拟机中不存在重载。</p> <p>在 class 文件中，Java 编译器会用符号引用指代目标方法。在执行调用指令前，它所附带的符号引用需要被解析成实际引用。对于可以静态绑定的方法调用而言，实际引用为目标方法的指针。对于需要动态绑定的方法调用而言，实际引用为辅助动态绑定的信息。</p> 
<p>在文中我曾提到，Java 的重写与 Java 虚拟机中的重写并不一致，但是编译器会通过生成桥接方法来弥补。今天的实践环节，我们来看一下两个生成桥接方法的例子。你可以通过“javap 
-v”来查看 class 文件所包含的方法。</p> <ol> <li>重写方法的返回类型不一致：</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
interface Customer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
boolean isVIP(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Merchant { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Number actionPrice(double price, Customer customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class NaiveMerchant extends Merchant { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Double actionPrice(double price, Customer customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <ol> <li>范型参数类型造成的方法参数类型不一致：</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
interface Customer { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
boolean isVIP(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Merchant&lt;T extends Customer&gt; { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public double actionPrice(double price, 
T customer) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class VIPOnlyMerchant extends Merchant&lt;VIP&gt; { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(double price, VIP customer) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/varargs.html">https://docs.oracle.com/javase/8/docs/technotes/guides/language/varargs.html</a><br> 
[2]<br> <a href="https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html">https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html</a><br> 
[3]<br> <a href="https://wiki.openjdk.java.net/display/HotSpot/VirtualCalls">https://wiki.openjdk.java.net/display/HotSpot/VirtualCalls</a><br> 
[4]<br> <a href="https://wiki.openjdk.java.net/display/HotSpot/InterfaceCalls">https://wiki.openjdk.java.net/display/HotSpot/InterfaceCalls</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 41, 41) 
 {executed in 2 msec}
2020-11-19 20:19:28.264 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=41 
 {executed in 1 msec}
2020-11-19 20:19:28.266 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:28.269 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=41 
 {executed in 1 msec}
2020-11-19 20:19:28.271 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:19:28.278 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788368, 1605788368, 1, 'zh-hans', 0, 1, 1, 
0, '04丨JVM是如何执行方法调用的？（上）', 1, 41, 41) 
 {executed in 0 msec}
2020-11-19 20:19:28.285 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=41 
 {executed in 2 msec}
2020-11-19 20:19:28.287 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:28.294 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788368, 1605788368, 1, 'zh-hans', 0, 
1, 1, 0, '04丨JVM是如何执行方法调用的？（上）', 'book', 1, 41, 41) 
 {executed in 1 msec}
2020-11-19 20:19:28.301 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=41 
 {executed in 2 msec}
2020-11-19 20:19:28.302 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:28.306 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.308 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:28.315 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/8170b0ccfaa754595d4ada02c5921284?bkt=en-c58a217c5b5bf7b238d719bff9a71eef76c439431f928524ae96a61da70116095eaa4bd41871fc90&fid=3757516097-778750-1103714262132313&time=1605788366&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bgdUn%2BH4ro6nz4bBdn114o7IrE8%3D&to=92&size=6560775&sta_dx=6560775&sta_cs=4381&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182958&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6560775&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c29a32916d6dbe55ba821fca538471dfb7f8f5c4f8fdf972ef8a368f426959fda4ce7dc24b9f42d4&sl=76480590&expires=8h&rt=pr&r=490033869&mlogid=7510922423596748340&vbdid=64799653&fin=04%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510922423596748340&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9e801dd95f2c000b8614a9d980d4acb20&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=04%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
41, 41) 
 {executed in 1 msec}
2020-11-19 20:19:28.322 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.324 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:28.331 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/8170b0ccfaa754595d4ada02c5921284?bkt=en-c58a217c5b5bf7b238d719bff9a71eef76c439431f928524ae96a61da70116095eaa4bd41871fc90&fid=3757516097-778750-1103714262132313&time=1605788366&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bgdUn%2BH4ro6nz4bBdn114o7IrE8%3D&to=92&size=6560775&sta_dx=6560775&sta_cs=4381&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182958&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6560775&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c29a32916d6dbe55ba821fca538471dfb7f8f5c4f8fdf972ef8a368f426959fda4ce7dc24b9f42d4&sl=76480590&expires=8h&rt=pr&r=490033869&mlogid=7510922423596748340&vbdid=64799653&fin=04%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510922423596748340&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9e801dd95f2c000b8614a9d980d4acb20&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=04%E4%B8%A8JVM%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%9F%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
41, 41) 
 {executed in 1 msec}
2020-11-19 20:19:28.339 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.340 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:28.343 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.345 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:28.355 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Thomas</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">17</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看明白了......这篇真好 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">112</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 写的有点晦涩难懂，看了好几遍，还是有点迷糊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1:方法重载 <br>方法名相同、方法参数类型不同（其中包括参数的个数、类型、次序，三者之中只要有一个不同就行）。以前的理解方法重载是在一个类内，今天读后感觉类间有继承关系也是存在方法重载的，需要验证一下？ 
<br> <br>2:方法重写 <br>方法名相同、方法参数类型相同、方法返回值相同，类之间有继承关系，便构成方法重写。 <br>这个概念和之前一样，不过老师强调了父类中的方法是飞私有、非静态的，这个有待验证一下？ 
<br> <br>3:JVM定位目标方法的关键是类名+方法名+方法参数类型+方法返回值类型，于是就出现了两种JVM找目标方法的方式，静态绑定、动态绑定 <br> <br>4:静态绑定 
<br>在解析时JVM便知道该调用那个目标方法 <br> <br>5:动态绑定 <br>在运行时JVM需要根据对应的类类型来具体定位应该调用那个目标方法。对于方法重写，对应的类会拥有一个方法表（一个二维数组表，给方法标上序号，重写的方法序号一致） 
<br> <br>听了几遍，也看了几遍，感觉对具体细节还是不清楚，比如： <br>1:静态绑定具体咋实现的？ <br>2:方法表在那里？啥时候创建的？咋和具体的类关联起来的呢？ <br>可能篇幅有限啊！总体老师讲的很好，有些细节没讲到，我的感觉！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/d6/c9/08a62ac7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>元气满满 ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请不要用中文定义类/变量，有强迫症 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jiaobuchon...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 参考老师最后的例子，写了博客总结了一下：https://blog.csdn.net/jiaobuchong/article/details/83722193，欢迎拍砖。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/ff/d1/dba78d4f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>蒙奇•D•2...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 没完全理解。有个问题，接口符号指向接口方法，但是接口是没有实现的，他的实现在其实现类里面，我理解最终应该指向接口的实现类 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/a7/12c90699.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Askerlve</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 任督二脉就靠这个系列打通了～🤑 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/39/38/4c962666.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小贝_No_7</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果这两个方法都是静态的，那么子类中的方法隐藏了父类中的方法。 
<br> <br>这句没太明白，这个(隐藏)是否有更深一层的意义？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/0d/5d/e50cf9c7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Kenneth</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，课后的例子编译不通过，提示有重复的类Merchant，另外，提示找不到类VIP。可以指导一下，课后的练习题的具体操作教程吗？非常感谢🙏！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 好顶赞👍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 需要看三遍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/10/58/c5248989.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 没完全理解，上来开头没有好的引入。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>永烁星光</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 唯一的例外在于，如果虚拟机能够确定目标方法有且仅有一个，比如说目标方法被标记为 final[3][4] 
<br>请问这里的final[3][4] 是什么意思 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 由于对重载方法的区分在编译阶段已经完成，我们可以认为 
Java 虚拟机不存在重载这一概念。 <br> <br>为什么这么说？编译阶段和虚拟机有什么联系？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/4a/6f/abb7bfe3.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Sunsun</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 符号引用转实际引用时，对于非接口符号引用的第三条，在该类及父类中没有找到目标方法，便会在其直接和间接实现的接口中查找。如果存在多个符合条件的方法，并不会随机选择一个，而是优先选择拥有最具体实现的默认方法的接口，即如果 
B 继承了 A，那么 B 就比 A 更加具体。代码如下： <br>&nbsp;interface A { <br>&nbsp;&nbsp;&nbsp;&nbsp;default void 
hello() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Hello form 
A"); <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>interface B extends A { <br>&nbsp;&nbsp;&nbsp;&nbsp;default 
void hello() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Hello 
from B"); <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>public class C implements A,B { <br>&nbsp;&nbsp;&nbsp;&nbsp;public 
static void main(String[] args) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new C().hello(); 
//输出 Hello from B <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br> <br>在 java 里如果无法判断谁更具体，则需要在 C 里面显示的覆盖 
hello（）方法。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Merchant类中actionPrice方法返回值类型为Number <br>NaiveMerchant类中actionPrice方法返回值类型为Double 
<br> <br>NaiveMerchant类生成的字节码中有两个参数类型相同返回值类型不同的actionPrice方法 <br>&nbsp;Method actionPrice:(DLCustomer;)Ljava/lang/Double; 
<br>&nbsp;Method actionPrice:(DLCustomer;)Ljava/lang/Number; // 桥接到返回值为double的方法 flags: ACC_PUBLIC, 
ACC_BRIDGE, ACC_SYNTHETIC <br> <br>&nbsp;方法返回值不同为何也要产生桥接方法呢？ 为了保证重写语义？ <br> <br>不知为何javac在编译 
<br> <br>NaiveMerchant naiveMerchant = new NaiveMerchant(); <br>Number number = naiveMerchant.actionPrice(1d, 
null) // 特意要求Number类型的返回值(方法描述符) <br> <br>时，总invokevirtual到Method NaiveMerchant.actionPrice:(DLCustomer;)Ljava/lang/Double，这又是为什么呢？ 
<br> <br>附jdk版本 <br>java version "1.8.0_172" <br>Java(TM) SE Runtime Environment (build 1.8.0_172-b11) 
<br>GraalVM 1.0.0-rc5 (build 25.71-b01-internal-jvmci-0.46, mixed mode) <br> <br> <br> </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1 对的，为了保证重写语义。<br>2 生成的桥接方法还有一个acc_synthetic标记，代表对程序不可见。因此javac不能直接选取那个方法。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/76/e5ffbdf1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lxz</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 接口的符号引用这部分没看懂，字节码确实是能看到invokeinterface指向了接口的方法，但是实际执行的时候，是怎么做的呢，应该执行具体实现类的字节码啊。 
<br>另外，一个小问题，方法字节码code段内，有些类似行号的数字，在每行开头，后面跟着一个冒号，是什么意思，是行号吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>L.B.Q.Y</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 开篇例子中的invoke(null,1)之所以选择第二个invoke()，按照重载方法选择三步骤的布骤二，不考虑变长参数但是考虑基本类型的拆装箱，正好匹配第二个invoke. 
<br>而invoke(null,1,2)按照重载方法选择三步骤的步骤三，两个invoke方法都匹配，考虑类型的继承关系，第二个invoke更恰当。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/6c/28/a1f9f0ad.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>陈树义</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文章开头的例子，我在JDK8环境下写了个例子测试，发现貌似和文中所说的不一致。 不知道是不是因为JDK版本问题，还是我例子有问题？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 我在java8和java10里测得的都一样</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/40/6a/ab1cf396.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小兵</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> invokespecial：用于调用私有实例方法、构造器，以...和所实现接口的默认方法。 
<br>这里所实现接口的默认方法具体是指什么？ <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 接口的default方法，可能这样写比较清楚些</p> </div> 
</div></li>', 0, 'full_html', 'zh-hans', 41, 41) 
 {executed in 2 msec}
2020-11-19 20:19:28.366 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=41 
 {executed in 0 msec}
2020-11-19 20:19:28.367 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:28.377 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Thomas</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">17</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看明白了......这篇真好 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">112</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 写的有点晦涩难懂，看了好几遍，还是有点迷糊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1:方法重载 <br>方法名相同、方法参数类型不同（其中包括参数的个数、类型、次序，三者之中只要有一个不同就行）。以前的理解方法重载是在一个类内，今天读后感觉类间有继承关系也是存在方法重载的，需要验证一下？ 
<br> <br>2:方法重写 <br>方法名相同、方法参数类型相同、方法返回值相同，类之间有继承关系，便构成方法重写。 <br>这个概念和之前一样，不过老师强调了父类中的方法是飞私有、非静态的，这个有待验证一下？ 
<br> <br>3:JVM定位目标方法的关键是类名+方法名+方法参数类型+方法返回值类型，于是就出现了两种JVM找目标方法的方式，静态绑定、动态绑定 <br> <br>4:静态绑定 
<br>在解析时JVM便知道该调用那个目标方法 <br> <br>5:动态绑定 <br>在运行时JVM需要根据对应的类类型来具体定位应该调用那个目标方法。对于方法重写，对应的类会拥有一个方法表（一个二维数组表，给方法标上序号，重写的方法序号一致） 
<br> <br>听了几遍，也看了几遍，感觉对具体细节还是不清楚，比如： <br>1:静态绑定具体咋实现的？ <br>2:方法表在那里？啥时候创建的？咋和具体的类关联起来的呢？ <br>可能篇幅有限啊！总体老师讲的很好，有些细节没讲到，我的感觉！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/d6/c9/08a62ac7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>元气满满 ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请不要用中文定义类/变量，有强迫症 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jiaobuchon...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 参考老师最后的例子，写了博客总结了一下：https://blog.csdn.net/jiaobuchong/article/details/83722193，欢迎拍砖。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/ff/d1/dba78d4f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>蒙奇•D•2...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-15 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 没完全理解。有个问题，接口符号指向接口方法，但是接口是没有实现的，他的实现在其实现类里面，我理解最终应该指向接口的实现类 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/a7/12c90699.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Askerlve</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 任督二脉就靠这个系列打通了～🤑 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/39/38/4c962666.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小贝_No_7</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果这两个方法都是静态的，那么子类中的方法隐藏了父类中的方法。 
<br> <br>这句没太明白，这个(隐藏)是否有更深一层的意义？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/0d/5d/e50cf9c7.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Kenneth</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，课后的例子编译不通过，提示有重复的类Merchant，另外，提示找不到类VIP。可以指导一下，课后的练习题的具体操作教程吗？非常感谢🙏！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 好顶赞👍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 需要看三遍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/10/58/c5248989.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 没完全理解，上来开头没有好的引入。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>永烁星光</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 唯一的例外在于，如果虚拟机能够确定目标方法有且仅有一个，比如说目标方法被标记为 final[3][4] 
<br>请问这里的final[3][4] 是什么意思 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Nevermore</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 由于对重载方法的区分在编译阶段已经完成，我们可以认为 
Java 虚拟机不存在重载这一概念。 <br> <br>为什么这么说？编译阶段和虚拟机有什么联系？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/4a/6f/abb7bfe3.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Sunsun</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 符号引用转实际引用时，对于非接口符号引用的第三条，在该类及父类中没有找到目标方法，便会在其直接和间接实现的接口中查找。如果存在多个符合条件的方法，并不会随机选择一个，而是优先选择拥有最具体实现的默认方法的接口，即如果 
B 继承了 A，那么 B 就比 A 更加具体。代码如下： <br>&nbsp;interface A { <br>&nbsp;&nbsp;&nbsp;&nbsp;default void 
hello() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Hello form 
A"); <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>interface B extends A { <br>&nbsp;&nbsp;&nbsp;&nbsp;default 
void hello() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Hello 
from B"); <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>public class C implements A,B { <br>&nbsp;&nbsp;&nbsp;&nbsp;public 
static void main(String[] args) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new C().hello(); 
//输出 Hello from B <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br> <br>在 java 里如果无法判断谁更具体，则需要在 C 里面显示的覆盖 
hello（）方法。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Merchant类中actionPrice方法返回值类型为Number <br>NaiveMerchant类中actionPrice方法返回值类型为Double 
<br> <br>NaiveMerchant类生成的字节码中有两个参数类型相同返回值类型不同的actionPrice方法 <br>&nbsp;Method actionPrice:(DLCustomer;)Ljava/lang/Double; 
<br>&nbsp;Method actionPrice:(DLCustomer;)Ljava/lang/Number; // 桥接到返回值为double的方法 flags: ACC_PUBLIC, 
ACC_BRIDGE, ACC_SYNTHETIC <br> <br>&nbsp;方法返回值不同为何也要产生桥接方法呢？ 为了保证重写语义？ <br> <br>不知为何javac在编译 
<br> <br>NaiveMerchant naiveMerchant = new NaiveMerchant(); <br>Number number = naiveMerchant.actionPrice(1d, 
null) // 特意要求Number类型的返回值(方法描述符) <br> <br>时，总invokevirtual到Method NaiveMerchant.actionPrice:(DLCustomer;)Ljava/lang/Double，这又是为什么呢？ 
<br> <br>附jdk版本 <br>java version "1.8.0_172" <br>Java(TM) SE Runtime Environment (build 1.8.0_172-b11) 
<br>GraalVM 1.0.0-rc5 (build 25.71-b01-internal-jvmci-0.46, mixed mode) <br> <br> <br> </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1 对的，为了保证重写语义。<br>2 生成的桥接方法还有一个acc_synthetic标记，代表对程序不可见。因此javac不能直接选取那个方法。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/76/e5ffbdf1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lxz</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 接口的符号引用这部分没看懂，字节码确实是能看到invokeinterface指向了接口的方法，但是实际执行的时候，是怎么做的呢，应该执行具体实现类的字节码啊。 
<br>另外，一个小问题，方法字节码code段内，有些类似行号的数字，在每行开头，后面跟着一个冒号，是什么意思，是行号吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>L.B.Q.Y</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 开篇例子中的invoke(null,1)之所以选择第二个invoke()，按照重载方法选择三步骤的布骤二，不考虑变长参数但是考虑基本类型的拆装箱，正好匹配第二个invoke. 
<br>而invoke(null,1,2)按照重载方法选择三步骤的步骤三，两个invoke方法都匹配，考虑类型的继承关系，第二个invoke更恰当。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/6c/28/a1f9f0ad.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>陈树义</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文章开头的例子，我在JDK8环境下写了个例子测试，发现貌似和文中所说的不一致。 不知道是不是因为JDK版本问题，还是我例子有问题？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 我在java8和java10里测得的都一样</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/40/6a/ab1cf396.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小兵</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> invokespecial：用于调用私有实例方法、构造器，以...和所实现接口的默认方法。 
<br>这里所实现接口的默认方法具体是指什么？ <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 接口的default方法，可能这样写比较清楚些</p> </div> 
</div></li>', 0, 'full_html', 'zh-hans', 41, 41) 
 {executed in 2 msec}
2020-11-19 20:19:28.388 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.389 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:28.393 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.394 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:28.401 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 41, 'https://static001.geekbang.org/resource/image/f7/00/f7343473fc0c358ded5b037189aa8d00.jpg', 
41) 
 {executed in 1 msec}
2020-11-19 20:19:28.407 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.409 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:28.416 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 41, 'https://static001.geekbang.org/resource/image/f7/00/f7343473fc0c358ded5b037189aa8d00.jpg', 
41) 
 {executed in 1 msec}
2020-11-19 20:19:28.422 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.424 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:28.430 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 41, 41) 
 {executed in 0 msec}
2020-11-19 20:19:28.436 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=41 
 {executed in 1 msec}
2020-11-19 20:19:28.438 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:28.444 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 41, 41) 
 {executed in 1 msec}
2020-11-19 20:19:28.449 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='714882467298391' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:19:28.451 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:51.853 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='714882467298391' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:19:51.855 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:51.858 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('714882467298391', 1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:19:51.860 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('714882467298391', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:19:51.862 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|83            |
|--------------|

2020-11-19 20:19:51.877 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='714882467298391' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:51.879 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:52.318 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='714882467298391' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:19:52.320 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:19:52.324 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('714882467298391', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:19:52.325 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('714882467298391', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:19:52.327 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|84            |
|--------------|

2020-11-19 20:19:52.345 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='714882467298391' 
 {executed in 1 msec}
2020-11-19 20:19:52.346 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:52.349 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788392, 1) 
 {executed in 0 msec}
2020-11-19 20:19:52.351 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788392, 1) 
 {executed in 0 msec}
2020-11-19 20:19:52.352 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|42            |
|--------------|

2020-11-19 20:19:52.362 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'a1a67c67-8c47-49fc-b712-f2efdcbac64d', 
42) 
 {executed in 1 msec}
2020-11-19 20:19:52.363 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'a1a67c67-8c47-49fc-b712-f2efdcbac64d', 42) 
 {executed in 0 msec}
2020-11-19 20:19:52.365 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|42            |
|--------------|

2020-11-19 20:19:52.380 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=42, revision_default=1, revision_timestamp=1605788392, 
revision_uid=1 where vid=42 
 {executed in 1 msec}
2020-11-19 20:19:52.385 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=42 
 {executed in 0 msec}
2020-11-19 20:19:52.387 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:52.394 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '714882467298391', 'zh-hans', 42, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.400 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.402 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:19:52.408 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '714882467298391', 'zh-hans', 42, 42) 
 {executed in 0 msec}
2020-11-19 20:19:52.414 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=42 
 {executed in 1 msec}
2020-11-19 20:19:52.416 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:52.419 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=42 
 {executed in 0 msec}
2020-11-19 20:19:52.421 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:19:52.428 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 42, 0, 0, 32, 0, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.434 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.436 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:52.439 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.441 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:52.450 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>听我的意大利同事说，他们那边有个习俗，就是父亲要帮儿子盖栋房子。</p> <p>这事要放在以前还挺简单，亲朋好友搭把手，盖个小砖房就可以住人了。现在呢，整个过程要耗费好久的时间。首先你要请建筑师出个方案，然后去市政部门报备、验证，通过后才可以开始盖房子。盖好房子还要装修，之后才能住人。</p> 
<p>盖房子这个事，和 Java 虚拟机中的类加载还是挺像的。从 class 文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。其中，链接过程中同样需要验证；而内存中的类没有经过初始化，同样不能使用。那么，是否所有的 
Java 类都需要经过这几步呢？</p> <p>我们知道 Java 语言的类型可以分为两大类：基本类型（primitive types）和引用类型（reference types）。在上一篇中，我已经详细介绍过了 
Java 的基本类型，它们是由 Java 虚拟机预先定义好的。</p> <p>至于另一大类引用类型，Java 将其细分为四种：类、接口、数组类和泛型参数。由于泛型参数会在编译过程中被擦除（我会在专栏的第二部分详细介绍），因此 
Java 虚拟机实际上只有前三种。在类、接口和数组类中，数组类是由 Java 虚拟机直接生成的，其他两种则有对应的字节流。</p> <p>说到字节流，最常见的形式要属由 Java 编译器生成的 
class 文件。除此之外，我们也可以在程序内部直接生成，或者从网络中获取（例如网页中内嵌的小程序 Java applet）字节流。这些不同形式的字节流，都会被加载到 Java 虚拟机中，成为类或接口。为了叙述方便，下面我就用“类”来统称它们。</p><!-- 
[[[read_end]]] --> <p>无论是直接生成的数组类，还是加载的类，Java 虚拟机都需要对其进行链接和初始化。接下来，我会详细给你介绍一下每个步骤具体都在干些什么。</p> 
<h2>加载</h2> <p>加载，是指查找字节流，并且据此创建类的过程。前面提到，对于数组类来说，它并没有对应的字节流，而是由 Java 虚拟机直接生成的。对于其他的类来说，Java 
虚拟机则需要借助类加载器来完成查找字节流的过程。</p> <p>以盖房子为例，村里的 Tony 要盖个房子，那么按照流程他得先找个建筑师，跟他说想要设计一个房型，比如说“一房、一厅、四卫”。你或许已经听出来了，这里的房型相当于类，而建筑师，就相当于类加载器。</p> 
<p>村里有许多建筑师，他们等级森严，但有着共同的祖师爷，叫启动类加载器（bootstrap class loader）。启动类加载器是由 C++ 实现的，没有对应的 Java 对象，因此在 
Java 中只能用 null 来指代。换句话说，祖师爷不喜欢像 Tony 这样的小角色来打扰他，所以谁也没有祖师爷的联系方式。</p> <p>除了启动类加载器之外，其他的类加载器都是 
java.lang.ClassLoader 的子类，因此有对应的 Java 对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至 Java 虚拟机中，方能执行类加载。</p> 
<p>村里的建筑师有一个潜规则，就是接到单子自己不能着手干，得先给师傅过过目。师傅不接手的情况下，才能自己来。在 Java 虚拟机中，这个潜规则有个特别的名字，叫双亲委派模型。每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。</p> 
<p>在 Java 9 之前，启动类加载器负责加载最为基础、最为重要的类，比如存放在 JRE 的 lib 目录下 jar 包中的类（以及由虚拟机参数 -Xbootclasspath 
指定的类）。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器（extension class loader）和应用类加载器（application class loader），均由 
Java 核心类库提供。</p> <p>扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在 JRE 的 lib/ext 目录下 jar 包中的类（以及由系统变量 
java.ext.dirs 指定的类）。</p> <p>应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数 -cp/-classpath、系统变量 
java.class.path 或环境变量 CLASSPATH 所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。</p> <p>Java 9 引入了模块系统，并且略微更改了上述的类加载器<a 
href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E">1</a>。扩展类加载器被改名为平台类加载器（platform 
class loader）。Java SE 中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载。</p> <p>除了由 Java 
核心类库提供的类加载器外，我们还可以加入自定义的类加载器，来实现特殊的加载方式。举例来说，我们可以对 class 文件进行加密，加载时再利用自定义的类加载器对其解密。</p> <p>除了加载功能之外，类加载器还提供了命名空间的作用。这个很好理解，打个比方，咱们这个村不讲究版权，如果你剽窃了另一个建筑师的设计作品，那么只要你标上自己的名字，这两个房型就是不同的。</p> 
<p>在 Java 虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。</p> 
<h2>链接</h2> <p>链接，是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p> <p>验证阶段的目的，在于确保被加载类能够满足 
Java 虚拟机的约束条件。这就好比 Tony 需要将设计好的房型提交给市政部门审核。只有当审核通过，才能继续下面的建造工作。</p> <p>通常而言，Java 编译器生成的类文件必然满足 
Java 虚拟机的约束条件。因此，这部分我留到讲解字节码注入时再详细介绍。</p> <p>准备阶段的目的，则是为被加载类的静态字段分配内存。Java 代码中对静态字段的具体初始化，则会在稍后的初始化阶段中进行。过了这个阶段，咱们算是盖好了毛坯房。虽然结构已经完整，但是在没有装修之前是不能住人的。</p> 
<p>除了分配内存外，部分 Java 虚拟机还会在此阶段构造其他跟类层次相关的数据结构，比如说用来实现虚方法的动态绑定的方法表。</p> <p>在 class 文件被加载至 Java 
虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java 编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。</p> 
<p>举例来说，对于一个方法调用，编译器会生成一个包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型的符号引用，来指代所要调用的方法。</p> <p>解析阶段的目的，正是将这些符号引用解析成为实际引用。如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载（但未必触发这个类的链接以及初始化。）</p> 
<p>如果将这段话放在盖房子的语境下，那么符号引用就好比“Tony 的房子”这种说法，不管它存在不存在，我们都可以用这种说法来指代 Tony 的房子。实际引用则好比实际的通讯地址，如果我们想要与 
Tony 通信，则需要启动盖房子的过程。</p> <p>Java 虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析。</p> 
<h2>初始化</h2> <p>在 Java 代码中，如果要初始化一个静态字段，我们可以在声明时直接赋值，也可以在静态代码块中对其赋值。</p> <p>如果直接赋值的静态字段被 final 
所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue），其初始化直接由 Java 虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 
Java 编译器置于同一方法中，并把它命名为 &lt; clinit &gt;。</p> <p>类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行 &lt; clinit 
&gt; 方法的过程。Java 虚拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。</p> <p>只有当初始化完成之后，类才正式成为可执行的状态。这放在我们盖房子的例子中就是，只有当房子装修过后，Tony 
才能真正地住进去。</p> <p>那么，类的初始化何时会被触发呢？JVM 规范枚举了下述多种触发情况：</p> <ol> <li>当虚拟机启动时，初始化用户指定的主类；</li> <li>当遇到用以新建目标类实例的 
new 指令时，初始化 new 指令的目标类；</li> <li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li> <li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li> 
<li>子类的初始化会触发父类的初始化；</li> <li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li> <li>使用反射 
API 对某个类进行反射调用时，初始化这个类；</li> <li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li> </ol> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Singleton { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private Singleton() {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static class LazyHolder { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static final Singleton INSTANCE = new Singleton(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static Singleton getInstance() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return LazyHolder.INSTANCE; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文章中贴了一段代码，这段代码是在著名的单例延迟初始化例子中<a href="https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom">2</a>，只有当调用 
Singleton.getInstance 时，程序才会访问 LazyHolder.INSTANCE，才会触发对 LazyHolder 的初始化（对应第 4 种情况），继而新建一个 
Singleton 的实例。</p> <p>由于类初始化是线程安全的，并且仅被执行一次，因此程序可以确保多线程环境下有且仅有一个 Singleton 实例。</p> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机将字节流转化为 Java 类的过程。这个过程可分为加载、链接以及初始化三大步骤。</p> <p>加载是指查找字节流，并且据此创建类的过程。加载需要借助类加载器，在 
Java 虚拟机中，类加载器使用了双亲委派模型，即接收到加载请求时，会先将请求转发给父类加载器。</p> <p>链接，是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。链接还分验证、准备和解析三个阶段。其中，解析阶段为非必须的。</p> 
<p>初始化，则是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。类的初始化仅会被执行一次，这个特性被用来实现单例的延迟初始化。</p> <p>今天的实践环节，你可以来验证一下本篇中的理论知识。</p> 
<p>通过 JVM 参数 -verbose:class 来打印类加载的先后顺序，并且在 LazyHolder 的初始化方法中打印特定字样。在命令行中运行下述指令（不包含提示符 $）：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class Singleton { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private Singleton() {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static class LazyHolder { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> static final Singleton INSTANCE = new Singleton(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("LazyHolder.&lt;clinit&gt;"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static Object getInstance(boolean flag) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (flag) return new LazyHolder[2]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return LazyHolder.INSTANCE; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> getInstance(true); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("----"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> getInstance(false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
}'' &gt; Singleton.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ javac Singleton.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -verbose:class Singleton </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>问题 1：新建数组（第 11 行）会导致 LazyHolder 的加载吗？会导致它的初始化吗？</p> 
<p>在命令行中运行下述指令（不包含提示符 $）：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main 
Singleton\$LazyHolder.class &gt; Singleton\$LazyHolder.jasm.1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ awk ''NR==1,/stack 1/{sub(/stack 1/, "stack 0")} 1'' Singleton\$LazyHolder.jasm.1 
&gt; Singleton\$LazyHolder.jasm </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Singleton\$LazyHolder.jasm 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -verbose:class Singleton </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>问题 2：新建数组会导致 LazyHolder 的链接吗？</p> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 42, 42) 
 {executed in 2 msec}
2020-11-19 20:19:52.460 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.462 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:19:52.471 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>听我的意大利同事说，他们那边有个习俗，就是父亲要帮儿子盖栋房子。</p> <p>这事要放在以前还挺简单，亲朋好友搭把手，盖个小砖房就可以住人了。现在呢，整个过程要耗费好久的时间。首先你要请建筑师出个方案，然后去市政部门报备、验证，通过后才可以开始盖房子。盖好房子还要装修，之后才能住人。</p> 
<p>盖房子这个事，和 Java 虚拟机中的类加载还是挺像的。从 class 文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。其中，链接过程中同样需要验证；而内存中的类没有经过初始化，同样不能使用。那么，是否所有的 
Java 类都需要经过这几步呢？</p> <p>我们知道 Java 语言的类型可以分为两大类：基本类型（primitive types）和引用类型（reference types）。在上一篇中，我已经详细介绍过了 
Java 的基本类型，它们是由 Java 虚拟机预先定义好的。</p> <p>至于另一大类引用类型，Java 将其细分为四种：类、接口、数组类和泛型参数。由于泛型参数会在编译过程中被擦除（我会在专栏的第二部分详细介绍），因此 
Java 虚拟机实际上只有前三种。在类、接口和数组类中，数组类是由 Java 虚拟机直接生成的，其他两种则有对应的字节流。</p> <p>说到字节流，最常见的形式要属由 Java 编译器生成的 
class 文件。除此之外，我们也可以在程序内部直接生成，或者从网络中获取（例如网页中内嵌的小程序 Java applet）字节流。这些不同形式的字节流，都会被加载到 Java 虚拟机中，成为类或接口。为了叙述方便，下面我就用“类”来统称它们。</p><!-- 
[[[read_end]]] --> <p>无论是直接生成的数组类，还是加载的类，Java 虚拟机都需要对其进行链接和初始化。接下来，我会详细给你介绍一下每个步骤具体都在干些什么。</p> 
<h2>加载</h2> <p>加载，是指查找字节流，并且据此创建类的过程。前面提到，对于数组类来说，它并没有对应的字节流，而是由 Java 虚拟机直接生成的。对于其他的类来说，Java 
虚拟机则需要借助类加载器来完成查找字节流的过程。</p> <p>以盖房子为例，村里的 Tony 要盖个房子，那么按照流程他得先找个建筑师，跟他说想要设计一个房型，比如说“一房、一厅、四卫”。你或许已经听出来了，这里的房型相当于类，而建筑师，就相当于类加载器。</p> 
<p>村里有许多建筑师，他们等级森严，但有着共同的祖师爷，叫启动类加载器（bootstrap class loader）。启动类加载器是由 C++ 实现的，没有对应的 Java 对象，因此在 
Java 中只能用 null 来指代。换句话说，祖师爷不喜欢像 Tony 这样的小角色来打扰他，所以谁也没有祖师爷的联系方式。</p> <p>除了启动类加载器之外，其他的类加载器都是 
java.lang.ClassLoader 的子类，因此有对应的 Java 对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至 Java 虚拟机中，方能执行类加载。</p> 
<p>村里的建筑师有一个潜规则，就是接到单子自己不能着手干，得先给师傅过过目。师傅不接手的情况下，才能自己来。在 Java 虚拟机中，这个潜规则有个特别的名字，叫双亲委派模型。每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。</p> 
<p>在 Java 9 之前，启动类加载器负责加载最为基础、最为重要的类，比如存放在 JRE 的 lib 目录下 jar 包中的类（以及由虚拟机参数 -Xbootclasspath 
指定的类）。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器（extension class loader）和应用类加载器（application class loader），均由 
Java 核心类库提供。</p> <p>扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在 JRE 的 lib/ext 目录下 jar 包中的类（以及由系统变量 
java.ext.dirs 指定的类）。</p> <p>应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数 -cp/-classpath、系统变量 
java.class.path 或环境变量 CLASSPATH 所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。</p> <p>Java 9 引入了模块系统，并且略微更改了上述的类加载器<a 
href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E">1</a>。扩展类加载器被改名为平台类加载器（platform 
class loader）。Java SE 中除了少数几个关键模块，比如说 java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载。</p> <p>除了由 Java 
核心类库提供的类加载器外，我们还可以加入自定义的类加载器，来实现特殊的加载方式。举例来说，我们可以对 class 文件进行加密，加载时再利用自定义的类加载器对其解密。</p> <p>除了加载功能之外，类加载器还提供了命名空间的作用。这个很好理解，打个比方，咱们这个村不讲究版权，如果你剽窃了另一个建筑师的设计作品，那么只要你标上自己的名字，这两个房型就是不同的。</p> 
<p>在 Java 虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。</p> 
<h2>链接</h2> <p>链接，是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p> <p>验证阶段的目的，在于确保被加载类能够满足 
Java 虚拟机的约束条件。这就好比 Tony 需要将设计好的房型提交给市政部门审核。只有当审核通过，才能继续下面的建造工作。</p> <p>通常而言，Java 编译器生成的类文件必然满足 
Java 虚拟机的约束条件。因此，这部分我留到讲解字节码注入时再详细介绍。</p> <p>准备阶段的目的，则是为被加载类的静态字段分配内存。Java 代码中对静态字段的具体初始化，则会在稍后的初始化阶段中进行。过了这个阶段，咱们算是盖好了毛坯房。虽然结构已经完整，但是在没有装修之前是不能住人的。</p> 
<p>除了分配内存外，部分 Java 虚拟机还会在此阶段构造其他跟类层次相关的数据结构，比如说用来实现虚方法的动态绑定的方法表。</p> <p>在 class 文件被加载至 Java 
虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java 编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。</p> 
<p>举例来说，对于一个方法调用，编译器会生成一个包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型的符号引用，来指代所要调用的方法。</p> <p>解析阶段的目的，正是将这些符号引用解析成为实际引用。如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载（但未必触发这个类的链接以及初始化。）</p> 
<p>如果将这段话放在盖房子的语境下，那么符号引用就好比“Tony 的房子”这种说法，不管它存在不存在，我们都可以用这种说法来指代 Tony 的房子。实际引用则好比实际的通讯地址，如果我们想要与 
Tony 通信，则需要启动盖房子的过程。</p> <p>Java 虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析。</p> 
<h2>初始化</h2> <p>在 Java 代码中，如果要初始化一个静态字段，我们可以在声明时直接赋值，也可以在静态代码块中对其赋值。</p> <p>如果直接赋值的静态字段被 final 
所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue），其初始化直接由 Java 虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 
Java 编译器置于同一方法中，并把它命名为 &lt; clinit &gt;。</p> <p>类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行 &lt; clinit 
&gt; 方法的过程。Java 虚拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。</p> <p>只有当初始化完成之后，类才正式成为可执行的状态。这放在我们盖房子的例子中就是，只有当房子装修过后，Tony 
才能真正地住进去。</p> <p>那么，类的初始化何时会被触发呢？JVM 规范枚举了下述多种触发情况：</p> <ol> <li>当虚拟机启动时，初始化用户指定的主类；</li> <li>当遇到用以新建目标类实例的 
new 指令时，初始化 new 指令的目标类；</li> <li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li> <li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li> 
<li>子类的初始化会触发父类的初始化；</li> <li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li> <li>使用反射 
API 对某个类进行反射调用时，初始化这个类；</li> <li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li> </ol> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Singleton { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private Singleton() {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static class LazyHolder { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static final Singleton INSTANCE = new Singleton(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static Singleton getInstance() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return LazyHolder.INSTANCE; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文章中贴了一段代码，这段代码是在著名的单例延迟初始化例子中<a href="https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom">2</a>，只有当调用 
Singleton.getInstance 时，程序才会访问 LazyHolder.INSTANCE，才会触发对 LazyHolder 的初始化（对应第 4 种情况），继而新建一个 
Singleton 的实例。</p> <p>由于类初始化是线程安全的，并且仅被执行一次，因此程序可以确保多线程环境下有且仅有一个 Singleton 实例。</p> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机将字节流转化为 Java 类的过程。这个过程可分为加载、链接以及初始化三大步骤。</p> <p>加载是指查找字节流，并且据此创建类的过程。加载需要借助类加载器，在 
Java 虚拟机中，类加载器使用了双亲委派模型，即接收到加载请求时，会先将请求转发给父类加载器。</p> <p>链接，是指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。链接还分验证、准备和解析三个阶段。其中，解析阶段为非必须的。</p> 
<p>初始化，则是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。类的初始化仅会被执行一次，这个特性被用来实现单例的延迟初始化。</p> <p>今天的实践环节，你可以来验证一下本篇中的理论知识。</p> 
<p>通过 JVM 参数 -verbose:class 来打印类加载的先后顺序，并且在 LazyHolder 的初始化方法中打印特定字样。在命令行中运行下述指令（不包含提示符 $）：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class Singleton { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private Singleton() {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static class LazyHolder { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> static final Singleton INSTANCE = new Singleton(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("LazyHolder.&lt;clinit&gt;"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static Object getInstance(boolean flag) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (flag) return new LazyHolder[2]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return LazyHolder.INSTANCE; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> getInstance(true); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> System.out.println("----"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> getInstance(false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
}'' &gt; Singleton.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ javac Singleton.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -verbose:class Singleton </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>问题 1：新建数组（第 11 行）会导致 LazyHolder 的加载吗？会导致它的初始化吗？</p> 
<p>在命令行中运行下述指令（不包含提示符 $）：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main 
Singleton\$LazyHolder.class &gt; Singleton\$LazyHolder.jasm.1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ awk ''NR==1,/stack 1/{sub(/stack 1/, "stack 0")} 1'' Singleton\$LazyHolder.jasm.1 
&gt; Singleton\$LazyHolder.jasm </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Singleton\$LazyHolder.jasm 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -verbose:class Singleton </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>问题 2：新建数组会导致 LazyHolder 的链接吗？</p> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 42, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.479 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=42 
 {executed in 1 msec}
2020-11-19 20:19:52.481 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:52.484 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=42 
 {executed in 0 msec}
2020-11-19 20:19:52.486 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:19:52.493 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788392, 1605788392, 1, 'zh-hans', 0, 1, 1, 
0, '03丨Java虚拟机是如何加载Java类的？', 1, 42, 42) 
 {executed in 0 msec}
2020-11-19 20:19:52.500 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=42 
 {executed in 1 msec}
2020-11-19 20:19:52.503 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:19:52.510 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788392, 1605788392, 1, 'zh-hans', 0, 
1, 1, 0, '03丨Java虚拟机是如何加载Java类的？', 'book', 1, 42, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.516 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.518 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:52.522 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.524 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:52.536 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c8bb3c15d156314bd7ad58a76df4afdb?bkt=en-1df98aeb722e81f5b642d36187dd0738bb6bcdbef25d32bf6f4ec699db8b3b75766738ef2d3b7b11&fid=3757516097-778750-1054657864907414&time=1605788390&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-hWrWM0S9Myw2nvBFi0cYxbBY5qI%3D&to=92&size=6091616&sta_dx=6091616&sta_cs=4410&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182958&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6091616&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ca0cdae228b2b0db4983e83cbab535f21c951d2a6894b7bb826893f355e474c3b06bee7fdc142eac&sl=76480590&expires=8h&rt=pr&r=293264734&mlogid=7510928911940468017&vbdid=64799653&fin=03%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510928911940468017&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9a748e925c92661d150966684966e4a99&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=03%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F.mp3', 
42, 42) 
 {executed in 5 msec}
2020-11-19 20:19:52.542 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.544 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:19:52.554 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c8bb3c15d156314bd7ad58a76df4afdb?bkt=en-1df98aeb722e81f5b642d36187dd0738bb6bcdbef25d32bf6f4ec699db8b3b75766738ef2d3b7b11&fid=3757516097-778750-1054657864907414&time=1605788390&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-hWrWM0S9Myw2nvBFi0cYxbBY5qI%3D&to=92&size=6091616&sta_dx=6091616&sta_cs=4410&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182958&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6091616&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ca0cdae228b2b0db4983e83cbab535f21c951d2a6894b7bb826893f355e474c3b06bee7fdc142eac&sl=76480590&expires=8h&rt=pr&r=293264734&mlogid=7510928911940468017&vbdid=64799653&fin=03%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510928911940468017&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=37cfb58296b21ea9a748e925c92661d150966684966e4a99&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=03%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDJava%E7%B1%BB%E7%9A%84%EF%BC%9F.mp3', 
42, 42) 
 {executed in 4 msec}
2020-11-19 20:19:52.559 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.560 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:52.564 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.566 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:52.576 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">49</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1. 新建数组会加载元素类LazyHolder；不会初始化元素类 <br> <br>2. 
新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化 <br>----------------- <br>链接的第一步：验证字节码，awk把字节码改为不符合jvm规范 
<br>初始化调用&lt;clinit&gt;(即class init) <br> <br> <br> <br>PS:好像二个问题包含了第一个问题的答案 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢指出！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>mover</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">32</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0"> 到目前为止，讲解的内容没有超出周志明老师的 深入理解JAVA虚拟机这本书的内容，老师可以讲解的更深入一点吗？可以介绍一下类加载后在meta区的大概布局吗？class类对象与meta区的类数据结构是什么关系？当我们创建类，使用类时，类实例，类对象，meta区类数据结构是如何交互的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢你的建议！前几章不好搞太难，希望后面能够满足你的需求</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/2e/a2/cdd182e5.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>迈克擂</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">23</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 学习了！可以的话希望老师能附上一些图解，便于更理解 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>慎独</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">18</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1.虚拟机必须知道（加载）有这个类，才能创建这个类的数组（容器），但是这个类并没有被使用到（没有达到初始化的条件），所以不会初始化。 
<br>2.新建数组的时候并不是要使用这个类（只是定义了放这个类的容器），所以不会被链接，调用getInstance(false)的时候约等于告诉虚拟机，我要使用这个类了，你把这个类造好（链接），然后把static修饰的字符赋予变量（初始化）。 
<br>老师看看理解对不对，指点一下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/fc/f01e160f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ruyin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> -XX：+TraceClassLoading 可以看到类加载过程 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>conce2018</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">9</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
为什么叫双亲委派呀，明明只给了父类加载应该是单亲呀 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
其实我也有这个疑问，英文中为parent不带s，照理应该翻译为单亲。但既然约定俗成翻译为双亲，就只好这样叫啦</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/fa/51/7e9f5d64.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>仲伦</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 忍着瞌睡把内容看完了。 <br>全是复习了一遍。 <br>作者对 类加载中的 链接(验证、准备、解析)讲解不太到位吧？ 
<br>另外，对一个的初始化发生在第一次主动使用该类时，作者列出的几种情况都属于主动使用类。感觉应该有被动使用的举例，并告知大家这样做是不会执行初始化的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/cf/22/5a483755.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小蛋壳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 加载阶段都加载哪些类呢，那么多类，全部加载吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
加载阶段是针对单个类的，一般用到的类才会被加载。大部分情况下，不同类的加载阶段是不同的。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/27/f0/22b3703b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>吴天</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 每次new一个类都是一次初始化吧？加载和链接以后生成的是什么样的数据结构？存储在什么地方？ 
<br> </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 类的初始化只会发生一次，你可能指的是实例的初始化？<br><br>JVM并不会直接使用.class文件，类加载链接的目的就是在JVM中创建相应的类结构，会存储在元空间(我之前用的老说法”方法区”，感谢某同学指出)。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0c/dd/eebeb4ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_ecc6a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，你说可以通过不同的类加载器加载同一个类得到类的不同版本，我有个疑问，类是通过包名加类名来使用的，那怎么样区分不同的类加载器加载的类呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你指的是在写代码的时候如何区分对吧？我认为没法区分。如果你有一个类的两个不同版本，而且它们不兼容，那么编译时指向哪个，就按哪个来编译。也就是说，如果要同时使用两个版本，那么你需要分开编译。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d5/74/7e787607.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>scutware</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 您在评论回复说.class在加载后已经写入方法区（元空间），但是我理解在方法区里类代码的方法调用应该是实际的调用地址吧？而取得实际调用地址不是在链接阶段吗？这里不太理解，求解答～ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 链接时取得的不是被加载类的地址，而且被加载类所调用的其它方法的地址</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/cf/e82cd26b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_dde3a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问有什么办法或者工具可以看到类加载的这些过程呢？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有几个疑问，请老师指点迷津。 <br>1.扩展类加载器的父类，是启动类加载器，而后者是C++实现的，java继承C++的类？不大能理解。 
<br>2.虚方法的概念在C++中有了解过，java中的虚方法该如何定义呢？以前没接触过java虚方法的概念 <br>3.我以前的理解是，有一个零值(0/null)初始化，针对于类的静态成员变量，如果是final修饰的静态成员变量，也就是常量，是初始化为代码中指定的值比如10。非final修饰的静态成员变量，在clint执行过程中赋值为代码中指定的值，请问老师是这样的吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 可能我翻译得有点瑕疵，导致了你的误解。这里我指的是扩展器类的 父-类加载器，而不是父类-(加载器)。<br>2. Java中所有的非私有实例方法，都算是虚方法。调用这些方法的指令，也区分直接调用和虚调用。下一篇我会讲到。<br>3. 
赞一个。被final修饰的静态成员变量，如果不是基本类型或者字符串，也会放在clinit 来做。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>L.B.Q.Y</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 从大的方面讲，类加载的结果是把一段字节流变换成Class结构并写方法区，实际写方法区具体是发生在加载、链接、初始化的哪个环节呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在加载阶段就已经生成class结构了，所以我认为应该已经写入了方法区，只是被标记为未链接而暂不能使用。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问，关于双亲委派类加载器的情况，与周志明的深入理解java虚拟机矛盾啊，到底听哪个呢？周志明书籍中lib/ext是由扩展类加载器加载，你这里是启动类加载器加载，到底哪个是正确的呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: lib/ext是由扩展类加载器加载的，我文中应该也是这样讲的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLI6icTKbDkttGvNaMrMKdu5PsZwiagtdjn6NTWAlJPHj4cJrUTW4GuicZKFZnX8eJ2Iz319aHLymLibQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>airfly</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 没明白java虚拟机和类加载器的关系, </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>Geek_43687...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-12-22 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看完了整篇文章，其实我还是没搞明白，加载-链接-初始化 
这三个步骤的关系。首先我理解加载就是把编译好的.class文件读如jvm内存，存放至方法区。至于链接，我觉得暂时不用去深究。初始化则是比较常见的，我们去new操作或者访问静态变量时会触发类的初始化操作。我的问题是：1.什么时候触发类加载？2:加载-链接-初始化一定是三者都发生的吗，会存在某个累只加载，不链接，不初始化的情况吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/12/87/765a5366.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Eric</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于新建数组是否会链接，第二个实践生成一个不能通过链接的验证阶段的类，但是我不明白怎么确定它是在new 
LazyHolder[2]时验证还是在return LazyHolder.INSTANCE时验证的？运行了指令后得到： <br>Error: A JNI error has occurred, 
please check your installation and try again <br>Exception in thread "main" java.lang.VerifyError: 
Operand stack overflow <br>Exception Details: <br>&nbsp;&nbsp;Location: <br>&nbsp;&nbsp;&nbsp;&nbsp;Singleton.&lt;init&gt;()V 
@0: aload_0 <br>可不可以这样理解：新建数组new LazyHolder[2]不需要初始化，只有return LazyHolder.INSTANCE才会导致初始化。而验证不通过的地方为初始化部分，所以，可以认为新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/68/3a/90912072.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>hero</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 你该加油了，期待接下来精彩…… </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>funnyx</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
有两个问题想问一下老师，在类加载的过程中，有一个委派模式，这里严格来说应该不是使用的继承方式，应该是组合。另一个就是类中的静态字段，如果没有被jvm标记为常量，那么这部分内存是如何分配的？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 前面那个问题，你说的没错。这么说的原因是它委派的那个对象名字叫parent。可能翻译为双亲比较不容易混淆。<br><br>后面那个问题，JVM都会分配内存的，只是初始化的过程不一样，一个是JVM直接赋值，一个是在clinit方法中赋值</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 42, 42) 
 {executed in 2 msec}
2020-11-19 20:19:52.584 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.586 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:19:52.596 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">49</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1. 新建数组会加载元素类LazyHolder；不会初始化元素类 <br> <br>2. 
新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化 <br>----------------- <br>链接的第一步：验证字节码，awk把字节码改为不符合jvm规范 
<br>初始化调用&lt;clinit&gt;(即class init) <br> <br> <br> <br>PS:好像二个问题包含了第一个问题的答案 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢指出！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>mover</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">32</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0"> 到目前为止，讲解的内容没有超出周志明老师的 深入理解JAVA虚拟机这本书的内容，老师可以讲解的更深入一点吗？可以介绍一下类加载后在meta区的大概布局吗？class类对象与meta区的类数据结构是什么关系？当我们创建类，使用类时，类实例，类对象，meta区类数据结构是如何交互的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢你的建议！前几章不好搞太难，希望后面能够满足你的需求</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/2e/a2/cdd182e5.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>迈克擂</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">23</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 学习了！可以的话希望老师能附上一些图解，便于更理解 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>慎独</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">18</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1.虚拟机必须知道（加载）有这个类，才能创建这个类的数组（容器），但是这个类并没有被使用到（没有达到初始化的条件），所以不会初始化。 
<br>2.新建数组的时候并不是要使用这个类（只是定义了放这个类的容器），所以不会被链接，调用getInstance(false)的时候约等于告诉虚拟机，我要使用这个类了，你把这个类造好（链接），然后把static修饰的字符赋予变量（初始化）。 
<br>老师看看理解对不对，指点一下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/fc/f01e160f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ruyin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> -XX：+TraceClassLoading 可以看到类加载过程 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>conce2018</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">9</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
为什么叫双亲委派呀，明明只给了父类加载应该是单亲呀 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
其实我也有这个疑问，英文中为parent不带s，照理应该翻译为单亲。但既然约定俗成翻译为双亲，就只好这样叫啦</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/fa/51/7e9f5d64.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>仲伦</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 忍着瞌睡把内容看完了。 <br>全是复习了一遍。 <br>作者对 类加载中的 链接(验证、准备、解析)讲解不太到位吧？ 
<br>另外，对一个的初始化发生在第一次主动使用该类时，作者列出的几种情况都属于主动使用类。感觉应该有被动使用的举例，并告知大家这样做是不会执行初始化的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢建议！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/cf/22/5a483755.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小蛋壳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 加载阶段都加载哪些类呢，那么多类，全部加载吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
加载阶段是针对单个类的，一般用到的类才会被加载。大部分情况下，不同类的加载阶段是不同的。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/27/f0/22b3703b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>吴天</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 每次new一个类都是一次初始化吧？加载和链接以后生成的是什么样的数据结构？存储在什么地方？ 
<br> </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 类的初始化只会发生一次，你可能指的是实例的初始化？<br><br>JVM并不会直接使用.class文件，类加载链接的目的就是在JVM中创建相应的类结构，会存储在元空间(我之前用的老说法”方法区”，感谢某同学指出)。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0c/dd/eebeb4ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_ecc6a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，你说可以通过不同的类加载器加载同一个类得到类的不同版本，我有个疑问，类是通过包名加类名来使用的，那怎么样区分不同的类加载器加载的类呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你指的是在写代码的时候如何区分对吧？我认为没法区分。如果你有一个类的两个不同版本，而且它们不兼容，那么编译时指向哪个，就按哪个来编译。也就是说，如果要同时使用两个版本，那么你需要分开编译。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d5/74/7e787607.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>scutware</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 您在评论回复说.class在加载后已经写入方法区（元空间），但是我理解在方法区里类代码的方法调用应该是实际的调用地址吧？而取得实际调用地址不是在链接阶段吗？这里不太理解，求解答～ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 链接时取得的不是被加载类的地址，而且被加载类所调用的其它方法的地址</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/cf/e82cd26b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_dde3a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问有什么办法或者工具可以看到类加载的这些过程呢？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有几个疑问，请老师指点迷津。 <br>1.扩展类加载器的父类，是启动类加载器，而后者是C++实现的，java继承C++的类？不大能理解。 
<br>2.虚方法的概念在C++中有了解过，java中的虚方法该如何定义呢？以前没接触过java虚方法的概念 <br>3.我以前的理解是，有一个零值(0/null)初始化，针对于类的静态成员变量，如果是final修饰的静态成员变量，也就是常量，是初始化为代码中指定的值比如10。非final修饰的静态成员变量，在clint执行过程中赋值为代码中指定的值，请问老师是这样的吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 可能我翻译得有点瑕疵，导致了你的误解。这里我指的是扩展器类的 父-类加载器，而不是父类-(加载器)。<br>2. Java中所有的非私有实例方法，都算是虚方法。调用这些方法的指令，也区分直接调用和虚调用。下一篇我会讲到。<br>3. 
赞一个。被final修饰的静态成员变量，如果不是基本类型或者字符串，也会放在clinit 来做。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>L.B.Q.Y</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 从大的方面讲，类加载的结果是把一段字节流变换成Class结构并写方法区，实际写方法区具体是发生在加载、链接、初始化的哪个环节呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在加载阶段就已经生成class结构了，所以我认为应该已经写入了方法区，只是被标记为未链接而暂不能使用。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问，关于双亲委派类加载器的情况，与周志明的深入理解java虚拟机矛盾啊，到底听哪个呢？周志明书籍中lib/ext是由扩展类加载器加载，你这里是启动类加载器加载，到底哪个是正确的呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: lib/ext是由扩展类加载器加载的，我文中应该也是这样讲的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLI6icTKbDkttGvNaMrMKdu5PsZwiagtdjn6NTWAlJPHj4cJrUTW4GuicZKFZnX8eJ2Iz319aHLymLibQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>airfly</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 没明白java虚拟机和类加载器的关系, </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>Geek_43687...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-12-22 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看完了整篇文章，其实我还是没搞明白，加载-链接-初始化 
这三个步骤的关系。首先我理解加载就是把编译好的.class文件读如jvm内存，存放至方法区。至于链接，我觉得暂时不用去深究。初始化则是比较常见的，我们去new操作或者访问静态变量时会触发类的初始化操作。我的问题是：1.什么时候触发类加载？2:加载-链接-初始化一定是三者都发生的吗，会存在某个累只加载，不链接，不初始化的情况吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/12/87/765a5366.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Eric</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于新建数组是否会链接，第二个实践生成一个不能通过链接的验证阶段的类，但是我不明白怎么确定它是在new 
LazyHolder[2]时验证还是在return LazyHolder.INSTANCE时验证的？运行了指令后得到： <br>Error: A JNI error has occurred, 
please check your installation and try again <br>Exception in thread "main" java.lang.VerifyError: 
Operand stack overflow <br>Exception Details: <br>&nbsp;&nbsp;Location: <br>&nbsp;&nbsp;&nbsp;&nbsp;Singleton.&lt;init&gt;()V 
@0: aload_0 <br>可不可以这样理解：新建数组new LazyHolder[2]不需要初始化，只有return LazyHolder.INSTANCE才会导致初始化。而验证不通过的地方为初始化部分，所以，可以认为新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/68/3a/90912072.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>hero</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 你该加油了，期待接下来精彩…… </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>funnyx</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
有两个问题想问一下老师，在类加载的过程中，有一个委派模式，这里严格来说应该不是使用的继承方式，应该是组合。另一个就是类中的静态字段，如果没有被jvm标记为常量，那么这部分内存是如何分配的？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 前面那个问题，你说的没错。这么说的原因是它委派的那个对象名字叫parent。可能翻译为双亲比较不容易混淆。<br><br>后面那个问题，JVM都会分配内存的，只是初始化的过程不一样，一个是JVM直接赋值，一个是在clinit方法中赋值</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 42, 42) 
 {executed in 2 msec}
2020-11-19 20:19:52.608 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.609 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:52.614 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.615 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:52.622 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 42, 'https://static001.geekbang.org/resource/image/60/e3/60fcea1428d3c7d0af45be8bc0a40ee3.jpg', 
42) 
 {executed in 0 msec}
2020-11-19 20:19:52.629 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.630 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:19:52.637 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 42, 'https://static001.geekbang.org/resource/image/60/e3/60fcea1428d3c7d0af45be8bc0a40ee3.jpg', 
42) 
 {executed in 0 msec}
2020-11-19 20:19:52.643 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.644 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:52.651 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 42, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.656 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=42 
 {executed in 1 msec}
2020-11-19 20:19:52.658 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:19:52.665 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 42, 42) 
 {executed in 1 msec}
2020-11-19 20:19:52.670 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1009788313111106' 
and bookchecke0_.name='net_content' 
 {executed in 0 msec}
2020-11-19 20:19:52.672 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:16.279 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1009788313111106' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:20:16.281 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:16.284 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1009788313111106', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:20:16.286 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1009788313111106', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:20:16.287 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|85            |
|--------------|

2020-11-19 20:20:16.303 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1009788313111106' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:20:16.304 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:16.698 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1009788313111106' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:20:16.700 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:16.703 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1009788313111106', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:20:16.704 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1009788313111106', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:20:16.705 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|86            |
|--------------|

2020-11-19 20:20:16.720 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1009788313111106' 
 {executed in 1 msec}
2020-11-19 20:20:16.722 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:16.725 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788416, 1) 
 {executed in 1 msec}
2020-11-19 20:20:16.726 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788416, 1) 
 {executed in 0 msec}
2020-11-19 20:20:16.727 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|43            |
|--------------|

2020-11-19 20:20:16.738 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '054dc369-ff6e-45e0-908d-532e77362bfe', 
43) 
 {executed in 1 msec}
2020-11-19 20:20:16.739 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '054dc369-ff6e-45e0-908d-532e77362bfe', 43) 
 {executed in 0 msec}
2020-11-19 20:20:16.740 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|43            |
|--------------|

2020-11-19 20:20:16.756 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=43, revision_default=1, revision_timestamp=1605788416, 
revision_uid=1 where vid=43 
 {executed in 1 msec}
2020-11-19 20:20:16.762 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.764 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:16.771 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1009788313111106', 'zh-hans', 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.777 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.779 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:16.786 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1009788313111106', 'zh-hans', 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.791 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=43 
 {executed in 1 msec}
2020-11-19 20:20:16.793 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:16.796 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=43 
 {executed in 0 msec}
2020-11-19 20:20:16.798 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:16.805 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 43, 0, 0, 32, 0, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.811 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.813 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:16.816 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.818 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:16.827 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>如果你了解面向对象语言的发展史，那你可能听说过 Smalltalk 这门语言。它的影响力之大，以至于之后诞生的面向对象语言，或多或少都借鉴了它的设计和实现。</p> 
<p>在 Smalltalk 中，所有的值都是对象。因此，许多人认为它是一门纯粹的面向对象语言。</p> <p>Java 则不同，它引进了八个基本类型，来支持数值计算。Java 这么做的原因主要是工程上的考虑，因为使用基本类型能够在执行效率以及内存使用两方面提升软件性能。</p> 
<p>今天，我们就来了解一下基本类型在 Java 虚拟机中的实现。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean 吃过饭没 = 2; // 直接编译的话 javac 会报错 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (吃过饭没) System.out.println(" 吃了 "); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (true == 吃过饭没) System.out.println(" 
真吃了 "); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在上一篇结尾的小作业里，我构造了这么一段代码，它将一个 
boolean 类型的局部变量赋值为 2。为了方便记忆，我们给这个变量起个名字，就叫“吃过饭没”。</p> <p>赋值语句后边我设置了两个看似一样的 if 语句。第一个 if 语句，也就是直接判断“吃过饭没”，在它成立的情况下，代码会打印“吃了”。</p><!-- 
[[[read_end]]] --> <p>第二个 if 语句，也就是判断“吃过饭没”和 true 是否相等，在它成立的情况下，代码会打印“真吃了”。</p> <p>当然，直接编译这段代码，编译器是会报错的。所以，我迂回了一下，采用一个 
Java 字节码的汇编工具，直接对字节码进行更改。</p> <p>那么问题就来了：当一个 boolean 变量的值是 2 时，它究竟是 true 还是 false 呢？</p> <p>如果你跑过这段代码，你会发现，问虚拟机“吃过饭没”，它会回答“吃了”，而问虚拟机“真（==）吃过饭没”，虚拟机则不会回答“真吃了”。</p> 
<p>那么虚拟机到底吃过没，下面我们来一起分析一下这背后的细节。</p> <h2>Java 虚拟机的 boolean 类型</h2> <p>首先，我们来看看 Java 语言规范以及 
Java 虚拟机规范是怎么定义 boolean 类型的。</p> <p>在 Java 语言规范中，boolean 类型的值只有两种可能，它们分别用符号“true”和“false”来表示。显然，这两个符号是不能被虚拟机直接使用的。</p> 
<p>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。这个编码规则约束了 Java 
字节码的具体实现。</p> <p>举个例子，对于存储 boolean 数组的字节码，Java 虚拟机需保证实际存入的值是整数 1 或者 0。</p> <p>Java 虚拟机规范同时也要求 
Java 编译器遵守这个编码规则，并且用整数相关的字节码来实现逻辑运算，以及基于 boolean 类型的条件跳转。这样一来，在编译而成的 class 文件中，除了字段和传入参数外，基本看不出 
boolean 类型的痕迹了。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # Foo.main 编译后的字节码 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iconst_2 // 我们用 AsmTools 更改了这一指令 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: istore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: iload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: ifeq 14 // 第一个 if 语句，即操作数栈上数值为 0 时跳转 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: getstatic java.lang.System.out </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: ldc " 吃了 " </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: iload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: if_icmpne 27 // 第二个 if 语句，即操作数栈上两个数值不相同时跳转 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: getstatic java.lang.System.out </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: ldc " 真吃了 " </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>在前面的例子中，第一个 if 语句会被编译成条件跳转字节码 ifeq，翻译成人话就是说，如果局部变量“吃过饭没”的值为 0，那么跳过打印“吃了”的语句。</p> <p>而第二个 
if 语句则会被编译成条件跳转字节码 if_icmpne，也就是说，如果局部变量的值和整数 1 不相等，那么跳过打印“真吃了”的语句。</p> <p>可以看到，Java 编译器的确遵守了相同的编码规则。当然，这个约束很容易绕开。除了我们小作业中用到的汇编工具 
AsmTools 外，还有许多可以修改字节码的 Java 库，比如说 ASM <a href="https://asm.ow2.io/">[1] </a>等。</p> <p>对于 Java 
虚拟机来说，它看到的 boolean 类型，早已被映射为整数类型。因此，将原本声明为 boolean 类型的局部变量，赋值为除了 0、1 之外的整数值，在 Java 虚拟机看来是“合法”的。</p> 
<p>在我们的例子中，经过编译器编译之后，Java 虚拟机看到的不是在问“吃过饭没”，而是在问“吃过几碗饭”。也就是说，第一个 if 语句变成：你不会一碗饭都没吃吧。第二个 if 语句则变成：你吃过一碗饭了吗。</p> 
<p>如果我们约定俗成，每人每顿只吃一碗，那么第二个 if 语句还是有意义的。但如果我们打破常规，吃了两碗，那么较真的 Java 虚拟机就会将第二个 if 语句判定为假了。</p> 
<h2>Java 的基本类型</h2> <p>除了上面提到的 boolean 类型外，Java 的基本类型还包括整数类型 byte、short、char、int 和 long，以及浮点类型 
float 和 double。</p> <p><img src="https://static001.geekbang.org/resource/image/77/45/77dfb788a8ad5877e77fc28ed2d51745.png" 
alt=""></p> <p>Java 的基本类型都有对应的值域和默认值。可以看到，byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。因此，从前面的基本类型转换至后面的基本类型，无需强制转换。另外一点值得注意的是，尽管他们的默认值看起来不一样，但在内存中都是 
0。</p> <p>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。char 类型的取值范围则是 
[0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</p> <p>在前面的例子中，我们能够将整数 2 存储到一个声明为 boolean 
类型的局部变量中。那么，声明为 byte、char 以及 short 的局部变量，是否也能够存储超出它们取值范围的数值呢？</p> <p>答案是可以的。而且，这些超出取值范围的数值同样会带来一些麻烦。比如说，声明为 
char 类型的局部变量实际上有可能为负数。当然，在正常使用 Java 编译器的情况下，生成的字节码会遵守 Java 虚拟机规范对编译器的约束，因此你无须过分担心局部变量会超出它们的取值范围。</p> 
<p>Java 的浮点类型采用 IEEE 754 浮点数格式。以 float 为例，浮点类型通常有两个 0，+0.0F 以及 -0.0F。</p> <p>前者在 Java 里是 0，后者是符号位为 
1、其他位均为 0 的浮点数，在内存中等同于十六进制整数 0x8000000（即 -0.0F 可通过 Float.intBitsToFloat(0x8000000) 求得）。尽管它们的内存数值不同，但是在 
Java 中 +0.0F == -0.0F 会返回真。</p> <p>在有了 +0.0F 和 -0.0F 这两个定义后，我们便可以定义浮点数中的正无穷及负无穷。正无穷就是任意正浮点数（不包括 
+0.0F）除以 +0.0F 得到的值，而负无穷是任意正浮点数除以 -0.0F 得到的值。在 Java 中，正无穷和负无穷是有确切的值，在内存中分别等同于十六进制整数 0x7F800000 
和 0xFF800000。</p> <p>你也许会好奇，既然整数 0x7F800000 等同于正无穷，那么 0x7F800001 又对应什么浮点数呢？</p> <p>这个数字对应的浮点数是 
NaN（Not-a-Number）。</p> <p>不仅如此，[0x7F800001, 0x7FFFFFFF] 和 [0xFF800001, 0xFFFFFFFF] 对应的都是 NaN。当然，一般我们计算得出的 
NaN，比如说通过 +0.0F/+0.0F，在内存中应为 0x7FC00000。这个数值，我们称之为标准的 NaN，而其他的我们称之为不标准的 NaN。</p> <p>NaN 有一个有趣的特性：除了“!=”始终返回 
true 之外，所有其他比较结果都会返回 false。</p> <p>举例来说，“NaN&lt;1.0F”返回 false，而“NaN&gt;=1.0F”同样返回 false。对于任意浮点数 
f，不管它是 0 还是 NaN，“f!=NaN”始终会返回 true，而“f==NaN”始终会返回 false。</p> <p>因此，我们在程序里做浮点数比较的时候，需要考虑上述特性。在本专栏的第二部分，我会介绍这个特性给向量化比较带来什么麻烦。</p> 
<h2>Java 基本类型的大小</h2> <p>在第一篇中我曾经提到，Java 虚拟机每调用一个 Java 方法，便会创建一个栈帧。为了方便理解，这里我只讨论供解释器使用的解释栈帧（interpreted 
frame）。</p> <p>这种栈帧有两个主要的组成部分，分别是局部变量区，以及字节码的操作数栈。这里的局部变量是广义的，除了普遍意义下的局部变量之外，它还包含实例方法的“this 
指针”以及方法所接收的参数。</p> <p>在 Java 虚拟机规范中，局部变量区等价于一个数组，并且可以用正整数来索引。除了 long、double 值需要用两个数组单元来存储之外，其他基本类型以及引用类型的值均占用一个数组单元。</p> 
<p>也就是说，boolean、byte、char、short 这四种类型，在栈上占用的空间和 int 是一样的，和引用类型也是一样的。因此，在 32 位的 HotSpot 中，这些类型在栈上将占用 
4 个字节；而在 64 位的 HotSpot 中，他们将占 8 个字节。</p> <p>当然，这种情况仅存在于局部变量，而并不会出现在存储于堆中的字段或者数组元素上。对于 byte、char 
以及 short 这三种类型的字段或者数组单元，它们在堆上占用的空间分别为一字节、两字节，以及两字节，也就是说，跟这些类型的值域相吻合。</p> <p>因此，当我们将一个 int 类型的值，存储到这些类型的字段或数组时，相当于做了一次隐式的掩码操作。举例来说，当我们把 
0xFFFFFFFF（-1）存储到一个声明为 char 类型的字段里时，由于该字段仅占两字节，所以高两位的字节便会被截取掉，最终存入“\uFFFF”。</p> <p>boolean 
字段和 boolean 数组则比较特殊。在 HotSpot 中，boolean 字段占用一字节，而 boolean 数组则直接用 byte 数组来实现。为了保证堆中的 boolean 
值是合法的，HotSpot 在存储时显式地进行掩码操作，也就是说，只取最后一位的值存入 boolean 字段或数组中。</p> <p>讲完了存储，现在我来讲讲加载。Java 虚拟机的算数运算几乎全部依赖于操作数栈。也就是说，我们需要将堆中的 
boolean、byte、char 以及 short 加载到操作数栈上，而后将栈上的值当成 int 类型来运算。</p> <p>对于 boolean、char 这两个无符号类型来说，加载伴随着零扩展。举个例子，char 
的大小为两个字节。在加载时 char 的值会被复制到 int 类型的低二字节，而高二字节则会用 0 来填充。</p> <p>对于 byte、short 这两个类型来说，加载伴随着符号扩展。举个例子，short 
的大小为两个字节。在加载时 short 的值同样会被复制到 int 类型的低二字节。如果该 short 值为非负数，即最高位为 0，那么该 int 类型的值的高二字节会用 0 来填充，否则用 
1 来填充。</p> <h2>总结与实践</h2> <p>今天我介绍了 Java 里的基本类型。</p> <p>其中，boolean 类型在 Java 虚拟机中被映射为整数类型：“true”被映射为 
1，而“false”被映射为 0。Java 代码中的逻辑运算以及条件跳转，都是用整数相关的字节码来实现的。</p> <p>除 boolean 类型之外，Java 还有另外 7 个基本类型。它们拥有不同的值域，但默认值在内存中均为 
0。这些基本类型之中，浮点类型比较特殊。基于它的运算或比较，需要考虑 +0.0F、-0.0F 以及 NaN 的情况。</p> <p>除 long 和 double 外，其他基本类型与引用类型在解释执行的方法栈帧中占用的大小是一致的，但它们在堆中占用的大小确不同。在将 
boolean、byte、char 以及 short 的值存入字段或者数组单元时，Java 虚拟机会进行掩码操作。在读取时，Java 虚拟机则会将其扩展为 int 类型。</p> <p>今天的动手环节，你可以观测一下，将 
boolean 类型的值存入字段中时，Java 虚拟机所做的掩码操作。</p> <p>你可以将下面代码中 boolValue = true 里的 true 换为 2 或者 3，看看打印结果与你的猜测是否相符合。</p> 
<p>熟悉 Unsafe 的同学，可以使用 Unsafe.putBoolean 和 Unsafe.putByte 方法，看看还会不会做掩码操作。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static boolean boolValue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> boolValue = true; // 将这个 true 替换为 2 或者 3，再看看打印结果 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (boolValue) System.out.println("Hello, 
Java!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (boolValue 
== true) System.out.println("Hello, JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 43, 43) 
 {executed in 2 msec}
2020-11-19 20:20:16.836 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.838 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:16.847 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>如果你了解面向对象语言的发展史，那你可能听说过 Smalltalk 这门语言。它的影响力之大，以至于之后诞生的面向对象语言，或多或少都借鉴了它的设计和实现。</p> 
<p>在 Smalltalk 中，所有的值都是对象。因此，许多人认为它是一门纯粹的面向对象语言。</p> <p>Java 则不同，它引进了八个基本类型，来支持数值计算。Java 这么做的原因主要是工程上的考虑，因为使用基本类型能够在执行效率以及内存使用两方面提升软件性能。</p> 
<p>今天，我们就来了解一下基本类型在 Java 虚拟机中的实现。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean 吃过饭没 = 2; // 直接编译的话 javac 会报错 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (吃过饭没) System.out.println(" 吃了 "); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (true == 吃过饭没) System.out.println(" 
真吃了 "); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在上一篇结尾的小作业里，我构造了这么一段代码，它将一个 
boolean 类型的局部变量赋值为 2。为了方便记忆，我们给这个变量起个名字，就叫“吃过饭没”。</p> <p>赋值语句后边我设置了两个看似一样的 if 语句。第一个 if 语句，也就是直接判断“吃过饭没”，在它成立的情况下，代码会打印“吃了”。</p><!-- 
[[[read_end]]] --> <p>第二个 if 语句，也就是判断“吃过饭没”和 true 是否相等，在它成立的情况下，代码会打印“真吃了”。</p> <p>当然，直接编译这段代码，编译器是会报错的。所以，我迂回了一下，采用一个 
Java 字节码的汇编工具，直接对字节码进行更改。</p> <p>那么问题就来了：当一个 boolean 变量的值是 2 时，它究竟是 true 还是 false 呢？</p> <p>如果你跑过这段代码，你会发现，问虚拟机“吃过饭没”，它会回答“吃了”，而问虚拟机“真（==）吃过饭没”，虚拟机则不会回答“真吃了”。</p> 
<p>那么虚拟机到底吃过没，下面我们来一起分析一下这背后的细节。</p> <h2>Java 虚拟机的 boolean 类型</h2> <p>首先，我们来看看 Java 语言规范以及 
Java 虚拟机规范是怎么定义 boolean 类型的。</p> <p>在 Java 语言规范中，boolean 类型的值只有两种可能，它们分别用符号“true”和“false”来表示。显然，这两个符号是不能被虚拟机直接使用的。</p> 
<p>在 Java 虚拟机规范中，boolean 类型则被映射成 int 类型。具体来说，“true”被映射为整数 1，而“false”被映射为整数 0。这个编码规则约束了 Java 
字节码的具体实现。</p> <p>举个例子，对于存储 boolean 数组的字节码，Java 虚拟机需保证实际存入的值是整数 1 或者 0。</p> <p>Java 虚拟机规范同时也要求 
Java 编译器遵守这个编码规则，并且用整数相关的字节码来实现逻辑运算，以及基于 boolean 类型的条件跳转。这样一来，在编译而成的 class 文件中，除了字段和传入参数外，基本看不出 
boolean 类型的痕迹了。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # Foo.main 编译后的字节码 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iconst_2 // 我们用 AsmTools 更改了这一指令 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: istore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: iload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: ifeq 14 // 第一个 if 语句，即操作数栈上数值为 0 时跳转 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: getstatic java.lang.System.out </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: ldc " 吃了 " </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: iload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: if_icmpne 27 // 第二个 if 语句，即操作数栈上两个数值不相同时跳转 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: getstatic java.lang.System.out </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: ldc " 真吃了 " </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>在前面的例子中，第一个 if 语句会被编译成条件跳转字节码 ifeq，翻译成人话就是说，如果局部变量“吃过饭没”的值为 0，那么跳过打印“吃了”的语句。</p> <p>而第二个 
if 语句则会被编译成条件跳转字节码 if_icmpne，也就是说，如果局部变量的值和整数 1 不相等，那么跳过打印“真吃了”的语句。</p> <p>可以看到，Java 编译器的确遵守了相同的编码规则。当然，这个约束很容易绕开。除了我们小作业中用到的汇编工具 
AsmTools 外，还有许多可以修改字节码的 Java 库，比如说 ASM <a href="https://asm.ow2.io/">[1] </a>等。</p> <p>对于 Java 
虚拟机来说，它看到的 boolean 类型，早已被映射为整数类型。因此，将原本声明为 boolean 类型的局部变量，赋值为除了 0、1 之外的整数值，在 Java 虚拟机看来是“合法”的。</p> 
<p>在我们的例子中，经过编译器编译之后，Java 虚拟机看到的不是在问“吃过饭没”，而是在问“吃过几碗饭”。也就是说，第一个 if 语句变成：你不会一碗饭都没吃吧。第二个 if 语句则变成：你吃过一碗饭了吗。</p> 
<p>如果我们约定俗成，每人每顿只吃一碗，那么第二个 if 语句还是有意义的。但如果我们打破常规，吃了两碗，那么较真的 Java 虚拟机就会将第二个 if 语句判定为假了。</p> 
<h2>Java 的基本类型</h2> <p>除了上面提到的 boolean 类型外，Java 的基本类型还包括整数类型 byte、short、char、int 和 long，以及浮点类型 
float 和 double。</p> <p><img src="https://static001.geekbang.org/resource/image/77/45/77dfb788a8ad5877e77fc28ed2d51745.png" 
alt=""></p> <p>Java 的基本类型都有对应的值域和默认值。可以看到，byte、short、int、long、float 以及 double 的值域依次扩大，而且前面的值域被后面的值域所包含。因此，从前面的基本类型转换至后面的基本类型，无需强制转换。另外一点值得注意的是，尽管他们的默认值看起来不一样，但在内存中都是 
0。</p> <p>在这些基本类型中，boolean 和 char 是唯二的无符号类型。在不考虑违反规范的情况下，boolean 类型的取值范围是 0 或者 1。char 类型的取值范围则是 
[0, 65535]。通常我们可以认定 char 类型的值为非负数。这种特性十分有用，比如说作为数组索引等。</p> <p>在前面的例子中，我们能够将整数 2 存储到一个声明为 boolean 
类型的局部变量中。那么，声明为 byte、char 以及 short 的局部变量，是否也能够存储超出它们取值范围的数值呢？</p> <p>答案是可以的。而且，这些超出取值范围的数值同样会带来一些麻烦。比如说，声明为 
char 类型的局部变量实际上有可能为负数。当然，在正常使用 Java 编译器的情况下，生成的字节码会遵守 Java 虚拟机规范对编译器的约束，因此你无须过分担心局部变量会超出它们的取值范围。</p> 
<p>Java 的浮点类型采用 IEEE 754 浮点数格式。以 float 为例，浮点类型通常有两个 0，+0.0F 以及 -0.0F。</p> <p>前者在 Java 里是 0，后者是符号位为 
1、其他位均为 0 的浮点数，在内存中等同于十六进制整数 0x8000000（即 -0.0F 可通过 Float.intBitsToFloat(0x8000000) 求得）。尽管它们的内存数值不同，但是在 
Java 中 +0.0F == -0.0F 会返回真。</p> <p>在有了 +0.0F 和 -0.0F 这两个定义后，我们便可以定义浮点数中的正无穷及负无穷。正无穷就是任意正浮点数（不包括 
+0.0F）除以 +0.0F 得到的值，而负无穷是任意正浮点数除以 -0.0F 得到的值。在 Java 中，正无穷和负无穷是有确切的值，在内存中分别等同于十六进制整数 0x7F800000 
和 0xFF800000。</p> <p>你也许会好奇，既然整数 0x7F800000 等同于正无穷，那么 0x7F800001 又对应什么浮点数呢？</p> <p>这个数字对应的浮点数是 
NaN（Not-a-Number）。</p> <p>不仅如此，[0x7F800001, 0x7FFFFFFF] 和 [0xFF800001, 0xFFFFFFFF] 对应的都是 NaN。当然，一般我们计算得出的 
NaN，比如说通过 +0.0F/+0.0F，在内存中应为 0x7FC00000。这个数值，我们称之为标准的 NaN，而其他的我们称之为不标准的 NaN。</p> <p>NaN 有一个有趣的特性：除了“!=”始终返回 
true 之外，所有其他比较结果都会返回 false。</p> <p>举例来说，“NaN&lt;1.0F”返回 false，而“NaN&gt;=1.0F”同样返回 false。对于任意浮点数 
f，不管它是 0 还是 NaN，“f!=NaN”始终会返回 true，而“f==NaN”始终会返回 false。</p> <p>因此，我们在程序里做浮点数比较的时候，需要考虑上述特性。在本专栏的第二部分，我会介绍这个特性给向量化比较带来什么麻烦。</p> 
<h2>Java 基本类型的大小</h2> <p>在第一篇中我曾经提到，Java 虚拟机每调用一个 Java 方法，便会创建一个栈帧。为了方便理解，这里我只讨论供解释器使用的解释栈帧（interpreted 
frame）。</p> <p>这种栈帧有两个主要的组成部分，分别是局部变量区，以及字节码的操作数栈。这里的局部变量是广义的，除了普遍意义下的局部变量之外，它还包含实例方法的“this 
指针”以及方法所接收的参数。</p> <p>在 Java 虚拟机规范中，局部变量区等价于一个数组，并且可以用正整数来索引。除了 long、double 值需要用两个数组单元来存储之外，其他基本类型以及引用类型的值均占用一个数组单元。</p> 
<p>也就是说，boolean、byte、char、short 这四种类型，在栈上占用的空间和 int 是一样的，和引用类型也是一样的。因此，在 32 位的 HotSpot 中，这些类型在栈上将占用 
4 个字节；而在 64 位的 HotSpot 中，他们将占 8 个字节。</p> <p>当然，这种情况仅存在于局部变量，而并不会出现在存储于堆中的字段或者数组元素上。对于 byte、char 
以及 short 这三种类型的字段或者数组单元，它们在堆上占用的空间分别为一字节、两字节，以及两字节，也就是说，跟这些类型的值域相吻合。</p> <p>因此，当我们将一个 int 类型的值，存储到这些类型的字段或数组时，相当于做了一次隐式的掩码操作。举例来说，当我们把 
0xFFFFFFFF（-1）存储到一个声明为 char 类型的字段里时，由于该字段仅占两字节，所以高两位的字节便会被截取掉，最终存入“\uFFFF”。</p> <p>boolean 
字段和 boolean 数组则比较特殊。在 HotSpot 中，boolean 字段占用一字节，而 boolean 数组则直接用 byte 数组来实现。为了保证堆中的 boolean 
值是合法的，HotSpot 在存储时显式地进行掩码操作，也就是说，只取最后一位的值存入 boolean 字段或数组中。</p> <p>讲完了存储，现在我来讲讲加载。Java 虚拟机的算数运算几乎全部依赖于操作数栈。也就是说，我们需要将堆中的 
boolean、byte、char 以及 short 加载到操作数栈上，而后将栈上的值当成 int 类型来运算。</p> <p>对于 boolean、char 这两个无符号类型来说，加载伴随着零扩展。举个例子，char 
的大小为两个字节。在加载时 char 的值会被复制到 int 类型的低二字节，而高二字节则会用 0 来填充。</p> <p>对于 byte、short 这两个类型来说，加载伴随着符号扩展。举个例子，short 
的大小为两个字节。在加载时 short 的值同样会被复制到 int 类型的低二字节。如果该 short 值为非负数，即最高位为 0，那么该 int 类型的值的高二字节会用 0 来填充，否则用 
1 来填充。</p> <h2>总结与实践</h2> <p>今天我介绍了 Java 里的基本类型。</p> <p>其中，boolean 类型在 Java 虚拟机中被映射为整数类型：“true”被映射为 
1，而“false”被映射为 0。Java 代码中的逻辑运算以及条件跳转，都是用整数相关的字节码来实现的。</p> <p>除 boolean 类型之外，Java 还有另外 7 个基本类型。它们拥有不同的值域，但默认值在内存中均为 
0。这些基本类型之中，浮点类型比较特殊。基于它的运算或比较，需要考虑 +0.0F、-0.0F 以及 NaN 的情况。</p> <p>除 long 和 double 外，其他基本类型与引用类型在解释执行的方法栈帧中占用的大小是一致的，但它们在堆中占用的大小确不同。在将 
boolean、byte、char 以及 short 的值存入字段或者数组单元时，Java 虚拟机会进行掩码操作。在读取时，Java 虚拟机则会将其扩展为 int 类型。</p> <p>今天的动手环节，你可以观测一下，将 
boolean 类型的值存入字段中时，Java 虚拟机所做的掩码操作。</p> <p>你可以将下面代码中 boolValue = true 里的 true 换为 2 或者 3，看看打印结果与你的猜测是否相符合。</p> 
<p>熟悉 Unsafe 的同学，可以使用 Unsafe.putBoolean 和 Unsafe.putByte 方法，看看还会不会做掩码操作。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static boolean boolValue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> boolValue = true; // 将这个 true 替换为 2 或者 3，再看看打印结果 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (boolValue) System.out.println("Hello, 
Java!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (boolValue 
== true) System.out.println("Hello, JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.856 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=43 
 {executed in 1 msec}
2020-11-19 20:20:16.858 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:16.861 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=43 
 {executed in 1 msec}
2020-11-19 20:20:16.862 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:20:16.870 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788416, 1605788416, 1, 'zh-hans', 0, 1, 1, 
0, '02丨Java的基本类型', 1, 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.876 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=43 
 {executed in 1 msec}
2020-11-19 20:20:16.878 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:16.885 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788416, 1605788416, 1, 'zh-hans', 0, 
1, 1, 0, '02丨Java的基本类型', 'book', 1, 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.892 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.893 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:16.897 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.899 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:16.906 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/ae762b75e2e0b2f2ae0bc47a90107a21?bkt=en-4d166c0718877615810e67bea8f44263ec175c41ac6433b1b5265b8e79be2f3f480395de568a8aa2&fid=3757516097-778750-256579763436274&time=1605788415&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-zCJY8vv72OSo4fetHCR71NMQu5I%3D&to=92&size=6473422&sta_dx=6473422&sta_cs=4432&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182957&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6473422&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-0aa116952080bb811e74d7d29ded77ebe35b3c447079a8b2981c71ddd517b326a6cc75284d67f45e&sl=76480590&expires=8h&rt=pr&r=919829230&mlogid=7510935467476269734&vbdid=64799653&fin=02%E4%B8%A8Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.mp3&bflag=92,34-92&rtype=1&dp-logid=7510935467476269734&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=12146e4ffd7df3c944a1130ecf80262a8c8f5a4048d5e7d7305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=02%E4%B8%A8Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.mp3', 
43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.913 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.915 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:16.923 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/ae762b75e2e0b2f2ae0bc47a90107a21?bkt=en-4d166c0718877615810e67bea8f44263ec175c41ac6433b1b5265b8e79be2f3f480395de568a8aa2&fid=3757516097-778750-256579763436274&time=1605788415&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-zCJY8vv72OSo4fetHCR71NMQu5I%3D&to=92&size=6473422&sta_dx=6473422&sta_cs=4432&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182957&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6473422&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-0aa116952080bb811e74d7d29ded77ebe35b3c447079a8b2981c71ddd517b326a6cc75284d67f45e&sl=76480590&expires=8h&rt=pr&r=919829230&mlogid=7510935467476269734&vbdid=64799653&fin=02%E4%B8%A8Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.mp3&bflag=92,34-92&rtype=1&dp-logid=7510935467476269734&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=12146e4ffd7df3c944a1130ecf80262a8c8f5a4048d5e7d7305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=02%E4%B8%A8Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.mp3', 
43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:16.929 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.930 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:16.934 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:16.935 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:16.947 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b2/002398d6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>丨落灬小莫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">138</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当替换为2的时候无输出 <br>当替换为3的时候打印HelloJava及HelloJVM 
<br>猜测是因为将boolean 保存在静态域中,指定了其类型为''Z'',当修改为2时取低位最后一位为0,当修改为3时取低位最后一位为1 <br>则说明boolean的掩码处理是取低位的最后一位 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/2a/462d01db.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金蝉子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">30</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师可以讲下ASM、Unsafe和CAS的底层原理吗？这块儿一直是个拦路虎，谢谢！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: ASM你指的是那个字节码工程包吗？是的话那就是一个提供了字节码抽象的工具，允许用Java代码来生成或者更改字节码。JDK里也会用到ASM，用来生成一些适配器什么的。我印象中代码覆盖工具JaCoCo也是用ASM来实现的。<br><br>Unsafe就是一些不被虚拟机控制的内存操作的合集。具体想要了解哪个API？<br><br>CAS可以理解为原子性的写操作，这个概念来自于底层CPU指令。Unsafe提供了一些cas的Java接口，在即时编译器中我们会将对这些接口的调用替换成具体的CPU指令。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">25</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Unsafe.putBoolean和Unsafe.puByte是native实现 <br> 
<br>putBoolean和putByte也是通过宏SET_FIELD模板出的函数 <br> <br>#define SET_FIELD(obj, offset, type_name, 
x) \ <br>&nbsp;&nbsp;oop p = JNIHandles::resolve(obj); \ <br>&nbsp;&nbsp;*(type_name*)index_oop_from_field_offset_long(p, 
offset) = truncate_##type_name(x) <br> <br>unsafe.cpp中定义宏做truncate <br>#define truncate_jboolean(x) 
((x) &amp; 1) <br>#define truncate_jbyte(x) (x) <br>#define truncate_jshort(x) (x) <br>#define 
truncate_jchar(x) (x) <br>#define truncate_jint(x) (x) <br>#define truncate_jlong(x) (x) <br>#define 
truncate_jfloat(x) (x) <br>#define truncate_jdouble(x) (x) <br> <br>综上：unsafe.Put*不会对值做修改 <br>------------------------------------------------------------------------------------ 
<br>getBoolean和getByte也是通过宏GET_FIELD模板出的函数 <br> <br>#define GET_FIELD(obj, offset, type_name, 
v) \ <br>&nbsp;&nbsp;oop p = JNIHandles::resolve(obj); \ <br>&nbsp;&nbsp;type_name v = *(type_name*)index_oop_from_field_offset_long(p, 
offset) <br> <br>综上，unsafe.Get*不会对值做修改 <br>------------------------------------------------------------------------------------ 
<br>验证： <br>unsafe.putByte(foo, addr, (byte)2); // 设置为: 2 <br>System.out.println(unsafe.getByte(foo, 
addr)); // 打印getByte: 2 <br>System.out.println(unsafe.getBoolean(foo, addr)); // 打印getBoolean: 
true <br> <br>unsafe.putByte(foo, addr, (byte)1); // 设置为: 1 <br>System.out.println(unsafe.getByte(foo, 
addr)); // 打印getByte: 1 <br>System.out.println(unsafe.getBoolean(foo, addr)); // 打印getBoolean: 
true <br>------------------------------------------------------------------------------------ 
<br>疑问： <br>if(foo.flag)判断，使用getfield&nbsp;&nbsp;&nbsp;&nbsp;Field flag:"Z"，执行逻辑等于：0 ！= flag 
<br>if(foo.getFlag())判断，使用invokevirtual&nbsp;&nbsp;&nbsp;&nbsp;Method getFlag:"()Z"，执行逻辑等于： 
0 != （(flag) &amp; 1） <br> <br>求大神帮忙解答 <br> <br>-------------------------- <br>附getFlag jasm码： 
<br>public Method getFlag:"()Z" <br>&nbsp;&nbsp;&nbsp;&nbsp;stack 1 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aload_0; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getfield&nbsp;&nbsp;&nbsp;&nbsp;Field flag:"Z"; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ireturn; <br>} <br> <br> <br> <br>https://gist.github.com/qudongfang/49635d86882c03e49cff2b0f7d833805 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 研究得非常深入！<br><br>Unsafe.putBoolean会做掩码，另外方法返回也会对boolean 
byte char short进行掩码</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/46/75/9f80409f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>追梦</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有个地方初看不易看懂，我来解释下： <br>&nbsp;&nbsp;&nbsp;&nbsp;作者一开始放的“吃没吃饭”的例子中boolean变量是局部变量，存放在Java方法栈的栈帧中的局部变量区，占据一个数据单元，无需做掩码；最后的例子中boolean变量是成员变量，存储在堆中的对象实例里，占有一个字节，且需要对最后一位做掩码 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e0/9f/9259a6b9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kyle</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，文中看你说到： <br>“也就是说，boolean、byte、char、short 
这四种类型，在栈上占用的空间和 int 是一样的，和引用类型也是一样的。因此，在 32 位的 HotSpot 中，这些类型在栈上将占用 4 个字节；而在 64 位的 HotSpot 
中，他们将占 8 个字节。” <br> <br>但是我记得boolean在内存中占1字节，char占2字节，这里是什么个意思？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
你说的是在堆里的情况。在解释器栈上是不一样的。至于原因吗，主要是变长数组不好控制，所以就选择浪费一些空间，以便访问时直接通过下标来计算地址。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/cf/e82cd26b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_dde3a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好，在内存中都是0，那么是如何区别是哪种类型数据的呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 内存中是不做区分的。Java程序想要把它解读成什么类型，它就是什么类型。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>life is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，我刚来订阅，所以才开始看。 <br>有一个疑问，您的原文“因此，在 
32 位的 HotSpot 中，这些类型在栈上将占用 4 个字节；而在 64 位的 HotSpot 中，他们将占 8 个字节。”。但是有一句话，java一次编译，到处运行。计算机位数不一样的话，导致一样类型的size不一样，还可以到处运行吗？这里指的到处运行，是不是需要同位啊？比如32位的编译只能在32位的机器上运行，64只能在64的上运行。能互相兼容运行嘛？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/1c/a1/3e603646.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>午夜的汽笛</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这节看的很吃力，对什么掩码，子码，反码，补码都换给大学老师了。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>落叶飞逝的...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 其实那个boolean的true虚拟机里面为1，也就是if(true==吃了没)其实可以替换成if(1==2)这样理解吧 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9f/23/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>dong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉"吃饭了"例子，弄得有点饶了。也有些地方语句的起承转合不是很通顺，个人理解。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/ca/40/91fdbc7d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>andy</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我替换成2和3,都只能打印出一个Hello Java为什么呢？下面是AsmTools反编译代码 
<br>super public class Foo <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;version 52:0 
<br>{ <br> <br>static Field boolValue:Z; <br> <br>public Method "&lt;init&gt;":"()V" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack 
1 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aload_0; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokespecial 
Method java/lang/Object."&lt;init&gt;":"()V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
<br>} <br> <br>public static Method main:"([Ljava/lang/String;)V" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack 
2 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconst_2; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifeq 
L18; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field java/lang/System.out:"Ljava/io/PrintStream;"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ldc 
String "Hello, Java!"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokevirtual 
Method java/io/PrintStream.println:"(Ljava/lang/String;)V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L18: 
stack_frame_type same; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconst_1; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if_icmpne 
L33; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field java/lang/System.out:"Ljava/io/PrintStream;"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ldc 
String "Hello, JVM!"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokevirtual 
Method java/io/PrintStream.println:"(Ljava/lang/String;)V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L33: 
stack_frame_type same; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
<br>} <br> <br>} // end Class Foo </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 局部变量中基本数据类型存储在栈中，变量的变量名(引用符号)和变量值(字面量)都存储在栈中。 
<br>局部变量中引用数据类型的引用地址存储在栈中，对象的实例数据存储在堆中，类型数据存储在方法区 <br>全局变量的基本数据类型和引用数据类型，都存储在堆中。 <br>不知理解的是否正确 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoDkJkd9xYU4aiaTS5P49UmWOM1Nu4KYeTeHRiakf0Z1D2Y93usfavclvGo3I1CHWY26AjMlhVM1cJQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Invincible...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-29 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么我不能让boolvalue＝2或者3…… </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 因为javac不支持这种操作，它把boolean是用int实现的这种虚拟机的实现细节给隐藏起来了，从而使得在语言层面没有这种会引起歧义的值。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> NaN 有一个有趣的特性：除了“!= 始终返回 true”之外，所有其他比较结果都会返回 
false。这句话好拗口啊，双引号的标点符号有问题吧 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！应该是 “!=“</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/02/62/aeb735d2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>梧桐树</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果64位处理器，long 和double和其它类型一样都是8个字节码在栈中 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沉淀的梦想</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么我替换成2和3，但是现象和第一讲的时候一样呢？都只能打印出一个Hello Java，我反复检查也没发现什么问题，这有可能是什么原因呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/9b/09/9a126d45.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>daybreak</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好，我一点不理解。为什么“吃过饭没”的值为0时跳转，不应该值为1时跳转吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/53/3b/48ce5172.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Arvin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当改为2或者3时则出现编译错误是则么回事！！！！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoo9tf9HsbEMDfUaS3GHFzb8q0EZnUXB9h7qPwBVhCYWU2fuwXU2ibo0obnKvAib3cuNusyl9SBGKMQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>crystal</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，有个问题请教:第一个例子将过饭没改为2,会输出吃过了；第二个例子将boolValue改为2，却不输出信息。两个变量值都是2,为什么输出的结果会不同？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 因此，当我们将一个 int 类型的值，存储到这些类型的字段或数组时，相当于做了一次隐式的掩码操作。 
<br>为了保证堆中的 boolean 值是合法的，HotSpot 在存储时显式地进行掩码操作，也就是说，只取最后一位的值存入 boolean 字段或数组中。 <br> <br>为什么一个是隐式一个是显式 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 43, 43) 
 {executed in 3 msec}
2020-11-19 20:20:16.958 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=43 
 {executed in 2 msec}
2020-11-19 20:20:16.959 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:16.970 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b2/002398d6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>丨落灬小莫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">138</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当替换为2的时候无输出 <br>当替换为3的时候打印HelloJava及HelloJVM 
<br>猜测是因为将boolean 保存在静态域中,指定了其类型为''Z'',当修改为2时取低位最后一位为0,当修改为3时取低位最后一位为1 <br>则说明boolean的掩码处理是取低位的最后一位 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/2a/462d01db.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金蝉子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">30</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师可以讲下ASM、Unsafe和CAS的底层原理吗？这块儿一直是个拦路虎，谢谢！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: ASM你指的是那个字节码工程包吗？是的话那就是一个提供了字节码抽象的工具，允许用Java代码来生成或者更改字节码。JDK里也会用到ASM，用来生成一些适配器什么的。我印象中代码覆盖工具JaCoCo也是用ASM来实现的。<br><br>Unsafe就是一些不被虚拟机控制的内存操作的合集。具体想要了解哪个API？<br><br>CAS可以理解为原子性的写操作，这个概念来自于底层CPU指令。Unsafe提供了一些cas的Java接口，在即时编译器中我们会将对这些接口的调用替换成具体的CPU指令。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">25</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Unsafe.putBoolean和Unsafe.puByte是native实现 <br> 
<br>putBoolean和putByte也是通过宏SET_FIELD模板出的函数 <br> <br>#define SET_FIELD(obj, offset, type_name, 
x) \ <br>&nbsp;&nbsp;oop p = JNIHandles::resolve(obj); \ <br>&nbsp;&nbsp;*(type_name*)index_oop_from_field_offset_long(p, 
offset) = truncate_##type_name(x) <br> <br>unsafe.cpp中定义宏做truncate <br>#define truncate_jboolean(x) 
((x) &amp; 1) <br>#define truncate_jbyte(x) (x) <br>#define truncate_jshort(x) (x) <br>#define 
truncate_jchar(x) (x) <br>#define truncate_jint(x) (x) <br>#define truncate_jlong(x) (x) <br>#define 
truncate_jfloat(x) (x) <br>#define truncate_jdouble(x) (x) <br> <br>综上：unsafe.Put*不会对值做修改 <br>------------------------------------------------------------------------------------ 
<br>getBoolean和getByte也是通过宏GET_FIELD模板出的函数 <br> <br>#define GET_FIELD(obj, offset, type_name, 
v) \ <br>&nbsp;&nbsp;oop p = JNIHandles::resolve(obj); \ <br>&nbsp;&nbsp;type_name v = *(type_name*)index_oop_from_field_offset_long(p, 
offset) <br> <br>综上，unsafe.Get*不会对值做修改 <br>------------------------------------------------------------------------------------ 
<br>验证： <br>unsafe.putByte(foo, addr, (byte)2); // 设置为: 2 <br>System.out.println(unsafe.getByte(foo, 
addr)); // 打印getByte: 2 <br>System.out.println(unsafe.getBoolean(foo, addr)); // 打印getBoolean: 
true <br> <br>unsafe.putByte(foo, addr, (byte)1); // 设置为: 1 <br>System.out.println(unsafe.getByte(foo, 
addr)); // 打印getByte: 1 <br>System.out.println(unsafe.getBoolean(foo, addr)); // 打印getBoolean: 
true <br>------------------------------------------------------------------------------------ 
<br>疑问： <br>if(foo.flag)判断，使用getfield&nbsp;&nbsp;&nbsp;&nbsp;Field flag:"Z"，执行逻辑等于：0 ！= flag 
<br>if(foo.getFlag())判断，使用invokevirtual&nbsp;&nbsp;&nbsp;&nbsp;Method getFlag:"()Z"，执行逻辑等于： 
0 != （(flag) &amp; 1） <br> <br>求大神帮忙解答 <br> <br>-------------------------- <br>附getFlag jasm码： 
<br>public Method getFlag:"()Z" <br>&nbsp;&nbsp;&nbsp;&nbsp;stack 1 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aload_0; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getfield&nbsp;&nbsp;&nbsp;&nbsp;Field flag:"Z"; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ireturn; <br>} <br> <br> <br> <br>https://gist.github.com/qudongfang/49635d86882c03e49cff2b0f7d833805 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 研究得非常深入！<br><br>Unsafe.putBoolean会做掩码，另外方法返回也会对boolean 
byte char short进行掩码</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/46/75/9f80409f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>追梦</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 有个地方初看不易看懂，我来解释下： <br>&nbsp;&nbsp;&nbsp;&nbsp;作者一开始放的“吃没吃饭”的例子中boolean变量是局部变量，存放在Java方法栈的栈帧中的局部变量区，占据一个数据单元，无需做掩码；最后的例子中boolean变量是成员变量，存储在堆中的对象实例里，占有一个字节，且需要对最后一位做掩码 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e0/9f/9259a6b9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kyle</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，文中看你说到： <br>“也就是说，boolean、byte、char、short 
这四种类型，在栈上占用的空间和 int 是一样的，和引用类型也是一样的。因此，在 32 位的 HotSpot 中，这些类型在栈上将占用 4 个字节；而在 64 位的 HotSpot 
中，他们将占 8 个字节。” <br> <br>但是我记得boolean在内存中占1字节，char占2字节，这里是什么个意思？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
你说的是在堆里的情况。在解释器栈上是不一样的。至于原因吗，主要是变长数组不好控制，所以就选择浪费一些空间，以便访问时直接通过下标来计算地址。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/cf/e82cd26b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_dde3a...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好，在内存中都是0，那么是如何区别是哪种类型数据的呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 内存中是不做区分的。Java程序想要把它解读成什么类型，它就是什么类型。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>life is ...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，我刚来订阅，所以才开始看。 <br>有一个疑问，您的原文“因此，在 
32 位的 HotSpot 中，这些类型在栈上将占用 4 个字节；而在 64 位的 HotSpot 中，他们将占 8 个字节。”。但是有一句话，java一次编译，到处运行。计算机位数不一样的话，导致一样类型的size不一样，还可以到处运行吗？这里指的到处运行，是不是需要同位啊？比如32位的编译只能在32位的机器上运行，64只能在64的上运行。能互相兼容运行嘛？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/1c/a1/3e603646.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>午夜的汽笛</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这节看的很吃力，对什么掩码，子码，反码，补码都换给大学老师了。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>落叶飞逝的...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 其实那个boolean的true虚拟机里面为1，也就是if(true==吃了没)其实可以替换成if(1==2)这样理解吧 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9f/23/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>dong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉"吃饭了"例子，弄得有点饶了。也有些地方语句的起承转合不是很通顺，个人理解。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢建议</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/ca/40/91fdbc7d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>andy</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我替换成2和3,都只能打印出一个Hello Java为什么呢？下面是AsmTools反编译代码 
<br>super public class Foo <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;version 52:0 
<br>{ <br> <br>static Field boolValue:Z; <br> <br>public Method "&lt;init&gt;":"()V" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack 
1 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aload_0; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokespecial 
Method java/lang/Object."&lt;init&gt;":"()V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
<br>} <br> <br>public static Method main:"([Ljava/lang/String;)V" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack 
2 locals 1 <br>{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconst_2; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifeq 
L18; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field java/lang/System.out:"Ljava/io/PrintStream;"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ldc 
String "Hello, Java!"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokevirtual 
Method java/io/PrintStream.println:"(Ljava/lang/String;)V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L18: 
stack_frame_type same; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field boolValue:"Z"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconst_1; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if_icmpne 
L33; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getstatic 
Field java/lang/System.out:"Ljava/io/PrintStream;"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ldc 
String "Hello, JVM!"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokevirtual 
Method java/io/PrintStream.println:"(Ljava/lang/String;)V"; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L33: 
stack_frame_type same; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
<br>} <br> <br>} // end Class Foo </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 局部变量中基本数据类型存储在栈中，变量的变量名(引用符号)和变量值(字面量)都存储在栈中。 
<br>局部变量中引用数据类型的引用地址存储在栈中，对象的实例数据存储在堆中，类型数据存储在方法区 <br>全局变量的基本数据类型和引用数据类型，都存储在堆中。 <br>不知理解的是否正确 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoDkJkd9xYU4aiaTS5P49UmWOM1Nu4KYeTeHRiakf0Z1D2Y93usfavclvGo3I1CHWY26AjMlhVM1cJQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Invincible...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-29 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么我不能让boolvalue＝2或者3…… </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 因为javac不支持这种操作，它把boolean是用int实现的这种虚拟机的实现细节给隐藏起来了，从而使得在语言层面没有这种会引起歧义的值。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> NaN 有一个有趣的特性：除了“!= 始终返回 true”之外，所有其他比较结果都会返回 
false。这句话好拗口啊，双引号的标点符号有问题吧 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！应该是 “!=“</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/02/62/aeb735d2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>梧桐树</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 如果64位处理器，long 和double和其它类型一样都是8个字节码在栈中 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沉淀的梦想</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么我替换成2和3，但是现象和第一讲的时候一样呢？都只能打印出一个Hello Java，我反复检查也没发现什么问题，这有可能是什么原因呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/9b/09/9a126d45.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>daybreak</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好，我一点不理解。为什么“吃过饭没”的值为0时跳转，不应该值为1时跳转吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/53/3b/48ce5172.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Arvin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 当改为2或者3时则出现编译错误是则么回事！！！！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoo9tf9HsbEMDfUaS3GHFzb8q0EZnUXB9h7qPwBVhCYWU2fuwXU2ibo0obnKvAib3cuNusyl9SBGKMQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>crystal</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，有个问题请教:第一个例子将过饭没改为2,会输出吃过了；第二个例子将boolValue改为2，却不输出信息。两个变量值都是2,为什么输出的结果会不同？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/aa/c7725dd8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ennis LM</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 因此，当我们将一个 int 类型的值，存储到这些类型的字段或数组时，相当于做了一次隐式的掩码操作。 
<br>为了保证堆中的 boolean 值是合法的，HotSpot 在存储时显式地进行掩码操作，也就是说，只取最后一位的值存入 boolean 字段或数组中。 <br> <br>为什么一个是隐式一个是显式 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 43, 43) 
 {executed in 2 msec}
2020-11-19 20:20:16.999 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:17.002 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:17.007 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:17.009 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:17.016 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 43, 'https://static001.geekbang.org/resource/image/58/d9/58cad5fc07b171fb6f6b978fcd5241d9.jpg', 
43) 
 {executed in 1 msec}
2020-11-19 20:20:17.027 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:17.028 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:17.043 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 43, 'https://static001.geekbang.org/resource/image/58/d9/58cad5fc07b171fb6f6b978fcd5241d9.jpg', 
43) 
 {executed in 8 msec}
2020-11-19 20:20:17.048 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:17.050 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:17.057 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 43, 43) 
 {executed in 1 msec}
2020-11-19 20:20:17.062 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=43 
 {executed in 1 msec}
2020-11-19 20:20:17.064 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:17.070 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 43, 43) 
 {executed in 0 msec}
2020-11-19 20:20:17.076 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='913931882106832' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:20:17.077 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:47.096 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='913931882106832' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:20:47.101 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:47.110 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('913931882106832', 1, 'net_content') 
 {executed in 2 msec}
2020-11-19 20:20:47.114 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('913931882106832', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:20:47.119 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|87            |
|--------------|

2020-11-19 20:20:47.164 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='913931882106832' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:20:47.165 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:47.571 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='913931882106832' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:20:47.572 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:20:47.575 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('913931882106832', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:20:47.577 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('913931882106832', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:20:47.578 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|88            |
|--------------|

2020-11-19 20:20:47.593 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='913931882106832' 
 {executed in 1 msec}
2020-11-19 20:20:47.594 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.598 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788447, 1) 
 {executed in 1 msec}
2020-11-19 20:20:47.599 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788447, 1) 
 {executed in 0 msec}
2020-11-19 20:20:47.600 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|44            |
|--------------|

2020-11-19 20:20:47.611 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '0faacba4-72bd-40cb-b069-f784500e13c5', 
44) 
 {executed in 1 msec}
2020-11-19 20:20:47.612 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '0faacba4-72bd-40cb-b069-f784500e13c5', 44) 
 {executed in 0 msec}
2020-11-19 20:20:47.613 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|44            |
|--------------|

2020-11-19 20:20:47.628 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=44, revision_default=1, revision_timestamp=1605788447, 
revision_uid=1 where vid=44 
 {executed in 1 msec}
2020-11-19 20:20:47.634 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.635 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.642 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '913931882106832', 'zh-hans', 44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.648 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.650 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.657 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '913931882106832', 'zh-hans', 44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.662 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=44 
 {executed in 0 msec}
2020-11-19 20:20:47.664 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:47.667 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=44 
 {executed in 1 msec}
2020-11-19 20:20:47.669 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:47.676 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 44, 0, 0, 32, 0, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.681 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.683 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:47.686 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.688 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:47.698 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>我们学院的一位教授之前去美国开会，入境的时候海关官员就问他：既然你会计算机，那你说说你用的都是什么语言吧？</p> 
<p>教授随口就答了个 Java。海关一看是懂行的，也就放行了，边敲章还边说他们上学那会学的是 C+。我还特意去查了下，真有叫 C+ 的语言，但是这里海关官员应该指的是 C++。</p> 
<p>事后教授告诉我们，他当时差点就问海关，是否知道 Java 和 C++ 在运行方式上的区别。但是又担心海关官员拿他的问题来考别人，也就没问出口。那么，下次你去美国，不幸地被海关官员问这个问题，你懂得如何回答吗？</p> 
<p>作为一名 Java 程序员，你应该知道，Java 代码有很多种不同的运行方式。比如说可以在开发工具中运行，可以双击执行 jar 文件运行，也可以在命令行中运行，甚至可以在网页中运行。当然，这些执行方式都离不开 
JRE，也就是 Java 运行时环境。</p> <p>实际上，JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。我们 Java 程序员经常接触到的 
JDK（Java 开发工具包）同样包含了 JRE，并且还附带了一系列开发、诊断工具。</p> <p>然而，运行 C++ 代码则无需额外的运行时。我们往往把这些代码直接编译成 CPU 
所能理解的代码格式，也就是机器码。</p><!-- [[[read_end]]] --> <p>比如下图的中间列，就是用 C 语言写的 Helloworld 程序的编译结果。可以看到，C 
程序编译而成的机器码就是一个个的字节，它们是给机器读的。那么为了让开发人员也能够理解，我们可以用反汇编器将其转换成汇编代码（如下图的最右列所示）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
; 最左列是偏移；中间列是给机器读的机器码；最右列是给人读的汇编代码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 0x00: 55 push rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x01: 48 89 e5 mov rbp,rsp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x04: 48 83 ec 10 sub rsp,0x10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x08: 48 8d 3d 3b 00 00 00 lea rdi,[rip+0x3b] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ; 加载 "Hello, World!\n" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0f: c7 45 fc 00 00 00 00 mov DWORD PTR 
[rbp-0x4],0x0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x16: b0 00 mov al,0x0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x18: e8 0d 00 00 00 call 0x12 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
; 调用 printf 方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x1d: 31 c9 xor ecx,ecx </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x1f: 89 45 f8 mov DWORD PTR [rbp-0x8],eax </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x22: 89 c8 mov eax,ecx </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x24: 48 83 c4 10 add rsp,0x10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x28: 5d pop rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x29: c3 ret </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>既然 C++ 的运行方式如此成熟，那么你有没有想过，为什么 Java 要在虚拟机中运行呢，Java 
虚拟机具体又是怎样运行 Java 代码的呢，它的运行效率又如何呢？</p> <p>今天我便从这几个问题入手，和你探讨一下，Java 执行系统的主流实现以及设计决策。</p> <h2>为什么 
Java 要在虚拟机里运行？</h2> <p>Java 作为一门高级程序语言，它的语法非常复杂，抽象程度也很高。因此，直接在硬件上运行这种复杂的程序并不现实。所以呢，在运行 Java 
程序之前，我们需要对其进行一番转换。</p> <p>这个转换具体是怎么操作的呢？当前的主流思路是这样子的，设计一个面向 Java 语言特性的虚拟机，并通过编译器将 Java 程序转换成该虚拟机所能识别的指令序列，也称 
Java 字节码。这里顺便说一句，之所以这么取名，是因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</p> <p>举例来说，下图的中间列，正是用 Java 写的 
Helloworld 程序编译而成的字节码。可以看到，它与 C 版本的编译结果一样，都是由一个个字节组成的。</p> <p>并且，我们同样可以将其反汇编为人类可读的代码格式（如下图的最右列所示）。不同的是，Java 
版本的编译结果相对精简一些。这是因为 Java 虚拟机相对于物理机而言，抽象程度更高。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> # 最左列是偏移；中间列是给虚拟机读的机器码；最右列是给人读的代码 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00: b2 00 02 getstatic java.lang.System.out 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x03: 12 03 ldc "Hello, World!" </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x05: b6 00 04 invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x08: b1 return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>Java 虚拟机可以由硬件实现 [1]，但更为常见的是在各个现有平台（如 Windows_x64、Linux_aarch64）上提供软件实现。这么做的意义在于，一旦一个程序被转换成 
Java 字节码，那么它便可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</p> <p>虚拟机的另外一个好处是它带来了一个托管环境（Managed 
Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。其中最广为人知的当属自动内存管理与垃圾回收，这部分内容甚至催生了一波垃圾回收调优的业务。</p> <p>除此之外，托管环境还提供了诸如数组越界、动态类型、安全权限等等的动态检测，使我们免于书写这些无关业务逻辑的代码。</p> 
<h2>Java 虚拟机具体是怎样运行 Java 字节码的？</h2> <p>下面我将以标准 JDK 中的 HotSpot 虚拟机为例，从虚拟机以及底层硬件两个角度，给你讲一讲 Java 
虚拟机具体是怎么运行 Java 字节码的。</p> <p>从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。加载后的 Java 
类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。</p> <p>如果你熟悉 X86 的话，你会发现这和段式内存管理中的代码段类似。而且，Java 
虚拟机同样也在内存中划分出堆和栈来存储运行时数据。</p> <p>不同的是，Java 虚拟机会将栈细分为面向 Java 方法的 Java 方法栈，面向本地方法（用 C++ 写的 native 
方法）的本地方法栈，以及存放各个线程执行位置的 PC 寄存器。</p> <p><img src="https://static001.geekbang.org/resource/image/ab/77/ab5c3523af08e0bf2f689c1d6033ef77.png" 
alt=""></p> <p>在运行过程中，每当调用进入一个 Java 方法，Java 虚拟机会在当前线程的 Java 方法栈中生成一个栈帧，用以存放局部变量以及字节码的操作数。这个栈帧的大小是提前计算好的，而且 
Java 虚拟机不要求栈帧在内存空间里连续分布。</p> <p>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</p> 
<p>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</p> <p>在 HotSpot 里面，上述翻译过程有两种形式：第一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时编译（Just-In-Time 
compilation，JIT），即将一个方法中包含的所有字节码编译成机器码后再执行。</p> <p><img src="https://static001.geekbang.org/resource/image/5e/3b/5ee351091464de78eed75438b6f9183b.png" 
alt=""></p> <p>前者的优势在于无需等待编译，而后者的优势在于实际运行速度更快。HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</p> 
<h2>Java 虚拟机的运行效率究竟是怎么样的？</h2> <p>HotSpot 采用了多种技术来提升启动性能以及峰值性能，刚刚提到的即时编译便是其中最重要的技术之一。</p> <p>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</p> 
<p>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</p> 
<p>理论上讲，即时编译后的 Java 程序的执行效率，是可能超过 C++ 程序的。这是因为与静态编译相比，即时编译拥有程序的运行时信息，并且能够根据这个信息做出相应的优化。</p> 
<p>举个例子，我们知道虚方法是用来实现面向对象语言多态性的。对于一个虚方法调用，尽管它有很多个目标方法，但在实际运行过程中它可能只调用其中的一个。</p> <p>这个信息便可以被即时编译器所利用，来规避虚方法调用的开销，从而达到比静态编译的 
C++ 程序更高的性能。</p> <p>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。Graal 是 Java 10 正式引入的实验性即时编译器，在专栏的第四部分我会详细介绍，这里暂不做讨论。</p> 
<p>之所以引入多个即时编译器，是为了在编译时间和生成代码的执行效率之间进行取舍。C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</p> 
<p>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</p> <p>从 Java 
7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</p> <p>为了不干扰应用的正常运行，HotSpot 
的即时编译是放在额外的编译线程中进行的。HotSpot 会根据 CPU 的数量设置编译线程的数目，并且按 1:2 的比例配置给 C1 及 C2 编译器。</p> <p>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。</p> 
<h2>总结与实践</h2> <p>今天我简单介绍了 Java 代码为何在虚拟机中运行，以及如何在虚拟机中运行。</p> <p>之所以要在虚拟机中运行，是因为它提供了可移植性。一旦 
Java 代码被编译为 Java 字节码，便可以在不同平台上的 Java 虚拟机实现上运行。此外，虚拟机还提供了一个代码托管的环境，代替我们处理部分冗长而且容易出错的事务，例如内存管理。</p> 
<p>Java 虚拟机将运行时内存区域划分为五个部分，分别为方法区、堆、PC 寄存器、Java 方法栈和本地方法栈。Java 程序编译而成的 class 文件，需要先加载至方法区中，方能在 
Java 虚拟机中运行。</p> <p>为了提高运行效率，标准 JDK 中的 HotSpot 虚拟机采用的是一种混合执行的策略。</p> <p>它会解释执行 Java 字节码，然后会将其中反复执行的热点代码，以方法为单位进行即时编译，翻译成机器码后直接运行在底层硬件之上。</p> 
<p>HotSpot 装载了多个不同的即时编译器，以便在编译时间和生成代码的执行效率之间做取舍。</p> <p>下面我给你留一个小作业，通过观察两个条件判断语句的运行结果，来思考 Java 
语言和 Java 虚拟机看待 boolean 类型的方式是否不同。</p> <p>下载 asmtools.jar [2] ，并在命令行中运行下述指令（不包含提示符 $）：</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean flag = true; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag) System.out.println("Hello, Java!"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag == true) System.out.println("Hello, 
JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }'' &gt; Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ javac Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java Foo </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main 
Foo.class &gt; Foo.jasm.1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ awk ''NR==1,/iconst_1/{sub(/iconst_1/, "iconst_2")} 1'' Foo.jasm.1 &gt; Foo.jasm </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java 
Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] : <a href="https://en.wikipedia.org/wiki/Java_processor">https://en.wikipedia.org/wiki/Java_processor</a><br> 
[2]: <a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 44, 44) 
 {executed in 2 msec}
2020-11-19 20:20:47.705 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.707 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:47.716 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>我们学院的一位教授之前去美国开会，入境的时候海关官员就问他：既然你会计算机，那你说说你用的都是什么语言吧？</p> <p>教授随口就答了个 
Java。海关一看是懂行的，也就放行了，边敲章还边说他们上学那会学的是 C+。我还特意去查了下，真有叫 C+ 的语言，但是这里海关官员应该指的是 C++。</p> <p>事后教授告诉我们，他当时差点就问海关，是否知道 
Java 和 C++ 在运行方式上的区别。但是又担心海关官员拿他的问题来考别人，也就没问出口。那么，下次你去美国，不幸地被海关官员问这个问题，你懂得如何回答吗？</p> <p>作为一名 
Java 程序员，你应该知道，Java 代码有很多种不同的运行方式。比如说可以在开发工具中运行，可以双击执行 jar 文件运行，也可以在命令行中运行，甚至可以在网页中运行。当然，这些执行方式都离不开 
JRE，也就是 Java 运行时环境。</p> <p>实际上，JRE 仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。我们 Java 程序员经常接触到的 
JDK（Java 开发工具包）同样包含了 JRE，并且还附带了一系列开发、诊断工具。</p> <p>然而，运行 C++ 代码则无需额外的运行时。我们往往把这些代码直接编译成 CPU 
所能理解的代码格式，也就是机器码。</p><!-- [[[read_end]]] --> <p>比如下图的中间列，就是用 C 语言写的 Helloworld 程序的编译结果。可以看到，C 
程序编译而成的机器码就是一个个的字节，它们是给机器读的。那么为了让开发人员也能够理解，我们可以用反汇编器将其转换成汇编代码（如下图的最右列所示）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
; 最左列是偏移；中间列是给机器读的机器码；最右列是给人读的汇编代码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 0x00: 55 push rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x01: 48 89 e5 mov rbp,rsp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x04: 48 83 ec 10 sub rsp,0x10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x08: 48 8d 3d 3b 00 00 00 lea rdi,[rip+0x3b] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ; 加载 "Hello, World!\n" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0f: c7 45 fc 00 00 00 00 mov DWORD PTR 
[rbp-0x4],0x0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x16: b0 00 mov al,0x0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x18: e8 0d 00 00 00 call 0x12 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
; 调用 printf 方法 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x1d: 31 c9 xor ecx,ecx </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x1f: 89 45 f8 mov DWORD PTR [rbp-0x8],eax </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x22: 89 c8 mov eax,ecx </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x24: 48 83 c4 10 add rsp,0x10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x28: 5d pop rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x29: c3 ret </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>既然 C++ 的运行方式如此成熟，那么你有没有想过，为什么 Java 要在虚拟机中运行呢，Java 
虚拟机具体又是怎样运行 Java 代码的呢，它的运行效率又如何呢？</p> <p>今天我便从这几个问题入手，和你探讨一下，Java 执行系统的主流实现以及设计决策。</p> <h2>为什么 
Java 要在虚拟机里运行？</h2> <p>Java 作为一门高级程序语言，它的语法非常复杂，抽象程度也很高。因此，直接在硬件上运行这种复杂的程序并不现实。所以呢，在运行 Java 
程序之前，我们需要对其进行一番转换。</p> <p>这个转换具体是怎么操作的呢？当前的主流思路是这样子的，设计一个面向 Java 语言特性的虚拟机，并通过编译器将 Java 程序转换成该虚拟机所能识别的指令序列，也称 
Java 字节码。这里顺便说一句，之所以这么取名，是因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</p> <p>举例来说，下图的中间列，正是用 Java 写的 
Helloworld 程序编译而成的字节码。可以看到，它与 C 版本的编译结果一样，都是由一个个字节组成的。</p> <p>并且，我们同样可以将其反汇编为人类可读的代码格式（如下图的最右列所示）。不同的是，Java 
版本的编译结果相对精简一些。这是因为 Java 虚拟机相对于物理机而言，抽象程度更高。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> # 最左列是偏移；中间列是给虚拟机读的机器码；最右列是给人读的代码 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00: b2 00 02 getstatic java.lang.System.out 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x03: 12 03 ldc "Hello, World!" </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x05: b6 00 04 invokevirtual java.io.PrintStream.println 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x08: b1 return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>Java 虚拟机可以由硬件实现 [1]，但更为常见的是在各个现有平台（如 Windows_x64、Linux_aarch64）上提供软件实现。这么做的意义在于，一旦一个程序被转换成 
Java 字节码，那么它便可以在不同平台上的虚拟机实现里运行。这也就是我们经常说的“一次编写，到处运行”。</p> <p>虚拟机的另外一个好处是它带来了一个托管环境（Managed 
Runtime）。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。其中最广为人知的当属自动内存管理与垃圾回收，这部分内容甚至催生了一波垃圾回收调优的业务。</p> <p>除此之外，托管环境还提供了诸如数组越界、动态类型、安全权限等等的动态检测，使我们免于书写这些无关业务逻辑的代码。</p> 
<h2>Java 虚拟机具体是怎样运行 Java 字节码的？</h2> <p>下面我将以标准 JDK 中的 HotSpot 虚拟机为例，从虚拟机以及底层硬件两个角度，给你讲一讲 Java 
虚拟机具体是怎么运行 Java 字节码的。</p> <p>从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。加载后的 Java 
类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。</p> <p>如果你熟悉 X86 的话，你会发现这和段式内存管理中的代码段类似。而且，Java 
虚拟机同样也在内存中划分出堆和栈来存储运行时数据。</p> <p>不同的是，Java 虚拟机会将栈细分为面向 Java 方法的 Java 方法栈，面向本地方法（用 C++ 写的 native 
方法）的本地方法栈，以及存放各个线程执行位置的 PC 寄存器。</p> <p><img src="https://static001.geekbang.org/resource/image/ab/77/ab5c3523af08e0bf2f689c1d6033ef77.png" 
alt=""></p> <p>在运行过程中，每当调用进入一个 Java 方法，Java 虚拟机会在当前线程的 Java 方法栈中生成一个栈帧，用以存放局部变量以及字节码的操作数。这个栈帧的大小是提前计算好的，而且 
Java 虚拟机不要求栈帧在内存空间里连续分布。</p> <p>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</p> 
<p>从硬件视角来看，Java 字节码无法直接执行。因此，Java 虚拟机需要将字节码翻译成机器码。</p> <p>在 HotSpot 里面，上述翻译过程有两种形式：第一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时编译（Just-In-Time 
compilation，JIT），即将一个方法中包含的所有字节码编译成机器码后再执行。</p> <p><img src="https://static001.geekbang.org/resource/image/5e/3b/5ee351091464de78eed75438b6f9183b.png" 
alt=""></p> <p>前者的优势在于无需等待编译，而后者的优势在于实际运行速度更快。HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</p> 
<h2>Java 虚拟机的运行效率究竟是怎么样的？</h2> <p>HotSpot 采用了多种技术来提升启动性能以及峰值性能，刚刚提到的即时编译便是其中最重要的技术之一。</p> <p>即时编译建立在程序符合二八定律的假设上，也就是百分之二十的代码占据了百分之八十的计算资源。</p> 
<p>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</p> 
<p>理论上讲，即时编译后的 Java 程序的执行效率，是可能超过 C++ 程序的。这是因为与静态编译相比，即时编译拥有程序的运行时信息，并且能够根据这个信息做出相应的优化。</p> 
<p>举个例子，我们知道虚方法是用来实现面向对象语言多态性的。对于一个虚方法调用，尽管它有很多个目标方法，但在实际运行过程中它可能只调用其中的一个。</p> <p>这个信息便可以被即时编译器所利用，来规避虚方法调用的开销，从而达到比静态编译的 
C++ 程序更高的性能。</p> <p>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。Graal 是 Java 10 正式引入的实验性即时编译器，在专栏的第四部分我会详细介绍，这里暂不做讨论。</p> 
<p>之所以引入多个即时编译器，是为了在编译时间和生成代码的执行效率之间进行取舍。C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</p> 
<p>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</p> <p>从 Java 
7 开始，HotSpot 默认采用分层编译的方式：热点方法首先会被 C1 编译，而后热点方法中的热点会进一步被 C2 编译。</p> <p>为了不干扰应用的正常运行，HotSpot 
的即时编译是放在额外的编译线程中进行的。HotSpot 会根据 CPU 的数量设置编译线程的数目，并且按 1:2 的比例配置给 C1 及 C2 编译器。</p> <p>在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。</p> 
<h2>总结与实践</h2> <p>今天我简单介绍了 Java 代码为何在虚拟机中运行，以及如何在虚拟机中运行。</p> <p>之所以要在虚拟机中运行，是因为它提供了可移植性。一旦 
Java 代码被编译为 Java 字节码，便可以在不同平台上的 Java 虚拟机实现上运行。此外，虚拟机还提供了一个代码托管的环境，代替我们处理部分冗长而且容易出错的事务，例如内存管理。</p> 
<p>Java 虚拟机将运行时内存区域划分为五个部分，分别为方法区、堆、PC 寄存器、Java 方法栈和本地方法栈。Java 程序编译而成的 class 文件，需要先加载至方法区中，方能在 
Java 虚拟机中运行。</p> <p>为了提高运行效率，标准 JDK 中的 HotSpot 虚拟机采用的是一种混合执行的策略。</p> <p>它会解释执行 Java 字节码，然后会将其中反复执行的热点代码，以方法为单位进行即时编译，翻译成机器码后直接运行在底层硬件之上。</p> 
<p>HotSpot 装载了多个不同的即时编译器，以便在编译时间和生成代码的执行效率之间做取舍。</p> <p>下面我给你留一个小作业，通过观察两个条件判断语句的运行结果，来思考 Java 
语言和 Java 虚拟机看待 boolean 类型的方式是否不同。</p> <p>下载 asmtools.jar [2] ，并在命令行中运行下述指令（不包含提示符 $）：</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean flag = true; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag) System.out.println("Hello, Java!"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag == true) System.out.println("Hello, 
JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }'' &gt; Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ javac Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java Foo </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main 
Foo.class &gt; Foo.jasm.1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ awk ''NR==1,/iconst_1/{sub(/iconst_1/, "iconst_2")} 1'' Foo.jasm.1 &gt; Foo.jasm </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java 
Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] : <a href="https://en.wikipedia.org/wiki/Java_processor">https://en.wikipedia.org/wiki/Java_processor</a><br> 
[2]: <a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 44, 44) 
 {executed in 2 msec}
2020-11-19 20:20:47.726 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=44 
 {executed in 1 msec}
2020-11-19 20:20:47.728 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:47.731 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=44 
 {executed in 1 msec}
2020-11-19 20:20:47.733 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:20:47.741 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788447, 1605788447, 1, 'zh-hans', 0, 1, 1, 
0, '01丨Java代码是怎么运行的？', 1, 44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.748 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=44 
 {executed in 1 msec}
2020-11-19 20:20:47.750 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:47.758 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788447, 1605788447, 1, 'zh-hans', 0, 
1, 1, 0, '01丨Java代码是怎么运行的？', 'book', 1, 44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.765 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.767 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:47.771 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.773 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:47.782 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cd3a96a21eac5223d238d278d06f2b74?bkt=en-26dcfdb4e5ee1a49731e07ccde0b8380887c24737077dc290991adf31446b3afcd5bd6f31257e584&fid=3757516097-778750-454782063663211&time=1605788446&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-AxGoD%2FkHQAJVxsNjmlkcwhE4npc%3D&to=92&size=5131355&sta_dx=5131355&sta_cs=4477&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182956&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5131355&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-e072f44805c673bffffdea4f8659656dc7c36731a23ea035e9e0b97d939646d729d1c8a7bacbaf71&sl=76480590&expires=8h&rt=pr&r=239090944&mlogid=7510943751152947809&vbdid=64799653&fin=01%E4%B8%A8Java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510943751152947809&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=648eaef5c3fa81d17b5e3115236856cec14e758b2243e0d7&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=01%E4%B8%A8Java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F.mp3', 
44, 44) 
 {executed in 0 msec}
2020-11-19 20:20:47.788 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=44 
 {executed in 0 msec}
2020-11-19 20:20:47.789 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:47.797 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cd3a96a21eac5223d238d278d06f2b74?bkt=en-26dcfdb4e5ee1a49731e07ccde0b8380887c24737077dc290991adf31446b3afcd5bd6f31257e584&fid=3757516097-778750-454782063663211&time=1605788446&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-AxGoD%2FkHQAJVxsNjmlkcwhE4npc%3D&to=92&size=5131355&sta_dx=5131355&sta_cs=4477&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182956&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5131355&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-e072f44805c673bffffdea4f8659656dc7c36731a23ea035e9e0b97d939646d729d1c8a7bacbaf71&sl=76480590&expires=8h&rt=pr&r=239090944&mlogid=7510943751152947809&vbdid=64799653&fin=01%E4%B8%A8Java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510943751152947809&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=648eaef5c3fa81d17b5e3115236856cec14e758b2243e0d7&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=01%E4%B8%A8Java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F.mp3', 
44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.802 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.804 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:47.807 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.809 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:47.820 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jiaobuchon...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-10-14 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">37</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 对老师写的那段 
awk 不懂得可参考： <br>https://blog.csdn.net/jiaobuchong/article/details/83037467 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/3b/65/203298ce.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小名叫大明</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">20</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 受益匪浅，多谢老师。 <br> <br>请教老师一个问题，网上我没有搜到。 
<br> <br>服务器线程数爆满，使用jstack打印线程堆栈信息，想知道是哪类线程数太多，但是堆栈里全是一样的信息且没有任何关键信息，是哪个方法创建的，以及哪个线程池的都看不到。 
<br> <br>如何更改打印线程堆栈信息的代码（动态）让其打印线程池信息呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">269</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> jvm把boolean当做int来处理 <br> <br>flag = iconst_1 
= true <br> <br>awk把stackframe中的flag改为iconst_2 <br> <br>if（flag）比较时ifeq指令做是否为零判断，常数2仍为true，打印输出 
<br> <br>if（true == flag）比较时if_cmpne做整数比较，iconst_1是否等于flag，比较失败，不再打印输出 <br> <br> <br> </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 字节码高手！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/40/e0d86fd7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>かっこいす...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">64</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我想问下，JVM是怎么区别出热点代码和非热点代码的？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/2c/69/021420f0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>醉人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">61</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 解释执行 执行时才翻译成机器指令，无需保存不占内存。但即时编译类似预编译，编译之后的指令需要保存在内存中，这种方式吃内存，按照二八原则这种混合模式最恰当的，热点代码编译之后放入内存避免重复编译，而其他运行次数较少代码则解释执行，避免占用过多内存 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/31/f4/d08eeec4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>CHEN</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">57</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 作业终于做出来~\(≧▽≦)/~喜大普奔 <br>asmtools下载地址： <br>https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz； 
<br>先是在window环境里，awk不能使用，看https://zh.wikipedia.org/wiki/Awk，AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一,于是转战Linux， 
<br>[root@localhost cqq]# javac Foo.java <br>[root@localhost cqq]# java Foo <br>Hello,Java 
<br>Hello,JVM <br>[root@localhost cqq]# java -cp /cqq/asmtools.jar org.openjdk.asmtools.jdis.Main 
Foo.class&gt;Foo.jasm.1 <br>[root@localhost cqq]# ls <br>asmtools.jar Foo.class Foo.jasm.1 
Foo.java <br>[root@localhost cqq]# vi Foo.jasm.1 <br>[root@localhost cqq]# awk ''NR==1,/iconst_1/{sub(/iconst_1/,"iconst_2")} 
1'' Foo.jasm.1&gt;Foo.jasm <br>[root@localhost cqq]# java -cp /cqq/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm <br>[root@localhost cqq]# java Foo <br>Hello,Java <br>结果为啥是这个看点赞第一的高手； <br>另外asmtools使用方式还可以这样子： 
<br>java -jar asmtools.jar jdis Foo.class&gt;Foo.jasm.1 <br>java -jar asmtools.jar jasm Foo.jasm 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e9/a1/2fe5b97a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>novembersk...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">56</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 文中提到虚拟机会把部分热点代码编译成机器码，我有个疑问，为什么不把java代码全部编译成机器码？很多服务端应用发布频率不会太频繁，但是对运行时的性能和吞吐量要求较高。如果发布或启动时多花点时间编译，能够带来运行时的持久性能收益，不是很合适么？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 问得好！事实上JVM确实有考虑做AOT (ahead of time compilation) 这种事情。AOT能够在线下将Java字节码编译成机器码，主要是用来解决启动性能不好的问题。<br><br>对于这种发布频率不频繁(也就是长时间运行吧？)的程序，其实选择线下编译和即时编译都一样，因为至多一两个小时后该即时编译的都已经编译完成了。另外，即时编译器因为有程序的运行时信息，优化效果更好，也就是说峰值性能更好。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/cc/43/22e1d2a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>掌心童话</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我只想问，你就没有教授的担忧？万一我拿今天的知识点去问面试者，答不上来咋办？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/10/0acf7cbc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ryan-Hou</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在为什么Java要在虚拟机里执行这一节您提到，java语法复杂，抽象度高，直接通过硬件来执行不现实，但是同样作为高级语言为什么C++就可以呢？这个理由作为引入虚拟机这个中间层的原因不是很充分吧 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！这里的直接运行指的是不经过任何转换(编译)，直接在硬件上跑。即便是C++，也不可以直接运行。<br><br>C++的策略是直接编译成目标架构的机器码，Java的策略是编译成一个虚拟架构的机器码。这个虚拟架构可以有物理实现(可以搜Java 
processor)，也可以是软件实现，也就是我们经常接触到的JRE。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">21</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:为什么使用JVM？ <br>1-1:可以轻松实现Java代码的跨平台执行 
<br>1-2:JVM提供了一个托管平台，提供内存管理、垃圾回收、编译时动态校验等功能 <br>1-3:使用JVM能够让我们的编程工作更轻松、高效节省公司成本，提示社会化的整体快发效率，我们只关注和业务相关的程序逻辑的编写，其他业务无关但对于编程同样重要的事情交给JVM来处理 
<br> <br>2:听完此节的课程的疑惑（之前就没太明白，原期待听完后不再疑惑的） <br>2-1:Java源代码怎么就经过编译变成了Java字节码？ <br>2-2:JVM怎么就把Java字节码加载进JVM内了？先加载那个类的字节码？它怎么定位的？拿到后怎么解析的？不会整个文件放到一个地方吧？使用的时候又是怎么找到的呢？这些感觉还是黑盒 
<br>2-3:JVM将内存区域分成堆和栈，然后又将栈分成pc寄存器、本地方法栈、Java方法栈，有些内存空间是线程可共享的，有些是线程私有的。现在也了解不同的内存区块有不同的用处，不过他们是怎么被划分的哪？为什么是他们，不能再多几种或少几种了吗？共享的内存区和私有的又是怎么控制的哪？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 总结得非常细致！<br>2-1 其实是这样的，JVM接收字节码，要运行在JVM上只能选择转化为字节码。要是不想在JVM上跑，可以选择直接转化为机器码。<br><br>2-2 
类加载会在第三篇详细介绍。<br><br>2-3 具体的划分都是实现细节。你也可以选择全部冗杂在一起。但是这样子做性能较高，因为线程私有的可以不用同步。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/4d/bd86bdc2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>周仕林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 看到有人说热点代码的区别，在git里面涉及到的热点代码有两种算法，基于采样的热点探测和基于计数器的热点探测。一般采用的都是基于计数器的热点探测，两者的优缺点百度一下就知道了。基于计数器的热点探测又有两个计数器，方法调用计数器，回边计数器，他们在C1和C2又有不同的阈值。😂😂 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/c3/bd/ec8b3044.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>尔东</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1.Java代码首先编译为class文件，然后通过java虚拟机加载到方法区。Java虚拟机是一个独立的进程，执行方法区的代码。 
<br>2.Java虚拟机把内存分为堆栈两种形式来存储运行时数据，包括线程共有的方法区和堆，以及线程私有的pc计数器，方法栈，naive方法栈 <br>3.Java虚拟机将字节码翻译成机器码执行的方法有两种，一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时编译，即将一个方法包含的所有字节码编译成机器码后再执行 
<br>4.解释执行的好处是无需等待编译，即时编译的好处是速度更快。这里编译的概念并不是代码编译为字节码，而是字节码编译为机器码，字节码编译为机器码是由java虚拟机在运行程序的时候才会去做的，所以是运行时的开销。热点代码会通过即时编译来执行。 
<br>5.HotSpot内置了多个即时编译器，包括C1、C2和Graal。 <br>6.Asmtools.jar下载地址https://ci.adoptopenjdk.net/view/Dependencies/job/asmtools/lastSuccessfulBuild/ 
<br>7.JVM将Boolean类型看作是int类型，true就是1，false就是0，flag如果改成2第二个判1等式就不成立，所以只有第一个判0等式通过。 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/6c/28/a1f9f0ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>陈树义</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> asmtools.jar 是在哪里下载的，怎么在给的链接页面没找到。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9d/00/72f8999b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ace</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最后awk那段分析了下。希望分析正确 也对大家有帮助 <br>1、NR==1,/iconst_1/ 
是用于匹配行 匹配第一行到第一个出现iconst_1的行 <br>2、{}进行脚本执行。针对第一步中匹配的行执行内置的字符串函数sub 做替换 <br>3、1 都会被执行。在awk 
1被计算为true，表现为默认操作 print $0 也就是打印整行 <br>整体效果是打印所以文本行，但第一个出现iconst_1的做替换。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/1d/6f/0e552a48.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>志文</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Java 作为一门高级程序语言，它的语法非常复杂，抽象程度非常高，所以不能直接在硬件上执行。所以要引入JAVA虚拟机。 
<br>我觉得理由不充分，JAVA为什么不能像c++一样直接转成机器码呢？从理论上是可以用编译器来实现这个的功能的。问题在于直接像c++那样编译成机器码，就实现不了跨平台了。那么是不是跨平台才是引入JAVA虚拟机的重要原因呢 
。请老师解答 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/07/89/c493c1a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>欲风</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 方法区和元空间是一个概念吧，能不能统一说法到jdk8之后的版本～ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/33/58/1f1e33d5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>踏雪无痕</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 您好，我现在所在的项目经常堆外内存占用非常多，超过总内存的70%，请问一下有没有什么方法能观察一下堆外内存有什么内容？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 堆外内存的话，就把JVM当成普通进程来查找内存泄漏。可以看下Google Performance Tools相关资料</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/79/a2/18815f9c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>J</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 在Windows使用不了awk工具（貌似有代替方案），所以结合其他小伙伴的答案和自己的思考，答案整理如下： 
<br>小作业的过程是： <br>1、写Java代码，生成java文件 <br>2、将java文件编译成class文件(字节码) <br>3、执行字节码，输出两个Hello,world! 
<br>4、使用asmtool工具将class文件生成jasm文件 <br>5、使用awt工具将jasm文件stackframe的flag改为iconst_2 <br>6、再次使用asmtool工具将jasm文件恢复成class文件 
<br>7、执行字节码，输出一个Hello, world！ <br>由于Java虚拟机将boolean类型看成0或者1，在步骤5中将源代码中的flag修改成2，于是在步骤7中的运行过程中，if(2)，true,执行输出；if(2 
== 1)，结果为false，不执行输出。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 即时编译生成的代码是只保存在内存中吗？会不会写到磁盘上？如果我怀疑优化后的代码有bug，有办法debug吗？ 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/29/3806fe23.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>临风</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我跟楼上的novembersky同学一样疑惑，对于性能要求高的web应用，为什么不直接使用即时编译器在启动时全部编译成机器码呢？虽然启动耗时，但是也是可以接受的 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 通常，对于长时间运行的程序来说，大部分即时编译就发生在前几个小时。<br><br>再之后的即时编译主要是一些非热点代码，以及即时编译器中的bug造成的反复去优化重新编译。</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 44, 44) 
 {executed in 2 msec}
2020-11-19 20:20:47.832 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=44 
 {executed in 0 msec}
2020-11-19 20:20:47.833 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:47.843 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jiaobuchon...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-10-14 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">37</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 对老师写的那段 
awk 不懂得可参考： <br>https://blog.csdn.net/jiaobuchong/article/details/83037467 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/3b/65/203298ce.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>小名叫大明</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">20</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 受益匪浅，多谢老师。 <br> <br>请教老师一个问题，网上我没有搜到。 
<br> <br>服务器线程数爆满，使用jstack打印线程堆栈信息，想知道是哪类线程数太多，但是堆栈里全是一样的信息且没有任何关键信息，是哪个方法创建的，以及哪个线程池的都看不到。 
<br> <br>如何更改打印线程堆栈信息的代码（动态）让其打印线程池信息呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">269</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> jvm把boolean当做int来处理 <br> <br>flag = iconst_1 
= true <br> <br>awk把stackframe中的flag改为iconst_2 <br> <br>if（flag）比较时ifeq指令做是否为零判断，常数2仍为true，打印输出 
<br> <br>if（true == flag）比较时if_cmpne做整数比较，iconst_1是否等于flag，比较失败，不再打印输出 <br> <br> <br> </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 字节码高手！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/40/e0d86fd7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>かっこいす...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">64</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我想问下，JVM是怎么区别出热点代码和非热点代码的？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/2c/69/021420f0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>醉人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">61</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 解释执行 执行时才翻译成机器指令，无需保存不占内存。但即时编译类似预编译，编译之后的指令需要保存在内存中，这种方式吃内存，按照二八原则这种混合模式最恰当的，热点代码编译之后放入内存避免重复编译，而其他运行次数较少代码则解释执行，避免占用过多内存 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/31/f4/d08eeec4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>CHEN</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">57</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 作业终于做出来~\(≧▽≦)/~喜大普奔 <br>asmtools下载地址： <br>https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz； 
<br>先是在window环境里，awk不能使用，看https://zh.wikipedia.org/wiki/Awk，AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一,于是转战Linux， 
<br>[root@localhost cqq]# javac Foo.java <br>[root@localhost cqq]# java Foo <br>Hello,Java 
<br>Hello,JVM <br>[root@localhost cqq]# java -cp /cqq/asmtools.jar org.openjdk.asmtools.jdis.Main 
Foo.class&gt;Foo.jasm.1 <br>[root@localhost cqq]# ls <br>asmtools.jar Foo.class Foo.jasm.1 
Foo.java <br>[root@localhost cqq]# vi Foo.jasm.1 <br>[root@localhost cqq]# awk ''NR==1,/iconst_1/{sub(/iconst_1/,"iconst_2")} 
1'' Foo.jasm.1&gt;Foo.jasm <br>[root@localhost cqq]# java -cp /cqq/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm <br>[root@localhost cqq]# java Foo <br>Hello,Java <br>结果为啥是这个看点赞第一的高手； <br>另外asmtools使用方式还可以这样子： 
<br>java -jar asmtools.jar jdis Foo.class&gt;Foo.jasm.1 <br>java -jar asmtools.jar jasm Foo.jasm 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e9/a1/2fe5b97a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>novembersk...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">56</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 文中提到虚拟机会把部分热点代码编译成机器码，我有个疑问，为什么不把java代码全部编译成机器码？很多服务端应用发布频率不会太频繁，但是对运行时的性能和吞吐量要求较高。如果发布或启动时多花点时间编译，能够带来运行时的持久性能收益，不是很合适么？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 问得好！事实上JVM确实有考虑做AOT (ahead of time compilation) 这种事情。AOT能够在线下将Java字节码编译成机器码，主要是用来解决启动性能不好的问题。<br><br>对于这种发布频率不频繁(也就是长时间运行吧？)的程序，其实选择线下编译和即时编译都一样，因为至多一两个小时后该即时编译的都已经编译完成了。另外，即时编译器因为有程序的运行时信息，优化效果更好，也就是说峰值性能更好。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/cc/43/22e1d2a5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>掌心童话</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我只想问，你就没有教授的担忧？万一我拿今天的知识点去问面试者，答不上来咋办？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/10/0acf7cbc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Ryan-Hou</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">24</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在为什么Java要在虚拟机里执行这一节您提到，java语法复杂，抽象度高，直接通过硬件来执行不现实，但是同样作为高级语言为什么C++就可以呢？这个理由作为引入虚拟机这个中间层的原因不是很充分吧 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！这里的直接运行指的是不经过任何转换(编译)，直接在硬件上跑。即便是C++，也不可以直接运行。<br><br>C++的策略是直接编译成目标架构的机器码，Java的策略是编译成一个虚拟架构的机器码。这个虚拟架构可以有物理实现(可以搜Java 
processor)，也可以是软件实现，也就是我们经常接触到的JRE。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">21</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:为什么使用JVM？ <br>1-1:可以轻松实现Java代码的跨平台执行 
<br>1-2:JVM提供了一个托管平台，提供内存管理、垃圾回收、编译时动态校验等功能 <br>1-3:使用JVM能够让我们的编程工作更轻松、高效节省公司成本，提示社会化的整体快发效率，我们只关注和业务相关的程序逻辑的编写，其他业务无关但对于编程同样重要的事情交给JVM来处理 
<br> <br>2:听完此节的课程的疑惑（之前就没太明白，原期待听完后不再疑惑的） <br>2-1:Java源代码怎么就经过编译变成了Java字节码？ <br>2-2:JVM怎么就把Java字节码加载进JVM内了？先加载那个类的字节码？它怎么定位的？拿到后怎么解析的？不会整个文件放到一个地方吧？使用的时候又是怎么找到的呢？这些感觉还是黑盒 
<br>2-3:JVM将内存区域分成堆和栈，然后又将栈分成pc寄存器、本地方法栈、Java方法栈，有些内存空间是线程可共享的，有些是线程私有的。现在也了解不同的内存区块有不同的用处，不过他们是怎么被划分的哪？为什么是他们，不能再多几种或少几种了吗？共享的内存区和私有的又是怎么控制的哪？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 总结得非常细致！<br>2-1 其实是这样的，JVM接收字节码，要运行在JVM上只能选择转化为字节码。要是不想在JVM上跑，可以选择直接转化为机器码。<br><br>2-2 
类加载会在第三篇详细介绍。<br><br>2-3 具体的划分都是实现细节。你也可以选择全部冗杂在一起。但是这样子做性能较高，因为线程私有的可以不用同步。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/4d/bd86bdc2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>周仕林</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 看到有人说热点代码的区别，在git里面涉及到的热点代码有两种算法，基于采样的热点探测和基于计数器的热点探测。一般采用的都是基于计数器的热点探测，两者的优缺点百度一下就知道了。基于计数器的热点探测又有两个计数器，方法调用计数器，回边计数器，他们在C1和C2又有不同的阈值。😂😂 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/c3/bd/ec8b3044.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>尔东</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 1.Java代码首先编译为class文件，然后通过java虚拟机加载到方法区。Java虚拟机是一个独立的进程，执行方法区的代码。 
<br>2.Java虚拟机把内存分为堆栈两种形式来存储运行时数据，包括线程共有的方法区和堆，以及线程私有的pc计数器，方法栈，naive方法栈 <br>3.Java虚拟机将字节码翻译成机器码执行的方法有两种，一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时编译，即将一个方法包含的所有字节码编译成机器码后再执行 
<br>4.解释执行的好处是无需等待编译，即时编译的好处是速度更快。这里编译的概念并不是代码编译为字节码，而是字节码编译为机器码，字节码编译为机器码是由java虚拟机在运行程序的时候才会去做的，所以是运行时的开销。热点代码会通过即时编译来执行。 
<br>5.HotSpot内置了多个即时编译器，包括C1、C2和Graal。 <br>6.Asmtools.jar下载地址https://ci.adoptopenjdk.net/view/Dependencies/job/asmtools/lastSuccessfulBuild/ 
<br>7.JVM将Boolean类型看作是int类型，true就是1，false就是0，flag如果改成2第二个判1等式就不成立，所以只有第一个判0等式通过。 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/6c/28/a1f9f0ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>陈树义</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> asmtools.jar 是在哪里下载的，怎么在给的链接页面没找到。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9d/00/72f8999b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ace</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最后awk那段分析了下。希望分析正确 也对大家有帮助 <br>1、NR==1,/iconst_1/ 
是用于匹配行 匹配第一行到第一个出现iconst_1的行 <br>2、{}进行脚本执行。针对第一步中匹配的行执行内置的字符串函数sub 做替换 <br>3、1 都会被执行。在awk 
1被计算为true，表现为默认操作 print $0 也就是打印整行 <br>整体效果是打印所以文本行，但第一个出现iconst_1的做替换。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/1d/6f/0e552a48.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>志文</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Java 作为一门高级程序语言，它的语法非常复杂，抽象程度非常高，所以不能直接在硬件上执行。所以要引入JAVA虚拟机。 
<br>我觉得理由不充分，JAVA为什么不能像c++一样直接转成机器码呢？从理论上是可以用编译器来实现这个的功能的。问题在于直接像c++那样编译成机器码，就实现不了跨平台了。那么是不是跨平台才是引入JAVA虚拟机的重要原因呢 
。请老师解答 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/07/89/c493c1a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>欲风</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 方法区和元空间是一个概念吧，能不能统一说法到jdk8之后的版本～ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/33/58/1f1e33d5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>踏雪无痕</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 您好，我现在所在的项目经常堆外内存占用非常多，超过总内存的70%，请问一下有没有什么方法能观察一下堆外内存有什么内容？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 堆外内存的话，就把JVM当成普通进程来查找内存泄漏。可以看下Google Performance Tools相关资料</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/79/a2/18815f9c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>J</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 在Windows使用不了awk工具（貌似有代替方案），所以结合其他小伙伴的答案和自己的思考，答案整理如下： 
<br>小作业的过程是： <br>1、写Java代码，生成java文件 <br>2、将java文件编译成class文件(字节码) <br>3、执行字节码，输出两个Hello,world! 
<br>4、使用asmtool工具将class文件生成jasm文件 <br>5、使用awt工具将jasm文件stackframe的flag改为iconst_2 <br>6、再次使用asmtool工具将jasm文件恢复成class文件 
<br>7、执行字节码，输出一个Hello, world！ <br>由于Java虚拟机将boolean类型看成0或者1，在步骤5中将源代码中的flag修改成2，于是在步骤7中的运行过程中，if(2)，true,执行输出；if(2 
== 1)，结果为false，不执行输出。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 即时编译生成的代码是只保存在内存中吗？会不会写到磁盘上？如果我怀疑优化后的代码有bug，有办法debug吗？ 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/29/3806fe23.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>临风</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我跟楼上的novembersky同学一样疑惑，对于性能要求高的web应用，为什么不直接使用即时编译器在启动时全部编译成机器码呢？虽然启动耗时，但是也是可以接受的 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 通常，对于长时间运行的程序来说，大部分即时编译就发生在前几个小时。<br><br>再之后的即时编译主要是一些非热点代码，以及即时编译器中的bug造成的反复去优化重新编译。</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 44, 44) 
 {executed in 2 msec}
2020-11-19 20:20:47.853 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.855 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:47.858 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.860 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:47.866 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 44, 'https://static001.geekbang.org/resource/image/9a/ac/9a15a3bb8de2b97650bf14ff310e39ac.jpg', 
44) 
 {executed in 0 msec}
2020-11-19 20:20:47.871 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=44 
 {executed in 0 msec}
2020-11-19 20:20:47.873 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:47.880 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 44, 'https://static001.geekbang.org/resource/image/9a/ac/9a15a3bb8de2b97650bf14ff310e39ac.jpg', 
44) 
 {executed in 1 msec}
2020-11-19 20:20:47.886 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.888 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:47.895 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 44, 44) 
 {executed in 0 msec}
2020-11-19 20:20:47.901 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=44 
 {executed in 1 msec}
2020-11-19 20:20:47.903 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:47.910 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 44, 44) 
 {executed in 1 msec}
2020-11-19 20:20:47.917 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='497903409679568' 
 {executed in 2 msec}
2020-11-19 20:20:47.919 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.922 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788447, 1) 
 {executed in 1 msec}
2020-11-19 20:20:47.924 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788447, 1) 
 {executed in 1 msec}
2020-11-19 20:20:47.925 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|45            |
|--------------|

2020-11-19 20:20:47.936 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '63213d72-b775-4143-83a2-a5fdbd998538', 
45) 
 {executed in 1 msec}
2020-11-19 20:20:47.937 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '63213d72-b775-4143-83a2-a5fdbd998538', 45) 
 {executed in 0 msec}
2020-11-19 20:20:47.939 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|45            |
|--------------|

2020-11-19 20:20:47.955 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=45, revision_default=1, revision_timestamp=1605788447, 
revision_uid=1 where vid=45 
 {executed in 1 msec}
2020-11-19 20:20:47.961 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:47.963 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.970 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '497903409679568', 'zh-hans', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:47.978 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=45 
 {executed in 2 msec}
2020-11-19 20:20:47.980 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:20:47.987 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '497903409679568', 'zh-hans', 45, 45) 
 {executed in 0 msec}
2020-11-19 20:20:47.993 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=45 
 {executed in 1 msec}
2020-11-19 20:20:47.995 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:47.998 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=45 
 {executed in 0 msec}
2020-11-19 20:20:48.000 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:20:48.008 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 45, 0, 0, 0, 1, 0, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.018 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.019 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:48.023 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.024 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:48.032 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 45, 45) 
 {executed in 0 msec}
2020-11-19 20:20:48.038 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.040 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:20:48.048 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 45, 45) 
 {executed in 0 msec}
2020-11-19 20:20:48.054 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=45 
 {executed in 1 msec}
2020-11-19 20:20:48.056 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:48.060 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=45 
 {executed in 1 msec}
2020-11-19 20:20:48.062 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:20:48.070 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788448, 1605788448, 1, 'zh-hans', 0, 1, 1, 
0, '01-开篇词 (1讲)', 1, 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.077 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=45 
 {executed in 1 msec}
2020-11-19 20:20:48.078 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:20:48.086 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788448, 1605788448, 1, 'zh-hans', 0, 
1, 1, 0, '01-开篇词 (1讲)', 'book', 1, 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.091 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.093 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:48.097 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=45 
 {executed in 0 msec}
2020-11-19 20:20:48.098 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:48.106 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.112 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.113 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:20:48.121 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.153 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.155 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:48.159 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.161 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:48.168 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.182 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.183 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:20:48.190 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 45, 45) 
 {executed in 0 msec}
2020-11-19 20:20:48.198 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.200 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:48.215 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=45 
 {executed in 13 msec}
2020-11-19 20:20:48.217 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:48.223 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 45, '', 45) 
 {executed in 0 msec}
2020-11-19 20:20:48.249 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.251 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:20:48.258 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 45, '', 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.269 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.270 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:48.278 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:48.284 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=45 
 {executed in 1 msec}
2020-11-19 20:20:48.285 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:20:48.292 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 45, 45) 
 {executed in 1 msec}
2020-11-19 20:20:49.375 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='143439728589540' 
and bookchecke0_.name='net_content' 
 {executed in 3 msec}
2020-11-19 20:20:49.380 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:21:20.364 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='143439728589540' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:21:20.367 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:21:20.373 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('143439728589540', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:21:20.375 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('143439728589540', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:21:20.378 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|89            |
|--------------|

2020-11-19 20:21:20.396 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='143439728589540' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:21:20.398 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:21:21.053 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='143439728589540' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:21:21.054 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:21:21.058 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('143439728589540', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:21:21.059 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('143439728589540', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:21:21.060 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|90            |
|--------------|

2020-11-19 20:21:21.076 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='143439728589540' 
 {executed in 1 msec}
2020-11-19 20:21:21.077 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:21.081 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788481, 1) 
 {executed in 1 msec}
2020-11-19 20:21:21.082 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788481, 1) 
 {executed in 0 msec}
2020-11-19 20:21:21.083 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|46            |
|--------------|

2020-11-19 20:21:21.094 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '9d9e8a56-cfae-491d-887d-dd280b14b075', 
46) 
 {executed in 0 msec}
2020-11-19 20:21:21.096 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '9d9e8a56-cfae-491d-887d-dd280b14b075', 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.097 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|46            |
|--------------|

2020-11-19 20:21:21.112 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=46, revision_default=1, revision_timestamp=1605788481, 
revision_uid=1 where vid=46 
 {executed in 1 msec}
2020-11-19 20:21:21.119 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.121 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:21.128 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '143439728589540', 'zh-hans', 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.134 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.136 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:21.143 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '143439728589540', 'zh-hans', 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.149 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=46 
 {executed in 1 msec}
2020-11-19 20:21:21.151 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:21.154 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=46 
 {executed in 1 msec}
2020-11-19 20:21:21.156 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:21.162 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 45, 46, 0, 0, 45, 0, 46) 
 {executed in 0 msec}
2020-11-19 20:21:21.168 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.170 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:21.173 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.175 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:21.183 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>前不久我参加了一个国外程序员的讲座，讲座的副标题很有趣，叫做：“我如何学会停止恐惧，并且爱上 Java 虚拟机”。</p> 
<p>这句话来自一部黑色幽默电影《奇爱博士》，电影描述了冷战时期剑拔弩张的氛围。</p> <p>程序员之间的语言之争又未尝不是如此。写系统语言的鄙视托管语言低下的执行效率；写托管语言的则取笑系统语言需要手动管理内存；写动态语言的不屑于静态语言那冗余的类型系统；写静态语言的则嘲讽动态语言里面各种光怪陆离的运行时错误。</p> 
<p>Java 作为应用最广的语言，自然吸引了不少的攻击，而身为 Java 程序员的你，或许在口水战中落了下风，忿忿于没有足够的知识武装自己；又或许想要深入学习 Java 语言，却又无从下手。甚至是在实践中被 
Java 的启动性能、内存耗费所震惊，因此对 Java 语言本身产生了种种的怀疑与顾虑。</p> <p>别担心，我就是来解答你对 Java 的种种疑虑的。“知其然”也要“知其所以然”，学习 
Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。这样一来，你才可以从内部入手，达到高效编程的目的。与此同时，你也可以为学习更深层级、更为核心的 Java 技术打好基础。</p> 
<p>我相信在不少程序员的观念里，Java 虚拟机是透明的。在大家看来，我们仅需知道 Java 核心类库，以及第三方类库里 API 的用法，便可以专注于实现具体业务，并且依赖 Java 
虚拟机自动执行乃至优化我们的应用程序。那么，我们还需要了解 Java 虚拟机吗？</p><!-- [[[read_end]]] --> <p>我认为是非常有必要的。如果我们把核心类库的 
API 比做数学公式的话，那么 Java 虚拟机的知识就好比公式的推导过程。掌握数学公式固然可以应付考试，但是了解背后的推导过程更加有助于记忆和理解。并且，在遇到那些没法套公式的情况下，我们也能知道如何解决。</p> 
<p>具体来说，了解 Java 虚拟机有如下（但不限于）好处。</p> <p>首先，Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。学习 Java 虚拟机，你可以针对自己的应用，最优化匹配运行参数。（你可以用下面这个例子看一下自己虚拟机的参数列表。）</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 举例来说，macOS 上的 Java 10 共有近千个配置参数： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -XX:+PrintFlagsFinal -XX:+UnlockDiagnosticVMOptions -version | wc -l </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java version "10" 2018-03-20 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Java(TM) SE Runtime Environment 18.3 (build 
10+46) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Java 
HotSpot(TM) 64-Bit Server VM 18.3 (build 10+46, mixed mode) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 812 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>其次，Java 虚拟机本身是一种工程产品，在实现过程中自然存在不少局限性。学习 
Java 虚拟机，可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误，</p> <p>再次，Java 虚拟机拥有当前最前沿、最成熟的垃圾回收算法实现，以及即时编译器实现。学习 
Java 虚拟机，我们可以了解背后的设计决策，今后再遇到其他代码托管技术也能触类旁通。</p> <p>最后，Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 
Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上。学习 Java 虚拟机，便可以了解这些语言的通用机制，甚至于让这些语言共享生态系统。</p> 
<p>说起写作这个专栏的初心，与我个人的经历是分不开的，我现在是甲骨文实验室的高级研究员，工作主要是负责研究如何通过程序分析技术以及动态编译技术让程序语言跑得更快。明面上，我是 Graal 
编译器的核心开发者之一，在为 HotSpot 虚拟机项目拧螺丝。</p> <p>这里顺便说明一下，Graal 编译器是 Java 10 正式引入的实验性即时编译器，在国内同行口中被戏称为“甲骨文黑科技”。当然，在我看来，我们的工作同样也是分析应用程序的性能瓶颈，寻找优化空间，只不过我们的优化方式对自动化、通用性有更高的要求。</p> 
<p>加入甲骨文之前，我在瑞士卢加诺大学攻读博士学位，研究如何更加精准地监控 Java 程序，以便做出更具针对性的优化。这些研究工作均已发表在程序语言方向的顶级会议上，并获得了不少同行的认可（OOPSLA 
2015 最佳论文奖）。</p> <p>在这 7 年的学习工作生涯中，我拜读过许多大神关于 Java 虚拟机的技术博客。在受益匪浅的同时，我发觉不少文章的门槛都比较高，而且过分注重实现细节，这并不是大多数的开发人员可以受益的调优方案。这么一来，许多原本对 
Java 虚拟机感兴趣的同学， 也因为过高的门槛，以及短时间内看不到的收益，而放弃了对 Java 虚拟机的学习。</p> <p>在收到极客时间的邀请后，我决定也挑战一下 Java 虚拟机的科普工作。和其他栏目一样，我会用简单通俗的语言，来介绍 
Java 虚拟机的实现。具体到每篇文章，我将采用一个贯穿全文的案例来阐述知识点，并且给出相应的调优建议。在文章的末尾，我还将附上一个动手实践的环节，帮助你巩固对知识点的理解。</p> 
<p>整个专栏将分为四大模块。</p> <ol> <li><strong>基本原理</strong>：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；</li> 
<li><strong>高效实现</strong>：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；</li> 
<li><strong>代码优化</strong>：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；</li> <li><strong>虚拟机黑科技</strong>：介绍甲骨文实验室近年来的前沿工作之一 
GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。</li> 
</ol> <p>我希望借由这四个模块 36 个案例，帮助你理解 Java 虚拟机的运行机制，掌握诊断手法和调优方式。最重要的，是激发你学习 Java 虚拟机乃至其他底层工作、前沿工作的热情。</p> 
<h2>知识框架图</h2> <p><img src="https://static001.geekbang.org/resource/image/41/77/414248014bf825dd610c3095eed75377.jpg" 
alt=""></p> <p>（点击查看高清大图，iOS 用户可长按保存）</p>', '', 'book', 0, 'full_html', 'zh-hans', 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.201 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=46 
 {executed in 2 msec}
2020-11-19 20:21:21.202 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:21.218 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>前不久我参加了一个国外程序员的讲座，讲座的副标题很有趣，叫做：“我如何学会停止恐惧，并且爱上 Java 虚拟机”。</p> <p>这句话来自一部黑色幽默电影《奇爱博士》，电影描述了冷战时期剑拔弩张的氛围。</p> 
<p>程序员之间的语言之争又未尝不是如此。写系统语言的鄙视托管语言低下的执行效率；写托管语言的则取笑系统语言需要手动管理内存；写动态语言的不屑于静态语言那冗余的类型系统；写静态语言的则嘲讽动态语言里面各种光怪陆离的运行时错误。</p> 
<p>Java 作为应用最广的语言，自然吸引了不少的攻击，而身为 Java 程序员的你，或许在口水战中落了下风，忿忿于没有足够的知识武装自己；又或许想要深入学习 Java 语言，却又无从下手。甚至是在实践中被 
Java 的启动性能、内存耗费所震惊，因此对 Java 语言本身产生了种种的怀疑与顾虑。</p> <p>别担心，我就是来解答你对 Java 的种种疑虑的。“知其然”也要“知其所以然”，学习 
Java 虚拟机的本质，更多是了解 Java 程序是如何被执行且优化的。这样一来，你才可以从内部入手，达到高效编程的目的。与此同时，你也可以为学习更深层级、更为核心的 Java 技术打好基础。</p> 
<p>我相信在不少程序员的观念里，Java 虚拟机是透明的。在大家看来，我们仅需知道 Java 核心类库，以及第三方类库里 API 的用法，便可以专注于实现具体业务，并且依赖 Java 
虚拟机自动执行乃至优化我们的应用程序。那么，我们还需要了解 Java 虚拟机吗？</p><!-- [[[read_end]]] --> <p>我认为是非常有必要的。如果我们把核心类库的 
API 比做数学公式的话，那么 Java 虚拟机的知识就好比公式的推导过程。掌握数学公式固然可以应付考试，但是了解背后的推导过程更加有助于记忆和理解。并且，在遇到那些没法套公式的情况下，我们也能知道如何解决。</p> 
<p>具体来说，了解 Java 虚拟机有如下（但不限于）好处。</p> <p>首先，Java 虚拟机提供了许多配置参数，用于满足不同应用场景下，对程序性能的需求。学习 Java 虚拟机，你可以针对自己的应用，最优化匹配运行参数。（你可以用下面这个例子看一下自己虚拟机的参数列表。）</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 举例来说，macOS 上的 Java 10 共有近千个配置参数： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -XX:+PrintFlagsFinal -XX:+UnlockDiagnosticVMOptions -version | wc -l </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> java version "10" 2018-03-20 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Java(TM) SE Runtime Environment 18.3 (build 
10+46) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Java 
HotSpot(TM) 64-Bit Server VM 18.3 (build 10+46, mixed mode) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 812 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>其次，Java 虚拟机本身是一种工程产品，在实现过程中自然存在不少局限性。学习 
Java 虚拟机，可以更好地规避它在使用中的 Bug，也可以更快地识别出 Java 虚拟机中的错误，</p> <p>再次，Java 虚拟机拥有当前最前沿、最成熟的垃圾回收算法实现，以及即时编译器实现。学习 
Java 虚拟机，我们可以了解背后的设计决策，今后再遇到其他代码托管技术也能触类旁通。</p> <p>最后，Java 虚拟机发展到了今天，已经脱离 Java 语言，形成了一套相对独立的、高性能的执行方案。除了 
Java 外，Scala、Clojure、Groovy，以及时下热门的 Kotlin，这些语言都可以运行在 Java 虚拟机之上。学习 Java 虚拟机，便可以了解这些语言的通用机制，甚至于让这些语言共享生态系统。</p> 
<p>说起写作这个专栏的初心，与我个人的经历是分不开的，我现在是甲骨文实验室的高级研究员，工作主要是负责研究如何通过程序分析技术以及动态编译技术让程序语言跑得更快。明面上，我是 Graal 
编译器的核心开发者之一，在为 HotSpot 虚拟机项目拧螺丝。</p> <p>这里顺便说明一下，Graal 编译器是 Java 10 正式引入的实验性即时编译器，在国内同行口中被戏称为“甲骨文黑科技”。当然，在我看来，我们的工作同样也是分析应用程序的性能瓶颈，寻找优化空间，只不过我们的优化方式对自动化、通用性有更高的要求。</p> 
<p>加入甲骨文之前，我在瑞士卢加诺大学攻读博士学位，研究如何更加精准地监控 Java 程序，以便做出更具针对性的优化。这些研究工作均已发表在程序语言方向的顶级会议上，并获得了不少同行的认可（OOPSLA 
2015 最佳论文奖）。</p> <p>在这 7 年的学习工作生涯中，我拜读过许多大神关于 Java 虚拟机的技术博客。在受益匪浅的同时，我发觉不少文章的门槛都比较高，而且过分注重实现细节，这并不是大多数的开发人员可以受益的调优方案。这么一来，许多原本对 
Java 虚拟机感兴趣的同学， 也因为过高的门槛，以及短时间内看不到的收益，而放弃了对 Java 虚拟机的学习。</p> <p>在收到极客时间的邀请后，我决定也挑战一下 Java 虚拟机的科普工作。和其他栏目一样，我会用简单通俗的语言，来介绍 
Java 虚拟机的实现。具体到每篇文章，我将采用一个贯穿全文的案例来阐述知识点，并且给出相应的调优建议。在文章的末尾，我还将附上一个动手实践的环节，帮助你巩固对知识点的理解。</p> 
<p>整个专栏将分为四大模块。</p> <ol> <li><strong>基本原理</strong>：剖析 Java 虚拟机的运行机制，逐一介绍 Java 虚拟机的设计决策以及工程实现；</li> 
<li><strong>高效实现</strong>：探索 Java 编译器，以及内嵌于 Java 虚拟机中的即时编译器，帮助你更好地理解 Java 语言特性，继而写出简洁高效的代码；</li> 
<li><strong>代码优化</strong>：介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，如何打造专属轮子；</li> <li><strong>虚拟机黑科技</strong>：介绍甲骨文实验室近年来的前沿工作之一 
GraalVM。包括如何在 JVM 上高效运行其他语言；如何混搭这些语言，实现 Polyglot；如何将这些语言事前编译（Ahead-Of-Time，AOT）成机器指令，单独运行甚至嵌入至数据库中运行。</li> 
</ol> <p>我希望借由这四个模块 36 个案例，帮助你理解 Java 虚拟机的运行机制，掌握诊断手法和调优方式。最重要的，是激发你学习 Java 虚拟机乃至其他底层工作、前沿工作的热情。</p> 
<h2>知识框架图</h2> <p><img src="https://static001.geekbang.org/resource/image/41/77/414248014bf825dd610c3095eed75377.jpg" 
alt=""></p> <p>（点击查看高清大图，iOS 用户可长按保存）</p>', '', 'book', 0, 'full_html', 'zh-hans', 46, 46) 
 {executed in 8 msec}
2020-11-19 20:21:21.229 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=46 
 {executed in 2 msec}
2020-11-19 20:21:21.231 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:21.235 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=46 
 {executed in 1 msec}
2020-11-19 20:21:21.237 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:21:21.245 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788481, 1605788481, 1, 'zh-hans', 0, 1, 1, 
0, '00丨开篇词丨为什么我们要学习Java虚拟机？', 1, 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.252 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=46 
 {executed in 1 msec}
2020-11-19 20:21:21.254 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:21.262 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788481, 1605788481, 1, 'zh-hans', 0, 
1, 1, 0, '00丨开篇词丨为什么我们要学习Java虚拟机？', 'book', 1, 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.268 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.270 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:21.274 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.276 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:21.284 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/21b5529ec04701966326e1655487434d?bkt=en-6f7dc9883530f8c94997e5bd8711eb1307ade9a4553e2bff004865ed4fb729d5cc5a3f83f3f99ecfa9ccfe460066b3f1f4ad3b828addd202e4582a68ef662d73&fid=3757516097-778750-111820605537005&time=1605788479&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-jFrxTKdV0Cmqr1RoCjD063L7iIA%3D&to=92&size=3552305&sta_dx=3552305&sta_cs=4473&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182956&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=3552305&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-910077f95a7614bb3b81f620fd25d620ee9259e9e443da0436377a6bf978cb9b13de6bdaa5fe55d2e72c6c6b812538ee89ca6d2a2c6eb7e5305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=626261547&mlogid=7510952686732157768&vbdid=64799653&fin=00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E5%AD%A6%E4%B9%A0Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510952686732157768&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542500eb9d417ff73ff2a5d372eb9cb953b97&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E5%AD%A6%E4%B9%A0Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9F.mp3', 
46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.290 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.292 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:21.299 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/21b5529ec04701966326e1655487434d?bkt=en-6f7dc9883530f8c94997e5bd8711eb1307ade9a4553e2bff004865ed4fb729d5cc5a3f83f3f99ecfa9ccfe460066b3f1f4ad3b828addd202e4582a68ef662d73&fid=3757516097-778750-111820605537005&time=1605788479&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-jFrxTKdV0Cmqr1RoCjD063L7iIA%3D&to=92&size=3552305&sta_dx=3552305&sta_cs=4473&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182956&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=3552305&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-910077f95a7614bb3b81f620fd25d620ee9259e9e443da0436377a6bf978cb9b13de6bdaa5fe55d2e72c6c6b812538ee89ca6d2a2c6eb7e5305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=626261547&mlogid=7510952686732157768&vbdid=64799653&fin=00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E5%AD%A6%E4%B9%A0Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510952686732157768&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542500eb9d417ff73ff2a5d372eb9cb953b97&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=00%E4%B8%A8%E5%BC%80%E7%AF%87%E8%AF%8D%E4%B8%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E5%AD%A6%E4%B9%A0Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%9F.mp3', 
46, 46) 
 {executed in 0 msec}
2020-11-19 20:21:21.305 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.307 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:21.311 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.313 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:21.323 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">96</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM 
<br>1:现在我的理解 <br>1-1:三个英文单词的缩写，中文意思是Java虚拟机，作用是帮助执行Java字节码的，不同的平台有不同的JVM，这样java源代码经过编译为字节码之后就能在各种平台上运行了 
<br>1-2:JVM还有内存管理，垃圾回收等底层功能，这样程序员就不用太操心这些事情了 <br>1-3:内存管理主要是将JVM的内存容量划分成不同的模块，使用不同的管理方式，核心目的是为了更少的内存使用更快的内存性能以及恰当的内存回收策略 
<br>1-4:垃圾回收之所以存在是因为JVM是运行在内存之中的，它的内存空间是有限的，当加载进内存的对象越来越多的时候，会影响JVM的运行性能，所以，要回收一些内存空间，垃圾回收的关键是识别出垃圾以及使用不影响JVM运行的回收策略 
<br>1-5:JVM是Java代码执行的地方，Java程序性能上出现了问题的时候，我们要从代码层面进行分析、定位、优化，但是我们怎么知道那段代码性能差哪？此时要看JVM中代码的执行情况，看看谁慢？为什么慢？这些我还不清楚咋快速定位，所以，我订阅了这个专栏 
<br> <br>2我希望我能学到如下内容 <br>2-1:Java源代码怎么变成Java字节码的？ <br>2-2:Java字节码怎么进入JVM的？ <br>2-3:Java 字节码进入JVM后是怎么放置的？ 
<br>2-4:JVM执行字节码的时候怎么定位的？他怎么知道该执行那句代码了？它怎么知道那句代码是什么意思？ <br>2-5:性能优化，我的理解是让干活快的干活，不让干的慢的干，如果做不到，就让干活快的多干，干的慢的少干？JVM的性能优化可能也类似，哪JVM怎么知道谁干的慢谁干的快？JVM在执行Java字节码的时候都是需要做什么事情呢？它怎么安排自己的工作的呢？ 
<br>2-6:实际开发工作中怎么监控JVM的工作情况哪？怎么定位那些懒蛋哪？定位到了怎么解决他们哪？ <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/60/d2a9d196.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>极客时间Mo...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">26</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM很有用，目测会是个不错的专栏，期待！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/51/b1/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>水有罔象</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">12</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看了知识框架图 
可以说十分期待了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/05/1c/d4854ba6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>木甘</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">10</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 是java10吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 介绍的内容不局限于一个版本的。从8到11都会涉及到。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/b1/cc/d7558b97.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>沙漏人生</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 已购，看看作者大能如何把复杂的东西简单化。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/42/c0/23b8fb55.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>浮生老莫</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
期待老师后续的内容，刚想学JVM，就来了，再打磨打磨自己的技术 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/ff/f1/8e9d8e97.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>lynd</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 能够对java虚拟机做分块的详细介绍不，最好能附上简短的代码介绍，谢谢！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 这个专栏会避免介绍具体的虚拟机代码。但我会在最后列举一些学习资料。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fa/6e/9ea01c1d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>zhenTomca...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 期待 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/b5/b0/7f350c5a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Desperado</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-18 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 沙发期待中 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7a/7f/1b389e44.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刘晓宇</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 希望不虚此行，希望有趣。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 很期待 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>为了吃方便...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-18 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 下面这个讲课的目录很给力 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>云学</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 提一个建议: 让读者看懂是第一位的。只要读者会java语法，就应该能让他看懂，谢谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/e9/69/779b48c2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>苏忆</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看了下目录，介绍的比较笼统，希望讲解的时候比较深入并提供相关资料提供学习。谢谢，郑大，一起加油！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/97/25/eaa3132e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小宝儿</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Android用户也可以长按保存 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>Daph</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">7</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 我最嫉妒那些长的比我帅还比我用功的人，期待+1 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/c9/75/62ce2d69.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>公号：猿人...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 单纯根据目录看，介绍的还是比较泛，希望在文章中对核心点能进行深入的分析，期待精彩干货。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/8d/769c8d2a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Daniel</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 果断学习了，站在巨人的肩膀上看世界，然后许下要让世界更加精彩的诺言 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/00/07/8e3ceda8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吴双</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 已购买，期待后续文章啊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>Knuthie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-19 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 与openjdk 
open jvm的对比可以讲讲么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:21.335 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.337 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:21.347 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-21 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">96</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM 
<br>1:现在我的理解 <br>1-1:三个英文单词的缩写，中文意思是Java虚拟机，作用是帮助执行Java字节码的，不同的平台有不同的JVM，这样java源代码经过编译为字节码之后就能在各种平台上运行了 
<br>1-2:JVM还有内存管理，垃圾回收等底层功能，这样程序员就不用太操心这些事情了 <br>1-3:内存管理主要是将JVM的内存容量划分成不同的模块，使用不同的管理方式，核心目的是为了更少的内存使用更快的内存性能以及恰当的内存回收策略 
<br>1-4:垃圾回收之所以存在是因为JVM是运行在内存之中的，它的内存空间是有限的，当加载进内存的对象越来越多的时候，会影响JVM的运行性能，所以，要回收一些内存空间，垃圾回收的关键是识别出垃圾以及使用不影响JVM运行的回收策略 
<br>1-5:JVM是Java代码执行的地方，Java程序性能上出现了问题的时候，我们要从代码层面进行分析、定位、优化，但是我们怎么知道那段代码性能差哪？此时要看JVM中代码的执行情况，看看谁慢？为什么慢？这些我还不清楚咋快速定位，所以，我订阅了这个专栏 
<br> <br>2我希望我能学到如下内容 <br>2-1:Java源代码怎么变成Java字节码的？ <br>2-2:Java字节码怎么进入JVM的？ <br>2-3:Java 字节码进入JVM后是怎么放置的？ 
<br>2-4:JVM执行字节码的时候怎么定位的？他怎么知道该执行那句代码了？它怎么知道那句代码是什么意思？ <br>2-5:性能优化，我的理解是让干活快的干活，不让干的慢的干，如果做不到，就让干活快的多干，干的慢的少干？JVM的性能优化可能也类似，哪JVM怎么知道谁干的慢谁干的快？JVM在执行Java字节码的时候都是需要做什么事情呢？它怎么安排自己的工作的呢？ 
<br>2-6:实际开发工作中怎么监控JVM的工作情况哪？怎么定位那些懒蛋哪？定位到了怎么解决他们哪？ <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/60/d2a9d196.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>极客时间Mo...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">26</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JVM很有用，目测会是个不错的专栏，期待！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/51/b1/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>水有罔象</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">12</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看了知识框架图 
可以说十分期待了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/05/1c/d4854ba6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>木甘</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">10</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 是java10吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 介绍的内容不局限于一个版本的。从8到11都会涉及到。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/b1/cc/d7558b97.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>沙漏人生</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 已购，看看作者大能如何把复杂的东西简单化。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/42/c0/23b8fb55.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>浮生老莫</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">6</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
期待老师后续的内容，刚想学JVM，就来了，再打磨打磨自己的技术 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/ff/f1/8e9d8e97.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>lynd</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 能够对java虚拟机做分块的详细介绍不，最好能附上简短的代码介绍，谢谢！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 这个专栏会避免介绍具体的虚拟机代码。但我会在最后列举一些学习资料。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fa/6e/9ea01c1d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>zhenTomca...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 期待 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/b5/b0/7f350c5a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Desperado</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-18 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 沙发期待中 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/7a/7f/1b389e44.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刘晓宇</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 希望不虚此行，希望有趣。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 很期待 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>为了吃方便...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-07-18 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 下面这个讲课的目录很给力 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>云学</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">12</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 提一个建议: 让读者看懂是第一位的。只要读者会java语法，就应该能让他看懂，谢谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/e9/69/779b48c2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>苏忆</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看了下目录，介绍的比较笼统，希望讲解的时候比较深入并提供相关资料提供学习。谢谢，郑大，一起加油！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/97/25/eaa3132e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小宝儿</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> Android用户也可以长按保存 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>Daph</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">7</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 我最嫉妒那些长的比我帅还比我用功的人，期待+1 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/c9/75/62ce2d69.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>公号：猿人...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 单纯根据目录看，介绍的还是比较泛，希望在文章中对核心点能进行深入的分析，期待精彩干货。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/8d/769c8d2a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Daniel</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 果断学习了，站在巨人的肩膀上看世界，然后许下要让世界更加精彩的诺言 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/00/07/8e3ceda8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>吴双</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 已购买，期待后续文章啊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>Knuthie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-07-19 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 与openjdk 
open jvm的对比可以讲讲么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 46, 46) 
 {executed in 2 msec}
2020-11-19 20:21:21.356 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.357 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:21.360 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.362 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:21.369 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 46, 'https://static001.geekbang.org/resource/image/f7/17/f7f927e2ff234c070424040da2b4ab17.jpg', 
46) 
 {executed in 0 msec}
2020-11-19 20:21:21.374 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.375 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:21.382 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 46, 'https://static001.geekbang.org/resource/image/f7/17/f7f927e2ff234c070424040da2b4ab17.jpg', 
46) 
 {executed in 0 msec}
2020-11-19 20:21:21.391 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.392 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:21.399 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 46, 46) 
 {executed in 0 msec}
2020-11-19 20:21:21.405 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=46 
 {executed in 1 msec}
2020-11-19 20:21:21.407 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:21.414 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 46, 46) 
 {executed in 1 msec}
2020-11-19 20:21:31.314 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='17976225100257' 
 {executed in 3 msec}
2020-11-19 20:21:31.320 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:31.329 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788491, 1) 
 {executed in 1 msec}
2020-11-19 20:21:31.334 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788491, 1) 
 {executed in 1 msec}
2020-11-19 20:21:31.338 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|47            |
|--------------|

2020-11-19 20:21:31.369 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '5ab65f30-4585-4679-8774-bc039584d74c', 
47) 
 {executed in 1 msec}
2020-11-19 20:21:31.370 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '5ab65f30-4585-4679-8774-bc039584d74c', 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.372 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|47            |
|--------------|

2020-11-19 20:21:31.387 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=47, revision_default=1, revision_timestamp=1605788491, 
revision_uid=1 where vid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.393 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.395 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:31.402 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '17976225100257', 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.408 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.409 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:31.416 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '17976225100257', 'zh-hans', 47, 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.422 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.424 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:31.427 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.429 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:31.436 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
1, 1, 47, 0, 0, 0, 0, 0, 0, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.442 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.443 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:31.447 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=47 
 {executed in 0 msec}
2020-11-19 20:21:31.448 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:31.456 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.461 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.463 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:31.470 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 47, 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.476 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.478 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:31.481 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.483 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:21:31.491 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788491, 1605788491, 1, 'zh-hans', 0, 1, 1, 
0, '04-左耳听风', 1, 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.497 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=47 
 {executed in 1 msec}
2020-11-19 20:21:31.499 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:31.506 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788491, 1605788491, 1, 'zh-hans', 0, 
1, 1, 0, '04-左耳听风', 'book', 1, 47, 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.512 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.514 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:31.518 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.519 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:31.527 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.533 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.535 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:31.541 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 47, 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.549 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.551 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:31.554 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.556 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:31.564 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.569 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.571 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:31.579 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.584 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.585 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:31.588 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=47 
 {executed in 0 msec}
2020-11-19 20:21:31.590 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:31.597 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 47, '', 47) 
 {executed in 0 msec}
2020-11-19 20:21:31.603 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.605 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:31.612 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 47, '', 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.617 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=47 
 {executed in 0 msec}
2020-11-19 20:21:31.619 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:31.627 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:31.632 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=47 
 {executed in 1 msec}
2020-11-19 20:21:31.634 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:31.641 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 47, 47) 
 {executed in 1 msec}
2020-11-19 20:21:32.354 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='569546277669407' 
 {executed in 1 msec}
2020-11-19 20:21:32.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:32.358 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788492, 1) 
 {executed in 0 msec}
2020-11-19 20:21:32.360 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788492, 1) 
 {executed in 0 msec}
2020-11-19 20:21:32.361 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|48            |
|--------------|

2020-11-19 20:21:32.372 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'b0c722d2-534b-4337-a2ae-981536d1c046', 
48) 
 {executed in 1 msec}
2020-11-19 20:21:32.373 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'b0c722d2-534b-4337-a2ae-981536d1c046', 48) 
 {executed in 0 msec}
2020-11-19 20:21:32.374 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|48            |
|--------------|

2020-11-19 20:21:32.390 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=48, revision_default=1, revision_timestamp=1605788492, 
revision_uid=1 where vid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.396 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.397 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:32.405 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '569546277669407', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.411 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.412 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:21:32.420 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '569546277669407', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.425 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.427 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:32.430 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.432 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:21:32.439 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
2, 1, 47, 48, 0, 0, 0, 47, 0, 48) 
 {executed in 0 msec}
2020-11-19 20:21:32.445 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.447 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:32.450 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.452 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:32.459 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.465 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.466 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:21:32.474 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.479 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.481 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:32.485 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.487 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:21:32.494 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788492, 1605788492, 1, 'zh-hans', 0, 1, 1, 
0, '100-', 1, 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.500 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=48 
 {executed in 1 msec}
2020-11-19 20:21:32.502 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:21:32.510 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788492, 1605788492, 1, 'zh-hans', 0, 
1, 1, 0, '100-', 'book', 1, 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.515 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.516 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:32.520 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.521 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:32.529 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.535 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.536 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:21:32.544 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.550 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.551 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:32.554 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.556 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:32.563 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.569 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.571 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:21:32.579 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.585 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.586 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:32.589 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.591 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:32.599 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 48, '', 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.604 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=48 
 {executed in 0 msec}
2020-11-19 20:21:32.606 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:21:32.614 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 48, '', 48) 
 {executed in 1 msec}
2020-11-19 20:21:32.620 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.622 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:32.629 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 48, 48) 
 {executed in 0 msec}
2020-11-19 20:21:32.635 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=48 
 {executed in 1 msec}
2020-11-19 20:21:32.637 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:21:32.644 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 48, 48) 
 {executed in 1 msec}
2020-11-19 20:21:34.045 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='180203219707671' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:21:34.050 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:10.608 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='180203219707671' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:22:10.614 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:10.623 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('180203219707671', 1, 'net_content') 
 {executed in 2 msec}
2020-11-19 20:22:10.628 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('180203219707671', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:22:10.633 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|91            |
|--------------|

2020-11-19 20:22:10.673 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='180203219707671' 
and bookchecke0_.name='media' 
 {executed in 0 msec}
2020-11-19 20:22:10.675 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:11.213 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='180203219707671' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:22:11.214 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:11.218 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('180203219707671', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:22:11.219 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('180203219707671', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:22:11.220 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|92            |
|--------------|

2020-11-19 20:22:11.236 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='180203219707671' 
 {executed in 1 msec}
2020-11-19 20:22:11.238 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:11.242 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788531, 1) 
 {executed in 1 msec}
2020-11-19 20:22:11.243 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788531, 1) 
 {executed in 0 msec}
2020-11-19 20:22:11.244 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|49            |
|--------------|

2020-11-19 20:22:11.255 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '4012a409-8c6c-4396-83d4-18a2fad6c53d', 
49) 
 {executed in 1 msec}
2020-11-19 20:22:11.257 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '4012a409-8c6c-4396-83d4-18a2fad6c53d', 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.258 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|49            |
|--------------|

2020-11-19 20:22:11.288 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=49, revision_default=1, revision_timestamp=1605788531, 
revision_uid=1 where vid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.297 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.298 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:11.306 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '180203219707671', 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.311 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=49 
 {executed in 0 msec}
2020-11-19 20:22:11.313 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:11.320 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '180203219707671', 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.326 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.328 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:11.332 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.334 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:11.341 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
3, 0, 47, 48, 49, 0, 0, 48, 0, 49) 
 {executed in 0 msec}
2020-11-19 20:22:11.347 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.349 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:11.352 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.354 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:11.362 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>不知不觉，一年就这样过去了。这个专栏也到了结束的时候。在结束的时候，我需要跟大家正式说声再见，同时也谢谢各位对本专栏的厚爱，并希望大家从我的专栏里有所收获。我也借最后这个结束语回顾一下整个过程。</p> 
<p>老实说，在本专栏刚开始的时候，我对于这个专栏要写点什么是完全没有什么清晰的想法。一方面，我从来没有干过这样的事，这么高频度发表文章的玩法，在一开始来说我其实是相当懵逼的。另一方面，我内心对于收费这个事是很有压力的，不知道要写什么样的内容才值得收费。</p> 
<p>平时写 CoolShell，完全是想写什么写什么，别人爱不爱看都无所谓，而对于收费的内容反而有点不知所措了。所以，在不知道要写什么专题的情况下，只能起个“左耳听风”这么烂的名字，哈哈。这也是为什么在一开始专栏的文章比较散乱，也没什么主线的原因。</p> 
<p>同时，极客时间的编辑也不希望我写很技术的文章，因为他们对标的是“得到”。所以，我早早就写好的《编程范式游记》压了两个多月，而在一开始发表一些非技术类的和个人成长有关的文章（因为大家都觉得这样的文章不但人气足，而且也是我的专长，呵呵）。直到库存的文章用得差不多的时候，才开始发《编程范式游记》。那时我才觉得我应该一个专题一个专题地写，这样才能够扛得住一整年的更新。</p><!-- 
[[[read_end]]] --> <p>于是才有了后面的《区块链》系列，《分布式系统的本质》系列，和《分布式架构设计模式》系列，再之后是大规模的《程序员练级攻略》，以及个人发展的三个核心主题《面试》、《学习》、《沟通》，加上之前的《时间管理》，《技术领导力》，《技术变现》，以及流程相关的《故障处理》、《Git 
协同工作流》、《安全问题》，还有《程序错误处理》、《Go，Docker 新技术选择》等等零散的文章，最终构成了整个专栏。</p> <p>这其中的选题基本上都是我给其它公司做的咨询的内容，或是我到一些公司里分享中的一些内容，其中的很多内容都是对公司收费的，有的是我做企业培训的内容，有的是我为企业解决实际问题后的总结和归纳，有的则是我为企业做的整体架构的设计方案。</p> 
<p>除此之外，还有我个人的很多的我一些比较私房的，只会跟我关系比较近，或是我觉得值得帮的人，才会分享的经验。这些东西我基本上都写在这个专栏里了。而且你可以发现，我的专栏的大多数文章都是在超标中，超过了原有的 
5 分钟的音频时长，很多文章都是 10 分钟以上的，甚至 15 分钟左右的文章也有好多，最新的一篇沟通的文章长达 27 分钟。</p> <p>如果按“得到”那样一篇 2000 字音频 
5 分钟，我的确也可以做到每周 5 篇的更新速度（但是每篇文章就不完整了）。对此，我觉得我还是对得起这个收费专栏的，因为这些内容我问企业的收费都比这个专栏高得多得多。这也是这个专栏在运作到一半的时候开始涨价的缘故，还希望大家能理解。</p> 
<p>当然，在写这个专栏的过程也是令我非常痛苦的，我基本上搭上了我的周末和节假日，因为我平时还有我的主业。我的主业在创业，各种忙，所以只能使用晚上或是休息时间。尤其是在写《程序员练级攻略》的时候，我足足花了 
4-5 个月的时间，基本上把整个互联网人肉地翻了一遍。我在这几个月的时间里阅读了至少上千篇文章，最后我对整个互联网我能找得到的知识进行梳理和筛选，去除了至少 2/3 到 3/4 的内容，产生了现在你看到的专栏文章，然而也是很庞大的。</p> 
<p>然而，这个过程，对我也是很有收获的。一方面，我挑战了自己，我发现居然可以这么高产，有这么多的东西可以写下来。有很多系列，完全是可以出书的，这个专栏我觉得要出上 4-5 本书是没有问题的（当然，我不会出的）。</p> 
<p>另一方面，也是最重要的一方面，我的创业过程中见的人接收到的信息是以前打工时代的一百倍以上，我每天都在不停地学习，思考和总结。所以，正好用这个机会把我的这些思考和想法给总结下来了，这对于我个人来说，比这个专栏的意义更大。从这两方面，我觉得我的成长和收获远远超过了这个收费专栏的收入，因为这种成长的感觉是多少钱都换不来的。</p> 
<p>好了，讲完这个专栏和我自己在这个专栏中的收获，我该谈谈对读者的期望和寄语了。我在我的专栏中不断地说过，学习是没有捷径的，是逆人性的，你需要长期地付出时间和精力。如果一个人订一个收费专栏就可以成为高手，那么这种“高手”早就被“北大青鸟”这样的培训公司“量产”了。</p> 
<p>不过，好在现在的人都被微博、微信、知乎、今日头条、抖音等这些 App 消费着（注意：我说的不是人在消费 App，而是人被 App 消费），然后英文还不行，科学上网也不行。所以，你真的不需要努力，只需要正常，你就可以超过绝大多数人。</p> 
<p>你真的千万不要以为你订几个专栏，买几本书，听高手讲几次课，你就可以变成高手了。这就好像你以为你买了一个高级的机械键盘，27 吋的 4K 屏、高性能的电脑，高级的人体工程学的桌椅，你就可以写出好的代码来一样。我们要成为一个好的羽毛球高手，不是买几副好的运动装备，到正规的体育场去打球，而是要付出常人不能付出的汗水甚至伤痛。任何行业都是这样的。</p> 
<p>这里，我还要把我《高效学习》中那个学习金字塔再帖出来。</p> <p><img src="https://static001.geekbang.org/resource/image/6b/55/6b9c41e6c4c4d43c1a40effce1a8d855.png" 
alt=""></p> <p>再次强调一下，这个世界上的学习只有两种，一种是被动学习，一种是主动学习。听课，看书，看视频，看别人的演讲，这些统统都是被动学习，知识的留存度最多只有 30%，不信你问问自己，今天我的专栏中，你记住了多少？而与别人讨论，实践和传授给别人，是主动学习，其可以让你掌握知识的 
50% 到 90% 以上。</p> <p>所以，我希望我的专栏没有给你带来那种速成的幻觉，而是让你有了可以付出汗水的理由和信心。我没有把我获取知识的手段和我的知识图给隐藏起来，然后，用我理解的东西再贩卖给大家。这样，我可以把我的《程序员练级攻略》一共拆成 
20-30 个小专栏，然后一点一点地来收割大家，这样，我可以把大家困在知识的最底层。</p> <p>然而，我并没有这样做。我觉得大家应该要去自己读最源头的东西，源头的文章都有很多的链接，你也会有第一手的感受，这样你可以顺着找到更好的知识源，并组织出适合你自己的学习路径和地图。订阅我的专栏，如果你不能够按照我专栏里的那些东西去践行的话，那么也毫无意义。</p> 
<p>这也是为什么我在我的读者群中推荐出 ARTS 的任务，每个人每周一个 Algorithm，Review 一篇英文文章，总结一个工作中的技术 Tip，以及 Share 一个传递价值观的东西！我希望这个事可以给大家得到相应的算法、代码、技术和影响力的训练。如果你不去践行，那么我专栏上的这些东西你也就只是看看罢了。</p> 
<p>在实施的过程中，我们建立了一个近 500 人的读者微信群，进这个群的人必需要承诺做 ARTS。然而事实上呢，并没有，敢进这个微信群的人已经很少了，而进来的，过了三个月后，还在坚持做的，只有个位数的人了。这个就是现实。</p> 
<p>这个世界不存在知识不够的情况，真的还没有到知识被少数精英的攥在手里面不给大家的情况，这个世界上的知识就像阳光和空气一样，根本不需要你付费，你就可以获得的。问题是，大多数人都失去了获取知识的能力，你就算把知识放在他们面前，他们也不会去学习，他们需要你喂，甚至需要你帮他们嚼碎了，帮他们消化过了，他们才能吃得到，消化得了。这才是最大的问题。不好意思，我又说实话了，难听但是对你有用。</p> 
<p>我的专栏更多的是我的经验和心得的分享，不是捷径和知识的搬运。我已经花了 20 年的投入和付出，而我的成长中走了很多的弯路和磨难，我希望我的这些经验可以让你只需要付出我一半的时间就可以远远地超过我。</p> 
<p>另外，有很多知识我把其称作为“硬核知识”，这类的知识就像硬核桃一样，相当难啃。就像那些数学公式、计算机底层原理、复杂的网络协议和操作系统的调度等等，这些知识，你除了死磕之外，没有其它的办法。</p> 
<p>不要说，某某技术因为太复杂了所以是“反人类的”，那些“硬核技术”不是反人类的，是“反低能人类”的。所以，别把自己归到那个类别中。要学会不断地挑战自己，挑战自己就是不让自己舒舒服服地像个僵尸一样地活着，而是改变自己让自己像凤凰一样在浴火中涅槃重生！</p> 
<p>青山不改，绿水长流，祝各位成长快乐！</p> <p>再见！</p> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.371 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.373 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:11.382 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>不知不觉，一年就这样过去了。这个专栏也到了结束的时候。在结束的时候，我需要跟大家正式说声再见，同时也谢谢各位对本专栏的厚爱，并希望大家从我的专栏里有所收获。我也借最后这个结束语回顾一下整个过程。</p> 
<p>老实说，在本专栏刚开始的时候，我对于这个专栏要写点什么是完全没有什么清晰的想法。一方面，我从来没有干过这样的事，这么高频度发表文章的玩法，在一开始来说我其实是相当懵逼的。另一方面，我内心对于收费这个事是很有压力的，不知道要写什么样的内容才值得收费。</p> 
<p>平时写 CoolShell，完全是想写什么写什么，别人爱不爱看都无所谓，而对于收费的内容反而有点不知所措了。所以，在不知道要写什么专题的情况下，只能起个“左耳听风”这么烂的名字，哈哈。这也是为什么在一开始专栏的文章比较散乱，也没什么主线的原因。</p> 
<p>同时，极客时间的编辑也不希望我写很技术的文章，因为他们对标的是“得到”。所以，我早早就写好的《编程范式游记》压了两个多月，而在一开始发表一些非技术类的和个人成长有关的文章（因为大家都觉得这样的文章不但人气足，而且也是我的专长，呵呵）。直到库存的文章用得差不多的时候，才开始发《编程范式游记》。那时我才觉得我应该一个专题一个专题地写，这样才能够扛得住一整年的更新。</p><!-- 
[[[read_end]]] --> <p>于是才有了后面的《区块链》系列，《分布式系统的本质》系列，和《分布式架构设计模式》系列，再之后是大规模的《程序员练级攻略》，以及个人发展的三个核心主题《面试》、《学习》、《沟通》，加上之前的《时间管理》，《技术领导力》，《技术变现》，以及流程相关的《故障处理》、《Git 
协同工作流》、《安全问题》，还有《程序错误处理》、《Go，Docker 新技术选择》等等零散的文章，最终构成了整个专栏。</p> <p>这其中的选题基本上都是我给其它公司做的咨询的内容，或是我到一些公司里分享中的一些内容，其中的很多内容都是对公司收费的，有的是我做企业培训的内容，有的是我为企业解决实际问题后的总结和归纳，有的则是我为企业做的整体架构的设计方案。</p> 
<p>除此之外，还有我个人的很多的我一些比较私房的，只会跟我关系比较近，或是我觉得值得帮的人，才会分享的经验。这些东西我基本上都写在这个专栏里了。而且你可以发现，我的专栏的大多数文章都是在超标中，超过了原有的 
5 分钟的音频时长，很多文章都是 10 分钟以上的，甚至 15 分钟左右的文章也有好多，最新的一篇沟通的文章长达 27 分钟。</p> <p>如果按“得到”那样一篇 2000 字音频 
5 分钟，我的确也可以做到每周 5 篇的更新速度（但是每篇文章就不完整了）。对此，我觉得我还是对得起这个收费专栏的，因为这些内容我问企业的收费都比这个专栏高得多得多。这也是这个专栏在运作到一半的时候开始涨价的缘故，还希望大家能理解。</p> 
<p>当然，在写这个专栏的过程也是令我非常痛苦的，我基本上搭上了我的周末和节假日，因为我平时还有我的主业。我的主业在创业，各种忙，所以只能使用晚上或是休息时间。尤其是在写《程序员练级攻略》的时候，我足足花了 
4-5 个月的时间，基本上把整个互联网人肉地翻了一遍。我在这几个月的时间里阅读了至少上千篇文章，最后我对整个互联网我能找得到的知识进行梳理和筛选，去除了至少 2/3 到 3/4 的内容，产生了现在你看到的专栏文章，然而也是很庞大的。</p> 
<p>然而，这个过程，对我也是很有收获的。一方面，我挑战了自己，我发现居然可以这么高产，有这么多的东西可以写下来。有很多系列，完全是可以出书的，这个专栏我觉得要出上 4-5 本书是没有问题的（当然，我不会出的）。</p> 
<p>另一方面，也是最重要的一方面，我的创业过程中见的人接收到的信息是以前打工时代的一百倍以上，我每天都在不停地学习，思考和总结。所以，正好用这个机会把我的这些思考和想法给总结下来了，这对于我个人来说，比这个专栏的意义更大。从这两方面，我觉得我的成长和收获远远超过了这个收费专栏的收入，因为这种成长的感觉是多少钱都换不来的。</p> 
<p>好了，讲完这个专栏和我自己在这个专栏中的收获，我该谈谈对读者的期望和寄语了。我在我的专栏中不断地说过，学习是没有捷径的，是逆人性的，你需要长期地付出时间和精力。如果一个人订一个收费专栏就可以成为高手，那么这种“高手”早就被“北大青鸟”这样的培训公司“量产”了。</p> 
<p>不过，好在现在的人都被微博、微信、知乎、今日头条、抖音等这些 App 消费着（注意：我说的不是人在消费 App，而是人被 App 消费），然后英文还不行，科学上网也不行。所以，你真的不需要努力，只需要正常，你就可以超过绝大多数人。</p> 
<p>你真的千万不要以为你订几个专栏，买几本书，听高手讲几次课，你就可以变成高手了。这就好像你以为你买了一个高级的机械键盘，27 吋的 4K 屏、高性能的电脑，高级的人体工程学的桌椅，你就可以写出好的代码来一样。我们要成为一个好的羽毛球高手，不是买几副好的运动装备，到正规的体育场去打球，而是要付出常人不能付出的汗水甚至伤痛。任何行业都是这样的。</p> 
<p>这里，我还要把我《高效学习》中那个学习金字塔再帖出来。</p> <p><img src="https://static001.geekbang.org/resource/image/6b/55/6b9c41e6c4c4d43c1a40effce1a8d855.png" 
alt=""></p> <p>再次强调一下，这个世界上的学习只有两种，一种是被动学习，一种是主动学习。听课，看书，看视频，看别人的演讲，这些统统都是被动学习，知识的留存度最多只有 30%，不信你问问自己，今天我的专栏中，你记住了多少？而与别人讨论，实践和传授给别人，是主动学习，其可以让你掌握知识的 
50% 到 90% 以上。</p> <p>所以，我希望我的专栏没有给你带来那种速成的幻觉，而是让你有了可以付出汗水的理由和信心。我没有把我获取知识的手段和我的知识图给隐藏起来，然后，用我理解的东西再贩卖给大家。这样，我可以把我的《程序员练级攻略》一共拆成 
20-30 个小专栏，然后一点一点地来收割大家，这样，我可以把大家困在知识的最底层。</p> <p>然而，我并没有这样做。我觉得大家应该要去自己读最源头的东西，源头的文章都有很多的链接，你也会有第一手的感受，这样你可以顺着找到更好的知识源，并组织出适合你自己的学习路径和地图。订阅我的专栏，如果你不能够按照我专栏里的那些东西去践行的话，那么也毫无意义。</p> 
<p>这也是为什么我在我的读者群中推荐出 ARTS 的任务，每个人每周一个 Algorithm，Review 一篇英文文章，总结一个工作中的技术 Tip，以及 Share 一个传递价值观的东西！我希望这个事可以给大家得到相应的算法、代码、技术和影响力的训练。如果你不去践行，那么我专栏上的这些东西你也就只是看看罢了。</p> 
<p>在实施的过程中，我们建立了一个近 500 人的读者微信群，进这个群的人必需要承诺做 ARTS。然而事实上呢，并没有，敢进这个微信群的人已经很少了，而进来的，过了三个月后，还在坚持做的，只有个位数的人了。这个就是现实。</p> 
<p>这个世界不存在知识不够的情况，真的还没有到知识被少数精英的攥在手里面不给大家的情况，这个世界上的知识就像阳光和空气一样，根本不需要你付费，你就可以获得的。问题是，大多数人都失去了获取知识的能力，你就算把知识放在他们面前，他们也不会去学习，他们需要你喂，甚至需要你帮他们嚼碎了，帮他们消化过了，他们才能吃得到，消化得了。这才是最大的问题。不好意思，我又说实话了，难听但是对你有用。</p> 
<p>我的专栏更多的是我的经验和心得的分享，不是捷径和知识的搬运。我已经花了 20 年的投入和付出，而我的成长中走了很多的弯路和磨难，我希望我的这些经验可以让你只需要付出我一半的时间就可以远远地超过我。</p> 
<p>另外，有很多知识我把其称作为“硬核知识”，这类的知识就像硬核桃一样，相当难啃。就像那些数学公式、计算机底层原理、复杂的网络协议和操作系统的调度等等，这些知识，你除了死磕之外，没有其它的办法。</p> 
<p>不要说，某某技术因为太复杂了所以是“反人类的”，那些“硬核技术”不是反人类的，是“反低能人类”的。所以，别把自己归到那个类别中。要学会不断地挑战自己，挑战自己就是不让自己舒舒服服地像个僵尸一样地活着，而是改变自己让自己像凤凰一样在浴火中涅槃重生！</p> 
<p>青山不改，绿水长流，祝各位成长快乐！</p> <p>再见！</p> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 49, 49) 
 {executed in 2 msec}
2020-11-19 20:22:11.396 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.398 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:11.401 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.404 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:22:11.411 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788531, 1605788531, 1, 'zh-hans', 0, 1, 1, 
0, '结束语丨业精于勤，行成于思', 1, 49, 49) 
 {executed in 0 msec}
2020-11-19 20:22:11.418 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=49 
 {executed in 1 msec}
2020-11-19 20:22:11.420 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:11.428 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788531, 1605788531, 1, 'zh-hans', 0, 
1, 1, 0, '结束语丨业精于勤，行成于思', 'book', 1, 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.433 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.435 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:11.439 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.440 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:11.448 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5d64f48167df825a7377e7bb908d4601?bkt=en-29a7ad5d1913bc6f25a470027145da1b0ae8898e2898df7e28b41dc8828c785e7e41c373a598030a&fid=3757516097-778750-1051134454680880&time=1605788529&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-htwtXa50bORk2slpV%2Bg3LQwz128%3D&to=92&size=5373144&sta_dx=5373144&sta_cs=4166&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182843&mtime=1605788484&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5373144&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-24511fa2b5cc8e578a50550097c1a53d381a2f5d138ee520af8eaa675758b59eeadb1a234858bb9f&sl=76480590&expires=8h&rt=pr&r=923554895&mlogid=7510966185798740496&vbdid=64799653&fin=%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E4%B8%9A%E7%B2%BE%E4%BA%8E%E5%8B%A4%EF%BC%8C%E8%A1%8C%E6%88%90%E4%BA%8E%E6%80%9D.mp3&bflag=92,34-92&rtype=1&dp-logid=7510966185798740496&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be837bd5312c7936b827bfa0b7a474bff5305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E4%B8%9A%E7%B2%BE%E4%BA%8E%E5%8B%A4%EF%BC%8C%E8%A1%8C%E6%88%90%E4%BA%8E%E6%80%9D.mp3', 
49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.454 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.456 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:11.464 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5d64f48167df825a7377e7bb908d4601?bkt=en-29a7ad5d1913bc6f25a470027145da1b0ae8898e2898df7e28b41dc8828c785e7e41c373a598030a&fid=3757516097-778750-1051134454680880&time=1605788529&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-htwtXa50bORk2slpV%2Bg3LQwz128%3D&to=92&size=5373144&sta_dx=5373144&sta_cs=4166&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182843&mtime=1605788484&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5373144&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-24511fa2b5cc8e578a50550097c1a53d381a2f5d138ee520af8eaa675758b59eeadb1a234858bb9f&sl=76480590&expires=8h&rt=pr&r=923554895&mlogid=7510966185798740496&vbdid=64799653&fin=%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E4%B8%9A%E7%B2%BE%E4%BA%8E%E5%8B%A4%EF%BC%8C%E8%A1%8C%E6%88%90%E4%BA%8E%E6%80%9D.mp3&bflag=92,34-92&rtype=1&dp-logid=7510966185798740496&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be837bd5312c7936b827bfa0b7a474bff5305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E4%B8%9A%E7%B2%BE%E4%BA%8E%E5%8B%A4%EF%BC%8C%E8%A1%8C%E6%88%90%E4%BA%8E%E6%80%9D.mp3', 
49, 49) 
 {executed in 0 msec}
2020-11-19 20:22:11.469 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.471 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:11.475 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.476 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:11.487 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/e0/be3a923e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>宗小盒</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">118</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 技术成就梦想！左耳听风，右耳聆心。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/9e/6e/c4fa7cbc.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>二师哥</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">55</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直在坚持arts, 后来上不了slack, 便放弃上传了. 但是从来没有停止学习和总结分享.哈哈!(接下的日子,可能要把写的内容都搬到 
slack 的 #arts了) <br> <br>如果说今年最大的收获, 就是认识了耗子叔. <br>让我明确了未来的方向, 人生没有捷径. 付出才会有回报. <br> <br>也加了耗子叔的微信, 
说出了想要去外面见见的想法. <br> <br>一定要践行自己的承诺 <br>以后, 一定是要出去的, 到时希望能和耗子叔说声谢谢. <br> <br>借用我同事常挂在嘴边的一句话: 
真正的大师, 总是怀着一颗学徒的心. <br> <br>给耗子叔点赞!!! <br> <br>最后, 再说声谢谢吧! <br> <br>咱们青山不改, 绿水长流. 他年国外相遇, 定要请你尝尝我做饭的手艺. 
^_^ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/43/b5/c3b366ab.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>古巨基</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 业界良心 质量第一 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/93/cb/34952408.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Samuel</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">19</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 目前来看 看耗子哥的文章是在购买的几项里收获最大的 业界良心！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/92/413f4633.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>orangleliu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感谢耗子哥一年的付出，几乎是篇篇精品，学到了很多，还需要反复的学习和实践arts。再次感谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a1/56/ad5dba39.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>moliniao</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感谢耗子哥，此时此刻，有感慨，更多的是感动，感谢您给我们分享了这么多知识和人生经验，通过这个专栏收获了很多，我以前做了太多重复性工作，自己没有一点提升，一直感到迷茫，没有方向，对自己的职业生涯完全没有目标和规划，荒废了很多年时间。看了你的文章，我有了改变，最近几个月我都在坚持看书，也有了比较清晰的目标，有时我想要是早五年看到这个专栏有多好。没有后悔药，这是我必须付出的代价，现在已经30+了，我希望现在努力还不晚。我想我会持续关注耗子哥的博客，3年后我希望我有质的改变和提升。同时祝愿耗子哥创业成功，保重身体。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7f/f3/535f2ef0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>二胡1999</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 音频一开头，发现居然有配音，心想，完了，估计没有第二季了。 
<br>不过转过头想想，没有第二季也好，因为我实在是赶不上进度。现在还在阅读和练习 《程序员练级攻略2018》中的 《编程语言篇》中的《Java语言部分》中的《Java 并发编程实战》中的《第5章》 
（由于是中英文对照着看的，所以非常非常慢）。你看，一句话里面有这么多个“中的”，可见这颗知识树有多庞大了（抬头一望，眼前一黑~）。 <br>所以从自身的进度来看，我不奢求10年能达到皓子哥的水平，30年能达到我就谢天谢地了。 
<br>以后我争取每个季度来这里汇报一下进度。2018年第3季度的进度是：《Java 并发编程实战》看完了5章；开通了博客，并写了17篇文章。 <br>最后，感谢皓子哥一年的付出，希望还能在极客时间或是CoolShell上继续看到皓子哥的成长与分享，祝一切顺利。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/9b/88/38366265.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>贺荣伟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 大学的时候，偶然的一次机会，我第一次浏览到了酷壳这个网站。看到里面一篇篇干货满满，讲解细致，引人入胜的技术文,我瞬间就被吸引住了。这对于一个渴望新知识，渴望挑战，热爱学习的理工男来说是一个巨大的知识的宝藏，我依稀记得刚接触这个网站那会，我如饥似渴的阅读着网站里面的文章，有时候甚至会通宵的阅读好久，一页一页的，一篇一篇，每一页，每一篇都从头到尾认真的阅读，忘记了吃饭，忘记了别的事情。当然这个过程中，在学习的过程中自己不断的反思，思考总结，去实践，记笔记。 
<br> <br>现在回过头来想想，这个网站当时对我帮助特别大，到现在依然如此，闲来无事的的时候我就打开那个网站，看一两篇文章，每次看必然有新的收获，新的体会，就像品味一瓶隽永独特的陈年老酒，每次品都有不一样的味道。 
<br> <br>当我读研究生的时候，有一天突然在酷壳网站看到了耗子叔开了专栏，我第一时间毫不犹豫的就下载了极客APP并且加入了耗子叔的专栏。 <br> <br>在《左耳听风》专栏里面，我印象中最为深刻的是《程序员练级攻略》系列文章。这些系列文章包括【入门篇】、【修养篇】、【专业基础篇】、【软件设计篇】、【高手成长篇】五大篇章。 
<br>里面系统的介绍了一个基础的程序员如何从学到专业知识才算基础入门；作为技术人员如何提高自己的修养；作为一个追求技术的人应该如何较好地掌握专业基础；介绍了基本的软件设计知识；最后介绍了如何成为一个高手要掌握的与人沟通交流的这些能力，一些成长性的认知的思维。 
<br> <br>在一步步如饥似渴的学习过程中，不知不觉感觉自己慢慢有了自己的收获，自己对自己将来要成为一个怎样的人有了进一步的思考，说真心话，这个专栏对我来说真的是收获很大。 <br> 
<br>当然，专栏里面还要好多好多一样精彩，充满干货的文章。比如，如何利用技术变现、如何面试、如何选择新的技术、如何学习、如何管理自己的时间、如何管理自己的老板和工作、如何成为一个 
Leader……这些东西一定会对你有用。在这里耗子叔还不忘告诫我们，这里一定不会有速成的东西。一切都是要花时间和精力的。任何学习的东西一定是要经过漫长曲折的道路慢慢的坚持，肯下决心做计划才能一步一步学，不可能一口气吃完一个胖子，我相信大家应该懂得这个基础的道理。 
<br> <br>总而言之，在《左耳听风》这个专栏里，我学到了很多的东西，收获真的很多很多，最后，因为加入时间晚了，被客服通知读者微信群群已经满（o(╥﹏╥)o），但是还是好想能有机会加入《左耳听风》读者微信群，可以有机会跟更多优秀的人一起成长，一起进步。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/95/96/0020bd67.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夏洛克的救...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 第一次听耗子叔的声音，和想象的不一样 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKILshrJiasJADt0FTdA9x9rJbSeM3t7BUgUxKqBpsZK4Uukg9qwmbOCmLia89VaqsPcKyauGBLRFw/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>青青木</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 谢谢浩叔 您的专栏对我的帮助非常大，程序员练级攻略的文章和书正在一本一本一篇篇的啃，虽然有些知识已经掌握了但再读一次又会有不少收获 
再次感谢！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Andrew</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">4</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 有种意犹未尽感觉，从gdb调试看到这个专栏、不知不觉已是10多年，作为同龄人，很多观点都能引起共鸣 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/4d/dd/912b52ed.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李奋斗</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 十年磨剑，老兵耿直💪 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/9a/a6/3bddb98c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>大叶枫</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 耗子哥是程序员中能够说真话的讲师 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/6e/93/6fef7aaa.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>石头</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 耗子叔可以留一下创办公司名字吗，以后想去你所在公司的看看。 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/88/2c/87861bb1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>嚴脂红.*</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 非常的不舍，但还是到了结束的这一天了，还会有下一季吗？真的习惯了看您的更新。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/3d/2a/16357640.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>黄土高坡</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 从 coolshell 开始慢慢跟着您的指导一直坚持，虽非 CS 专业，但是一直坚持夯实基础。非常感谢这个专栏的干货。今天还想借这块地请教一个问题。 
<br> <br>问题的上下文是这样的，公司早期为了快速发展业务，还有以当时公司的现状找不到特别优秀的工程师导致目前总体平均水平一般，所以业务应用的质量不好，线上这段时间故障频发。这里面既有流程方面的问题，也有基础中间件部分缺失或功能不完善的因素，还有一些是工程实践不规范，程序员的质量意识不够等多方面因素综合作用的结果。但是目前我接下了 
提升整个服务平台稳定性 的活。 <br> <br>这个活感觉落实起来比较难，总有一些两脚一踩飘空的感觉。目前我们做了下面这些工作： <br>1. 开发了分布式的压测引擎，构建了全链路压测平台，可以做到压测日常化了 
<br>2. 应用服务的基础监控报警，以及服务的监控、限流、降级、熔断等 <br>3. 梳理了每个业务域的业务架构、技术架构，各个业务域之间的依赖关系（区分强弱依赖） <br>4. 
基础设施：消息服务、KV 存储、缓存（包含热点自动检测与预热系统）、数据库中间件 <br> <br>目前遇到的问题是，做了这些后，应用的质量是有部分提升，但是还会有新的问题不断冒出来。所以想考虑如何系统地、体系化地指导大家提升每个业务域的稳定性，或者说鲁棒性。这方面有没有相对成熟的理论体系做支撑，参照着指导我落实提高稳定性这件事儿 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>kevinsu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感谢大哥 收益良多 ！！！个人技术航行中的一盏明灯！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/2d/a4/05f1a368.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Donlin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 虽然还是一名在读学生，没有实际工作经验，但是能够接触到耗子叔的文章真是让我醍醐灌顶，让我对计算机领域的知识有了更加深刻的认知，有一种拨云见日的感觉，希望今后依旧保持不断实践的态度继续学习！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/83/12/e3986110.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>太阳雪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 看完这期的分享，很是感动，同时很感慨，自己在成长和进化的道路上，走了那么多弯路，总是想找捷径，图省力，到最后欺骗的只是自己，还好有这么和清流存在，帮助我看清现实，后面的路自己踏踏实实的走好，这些耗子哥，后会有期 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a6/6c/b814cdcc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>perry2008...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 谢谢，收获很大，也一直在看酷壳的文章！ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 49, 49) 
 {executed in 2 msec}
2020-11-19 20:22:11.497 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.499 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:11.509 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/e0/be3a923e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>宗小盒</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">118</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 技术成就梦想！左耳听风，右耳聆心。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/9e/6e/c4fa7cbc.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>二师哥</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">55</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直在坚持arts, 后来上不了slack, 便放弃上传了. 但是从来没有停止学习和总结分享.哈哈!(接下的日子,可能要把写的内容都搬到 
slack 的 #arts了) <br> <br>如果说今年最大的收获, 就是认识了耗子叔. <br>让我明确了未来的方向, 人生没有捷径. 付出才会有回报. <br> <br>也加了耗子叔的微信, 
说出了想要去外面见见的想法. <br> <br>一定要践行自己的承诺 <br>以后, 一定是要出去的, 到时希望能和耗子叔说声谢谢. <br> <br>借用我同事常挂在嘴边的一句话: 
真正的大师, 总是怀着一颗学徒的心. <br> <br>给耗子叔点赞!!! <br> <br>最后, 再说声谢谢吧! <br> <br>咱们青山不改, 绿水长流. 他年国外相遇, 定要请你尝尝我做饭的手艺. 
^_^ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/43/b5/c3b366ab.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>古巨基</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">31</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 业界良心 质量第一 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/93/cb/34952408.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Samuel</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">19</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 目前来看 看耗子哥的文章是在购买的几项里收获最大的 业界良心！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/92/413f4633.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>orangleliu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">15</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感谢耗子哥一年的付出，几乎是篇篇精品，学到了很多，还需要反复的学习和实践arts。再次感谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a1/56/ad5dba39.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>moliniao</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感谢耗子哥，此时此刻，有感慨，更多的是感动，感谢您给我们分享了这么多知识和人生经验，通过这个专栏收获了很多，我以前做了太多重复性工作，自己没有一点提升，一直感到迷茫，没有方向，对自己的职业生涯完全没有目标和规划，荒废了很多年时间。看了你的文章，我有了改变，最近几个月我都在坚持看书，也有了比较清晰的目标，有时我想要是早五年看到这个专栏有多好。没有后悔药，这是我必须付出的代价，现在已经30+了，我希望现在努力还不晚。我想我会持续关注耗子哥的博客，3年后我希望我有质的改变和提升。同时祝愿耗子哥创业成功，保重身体。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7f/f3/535f2ef0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>二胡1999</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 音频一开头，发现居然有配音，心想，完了，估计没有第二季了。 
<br>不过转过头想想，没有第二季也好，因为我实在是赶不上进度。现在还在阅读和练习 《程序员练级攻略2018》中的 《编程语言篇》中的《Java语言部分》中的《Java 并发编程实战》中的《第5章》 
（由于是中英文对照着看的，所以非常非常慢）。你看，一句话里面有这么多个“中的”，可见这颗知识树有多庞大了（抬头一望，眼前一黑~）。 <br>所以从自身的进度来看，我不奢求10年能达到皓子哥的水平，30年能达到我就谢天谢地了。 
<br>以后我争取每个季度来这里汇报一下进度。2018年第3季度的进度是：《Java 并发编程实战》看完了5章；开通了博客，并写了17篇文章。 <br>最后，感谢皓子哥一年的付出，希望还能在极客时间或是CoolShell上继续看到皓子哥的成长与分享，祝一切顺利。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/9b/88/38366265.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>贺荣伟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 大学的时候，偶然的一次机会，我第一次浏览到了酷壳这个网站。看到里面一篇篇干货满满，讲解细致，引人入胜的技术文,我瞬间就被吸引住了。这对于一个渴望新知识，渴望挑战，热爱学习的理工男来说是一个巨大的知识的宝藏，我依稀记得刚接触这个网站那会，我如饥似渴的阅读着网站里面的文章，有时候甚至会通宵的阅读好久，一页一页的，一篇一篇，每一页，每一篇都从头到尾认真的阅读，忘记了吃饭，忘记了别的事情。当然这个过程中，在学习的过程中自己不断的反思，思考总结，去实践，记笔记。 
<br> <br>现在回过头来想想，这个网站当时对我帮助特别大，到现在依然如此，闲来无事的的时候我就打开那个网站，看一两篇文章，每次看必然有新的收获，新的体会，就像品味一瓶隽永独特的陈年老酒，每次品都有不一样的味道。 
<br> <br>当我读研究生的时候，有一天突然在酷壳网站看到了耗子叔开了专栏，我第一时间毫不犹豫的就下载了极客APP并且加入了耗子叔的专栏。 <br> <br>在《左耳听风》专栏里面，我印象中最为深刻的是《程序员练级攻略》系列文章。这些系列文章包括【入门篇】、【修养篇】、【专业基础篇】、【软件设计篇】、【高手成长篇】五大篇章。 
<br>里面系统的介绍了一个基础的程序员如何从学到专业知识才算基础入门；作为技术人员如何提高自己的修养；作为一个追求技术的人应该如何较好地掌握专业基础；介绍了基本的软件设计知识；最后介绍了如何成为一个高手要掌握的与人沟通交流的这些能力，一些成长性的认知的思维。 
<br> <br>在一步步如饥似渴的学习过程中，不知不觉感觉自己慢慢有了自己的收获，自己对自己将来要成为一个怎样的人有了进一步的思考，说真心话，这个专栏对我来说真的是收获很大。 <br> 
<br>当然，专栏里面还要好多好多一样精彩，充满干货的文章。比如，如何利用技术变现、如何面试、如何选择新的技术、如何学习、如何管理自己的时间、如何管理自己的老板和工作、如何成为一个 
Leader……这些东西一定会对你有用。在这里耗子叔还不忘告诫我们，这里一定不会有速成的东西。一切都是要花时间和精力的。任何学习的东西一定是要经过漫长曲折的道路慢慢的坚持，肯下决心做计划才能一步一步学，不可能一口气吃完一个胖子，我相信大家应该懂得这个基础的道理。 
<br> <br>总而言之，在《左耳听风》这个专栏里，我学到了很多的东西，收获真的很多很多，最后，因为加入时间晚了，被客服通知读者微信群群已经满（o(╥﹏╥)o），但是还是好想能有机会加入《左耳听风》读者微信群，可以有机会跟更多优秀的人一起成长，一起进步。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/95/96/0020bd67.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夏洛克的救...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 第一次听耗子叔的声音，和想象的不一样 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKILshrJiasJADt0FTdA9x9rJbSeM3t7BUgUxKqBpsZK4Uukg9qwmbOCmLia89VaqsPcKyauGBLRFw/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>青青木</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 谢谢浩叔 您的专栏对我的帮助非常大，程序员练级攻略的文章和书正在一本一本一篇篇的啃，虽然有些知识已经掌握了但再读一次又会有不少收获 
再次感谢！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> 
<div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Andrew</span> <!----> </div> 
<div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">4</span> </div> <!----> <!----> </div> </div> <div 
class="_3M6kV3zb_0 _3D2NkqD6_0"> 有种意犹未尽感觉，从gdb调试看到这个专栏、不知不觉已是10多年，作为同龄人，很多观点都能引起共鸣 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/4d/dd/912b52ed.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李奋斗</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 十年磨剑，老兵耿直💪 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/9a/a6/3bddb98c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>大叶枫</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 耗子哥是程序员中能够说真话的讲师 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/6e/93/6fef7aaa.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>石头</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 耗子叔可以留一下创办公司名字吗，以后想去你所在公司的看看。 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/88/2c/87861bb1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>嚴脂红.*</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 非常的不舍，但还是到了结束的这一天了，还会有下一季吗？真的习惯了看您的更新。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/3d/2a/16357640.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>黄土高坡</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 从 coolshell 开始慢慢跟着您的指导一直坚持，虽非 CS 专业，但是一直坚持夯实基础。非常感谢这个专栏的干货。今天还想借这块地请教一个问题。 
<br> <br>问题的上下文是这样的，公司早期为了快速发展业务，还有以当时公司的现状找不到特别优秀的工程师导致目前总体平均水平一般，所以业务应用的质量不好，线上这段时间故障频发。这里面既有流程方面的问题，也有基础中间件部分缺失或功能不完善的因素，还有一些是工程实践不规范，程序员的质量意识不够等多方面因素综合作用的结果。但是目前我接下了 
提升整个服务平台稳定性 的活。 <br> <br>这个活感觉落实起来比较难，总有一些两脚一踩飘空的感觉。目前我们做了下面这些工作： <br>1. 开发了分布式的压测引擎，构建了全链路压测平台，可以做到压测日常化了 
<br>2. 应用服务的基础监控报警，以及服务的监控、限流、降级、熔断等 <br>3. 梳理了每个业务域的业务架构、技术架构，各个业务域之间的依赖关系（区分强弱依赖） <br>4. 
基础设施：消息服务、KV 存储、缓存（包含热点自动检测与预热系统）、数据库中间件 <br> <br>目前遇到的问题是，做了这些后，应用的质量是有部分提升，但是还会有新的问题不断冒出来。所以想考虑如何系统地、体系化地指导大家提升每个业务域的稳定性，或者说鲁棒性。这方面有没有相对成熟的理论体系做支撑，参照着指导我落实提高稳定性这件事儿 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>kevinsu</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感谢大哥 收益良多 ！！！个人技术航行中的一盏明灯！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/2d/a4/05f1a368.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Donlin</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 虽然还是一名在读学生，没有实际工作经验，但是能够接触到耗子叔的文章真是让我醍醐灌顶，让我对计算机领域的知识有了更加深刻的认知，有一种拨云见日的感觉，希望今后依旧保持不断实践的态度继续学习！ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/83/12/e3986110.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>太阳雪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 看完这期的分享，很是感动，同时很感慨，自己在成长和进化的道路上，走了那么多弯路，总是想找捷径，图省力，到最后欺骗的只是自己，还好有这么和清流存在，帮助我看清现实，后面的路自己踏踏实实的走好，这些耗子哥，后会有期 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a6/6c/b814cdcc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>perry2008...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 谢谢，收获很大，也一直在看酷壳的文章！ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.518 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.520 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:11.523 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.525 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:11.532 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 49, 'https://static001.geekbang.org/resource/image/87/44/8726faa5089268bf5dc449c49c3b1a44.jpg', 
49) 
 {executed in 1 msec}
2020-11-19 20:22:11.540 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=49 
 {executed in 0 msec}
2020-11-19 20:22:11.542 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:11.550 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 49, 'https://static001.geekbang.org/resource/image/87/44/8726faa5089268bf5dc449c49c3b1a44.jpg', 
49) 
 {executed in 0 msec}
2020-11-19 20:22:11.556 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.558 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:11.566 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.583 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=49 
 {executed in 1 msec}
2020-11-19 20:22:11.585 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:11.593 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 49, 49) 
 {executed in 1 msec}
2020-11-19 20:22:11.598 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1112368661859769' 
and bookchecke0_.name='net_content' 
 {executed in 0 msec}
2020-11-19 20:22:11.600 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:28.616 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1112368661859769' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:22:28.618 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:28.623 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1112368661859769', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:22:28.625 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1112368661859769', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:22:28.627 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|93            |
|--------------|

2020-11-19 20:22:28.678 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1112368661859769' 
and bookchecke0_.name='media' 
 {executed in 26 msec}
2020-11-19 20:22:28.680 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:29.419 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1112368661859769' 
and bookchecke0_.name='media' 
 {executed in 8 msec}
2020-11-19 20:22:29.420 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:29.427 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1112368661859769', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:22:29.429 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1112368661859769', 
1, 'media') 
 {executed in 1 msec}
2020-11-19 20:22:29.431 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|94            |
|--------------|

2020-11-19 20:22:29.505 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1112368661859769' 
 {executed in 1 msec}
2020-11-19 20:22:29.507 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:29.531 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788549, 1) 
 {executed in 14 msec}
2020-11-19 20:22:29.534 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788549, 1) 
 {executed in 0 msec}
2020-11-19 20:22:29.536 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|50            |
|--------------|

2020-11-19 20:22:29.588 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '7f832d85-2f73-4c08-bfac-72d1a0acd154', 
50) 
 {executed in 3 msec}
2020-11-19 20:22:29.590 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '7f832d85-2f73-4c08-bfac-72d1a0acd154', 50) 
 {executed in 1 msec}
2020-11-19 20:22:29.592 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|50            |
|--------------|

2020-11-19 20:22:29.688 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=50, revision_default=1, revision_timestamp=1605788549, 
revision_uid=1 where vid=50 
 {executed in 36 msec}
2020-11-19 20:22:29.700 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:29.702 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:29.728 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1112368661859769', 'zh-hans', 50, 50) 
 {executed in 2 msec}
2020-11-19 20:22:29.740 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=50 
 {executed in 3 msec}
2020-11-19 20:22:29.744 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:29.755 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1112368661859769', 'zh-hans', 50, 50) 
 {executed in 1 msec}
2020-11-19 20:22:29.763 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=50 
 {executed in 1 msec}
2020-11-19 20:22:29.765 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:29.770 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=50 
 {executed in 1 msec}
2020-11-19 20:22:29.773 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:29.786 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
3, 0, 47, 48, 50, 0, 0, 48, 0, 50) 
 {executed in 1 msec}
2020-11-19 20:22:29.796 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:29.843 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:29.848 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=50 
 {executed in 2 msec}
2020-11-19 20:22:29.850 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:29.860 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<h1>跟员工沟通</h1> <p>在跟员工沟通部分，我将主要讨论令管理者头痛的五大难题：怎样进行一对一会议；员工绩效不好时，如何沟通；怎样“搞定”特立独行的员工；怎样挽留离职员工；如何劝退员工等。首先，我们来看看一对一会议。</p> 
<h2>一对一会议</h2> <p>一对一会议（one-one meeting）是一种非常重要的管理手段，它能拉近管理者与员工的关系。但你要记住，好的一对一会议是以员工为中心的，而不是以管理者为中心的。<strong>一对一会议时，管理者需要做的是倾听，而非“喋喋不休”地教育</strong>。</p> 
<p>我待过的几个外企里，一对一会议基本都是标配，频率是每半个月一次。会议重点涉及以下四个方面的内容。</p> <ul> <li> <p><strong>工作状态</strong>，主要想了解员工的工作状态，因为人的状态是变化的，不是稳定的，或多或少会有这样或那样的一些问题。这个环节主要了解影响员工状态的细节，为员工进行疏导、激励和优化，并和员工一起对过去几周的工作做出得失总结，一起进步。</p> 
</li> <li> <p><strong>个人发展</strong>，员工的个人发展是员工和公司的头等大事，所以，你需要了解员工的兴趣、爱好、擅长做的事儿，以及缺点和不足，并结合公司的目标和实际项目需求，为员工创造更有挑战的工作，让员工更好地成长。</p> 
</li> <li> <p><strong>公司组织</strong>，让员工聊聊对公司有什么看法，觉得公司哪儿做得好，哪儿做得不好，有哪些可以改进的建议。如果公司非常大的话，可以请员工来聊聊自己所在的部门或者团队的一些情况。目的是了解员工是否认可公司的目标和方向，这其中可能会有一些误解，或者意见上的不统一，需要跟员工说明白。</p> 
</li> <li> <p><strong>Leader 自己</strong>。也就是，请员工聊聊对自己的看法。放平心态，不管是好的还是坏的，都用平常心看待。如果被员工指出哪里有不足，可以请员工给自己一些建议，或者请他来谈谈他认为怎样做会比较好。这个环节很重要，对管理者来说是个很好的反思和学习的过程。</p> 
</li> </ul><!-- [[[read_end]]] --> <p>一对一会议的时间通常为半个小时到一个小时，时间不要太长。一对一会议中，我的核心沟通原则是将心比心。这其中的诀窍是让员工畅所欲言，不要有任何的忌讳，能够讲出最真实的想法，哪怕想法是很偏激很不中听的，只要是真实的都应该获得尊重。（作为管理者，你一定要明白，那些“直言不讳”的员工是不错的，因为他们的心思不用让你“猜”。“真言”虽然不中听，但相比那些中听的“谎言”来说，其实是会降低你的管理难度的。）</p> 
<p>另外，一对一的沟通都是直接跟下属聊，你的直接下属跟他的直接下属聊。此外，你还可以跳过层级直接跟下属团队中的骨干成员聊。骨干的意思是，特别被重视的人，是那些团队不愿意失去的人。跟骨干聊是很有必要的，这样能够体现出你对他的重视，对员工来说是一种认可的方式。</p> 
<h2>绩效沟通</h2> <p>绩效沟通对于管理者来说可能是最难的一个事了，尤其是跟那些绩效不好的人沟通一年的绩效结果，可能是管理者们最不愿意去做的事。</p> <p>我曾经的团队里发生过一件事儿，令我至今记忆犹新。有一个从别的团队转岗过来的女孩，工作一段时间之后，我和她原来团队的负责人来一起来 
review 她的绩效。她原来的负责人上来就说，“你原来是做流程工具开发的，但是我们觉得你程序写得不好……”话没说完，这个小女孩就直接跳起来了，反问道：“我程序写得不好，你当时为什么不跟我说。你跟我说哪里做得不好，我马上改。可是你接受了，就说明我的绩效至少达标了……”不难想象，这场绩效沟通会议就是一个“翻车现场”！</p> 
<p>那时候，我刚做管理两个月，这事儿对于当时的我来说很是震撼。所以从那个时候开始，不管员工出什么问题，我都会立马给出反馈，明确告诉团队成员他工作的不足之处，以及改进方案。比如，你这段代码太松散了，这里的代码写得不够好。你最近好像状态不是很好，老出 
Bug。这样的低级错误为什么会发生？哪里有问题？等等。是的，<strong>沟通一定要放在平时，不要搞成像秋后算账一样！因为你是管理者，不是地主监工</strong>。</p> <p>如果员工实在能力欠缺，难以达标，其实“帮助”过程中，他自己也是知道的。基本上，等不到年底，这样的员工也会自己离职走人，因为这样玩下去对他自己不利。</p> 
<p><strong>但要注意的是，反馈的过程中，不是我在指责员工，而是我在帮助员工。一定要有帮扶的态度，这样员工会更容易接受</strong>。此外，说话的维度要高一点儿，要共情，不要激起员工的情绪，引发不必要的矛盾。在反馈和帮扶的过程中，你能够让员工感受到你的关注和重视，对员工来说是种很好的正向鼓励，有利于员工，乃至团队的进步和成长。</p> 
<h2>特立独行的员工</h2> <p>做过多年管理者的你，一定遇到过一些“特立独行”的员工，他们很自我，不服管，喜欢按照自己的思路做事儿。该如何对这类员工进行管理和沟通，想必会令你头痛不已。尤其是当你感觉到某些“特立独行”的员工天赋异禀的时候，你更希望能够将其优势充分发挥出来，为团队创造更大的价值。这里，我就来谈谈我的想法和经验。</p> 
<p>这里， 我们只讨论有很强能力的人（因为能力不强还特立独行的人最好劝退），对于这类员工，我有两个方法。</p> <ul> <li> <p>第一个方法是给他找到匹配的人，要么是比他牛的人，要么是跟他旗鼓相当可以在一起共事儿的人，跟他一起工作。有能力的人，一般都受不了一群猪队友的，因为他们会觉得老是被问一些好无聊的问题，被问得很烦，而且有很多很简单的事，要讲半天，对方却还听不懂。是的，聪明的人都是这样的，很多聪明人都是特立独行的人。</p> 
</li> <li> <p>第二个方法是给他一些独立的工作，把他隔离出去。让他做一些相对独立和有挑战的事情。在微软等很多公司里面，都有一个工种叫 IC – Individual Contributor。把他们隔离出来是一个不错的选择。</p> 
</li> </ul> <p>但是话说回来，有些人还是很难办的，以上两种方式可能对他都不起作用。我也遇到过这样的员工，能力很好，但是特别挑剔工作。任何事情都非常矫情。这个时候你要多找他聊一下，你需要直截了当，明确没有二义地说明他需要做的工作，以及岗位对他的要求。注意，一定要非常地明确！如果不行，那就只有分手了。</p> 
<p>这里有个原则你要记住：<strong>当你在一个人身上花的精力和时间成本，大于你到外面找一个更好的人或者能力相当的人来替代他的时候，你就要坚决地把他替换掉</strong>。</p> 
<h2>挽留离职员工</h2> <p>如果一个员工离职，而你又希望他留下来，怎么办？首先，<strong>你要知道他离职的原因</strong>。我觉得，绝大多数员工离职都是跟老板或者公司有关系的。</p> 
<p>但是你和他做沟通的时候，他肯定也不好意思说出真实原因。所以，你要做的是让他敞开心扉地去谈离职的事情。你可以看看，心理访谈类节目中的主持人是怎样做的。通过看这些节目，以及结合我自己的经验，我认为，想要让员工跟你袒露心扉，你一定要明确表达你对他的认同，甚至可以说一些公司的坏话。</p> 
<p>这样，你可以让他的心理界限逐渐消失，就会开始诉说自己的真实原因（谁没有点苦闷的心事呢）。这时你一定要认真倾听，就算是他在吐槽，也一定要让他吐干净。为什么呢？我觉得吐槽公司并不是什么坏事儿，员工吐槽公司，说明对公司还有感情，爱之深，责之切。</p> 
<p>借此，你可以收集一些意见，这些意见也许可以让公司变得更好，因为他的离职原因也有可能是其它人的离职原因，这对于留住还在职的员工是很有用的。其次，你可以知道他离开的真实原因，思考一下是否能采取什么举措，进行挽留。</p> 
<p>另外，<strong>生意不行，友情在</strong>。每个人的离开都是有各自不同的理由，实在挽留不成的时候，也要注意经营好这份情意。</p> <p>在我认为挽留不成的时候，我通常会站在他的角度作为他的朋友为他着想，甚至帮他介绍工作，或是在他离开时再为他争取一些利益或是别的什么。这样做会让员工觉得这样的知心老板不好找啊，就算最终还是离开，但是未来也一定会有联系，也许未来还能在一起共事儿。这里的逻辑是，<strong>既然不能在此时挽留下来，那就放眼未来，人生还很长，能在一起工作的机会还有很多</strong>。</p> 
<p>其实挽留是一件挺为难人的事情，因为对方做完了这个决定以后，再回头也需要很大的勇气。所以，你要提前判断员工离职的前兆。一个人要离职是有前兆的，你平时肯定是能感觉到的。比如，他一定会变得不积极，甚至会有一些抱怨。这时候其实是你挽留他的重要时机，因为有抱怨说明还喜欢这个公司。</p> 
<p>而他最终跟你摊牌的时候，或是对公司漠不关心的时候，留下来的机会是很小的。员工离职之前一定会有很多前兆的，我建议你，细心体会一下，在最佳挽留时机进行挽留，不流失自己的“爱将”。</p> 
<p>最后提一句，一般来说，任何员工，任何事，干了两年就是一个大限，离职率极高。</p> <h2>劝退员工</h2> <p>在员工没有达到最低绩效的时候，该怎样劝退员工，也是令很多管理者头痛的问题。还是那句话，劝退一定不要秋后算账，要把沟通放在平时。</p> 
<p>劝退一个人，你一定要给出一段时间的试用期，也就是我们说的缓冲期。一方面，表达出“我是愿意帮助你的，我也给你机会”的意思。同时，你也要给对方制定一个目标，一个月之内，他要解决和改进他的一些工作问题。因为人都是有状态的，你需要给他一段时间。另一方面，也要让员工有所准备，可以在外面寻找一些相关的机会，而不至于失业。</p> 
<p>注意，这里我想表达的是，<strong>任何人都应该有可以纠正错误的机会，公司应该给员工这样的机会，员工也应该给公司同样的机会</strong>。</p> <p>当然，在分手那天到来的时候，你可以跟员工一起看一下，他的工作是什么，他的职责是什么，但是他的成绩又是什么？你要找的是无可辩驳的证据。然后跟他说明，因为这些原因，我希望我们能够和平地分手。</p> 
<p>最好的方式是，给员工一个面子，让他把你开掉，比如：找外面的猎头，把员工挖走。亚马逊经常这么做。亚马逊还有主动离职奖金，第二年离职给 4000 美金，第三年给 6000 美金……国内公司则简单粗暴一些。</p> 
<p>在劝退的时候，你可以请他吃一顿饭，或者送他一个纪念品。这个纪念品，可以是他在你这儿工作过程中，做得最好的一件事儿。比如，我会把这件事儿印成一件 T 恤，送给他。事儿是事儿，人是人。把工作和私交分开，表明这并不代表我个人不愿意接受你，只是我有我的职责，我是公司的一名管理者，职位在身，需要负责。但是，像情人分手一样，分开后，我们还是好朋友。</p> 
<h1>跟客户沟通</h1> <p>在跟客户沟通这部分，我主要分享三方面的内容：吸引客户的兴趣、帮客户发现问题和管理客户的期望。</p> <h2>吸引客户的兴趣</h2> <p>在前面的《沟通方式及技巧》一文中，我分享了一个跟客户沟通的小技巧——初次和客户见面时要懂得吸引对方的兴趣。想做到这点，其实并不难，但它的前提条件是在见客户之前必须要做足功课，确保你自己了解客户的关注点，以及当下的痛点。然后在交谈的过程中，可以有目的性地在这些方面展开话题，突出一下自己在相关领域的优势和资源。一般情况下，这么做都是能很快引起客户兴趣的。</p> 
<p>举个例子里，我当天见的是某个银行的副行长，周围的人都穿着衬衫和西裤，很正式，而我的着装却有些随意。估计要不是别人介绍的，他一眼都不想看我，几句话就能把我打发了。开始的几个问题，也着实让我有些狼狈。问我，你们公司规模多大？有多少人？有什么案例？……我如实回答后，只看见他满脸不屑的样子……但我后来却用了不到 
20 分钟的时间就成功吸引了他的兴趣。</p> <p>见他之前我做足了功课，了解金融业下半年整体趋势都很糟糕，银行贷款都办不了，国家货币在紧缩，还有 P2P 这些乱七八糟的事儿。于是，我就跟他说了一下形势和相关的解决方案，然后就明显地感觉到他开始感兴趣了，因为我谈的都是一般人不知道的（原谅我在这里不写这些了，因为这是我现在创业的商业机密）。于是我再加油添醋，说我这边可以接触的资源日流水好几亿……还没等我说完，他就开始对我这个人以及我的谈话内容充满了兴趣。</p> 
<p>也就是说，做足功课，了解客户的痛点或是 KPI 是与客户沟通的第一步，也是最关键的一步，不仅可以引起对方的兴趣，还能决定见面时沟通的内容。兵法有云：知己知彼方能百战不殆，说的就是这个道理。</p> 
<h2>帮客户发现问题</h2> <p>有了“兴趣”这块开门砖以后，接下来谈什么、怎样谈就要容易多了。这个时候，我们可能就要进入到问题的实质，深入交流了。这里有以下几个关键点需要你把握。</p> 
<ul> <li> <p><strong>结合客户的痛点，了解客户做过的尝试</strong>。在这里我们一定要明白，客户的痛点其实就是我们的发力点，也就是我们的价值点。所以，我们一定要弄清楚客户的痛点是什么，以及针对这个痛点，客户曾经做过哪些尝试。</p> 
<p>这样不仅能够让我们更加深入和全面地了解客户痛点，而且有助于我们在思考解决方案的时候绕开很多用户曾经踩过的雷。或者，我们也可以从这些已经做过的尝试中获得一些启发和帮助，因为很多时候尝试失败，并不一定意味着方法是错的，很有可能是技巧、能力或者资源配置出了问题。</p> 
</li> <li> <p><strong>深入细节，了解细节才会有更准确的信息</strong>。前面文章中提到了倾听的重要性，在与客户进行沟通的时候，倾听也尤为重要。因为你只有深入了解细节，才能掌握更准确的信息，从而给出更能帮助客户解决问题的方案。但是在与客户沟通的过程中，你有时会发现客户自己描述不清楚细节，或者说不清楚自己到底想要什么。</p> 
<p>这时，你可以考虑让客户举个例子，说给你听。从这个例子中，你可以获得更多的信息，因为它将很多模糊不清的东西具象、形象化了。你可以把你的理解说给客户听，跟他确认你的理解是否准确，然后逐渐磨合，最终达成共识。这个更为准确的信息是你后面解决问题的前提和基础。</p> 
</li> <li> <p><strong>小心 X/Y 问题，找到 X 问题</strong>。在《沟通技术》一文中，我提到过 X/Y 问题。很多时候客户跟你提的都是 Y 问题，比如，我们要做分布式架构，我们要做大中台，我们要做线下线上融合，等等。每次面对这些问题，我都要反问，你为什么要做分布式架构？为了大规模营销，为了稳定性，还是为了加快开发速度？做大中台，你是为了什么？ 
是为了打通各个业务线，为了快速开发，还是为了技术输出？等等。</p> <p>要解的真实问题才是 X 问题，手段都是 Y 问题。只有你真正了解了 X 问题，才能真正明白问题背后的出发点。而当你了解了 
X 问题后，你就要到源头，来质疑或是改良他的 Y 问题，甚至提出 Z 方案。这时，你会发现你的客户开始跟着你的思路走了。这里有个要点是，<strong>一定要分析客户问题背后的本质原因，从根本上帮助客户解决问题</strong>。</p> 
</li> </ul> <p>很多时候，客户的问题只是表面的问题，你要深入下去，才能找到最本质最根本的 root-cause，这和我们定位 Bug 的道理是一样的。只有找到根本原因，你才能对症下药，标本兼治。所以，我现在也有了所谓的“一针见血”的沟通能力。</p> 
<h2>管理客户的期望</h2> <p>在帮助客户发现问题之后，我们就要来解决问题了。这个时候，帮助客户设立合理的目标就显得尤其重要了。一般来说，很多公司的销售都会把客户的期望搞得很高很高（因为要成单），经常性地用最少的时间，最低的价格，做最多的事，基本上来说这相当于把开发团队卖掉了。不要以为只有销售会这样，我们的很多管理者也是一样的，为了保住自己的位置，拼命地透支自己的团队，等成绩拿到以后，跳槽到别的公司。</p> 
<p>其实，我们是可能做到既让客户满意，又不会作茧自缚的，有以下几个手段可以使用。</p> <ol> <li> <p>要至少给出三套方案来让客户选择。一个是低成本的玩法，一个是高成本的玩法，一个是性价比比较高的玩法，这其中的取舍是我们可以去引导客户的。</p> 
</li> <li> <p>另外，我们需要找一些相关的案例和参照物来对比我们给的上述方案，这样可以让客户有一个更为清醒的判断和认识。以此来教育客户不同的方案代表着不同的期望和不同的结果。</p> 
</li> </ol> <p>然后跟客户进行讨论，该怎样优化和完善方案中的目标，最终达成双方都认可和接受的目标。这里一定要注意，只有经过了取舍，明确了哪些做哪些不做，我们达成共识的目标才会是明确的，有针对性的，而且是具有很强的可操作性的。</p> 
<p>当然，有的时候，客户可能会执意要求实现一些不切实际的方案。比如，有时客户可能会将项目时间压得太紧，这样你无法保证按质完成所有任务。除了需求分析、设计和开发外，一个完整的软件工程也要保证质量，至少必须包含测试（至少要有手动的集成测试，考虑可维护性的话还要包括自动的单元测试）和 
bug 修复的部分，而这两个部分加起来的时间通常比开发本身的时间还要多。</p> <p>如果项目时间压得太紧，只有两条路可以选。第一，保证质量，但减少一些功能或其他要求，如去掉一些对还未调研清楚的第三方库的依赖；第二，保证主要功能完成，但不完全保证质量。</p> 
<p>这时，我们可以和客户一起分析，哪种选择更为合理、可行，将选择权交给客户。这里记住，<strong>永远不要跟客户说不，要有条件地说是，告诉客户不同的期望要有不同的付出和不同的成本。不要帮客户做决定，而是给客户提供尽可能多的选项，让客户来做决定</strong>。</p> 
<p>有的时候，客户对交付时间和完成的功能会有过高的预期。这时我们要和客户商谈，降低这个预期，但同时尽量给予一些其他的补偿。比如，这个事臣妾做不到啊，要不你多给我一些时间，我少收你点费用？或是，你这个太复杂了，太重了，要做我先做个简单版的，这样可以以低成本来看看客户的反应，然后根据客户的反应再看下一步怎么做，等等。我们不要拒绝，要疏导。</p> 
<p>如果客户不愿意放弃他的高目标，那么我们就争取一些补偿或是交换。一般来说，只要是合理的，人总是通情达理的，一般来说都会满足你的。比如：我们可以跟业务部门讨论，我做完这一版后，你要给我 
1 个月的时间，重构一下我的代码，请给我们这些时间。</p> <p><strong>讨价还价是这个世界能运转的原因之一，要学会使用</strong>。</p> <p>总结下来，在与客户沟通预期时，我通常会坚持以下几个原则。</p> 
<ul> <li><strong>一定要给客户选择权，永远不要说不，要有条件地说是</strong>。</li> <li><strong>降低期望的同时给予其他的补偿</strong>。</li> 
<li><strong>提高期望的同时附加更多的条件</strong>。</li> <li><strong>对于比较大的期望要分步骤达到客户的期望</strong>。</li> <li><strong>不要帮客户做决定，而是给客户提供尽可能多的选项，然后引导客户做决定</strong>。</li> 
</ul> <h1>跟老板沟通</h1> <h2>了解你的老板</h2> <p>在跟客户沟通中，我强调了了解客户及其痛点的重要性，这是第一步，也是最为关键的一步。同样，想跟老板进行良好的沟通，了解你的老板也很重要。首先，你需要了解老板的做事风格。比如，有的老板是事无巨细的，有的老板是大刀阔斧的，有的老板是威风管理，而有的老板则是老好人，等等。</p> 
<p>其次，你还要了解老板的目标和 KPI 是什么。最后，要知道老板的老板是谁，他的风格是什么，他的目标和 KPI 是什么，因为你老板的目标和 KPI 是你老板的老板给的。所以你了解老板的老板才更能了解你的老板，从而做更正确的事儿。</p> 
<p>想了解你的老板，最简单的方法就是察其言观其行，因此 “倾听”就显得尤其重要了。老板总是喜欢教育下属，总是喜欢发表高谈阔论的，所以，倾听老板是件不难的事，但是，这也是一件很难的事！因为老板职位在身，所以，有很多事老板是不会对下属说的，尤其是很多负面或是有压力的事。他不能表现得很懦弱，否则就没人听他的了。老板从来都是孤独和孤单的，牙被打掉了往肚子里咽。<strong>所以，倾听老板会有一些出乎你的意料的发现，你要能了解老板背后的苦衷，那些才是最重要的</strong>。</p> 
<h2>赢得老板的信任</h2> <p>你要赢得老板的信任，就要知道老板也是要有成绩的，他们只会关心那些能为他带来成绩的员工。所以，你要成为工作当中的骨干人员，能把自己的事搞定，能把别人搞不定的事搞定。这样老板才会依赖你，你才可能有更好的“议价能力”。不然，就算你对老板的马屁拍好了，你也不会真正和老板有平等的话语权，你也只不过是老板的跟班罢了。</p> 
<p>当你有了能力后，老板才会给你机会，你有了能力又有机会，你就会有更多的机会。这些机会能让你有更多的经验来提升自己的能力，于是形成一个正循环，你的老板会越来越信任你，你才能获得真正和老板平等的权利。</p> 
<h2>管理老板的期望</h2> <p>就算你很牛，老板很信任你，你还是要学习管理老板的期望。在每次和老板交流的时候，你都要确认老板的期望是什么，如果跟你的想法有所偏差，一定要及时反馈和讨论。因为每个人的特长和优势不同，老板希望你做的，未必是你擅长或者乐于做的。有什么想法一定要诚实地说出来，以免被安排了不喜欢的工作，自己越干越不开心，越干越没热情。这就很麻烦了。</p> 
<p>这和管理客户的期很相似，不要帮老板做决定，给老板几种方案，并引导他做决定。不要说不，要有条件地说是，在拒绝的同时给予补偿。如果反抗不了了，就争取其它的利益……</p> <p>你要明白，老板如果没人了，他将一事无成，所以，他一般都会是通情达理的。只要你注意表达的方式和方法，摆事实讲道理，态度上没问题；只要你从事情的不同角度展开，权衡一下利弊，并使用共情和高维这样的沟通方式，让老板能站在你的立场将这些问题想清楚，你一定能够争取得到你想要的。</p> 
<h2>非暴力“怼”老板</h2> <p>沉默是金，是我今天给出的最后一个方法。它应该在什么时候用呢？我来介绍一下。在工作中跟老板有意见分歧是在所难免的。但有一些时候，你明明觉得自己给老板提供了一个你认为从各个维度来讲都很不错的方案，但老板还是说，这不行，两个月时间太长，最多给你一个半月时间。这个时候最好的方法不是怒气冲冠，也不是直接 
Say No，而是保持沉默不说话，闷着。</p> <p>相信我，只要你沉默下来，你的老板就会沉不住气的，气氛的尴尬不是他想要的，他只是希望你能听他的。所以，一般来说，老板马上就会打破沉默，对你开始各种“忽悠”，如果你依然不说话，你的老板就会开始妥协，换各种思路来说服你，然后你就可以顺着老板的话，跟老板谈条件了。这是一个非常有用的谈判技巧。</p> 
<p>比如，老板感到不安后，他一定会安慰你，也会给你开条件：这样吧，你努力把它弄完，年底给你涨工资。你不要立马答应下来，要表现出极不情愿，告诉老板这违背了客观发展规律。老板会再次利诱你。</p> 
<p>这时，你再表态，带着弟兄们拼一拼，争取一半月内搞定，但就这一次，下不为例。你是可以原谅老板“混蛋”一次的，给他一次机会。但你要让他感觉到欠你和你的团队人情，欠人情是最恐怖的事儿了。这样，他下次再做类似事情的时候，自己都会不好意思。</p> 
<h1>小结</h1> <p>好了，总结一下今天的内容。今天的内容好丰富，包含跟员工沟通、跟客户沟通以及跟老板沟通三大部分，将前几篇文章中介绍的沟通方法和技巧用了个遍。相信你一定有挺多的体会和感悟。</p> 
<p>其实不管对方是员工、客户，还是老板，甚至是自己的家人朋友，与人沟通的关键，都是要好好说话，静心聆听，能够尊重对方的想法和情绪，更能站在对方的角度来思考。只要你心中时刻想着共情、共赢，你的沟通一定会顺畅和高效很多。《高效沟通》系列今天更新结束，希望这些内容能给你一些帮助和启发。</p> 
<p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 50, 50) 
 {executed in 2 msec}
2020-11-19 20:22:29.873 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=50 
 {executed in 2 msec}
2020-11-19 20:22:29.875 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:29.886 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<h1>跟员工沟通</h1> <p>在跟员工沟通部分，我将主要讨论令管理者头痛的五大难题：怎样进行一对一会议；员工绩效不好时，如何沟通；怎样“搞定”特立独行的员工；怎样挽留离职员工；如何劝退员工等。首先，我们来看看一对一会议。</p> 
<h2>一对一会议</h2> <p>一对一会议（one-one meeting）是一种非常重要的管理手段，它能拉近管理者与员工的关系。但你要记住，好的一对一会议是以员工为中心的，而不是以管理者为中心的。<strong>一对一会议时，管理者需要做的是倾听，而非“喋喋不休”地教育</strong>。</p> 
<p>我待过的几个外企里，一对一会议基本都是标配，频率是每半个月一次。会议重点涉及以下四个方面的内容。</p> <ul> <li> <p><strong>工作状态</strong>，主要想了解员工的工作状态，因为人的状态是变化的，不是稳定的，或多或少会有这样或那样的一些问题。这个环节主要了解影响员工状态的细节，为员工进行疏导、激励和优化，并和员工一起对过去几周的工作做出得失总结，一起进步。</p> 
</li> <li> <p><strong>个人发展</strong>，员工的个人发展是员工和公司的头等大事，所以，你需要了解员工的兴趣、爱好、擅长做的事儿，以及缺点和不足，并结合公司的目标和实际项目需求，为员工创造更有挑战的工作，让员工更好地成长。</p> 
</li> <li> <p><strong>公司组织</strong>，让员工聊聊对公司有什么看法，觉得公司哪儿做得好，哪儿做得不好，有哪些可以改进的建议。如果公司非常大的话，可以请员工来聊聊自己所在的部门或者团队的一些情况。目的是了解员工是否认可公司的目标和方向，这其中可能会有一些误解，或者意见上的不统一，需要跟员工说明白。</p> 
</li> <li> <p><strong>Leader 自己</strong>。也就是，请员工聊聊对自己的看法。放平心态，不管是好的还是坏的，都用平常心看待。如果被员工指出哪里有不足，可以请员工给自己一些建议，或者请他来谈谈他认为怎样做会比较好。这个环节很重要，对管理者来说是个很好的反思和学习的过程。</p> 
</li> </ul><!-- [[[read_end]]] --> <p>一对一会议的时间通常为半个小时到一个小时，时间不要太长。一对一会议中，我的核心沟通原则是将心比心。这其中的诀窍是让员工畅所欲言，不要有任何的忌讳，能够讲出最真实的想法，哪怕想法是很偏激很不中听的，只要是真实的都应该获得尊重。（作为管理者，你一定要明白，那些“直言不讳”的员工是不错的，因为他们的心思不用让你“猜”。“真言”虽然不中听，但相比那些中听的“谎言”来说，其实是会降低你的管理难度的。）</p> 
<p>另外，一对一的沟通都是直接跟下属聊，你的直接下属跟他的直接下属聊。此外，你还可以跳过层级直接跟下属团队中的骨干成员聊。骨干的意思是，特别被重视的人，是那些团队不愿意失去的人。跟骨干聊是很有必要的，这样能够体现出你对他的重视，对员工来说是一种认可的方式。</p> 
<h2>绩效沟通</h2> <p>绩效沟通对于管理者来说可能是最难的一个事了，尤其是跟那些绩效不好的人沟通一年的绩效结果，可能是管理者们最不愿意去做的事。</p> <p>我曾经的团队里发生过一件事儿，令我至今记忆犹新。有一个从别的团队转岗过来的女孩，工作一段时间之后，我和她原来团队的负责人来一起来 
review 她的绩效。她原来的负责人上来就说，“你原来是做流程工具开发的，但是我们觉得你程序写得不好……”话没说完，这个小女孩就直接跳起来了，反问道：“我程序写得不好，你当时为什么不跟我说。你跟我说哪里做得不好，我马上改。可是你接受了，就说明我的绩效至少达标了……”不难想象，这场绩效沟通会议就是一个“翻车现场”！</p> 
<p>那时候，我刚做管理两个月，这事儿对于当时的我来说很是震撼。所以从那个时候开始，不管员工出什么问题，我都会立马给出反馈，明确告诉团队成员他工作的不足之处，以及改进方案。比如，你这段代码太松散了，这里的代码写得不够好。你最近好像状态不是很好，老出 
Bug。这样的低级错误为什么会发生？哪里有问题？等等。是的，<strong>沟通一定要放在平时，不要搞成像秋后算账一样！因为你是管理者，不是地主监工</strong>。</p> <p>如果员工实在能力欠缺，难以达标，其实“帮助”过程中，他自己也是知道的。基本上，等不到年底，这样的员工也会自己离职走人，因为这样玩下去对他自己不利。</p> 
<p><strong>但要注意的是，反馈的过程中，不是我在指责员工，而是我在帮助员工。一定要有帮扶的态度，这样员工会更容易接受</strong>。此外，说话的维度要高一点儿，要共情，不要激起员工的情绪，引发不必要的矛盾。在反馈和帮扶的过程中，你能够让员工感受到你的关注和重视，对员工来说是种很好的正向鼓励，有利于员工，乃至团队的进步和成长。</p> 
<h2>特立独行的员工</h2> <p>做过多年管理者的你，一定遇到过一些“特立独行”的员工，他们很自我，不服管，喜欢按照自己的思路做事儿。该如何对这类员工进行管理和沟通，想必会令你头痛不已。尤其是当你感觉到某些“特立独行”的员工天赋异禀的时候，你更希望能够将其优势充分发挥出来，为团队创造更大的价值。这里，我就来谈谈我的想法和经验。</p> 
<p>这里， 我们只讨论有很强能力的人（因为能力不强还特立独行的人最好劝退），对于这类员工，我有两个方法。</p> <ul> <li> <p>第一个方法是给他找到匹配的人，要么是比他牛的人，要么是跟他旗鼓相当可以在一起共事儿的人，跟他一起工作。有能力的人，一般都受不了一群猪队友的，因为他们会觉得老是被问一些好无聊的问题，被问得很烦，而且有很多很简单的事，要讲半天，对方却还听不懂。是的，聪明的人都是这样的，很多聪明人都是特立独行的人。</p> 
</li> <li> <p>第二个方法是给他一些独立的工作，把他隔离出去。让他做一些相对独立和有挑战的事情。在微软等很多公司里面，都有一个工种叫 IC – Individual Contributor。把他们隔离出来是一个不错的选择。</p> 
</li> </ul> <p>但是话说回来，有些人还是很难办的，以上两种方式可能对他都不起作用。我也遇到过这样的员工，能力很好，但是特别挑剔工作。任何事情都非常矫情。这个时候你要多找他聊一下，你需要直截了当，明确没有二义地说明他需要做的工作，以及岗位对他的要求。注意，一定要非常地明确！如果不行，那就只有分手了。</p> 
<p>这里有个原则你要记住：<strong>当你在一个人身上花的精力和时间成本，大于你到外面找一个更好的人或者能力相当的人来替代他的时候，你就要坚决地把他替换掉</strong>。</p> 
<h2>挽留离职员工</h2> <p>如果一个员工离职，而你又希望他留下来，怎么办？首先，<strong>你要知道他离职的原因</strong>。我觉得，绝大多数员工离职都是跟老板或者公司有关系的。</p> 
<p>但是你和他做沟通的时候，他肯定也不好意思说出真实原因。所以，你要做的是让他敞开心扉地去谈离职的事情。你可以看看，心理访谈类节目中的主持人是怎样做的。通过看这些节目，以及结合我自己的经验，我认为，想要让员工跟你袒露心扉，你一定要明确表达你对他的认同，甚至可以说一些公司的坏话。</p> 
<p>这样，你可以让他的心理界限逐渐消失，就会开始诉说自己的真实原因（谁没有点苦闷的心事呢）。这时你一定要认真倾听，就算是他在吐槽，也一定要让他吐干净。为什么呢？我觉得吐槽公司并不是什么坏事儿，员工吐槽公司，说明对公司还有感情，爱之深，责之切。</p> 
<p>借此，你可以收集一些意见，这些意见也许可以让公司变得更好，因为他的离职原因也有可能是其它人的离职原因，这对于留住还在职的员工是很有用的。其次，你可以知道他离开的真实原因，思考一下是否能采取什么举措，进行挽留。</p> 
<p>另外，<strong>生意不行，友情在</strong>。每个人的离开都是有各自不同的理由，实在挽留不成的时候，也要注意经营好这份情意。</p> <p>在我认为挽留不成的时候，我通常会站在他的角度作为他的朋友为他着想，甚至帮他介绍工作，或是在他离开时再为他争取一些利益或是别的什么。这样做会让员工觉得这样的知心老板不好找啊，就算最终还是离开，但是未来也一定会有联系，也许未来还能在一起共事儿。这里的逻辑是，<strong>既然不能在此时挽留下来，那就放眼未来，人生还很长，能在一起工作的机会还有很多</strong>。</p> 
<p>其实挽留是一件挺为难人的事情，因为对方做完了这个决定以后，再回头也需要很大的勇气。所以，你要提前判断员工离职的前兆。一个人要离职是有前兆的，你平时肯定是能感觉到的。比如，他一定会变得不积极，甚至会有一些抱怨。这时候其实是你挽留他的重要时机，因为有抱怨说明还喜欢这个公司。</p> 
<p>而他最终跟你摊牌的时候，或是对公司漠不关心的时候，留下来的机会是很小的。员工离职之前一定会有很多前兆的，我建议你，细心体会一下，在最佳挽留时机进行挽留，不流失自己的“爱将”。</p> 
<p>最后提一句，一般来说，任何员工，任何事，干了两年就是一个大限，离职率极高。</p> <h2>劝退员工</h2> <p>在员工没有达到最低绩效的时候，该怎样劝退员工，也是令很多管理者头痛的问题。还是那句话，劝退一定不要秋后算账，要把沟通放在平时。</p> 
<p>劝退一个人，你一定要给出一段时间的试用期，也就是我们说的缓冲期。一方面，表达出“我是愿意帮助你的，我也给你机会”的意思。同时，你也要给对方制定一个目标，一个月之内，他要解决和改进他的一些工作问题。因为人都是有状态的，你需要给他一段时间。另一方面，也要让员工有所准备，可以在外面寻找一些相关的机会，而不至于失业。</p> 
<p>注意，这里我想表达的是，<strong>任何人都应该有可以纠正错误的机会，公司应该给员工这样的机会，员工也应该给公司同样的机会</strong>。</p> <p>当然，在分手那天到来的时候，你可以跟员工一起看一下，他的工作是什么，他的职责是什么，但是他的成绩又是什么？你要找的是无可辩驳的证据。然后跟他说明，因为这些原因，我希望我们能够和平地分手。</p> 
<p>最好的方式是，给员工一个面子，让他把你开掉，比如：找外面的猎头，把员工挖走。亚马逊经常这么做。亚马逊还有主动离职奖金，第二年离职给 4000 美金，第三年给 6000 美金……国内公司则简单粗暴一些。</p> 
<p>在劝退的时候，你可以请他吃一顿饭，或者送他一个纪念品。这个纪念品，可以是他在你这儿工作过程中，做得最好的一件事儿。比如，我会把这件事儿印成一件 T 恤，送给他。事儿是事儿，人是人。把工作和私交分开，表明这并不代表我个人不愿意接受你，只是我有我的职责，我是公司的一名管理者，职位在身，需要负责。但是，像情人分手一样，分开后，我们还是好朋友。</p> 
<h1>跟客户沟通</h1> <p>在跟客户沟通这部分，我主要分享三方面的内容：吸引客户的兴趣、帮客户发现问题和管理客户的期望。</p> <h2>吸引客户的兴趣</h2> <p>在前面的《沟通方式及技巧》一文中，我分享了一个跟客户沟通的小技巧——初次和客户见面时要懂得吸引对方的兴趣。想做到这点，其实并不难，但它的前提条件是在见客户之前必须要做足功课，确保你自己了解客户的关注点，以及当下的痛点。然后在交谈的过程中，可以有目的性地在这些方面展开话题，突出一下自己在相关领域的优势和资源。一般情况下，这么做都是能很快引起客户兴趣的。</p> 
<p>举个例子里，我当天见的是某个银行的副行长，周围的人都穿着衬衫和西裤，很正式，而我的着装却有些随意。估计要不是别人介绍的，他一眼都不想看我，几句话就能把我打发了。开始的几个问题，也着实让我有些狼狈。问我，你们公司规模多大？有多少人？有什么案例？……我如实回答后，只看见他满脸不屑的样子……但我后来却用了不到 
20 分钟的时间就成功吸引了他的兴趣。</p> <p>见他之前我做足了功课，了解金融业下半年整体趋势都很糟糕，银行贷款都办不了，国家货币在紧缩，还有 P2P 这些乱七八糟的事儿。于是，我就跟他说了一下形势和相关的解决方案，然后就明显地感觉到他开始感兴趣了，因为我谈的都是一般人不知道的（原谅我在这里不写这些了，因为这是我现在创业的商业机密）。于是我再加油添醋，说我这边可以接触的资源日流水好几亿……还没等我说完，他就开始对我这个人以及我的谈话内容充满了兴趣。</p> 
<p>也就是说，做足功课，了解客户的痛点或是 KPI 是与客户沟通的第一步，也是最关键的一步，不仅可以引起对方的兴趣，还能决定见面时沟通的内容。兵法有云：知己知彼方能百战不殆，说的就是这个道理。</p> 
<h2>帮客户发现问题</h2> <p>有了“兴趣”这块开门砖以后，接下来谈什么、怎样谈就要容易多了。这个时候，我们可能就要进入到问题的实质，深入交流了。这里有以下几个关键点需要你把握。</p> 
<ul> <li> <p><strong>结合客户的痛点，了解客户做过的尝试</strong>。在这里我们一定要明白，客户的痛点其实就是我们的发力点，也就是我们的价值点。所以，我们一定要弄清楚客户的痛点是什么，以及针对这个痛点，客户曾经做过哪些尝试。</p> 
<p>这样不仅能够让我们更加深入和全面地了解客户痛点，而且有助于我们在思考解决方案的时候绕开很多用户曾经踩过的雷。或者，我们也可以从这些已经做过的尝试中获得一些启发和帮助，因为很多时候尝试失败，并不一定意味着方法是错的，很有可能是技巧、能力或者资源配置出了问题。</p> 
</li> <li> <p><strong>深入细节，了解细节才会有更准确的信息</strong>。前面文章中提到了倾听的重要性，在与客户进行沟通的时候，倾听也尤为重要。因为你只有深入了解细节，才能掌握更准确的信息，从而给出更能帮助客户解决问题的方案。但是在与客户沟通的过程中，你有时会发现客户自己描述不清楚细节，或者说不清楚自己到底想要什么。</p> 
<p>这时，你可以考虑让客户举个例子，说给你听。从这个例子中，你可以获得更多的信息，因为它将很多模糊不清的东西具象、形象化了。你可以把你的理解说给客户听，跟他确认你的理解是否准确，然后逐渐磨合，最终达成共识。这个更为准确的信息是你后面解决问题的前提和基础。</p> 
</li> <li> <p><strong>小心 X/Y 问题，找到 X 问题</strong>。在《沟通技术》一文中，我提到过 X/Y 问题。很多时候客户跟你提的都是 Y 问题，比如，我们要做分布式架构，我们要做大中台，我们要做线下线上融合，等等。每次面对这些问题，我都要反问，你为什么要做分布式架构？为了大规模营销，为了稳定性，还是为了加快开发速度？做大中台，你是为了什么？ 
是为了打通各个业务线，为了快速开发，还是为了技术输出？等等。</p> <p>要解的真实问题才是 X 问题，手段都是 Y 问题。只有你真正了解了 X 问题，才能真正明白问题背后的出发点。而当你了解了 
X 问题后，你就要到源头，来质疑或是改良他的 Y 问题，甚至提出 Z 方案。这时，你会发现你的客户开始跟着你的思路走了。这里有个要点是，<strong>一定要分析客户问题背后的本质原因，从根本上帮助客户解决问题</strong>。</p> 
</li> </ul> <p>很多时候，客户的问题只是表面的问题，你要深入下去，才能找到最本质最根本的 root-cause，这和我们定位 Bug 的道理是一样的。只有找到根本原因，你才能对症下药，标本兼治。所以，我现在也有了所谓的“一针见血”的沟通能力。</p> 
<h2>管理客户的期望</h2> <p>在帮助客户发现问题之后，我们就要来解决问题了。这个时候，帮助客户设立合理的目标就显得尤其重要了。一般来说，很多公司的销售都会把客户的期望搞得很高很高（因为要成单），经常性地用最少的时间，最低的价格，做最多的事，基本上来说这相当于把开发团队卖掉了。不要以为只有销售会这样，我们的很多管理者也是一样的，为了保住自己的位置，拼命地透支自己的团队，等成绩拿到以后，跳槽到别的公司。</p> 
<p>其实，我们是可能做到既让客户满意，又不会作茧自缚的，有以下几个手段可以使用。</p> <ol> <li> <p>要至少给出三套方案来让客户选择。一个是低成本的玩法，一个是高成本的玩法，一个是性价比比较高的玩法，这其中的取舍是我们可以去引导客户的。</p> 
</li> <li> <p>另外，我们需要找一些相关的案例和参照物来对比我们给的上述方案，这样可以让客户有一个更为清醒的判断和认识。以此来教育客户不同的方案代表着不同的期望和不同的结果。</p> 
</li> </ol> <p>然后跟客户进行讨论，该怎样优化和完善方案中的目标，最终达成双方都认可和接受的目标。这里一定要注意，只有经过了取舍，明确了哪些做哪些不做，我们达成共识的目标才会是明确的，有针对性的，而且是具有很强的可操作性的。</p> 
<p>当然，有的时候，客户可能会执意要求实现一些不切实际的方案。比如，有时客户可能会将项目时间压得太紧，这样你无法保证按质完成所有任务。除了需求分析、设计和开发外，一个完整的软件工程也要保证质量，至少必须包含测试（至少要有手动的集成测试，考虑可维护性的话还要包括自动的单元测试）和 
bug 修复的部分，而这两个部分加起来的时间通常比开发本身的时间还要多。</p> <p>如果项目时间压得太紧，只有两条路可以选。第一，保证质量，但减少一些功能或其他要求，如去掉一些对还未调研清楚的第三方库的依赖；第二，保证主要功能完成，但不完全保证质量。</p> 
<p>这时，我们可以和客户一起分析，哪种选择更为合理、可行，将选择权交给客户。这里记住，<strong>永远不要跟客户说不，要有条件地说是，告诉客户不同的期望要有不同的付出和不同的成本。不要帮客户做决定，而是给客户提供尽可能多的选项，让客户来做决定</strong>。</p> 
<p>有的时候，客户对交付时间和完成的功能会有过高的预期。这时我们要和客户商谈，降低这个预期，但同时尽量给予一些其他的补偿。比如，这个事臣妾做不到啊，要不你多给我一些时间，我少收你点费用？或是，你这个太复杂了，太重了，要做我先做个简单版的，这样可以以低成本来看看客户的反应，然后根据客户的反应再看下一步怎么做，等等。我们不要拒绝，要疏导。</p> 
<p>如果客户不愿意放弃他的高目标，那么我们就争取一些补偿或是交换。一般来说，只要是合理的，人总是通情达理的，一般来说都会满足你的。比如：我们可以跟业务部门讨论，我做完这一版后，你要给我 
1 个月的时间，重构一下我的代码，请给我们这些时间。</p> <p><strong>讨价还价是这个世界能运转的原因之一，要学会使用</strong>。</p> <p>总结下来，在与客户沟通预期时，我通常会坚持以下几个原则。</p> 
<ul> <li><strong>一定要给客户选择权，永远不要说不，要有条件地说是</strong>。</li> <li><strong>降低期望的同时给予其他的补偿</strong>。</li> 
<li><strong>提高期望的同时附加更多的条件</strong>。</li> <li><strong>对于比较大的期望要分步骤达到客户的期望</strong>。</li> <li><strong>不要帮客户做决定，而是给客户提供尽可能多的选项，然后引导客户做决定</strong>。</li> 
</ul> <h1>跟老板沟通</h1> <h2>了解你的老板</h2> <p>在跟客户沟通中，我强调了了解客户及其痛点的重要性，这是第一步，也是最为关键的一步。同样，想跟老板进行良好的沟通，了解你的老板也很重要。首先，你需要了解老板的做事风格。比如，有的老板是事无巨细的，有的老板是大刀阔斧的，有的老板是威风管理，而有的老板则是老好人，等等。</p> 
<p>其次，你还要了解老板的目标和 KPI 是什么。最后，要知道老板的老板是谁，他的风格是什么，他的目标和 KPI 是什么，因为你老板的目标和 KPI 是你老板的老板给的。所以你了解老板的老板才更能了解你的老板，从而做更正确的事儿。</p> 
<p>想了解你的老板，最简单的方法就是察其言观其行，因此 “倾听”就显得尤其重要了。老板总是喜欢教育下属，总是喜欢发表高谈阔论的，所以，倾听老板是件不难的事，但是，这也是一件很难的事！因为老板职位在身，所以，有很多事老板是不会对下属说的，尤其是很多负面或是有压力的事。他不能表现得很懦弱，否则就没人听他的了。老板从来都是孤独和孤单的，牙被打掉了往肚子里咽。<strong>所以，倾听老板会有一些出乎你的意料的发现，你要能了解老板背后的苦衷，那些才是最重要的</strong>。</p> 
<h2>赢得老板的信任</h2> <p>你要赢得老板的信任，就要知道老板也是要有成绩的，他们只会关心那些能为他带来成绩的员工。所以，你要成为工作当中的骨干人员，能把自己的事搞定，能把别人搞不定的事搞定。这样老板才会依赖你，你才可能有更好的“议价能力”。不然，就算你对老板的马屁拍好了，你也不会真正和老板有平等的话语权，你也只不过是老板的跟班罢了。</p> 
<p>当你有了能力后，老板才会给你机会，你有了能力又有机会，你就会有更多的机会。这些机会能让你有更多的经验来提升自己的能力，于是形成一个正循环，你的老板会越来越信任你，你才能获得真正和老板平等的权利。</p> 
<h2>管理老板的期望</h2> <p>就算你很牛，老板很信任你，你还是要学习管理老板的期望。在每次和老板交流的时候，你都要确认老板的期望是什么，如果跟你的想法有所偏差，一定要及时反馈和讨论。因为每个人的特长和优势不同，老板希望你做的，未必是你擅长或者乐于做的。有什么想法一定要诚实地说出来，以免被安排了不喜欢的工作，自己越干越不开心，越干越没热情。这就很麻烦了。</p> 
<p>这和管理客户的期很相似，不要帮老板做决定，给老板几种方案，并引导他做决定。不要说不，要有条件地说是，在拒绝的同时给予补偿。如果反抗不了了，就争取其它的利益……</p> <p>你要明白，老板如果没人了，他将一事无成，所以，他一般都会是通情达理的。只要你注意表达的方式和方法，摆事实讲道理，态度上没问题；只要你从事情的不同角度展开，权衡一下利弊，并使用共情和高维这样的沟通方式，让老板能站在你的立场将这些问题想清楚，你一定能够争取得到你想要的。</p> 
<h2>非暴力“怼”老板</h2> <p>沉默是金，是我今天给出的最后一个方法。它应该在什么时候用呢？我来介绍一下。在工作中跟老板有意见分歧是在所难免的。但有一些时候，你明明觉得自己给老板提供了一个你认为从各个维度来讲都很不错的方案，但老板还是说，这不行，两个月时间太长，最多给你一个半月时间。这个时候最好的方法不是怒气冲冠，也不是直接 
Say No，而是保持沉默不说话，闷着。</p> <p>相信我，只要你沉默下来，你的老板就会沉不住气的，气氛的尴尬不是他想要的，他只是希望你能听他的。所以，一般来说，老板马上就会打破沉默，对你开始各种“忽悠”，如果你依然不说话，你的老板就会开始妥协，换各种思路来说服你，然后你就可以顺着老板的话，跟老板谈条件了。这是一个非常有用的谈判技巧。</p> 
<p>比如，老板感到不安后，他一定会安慰你，也会给你开条件：这样吧，你努力把它弄完，年底给你涨工资。你不要立马答应下来，要表现出极不情愿，告诉老板这违背了客观发展规律。老板会再次利诱你。</p> 
<p>这时，你再表态，带着弟兄们拼一拼，争取一半月内搞定，但就这一次，下不为例。你是可以原谅老板“混蛋”一次的，给他一次机会。但你要让他感觉到欠你和你的团队人情，欠人情是最恐怖的事儿了。这样，他下次再做类似事情的时候，自己都会不好意思。</p> 
<h1>小结</h1> <p>好了，总结一下今天的内容。今天的内容好丰富，包含跟员工沟通、跟客户沟通以及跟老板沟通三大部分，将前几篇文章中介绍的沟通方法和技巧用了个遍。相信你一定有挺多的体会和感悟。</p> 
<p>其实不管对方是员工、客户，还是老板，甚至是自己的家人朋友，与人沟通的关键，都是要好好说话，静心聆听，能够尊重对方的想法和情绪，更能站在对方的角度来思考。只要你心中时刻想着共情、共赢，你的沟通一定会顺畅和高效很多。《高效沟通》系列今天更新结束，希望这些内容能给你一些帮助和启发。</p> 
<p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 50, 50) 
 {executed in 3 msec}
2020-11-19 20:22:29.903 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=50 
 {executed in 1 msec}
2020-11-19 20:22:29.906 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:29.922 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=50 
 {executed in 2 msec}
2020-11-19 20:22:29.926 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:22:29.939 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788549, 1605788549, 1, 'zh-hans', 0, 1, 1, 
0, '105丨高效沟通：好好说话的艺术', 1, 50, 50) 
 {executed in 2 msec}
2020-11-19 20:22:29.950 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=50 
 {executed in 2 msec}
2020-11-19 20:22:29.952 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:29.970 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788549, 1605788549, 1, 'zh-hans', 0, 
1, 1, 0, '105丨高效沟通：好好说话的艺术', 'book', 1, 50, 50) 
 {executed in 1 msec}
2020-11-19 20:22:29.979 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:29.981 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:29.995 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=50 
 {executed in 7 msec}
2020-11-19 20:22:29.997 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:30.006 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cdff8323efb3d82048786fef4c05773b?bkt=en-c58a217c5b5bf7b230a007446652469c1902f55dc49a656e2cc9dff7146e7d5467066b055721737d&fid=3757516097-778750-106635113351053&time=1605788548&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-RxqAAZ9s86d%2FXSQkLUFdORIASC8%3D&to=92&size=13417187&sta_dx=13417187&sta_cs=4139&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182791&mtime=1605788486&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13417187&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6b978d5f486c40fe8c1c98b5a460d231d4708b10c6d2e7781d7f2347ab583854b61112d2b3e9c758&sl=76480590&expires=8h&rt=pr&r=577899605&mlogid=7510971000778176355&vbdid=64799653&fin=105%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D%E7%9A%84%E8%89%BA%E6%9C%AF.mp3&bflag=92,34-92&rtype=1&dp-logid=7510971000778176355&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b158caa6f08ea73bc869fb924f082f02f5&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=105%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D%E7%9A%84%E8%89%BA%E6%9C%AF.mp3', 
50, 50) 
 {executed in 1 msec}
2020-11-19 20:22:30.014 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.016 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:30.026 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cdff8323efb3d82048786fef4c05773b?bkt=en-c58a217c5b5bf7b230a007446652469c1902f55dc49a656e2cc9dff7146e7d5467066b055721737d&fid=3757516097-778750-106635113351053&time=1605788548&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-RxqAAZ9s86d%2FXSQkLUFdORIASC8%3D&to=92&size=13417187&sta_dx=13417187&sta_cs=4139&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182791&mtime=1605788486&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13417187&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6b978d5f486c40fe8c1c98b5a460d231d4708b10c6d2e7781d7f2347ab583854b61112d2b3e9c758&sl=76480590&expires=8h&rt=pr&r=577899605&mlogid=7510971000778176355&vbdid=64799653&fin=105%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D%E7%9A%84%E8%89%BA%E6%9C%AF.mp3&bflag=92,34-92&rtype=1&dp-logid=7510971000778176355&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b158caa6f08ea73bc869fb924f082f02f5&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=105%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D%E7%9A%84%E8%89%BA%E6%9C%AF.mp3', 
50, 50) 
 {executed in 1 msec}
2020-11-19 20:22:30.032 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.034 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:30.038 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.040 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:30.052 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e4/c7/7f8be879.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>山哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近的文章都很湿啊，哈哈 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
其实，这些东西一点也不湿，这些是让你往上走的技巧！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>蓝海</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 中肯，比纯技术有意思多了，我觉得这些是技术的保护伞 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/75/44/71005991.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>sunshine</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 城市套路深，我要回农村。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>风翱</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-22 </div> 
</div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span 
class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
如果你的领导，在你沉默的时候，直接说按他说的做，一个月之内要完成，然后就离开了。你怎么办呢？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>caohuan</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 超丰富的信息量，与前面有些重叠，在不同公司观察领导的行为 发现大公司会有 很多人性化的制度，小公司 
很多缺少流程，基本靠老板的感觉，说你行 你就得上，觉得刚毕业进大公司 涨本事，然后 去小公司，里面有更多的机会。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ec/13/c4de2302.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>neohope</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 由本书叫《门后的秘密》，初学管理，可以试试。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/7b/d6/d343cbf4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>锕杜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 耗叔智商情商双高👍 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/d0/0f/7a00028e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>浪漫回忆</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 太精彩了，脑洞大开，感谢作者！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/72/85/b6a5926e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>曹静雯</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 刚毕业的小菜鸟，天天被产品经理怼，生无可恋 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/42/0a/031abaef.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>张超</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 觉得非常有道理。感觉老板们就是这么用的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/b5/93/4c9caf59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>xiaoqi</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 遇到的领导不会不好意思！ <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/4f/f3/12d0e64d.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>水中影</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 系统，非常有思想性 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/f0/53/a0615654.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阮红梅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有效的沟通 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/96/b6/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>duliang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 耗叔对技术与人性的洞察力非常人所有，您的课程使我的认知得到了大升级，很幸运，很感谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看完 耗子哥的 跟老板的沟通，我惊异的发现，我还是小白 
职场人，以为只要 自己 能够 出活、出成果 就算完成了，岂不知 机会往往与我擦肩而过，想想之前一直是老板在选择我，把我当做一件趁手的工具来使用，觉得之后首先 得找 自己愿意追随的老板，1）看老板的作风，2）老板会更器重那种骨干，然后 
跟着老板混，参照 耗子哥的 1）了解老板 2）赢得信任 3）管理期望 4）怼 老板，好清晰的方法，我只有拿来用了。不知道老板 看没看 在看耗子哥的专栏。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>caohuan</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看到 跟 客户的沟通的环节，我回想到 二年前 在外包公司 与客户的沟通，很多时候是对立的，因为客户时常修改业务，他们一改，我们的计划和进度完全被打乱了，所以 
我们有时候 不太理会客户的新需求，更不会帮客户发现问题，而是 希望 客户少找我们的麻烦，所以导致后面的交流不顺畅，偶尔也会被投诉。 <br> <br>今天 看到 耗子哥 对待我们的衣食父母，第一：吸引客户 
第二：帮助客户发现问题 第三：管理客户的期望，发现 在不少我们的项目中，对待客户并不温柔，很多采取简单粗暴的方式，比如 只关心自己的技术，没有关心过 1）客户的业务痛点 2）深入的准确的理解客户的真实需求 
3)做x/y问题的分析，更不会管理客户的期望 1）不会给客户 选项 选择 2）不会在降低客户期望时，给予补偿，提升客户期望时，索要条件 ，所以不会沟通 可能是硬伤，得补齐，谢谢 耗子哥 
这么有条理性的分享。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/7b/d6/d343cbf4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>锕杜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 耗叔智商情商双高👍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 50, 50) 
 {executed in 3 msec}
2020-11-19 20:22:30.062 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.064 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:30.074 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e4/c7/7f8be879.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>山哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近的文章都很湿啊，哈哈 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
其实，这些东西一点也不湿，这些是让你往上走的技巧！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>蓝海</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 中肯，比纯技术有意思多了，我觉得这些是技术的保护伞 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/75/44/71005991.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>sunshine</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 城市套路深，我要回农村。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>风翱</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-22 </div> 
</div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span 
class="">3</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
如果你的领导，在你沉默的时候，直接说按他说的做，一个月之内要完成，然后就离开了。你怎么办呢？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>caohuan</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 超丰富的信息量，与前面有些重叠，在不同公司观察领导的行为 发现大公司会有 很多人性化的制度，小公司 
很多缺少流程，基本靠老板的感觉，说你行 你就得上，觉得刚毕业进大公司 涨本事，然后 去小公司，里面有更多的机会。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ec/13/c4de2302.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>neohope</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-19 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 由本书叫《门后的秘密》，初学管理，可以试试。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/7b/d6/d343cbf4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>锕杜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 耗叔智商情商双高👍 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/d0/0f/7a00028e.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>浪漫回忆</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 太精彩了，脑洞大开，感谢作者！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/72/85/b6a5926e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>曹静雯</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 刚毕业的小菜鸟，天天被产品经理怼，生无可恋 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/42/0a/031abaef.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>张超</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 觉得非常有道理。感觉老板们就是这么用的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/b5/93/4c9caf59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>xiaoqi</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 遇到的领导不会不好意思！ <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/4f/f3/12d0e64d.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>水中影</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 系统，非常有思想性 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/f0/53/a0615654.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阮红梅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有效的沟通 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/96/b6/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>duliang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 耗叔对技术与人性的洞察力非常人所有，您的课程使我的认知得到了大升级，很幸运，很感谢 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-26 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 看完 耗子哥的 跟老板的沟通，我惊异的发现，我还是小白 
职场人，以为只要 自己 能够 出活、出成果 就算完成了，岂不知 机会往往与我擦肩而过，想想之前一直是老板在选择我，把我当做一件趁手的工具来使用，觉得之后首先 得找 自己愿意追随的老板，1）看老板的作风，2）老板会更器重那种骨干，然后 
跟着老板混，参照 耗子哥的 1）了解老板 2）赢得信任 3）管理期望 4）怼 老板，好清晰的方法，我只有拿来用了。不知道老板 看没看 在看耗子哥的专栏。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>caohuan</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看到 跟 客户的沟通的环节，我回想到 二年前 在外包公司 与客户的沟通，很多时候是对立的，因为客户时常修改业务，他们一改，我们的计划和进度完全被打乱了，所以 
我们有时候 不太理会客户的新需求，更不会帮客户发现问题，而是 希望 客户少找我们的麻烦，所以导致后面的交流不顺畅，偶尔也会被投诉。 <br> <br>今天 看到 耗子哥 对待我们的衣食父母，第一：吸引客户 
第二：帮助客户发现问题 第三：管理客户的期望，发现 在不少我们的项目中，对待客户并不温柔，很多采取简单粗暴的方式，比如 只关心自己的技术，没有关心过 1）客户的业务痛点 2）深入的准确的理解客户的真实需求 
3)做x/y问题的分析，更不会管理客户的期望 1）不会给客户 选项 选择 2）不会在降低客户期望时，给予补偿，提升客户期望时，索要条件 ，所以不会沟通 可能是硬伤，得补齐，谢谢 耗子哥 
这么有条理性的分享。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/7b/d6/d343cbf4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>锕杜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 耗叔智商情商双高👍 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 50, 50) 
 {executed in 2 msec}
2020-11-19 20:22:30.090 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.092 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:30.099 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.102 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:30.112 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 50, 'https://static001.geekbang.org/resource/image/61/63/61385003b45fb0fdbb8a199a89cdb163.jpg', 
50) 
 {executed in 0 msec}
2020-11-19 20:22:30.119 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=50 
 {executed in 1 msec}
2020-11-19 20:22:30.121 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:30.135 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 50, 'https://static001.geekbang.org/resource/image/61/63/61385003b45fb0fdbb8a199a89cdb163.jpg', 
50) 
 {executed in 1 msec}
2020-11-19 20:22:30.149 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=50 
 {executed in 3 msec}
2020-11-19 20:22:30.150 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:30.158 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 50, 50) 
 {executed in 0 msec}
2020-11-19 20:22:30.165 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=50 
 {executed in 2 msec}
2020-11-19 20:22:30.167 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:30.177 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 50, 50) 
 {executed in 2 msec}
2020-11-19 20:22:30.192 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='836028857042633' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:22:30.193 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:56.210 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='836028857042633' 
and bookchecke0_.name='net_content' 
 {executed in 3 msec}
2020-11-19 20:22:56.215 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:56.224 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('836028857042633', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:22:56.228 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('836028857042633', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:22:56.233 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|95            |
|--------------|

2020-11-19 20:22:56.270 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='836028857042633' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:22:56.271 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:56.716 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='836028857042633' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:22:56.717 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:22:56.721 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('836028857042633', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:22:56.722 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('836028857042633', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:22:56.723 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|96            |
|--------------|

2020-11-19 20:22:56.740 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='836028857042633' 
 {executed in 1 msec}
2020-11-19 20:22:56.741 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:56.745 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788576, 1) 
 {executed in 1 msec}
2020-11-19 20:22:56.746 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788576, 1) 
 {executed in 0 msec}
2020-11-19 20:22:56.747 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|51            |
|--------------|

2020-11-19 20:22:56.758 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'e49525c6-cb12-4587-a0cd-0964a6aa2e3b', 
51) 
 {executed in 1 msec}
2020-11-19 20:22:56.759 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'e49525c6-cb12-4587-a0cd-0964a6aa2e3b', 51) 
 {executed in 0 msec}
2020-11-19 20:22:56.761 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|51            |
|--------------|

2020-11-19 20:22:56.777 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=51, revision_default=1, revision_timestamp=1605788576, 
revision_uid=1 where vid=51 
 {executed in 1 msec}
2020-11-19 20:22:56.783 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.784 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:56.792 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '836028857042633', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.798 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.799 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:22:56.807 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '836028857042633', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.812 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=51 
 {executed in 1 msec}
2020-11-19 20:22:56.814 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:56.817 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=51 
 {executed in 1 msec}
2020-11-19 20:22:56.819 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:22:56.826 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
3, 0, 47, 48, 51, 0, 0, 48, 0, 51) 
 {executed in 0 msec}
2020-11-19 20:22:56.833 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=51 
 {executed in 2 msec}
2020-11-19 20:22:56.834 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:56.838 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.839 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:56.848 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>前面的几篇文章中，我分享了一些通用的沟通方法，如尊重、倾听和情绪控制等。接下来的几篇文章中，我将从如何与员工沟通、如何与客户沟通，以及如何与老板沟通这几个角度，和你聊聊这些沟通方法具体应该如何应用。</p> 
<p>作为一名团队 Leader，你首先应该学会如何与团队成员进行有效沟通，因为它是实现管理效果的必要手段和有效途径。但如何拥有这个基本功呢？我来分享一下我的经验。</p> <h1>引导</h1> 
<p>我在汤森路透工作的时候，曾经参加过一个管理上的培训课程。这个培训课程的第一课就是教这些管理者如何在沟通中引导员工，而不是给员工灌输自己的想法。课程里强调，管理者要想尽一切办法让员工自己思考问题，想出答案；而不是灌输，什么事儿都是自己在想，自己讲给员工听。员工不想，你怎么说，他都很难把你的话理解到位，也就是说你一定要让他自己把事情想出来。</p> 
<p>这有点儿像电影《盗梦空间》说的，你应该在思想里埋下一个种子。我们要干的就是在员工的思想里埋一个种子，让它生根发芽。但这要怎样实现呢？</p> <p>答案就是管理者要学会问问题，问员工怎样做。假如员工给出了一个方案，但不巧，可能由于他考虑得不全面，或者由于他不知道某些情况，不是你想要的答案。这时，该怎么办呢？</p> 
<p>你可以说，如果这么做的话，会有一个什么问题，而这个问题很重要，如何解决？然后，他会给出解决这个问题的方法。但这么做又会带来另一个问题，直到把他逼到你想要的答案上去。</p><!-- 
[[[read_end]]] --> <p>如果每次遇到问题，都让他自己想答案，次数多了以后，他会觉得自己的参与感越来越多。最后，他会觉得是他用他的观点说服了你。尽管这就是你想要的答案，但你还是要假装被说服。这样他会很开心的，会有一种参与感。然后，在执行这件事儿的时候，也会更加卖力，更加有激情。他会觉得自己在实现自己的想法，而且自己的想法是对的。</p> 
<p>作为 Leader，你要记住，<strong>永远不要给员工答案，要让员工给你答案，而且不要只给一个答案，一定要给多个答案</strong>。然后让他们比较这些答案，促使他们深入地进行思考。这不是在让员工做问答题，其实是在给员工成长机会，促进他们的成长。</p> 
<p>永远不要跟员工说，我给你一个任务，这个任务两星期完成。要让他来说，这个任务需要多久能完成。并要求员工提供多种执行方案，不要只给一个时间。你快点做怎么做，慢点做怎么做，是否还有其他方案。一定要员工自己去做计划，去思考。反之，如果你什么都想了，只让员工去执行，那么他就不思考了，而且有时还会生出一些怨念。比如抱怨领导这样安排不合理，那个执行方案有问题等。带有情绪的执行，势必会产生不够好的执行结果。</p> 
<p>但根据我的观察，喜欢给答案的管理者还是挺多的，他们总是习惯性地给员工答案，而不善于挖掘员工的实力和潜力。我觉得这是世界上最 Low 的管理模式了，是家长式、保姆式的管理。实际上，你的员工都是专业人才，你应该充分信任他们，并且想方设法激发他们的主观能动性，促使他们发挥自己的能力，积极地为你贡献答案，从而保持团队的活力和创造力。</p> 
<h1>倾听</h1> <p>倾听意味着在听他人讲话的时候，不让自己的想法扭曲别人传递的信息。你要做到毫无偏见，才能全面理解对方的信息。倾听不只是听或者听见，需要你用心聆听别人讲话，而不是只听自己想听到的内容。如我在《沟通方式及技巧》一文中提到的，倾听可以让员工感觉到自己被尊重，所以他们会乐意分享更多的信息。</p> 
<p>学会倾听不仅可以帮你拉近和员工的距离，还可以让你更加了解员工。我在汤森路透工作的时候，团队里有两个刚毕业的小伙子。一个来自农村，一个来自城市。来自农村的小伙子是家里老大，家里条件不太好，不仅要挣钱还自己的助学贷款，还要帮家里还外债。而那个来自城市的小伙子是家里老五，上面是四个姐姐，家里条件也相对比较好。不用去想人物性格，从这个背景里，就能大致猜出这两个人的差距。果不其然，有四个姐姐的小伙子，抗压能力相当低，觉得什么活儿都有难度，什么都适应不了。</p> 
<p>而要还外债的小伙子抗压能力相当高，没事儿就来跟我说，你把什么任务都给我，我什么都能搞定。经过几年的努力，他终于把家里的外债还干净了，然后特别高兴，请我吃饭。我说，你不用感谢我，要感谢你自己，是你自己做得多。通过这个例子，我想说明，通过倾听更多地了解员工，了解他们的生长环境和背景，可以帮你对每个员工建立更加合理的预期，从而更好地进行任务分配和人员管理。</p> 
<p>所以，外企一般都会要求经理和员工有周期性的一对一交谈，就是为了及时了解员工的各种动态和想法。</p> <h1>共情</h1> <p>共情，又被称为同理心，或者换位思考，它指的是站在对方立场设身处地思考问题的一种方式。换句话说，在人际交往过程中，你需要能够体会他人的情绪和想法、理解他人的立场和感受，并站在他人的角度思考和处理问题。</p> 
<p>比如，有团队成员要辞职了，你要怎样跟他谈呢？你肯定要找他谈感情。我们一起共事这么久，你要走了，我们一起回忆回忆过去。然后说，没关系，你看你要离开了，有没有什么我可以帮你的？不要强行让对方留下来，要多谈感情，多回忆一下，多听听对方的诉说。当他回想起过去一起同甘共苦的日子，难免会心生留恋，也许会回心转意的。当然，如果你并不能把他留下来时，不如大度一些，帮他看看他要去的另外一家公司是否是正确的选择，而且你还可以给他介绍更好的地方。既然留不下来，就索性为他介绍更好的地方。这样做至少还能引发他一些思考，“我都要离开了，我老板对我还这么好，我以后能不能找到这么好的老板？”</p> 
<p>这里的关键是，当对方开始想离开你了，你千万不要指责和教育对方，而一定要站在对方的角度来思考问题，理解对方，真心对对方好。晓之以理，动之以情。</p> <h1>高维</h1> <p>员工来跟你聊的，通常都是细节问题。这时，你可以耐心地跟员工沟通，并共同来寻找解决问题的方案。但有的时候涉及到公司的一些问题时，你自己也解决不了，那么你该怎样跟员工聊呢？比如，公司因为战略方向调整，想要砍掉你负责的业务，你和你团队都需要转到新的业务线上。</p> 
<p>你肯定不能跟自己的“弟兄们”说，公司混蛋，把我们这么好的业务给砍掉了。作为管理者，你应该知道，没有完美的公司，任何公司都存在这样那样的问题。你需要有更高的维度来看待这个问题，来给员工做出解释，让他们既能理解公司的决定，又能保持动力转到新的方向上。</p> 
<p>对于这样的问题，你首先应该肯定员工过去的努力以及取得的成绩，明确说明虽然业务被砍，但是我们的技术积累还在，这是我们谋求未来发展的基石。同时，帮助员工看清公司新的战略方向会给全公司的人带来什么前景，新的业务方向如何更能发挥出大家积累的经验和能力。在成功安抚人心的同时，引发大家对新业务方向的兴趣，从而更有利于帮助团队后续过渡到新业务方向上。</p> 
<p>当然，在讲这个事情的时候，千万不要太过了，还是要跟员工共情一下，也要表达出自己的不满，这样让员工觉得你是跟他们站在一起的，而不是跟公司站在一起的，后者无疑会引发你和大家的对立。这里的沟通思路是这样的：“公司的这个决定，我也有点难理解，我们这么辛苦做了这么多，没想会这样……但是我们做的事是很牛的，我们这个团队是强大的，强大到对于这样的打击都是没有问题的。这个世界就是这样的不完美，但是我们还是要去奋斗，不然就更不完美了……接下来，无论发生什么，我们都要一起扛！” 
也许，这么说也没什么用，但至少，在困难到来时，你可以让大家的心更近了。</p> <h1>反馈</h1> <p>反馈是一种非常重要的沟通形式，对于确保团队的正常运转十分关键。但有时候员工没有反馈的意识，或者不愿意反馈，你应该怎么办？这时，你应该建立一些反馈机制。比如，在我目前的团队里面就在用“1-2-3 
反馈机制”。</p> <ol> <li> <p>不管你遇到什么问题，如果自己在那儿憋一个小时找不到解决方案，或者说没有任何思路，就要反馈到高级工程师这边来。</p> </li> <li> 
<p>如果跟高级工程师在一起两个小时内，找不到任何解决方案或者没有思路，那么就要反馈到一线 leader。</p> </li> <li> <p>如果一线 leader、高级工程师，花了三个小时，依然找不到方案，那么这个事就可能是个大事了，要向上级反馈了。</p> 
</li> </ol> <p>这么做，就是为了确保一个大问题，在一天之内能够上升到管理层。然后管理层可能会寻求更牛的人或是从外界获取帮助，以使得问题尽快能够得到解决。</p> <p>这个反馈机制不仅能确保问题及时被反应出来，并及时得到解决，而且能够帮团队节约大量的时间和精力，对团队来说是种很好的正向鼓励，属于正反馈。</p> 
<p>之前我一直强调，正反馈的重要性。在这个场景下，无疑也是如此。试想一下，你和你的“兄弟们”逢山开路，遇水搭桥，一路凯歌的样子，是不是很酣畅？这便是反馈机制的威力了，它会潜移默化地在团队中形成一种“解决问题”的文化，让我们在发现问题的第一时间正视问题，拼尽全力来解决问题，并能从中享受到“搞定问题”的成就感，从而形成正向循环。</p> 
<p>除了对工作中问题的反馈，反馈还可以存在与很多其他方面，你完全可以结合团队的实际需求拟定出各种合适的反馈机制。对于任何反馈机制的建立，你只需要记住两点：一是及时反馈；二是能够形成正向循环。</p> 
<h1>小结</h1> <p>总结一下今天的内容。我分享了我与员工沟通时经常用到的几大法宝：引导、倾听、共情、高维和反馈。</p> <ul> <li> <p>引导，用提问的方式，“倒逼”员工找到答案，从而提高员工的参与感和成就感。</p> 
</li> <li> <p>倾听，心态平和，毫无偏见，全面接收和理解对方的信息，而不是只听自己想听的信息。</p> </li> <li> <p>共情，换位思考，站在对方立场设身处地思考和处理问题，动之以情，晓之以理。</p> 
</li> <li> <p>高维，提升自己的格局观，能从全局利益、长远利益思考问题，解决问题。</p> </li> <li> <p>反馈，建立反馈机制，及时发现问题、解决问题，形成正向循环。</p> 
</li> </ul> <p>下篇文章中，我将继续就如何与员工沟通这个话题进行讨论，主要探讨如何进行一对一会议、如何做绩效沟通、如何定位性格特殊的员工、如何挽留离职员工、如何辞退员工等问题。敬请期待。</p> 
<p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.856 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.858 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:22:56.866 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>前面的几篇文章中，我分享了一些通用的沟通方法，如尊重、倾听和情绪控制等。接下来的几篇文章中，我将从如何与员工沟通、如何与客户沟通，以及如何与老板沟通这几个角度，和你聊聊这些沟通方法具体应该如何应用。</p> 
<p>作为一名团队 Leader，你首先应该学会如何与团队成员进行有效沟通，因为它是实现管理效果的必要手段和有效途径。但如何拥有这个基本功呢？我来分享一下我的经验。</p> <h1>引导</h1> 
<p>我在汤森路透工作的时候，曾经参加过一个管理上的培训课程。这个培训课程的第一课就是教这些管理者如何在沟通中引导员工，而不是给员工灌输自己的想法。课程里强调，管理者要想尽一切办法让员工自己思考问题，想出答案；而不是灌输，什么事儿都是自己在想，自己讲给员工听。员工不想，你怎么说，他都很难把你的话理解到位，也就是说你一定要让他自己把事情想出来。</p> 
<p>这有点儿像电影《盗梦空间》说的，你应该在思想里埋下一个种子。我们要干的就是在员工的思想里埋一个种子，让它生根发芽。但这要怎样实现呢？</p> <p>答案就是管理者要学会问问题，问员工怎样做。假如员工给出了一个方案，但不巧，可能由于他考虑得不全面，或者由于他不知道某些情况，不是你想要的答案。这时，该怎么办呢？</p> 
<p>你可以说，如果这么做的话，会有一个什么问题，而这个问题很重要，如何解决？然后，他会给出解决这个问题的方法。但这么做又会带来另一个问题，直到把他逼到你想要的答案上去。</p><!-- 
[[[read_end]]] --> <p>如果每次遇到问题，都让他自己想答案，次数多了以后，他会觉得自己的参与感越来越多。最后，他会觉得是他用他的观点说服了你。尽管这就是你想要的答案，但你还是要假装被说服。这样他会很开心的，会有一种参与感。然后，在执行这件事儿的时候，也会更加卖力，更加有激情。他会觉得自己在实现自己的想法，而且自己的想法是对的。</p> 
<p>作为 Leader，你要记住，<strong>永远不要给员工答案，要让员工给你答案，而且不要只给一个答案，一定要给多个答案</strong>。然后让他们比较这些答案，促使他们深入地进行思考。这不是在让员工做问答题，其实是在给员工成长机会，促进他们的成长。</p> 
<p>永远不要跟员工说，我给你一个任务，这个任务两星期完成。要让他来说，这个任务需要多久能完成。并要求员工提供多种执行方案，不要只给一个时间。你快点做怎么做，慢点做怎么做，是否还有其他方案。一定要员工自己去做计划，去思考。反之，如果你什么都想了，只让员工去执行，那么他就不思考了，而且有时还会生出一些怨念。比如抱怨领导这样安排不合理，那个执行方案有问题等。带有情绪的执行，势必会产生不够好的执行结果。</p> 
<p>但根据我的观察，喜欢给答案的管理者还是挺多的，他们总是习惯性地给员工答案，而不善于挖掘员工的实力和潜力。我觉得这是世界上最 Low 的管理模式了，是家长式、保姆式的管理。实际上，你的员工都是专业人才，你应该充分信任他们，并且想方设法激发他们的主观能动性，促使他们发挥自己的能力，积极地为你贡献答案，从而保持团队的活力和创造力。</p> 
<h1>倾听</h1> <p>倾听意味着在听他人讲话的时候，不让自己的想法扭曲别人传递的信息。你要做到毫无偏见，才能全面理解对方的信息。倾听不只是听或者听见，需要你用心聆听别人讲话，而不是只听自己想听到的内容。如我在《沟通方式及技巧》一文中提到的，倾听可以让员工感觉到自己被尊重，所以他们会乐意分享更多的信息。</p> 
<p>学会倾听不仅可以帮你拉近和员工的距离，还可以让你更加了解员工。我在汤森路透工作的时候，团队里有两个刚毕业的小伙子。一个来自农村，一个来自城市。来自农村的小伙子是家里老大，家里条件不太好，不仅要挣钱还自己的助学贷款，还要帮家里还外债。而那个来自城市的小伙子是家里老五，上面是四个姐姐，家里条件也相对比较好。不用去想人物性格，从这个背景里，就能大致猜出这两个人的差距。果不其然，有四个姐姐的小伙子，抗压能力相当低，觉得什么活儿都有难度，什么都适应不了。</p> 
<p>而要还外债的小伙子抗压能力相当高，没事儿就来跟我说，你把什么任务都给我，我什么都能搞定。经过几年的努力，他终于把家里的外债还干净了，然后特别高兴，请我吃饭。我说，你不用感谢我，要感谢你自己，是你自己做得多。通过这个例子，我想说明，通过倾听更多地了解员工，了解他们的生长环境和背景，可以帮你对每个员工建立更加合理的预期，从而更好地进行任务分配和人员管理。</p> 
<p>所以，外企一般都会要求经理和员工有周期性的一对一交谈，就是为了及时了解员工的各种动态和想法。</p> <h1>共情</h1> <p>共情，又被称为同理心，或者换位思考，它指的是站在对方立场设身处地思考问题的一种方式。换句话说，在人际交往过程中，你需要能够体会他人的情绪和想法、理解他人的立场和感受，并站在他人的角度思考和处理问题。</p> 
<p>比如，有团队成员要辞职了，你要怎样跟他谈呢？你肯定要找他谈感情。我们一起共事这么久，你要走了，我们一起回忆回忆过去。然后说，没关系，你看你要离开了，有没有什么我可以帮你的？不要强行让对方留下来，要多谈感情，多回忆一下，多听听对方的诉说。当他回想起过去一起同甘共苦的日子，难免会心生留恋，也许会回心转意的。当然，如果你并不能把他留下来时，不如大度一些，帮他看看他要去的另外一家公司是否是正确的选择，而且你还可以给他介绍更好的地方。既然留不下来，就索性为他介绍更好的地方。这样做至少还能引发他一些思考，“我都要离开了，我老板对我还这么好，我以后能不能找到这么好的老板？”</p> 
<p>这里的关键是，当对方开始想离开你了，你千万不要指责和教育对方，而一定要站在对方的角度来思考问题，理解对方，真心对对方好。晓之以理，动之以情。</p> <h1>高维</h1> <p>员工来跟你聊的，通常都是细节问题。这时，你可以耐心地跟员工沟通，并共同来寻找解决问题的方案。但有的时候涉及到公司的一些问题时，你自己也解决不了，那么你该怎样跟员工聊呢？比如，公司因为战略方向调整，想要砍掉你负责的业务，你和你团队都需要转到新的业务线上。</p> 
<p>你肯定不能跟自己的“弟兄们”说，公司混蛋，把我们这么好的业务给砍掉了。作为管理者，你应该知道，没有完美的公司，任何公司都存在这样那样的问题。你需要有更高的维度来看待这个问题，来给员工做出解释，让他们既能理解公司的决定，又能保持动力转到新的方向上。</p> 
<p>对于这样的问题，你首先应该肯定员工过去的努力以及取得的成绩，明确说明虽然业务被砍，但是我们的技术积累还在，这是我们谋求未来发展的基石。同时，帮助员工看清公司新的战略方向会给全公司的人带来什么前景，新的业务方向如何更能发挥出大家积累的经验和能力。在成功安抚人心的同时，引发大家对新业务方向的兴趣，从而更有利于帮助团队后续过渡到新业务方向上。</p> 
<p>当然，在讲这个事情的时候，千万不要太过了，还是要跟员工共情一下，也要表达出自己的不满，这样让员工觉得你是跟他们站在一起的，而不是跟公司站在一起的，后者无疑会引发你和大家的对立。这里的沟通思路是这样的：“公司的这个决定，我也有点难理解，我们这么辛苦做了这么多，没想会这样……但是我们做的事是很牛的，我们这个团队是强大的，强大到对于这样的打击都是没有问题的。这个世界就是这样的不完美，但是我们还是要去奋斗，不然就更不完美了……接下来，无论发生什么，我们都要一起扛！” 
也许，这么说也没什么用，但至少，在困难到来时，你可以让大家的心更近了。</p> <h1>反馈</h1> <p>反馈是一种非常重要的沟通形式，对于确保团队的正常运转十分关键。但有时候员工没有反馈的意识，或者不愿意反馈，你应该怎么办？这时，你应该建立一些反馈机制。比如，在我目前的团队里面就在用“1-2-3 
反馈机制”。</p> <ol> <li> <p>不管你遇到什么问题，如果自己在那儿憋一个小时找不到解决方案，或者说没有任何思路，就要反馈到高级工程师这边来。</p> </li> <li> 
<p>如果跟高级工程师在一起两个小时内，找不到任何解决方案或者没有思路，那么就要反馈到一线 leader。</p> </li> <li> <p>如果一线 leader、高级工程师，花了三个小时，依然找不到方案，那么这个事就可能是个大事了，要向上级反馈了。</p> 
</li> </ol> <p>这么做，就是为了确保一个大问题，在一天之内能够上升到管理层。然后管理层可能会寻求更牛的人或是从外界获取帮助，以使得问题尽快能够得到解决。</p> <p>这个反馈机制不仅能确保问题及时被反应出来，并及时得到解决，而且能够帮团队节约大量的时间和精力，对团队来说是种很好的正向鼓励，属于正反馈。</p> 
<p>之前我一直强调，正反馈的重要性。在这个场景下，无疑也是如此。试想一下，你和你的“兄弟们”逢山开路，遇水搭桥，一路凯歌的样子，是不是很酣畅？这便是反馈机制的威力了，它会潜移默化地在团队中形成一种“解决问题”的文化，让我们在发现问题的第一时间正视问题，拼尽全力来解决问题，并能从中享受到“搞定问题”的成就感，从而形成正向循环。</p> 
<p>除了对工作中问题的反馈，反馈还可以存在与很多其他方面，你完全可以结合团队的实际需求拟定出各种合适的反馈机制。对于任何反馈机制的建立，你只需要记住两点：一是及时反馈；二是能够形成正向循环。</p> 
<h1>小结</h1> <p>总结一下今天的内容。我分享了我与员工沟通时经常用到的几大法宝：引导、倾听、共情、高维和反馈。</p> <ul> <li> <p>引导，用提问的方式，“倒逼”员工找到答案，从而提高员工的参与感和成就感。</p> 
</li> <li> <p>倾听，心态平和，毫无偏见，全面接收和理解对方的信息，而不是只听自己想听的信息。</p> </li> <li> <p>共情，换位思考，站在对方立场设身处地思考和处理问题，动之以情，晓之以理。</p> 
</li> <li> <p>高维，提升自己的格局观，能从全局利益、长远利益思考问题，解决问题。</p> </li> <li> <p>反馈，建立反馈机制，及时发现问题、解决问题，形成正向循环。</p> 
</li> </ul> <p>下篇文章中，我将继续就如何与员工沟通这个话题进行讨论，主要探讨如何进行一对一会议、如何做绩效沟通、如何定位性格特殊的员工、如何挽留离职员工、如何辞退员工等问题。敬请期待。</p> 
<p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.878 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=51 
 {executed in 2 msec}
2020-11-19 20:22:56.880 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:56.883 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=51 
 {executed in 1 msec}
2020-11-19 20:22:56.885 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:22:56.893 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788576, 1605788576, 1, 'zh-hans', 0, 1, 1, 
0, '104丨高效沟通：好老板要善于提问', 1, 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.901 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=51 
 {executed in 1 msec}
2020-11-19 20:22:56.903 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:22:56.911 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788576, 1605788576, 1, 'zh-hans', 0, 
1, 1, 0, '104丨高效沟通：好老板要善于提问', 'book', 1, 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.919 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=51 
 {executed in 2 msec}
2020-11-19 20:22:56.921 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:56.925 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.927 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:56.950 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6ab87d2ab41c42989d625cdc3551e8b2?bkt=en-82d2bca2fdceac3f681394182cc7f89b714817ff68a1b281f4e4a8dd4466d7e6aee30b36503c2a27&fid=3757516097-778750-502464897732165&time=1605788575&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-WamZMKfyb5ALPrNF%2F60Tl6mSDxw%3D&to=92&size=6074480&sta_dx=6074480&sta_cs=4128&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182788&mtime=1605788485&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6074480&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-3368a25d89dc62c71cac0fe0d84c4900aeb60b4eb7c592a012e37d1de04cf024857229d07e7d5559&sl=76480590&expires=8h&rt=pr&r=351298316&mlogid=7510978405016619358&vbdid=64799653&fin=104%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E8%80%81%E6%9D%BF%E8%A6%81%E5%96%84%E4%BA%8E%E6%8F%90%E9%97%AE.mp3&bflag=92,34-92&rtype=1&dp-logid=7510978405016619358&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865eeaf719797253b405d25c56e9fc9872fa6&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=104%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E8%80%81%E6%9D%BF%E8%A6%81%E5%96%84%E4%BA%8E%E6%8F%90%E9%97%AE.mp3', 
51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.959 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=51 
 {executed in 2 msec}
2020-11-19 20:22:56.961 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:22:56.969 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6ab87d2ab41c42989d625cdc3551e8b2?bkt=en-82d2bca2fdceac3f681394182cc7f89b714817ff68a1b281f4e4a8dd4466d7e6aee30b36503c2a27&fid=3757516097-778750-502464897732165&time=1605788575&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-WamZMKfyb5ALPrNF%2F60Tl6mSDxw%3D&to=92&size=6074480&sta_dx=6074480&sta_cs=4128&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182788&mtime=1605788485&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6074480&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-3368a25d89dc62c71cac0fe0d84c4900aeb60b4eb7c592a012e37d1de04cf024857229d07e7d5559&sl=76480590&expires=8h&rt=pr&r=351298316&mlogid=7510978405016619358&vbdid=64799653&fin=104%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E8%80%81%E6%9D%BF%E8%A6%81%E5%96%84%E4%BA%8E%E6%8F%90%E9%97%AE.mp3&bflag=92,34-92&rtype=1&dp-logid=7510978405016619358&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865eeaf719797253b405d25c56e9fc9872fa6&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=104%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%A5%BD%E8%80%81%E6%9D%BF%E8%A6%81%E5%96%84%E4%BA%8E%E6%8F%90%E9%97%AE.mp3', 
51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:56.976 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.978 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:56.982 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:56.984 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:56.993 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6d/1a/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>🍧</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近都是软实力的分享 但实际上 我觉得一个人的软实力太难改 比写代码难多了 就像别人说的"买了一本《如何治好拖延症》最后因为拖延没有看完" 
或许会因为目睹亲人离世 遭遇重大挫折 或者周围的环境变化的时候 软实力有较大改变 <br>总之我觉得这方面能教育我们的可能只有生活和挫折 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/b2/dd/4f860bae.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>王机智</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我们公司有个所谓的技术经理，其实没什么实力，遇到问题别人反馈给他，他就再抛给团队的其他人员，喜欢摆架子，喜欢命令下属，遇到这种人，应该怎么应对？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fc/9b/bac31594.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ydp</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 快接近尾声了，感谢耗子老师一年来的陪伴；收获非常多。感谢 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>妮妮</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 反馈机制很好 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 耗子哥 今天的 引导、倾听、共情、高维、反馈，看似 老板们的管理技巧，我也应该寻着这条路去找公司和老板 
。 <br>之前所在的公司 老板很忙，我一直在都被采用了野蛮的方式管理着，但我理解 耗子哥的 这些方法的重要性，比如 反馈的重要性，在大公司 一般要求 2小时 解决不出一个小case，就得询问周边同事 
或者上报，与我在小公司 琢磨一个问题 花去几天 然后 领导问起，然后被臭骂，又累还受罪，多次实践并比较，孰优孰劣 自有体会。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>helloworld</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 之前做一套在线系统，需要一个生成唯一id的服务，感觉方案都比较直接就让下面同学去设计，结果负责同学给的方案是每天离线灌一批id，尝试引导，和他说我们是在线系统不能停服，结果被鄙视说我们流量不大，每天可以多灌一些，然后我就失去了继续沟通下去的兴趣。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:57.004 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.006 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:22:57.016 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6d/1a/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>🍧</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 最近都是软实力的分享 但实际上 我觉得一个人的软实力太难改 比写代码难多了 就像别人说的"买了一本《如何治好拖延症》最后因为拖延没有看完" 
或许会因为目睹亲人离世 遭遇重大挫折 或者周围的环境变化的时候 软实力有较大改变 <br>总之我觉得这方面能教育我们的可能只有生活和挫折 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/b2/dd/4f860bae.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>王机智</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我们公司有个所谓的技术经理，其实没什么实力，遇到问题别人反馈给他，他就再抛给团队的其他人员，喜欢摆架子，喜欢命令下属，遇到这种人，应该怎么应对？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fc/9b/bac31594.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ydp</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 快接近尾声了，感谢耗子老师一年来的陪伴；收获非常多。感谢 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>妮妮</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 反馈机制很好 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 耗子哥 今天的 引导、倾听、共情、高维、反馈，看似 老板们的管理技巧，我也应该寻着这条路去找公司和老板 
。 <br>之前所在的公司 老板很忙，我一直在都被采用了野蛮的方式管理着，但我理解 耗子哥的 这些方法的重要性，比如 反馈的重要性，在大公司 一般要求 2小时 解决不出一个小case，就得询问周边同事 
或者上报，与我在小公司 琢磨一个问题 花去几天 然后 领导问起，然后被臭骂，又累还受罪，多次实践并比较，孰优孰劣 自有体会。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div 
class="_18Dng5rT_0"> <span>helloworld</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 之前做一套在线系统，需要一个生成唯一id的服务，感觉方案都比较直接就让下面同学去设计，结果负责同学给的方案是每天离线灌一批id，尝试引导，和他说我们是在线系统不能停服，结果被鄙视说我们流量不大，每天可以多灌一些，然后我就失去了继续沟通下去的兴趣。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:57.027 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.029 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:57.032 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.034 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:57.042 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 51, 'https://static001.geekbang.org/resource/image/ed/6a/ed83c3a27e93ff3cc98c6ca9226ac16a.jpg', 
51) 
 {executed in 0 msec}
2020-11-19 20:22:57.048 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.049 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:22:57.058 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 51, 'https://static001.geekbang.org/resource/image/ed/6a/ed83c3a27e93ff3cc98c6ca9226ac16a.jpg', 
51) 
 {executed in 0 msec}
2020-11-19 20:22:57.063 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.065 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:57.072 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 51, 51) 
 {executed in 0 msec}
2020-11-19 20:22:57.079 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=51 
 {executed in 1 msec}
2020-11-19 20:22:57.081 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:22:57.089 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 51, 51) 
 {executed in 1 msec}
2020-11-19 20:22:57.098 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='642046905213687' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:22:57.099 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:23:07.657 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='642046905213687' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:23:07.658 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:23:07.662 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('642046905213687', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:23:07.663 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('642046905213687', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:23:07.665 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|97            |
|--------------|

2020-11-19 20:23:07.683 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='642046905213687' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:23:07.685 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:23:08.430 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='642046905213687' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:23:08.431 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:23:08.434 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('642046905213687', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:23:08.436 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('642046905213687', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:23:08.437 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|98            |
|--------------|

2020-11-19 20:23:08.465 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='642046905213687' 
 {executed in 1 msec}
2020-11-19 20:23:08.467 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:23:08.471 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788588, 1) 
 {executed in 0 msec}
2020-11-19 20:23:08.473 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788588, 1) 
 {executed in 0 msec}
2020-11-19 20:23:08.474 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|52            |
|--------------|

2020-11-19 20:23:08.486 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '6c94ea27-a6ec-46ac-bd24-ad62fb93f5ba', 
52) 
 {executed in 1 msec}
2020-11-19 20:23:08.488 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '6c94ea27-a6ec-46ac-bd24-ad62fb93f5ba', 52) 
 {executed in 0 msec}
2020-11-19 20:23:08.489 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|52            |
|--------------|

2020-11-19 20:23:08.516 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=52, revision_default=1, revision_timestamp=1605788588, 
revision_uid=1 where vid=52 
 {executed in 1 msec}
2020-11-19 20:23:08.525 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.526 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:23:08.534 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '642046905213687', 'zh-hans', 52, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.544 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.546 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:23:08.555 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '642046905213687', 'zh-hans', 52, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.561 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=52 
 {executed in 1 msec}
2020-11-19 20:23:08.563 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:23:08.568 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=52 
 {executed in 2 msec}
2020-11-19 20:23:08.570 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:23:08.579 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (47, 
3, 0, 47, 48, 52, 0, 0, 48, 0, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.612 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.614 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:23:08.620 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=52 
 {executed in 4 msec}
2020-11-19 20:23:08.623 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:23:08.652 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>上篇文章中我分享了一些常用的沟通方式：尊重、倾听和情绪控制，并给出了几个我认为很不错的沟通技巧，比如：引起对方的兴趣；过滤信息，简明扼要地表达；用数据和实例说话。这篇文章中，我来分享几个关键的沟通技术，相信掌握了这几大沟通法宝，你的沟通水平会大幅提升。</p> 
<h1>逻辑</h1> <p>你的逻辑能力一定要强。因为中国人从小就不学逻辑学，所以讲话不注重逻辑，而我们理科生尤其是学过数学的程序员是懂逻辑的，所以，对于我们程序员来说，我们是可以用缜密逻辑疯狂地碾压别人的。</p> 
<p>逻辑是一门科学，也是一门数学。谁是谁的充分条件、必要条件或充要条件，以及有没有关联关系，有没有因果关系等，这些东西你要做到心中有数，当对方的表达中出现逻辑错误时，你可以随时指出来。比如，这两个事儿没有因果关系，我们不要把它们放在一起谈。</p> 
<p>有一次，我就跟一家公司的产品团队 PK 了一下。这家公司的产品有一个视频下载功能，但他们统计数据发现，有大约 40% 的用户下载到一半就取消下载操作了。于是他们就想提高用户的下载体验，解决办法是模仿微信的绿色进度条的做法：让进度条的 
90% 嗖地过去，然后最后的 10% 则对应实际剩下的下载进度。</p> <p>我们通过逻辑分析，不难发现这样做是不能赢得用户的。他们的逻辑是：“用户看到已经下载 90% 了，然后会想那 
10% 很快就能下载好，所以会愿意多等一会儿。而不是下载 10% 就让用户等了半天，那他就不想等了。”这里的前置条件是用进度条欺骗用户，后置条件是用户愿意等待下载。</p><!-- 
[[[read_end]]] --> <p>但是不是进度条这样设计了以后，用户就真的愿意等到下载完成呢？不是的。不需要试验，我们脑补一下，当我们的微信打不开网页，或者打开速度超过我们的心理忍受限度时，无论那个进度条是多少，我们都不会等的。有这么一个逻辑在这里卡着。</p> 
<p>基于这种逻辑，我跟他们说，这种进度条设计会导致更低的下载率。因为视频通常比较大，下载的总时间是很长的，绝大多数用户对这个速度是没有概念的。打开网页的时间是很短的，90% 的网页在 
3、4 秒内就打开了，只有少数偶尔需要 5 秒到 10 秒才能打开（因为移动网络的问题）。</p> <p>这时，我可以通过这种“就快完”的手段把用户多留下来一会儿。但是，视频下载无论怎样优化，至少需要半分钟，才能下载下来。此时，如果进度条不能反映真实进度的话，用户对总的打开时间是没有合理预期的，90% 
的进度提前到了，剩下的 10% 花那么久，很容易让人认为是下载卡死了，从而放弃，乃至在多次重试无果后对应用和平台都失去兴趣。</p> <p>所以，这样的进度条设计只是用户愿意等一小下（15 
秒以内）的充分条件（还不一定是必要条件），并不是用户愿意等待直到视频下载完成的充分条件或必要条件。</p> <p>在这样的逻辑面前，产品经理立马取消了这个功能的排期，说还需要想一想。你看，你可以用你的一些逻辑推理去分析问题的前因后果和条件，然后用这个条件来说服他。</p> 
<p>在逻辑层面说服对方，是一种非常高级的手段，就像懂微积分的人来解数学题一样，那些不懂微积分的只有被碾压的份儿了。</p> <h1>信息</h1> <p>信息要全面、准确。这里重点提一下 
X/Y 问题。X/Y 问题是一件非常讨厌的事情。有时候我们拿着 Y 问题去找别人，问到一半才知道，我们原来要问的是 X 问题。</p> <p>Stack Overflow 上有个问题，问的是“怎么截取一个字符串的最后三位？”大家给了一堆答案。突然有个人问：“你为什么要截取字符串的后三位？”他说：“我要找文件的扩展名”。实际上，文件的扩展名不一定是 
3 个字符，而且有专门的函数干这个事儿，不需要自己写。这里，取文件的扩展名，这叫 X，取文件名的最后 3 个字符，这叫 Y。他想知道 X，但不知道该怎么说，于是就说成了 Y，导致别人都去解决一个不存在的问题。这叫 
X/Y Problem。</p> <p>我可以告诉你，这个世界上到处都是 X/Y 问题。有些公司找我说，我们要做分布式架构，我们要做大中台，我们要做线下线上融合……这些问题都是 Y 
问题。我都要反问，你为什么要做分布式架构？为了大规模营销，为了稳定性，还是为了加快开发速度？做大中台，你是为了什么？ 是为了打通各个业务线，为了快速开发，还是为了技术输出？等等。要解的真实问题才是 
X 问题，手段都是 Y 问题。只有你真正了解了 X 问题，你才能真正明白整个事。</p> <p>当你了解了 X 问题后，你就要到源头，来质疑或是改良他的 Y 问题，甚至提出 Z 方案，而对方会陷入被动，被你牵着鼻子转。</p> 
<h1>维度</h1> <p>我们想一下，人与人不同都是细节上的不同，比如：身高、体重、手机号等，人与人的相同点都是在宏观上相同，比如：国籍，性别……这告诉我们，如果你要找不同就要到细节上去，如果你要找共同，就要到大局上去。</p> 
<p>所以，在和人争论时，如果要反驳，那一定是低维度反驳，越细节越好。而在说服对方时，则要在高维度说服对方，越宏观越好，比如从公司的大目标出发。高维度讲究的是求同存异。你跟别人相同的东西一定是高维度的，这就是大同，而你跟别人不同的一定是非常细节的东西。大同的东西，更容易让人产生共鸣，从而容易达成默契和共识。</p> 
<p>因此，<strong>能够站在更高的维度来沟通是我们需要努力的目标</strong>。我们经常会听到类似的话：“哎呀，大家都没有恶意。我们虽然争论成这样，但是大家都是为公司好，只不过我们的路径不对。”或者“我们的目标是一样的，但是我们的方式不一样。”能感觉到吧？气氛一下子就缓和了好多。</p> 
<p>站在更高的维度上讨论问题，可以让你有大局观，对方就会显得很小气，导致对方也会不好意思，于是就会出现“六尺巷”的故事中所描述的那种场景。</p> <h1>共同</h1> <p>这里讲的是共情，共享，共利，共识以及换位思考。如果你能站在对方的角度思考问题，那么你所想的问题以及所想沟通的内容，一定会跟只想自己有很大不同。同时，你会神奇地发现，换位思考能帮助你更为全面地理解并解决问题。</p> 
<p>寻找“共同”的过程，其实也可以理解成为化“敌”为“友”的过程。我们不妨想象一下，沟通双方剑拔弩张，随时一触即发的情况，和沟通双方有共同的目标一起思考和解决问题的状态，哪种更能获得更好的结果。而共同该怎样找，跟我们在维度中提及的很相似，就是从高维度，寻找共同之处。</p> 
<p>首先是共情，跟对方相互分享各自的情感，这是一种拉近距离最有效的手段，然后是相互共享自己的观点，在观点中寻求双方共同的利益点，然后不断地循环，一点一点地达成共识。</p> <h1>三本书</h1> 
<p>此外，我还想强调一点，<strong>无论干什么，你一定要有一个非常犀利的观点，也就是金句</strong>。如何得到这些金句呢？一定要多看书。你到那些公众号或者知乎里面看一些抖机灵的内容是没有用的。抖机灵的金句没有用。一定要是有思想深度的金句，才有力量。推荐你看三本书《<a 
href="https://book.douban.com/subject/26871359/">清醒思考的艺术</a>》、《<a href="https://book.douban.com/subject/24754537/">简单逻辑学</a>》和《<a 
href="https://book.douban.com/subject/5320866/">重来</a>》。</p> <p>我是先被《重来》洗脑了，这本书帮我开拓了眼界，打破了我既有的思维模式，让我反思过去习以为常的每一件事。同时书中给出了实用、可操作的建议，让我头一次从心底感受到，原来世界还可以如此不同。</p> 
<p>然后，我看了《清醒思考的艺术》，这本书作者以显微镜般的观察发现人们常犯的 52 个思维错误，并一一列出。帮人们认识到错误的思维是如何发生，从而避免掉入思维陷阱中。看这本书的过程中，我能明显感觉到自己的思维方式在被重新构造。</p> 
<p>随后是《简单逻辑学》。逻辑学是很枯燥的，但这本书的作者以其简练而又充满趣味的笔触，将逻辑学活化为一种艺术，从它的基本原理，到论证，到非逻辑思维的根源，再到 28 种就发生在人们身边的非逻辑思维形式，带领我们进入这个精彩无比的逻辑世界，体会妙趣横生的思维交锋，跨过无处不在的逻辑陷阱，让人沉醉其中，欲罢不能。</p> 
<p>这三本书对我影响很大，也建议你好好读读，能改善你的思维，炼就你的火眼金睛。你会发现自己跟和别人不在一个频道上，你能看到事物更多的侧面，在阐述观点时，会比别人更加深刻、犀利和有见地。一些金句也会在你跟人互动交流时，随机地冒出来。你自己都能明显感觉到自己的气场要比其他人足。</p> 
<h1>小结</h1> <p>总结一下今天的内容。我们讲了沟通的四大关键技术：逻辑、信息、维度和共同。</p> <p>有逻辑的表达，更容易说服对方。信息全面准确，更有利于让沟通的双方清楚定位问题，从而更高效地解决问题。</p> 
<p>维度是个很有趣的事儿，有的时候要站在高维度去碾压对方；有的时候要站在低维度去碾压对方。如何把握这个度很重要。如果站在客户的角度，最好用高维度。但如果站在技术细节的角度，这是低维度。高维度容易拉拢对方，而在低维度更容易说服对方。只不过低维度容易爆发冲突，要恰当地控制好度。</p> 
<p>最后一点是共同，其实寻找共同的过程就是化“敌”为“友”的过程，帮助大家在共赢的大思路和环境下，共同思考问题的解，从而实现高效沟通。此外，我强调了金句的重要性，以及如何获得这些金句。答案是没有捷径可走，唯有多读书，多思考，才能慢慢获得。</p> 
<p>下篇文章，我们将进入《高效沟通》系列文章的实践部分，分享一下该如何与员工沟通。敬请期待。</p> <p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><span class="orange">编辑乱入：耗子叔推荐的图书现已上架“极客商城”，价格比其他电商平台更美丽哦～现在订购，请从“极客时间发现页”下滑进入“极客商城”，即可选购耗子叔推荐图书。</span></p> 
<p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 52, 52) 
 {executed in 16 msec}
2020-11-19 20:23:08.699 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.701 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:23:08.715 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>上篇文章中我分享了一些常用的沟通方式：尊重、倾听和情绪控制，并给出了几个我认为很不错的沟通技巧，比如：引起对方的兴趣；过滤信息，简明扼要地表达；用数据和实例说话。这篇文章中，我来分享几个关键的沟通技术，相信掌握了这几大沟通法宝，你的沟通水平会大幅提升。</p> 
<h1>逻辑</h1> <p>你的逻辑能力一定要强。因为中国人从小就不学逻辑学，所以讲话不注重逻辑，而我们理科生尤其是学过数学的程序员是懂逻辑的，所以，对于我们程序员来说，我们是可以用缜密逻辑疯狂地碾压别人的。</p> 
<p>逻辑是一门科学，也是一门数学。谁是谁的充分条件、必要条件或充要条件，以及有没有关联关系，有没有因果关系等，这些东西你要做到心中有数，当对方的表达中出现逻辑错误时，你可以随时指出来。比如，这两个事儿没有因果关系，我们不要把它们放在一起谈。</p> 
<p>有一次，我就跟一家公司的产品团队 PK 了一下。这家公司的产品有一个视频下载功能，但他们统计数据发现，有大约 40% 的用户下载到一半就取消下载操作了。于是他们就想提高用户的下载体验，解决办法是模仿微信的绿色进度条的做法：让进度条的 
90% 嗖地过去，然后最后的 10% 则对应实际剩下的下载进度。</p> <p>我们通过逻辑分析，不难发现这样做是不能赢得用户的。他们的逻辑是：“用户看到已经下载 90% 了，然后会想那 
10% 很快就能下载好，所以会愿意多等一会儿。而不是下载 10% 就让用户等了半天，那他就不想等了。”这里的前置条件是用进度条欺骗用户，后置条件是用户愿意等待下载。</p><!-- 
[[[read_end]]] --> <p>但是不是进度条这样设计了以后，用户就真的愿意等到下载完成呢？不是的。不需要试验，我们脑补一下，当我们的微信打不开网页，或者打开速度超过我们的心理忍受限度时，无论那个进度条是多少，我们都不会等的。有这么一个逻辑在这里卡着。</p> 
<p>基于这种逻辑，我跟他们说，这种进度条设计会导致更低的下载率。因为视频通常比较大，下载的总时间是很长的，绝大多数用户对这个速度是没有概念的。打开网页的时间是很短的，90% 的网页在 
3、4 秒内就打开了，只有少数偶尔需要 5 秒到 10 秒才能打开（因为移动网络的问题）。</p> <p>这时，我可以通过这种“就快完”的手段把用户多留下来一会儿。但是，视频下载无论怎样优化，至少需要半分钟，才能下载下来。此时，如果进度条不能反映真实进度的话，用户对总的打开时间是没有合理预期的，90% 
的进度提前到了，剩下的 10% 花那么久，很容易让人认为是下载卡死了，从而放弃，乃至在多次重试无果后对应用和平台都失去兴趣。</p> <p>所以，这样的进度条设计只是用户愿意等一小下（15 
秒以内）的充分条件（还不一定是必要条件），并不是用户愿意等待直到视频下载完成的充分条件或必要条件。</p> <p>在这样的逻辑面前，产品经理立马取消了这个功能的排期，说还需要想一想。你看，你可以用你的一些逻辑推理去分析问题的前因后果和条件，然后用这个条件来说服他。</p> 
<p>在逻辑层面说服对方，是一种非常高级的手段，就像懂微积分的人来解数学题一样，那些不懂微积分的只有被碾压的份儿了。</p> <h1>信息</h1> <p>信息要全面、准确。这里重点提一下 
X/Y 问题。X/Y 问题是一件非常讨厌的事情。有时候我们拿着 Y 问题去找别人，问到一半才知道，我们原来要问的是 X 问题。</p> <p>Stack Overflow 上有个问题，问的是“怎么截取一个字符串的最后三位？”大家给了一堆答案。突然有个人问：“你为什么要截取字符串的后三位？”他说：“我要找文件的扩展名”。实际上，文件的扩展名不一定是 
3 个字符，而且有专门的函数干这个事儿，不需要自己写。这里，取文件的扩展名，这叫 X，取文件名的最后 3 个字符，这叫 Y。他想知道 X，但不知道该怎么说，于是就说成了 Y，导致别人都去解决一个不存在的问题。这叫 
X/Y Problem。</p> <p>我可以告诉你，这个世界上到处都是 X/Y 问题。有些公司找我说，我们要做分布式架构，我们要做大中台，我们要做线下线上融合……这些问题都是 Y 
问题。我都要反问，你为什么要做分布式架构？为了大规模营销，为了稳定性，还是为了加快开发速度？做大中台，你是为了什么？ 是为了打通各个业务线，为了快速开发，还是为了技术输出？等等。要解的真实问题才是 
X 问题，手段都是 Y 问题。只有你真正了解了 X 问题，你才能真正明白整个事。</p> <p>当你了解了 X 问题后，你就要到源头，来质疑或是改良他的 Y 问题，甚至提出 Z 方案，而对方会陷入被动，被你牵着鼻子转。</p> 
<h1>维度</h1> <p>我们想一下，人与人不同都是细节上的不同，比如：身高、体重、手机号等，人与人的相同点都是在宏观上相同，比如：国籍，性别……这告诉我们，如果你要找不同就要到细节上去，如果你要找共同，就要到大局上去。</p> 
<p>所以，在和人争论时，如果要反驳，那一定是低维度反驳，越细节越好。而在说服对方时，则要在高维度说服对方，越宏观越好，比如从公司的大目标出发。高维度讲究的是求同存异。你跟别人相同的东西一定是高维度的，这就是大同，而你跟别人不同的一定是非常细节的东西。大同的东西，更容易让人产生共鸣，从而容易达成默契和共识。</p> 
<p>因此，<strong>能够站在更高的维度来沟通是我们需要努力的目标</strong>。我们经常会听到类似的话：“哎呀，大家都没有恶意。我们虽然争论成这样，但是大家都是为公司好，只不过我们的路径不对。”或者“我们的目标是一样的，但是我们的方式不一样。”能感觉到吧？气氛一下子就缓和了好多。</p> 
<p>站在更高的维度上讨论问题，可以让你有大局观，对方就会显得很小气，导致对方也会不好意思，于是就会出现“六尺巷”的故事中所描述的那种场景。</p> <h1>共同</h1> <p>这里讲的是共情，共享，共利，共识以及换位思考。如果你能站在对方的角度思考问题，那么你所想的问题以及所想沟通的内容，一定会跟只想自己有很大不同。同时，你会神奇地发现，换位思考能帮助你更为全面地理解并解决问题。</p> 
<p>寻找“共同”的过程，其实也可以理解成为化“敌”为“友”的过程。我们不妨想象一下，沟通双方剑拔弩张，随时一触即发的情况，和沟通双方有共同的目标一起思考和解决问题的状态，哪种更能获得更好的结果。而共同该怎样找，跟我们在维度中提及的很相似，就是从高维度，寻找共同之处。</p> 
<p>首先是共情，跟对方相互分享各自的情感，这是一种拉近距离最有效的手段，然后是相互共享自己的观点，在观点中寻求双方共同的利益点，然后不断地循环，一点一点地达成共识。</p> <h1>三本书</h1> 
<p>此外，我还想强调一点，<strong>无论干什么，你一定要有一个非常犀利的观点，也就是金句</strong>。如何得到这些金句呢？一定要多看书。你到那些公众号或者知乎里面看一些抖机灵的内容是没有用的。抖机灵的金句没有用。一定要是有思想深度的金句，才有力量。推荐你看三本书《<a 
href="https://book.douban.com/subject/26871359/">清醒思考的艺术</a>》、《<a href="https://book.douban.com/subject/24754537/">简单逻辑学</a>》和《<a 
href="https://book.douban.com/subject/5320866/">重来</a>》。</p> <p>我是先被《重来》洗脑了，这本书帮我开拓了眼界，打破了我既有的思维模式，让我反思过去习以为常的每一件事。同时书中给出了实用、可操作的建议，让我头一次从心底感受到，原来世界还可以如此不同。</p> 
<p>然后，我看了《清醒思考的艺术》，这本书作者以显微镜般的观察发现人们常犯的 52 个思维错误，并一一列出。帮人们认识到错误的思维是如何发生，从而避免掉入思维陷阱中。看这本书的过程中，我能明显感觉到自己的思维方式在被重新构造。</p> 
<p>随后是《简单逻辑学》。逻辑学是很枯燥的，但这本书的作者以其简练而又充满趣味的笔触，将逻辑学活化为一种艺术，从它的基本原理，到论证，到非逻辑思维的根源，再到 28 种就发生在人们身边的非逻辑思维形式，带领我们进入这个精彩无比的逻辑世界，体会妙趣横生的思维交锋，跨过无处不在的逻辑陷阱，让人沉醉其中，欲罢不能。</p> 
<p>这三本书对我影响很大，也建议你好好读读，能改善你的思维，炼就你的火眼金睛。你会发现自己跟和别人不在一个频道上，你能看到事物更多的侧面，在阐述观点时，会比别人更加深刻、犀利和有见地。一些金句也会在你跟人互动交流时，随机地冒出来。你自己都能明显感觉到自己的气场要比其他人足。</p> 
<h1>小结</h1> <p>总结一下今天的内容。我们讲了沟通的四大关键技术：逻辑、信息、维度和共同。</p> <p>有逻辑的表达，更容易说服对方。信息全面准确，更有利于让沟通的双方清楚定位问题，从而更高效地解决问题。</p> 
<p>维度是个很有趣的事儿，有的时候要站在高维度去碾压对方；有的时候要站在低维度去碾压对方。如何把握这个度很重要。如果站在客户的角度，最好用高维度。但如果站在技术细节的角度，这是低维度。高维度容易拉拢对方，而在低维度更容易说服对方。只不过低维度容易爆发冲突，要恰当地控制好度。</p> 
<p>最后一点是共同，其实寻找共同的过程就是化“敌”为“友”的过程，帮助大家在共赢的大思路和环境下，共同思考问题的解，从而实现高效沟通。此外，我强调了金句的重要性，以及如何获得这些金句。答案是没有捷径可走，唯有多读书，多思考，才能慢慢获得。</p> 
<p>下篇文章，我们将进入《高效沟通》系列文章的实践部分，分享一下该如何与员工沟通。敬请期待。</p> <p>下面是《高效沟通》系列文章的目录。</p> <ul> <li><a href="https://time.geekbang.org/column/article/28550">Talk 
和 Code 同等重要</a></li> <li><a href="https://time.geekbang.org/column/article/32619">沟通阻碍和应对方法</a></li> 
<li><a href="https://time.geekbang.org/column/article/32796">沟通方式及技巧</a></li> <li><a href="https://time.geekbang.org/column/article/32902">沟通技术</a></li> 
<li><a href="https://time.geekbang.org/column/article/33112">好老板要善于提问</a></li> <li><a href="https://time.geekbang.org/column/article/41008">好好说话的艺术</a></li> 
</ul> <p><span class="orange">编辑乱入：耗子叔推荐的图书现已上架“极客商城”，价格比其他电商平台更美丽哦～现在订购，请从“极客时间发现页”下滑进入“极客商城”，即可选购耗子叔推荐图书。</span></p> 
<p><img src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 52, 52) 
 {executed in 5 msec}
2020-11-19 20:23:08.736 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=52 
 {executed in 2 msec}
2020-11-19 20:23:08.738 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:23:08.742 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=52 
 {executed in 2 msec}
2020-11-19 20:23:08.744 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:23:08.756 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788588, 1605788588, 1, 'zh-hans', 0, 1, 1, 
0, '103丨高效沟通：沟通技术', 1, 52, 52) 
 {executed in 2 msec}
2020-11-19 20:23:08.776 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=52 
 {executed in 4 msec}
2020-11-19 20:23:08.778 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:23:08.788 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788588, 1605788588, 1, 'zh-hans', 0, 
1, 1, 0, '103丨高效沟通：沟通技术', 'book', 1, 52, 52) 
 {executed in 2 msec}
2020-11-19 20:23:08.796 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.798 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:23:08.801 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.803 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:23:08.812 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/2e42f75f2281aa430dfd3c5c0b454adf?bkt=en-82d2bca2fdceac3f0b7e29e36d6c1d7fbd1f7a88d48ee45758fdfebb0696d97ad26b5ab25ae9666a&fid=3757516097-778750-351389257777972&time=1605788587&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-dP%2FKPB7VCSNt5iCZkrLklATq3K0%3D&to=92&size=5552240&sta_dx=5552240&sta_cs=4126&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182787&mtime=1605788485&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5552240&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-58fcabf1593f2695e2a6980a88d5fc5412c60c02b556783d39092904d94a36642c2e57c3b0ecaa0b&sl=76480590&expires=8h&rt=pr&r=792588924&mlogid=7510981497706632951&vbdid=64799653&fin=103%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E6%B2%9F%E9%80%9A%E6%8A%80%E6%9C%AF.mp3&bflag=92,34-92&rtype=1&dp-logid=7510981497706632951&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=e3357e20d22cf8486cd62d4be665c428855801073d30d7a8&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=103%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E6%B2%9F%E9%80%9A%E6%8A%80%E6%9C%AF.mp3', 
52, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.820 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.822 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:23:08.830 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/2e42f75f2281aa430dfd3c5c0b454adf?bkt=en-82d2bca2fdceac3f0b7e29e36d6c1d7fbd1f7a88d48ee45758fdfebb0696d97ad26b5ab25ae9666a&fid=3757516097-778750-351389257777972&time=1605788587&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-dP%2FKPB7VCSNt5iCZkrLklATq3K0%3D&to=92&size=5552240&sta_dx=5552240&sta_cs=4126&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182787&mtime=1605788485&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5552240&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-58fcabf1593f2695e2a6980a88d5fc5412c60c02b556783d39092904d94a36642c2e57c3b0ecaa0b&sl=76480590&expires=8h&rt=pr&r=792588924&mlogid=7510981497706632951&vbdid=64799653&fin=103%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E6%B2%9F%E9%80%9A%E6%8A%80%E6%9C%AF.mp3&bflag=92,34-92&rtype=1&dp-logid=7510981497706632951&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=e3357e20d22cf8486cd62d4be665c428855801073d30d7a8&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=103%E4%B8%A8%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%EF%BC%9A%E6%B2%9F%E9%80%9A%E6%8A%80%E6%9C%AF.mp3', 
52, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.837 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=52 
 {executed in 2 msec}
2020-11-19 20:23:08.839 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:23:08.843 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=52 
 {executed in 2 msec}
2020-11-19 20:23:08.845 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:23:08.866 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Joker</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 想到专栏就要结束了，就不舍得😭😭😭 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/6e/fa/501a309c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>宁静致远</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 鬼谷子的诡辩论就很厉害 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/af/a6/d625b766.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>陈志恒</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这几篇文章我觉得可以从场景的角度去分类，这样更好理解。做报告的时候，正常交流的时候，讨论辩论的时候等，分类之后也会提醒我们在这样的场景的时候如何面对，不断训练，最终达到无招胜有招，融会贯通 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4Tosj3tAYvdgDfa32FAu85ibEicxhtibU4ibdm3YAgvTWwukycMlVfPwea9sL2bFSdBeymWI7iaIbg0g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>karl</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得这些软技能，才是受益终生的，赞! <br>技术之路无止境，为人处世很重要! 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/8a/16/10420350.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LouisLimTJ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “所以，在和人争论时，如果要反驳，那一定是低维度反驳，越细节越好。而在说服对方时，则要在高维度说服对方，越宏观越好，比如从公司的大目标出发。高维度讲究的是求同存异。”这个说得很好。 
<br>作为一名在海外工作的工程师，以前可能无意去理解到这点。今天有个技术讨论也算是第一次有意识运用这个原理。要去辩驳对方，卧槽，用英语理顺思路，那个对细节把握啊，一场10多分钟的讨论，好累。 
<br>作为非英语母语在海外工作的人，不知是不是具有普遍性，我总以为能听懂大概，事后确认就够了。按照这个思路，因为你总是止步于听懂大概，所以一般总傻不拉几被别人”求同”了。而争取资源要求改变的事情，一般属于”反驳”的范畴，毕竟人性讨厌重新分配。而因为语言能力的问题，细节讨论不到位，所以说服力不足，往往最后不了了之，也算是被“求同”了。 
<br>所以如果语言能力做不到细节的把握程度，做执行者，可以了，因为只需要理解他人嘛。但是你要是一名经理，如果要争取资源，对不起，请修炼好自身的语言和逻辑能力，达到对细节的把握。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>jackzhang...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢皓哥，谢谢你从"道"的层面帮我们解释编程哲学，为人处世哲学，这些见解对我是有深远意义的! 
比心~ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/99/4e/61c13998.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>侯伟龙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想皓哥学习💪💪💪 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 还有 三本书 《重来》《简单逻辑学》《清醒思考的艺术》，我会一本本的下单，期待 
也能给我洗涤下思维，向 耗子哥看齐。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 又get到了 耗子哥的逻辑， x/y真实信息，高低维度的沟通，还有 
从 共情 到 共识、再到共利 最后到 共同的一些套路。 <br>讲个例子，我家人 有比较强势的，说出的话，其他人又不认同的，很容易 擦枪走火，爆发口舌之争，所以 就像 耗子哥 所说的 
争取他人的赞同，必须从 大局 或者 宏观 的高维度 进行拉拢，有冲突也应该 从低纬度进行辩驳，摆事实讲道理，不能进行人身攻击。 <br>耗子哥的 从 共情 到 共识 共利 最后到 共同，应该适用在 
找合作伙伴，找公司，还有妹纸 ，因为道理是想通的，就是等我去证明了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/48/af/ecb0cefb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>旺仔</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 感谢耗子叔，受益良多。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 52, 52) 
 {executed in 14 msec}
2020-11-19 20:23:08.875 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.877 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:23:08.898 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Joker</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 想到专栏就要结束了，就不舍得😭😭😭 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/6e/fa/501a309c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>宁静致远</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 鬼谷子的诡辩论就很厉害 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/af/a6/d625b766.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>陈志恒</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这几篇文章我觉得可以从场景的角度去分类，这样更好理解。做报告的时候，正常交流的时候，讨论辩论的时候等，分类之后也会提醒我们在这样的场景的时候如何面对，不断训练，最终达到无招胜有招，融会贯通 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4Tosj3tAYvdgDfa32FAu85ibEicxhtibU4ibdm3YAgvTWwukycMlVfPwea9sL2bFSdBeymWI7iaIbg0g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>karl</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得这些软技能，才是受益终生的，赞! <br>技术之路无止境，为人处世很重要! 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/8a/16/10420350.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LouisLimTJ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “所以，在和人争论时，如果要反驳，那一定是低维度反驳，越细节越好。而在说服对方时，则要在高维度说服对方，越宏观越好，比如从公司的大目标出发。高维度讲究的是求同存异。”这个说得很好。 
<br>作为一名在海外工作的工程师，以前可能无意去理解到这点。今天有个技术讨论也算是第一次有意识运用这个原理。要去辩驳对方，卧槽，用英语理顺思路，那个对细节把握啊，一场10多分钟的讨论，好累。 
<br>作为非英语母语在海外工作的人，不知是不是具有普遍性，我总以为能听懂大概，事后确认就够了。按照这个思路，因为你总是止步于听懂大概，所以一般总傻不拉几被别人”求同”了。而争取资源要求改变的事情，一般属于”反驳”的范畴，毕竟人性讨厌重新分配。而因为语言能力的问题，细节讨论不到位，所以说服力不足，往往最后不了了之，也算是被“求同”了。 
<br>所以如果语言能力做不到细节的把握程度，做执行者，可以了，因为只需要理解他人嘛。但是你要是一名经理，如果要争取资源，对不起，请修炼好自身的语言和逻辑能力，达到对细节的把握。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>jackzhang...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 
2018-09-25 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 非常感谢皓哥，谢谢你从"道"的层面帮我们解释编程哲学，为人处世哲学，这些见解对我是有深远意义的! 
比心~ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/99/4e/61c13998.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>侯伟龙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想皓哥学习💪💪💪 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 还有 三本书 《重来》《简单逻辑学》《清醒思考的艺术》，我会一本本的下单，期待 
也能给我洗涤下思维，向 耗子哥看齐。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>caohuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 又get到了 耗子哥的逻辑， x/y真实信息，高低维度的沟通，还有 
从 共情 到 共识、再到共利 最后到 共同的一些套路。 <br>讲个例子，我家人 有比较强势的，说出的话，其他人又不认同的，很容易 擦枪走火，爆发口舌之争，所以 就像 耗子哥 所说的 
争取他人的赞同，必须从 大局 或者 宏观 的高维度 进行拉拢，有冲突也应该 从低纬度进行辩驳，摆事实讲道理，不能进行人身攻击。 <br>耗子哥的 从 共情 到 共识 共利 最后到 共同，应该适用在 
找合作伙伴，找公司，还有妹纸 ，因为道理是想通的，就是等我去证明了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/48/af/ecb0cefb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>旺仔</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 感谢耗子叔，受益良多。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 52, 52) 
 {executed in 12 msec}
2020-11-19 20:23:08.919 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=52 
 {executed in 2 msec}
2020-11-19 20:23:08.921 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:23:08.925 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=52 
 {executed in 2 msec}
2020-11-19 20:23:08.927 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:23:08.939 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 52, 'https://static001.geekbang.org/resource/image/82/07/825048ec0c539ec65aad453d96b19107.jpg', 
52) 
 {executed in 5 msec}
2020-11-19 20:23:08.948 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.950 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:23:08.959 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 52, 'https://static001.geekbang.org/resource/image/82/07/825048ec0c539ec65aad453d96b19107.jpg', 
52) 
 {executed in 1 msec}
2020-11-19 20:23:08.966 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=52 
 {executed in 1 msec}
2020-11-19 20:23:08.968 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:23:08.976 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 52, 52) 
 {executed in 1 msec}
2020-11-19 20:23:08.982 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=52 
 {executed in 1 msec}
