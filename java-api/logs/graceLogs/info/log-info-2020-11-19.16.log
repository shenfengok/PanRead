2020-11-19 20:10:06.936 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:06.976 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>注解（annotation）是 Java 5 引入的，用来为类、方法、字段、参数等 Java 结构提供额外信息的机制。我先举个例子，比如，Java 
核心类库中的<code>@Override</code>注解是被用来声明某个实例方法重写了父类的同名同参数类型的方法。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
package java.lang; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Target(ElementType.METHOD) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Retention(RetentionPolicy.SOURCE) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public @interface Override { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><code>@Override</code>注解本身被另外两个元注解（即作用在注解上的注解）所标注。其中，<code>@Target</code>用来限定目标注解所能标注的 
Java 结构，这里<code>@Override</code>便只能被用来标注方法。</p> <p><code>@Retention</code>则用来限定当前注解生命周期。注解共有三种不同的生命周期：<code>SOURCE</code>，<code>CLASS</code>或<code>RUNTIME</code>，分别表示注解只出现在源代码中，只出现在源代码和字节码中，以及出现在源代码、字节码和运行过程中。</p> 
<p>这里<code>@Override</code>便只能出现在源代码中。一旦标注了<code>@Override</code>的方法所在的源代码被编译为字节码，该注解便会被擦除。</p> 
<p>我们不难猜到，<code>@Override</code>仅对 Java 编译器有用。事实上，它会为 Java 编译器引入了一条新的编译规则，即如果所标注的方法不是 Java 
语言中的重写方法，那么编译器会报错。而当编译完成时，它的使命也就结束了。</p> <p>我们知道，Java 的注解机制允许开发人员自定义注解。这些自定义注解同样可以为 Java 编译器添加编译规则。不过，这种功能需要由开发人员提供，并且以插件的形式接入 
Java 编译器中，这些插件我们称之为注解处理器（annotation processor）。</p><!-- [[[read_end]]] --> <p>除了引入新的编译规则之外，注解处理器还可以用于修改已有的 
Java 源文件（不推荐），或者生成新的 Java 源文件。下面，我将用几个案例来详细阐述注解处理器的这些功能，以及它背后的原理。</p> <h2>注解处理器的原理</h2> <p>在介绍注解处理器之前，我们先来了解一下 
Java 编译器的工作流程。</p> <p><img src="https://static001.geekbang.org/resource/image/64/b8/64e93f67c3b422afd90966bfe9aaf5b8.png" 
alt=""></p> <p>如上图所示 出处 [1]，Java 源代码的编译过程可分为三个步骤：</p> <ol> <li>将源文件解析为抽象语法树；</li> <li>调用已注册的注解处理器；</li> 
<li>生成字节码。</li> </ol> <p>如果在第 2 步调用注解处理器过程中生成了新的源文件，那么编译器将重复第 1、2 步，解析并且处理新生成的源文件。每次重复我们称之为一轮（Round）。</p> 
<p>也就是说，第一轮解析、处理的是输入至编译器中的已有源文件。如果注解处理器生成了新的源文件，则开始第二轮、第三轮，解析并且处理这些新生成的源文件。当注解处理器不再生成新的源文件，编译进入最后一轮，并最终进入生成字节码的第 
3 步。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package foo; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.lang.annotation.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Target({ ElementType.TYPE, ElementType.FIELD 
}) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> @Retention(RetentionPolicy.SOURCE) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public @interface CheckGetter { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，我定义了一个注解<code>@CheckGetter</code>。它既可以用来标注类，也可以用来标注字段。此外，它和<code>@Override</code>相同，其生命周期被限定在源代码中。</p> 
<p>下面我们来实现一个处理<code>@CheckGetter</code>注解的处理器。它将遍历被标注的类中的实例字段，并检查有没有相应的<code>getter</code>方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public interface Processor { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void init(ProcessingEnvironment processingEnv); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Set&lt;String&gt; getSupportedAnnotationTypes(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
SourceVersion getSupportedSourceVersion(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>所有的注解处理器类都需要实现接口<code>Processor</code>。该接口主要有四个重要方法。其中，<code>init</code>方法用来存放注解处理器的初始化代码。之所以不用构造器，是因为在 
Java 编译器中，注解处理器的实例是通过反射 API 生成的。也正是因为使用反射 API，每个注解处理器类都需要定义一个无参数构造器。</p> <p>通常来说，当编写注解处理器时，我们不声明任何构造器，并依赖于 
Java 编译器，为之插入一个无参数构造器。而具体的初始化代码，则放入<code>init</code>方法之中。</p> <p>在剩下的三个方法中，<code>getSupportedAnnotationTypes</code>方法将返回注解处理器所支持的注解类型，这些注解类型只需用字符串形式表示即可。</p> 
<p><code>getSupportedSourceVersion</code>方法将返回该处理器所支持的 Java 版本，通常，这个版本需要与你的 Java 编译器版本保持一致；而<code>process</code>方法则是最为关键的注解处理方法。</p> 
<p>JDK 提供了一个实现<code>Processor</code>接口的抽象类<code>AbstractProcessor</code>。该抽象类实现了<code>init</code>、<code>getSupportedAnnotationTypes</code>和<code>getSupportedSourceVersion</code>方法。</p> 
<p>它的子类可以通过<code>@SupportedAnnotationTypes</code>和<code>@SupportedSourceVersion</code>注解来声明所支持的注解类型以及 
Java 版本。</p> <p>下面这段代码便是<code>@CheckGetter</code>注解处理器的实现。由于我使用了 Java 10 的编译器，因此将支持版本设置为<code>SourceVersion.RELEASE_10</code>。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package bar; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.util.Set; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.annotation.processing.*; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.SourceVersion; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.element.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.util.ElementFilter; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.tools.Diagnostic.Kind; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import foo.CheckGetter; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@SupportedAnnotationTypes("foo.CheckGetter") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @SupportedSourceVersion(SourceVersion.RELEASE_10) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class CheckGetterProcessor extends 
AbstractProcessor { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public boolean process(Set&lt;? extends TypeElement&gt; annotations, 
RoundEnvironment roundEnv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// TODO: annotated ElementKind.FIELD </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (TypeElement annotatedClass : ElementFilter.typesIn(roundEnv.getElementsAnnotatedWith(CheckGetter.class))) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (VariableElement field : ElementFilter.fieldsIn(annotatedClass.getEnclosedElements())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (!containsGetter(annotatedClass, field.getSimpleName().toString())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> processingEnv.getMessager().printMessage(Kind.ERROR, 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String.format("getter not found for ''%s.%s''.", 
annotatedClass.getSimpleName(), field.getSimpleName())); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private static boolean containsGetter(TypeElement 
typeElement, String name) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
String getter = "get" + name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (ExecutableElement executableElement 
: ElementFilter.methodsIn(typeElement.getEnclosedElements())) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (!executableElement.getModifiers().contains(Modifier.STATIC) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> &amp;&amp; executableElement.getSimpleName().toString().equals(getter) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> &amp;&amp; executableElement.getParameters().isEmpty()) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return true; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return false; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>该注解处理器仅重写了<code>process</code>方法。这个方法将接收两个参数，分别代表该注解处理器所能处理的注解类型，以及囊括当前轮生成的抽象语法树的<code>RoundEnvironment</code>。</p> 
<p>由于该处理器针对的注解仅有<code>@CheckGetter</code>一个，而且我们并不会读取注解中的值，因此第一个参数并不重要。在代码中，我直接使用了</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> `roundEnv.getElementsAnnotatedWith(CheckGetter.class)` </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>来获取所有被<code>@CheckGetter</code>注解的类（以及字段）。</p> <p><code>process</code>方法涉及各种不同类型的<code>Element</code>，分别指代 
Java 程序中的各个结构。如<code>TypeElement</code>指代类或者接口，<code>VariableElement</code>指代字段、局部变量、enum 常量等，<code>ExecutableElement</code>指代方法或者构造器。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package foo; // PackageElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Foo { // TypeElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a; // VariableElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static int b; // VariableElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Foo () {} // ExecutableElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void setA ( // ExecutableElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int newA // VariableElement </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这些结构之间也有从属关系，如上面这段代码所示 (出处 [2]）。我们可以通过<code>TypeElement.getEnclosedElements</code>方法，获得上面这段代码中<code>Foo</code>类的字段、构造器以及方法。</p> 
<p>我们也可以通过<code>ExecutableElement.getParameters</code>方法，获得<code>setA</code>方法的参数。具体这些<code>Element</code>类都有哪些 
API，你可以参考它们的 Javadoc[3]。</p> <p>在将该注解处理器编译成 class 文件后，我们便可以将其注册为 Java 编译器的插件，并用来处理其他源代码。注册的方法主要有两种。第一种是直接使用 
javac 命令的<code>-processor</code>参数，如下所示：</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> $ javac 
-cp /CLASSPATH/TO/CheckGetterProcessor -processor bar.CheckGetterProcessor Foo.java </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> error: Class ''Foo'' is annotated as @CheckGetter, 
but field ''a'' is without getter </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1 error </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>第二种则是将注解处理器编译生成的 class 文件压缩入 jar 包中，并在 
jar 包的配置文件中记录该注解处理器的包名及类名，即<code>bar.CheckGetterProcessor</code>。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
（具体路径及配置文件名为`META-INF/services/javax.annotation.processing.Processor`） </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>当启动 Java 编译器时，它会寻找 classpath 路径上的 jar 包是否包含上述配置文件，并自动注册其中记录的注解处理器。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ javac -cp /PATH/TO/CheckGetterProcessor.jar Foo.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> error: Class ''Foo'' is annotated as @CheckGetter, but field ''a'' 
is without getter </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
1 error </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>此外，我们还可以在 IDE 中配置注解处理器。这里我就不过多演示了，感兴趣的同学可以自行搜索。</p> 
<h2>利用注解处理器生成源代码</h2> <p>前面提到，注解处理器可以用来修改已有源代码或者生成源代码。</p> <p>确切地说，注解处理器并不能真正地修改已有源代码。这里指的是修改由 
Java 源代码生成的抽象语法树，在其中修改已有树节点或者插入新的树节点，从而使生成的字节码发生变化。</p> <p>对抽象语法树的修改涉及了 Java 编译器的内部 API，这部分很可能随着版本变更而失效。因此，我并不推荐这种修改方式。</p> 
<p>如果你感兴趣的话，可以参考 [Project Lombok][4]。这个项目自定义了一系列注解，并根据注解的内容来修改已有的源代码。例如它提供了<code>@Getter</code>和<code>@Setter</code>注解，能够为程序自动添加<code>getter</code>以及<code>setter</code>方法。有关对使用内部 
API 的讨论，你可以参考 [这篇博客][5]，以及 [Lombok 的回应][6]。</p> <p>用注解处理器来生成源代码则比较常用。我们以前介绍过的压力测试 jcstress，以及接下来即将介绍的 
JMH 工具，都是依赖这种方式来生成测试代码的。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> package foo; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.lang.annotation.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Target(ElementType.METHOD) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Retention(RetentionPolicy.SOURCE) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public @interface Adapt { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Class&lt;?&gt; value(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，我定义了一个注解<code>@Adapt</code>。这个注解将接收一个<code>Class</code>类型的参数<code>value</code>（如果注解类仅包含一个名为<code>value</code>的参数时，那么在使用注解时，我们可以省略<code>value=</code>），具体用法如这段代码所示。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // Bar.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> package test; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.function.IntBinaryOperator; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import foo.Adapt; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class Bar { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Adapt(IntBinaryOperator.class) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int add(int a, int b) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a + b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>接下来，我们来实现一个处理<code>@Adapt</code>注解的处理器。该处理器将生成一个新的源文件，实现参数<code>value</code>所指定的接口，并且调用至被该注解所标注的方法之中。具体的实现代码比较长，建议你在<a 
href="https://time.geekbang.org/column/108">网页端</a>观看。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
package bar; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.io.*; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.util.Set; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import javax.annotation.processing.*; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.SourceVersion; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.element.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.type.TypeMirror; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.lang.model.util.ElementFilter; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import javax.tools.JavaFileObject; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import javax.tools.Diagnostic.Kind; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@SupportedAnnotationTypes("foo.Adapt") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @SupportedSourceVersion(SourceVersion.RELEASE_10) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class AdaptProcessor extends AbstractProcessor 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public boolean process(Set&lt;? extends TypeElement&gt; annotations, 
RoundEnvironment roundEnv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (TypeElement annotation : annotations) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (!"foo.Adapt".equals(annotation.getQualifiedName().toString())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ExecutableElement targetAsKey = getExecutable(annotation, 
"value"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (ExecutableElement annotatedMethod 
: ElementFilter.methodsIn(roundEnv.getElementsAnnotatedWith(annotation))) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (!annotatedMethod.getModifiers().contains(Modifier.PUBLIC)) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> processingEnv.getMessager().printMessage(Kind.ERROR, 
"@Adapt on non-public method"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (!annotatedMethod.getModifiers().contains(Modifier.STATIC)) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // TODO support non-static methods </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> TypeElement targetInterface = getAnnotationValueAsTypeElement(annotatedMethod, 
annotation, targetAsKey); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (targetInterface.getKind() != ElementKind.INTERFACE) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> processingEnv.getMessager().printMessage(Kind.ERROR, "@Adapt with 
non-interface input"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="41"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="42"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> TypeElement enclosingType = getTopLevelEnclosingType(annotatedMethod); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> createAdapter(enclosingType, annotatedMethod, 
targetInterface); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="50"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private void createAdapter(TypeElement 
enclosingClass, ExecutableElement annotatedMethod, </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> TypeElement targetInterface) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> PackageElement packageElement = (PackageElement) enclosingClass.getEnclosingElement(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String packageName = packageElement.getQualifiedName().toString(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String className = enclosingClass.getSimpleName().toString(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String methodName = annotatedMethod.getSimpleName().toString(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String adapterName = className + "_" + 
methodName + "Adapter"; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="58"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ExecutableElement overriddenMethod = getFirstNonDefaultExecutable(targetInterface); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="62"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Filer filer = processingEnv.getFiler(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> JavaFileObject sourceFile = filer.createSourceFile(packageName + 
"." + adapterName, new Element[0]); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="65"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
try (PrintWriter out = new PrintWriter(sourceFile.openWriter())) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println("package " + packageName + 
";"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="67"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println("import 
" + targetInterface.getQualifiedName() + ";"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> out.println(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> out.println("public class " + adapterName + " implements " + targetInterface.getSimpleName() 
+ " {"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="70"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println(" 
@Override"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="71"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println(" 
public " + overriddenMethod.getReturnType() + " " + overriddenMethod.getSimpleName() </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> + formatParameter(overriddenMethod, true) 
+ " {"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="73"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println(" 
return " + className + "." + methodName + formatParameter(overriddenMethod, false) + ";"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println(" }"); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> out.println("}"); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } catch (IOException e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new RuntimeException(e); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="80"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private ExecutableElement getExecutable(TypeElement annotation, 
String methodName) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="83"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (ExecutableElement method : ElementFilter.methodsIn(annotation.getEnclosedElements())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (methodName.equals(method.getSimpleName().toString())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return method; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="88"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
processingEnv.getMessager().printMessage(Kind.ERROR, "Incompatible @Adapt."); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return null; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="92"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private ExecutableElement getFirstNonDefaultExecutable(TypeElement annotation) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (ExecutableElement method : ElementFilter.methodsIn(annotation.getEnclosedElements())) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (!method.isDefault()) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return method; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="98"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
processingEnv.getMessager().printMessage(Kind.ERROR, </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> "Target interface should declare at least one non-default method."); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return null; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="103"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private TypeElement getAnnotationValueAsTypeElement(ExecutableElement annotatedMethod, TypeElement 
annotation, </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="104"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ExecutableElement 
annotationFunction) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="105"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
TypeMirror annotationType = annotation.asType(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="107"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (AnnotationMirror annotationMirror : annotatedMethod.getAnnotationMirrors()) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (processingEnv.getTypeUtils().isSameType(annotationMirror.getAnnotationType(), 
annotationType)) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="109"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
AnnotationValue value = annotationMirror.getElementValues().get(annotationFunction); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (value == null) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> processingEnv.getMessager().printMessage(Kind.ERROR, 
"Unknown @Adapt target"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="112"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
continue; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="113"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> TypeMirror targetInterfaceTypeMirror = 
(TypeMirror) value.getValue(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="115"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return (TypeElement) processingEnv.getTypeUtils().asElement(targetInterfaceTypeMirror); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="118"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
processingEnv.getMessager().printMessage(Kind.ERROR, "@Adapt should contain target()"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return null; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="122"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private TypeElement getTopLevelEnclosingType(ExecutableElement annotatedMethod) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> TypeElement enclosingType = null; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Element enclosing = annotatedMethod.getEnclosingElement(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> while (enclosing != null) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (enclosing.getKind() == ElementKind.CLASS) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> enclosingType = (TypeElement) enclosing; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else if (enclosing.getKind() == ElementKind.PACKAGE) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> break; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="132"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
enclosing = enclosing.getEnclosingElement(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="134"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return enclosingType; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="135"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private String formatParameter(ExecutableElement method, boolean 
includeType) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="138"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
StringBuilder builder = new StringBuilder(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> builder.append(''(''); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> String separator = ""; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="142"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (VariableElement parameter : method.getParameters()) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> builder.append(separator); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (includeType) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> builder.append(parameter.asType()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> builder.append('' ''); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="148"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
builder.append(parameter.getSimpleName()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> separator = ", "; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="151"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
builder.append('')''); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="152"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return builder.toString(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="153"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="154"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在这个注解处理器实现中，我们将读取注解中的值，因此我将使用<code>process</code>方法的第一个参数，并通过它获得被标注方法对应的<code>@Adapt</code>注解中的<code>value</code>值。</p> 
<p>之所以采用这种麻烦的方式，是因为<code>value</code>值属于<code>Class</code>类型。在编译过程中，被编译代码中的<code>Class</code>常量未必被加载进 
Java 编译器所在的虚拟机中。因此，我们需要通过<code>process</code>方法的第一个参数，获得<code>value</code>所指向的接口的抽象语法树，并据此生成源代码。</p> 
<p>生成源代码的方式实际上非常容易理解。我们可以通过<code>Filer.createSourceFile</code>方法获得一个类似于文件的概念，并通过<code>PrintWriter</code>将具体的内容一一写入即可。</p> 
<p>当将该注解处理器作为插件接入 Java 编译器时，编译前面的<code>test/Bar.java</code>将生成下述代码，并且触发新一轮的编译。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
package test; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
import java.util.function.IntBinaryOperator; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Bar_addAdapter implements IntBinaryOperator { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public int applyAsInt(int arg0, int arg1) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return Bar.add(arg0, arg1); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <blockquote> <p>注意，该注解处理器没有处理所编译的代码包名为空的情况。</p> 
</blockquote> <h2>总结与实践</h2> <p>今天我介绍了 Java 编译器的注解处理器。</p> <p>注解处理器主要有三个用途。一是定义编译规则，并检查被编译的源文件。二是修改已有源代码。三是生成新的源代码。其中，第二种涉及了 
Java 编译器的内部 API，因此并不推荐。第三种较为常见，是 OpenJDK 工具 jcstress，以及 JMH 生成测试代码的方式。</p> <p>Java 源代码的编译过程可分为三个步骤，分别为解析源文件生成抽象语法树，调用已注册的注解处理器，和生成字节码。如果在第 
2 步中，注解处理器生成了新的源代码，那么 Java 编译器将重复第 1、2 步，直至不再生成新的源代码。</p> <hr> <p>今天的实践环节，请实现本文的案例<code>CheckGetterProcessor</code>中的 
TODO 项，处理由<code>@CheckGetter</code>注解的字段。</p> <p>[1] <a href="http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html">http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html</a><br> 
[2] <a href="http://hannesdorfmann.com/annotation-processing/annotationprocessing101">http://hannesdorfmann.com/annotation-processing/annotationprocessing101</a><br> 
[3] <a href="https://docs.oracle.com/javase/10/docs/api/javax/lang/model/element/package-summary.html">https://docs.oracle.com/javase/10/docs/api/javax/lang/model/element/package-summary.html</a><br> 
[4] <a href="https://projectlombok.org/">https://projectlombok.org/</a><br> [5] <a href="http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html">http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html</a><br> 
[6] <a href="http://jnb.ociweb.com/jnb/jnbJan2010.html#controversy">http://jnb.ociweb.com/jnb/jnbJan2010.html#controversy</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 19 msec}
2020-11-19 20:10:06.994 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=15 
 {executed in 1 msec}
2020-11-19 20:10:06.996 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:07.001 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=15 
 {executed in 2 msec}
2020-11-19 20:10:07.003 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:10:07.009 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787806, 1605787806, 1, 'zh-hans', 0, 1, 1, 
0, '27丨注解处理器', 1, 15, 15) 
 {executed in 1 msec}
2020-11-19 20:10:07.017 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=15 
 {executed in 2 msec}
2020-11-19 20:10:07.019 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:07.026 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787806, 1605787806, 1, 'zh-hans', 0, 
1, 1, 0, '27丨注解处理器', 'book', 1, 15, 15) 
 {executed in 1 msec}
2020-11-19 20:10:07.035 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=15 
 {executed in 2 msec}
2020-11-19 20:10:07.038 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:07.042 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=15 
 {executed in 2 msec}
2020-11-19 20:10:07.043 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:07.052 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cbc810435d0429c8c6db3867e52f3fdd?bkt=en-24c643f198a62f8812ccefc7591a176184c1a3373d62f6d6ac977b72e2a05ff54fe669fee549ec3c&fid=3757516097-778750-1031262175866033&time=1605787805&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lDjKap%2FYT6MkE%2BhmzQs6Ak0CADg%3D&to=92&size=5510026&sta_dx=5510026&sta_cs=4331&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182973&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5510026&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f06277e0d706facc5d18911ef7f7f3656d2c21a5e5f2d798b5352a96466c0a3f043a8a09d51b601d&sl=76480590&expires=8h&rt=pr&r=957710093&mlogid=7510771741993470238&vbdid=64799653&fin=27%E4%B8%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8.mp3&bflag=92,34-92&rtype=1&dp-logid=7510771741993470238&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b53d514c89c99e3c6d90941ee3f197aa1&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=27%E4%B8%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8.mp3', 
15, 15) 
 {executed in 3 msec}
2020-11-19 20:10:07.062 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 20:10:07.064 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:07.073 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cbc810435d0429c8c6db3867e52f3fdd?bkt=en-24c643f198a62f8812ccefc7591a176184c1a3373d62f6d6ac977b72e2a05ff54fe669fee549ec3c&fid=3757516097-778750-1031262175866033&time=1605787805&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lDjKap%2FYT6MkE%2BhmzQs6Ak0CADg%3D&to=92&size=5510026&sta_dx=5510026&sta_cs=4331&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182973&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5510026&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f06277e0d706facc5d18911ef7f7f3656d2c21a5e5f2d798b5352a96466c0a3f043a8a09d51b601d&sl=76480590&expires=8h&rt=pr&r=957710093&mlogid=7510771741993470238&vbdid=64799653&fin=27%E4%B8%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8.mp3&bflag=92,34-92&rtype=1&dp-logid=7510771741993470238&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b53d514c89c99e3c6d90941ee3f197aa1&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=27%E4%B8%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8.mp3', 
15, 15) 
 {executed in 3 msec}
2020-11-19 20:10:07.111 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 20:10:07.112 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:07.119 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=15 
 {executed in 3 msec}
2020-11-19 20:10:07.121 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:07.141 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/d8/baf0dea1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>聚变</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 编译时生成与 运行时使用cglib等类库生成的字节码,在性能和使用场景上有什么区别吗?? 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Cglib等字节码工具会影响启动性能，峰值性能上没啥区别。<br><br>如果对字节码不熟的话，用注解处理器比较容易些。另一方面，字节码处理工具更强大些，能做很多源代码不能做的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/52/53/a30b1eb2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lovedebug</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 讲的很好，赞。结合java语法看印象更深 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>奇奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
老师，这个 ExecutableElement targetAsKey = getExecutable(annotation, "value"); 这一句是干嘛的，我看语义是找出所有名字是value的方法？难道不应该找的是value所指向的类吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> spring中的那些注解也是通过注解处理器实现的吗。我们项目中一般好像都是通过spring的aop来实现自定义注解的功能。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 嗯，之前写过注解方面的功能，不过虽然能自定义注解，也能明白Java语言层面的有关注解相关的知识点，但是往下怎么样就不太清楚了？ 
<br>注解代码本质也是代码，也会被编译为.class文件，然后在JVM上面被转换成机器码，然后被计算机执行，不过感觉他好特别，他的存在仅是为了是编码更简洁吗？ <br>读之前我就在想上面的问题，文中虽然没有介绍这些内容，不过介绍了其他的内容也挺好！ 
<br> <br>小结一下： <br>1：注解处理器-本质也是代码，以插件的形式存在，以插件的形式接入Java编译器，这些插件有什么用呢？ <br> <br>2：注解处理器的作用？ 
<br>注解处理器有三个作用 <br>2-1：可以为Java编译器添加一些编译规则，这也就是传说中的自定义注解，它可以定义一些编译规则，这些编译规则会以插件的形式提供给Java编译器。 
<br>2-2：可以修改已有的JAVA源文件（不推荐，为什么呢？因为本质上注解处理器不能修改已有的JAVA源代码，但是它可以修改有java源代码生成的抽象语法树，从而使生成的字节码发生变化，不过对抽象语法树的修改修改设计了java编译器的内部API，这部分很可能随着版本的变更而失效，所以，才不推荐使用的，存在埋深坑的隐患。） 
<br>2-3：可以生成一些新的JAVA源文件 <br> <br>3：元注解-给注解使用的注解就是元注解，这些注解是JDK的开发人员提前定义了的，也同样是以插件的形式接入Java编译器的。注意：所有的注解处理器都必须实现Processor接口，这个接口中有四个方法，每个方法都有其特殊的作用在，详情需要回头细看。另外，JDK提供了一个实现Processor接口的抽象类AbstractProcessor，这个抽象类实现了Processor接口的其中三个方法。 
<br> <br>4：自定义的注解被编译为.class文件后，便可以将其注册为Java编译器的插件了，注册方法有两种，祥看专栏内容吧！ <br> <br>5：Java源代码的编译过程分为三个步骤 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-1：解析源文件生成抽象语法树 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-2：调用已注册的注解处理器（注解处理器有两种注册到JAVA编译器的方式） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-3：生成字节码 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-4：如果5-2步中，注解处理器生成了新的源代码，那么JAVA编译器将重复第5-1/5-2步，直到不再生成新的源代码。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 注解相当于给某些代码贴了个标签。我们既可以通过注解处理器在编译时解析这些标签，也可以在运行时通过反射解析这些标签。解析后都会有一系列动作，这些动作就是对标签语义的诠释。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/07/8c/51401220.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小美</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师 有个问题我一直想不明白?java 源码生成语法树 java APT 处理器处理后生成代码， 
从新走那个过程 有重复生成了 那不是死循环了吗？可能是自己知识浅薄 麻烦在这点上正老师能指点下☺️ 自己水平比较low 模仿了写一直没成功☺️ 不知道郑老师能发一个demo 工程吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Egos</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 问一下RetentionPolicy.CLASS 的使用场景。有一些用来生成Java 
文件的注解是可以使用SOURCE的，但是用了CLASS。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/29/b5/2b477ed4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>补心</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Lombok随着Java版本的问题，是不是有可能没法使用。 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 有可能，因为用的是internal API。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/42/76/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>松花皮蛋me</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 反射在运行时，注解解释器在编译时 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>孜孜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> @Getter 和例子自己定义的@CheckGetter 一起使用，@CheckGetter先生效。有点搞不明白Lombok和自己定义的执行顺序。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金龟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> CheckGetterProcessor这个是怎么用的？？我感觉我没有运行起来一个类里没有getter方法，我一样能够编译通过。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>山顶的洞</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 自定义注解都是aop实现的吗？好像没看到过注解处理器。 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/21/08/94d145c1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lewis</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师你好，我在使用Annotation Processor过程中，遇到了一个问题，比如某个Element是一个方法，我想获取这个方法的返回值类型，当这个返回值是泛型的时候，无法获取全路径的类型；比如返回值是自定义类型com.xxx.module.domain.UserInfo这个类型，通过下面的语句只能知道返回值是字面量UserInfo,而不是com.xxx.module.domain.UserInfo这个全路径类型 
。 <br>&nbsp;ExecutableElement methodElement = ExecutableElement.class.cast(element); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeMirror 
returnType = methodElement.getReturnType(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeName 
returnTypeName = ClassName.get(returnType); <br>这个returnTypeName只是UserInfo,不是com.xxx.module.domain.UserInfo，拿不到UserInfo的包路径信息，通过messager提示说是找不到com.xxx.module.domain这个包，请老师指导 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f5/31/350ed5ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>蒋宏飞</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 不错哦 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 14 msec}
2020-11-19 20:10:07.153 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=15 
 {executed in 3 msec}
2020-11-19 20:10:07.155 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:07.168 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/d8/baf0dea1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>聚变</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 编译时生成与 运行时使用cglib等类库生成的字节码,在性能和使用场景上有什么区别吗?? 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Cglib等字节码工具会影响启动性能，峰值性能上没啥区别。<br><br>如果对字节码不熟的话，用注解处理器比较容易些。另一方面，字节码处理工具更强大些，能做很多源代码不能做的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/52/53/a30b1eb2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lovedebug</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 讲的很好，赞。结合java语法看印象更深 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>奇奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
老师，这个 ExecutableElement targetAsKey = getExecutable(annotation, "value"); 这一句是干嘛的，我看语义是找出所有名字是value的方法？难道不应该找的是value所指向的类吗？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> spring中的那些注解也是通过注解处理器实现的吗。我们项目中一般好像都是通过spring的aop来实现自定义注解的功能。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-24 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 嗯，之前写过注解方面的功能，不过虽然能自定义注解，也能明白Java语言层面的有关注解相关的知识点，但是往下怎么样就不太清楚了？ 
<br>注解代码本质也是代码，也会被编译为.class文件，然后在JVM上面被转换成机器码，然后被计算机执行，不过感觉他好特别，他的存在仅是为了是编码更简洁吗？ <br>读之前我就在想上面的问题，文中虽然没有介绍这些内容，不过介绍了其他的内容也挺好！ 
<br> <br>小结一下： <br>1：注解处理器-本质也是代码，以插件的形式存在，以插件的形式接入Java编译器，这些插件有什么用呢？ <br> <br>2：注解处理器的作用？ 
<br>注解处理器有三个作用 <br>2-1：可以为Java编译器添加一些编译规则，这也就是传说中的自定义注解，它可以定义一些编译规则，这些编译规则会以插件的形式提供给Java编译器。 
<br>2-2：可以修改已有的JAVA源文件（不推荐，为什么呢？因为本质上注解处理器不能修改已有的JAVA源代码，但是它可以修改有java源代码生成的抽象语法树，从而使生成的字节码发生变化，不过对抽象语法树的修改修改设计了java编译器的内部API，这部分很可能随着版本的变更而失效，所以，才不推荐使用的，存在埋深坑的隐患。） 
<br>2-3：可以生成一些新的JAVA源文件 <br> <br>3：元注解-给注解使用的注解就是元注解，这些注解是JDK的开发人员提前定义了的，也同样是以插件的形式接入Java编译器的。注意：所有的注解处理器都必须实现Processor接口，这个接口中有四个方法，每个方法都有其特殊的作用在，详情需要回头细看。另外，JDK提供了一个实现Processor接口的抽象类AbstractProcessor，这个抽象类实现了Processor接口的其中三个方法。 
<br> <br>4：自定义的注解被编译为.class文件后，便可以将其注册为Java编译器的插件了，注册方法有两种，祥看专栏内容吧！ <br> <br>5：Java源代码的编译过程分为三个步骤 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-1：解析源文件生成抽象语法树 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-2：调用已注册的注解处理器（注解处理器有两种注册到JAVA编译器的方式） 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-3：生成字节码 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-4：如果5-2步中，注解处理器生成了新的源代码，那么JAVA编译器将重复第5-1/5-2步，直到不再生成新的源代码。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 注解相当于给某些代码贴了个标签。我们既可以通过注解处理器在编译时解析这些标签，也可以在运行时通过反射解析这些标签。解析后都会有一系列动作，这些动作就是对标签语义的诠释。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/07/8c/51401220.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小美</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 郑老师 有个问题我一直想不明白?java 源码生成语法树 java APT 处理器处理后生成代码， 
从新走那个过程 有重复生成了 那不是死循环了吗？可能是自己知识浅薄 麻烦在这点上正老师能指点下☺️ 自己水平比较low 模仿了写一直没成功☺️ 不知道郑老师能发一个demo 工程吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Egos</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 问一下RetentionPolicy.CLASS 的使用场景。有一些用来生成Java 
文件的注解是可以使用SOURCE的，但是用了CLASS。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/29/b5/2b477ed4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>补心</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-21 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Lombok随着Java版本的问题，是不是有可能没法使用。 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 有可能，因为用的是internal API。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/42/76/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>松花皮蛋me</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-16 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 反射在运行时，注解解释器在编译时 </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>孜孜</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> @Getter 和例子自己定义的@CheckGetter 一起使用，@CheckGetter先生效。有点搞不明白Lombok和自己定义的执行顺序。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金龟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> CheckGetterProcessor这个是怎么用的？？我感觉我没有运行起来一个类里没有getter方法，我一样能够编译通过。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>山顶的洞</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-02 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 自定义注解都是aop实现的吗？好像没看到过注解处理器。 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/21/08/94d145c1.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lewis</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-04 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师你好，我在使用Annotation Processor过程中，遇到了一个问题，比如某个Element是一个方法，我想获取这个方法的返回值类型，当这个返回值是泛型的时候，无法获取全路径的类型；比如返回值是自定义类型com.xxx.module.domain.UserInfo这个类型，通过下面的语句只能知道返回值是字面量UserInfo,而不是com.xxx.module.domain.UserInfo这个全路径类型 
。 <br>&nbsp;ExecutableElement methodElement = ExecutableElement.class.cast(element); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeMirror 
returnType = methodElement.getReturnType(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeName 
returnTypeName = ClassName.get(returnType); <br>这个returnTypeName只是UserInfo,不是com.xxx.module.domain.UserInfo，拿不到UserInfo的包路径信息，通过messager提示说是找不到com.xxx.module.domain这个包，请老师指导 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f5/31/350ed5ef.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>蒋宏飞</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 不错哦 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 7 msec}
2020-11-19 20:10:07.179 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 20:10:07.181 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:07.185 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 20:10:07.187 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:07.192 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 15, 'https://static001.geekbang.org/resource/image/79/a4/79da108fb878cbf9d0d472fcc567f4a4.jpg', 
15) 
 {executed in 1 msec}
2020-11-19 20:10:07.202 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=15 
 {executed in 3 msec}
2020-11-19 20:10:07.203 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:07.210 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 15, 'https://static001.geekbang.org/resource/image/79/a4/79da108fb878cbf9d0d472fcc567f4a4.jpg', 
15) 
 {executed in 1 msec}
2020-11-19 20:10:07.218 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=15 
 {executed in 2 msec}
2020-11-19 20:10:07.220 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:07.226 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 15, 15) 
 {executed in 1 msec}
2020-11-19 20:10:07.236 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=15 
 {executed in 3 msec}
2020-11-19 20:10:07.237 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:07.244 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 15, 15) 
 {executed in 2 msec}
2020-11-19 20:10:07.251 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='436541648193495' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:10:07.253 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:24.539 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='436541648193495' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:10:24.541 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:24.544 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('436541648193495', 1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:10:24.546 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('436541648193495', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:10:24.547 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|35            |
|--------------|

2020-11-19 20:10:24.559 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='436541648193495' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:10:24.560 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:25.230 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='436541648193495' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:10:25.231 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:25.234 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('436541648193495', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:10:25.236 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('436541648193495', 
1, 'media') 
 {executed in 1 msec}
2020-11-19 20:10:25.237 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|36            |
|--------------|

2020-11-19 20:10:25.299 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='436541648193495' 
 {executed in 1 msec}
2020-11-19 20:10:25.300 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:25.304 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787825, 1) 
 {executed in 1 msec}
2020-11-19 20:10:25.306 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787825, 1) 
 {executed in 1 msec}
2020-11-19 20:10:25.307 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|16            |
|--------------|

2020-11-19 20:10:25.317 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '02f6e77d-9056-4de0-9fef-a68419d6b781', 
16) 
 {executed in 1 msec}
2020-11-19 20:10:25.318 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '02f6e77d-9056-4de0-9fef-a68419d6b781', 16) 
 {executed in 0 msec}
2020-11-19 20:10:25.320 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|16            |
|--------------|

2020-11-19 20:10:25.332 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=16, revision_default=1, revision_timestamp=1605787825, 
revision_uid=1 where vid=16 
 {executed in 1 msec}
2020-11-19 20:10:25.340 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.341 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:25.347 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '436541648193495', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.354 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:25.361 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '436541648193495', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.367 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=16 
 {executed in 1 msec}
2020-11-19 20:10:25.369 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:10:25.374 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=16 
 {executed in 1 msec}
2020-11-19 20:10:25.376 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:10:25.382 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 8, 16, 0, 0, 8, 0, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.390 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.392 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:25.396 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 20:10:25.398 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:25.418 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在上一篇的实践环节中，我给你留了一个题目：如何进一步优化下面这段代码。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+1] = src[i+1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+2] = src[i+2]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+3] = src[i+3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>由于 X86_64 平台不支持内存间的直接移动，上面代码中的<code>dst[i] 
= src[i]</code>通常会被编译为两条内存访问指令：第一条指令把<code>src[i]</code>的值读取至寄存器中，而第二条指令则把寄存器中的值写入至<code>dst[i]</code>中。</p> 
<p>因此，上面这段代码中的一个循环迭代将会执行四条内存读取指令，以及四条内存写入指令。</p> <p>由于数组元素在内存中是连续的，当从<code>src[i]</code>的内存地址处读取 
32 位的内容时，我们将一并读取<code>src[i]</code>至<code>src[i+3]</code>的值。同样，当向<code>dst[i]</code>的内存地址处写入 
32 位的内容时，我们将一并写入<code>dst[i]</code>至<code>dst[i+3]</code>的值。</p> <p>通过综合这两个批量操作，我们可以使用一条内存读取指令以及一条内存写入指令，完成上面代码中循环体内的全部工作。如果我们用<code>x[i:i+3]</code>来指代<code>x[i]</code>至<code>x[i+3]</code>合并后的值，那么上述优化可以被表述成如下所示的代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i:i+3] = src[i:i+3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>SIMD 指令</h2> <p>在前面的示例中，我们使用的是 byte 数组，四个数组元素并起来也才 
4 个字节。如果换成 int 数组，或者 long 数组，那么四个数组元素并起来将会是 16 字节或 32 字节。</p><!-- [[[read_end]]] --> <p>我们知道，X86_64 
体系架构上通用寄存器的大小为 64 位（即 8 个字节），无法暂存这些超长的数据。因此，即时编译器将借助长度足够的 XMM 寄存器，来完成 int 数组与 long 数组的向量化读取和写入操作。（为了实现方便，byte 
数组的向量化读取、写入操作同样使用了 XMM 寄存器。）</p> <p>所谓的 XMM 寄存器，是由 SSE（Streaming SIMD Extensions）指令集所引入的。它们一开始仅为 
128 位。自从 X86 平台上的 CPU 开始支持 AVX（Advanced Vector Extensions）指令集后（2011 年），XMM 寄存器便升级为 256 位，并更名为 
YMM 寄存器。原本使用 XMM 寄存器的指令，现将使用 YMM 寄存器的低 128 位。</p> <p>前几年推出的 AVX512 指令集，更是将 YMM 寄存器升级至 512 位，并更名为 
ZMM 寄存器。HotSpot 虚拟机也紧跟时代，更新了不少基于 AVX512 指令集以及 ZMM 寄存器的优化。不过，支持 AVX512 指令集的 CPU 都比较贵，目前在生产环境中很少见到。</p> 
<p><img src="https://static001.geekbang.org/resource/image/56/f2/56cb8c99ce8a80d1c510ef50122616f2.png" 
alt=""></p> <p>SSE 指令集以及之后的 AVX 指令集都涉及了一个重要的概念，那便是单指令流多数据流（Single Instruction Multiple Data，SIMD），即通过单条指令操控多组数据的计算操作。这些指令我们称之为 
SIMD 指令。</p> <p>SIMD 指令将 XMM 寄存器（或 YMM 寄存器、ZMM 寄存器）中的值看成多个整数或者浮点数组成的向量，并且批量进行计算。</p> <p><img 
src="https://static001.geekbang.org/resource/image/8a/cf/8ad6be0e44c4f14b45c7c8c4cf6eabcf.png" 
alt=""></p> <p>举例来说，128 位 XMM 寄存器里的值可以看成 16 个 byte 值组成的向量，或者 8 个 short 值组成的向量，4 个 int 值组成的向量，两个 
long 值组成的向量；而 SIMD 指令<code>PADDB</code>、<code>PADDW</code>、<code>PADDD</code>以及<code>PADDQ</code>，将分别实现 
byte 值、short 值、int 值或者 long 值的向量加法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void foo(int[] a, int[] b, int[] c) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; c.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码经过向量化优化之后，将使用<code>PADDD</code>指令来实现<code>c[i:i+3] 
= a[i:i+3] + b[i:i+3]</code>。其执行过程中的数据流如下图所示，图片源自 Vladimir Ivanov 的演讲 [1]。下图中内存的右边是高位，寄存器的左边是高位，因此数组元素的顺序是反过来的。</p> 
<p><img src="https://static001.geekbang.org/resource/image/d6/40/d61b5f38e3736acf3447412888a32b40.png" 
alt=""></p> <p>也就是说，原本需要<code>c.length</code>次加法操作的代码，现在最少只需要<code>c.length/4</code>次向量加法即可完成。因此，SIMD 
指令也被看成 CPU 指令级别的并行。</p> <blockquote> <p>这里<code>c.length/4</code>次是理论值。现实中，C2 还将考虑缓存行对齐等因素，导致能够应用向量化加法的仅有数组中间的部分元素。</p> 
</blockquote> <h2>使用 SIMD 指令的 HotSpot Intrinsic</h2> <p>SIMD 指令虽然非常高效，但是使用起来却很麻烦。这主要是因为不同的 
CPU 所支持的 SIMD 指令可能不同。一般来说，越新的 SIMD 指令，它所支持的寄存器长度越大，功能也越强。</p> <blockquote> <p>目前几乎所有的 X86_64 
平台上的 CPU 都支持 SSE 指令集，绝大部分支持 AVX 指令集，三四年前量产的 CPU 支持 AVX2 指令集，最近少数服务器端 CPU 支持 AVX512 指令集。AVX512 
指令集的提升巨大，因为它不仅将寄存器长度增大至 512 字节，而且引入了非常多的新指令。</p> </blockquote> <p>为了能够尽量利用新的 SIMD 指令，我们需要提前知道程序会被运行在支持哪些指令集的 
CPU 上，并在编译过程中选择所支持的 SIMD 指令中最新的那些。</p> <p>或者，我们可以在编译结果中纳入同一段代码的不同版本，每个版本使用不同的 SIMD 指令。在运行过程中，程序将根据 
CPU 所支持的指令集，来选择执行哪一个版本。</p> <blockquote> <p>虽然程序中包含当前 CPU 可能不支持的指令，但是只要不执行到这些指令，程序便不会出问题。如果不小心执行到这些不支持的指令，CPU 
会触发一个中断，并向当前进程发出<code>sigill</code>信号。</p> </blockquote> <p>不过，这对于使用即时编译技术的 Java 虚拟机来说，并不是一个大问题。</p> 
<p>我们知道，Java 虚拟机所执行的 Java 字节码是平台无关的。它首先会被解释执行，而后反复执行的部分才会被 Java 虚拟机即时编译为机器码。换句话说，在进行即时编译的时候，Java 
虚拟机已经运行在目标 CPU 之上，可以轻易地得知其所支持的指令集。</p> <p>然而，Java 字节码的平台无关性却引发了另一个问题，那便是 Java 程序无法像 C++ 程序那样，直接使用由 
Intel 提供的，将被替换为具体 SIMD 指令的 intrinsic 方法 [2]。</p> <p>HotSpot 虚拟机提供的替代方案是 Java 层面的 intrinsic 
方法，这些 intrinsic 方法的语义要比单个 SIMD 指令复杂得多。在运行过程中，HotSpot 虚拟机将根据当前体系架构来决定是否将对该 intrinsic 方法的调用替换为另一高效的实现。如果不，则使用原本的 
Java 实现。</p> <p>举个例子，Java 8 中<code>Arrays.equals(int[], int[])</code>的实现将逐个比较 int 数组中的元素。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static boolean equals(int[] a, int[] a2) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a==a2) </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return true; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a==null || a2==null) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int length = a.length; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a2.length != length) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 关键循环 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i=0; i&lt;length; i++) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a[i] != a2[i]) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>对应的 intrinsic 高效实现会将数组的多个元素加载至 XMM/YMM/ZMM 寄存器中，然后进行按位比较。如果两个数组相同，那么其中若干个元素合并而成的值也相同，其按位比较也应成功。反过来，如果按位比较失败，则说明两个数组不同。</p> 
<p>使用 SIMD 指令的 HotSpot intrinsic 是虚拟机开发人员根据其语义定制的，因而性能相当优越。</p> <p>不过，由于开发成本及维护成本较高，这种类型的 intrinsic 
屈指可数，如用于复制数组的<code>System.arraycopy</code>和<code>Arrays.copyOf</code>，用于比较数组的<code>Arrays.equals</code>，以及 
Java 9 新加入的<code>Arrays.compare</code>和<code>Arrays.mismatch</code>，以及字符串相关的一些方法<code>String.indexOf</code>、<code>StringLatin1.inflate</code>。</p> 
<blockquote> <p><code>Arrays.copyOf</code>将调用<code>System.arraycopy</code>，实际上只有后者是 intrinsic。在 
Java 9 之后，数组比较真正的 intrinsic 是<code>ArraySupports.vectorizedMismatch</code>方法，而<code>Arrays.equals</code>、<code>Arrays.compare</code>和<code>Arrays.mismatch</code>将调用至该方法中。</p> 
</blockquote> <p>另外，这些 intrinsic 方法只能做到点覆盖，在不少情况下，应用程序并不会用到这些 intrinsic 的语义，却又存在向量化优化的机会。这个时候，我们便需要借助即时编译器中的自动向量化（auto 
vectorization）。</p> <h2>自动向量化</h2> <p>即时编译器的自动向量化将针对能够展开的计数循环，进行向量化优化。如前面介绍过的这段代码，即时编译器便能够自动将其展开优化成使用<code>PADDD</code>指令的向量加法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(int[] a, int[] b, int[] c) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; c.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>关于计数循环的判定，我在上一篇介绍循环优化时已经讲解过了，这里我补充几点自动向量化的条件。</p> 
<ol> <li>循环变量的增量应为 1，即能够遍历整个数组。</li> <li>循环变量不能为 long 类型，否则 C2 无法将循环识别为计数循环。</li> <li>循环迭代之间最好不要有数据依赖，例如出现类似于<code>a[i] 
= a[i-1]</code>的语句。当循环展开之后，循环体内存在数据依赖，那么 C2 无法进行自动向量化。</li> <li>循环体内不要有分支跳转。</li> <li>不要手工进行循环展开。如果 
C2 无法自动展开，那么它也将无法进行自动向量化。</li> </ol> <p>我们可以看到，自动向量化的条件较为苛刻。而且，C2 支持的整数向量化操作并不多，据我所致只有向量加法，向量减法，按位与、或、异或，以及批量移位和批量乘法。C2 
还支持向量点积的自动向量化，即两两相乘再求和，不过这需要多条 SIMD 指令才能完成，因此并不是十分高效。</p> <p>为了解决向量化 intrinsic 以及自动向量化覆盖面过窄的问题，我们在 
OpenJDK 的 Paname 项目 [3] 中尝试引入开发人员可控的向量化抽象。</p> <p>该抽象将提供一套通用的跨平台 API，让 Java 程序能够定义诸如<code>IntVector&lt;S256Bits&gt;</code>的向量，并使用由它提供的一系列向量化 
intrinsic 方法。即时编译器负责将这些 intrinsic 的调用转换为符合当前体系架构 /CPU 的 SIMD 指令。如果你感兴趣的话，可以参考 Vladimir Ivanov 
今年在 JVMLS 上的演讲 [4]。</p> <h2>总结与实践</h2> <p>今天我介绍了即时编译器中的向量化优化。</p> <p>向量化优化借助的是 CPU 的 SIMD 指令，即通过单条指令控制多组数据的运算。它被称为 
CPU 指令级别的并行。</p> <p>HotSpot 虚拟机运用向量化优化的方式有两种。第一种是使用 HotSpot intrinsic，在调用特定方法的时候替换为使用了 SIMD 
指令的高效实现。Intrinsic 属于点覆盖，只有当应用程序明确需要这些 intrinsic 的语义，才能够获得由它带来的性能提升。</p> <p>第二种是依赖即时编译器进行自动向量化，在循环展开优化之后将不同迭代的运算合并为向量运算。自动向量化的触发条件较为苛刻，因此也无法覆盖大多数用例。</p> 
<hr> <p>今天的实践环节，我们来观察一下即时编译器的自动向量化的自适配性。</p> <p>在支持 256 位 YMM 寄存器的机器上，C2 会根据循环回边的执行次数以及方法的执行次数来推测每个循环的次数。如果超过一定值，C2 
会采用基于 256 位 YMM 寄存器的指令，相比起基于 128 位 XMM 寄存器的指令而言，单指令能处理的数据翻了一倍。</p> <p>请采用 Java 9 以上的版本运行下述代码。（Java 
8 始终采用基于 128 位 XMM 寄存器指令的 Bug 可能仍未修复。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run with </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:CompileCommand=''dontinline 
VectorizationTest.foo'' -XX:CompileCommand=''print VectorizationTest.foo'' -XX:-TieredCompilation 
VectorizationTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class VectorizationTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static void foo(int[] a, int[] b, int[] c) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws InterruptedException { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int[] a = new int[] { 1, 2, 3, 4, 5, 6, 
7, 8, 1, 2, 3, 4, 5, 6, 7, 8 }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int[] c = new int[16]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 20_000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> foo(a, a, c); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>输出将包含如下机器码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011ce7c650: vmovdqu xmm0,XMMWORD PTR [rdx+rbx*4+0x10] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011ce7c656: vpaddd xmm0,xmm0,XMMWORD 
PTR [rsi+rbx*4+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000011ce7c65c: vmovdqu XMMWORD PTR [rcx+rbx*4+0x10],xmm0 </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果替换为：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] a = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 
7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8 }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] c = new int[32]; </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>输出将包含如下机器码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000010ff04d9c: vmovdqu ymm0,YMMWORD PTR [rdx+rbx*4+0x10] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000010ff04da2: vpaddd ymm0,ymm0,YMMWORD 
PTR [rsi+rbx*4+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000010ff04da8: vmovdqu YMMWORD PTR [rcx+rbx*4+0x10],ymm0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
--- </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>你可以将<code>foo</code>方法更改为下述代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static void foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 4; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a[i] = a[i - 4]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>重复上述实验，看看会发生什么。</p> <p>[1] <a href="http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf">http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf</a><br> 
[2] <a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/">https://software.intel.com/sites/landingpage/IntrinsicsGuide/</a><br> 
[3] <a href="http://openjdk.java.net/projects/panama/">http://openjdk.java.net/projects/panama/</a><br> 
[4]: <a href="http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf">http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf</a><br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 11 msec}
2020-11-19 20:10:25.429 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.431 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:25.449 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在上一篇的实践环节中，我给你留了一个题目：如何进一步优化下面这段代码。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+1] = src[i+1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+2] = src[i+2]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i+3] = src[i+3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>由于 X86_64 平台不支持内存间的直接移动，上面代码中的<code>dst[i] 
= src[i]</code>通常会被编译为两条内存访问指令：第一条指令把<code>src[i]</code>的值读取至寄存器中，而第二条指令则把寄存器中的值写入至<code>dst[i]</code>中。</p> 
<p>因此，上面这段代码中的一个循环迭代将会执行四条内存读取指令，以及四条内存写入指令。</p> <p>由于数组元素在内存中是连续的，当从<code>src[i]</code>的内存地址处读取 
32 位的内容时，我们将一并读取<code>src[i]</code>至<code>src[i+3]</code>的值。同样，当向<code>dst[i]</code>的内存地址处写入 
32 位的内容时，我们将一并写入<code>dst[i]</code>至<code>dst[i+3]</code>的值。</p> <p>通过综合这两个批量操作，我们可以使用一条内存读取指令以及一条内存写入指令，完成上面代码中循环体内的全部工作。如果我们用<code>x[i:i+3]</code>来指代<code>x[i]</code>至<code>x[i+3]</code>合并后的值，那么上述优化可以被表述成如下所示的代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i:i+3] = src[i:i+3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>SIMD 指令</h2> <p>在前面的示例中，我们使用的是 byte 数组，四个数组元素并起来也才 
4 个字节。如果换成 int 数组，或者 long 数组，那么四个数组元素并起来将会是 16 字节或 32 字节。</p><!-- [[[read_end]]] --> <p>我们知道，X86_64 
体系架构上通用寄存器的大小为 64 位（即 8 个字节），无法暂存这些超长的数据。因此，即时编译器将借助长度足够的 XMM 寄存器，来完成 int 数组与 long 数组的向量化读取和写入操作。（为了实现方便，byte 
数组的向量化读取、写入操作同样使用了 XMM 寄存器。）</p> <p>所谓的 XMM 寄存器，是由 SSE（Streaming SIMD Extensions）指令集所引入的。它们一开始仅为 
128 位。自从 X86 平台上的 CPU 开始支持 AVX（Advanced Vector Extensions）指令集后（2011 年），XMM 寄存器便升级为 256 位，并更名为 
YMM 寄存器。原本使用 XMM 寄存器的指令，现将使用 YMM 寄存器的低 128 位。</p> <p>前几年推出的 AVX512 指令集，更是将 YMM 寄存器升级至 512 位，并更名为 
ZMM 寄存器。HotSpot 虚拟机也紧跟时代，更新了不少基于 AVX512 指令集以及 ZMM 寄存器的优化。不过，支持 AVX512 指令集的 CPU 都比较贵，目前在生产环境中很少见到。</p> 
<p><img src="https://static001.geekbang.org/resource/image/56/f2/56cb8c99ce8a80d1c510ef50122616f2.png" 
alt=""></p> <p>SSE 指令集以及之后的 AVX 指令集都涉及了一个重要的概念，那便是单指令流多数据流（Single Instruction Multiple Data，SIMD），即通过单条指令操控多组数据的计算操作。这些指令我们称之为 
SIMD 指令。</p> <p>SIMD 指令将 XMM 寄存器（或 YMM 寄存器、ZMM 寄存器）中的值看成多个整数或者浮点数组成的向量，并且批量进行计算。</p> <p><img 
src="https://static001.geekbang.org/resource/image/8a/cf/8ad6be0e44c4f14b45c7c8c4cf6eabcf.png" 
alt=""></p> <p>举例来说，128 位 XMM 寄存器里的值可以看成 16 个 byte 值组成的向量，或者 8 个 short 值组成的向量，4 个 int 值组成的向量，两个 
long 值组成的向量；而 SIMD 指令<code>PADDB</code>、<code>PADDW</code>、<code>PADDD</code>以及<code>PADDQ</code>，将分别实现 
byte 值、short 值、int 值或者 long 值的向量加法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void foo(int[] a, int[] b, int[] c) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; c.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码经过向量化优化之后，将使用<code>PADDD</code>指令来实现<code>c[i:i+3] 
= a[i:i+3] + b[i:i+3]</code>。其执行过程中的数据流如下图所示，图片源自 Vladimir Ivanov 的演讲 [1]。下图中内存的右边是高位，寄存器的左边是高位，因此数组元素的顺序是反过来的。</p> 
<p><img src="https://static001.geekbang.org/resource/image/d6/40/d61b5f38e3736acf3447412888a32b40.png" 
alt=""></p> <p>也就是说，原本需要<code>c.length</code>次加法操作的代码，现在最少只需要<code>c.length/4</code>次向量加法即可完成。因此，SIMD 
指令也被看成 CPU 指令级别的并行。</p> <blockquote> <p>这里<code>c.length/4</code>次是理论值。现实中，C2 还将考虑缓存行对齐等因素，导致能够应用向量化加法的仅有数组中间的部分元素。</p> 
</blockquote> <h2>使用 SIMD 指令的 HotSpot Intrinsic</h2> <p>SIMD 指令虽然非常高效，但是使用起来却很麻烦。这主要是因为不同的 
CPU 所支持的 SIMD 指令可能不同。一般来说，越新的 SIMD 指令，它所支持的寄存器长度越大，功能也越强。</p> <blockquote> <p>目前几乎所有的 X86_64 
平台上的 CPU 都支持 SSE 指令集，绝大部分支持 AVX 指令集，三四年前量产的 CPU 支持 AVX2 指令集，最近少数服务器端 CPU 支持 AVX512 指令集。AVX512 
指令集的提升巨大，因为它不仅将寄存器长度增大至 512 字节，而且引入了非常多的新指令。</p> </blockquote> <p>为了能够尽量利用新的 SIMD 指令，我们需要提前知道程序会被运行在支持哪些指令集的 
CPU 上，并在编译过程中选择所支持的 SIMD 指令中最新的那些。</p> <p>或者，我们可以在编译结果中纳入同一段代码的不同版本，每个版本使用不同的 SIMD 指令。在运行过程中，程序将根据 
CPU 所支持的指令集，来选择执行哪一个版本。</p> <blockquote> <p>虽然程序中包含当前 CPU 可能不支持的指令，但是只要不执行到这些指令，程序便不会出问题。如果不小心执行到这些不支持的指令，CPU 
会触发一个中断，并向当前进程发出<code>sigill</code>信号。</p> </blockquote> <p>不过，这对于使用即时编译技术的 Java 虚拟机来说，并不是一个大问题。</p> 
<p>我们知道，Java 虚拟机所执行的 Java 字节码是平台无关的。它首先会被解释执行，而后反复执行的部分才会被 Java 虚拟机即时编译为机器码。换句话说，在进行即时编译的时候，Java 
虚拟机已经运行在目标 CPU 之上，可以轻易地得知其所支持的指令集。</p> <p>然而，Java 字节码的平台无关性却引发了另一个问题，那便是 Java 程序无法像 C++ 程序那样，直接使用由 
Intel 提供的，将被替换为具体 SIMD 指令的 intrinsic 方法 [2]。</p> <p>HotSpot 虚拟机提供的替代方案是 Java 层面的 intrinsic 
方法，这些 intrinsic 方法的语义要比单个 SIMD 指令复杂得多。在运行过程中，HotSpot 虚拟机将根据当前体系架构来决定是否将对该 intrinsic 方法的调用替换为另一高效的实现。如果不，则使用原本的 
Java 实现。</p> <p>举个例子，Java 8 中<code>Arrays.equals(int[], int[])</code>的实现将逐个比较 int 数组中的元素。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static boolean equals(int[] a, int[] a2) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a==a2) </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return true; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a==null || a2==null) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int length = a.length; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a2.length != length) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 关键循环 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i=0; i&lt;length; i++) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a[i] != a2[i]) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return false; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>对应的 intrinsic 高效实现会将数组的多个元素加载至 XMM/YMM/ZMM 寄存器中，然后进行按位比较。如果两个数组相同，那么其中若干个元素合并而成的值也相同，其按位比较也应成功。反过来，如果按位比较失败，则说明两个数组不同。</p> 
<p>使用 SIMD 指令的 HotSpot intrinsic 是虚拟机开发人员根据其语义定制的，因而性能相当优越。</p> <p>不过，由于开发成本及维护成本较高，这种类型的 intrinsic 
屈指可数，如用于复制数组的<code>System.arraycopy</code>和<code>Arrays.copyOf</code>，用于比较数组的<code>Arrays.equals</code>，以及 
Java 9 新加入的<code>Arrays.compare</code>和<code>Arrays.mismatch</code>，以及字符串相关的一些方法<code>String.indexOf</code>、<code>StringLatin1.inflate</code>。</p> 
<blockquote> <p><code>Arrays.copyOf</code>将调用<code>System.arraycopy</code>，实际上只有后者是 intrinsic。在 
Java 9 之后，数组比较真正的 intrinsic 是<code>ArraySupports.vectorizedMismatch</code>方法，而<code>Arrays.equals</code>、<code>Arrays.compare</code>和<code>Arrays.mismatch</code>将调用至该方法中。</p> 
</blockquote> <p>另外，这些 intrinsic 方法只能做到点覆盖，在不少情况下，应用程序并不会用到这些 intrinsic 的语义，却又存在向量化优化的机会。这个时候，我们便需要借助即时编译器中的自动向量化（auto 
vectorization）。</p> <h2>自动向量化</h2> <p>即时编译器的自动向量化将针对能够展开的计数循环，进行向量化优化。如前面介绍过的这段代码，即时编译器便能够自动将其展开优化成使用<code>PADDD</code>指令的向量加法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(int[] a, int[] b, int[] c) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; c.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>关于计数循环的判定，我在上一篇介绍循环优化时已经讲解过了，这里我补充几点自动向量化的条件。</p> 
<ol> <li>循环变量的增量应为 1，即能够遍历整个数组。</li> <li>循环变量不能为 long 类型，否则 C2 无法将循环识别为计数循环。</li> <li>循环迭代之间最好不要有数据依赖，例如出现类似于<code>a[i] 
= a[i-1]</code>的语句。当循环展开之后，循环体内存在数据依赖，那么 C2 无法进行自动向量化。</li> <li>循环体内不要有分支跳转。</li> <li>不要手工进行循环展开。如果 
C2 无法自动展开，那么它也将无法进行自动向量化。</li> </ol> <p>我们可以看到，自动向量化的条件较为苛刻。而且，C2 支持的整数向量化操作并不多，据我所致只有向量加法，向量减法，按位与、或、异或，以及批量移位和批量乘法。C2 
还支持向量点积的自动向量化，即两两相乘再求和，不过这需要多条 SIMD 指令才能完成，因此并不是十分高效。</p> <p>为了解决向量化 intrinsic 以及自动向量化覆盖面过窄的问题，我们在 
OpenJDK 的 Paname 项目 [3] 中尝试引入开发人员可控的向量化抽象。</p> <p>该抽象将提供一套通用的跨平台 API，让 Java 程序能够定义诸如<code>IntVector&lt;S256Bits&gt;</code>的向量，并使用由它提供的一系列向量化 
intrinsic 方法。即时编译器负责将这些 intrinsic 的调用转换为符合当前体系架构 /CPU 的 SIMD 指令。如果你感兴趣的话，可以参考 Vladimir Ivanov 
今年在 JVMLS 上的演讲 [4]。</p> <h2>总结与实践</h2> <p>今天我介绍了即时编译器中的向量化优化。</p> <p>向量化优化借助的是 CPU 的 SIMD 指令，即通过单条指令控制多组数据的运算。它被称为 
CPU 指令级别的并行。</p> <p>HotSpot 虚拟机运用向量化优化的方式有两种。第一种是使用 HotSpot intrinsic，在调用特定方法的时候替换为使用了 SIMD 
指令的高效实现。Intrinsic 属于点覆盖，只有当应用程序明确需要这些 intrinsic 的语义，才能够获得由它带来的性能提升。</p> <p>第二种是依赖即时编译器进行自动向量化，在循环展开优化之后将不同迭代的运算合并为向量运算。自动向量化的触发条件较为苛刻，因此也无法覆盖大多数用例。</p> 
<hr> <p>今天的实践环节，我们来观察一下即时编译器的自动向量化的自适配性。</p> <p>在支持 256 位 YMM 寄存器的机器上，C2 会根据循环回边的执行次数以及方法的执行次数来推测每个循环的次数。如果超过一定值，C2 
会采用基于 256 位 YMM 寄存器的指令，相比起基于 128 位 XMM 寄存器的指令而言，单指令能处理的数据翻了一倍。</p> <p>请采用 Java 9 以上的版本运行下述代码。（Java 
8 始终采用基于 128 位 XMM 寄存器指令的 Bug 可能仍未修复。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run with </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:CompileCommand=''dontinline 
VectorizationTest.foo'' -XX:CompileCommand=''print VectorizationTest.foo'' -XX:-TieredCompilation 
VectorizationTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class VectorizationTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static void foo(int[] a, int[] b, int[] c) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> c[i] = a[i] + b[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws InterruptedException { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int[] a = new int[] { 1, 2, 3, 4, 5, 6, 
7, 8, 1, 2, 3, 4, 5, 6, 7, 8 }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int[] c = new int[16]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 20_000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> foo(a, a, c); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>输出将包含如下机器码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011ce7c650: vmovdqu xmm0,XMMWORD PTR [rdx+rbx*4+0x10] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011ce7c656: vpaddd xmm0,xmm0,XMMWORD 
PTR [rsi+rbx*4+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000011ce7c65c: vmovdqu XMMWORD PTR [rcx+rbx*4+0x10],xmm0 </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果替换为：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] a = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 
7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8 }; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] c = new int[32]; </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>输出将包含如下机器码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000010ff04d9c: vmovdqu ymm0,YMMWORD PTR [rdx+rbx*4+0x10] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000010ff04da2: vpaddd ymm0,ymm0,YMMWORD 
PTR [rsi+rbx*4+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000010ff04da8: vmovdqu YMMWORD PTR [rcx+rbx*4+0x10],ymm0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
--- </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>你可以将<code>foo</code>方法更改为下述代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static void foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 4; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a[i] = a[i - 4]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>重复上述实验，看看会发生什么。</p> <p>[1] <a href="http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf">http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf</a><br> 
[2] <a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/">https://software.intel.com/sites/landingpage/IntrinsicsGuide/</a><br> 
[3] <a href="http://openjdk.java.net/projects/panama/">http://openjdk.java.net/projects/panama/</a><br> 
[4]: <a href="http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf">http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf</a><br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 9 msec}
2020-11-19 20:10:25.463 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=16 
 {executed in 1 msec}
2020-11-19 20:10:25.465 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:25.470 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=16 
 {executed in 2 msec}
2020-11-19 20:10:25.473 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:10:25.479 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787825, 1605787825, 1, 'zh-hans', 0, 1, 1, 
0, '26丨向量化', 1, 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.489 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=16 
 {executed in 2 msec}
2020-11-19 20:10:25.492 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:25.499 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787825, 1605787825, 1, 'zh-hans', 0, 
1, 1, 0, '26丨向量化', 'book', 1, 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.509 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=16 
 {executed in 3 msec}
2020-11-19 20:10:25.510 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:25.515 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.517 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:25.525 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/367bcff5440cb0d06e768cfcd444569f?bkt=en-26dcfdb4e5ee1a49864eea283abb151cea8f8b70dba5ffe017f6095dc91c7c3547ae868bbab5bf38&fid=3757516097-778750-659476670471749&time=1605787823&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lRJKXLJ83vNH8suoeON9%2BVM1DO8%3D&to=92&size=5293523&sta_dx=5293523&sta_cs=4328&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182973&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5293523&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-764ff53572b910ad9c41f2826d65f369e9090862c48c788bec2a4968bea521d88f3a580ac4738c15&sl=76480590&expires=8h&rt=pr&r=438446599&mlogid=7510776626082258569&vbdid=64799653&fin=26%E4%B8%A8%E5%90%91%E9%87%8F%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510776626082258569&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=86348c5ac45f19b14e76af7afe5d1f5f968d95add89ebfdd&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=26%E4%B8%A8%E5%90%91%E9%87%8F%E5%8C%96.mp3', 
16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.534 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.536 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:25.543 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/367bcff5440cb0d06e768cfcd444569f?bkt=en-26dcfdb4e5ee1a49864eea283abb151cea8f8b70dba5ffe017f6095dc91c7c3547ae868bbab5bf38&fid=3757516097-778750-659476670471749&time=1605787823&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lRJKXLJ83vNH8suoeON9%2BVM1DO8%3D&to=92&size=5293523&sta_dx=5293523&sta_cs=4328&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182973&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5293523&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-764ff53572b910ad9c41f2826d65f369e9090862c48c788bec2a4968bea521d88f3a580ac4738c15&sl=76480590&expires=8h&rt=pr&r=438446599&mlogid=7510776626082258569&vbdid=64799653&fin=26%E4%B8%A8%E5%90%91%E9%87%8F%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510776626082258569&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=86348c5ac45f19b14e76af7afe5d1f5f968d95add89ebfdd&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=26%E4%B8%A8%E5%90%91%E9%87%8F%E5%8C%96.mp3', 
16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.552 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.553 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:25.559 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=16 
 {executed in 2 msec}
2020-11-19 20:10:25.561 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:25.567 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结一下 <br>1：向量化优化-本质是一次性多干一些活，免得来回折腾费时费力，通过减少来回折腾的工作量来提高性能。他是怎么实现的呢？他是借助CPU的SIMD指令，通过单条指令控制多组数据的运算，实现了CPU指令级别的并行。 
<br>2：这么好为什么不大批量的使用哪？他有几种方式呢？ <br>使用向量化优化是有一些前提条件的，目前HotSpot 虚拟机运用向量化优化的方式有两种。第一种使用HotSpot 
intrinsic，在调用特定的方法的时候替换为使用了SIMD指令的高效实现。第二种是依赖即时编译器进行的自动向量化，自动向量化也有苛刻的使用前提条件。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/37/3a5d73ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>罗布圆滚滚</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 好棒哦！学到很多 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/5c/2f/a9c8d42f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>渡劫达摩</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> <br>&nbsp;&nbsp;&nbsp;&nbsp;dst[i:i+3] = src[i:i+3]还有这种写法？是大哥省略了部分代码吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 之前用过TI的DSP芯片，里边有很多支持向量处理的计算指令，比如复数乘法，共轭相乘等，但是这些计算指令器不多，而且不能在一个指令周期完成计算，所以大量使用后会影响指令流水，反而不如能在一个指令周期完成计算的单数据加法器 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 我们做自动向量化也会考虑值不值得的问题。<br><br>比如说X86不能在通用寄存器上计算，有时候需要额外的mov指令移到XMM中(如果不是直接从内存中加载的话)。<br><br>另外，某些reduce操作，比如求向量内所有元素的和，X86无法用单条指令实现，只有两两相加的指令，因此需要好几条向量指令协作完成。这种情况下，我们便会放弃自动向量化。</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.579 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.580 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:25.586 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">9</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 小结一下 <br>1：向量化优化-本质是一次性多干一些活，免得来回折腾费时费力，通过减少来回折腾的工作量来提高性能。他是怎么实现的呢？他是借助CPU的SIMD指令，通过单条指令控制多组数据的运算，实现了CPU指令级别的并行。 
<br>2：这么好为什么不大批量的使用哪？他有几种方式呢？ <br>使用向量化优化是有一些前提条件的，目前HotSpot 虚拟机运用向量化优化的方式有两种。第一种使用HotSpot 
intrinsic，在调用特定的方法的时候替换为使用了SIMD指令的高效实现。第二种是依赖即时编译器进行的自动向量化，自动向量化也有苛刻的使用前提条件。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/37/3a5d73ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>罗布圆滚滚</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 好棒哦！学到很多 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/5c/2f/a9c8d42f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>渡劫达摩</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> <br>&nbsp;&nbsp;&nbsp;&nbsp;dst[i:i+3] = src[i:i+3]还有这种写法？是大哥省略了部分代码吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 之前用过TI的DSP芯片，里边有很多支持向量处理的计算指令，比如复数乘法，共轭相乘等，但是这些计算指令器不多，而且不能在一个指令周期完成计算，所以大量使用后会影响指令流水，反而不如能在一个指令周期完成计算的单数据加法器 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 我们做自动向量化也会考虑值不值得的问题。<br><br>比如说X86不能在通用寄存器上计算，有时候需要额外的mov指令移到XMM中(如果不是直接从内存中加载的话)。<br><br>另外，某些reduce操作，比如求向量内所有元素的和，X86无法用单条指令实现，只有两两相加的指令，因此需要好几条向量指令协作完成。这种情况下，我们便会放弃自动向量化。</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.598 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.599 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:25.608 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=16 
 {executed in 3 msec}
2020-11-19 20:10:25.609 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:25.616 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 16, 'https://static001.geekbang.org/resource/image/c0/0e/c06d10d8dd60e49cd15384d71b2a240e.jpg', 
16) 
 {executed in 1 msec}
2020-11-19 20:10:25.631 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.632 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:25.639 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 16, 'https://static001.geekbang.org/resource/image/c0/0e/c06d10d8dd60e49cd15384d71b2a240e.jpg', 
16) 
 {executed in 1 msec}
2020-11-19 20:10:25.650 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 20:10:25.651 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:25.659 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 20:10:25.670 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=16 
 {executed in 2 msec}
2020-11-19 20:10:25.674 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:25.685 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 16, 16) 
 {executed in 4 msec}
2020-11-19 20:10:25.698 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='295464130866486' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:10:25.699 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:47.989 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='295464130866486' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:10:47.992 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:47.998 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('295464130866486', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:10:48.000 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('295464130866486', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:10:48.002 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|37            |
|--------------|

2020-11-19 20:10:48.017 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='295464130866486' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:10:48.019 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:48.450 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='295464130866486' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:10:48.452 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:10:48.455 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('295464130866486', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:10:48.457 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('295464130866486', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:10:48.459 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|38            |
|--------------|

2020-11-19 20:10:48.470 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='295464130866486' 
 {executed in 1 msec}
2020-11-19 20:10:48.472 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:48.475 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787848, 1) 
 {executed in 1 msec}
2020-11-19 20:10:48.477 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787848, 1) 
 {executed in 1 msec}
2020-11-19 20:10:48.478 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|17            |
|--------------|

2020-11-19 20:10:48.488 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'eca41103-6fbd-4273-a9cf-81d8f46c7172', 
17) 
 {executed in 1 msec}
2020-11-19 20:10:48.489 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'eca41103-6fbd-4273-a9cf-81d8f46c7172', 17) 
 {executed in 0 msec}
2020-11-19 20:10:48.491 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|17            |
|--------------|

2020-11-19 20:10:48.503 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=17, revision_default=1, revision_timestamp=1605787848, 
revision_uid=1 where vid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.510 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.511 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:48.516 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '295464130866486', 'zh-hans', 17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.524 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.525 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:10:48.530 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '295464130866486', 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 20:10:48.538 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.539 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:10:48.543 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.545 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:10:48.550 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 8, 17, 0, 0, 8, 0, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.557 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.558 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:48.562 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.564 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:48.583 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在许多应用程序中，循环都扮演着非常重要的角色。为了提升循环的运行效率，研发编译器的工程师提出了不少面向循环的编译优化方式，如循环无关代码外提，循环展开等。</p> 
<p>今天，我们便来了解一下，Java 虚拟机中的即时编译器都应用了哪些面向循环的编译优化。</p> <h2>循环无关代码外提</h2> <p>所谓的循环无关代码（Loop-invariant 
Code），指的是循环中值不变的表达式。如果能够在不改变程序语义的情况下，将这些循环无关代码提出循环之外，那么程序便可以避免重复执行这些表达式，从而达到性能提升的效果。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int x, int y, int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += x * y + a[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int, 
int, int[]); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: istore 4 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: istore 5 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: goto 25 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 循环体开始 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: iload 4 // load sum </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: iload_1 // load x </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 12: iload_2 // load y </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 13: imul // x*y </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14: aload_3 // load a </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: iload 5 // load i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: iaload // a[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: iadd // x*y + a[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: iadd // sum + (x*y + a[i]) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 20: istore 4 // sum = sum + (x*y + a[i]) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: iinc 5, 1 // i++ </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: iload 5 // load i </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: aload_3 // load a </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: arraylength // a.length </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: if_icmplt 9 // i &lt; a.length </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 循环体结束 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 32: iload 4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 34: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，在上面这段代码中，循环体中的表达式<code>x*y</code>，以及循环判断条件中的<code>a.length</code>均属于循环不变代码。前者是一个整数乘法运算，而后者则是内存访问操作，读取数组对象<code>a</code>的长度。（数组的长度存放于数组对象的对象头中，可通过 
arraylength 指令来访问。）</p> <p>理想情况下，上面这段代码经过循环无关代码外提之后，等同于下面这一手工优化版本。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int fooManualOpt(int x, int y, int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t0 = x * y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t1 = a.length; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; t1; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += t0 + a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们可以看到，无论是乘法运算<code>x*y</code>，还是内存访问<code>a.length</code>，现在都在循环之前完成。原本循环中需要执行这两个表达式的地方，现在直接使用循环之前这两个表达式的执行结果。</p><!-- 
[[[read_end]]] --> <p>在 Sea-of-Nodes IR 的帮助下，循环无关代码外提的实现并不复杂。</p> <p><img src="https://static001.geekbang.org/resource/image/69/e6/6963da28cb3cf42cc43e4268a8f002e6.png" 
alt=""></p> <p>上图我截取了 Graal 为前面例子中的<code>foo</code>方法所生成的 IR 图（局部）。其中 B2 基本块位于循环之前，B3 基本块为循环头。</p> 
<p><code>x*y</code>所对应的 21 号乘法节点，以及<code>a.length</code>所对应的 47 号读取节点，均不依赖于循环体中生成的数据，而且都为浮动节点。节点调度算法会将它们放置于循环之前的 
B2 基本块中，从而实现这些循环无关代码的外提。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f0: mov edi,ebx // ebx 存放着 x*y 的结果 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f2: add edi,DWORD PTR [r8+r9*4+0x10] 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // [r8+r9*4+0x10] 即 a[i] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // r8 指向 a，r9d 存放着 i </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f7: add eax,edi // eax 存放着 sum </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f9: inc r9d // i++ </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02fc: cmp r9d,r10d // i &lt; a.length 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // r10d 存放着 a.length </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02ff: jl 0x02f0 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>上面这段机器码是<code>foo</code>方法的编译结果中的循环。这里面没有整数乘法指令，也没有读取数组长度的内存访问指令。它们的值已在循环之前计算好了，并且分别保存在寄存器<code>ebx</code>以及<code>r10d</code>之中。在循环之中，代码直接使用寄存器<code>ebx</code>以及<code>r10d</code>所保存的值，而不用在循环中反复计算。</p> 
<p>从生成的机器码中可以看出，除了<code>x*y</code>和<code>a.length</code>的外提之外，即时编译器还外提了 int 数组加载指令<code>iaload</code>所暗含的 
null 检测（null check）以及下标范围检测（range check）。</p> <p>如果将<code>iaload</code>指令想象成一个接收数组对象以及下标作为参数，并且返回对应数组元素的方法，那么它的伪代码如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int iaload(int[] arrayRef, int index) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (arrayRef == null) { // null 检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (index &lt; 0 || index &gt;= arrayRef.length) { // 下标范围检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return arrayRef[index]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><code>foo</code>方法中的 null 检测属于循环无关代码。这是因为它始终检测作为输入参数的 
int 数组是否为 null，而这与第几次循环无关。</p> <p>为了更好地阐述具体的优化，我精简了原来的例子，并将<code>iaload</code>展开，最终形成如下所示的代码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a == null) { // null check </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在这段代码中，null 检测涉及了控制流依赖，因而无法通过 Sea-of-Nodes IR 转换以及节点调度来完成外提。</p> <p>在 C2 中，null 
检测的外提是通过额外的编译优化，也就是循环预测（Loop Prediction，对应虚拟机参数<code>-XX:+UseLoopPredicate</code>）来实现的。该优化的实际做法是在循环之前插入同样的检测代码，并在命中的时候进行去优化。这样一来，循环中的检测代码便会被归纳并消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a == null) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> deoptimize(); // never returns </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a == null) { // now evluate to false </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>除了 null 检测之外，其他循环无关检测都能够按照这种方式外提至循环之前。甚至是循环有关的下标范围检测，都能够借助循环预测来外提，只不过具体的转换要复杂一些。</p> 
<p>之所以说下标范围检测是循环有关的，是因为在我们的例子中，该检测的主体是循环控制变量<code>i</code>（检测它是否在<code>[0, a.length)</code>之间），它的值将随着循环次数的增加而改变。</p> 
<p>由于外提该下标范围检测之后，我们无法再引用到循环变量<code>i</code>，因此，即时编译器需要转换检测条件。具体的转换方式如下所示：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = INIT; i &lt; LIMIT; i += STRIDE) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
---------- </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // 经过下标范围检测外提之后： 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (INIT &lt; 0 || IMAX &gt;= a.length) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // IMAX 是 i 所能达到的最大值，注意它不一定是 LIMIT-1 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> detopimize(); // never returns </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = INIT; i &lt; LIMIT; i += STRIDE) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; // 不包含下标范围检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>循环展开</h2> 
<p>另外一项非常重要的循环优化是循环展开（Loop Unrolling）。它指的是在循环体中重复多次循环迭代，并减少循环次数的编译优化。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; 64; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += (i % 2 == 0) ? a[i] : -a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面的代码经过一次循环展开之后将形成下面的代码：</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] 
a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum 
= 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; 64; i += 2) { // 注意这里的步数是 2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += (i % 2 == 0) ? a[i] : -a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += ((i + 1) % 2 == 0) ? a[i + 1] : -a[i + 1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 C2 中，只有计数循环（Counted Loop）才能被展开。所谓的计数循环需要满足如下四个条件。</p> 
<ol> <li>维护一个循环计数器，并且基于计数器的循环出口只有一个（但可以有基于其他判断条件的出口）。</li> <li>循环计数器的类型为 int、short 或者 char（即不能是 
byte、long，更不能是 float 或者 double）。</li> <li>每个迭代循环计数器的增量为常数。</li> <li>循环计数器的上限（增量为正数）或下限（增量为负数）是循环无关的数值。</li> 
</ol> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = START; i &lt; LIMIT; i += STRIDE) { .. } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 等价于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int i = START; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> while (i &lt; LIMIT) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i += STRIDE; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在上面两种循环中，只要<code>LIMIT</code>是循环无关的数值，<code>STRIDE</code>是常数，而且循环中除了<code>i 
&lt; LIMIT</code>之外没有其他基于循环变量<code>i</code>的循环出口，那么 C2 便会将该循环识别为计数循环。</p> <p>循环展开的缺点显而易见：它可能会增加代码的冗余度，导致所生成机器码的长度大幅上涨。</p> 
<p>不过，随着循环体的增大，优化机会也会不断增加。一旦循环展开能够触发进一步的优化，总体的代码复杂度也将降低。比如前面的例子经过循环展开之后便可以进一步优化为如下所示的代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 64; i += 2) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += -a[i + 1]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>循环展开有一种特殊情况，那便是完全展开（Full Unroll）。当循环的数目是固定值而且非常小时，即时编译器会将循环全部展开。此时，原本循环中的循环判断语句将不复存在，取而代之的是若干个顺序执行的循环体。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 4; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上述代码将被完全展开为下述代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[0]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[1]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[2]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[3]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>即时编译器会在循环体的大小与循环展开次数之间做出权衡。例如，对于仅迭代三次（或以下）的循环，即时编译器将进行完全展开；对于循环体 
IR 节点数目超过阈值的循环，即时编译器则不会进行任何循环展开。</p> <h2>其他循环优化</h2> <p>除了循环无关代码外提以及循环展开之外，即时编译器还有两个比较重要的循环优化技术：循环判断外提（loop 
unswitching）以及循环剥离（loop peeling）。</p> <p>循环判断外提指的是将循环中的 if 语句外提至循环之前，并且在该 if 语句的两个分支中分别放置一份循环代码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length &gt; 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面这段代码经过循环判断外提之后，将变成下面这段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length 
&gt; 4) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 进一步优化为： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length &gt; 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>循环判断外提与循环无关检测外提所针对的代码模式比较类似，都是循环中的 if 语句。不同的是，后者在检查失败时会抛出异常，中止当前的正常执行路径；而前者所针对的是更加常见的情况，即通过 
if 语句的不同分支执行不同的代码逻辑。</p> <p>循环剥离指的是将循环的前几个迭代或者后几个迭代剥离出循环的优化方式。一般来说，循环的前几个迭代或者后几个迭代都包含特殊处理。通过将这几个特殊的迭代剥离出去，可以使原本的循环体的规律性更加明显，从而触发进一步的优化。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int j = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[j]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> j = i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面这段代码剥离了第一个迭代后，将变成下面这段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (0 
&lt; a.length) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[0]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 1; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[i - 1]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>总结与实践</h2> <p>今天我介绍了即时编译器所使用的循环优化。</p> 
<p>循环无关代码外提将循环中值不变的表达式，或者循环无关检测外提至循环之前，以避免在循环中重复进行冗余计算。前者是通过 Sea-of-Nodes IR 以及节点调度来共同完成的，而后者则是通过一个独立优化 
—— 循环预测来完成的。循环预测还可以外提循环有关的数组下标范围检测。</p> <p>循环展开是一种在循环中重复多次迭代，并且相应地减少循环次数的优化方式。它是一种以空间换时间的优化方式，通过增大循环体来获取更多的优化机会。循环展开的特殊形式是完全展开，将原本的循环转换成若干个循环体的顺序执行。</p> 
<p>此外，我还简单地介绍了另外两种循环优化方式：循环判断外提以及循环剥离。</p> <p>今天的实践环节，我们来看这么一段代码：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; dst.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码经过循环展开变成下面这段代码。请问你能想到进一步优化的机会吗？<br> 
（提示：数组元素在内存中的分布是连续的。假设<code>dst[0]</code>位于 0x1000，那么<code>dst[1]</code>位于 0x1001。）</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 1] = src[i + 1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 2] = src[i + 2]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 3] = src[i + 3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 8 msec}
2020-11-19 20:10:48.595 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.597 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:10:48.618 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在许多应用程序中，循环都扮演着非常重要的角色。为了提升循环的运行效率，研发编译器的工程师提出了不少面向循环的编译优化方式，如循环无关代码外提，循环展开等。</p> 
<p>今天，我们便来了解一下，Java 虚拟机中的即时编译器都应用了哪些面向循环的编译优化。</p> <h2>循环无关代码外提</h2> <p>所谓的循环无关代码（Loop-invariant 
Code），指的是循环中值不变的表达式。如果能够在不改变程序语义的情况下，将这些循环无关代码提出循环之外，那么程序便可以避免重复执行这些表达式，从而达到性能提升的效果。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int x, int y, int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += x * y + a[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int, 
int, int[]); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: istore 4 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: istore 5 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: goto 25 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 循环体开始 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: iload 4 // load sum </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: iload_1 // load x </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 12: iload_2 // load y </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 13: imul // x*y </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14: aload_3 // load a </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: iload 5 // load i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: iaload // a[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: iadd // x*y + a[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: iadd // sum + (x*y + a[i]) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 20: istore 4 // sum = sum + (x*y + a[i]) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: iinc 5, 1 // i++ </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: iload 5 // load i </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: aload_3 // load a </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: arraylength // a.length </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: if_icmplt 9 // i &lt; a.length </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 循环体结束 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 32: iload 4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 34: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，在上面这段代码中，循环体中的表达式<code>x*y</code>，以及循环判断条件中的<code>a.length</code>均属于循环不变代码。前者是一个整数乘法运算，而后者则是内存访问操作，读取数组对象<code>a</code>的长度。（数组的长度存放于数组对象的对象头中，可通过 
arraylength 指令来访问。）</p> <p>理想情况下，上面这段代码经过循环无关代码外提之后，等同于下面这一手工优化版本。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int fooManualOpt(int x, int y, int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t0 = x * y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t1 = a.length; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; t1; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += t0 + a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们可以看到，无论是乘法运算<code>x*y</code>，还是内存访问<code>a.length</code>，现在都在循环之前完成。原本循环中需要执行这两个表达式的地方，现在直接使用循环之前这两个表达式的执行结果。</p><!-- 
[[[read_end]]] --> <p>在 Sea-of-Nodes IR 的帮助下，循环无关代码外提的实现并不复杂。</p> <p><img src="https://static001.geekbang.org/resource/image/69/e6/6963da28cb3cf42cc43e4268a8f002e6.png" 
alt=""></p> <p>上图我截取了 Graal 为前面例子中的<code>foo</code>方法所生成的 IR 图（局部）。其中 B2 基本块位于循环之前，B3 基本块为循环头。</p> 
<p><code>x*y</code>所对应的 21 号乘法节点，以及<code>a.length</code>所对应的 47 号读取节点，均不依赖于循环体中生成的数据，而且都为浮动节点。节点调度算法会将它们放置于循环之前的 
B2 基本块中，从而实现这些循环无关代码的外提。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f0: mov edi,ebx // ebx 存放着 x*y 的结果 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f2: add edi,DWORD PTR [r8+r9*4+0x10] 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // [r8+r9*4+0x10] 即 a[i] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // r8 指向 a，r9d 存放着 i </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f7: add eax,edi // eax 存放着 sum </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02f9: inc r9d // i++ </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02fc: cmp r9d,r10d // i &lt; a.length 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // r10d 存放着 a.length </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x02ff: jl 0x02f0 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>上面这段机器码是<code>foo</code>方法的编译结果中的循环。这里面没有整数乘法指令，也没有读取数组长度的内存访问指令。它们的值已在循环之前计算好了，并且分别保存在寄存器<code>ebx</code>以及<code>r10d</code>之中。在循环之中，代码直接使用寄存器<code>ebx</code>以及<code>r10d</code>所保存的值，而不用在循环中反复计算。</p> 
<p>从生成的机器码中可以看出，除了<code>x*y</code>和<code>a.length</code>的外提之外，即时编译器还外提了 int 数组加载指令<code>iaload</code>所暗含的 
null 检测（null check）以及下标范围检测（range check）。</p> <p>如果将<code>iaload</code>指令想象成一个接收数组对象以及下标作为参数，并且返回对应数组元素的方法，那么它的伪代码如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int iaload(int[] arrayRef, int index) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (arrayRef == null) { // null 检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (index &lt; 0 || index &gt;= arrayRef.length) { // 下标范围检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return arrayRef[index]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><code>foo</code>方法中的 null 检测属于循环无关代码。这是因为它始终检测作为输入参数的 
int 数组是否为 null，而这与第几次循环无关。</p> <p>为了更好地阐述具体的优化，我精简了原来的例子，并将<code>iaload</code>展开，最终形成如下所示的代码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a == null) { // null check </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在这段代码中，null 检测涉及了控制流依赖，因而无法通过 Sea-of-Nodes IR 转换以及节点调度来完成外提。</p> <p>在 C2 中，null 
检测的外提是通过额外的编译优化，也就是循环预测（Loop Prediction，对应虚拟机参数<code>-XX:+UseLoopPredicate</code>）来实现的。该优化的实际做法是在循环之前插入同样的检测代码，并在命中的时候进行去优化。这样一来，循环中的检测代码便会被归纳并消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a == null) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> deoptimize(); // never returns </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (a == null) { // now evluate to false </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NullPointerException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>除了 null 检测之外，其他循环无关检测都能够按照这种方式外提至循环之前。甚至是循环有关的下标范围检测，都能够借助循环预测来外提，只不过具体的转换要复杂一些。</p> 
<p>之所以说下标范围检测是循环有关的，是因为在我们的例子中，该检测的主体是循环控制变量<code>i</code>（检测它是否在<code>[0, a.length)</code>之间），它的值将随着循环次数的增加而改变。</p> 
<p>由于外提该下标范围检测之后，我们无法再引用到循环变量<code>i</code>，因此，即时编译器需要转换检测条件。具体的转换方式如下所示：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = INIT; i &lt; LIMIT; i += STRIDE) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &lt; 0 || i &gt;= a.length) { // range check </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArrayIndexOutOfBoundsException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
---------- </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // 经过下标范围检测外提之后： 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (INIT &lt; 0 || IMAX &gt;= a.length) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // IMAX 是 i 所能达到的最大值，注意它不一定是 LIMIT-1 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> detopimize(); // never returns </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = INIT; i &lt; LIMIT; i += STRIDE) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; // 不包含下标范围检测 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>循环展开</h2> 
<p>另外一项非常重要的循环优化是循环展开（Loop Unrolling）。它指的是在循环体中重复多次循环迭代，并减少循环次数的编译优化。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; 64; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += (i % 2 == 0) ? a[i] : -a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面的代码经过一次循环展开之后将形成下面的代码：</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] 
a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum 
= 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; 64; i += 2) { // 注意这里的步数是 2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += (i % 2 == 0) ? a[i] : -a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += ((i + 1) % 2 == 0) ? a[i + 1] : -a[i + 1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 C2 中，只有计数循环（Counted Loop）才能被展开。所谓的计数循环需要满足如下四个条件。</p> 
<ol> <li>维护一个循环计数器，并且基于计数器的循环出口只有一个（但可以有基于其他判断条件的出口）。</li> <li>循环计数器的类型为 int、short 或者 char（即不能是 
byte、long，更不能是 float 或者 double）。</li> <li>每个迭代循环计数器的增量为常数。</li> <li>循环计数器的上限（增量为正数）或下限（增量为负数）是循环无关的数值。</li> 
</ol> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = START; i &lt; LIMIT; i += STRIDE) { .. } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 等价于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int i = START; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> while (i &lt; LIMIT) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i += STRIDE; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在上面两种循环中，只要<code>LIMIT</code>是循环无关的数值，<code>STRIDE</code>是常数，而且循环中除了<code>i 
&lt; LIMIT</code>之外没有其他基于循环变量<code>i</code>的循环出口，那么 C2 便会将该循环识别为计数循环。</p> <p>循环展开的缺点显而易见：它可能会增加代码的冗余度，导致所生成机器码的长度大幅上涨。</p> 
<p>不过，随着循环体的增大，优化机会也会不断增加。一旦循环展开能够触发进一步的优化，总体的代码复杂度也将降低。比如前面的例子经过循环展开之后便可以进一步优化为如下所示的代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 64; i += 2) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += -a[i + 1]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>循环展开有一种特殊情况，那便是完全展开（Full Unroll）。当循环的数目是固定值而且非常小时，即时编译器会将循环全部展开。此时，原本循环中的循环判断语句将不复存在，取而代之的是若干个顺序执行的循环体。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 4; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上述代码将被完全展开为下述代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[0]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[1]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[2]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[3]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>即时编译器会在循环体的大小与循环展开次数之间做出权衡。例如，对于仅迭代三次（或以下）的循环，即时编译器将进行完全展开；对于循环体 
IR 节点数目超过阈值的循环，即时编译器则不会进行任何循环展开。</p> <h2>其他循环优化</h2> <p>除了循环无关代码外提以及循环展开之外，即时编译器还有两个比较重要的循环优化技术：循环判断外提（loop 
unswitching）以及循环剥离（loop peeling）。</p> <p>循环判断外提指的是将循环中的 if 语句外提至循环之前，并且在该 if 语句的两个分支中分别放置一份循环代码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length &gt; 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面这段代码经过循环判断外提之后，将变成下面这段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length 
&gt; 4) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[i]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 进一步优化为： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a.length &gt; 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a[i]; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>循环判断外提与循环无关检测外提所针对的代码模式比较类似，都是循环中的 if 语句。不同的是，后者在检查失败时会抛出异常，中止当前的正常执行路径；而前者所针对的是更加常见的情况，即通过 
if 语句的不同分支执行不同的代码逻辑。</p> <p>循环剥离指的是将循环的前几个迭代或者后几个迭代剥离出循环的优化方式。一般来说，循环的前几个迭代或者后几个迭代都包含特殊处理。通过将这几个特殊的迭代剥离出去，可以使原本的循环体的规律性更加明显，从而触发进一步的优化。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int j = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a[j]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> j = i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，上面这段代码剥离了第一个迭代后，将变成下面这段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int foo(int[] a) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (0 
&lt; a.length) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[0]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int 
i = 1; i &lt; a.length; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
sum += a[i - 1]; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>总结与实践</h2> <p>今天我介绍了即时编译器所使用的循环优化。</p> 
<p>循环无关代码外提将循环中值不变的表达式，或者循环无关检测外提至循环之前，以避免在循环中重复进行冗余计算。前者是通过 Sea-of-Nodes IR 以及节点调度来共同完成的，而后者则是通过一个独立优化 
—— 循环预测来完成的。循环预测还可以外提循环有关的数组下标范围检测。</p> <p>循环展开是一种在循环中重复多次迭代，并且相应地减少循环次数的优化方式。它是一种以空间换时间的优化方式，通过增大循环体来获取更多的优化机会。循环展开的特殊形式是完全展开，将原本的循环转换成若干个循环体的顺序执行。</p> 
<p>此外，我还简单地介绍了另外两种循环优化方式：循环判断外提以及循环剥离。</p> <p>今天的实践环节，我们来看这么一段代码：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; dst.length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码经过循环展开变成下面这段代码。请问你能想到进一步优化的机会吗？<br> 
（提示：数组元素在内存中的分布是连续的。假设<code>dst[0]</code>位于 0x1000，那么<code>dst[1]</code>位于 0x1001。）</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void foo(byte[] dst, byte[] src) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; dst.length - 4; i += 4) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i] = src[i]; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 1] = src[i + 1]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 2] = src[i + 2]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> dst[i + 3] = src[i + 3]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // post-loop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 10 msec}
2020-11-19 20:10:48.631 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.633 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:48.637 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.639 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:10:48.644 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787848, 1605787848, 1, 'zh-hans', 0, 1, 1, 
0, '25丨循环优化', 1, 17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.658 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=17 
 {executed in 1 msec}
2020-11-19 20:10:48.660 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:10:48.667 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787848, 1605787848, 1, 'zh-hans', 0, 
1, 1, 0, '25丨循环优化', 'book', 1, 17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.676 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=17 
 {executed in 2 msec}
2020-11-19 20:10:48.677 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:48.683 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.685 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:48.692 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/40ec6158c2e9e496e01db7073851ff6e?bkt=en-0f64e6ca9b24f0bc0d11280309cf553b22e0f91e6b87732814b45af4412148f0e5bf790c162a0d11839174e75f232fcc0f6adf6b75354891383114dd7a0e217f&fid=3757516097-778750-899575571418425&time=1605787847&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-%2BDLlD%2FBi4PcZefU1I6BTbL0jZa0%3D&to=92&size=4065977&sta_dx=4065977&sta_cs=4357&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182974&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4065977&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-957d6c663cfb963f919e66e783f3d292d8c86ddff9b44156b1e29cd2b050a02a4220720a8e460445a43f98ac60160ef71a629b21973e8d53305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=327254538&mlogid=7510782922874531636&vbdid=64799653&fin=25%E4%B8%A8%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510782922874531636&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=12146e4ffd7df3c94e76af7afe5d1f5f3fcaf6c1b22fd00e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=25%E4%B8%A8%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96.mp3', 
17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.702 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.704 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:10:48.710 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/40ec6158c2e9e496e01db7073851ff6e?bkt=en-0f64e6ca9b24f0bc0d11280309cf553b22e0f91e6b87732814b45af4412148f0e5bf790c162a0d11839174e75f232fcc0f6adf6b75354891383114dd7a0e217f&fid=3757516097-778750-899575571418425&time=1605787847&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-%2BDLlD%2FBi4PcZefU1I6BTbL0jZa0%3D&to=92&size=4065977&sta_dx=4065977&sta_cs=4357&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182974&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4065977&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-957d6c663cfb963f919e66e783f3d292d8c86ddff9b44156b1e29cd2b050a02a4220720a8e460445a43f98ac60160ef71a629b21973e8d53305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=327254538&mlogid=7510782922874531636&vbdid=64799653&fin=25%E4%B8%A8%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510782922874531636&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=12146e4ffd7df3c94e76af7afe5d1f5f3fcaf6c1b22fd00e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=25%E4%B8%A8%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96.mp3', 
17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.719 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=17 
 {executed in 2 msec}
2020-11-19 20:10:48.721 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:48.726 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.729 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:48.740 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 现在浏览器终于也可以写留言了，非常好！希望能将和老师相互的讨论的功能也开开，否则，不能进行对话，讲某些问题的效果不太好！ 
<br> <br>循环优化，站在编译器的角度来作出的优化动作，老师介绍了几种方式，经过听讲，我感觉万变不离其宗，优化的核心关键点还是少做一些事情，当然，事情少做了，作用不能减！ <br> 
<br>1：循环无关码外提——将循环内的某些无关代码外移，减少某些程序的反复执行 <br>2：循环展开——减少循环条件的判断，针对循环次数少的循环 <br>3：循环判断外提——减少每次循环的都进行判断次数 
<br>4：循环剥离——将不通用的处理起来稍微费劲一些的动作，放在循环外处理 <br> <br>总之，要做减法！ <br>性能优化的核心点： <br>1：让做的快的做 <br>2：如果不能实现，则让做的快的做多一点，做的慢的少做一些 
<br>3：取巧，事情少做了，但是目的依旧能够达到 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的。在程序语义不改变的情况下，编译器会尽可能地减少生成代码的工作量。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这些都是DSP代码典型的优化方法，目的是防止打断CPU的指令流水，提高指令处理的并行度 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Good to know</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LenX</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，如果有这样一段代码： <br> <br>for( ... ) { <br>&nbsp;&nbsp;&nbsp;sum 
+= x + y + a[i]; <br>} <br> <br>借助 Sea-of-Nodes IR 能把「x + y」表达式外提出去。 <br> <br>但，如果表达式变成如下： 
<br> <br>sum += x + a[i] + y; <br> <br>也能借助 IR 外提 「x + y」吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞想法！会的。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一个坏人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 是不是写应用系统的时候没必要按照优化方式写，编译器反正会优化？！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 很多情况下是的。但也要考虑编译器没有预算来做优化的情况(比如循环太大)。<br><br>一般来说，应用代码更应注重可读性。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这样展开后有一个强度削弱的机会，四个byte的赋值合并成一个int？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！不叫强度削弱，叫向量化，下一篇讲</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/06/73/d3bd607b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>天之蓝</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教两个问题，循环展开那个例子如果64是65是不是就越界了？实践的代码如果length为6按条件只会循环一次那下标为4、5的不就执行不到了吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问老师，实践环节的循环展开后的数组越界，编译器是怎么处理的？是不是当length小于4，循环完全展开就可以了，实际上这个展开有一个隐含的假定，即length大于4的情况。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的，如果是常量长度，而且小于4，那么完全展开就行了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 实践环节的代码，由于i++相应的变成了i+4。前面的判断条件dst.length就不应该减4了吧。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 观察到位！这个主要是为了避免访问越界。你可以假定length为3，再看看这段代码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 循环展开优化，如何防止出现数组下边越界？ <br>Length=3n+2，每次循环展开n,n+1,n+2,当第n次循环结束的时候，下标开始从3n+1、3n+2、3n+3，那么访问3n+2与3n+3对应值时，就会出现数组越界。 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 5 msec}
2020-11-19 20:10:48.754 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=17 
 {executed in 2 msec}
2020-11-19 20:10:48.756 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:10:48.766 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 现在浏览器终于也可以写留言了，非常好！希望能将和老师相互的讨论的功能也开开，否则，不能进行对话，讲某些问题的效果不太好！ 
<br> <br>循环优化，站在编译器的角度来作出的优化动作，老师介绍了几种方式，经过听讲，我感觉万变不离其宗，优化的核心关键点还是少做一些事情，当然，事情少做了，作用不能减！ <br> 
<br>1：循环无关码外提——将循环内的某些无关代码外移，减少某些程序的反复执行 <br>2：循环展开——减少循环条件的判断，针对循环次数少的循环 <br>3：循环判断外提——减少每次循环的都进行判断次数 
<br>4：循环剥离——将不通用的处理起来稍微费劲一些的动作，放在循环外处理 <br> <br>总之，要做减法！ <br>性能优化的核心点： <br>1：让做的快的做 <br>2：如果不能实现，则让做的快的做多一点，做的慢的少做一些 
<br>3：取巧，事情少做了，但是目的依旧能够达到 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的。在程序语义不改变的情况下，编译器会尽可能地减少生成代码的工作量。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erozFScHpVRM5OCwMW7giaM13NE7gN5iatw9Ozwu93ibRZZjmSmcfzBLSXs8tYtwW7Q2E8eUdy9lGl5A/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_488a8...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这些都是DSP代码典型的优化方法，目的是防止打断CPU的指令流水，提高指令处理的并行度 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Good to know</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LenX</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，如果有这样一段代码： <br> <br>for( ... ) { <br>&nbsp;&nbsp;&nbsp;sum 
+= x + y + a[i]; <br>} <br> <br>借助 Sea-of-Nodes IR 能把「x + y」表达式外提出去。 <br> <br>但，如果表达式变成如下： 
<br> <br>sum += x + a[i] + y; <br> <br>也能借助 IR 外提 「x + y」吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
赞想法！会的。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一个坏人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 是不是写应用系统的时候没必要按照优化方式写，编译器反正会优化？！ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 很多情况下是的。但也要考虑编译器没有预算来做优化的情况(比如循环太大)。<br><br>一般来说，应用代码更应注重可读性。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这样展开后有一个强度削弱的机会，四个byte的赋值合并成一个int？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！不叫强度削弱，叫向量化，下一篇讲</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/06/73/d3bd607b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>天之蓝</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教两个问题，循环展开那个例子如果64是65是不是就越界了？实践的代码如果length为6按条件只会循环一次那下标为4、5的不就执行不到了吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问老师，实践环节的循环展开后的数组越界，编译器是怎么处理的？是不是当length小于4，循环完全展开就可以了，实际上这个展开有一个隐含的假定，即length大于4的情况。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的，如果是常量长度，而且小于4，那么完全展开就行了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 实践环节的代码，由于i++相应的变成了i+4。前面的判断条件dst.length就不应该减4了吧。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 观察到位！这个主要是为了避免访问越界。你可以假定length为3，再看看这段代码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 循环展开优化，如何防止出现数组下边越界？ <br>Length=3n+2，每次循环展开n,n+1,n+2,当第n次循环结束的时候，下标开始从3n+1、3n+2、3n+3，那么访问3n+2与3n+3对应值时，就会出现数组越界。 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 5 msec}
2020-11-19 20:10:48.777 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 20:10:48.779 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:48.783 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.785 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:48.790 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 17, 'https://static001.geekbang.org/resource/image/e9/60/e905e810f4c32f5b0d2636f4bd393a60.jpg', 
17) 
 {executed in 1 msec}
2020-11-19 20:10:48.796 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.798 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:10:48.803 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 17, 'https://static001.geekbang.org/resource/image/e9/60/e905e810f4c32f5b0d2636f4bd393a60.jpg', 
17) 
 {executed in 1 msec}
2020-11-19 20:10:48.809 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.811 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:48.816 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.822 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 20:10:48.824 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:10:48.829 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 17, 17) 
 {executed in 1 msec}
2020-11-19 20:10:48.836 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='940355006761457' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:10:48.838 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:05.984 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='940355006761457' 
and bookchecke0_.name='net_content' 
 {executed in 3 msec}
2020-11-19 20:11:05.987 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:05.993 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('940355006761457', 1, 'net_content') 
 {executed in 2 msec}
2020-11-19 20:11:05.995 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('940355006761457', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:11:05.997 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|39            |
|--------------|

2020-11-19 20:11:06.009 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='940355006761457' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:11:06.010 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:06.526 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='940355006761457' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:11:06.528 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:06.531 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('940355006761457', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:11:06.532 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('940355006761457', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:11:06.533 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|40            |
|--------------|

2020-11-19 20:11:06.544 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='940355006761457' 
 {executed in 1 msec}
2020-11-19 20:11:06.545 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.548 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787866, 1) 
 {executed in 0 msec}
2020-11-19 20:11:06.550 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787866, 1) 
 {executed in 0 msec}
2020-11-19 20:11:06.552 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|18            |
|--------------|

2020-11-19 20:11:06.562 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '410a07a0-4d06-42b3-88b9-33193ea1d53c', 
18) 
 {executed in 1 msec}
2020-11-19 20:11:06.563 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '410a07a0-4d06-42b3-88b9-33193ea1d53c', 18) 
 {executed in 0 msec}
2020-11-19 20:11:06.564 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|18            |
|--------------|

2020-11-19 20:11:06.577 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=18, revision_default=1, revision_timestamp=1605787866, 
revision_uid=1 where vid=18 
 {executed in 0 msec}
2020-11-19 20:11:06.585 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=18 
 {executed in 2 msec}
2020-11-19 20:11:06.586 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.592 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '940355006761457', 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.598 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.600 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.605 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '940355006761457', 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.611 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=18 
 {executed in 1 msec}
2020-11-19 20:11:06.613 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:06.616 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=18 
 {executed in 1 msec}
2020-11-19 20:11:06.618 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:06.623 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 8, 18, 0, 0, 8, 0, 18) 
 {executed in 0 msec}
2020-11-19 20:11:06.629 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.631 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:06.634 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.636 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:06.650 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在上一篇文章中，我介绍了逃逸分析，也介绍了基于逃逸分析的优化方式锁消除、栈上分配以及标量替换等内容。</p> 
<p>其中的标量替换，可以看成将对象本身拆散为一个个字段，并把原本对对象字段的访问，替换为对一个个局部变量的访问。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int a 
= 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Foo foo = new Foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> foo.a = x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return foo.a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中的<code>bar</code>方法，经过逃逸分析以及标量替换后，其优化结果如下所示。（确切地说，是指所生成的 
IR 图与下述代码所生成的 IR 图类似。之后不再重复解释。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static int bar(int x) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int a = x; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>由于 Sea-of-Nodes IR 的特性，局部变量不复存在，取而代之的是一个个值。在例子对应的 
IR 图中，返回节点将直接返回所输入的参数。</p> <p><img src="https://static001.geekbang.org/resource/image/14/5d/14c64d61e81b764253a2fc96795d095d.png" 
alt=""></p> <p><strong>经过标量替换的<code>bar</code>方法</strong></p> <p>下面我列举了<code>bar</code>方法经由 
C2 即时编译生成的机器码（这里略去了指令地址的前 48 位）。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # {method} ''bar'' ''(I)I'' in ''FieldAccessTest'' 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # parm0: rsi = int // 参数 x </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # [sp+0x20] (sp of caller) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06a0: sub rsp,0x18 // 创建方法栈桢 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06a7: mov QWORD PTR [rsp+0x10],rbp // 
无关指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06ac: 
mov eax,esi // 将参数 x 存入返回值 eax 中 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06ae: add rsp,0x10 // 弹出方法栈桢 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06b2: pop rbp // 无关指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06b3: mov r10,QWORD PTR [r15+0x70] // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x06b7: test DWORD PTR [r10],eax // 安全点测试 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06ba: ret </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<blockquote> <p>在 X86_64 的机器码中，每当使用 call 指令进入目标方法的方法体中时，我们需要在栈上为当前方法分配一块内存作为其栈桢。而在退出该方法时，我们需要弹出当前方法所使用的栈桢。</p> 
</blockquote> <blockquote> <p>由于寄存器 rsp 维护着当前线程的栈顶指针，因此这些操作都是通过增减寄存器 rsp 来实现的，即上面这段机器码中偏移量为 
0x06a0 以及 0x06ae 的指令。</p> </blockquote><!-- [[[read_end]]] --> <blockquote> <p>在介绍安全点（safepoint）时我曾介绍过，HotSpot 
虚拟机的即时编译器将在方法返回时插入安全点测试指令，即图中偏移量为 0x06b3 以及 0x06ba 的指令。其中真正的安全点测试是 0x06b7 指令。</p> </blockquote> 
<blockquote> <p>如果虚拟机需要所有线程都到达安全点，那么该 test 指令所访问的内存地址所在的页将被标记为不可访问，而该指令也将触发 segfault，并借由 segfault 
处理器进入安全点之中。通常，该指令会附带<code>; {poll_return}</code>这样子的注释，这里被我略去了。</p> </blockquote> <blockquote> 
<p>在 X8_64 中，前几个传入参数会被放置于寄存器中，而返回值则需要存放在 rax 寄存器中。有时候你会看到返回值被存入 eax 寄存器中，这其实是同一个寄存器，只不过 rax 
表示 64 位寄存器，而 eax 表示 32 位寄存器。具体可以参考 x86 calling conventions[1]。</p> </blockquote> <p>当忽略掉创建、弹出方法栈桢，安全点测试以及其他无关指令之后，所剩下的方法体就只剩下偏移量为 
0x06ac 的 mov 指令，以及 0x06ba 的 ret 指令。前者将所传入的 int 型参数 x 移至代表返回值的 eax 寄存器中，后者是退出当前方法并返回至调用者中。</p> 
<p>虽然在部分情况下，逃逸分析以及基于逃逸分析的优化已经十分高效了，能够将代码优化到极其简单的地步，但是逃逸分析毕竟不是 Java 虚拟机的银色子弹。</p> <p>在现实中，Java 
程序中的对象或许本身便是逃逸的，或许因为方法内联不够彻底而被即时编译器当成是逃逸的。这两种情况都将导致即时编译器无法进行标量替换。这时候，针对对象字段访问的优化也变得格外重要起来。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> o.a = x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return o.a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，对象<code>o</code>是传入参数，不属于逃逸分析的范围（Java 
虚拟机中的逃逸分析针对的是新建对象）。该方法会将所传入的 int 型参数<code>x</code>的值存储至实例字段<code>Foo.a</code>中，然后再读取并返回同一字段的值。</p> 
<p>这段代码将涉及两次内存访问操作：存储以及读取实例字段<code>Foo.a</code>。我们可以轻易地将其手工优化为直接读取并返回传入参数 x 的值。由于这段代码较为简单，因此它极大可能被编译为寄存器之间的移动指令（即将输入参数<code>x</code>的值移至寄存器 
eax 中）。这与原本的内存访问指令相比，显然要高效得多。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> o.a = x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>那么即时编译器是否能够作出类似的自动优化呢？</p> <h2>字段读取优化</h2> 
<p>答案是可以的。即时编译器会优化实例字段以及静态字段访问，以减少总的内存访问数目。具体来说，它将沿着控制流，缓存各个字段存储节点将要存储的值，或者字段读取节点所得到的值。</p> 
<p>当即时编译器遇到对同一字段的读取节点时，如果缓存值还没有失效，那么它会将读取节点替换为该缓存值。</p> <p>当即时编译器遇到对同一字段的存储节点时，它会更新所缓存的值。当即时编译器遇到可能更新字段的节点时，如方法调用节点（在即时编译器看来，方法调用会执行未知代码），或者内存屏障节点（其他线程可能异步更新了字段），那么它会采取保守的策略，舍弃所有缓存值。</p> 
<p>在前面的例子中，我们见识了缓存字段存储节点的情况。下面我们来看一下缓存字段读取节点的情况。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int y = o.a + x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return o.a + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在上面这段代码中，实例字段<code>Foo.a</code>将被读取两次。即时编译器会将第一次读取的值缓存起来，并且替换第二次字段读取操作，以节省一次内存访问。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t = o.a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int y = t + x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>如果字段读取节点被替换成一个常量，那么它将进一步触发更多优化。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> o.a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (o.a &gt;= 0) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> else </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return -x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>例如在上面这段代码中，实例字段<code>Foo.a</code>会被赋值为 1。接下来的 if 语句将判断同一实例字段是否不小于 0。经过字段读取优化之后，<code>&gt;=</code>节点的两个输入参数分别为常数 
1 和 0，因此可以直接替换为具体结果<code>true</code>。如此一来，else 分支将变成不可达代码，可以直接删除，其优化结果如下所示。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
o.a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们再来看另一个例子。下面这段代码的<code>bar</code>方法中，实例字段<code>a</code>会被赋值为<code>true</code>，后面紧跟着一个以<code>a</code>为条件的 
while 循环。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> a = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> while (a) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void whatever() { a = false; } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>同样，即时编译器会将 while 循环中读取实例字段<code>a</code>的操作直接替换为常量<code>true</code>，即下面代码所示的死循环。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> while (true) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 生成的机器码将陷入这一死循环中 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x066b: mov r11,QWORD PTR [r15+0x70] // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x066f: test DWORD PTR [r11],eax // 安全点测试 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0672: jmp 0x066b // while (true) </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在介绍 Java 内存模型时，我们便知道可以通过 volatile 关键字标记实例字段<code>a</code>，以此强制对它的读取。</p> <p>实际上，即时编译器将在 
volatile 字段访问前后插入内存屏障节点。这些内存屏障节点会阻止即时编译器将屏障之前所缓存的值用于屏障之后的读取节点之上。</p> <p>就我们的例子而言，尽管在 X86_64 
平台上，volatile 字段读取操作前后的内存屏障是 no-op，在即时编译过程中的屏障节点，还是会阻止即时编译器的字段读取优化，强制在循环中使用内存读取指令访问实例字段<code>Foo.a</code>的最新值。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x00e0: movzx r11d,BYTE PTR [rbx+0xc] // 读取 a </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00e5: mov r10,QWORD PTR [r15+0x70] // 
安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00e9: 
test DWORD PTR [r10],eax // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 0x00ec: test r11d,r11d // while (a) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x00ef: jne 0x00e0 // while (a) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>同理，加锁、解锁操作也同样会阻止即时编译器的字段读取优化。</p> 
<h2>字段存储优化</h2> <p>除了字段读取优化之外，即时编译器还将消除冗余的存储节点。如果一个字段先后被存储了两次，而且这两次存储之间没有对第一次存储内容的读取，那么即时编译器可以将第一个字段存储给消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举例来说，上面这段代码中的<code>bar</code>方法先后存储了两次<code>Foo.a</code>实例字段。由于第一次存储之后没有读取<code>Foo.a</code>的值，因此，即时编译器会将其看成冗余存储，并将之消除掉，生成如下代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，即便是在这两个字段存储操作之间读取该字段，即时编译器还是有可能在字段读取优化的帮助下，将第一个存储操作当成冗余存储给消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int t = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> a = t 
+ 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 优化为 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = t + 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 进一步优化为 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当然，如果所存储的字段被标记为 volatile，那么即时编译器也不能将冗余的存储操作消除掉。</p> <p>这种情况看似很蠢，但实际上并不少见，比如说两个存储之间隔着许多其他代码，或者因为方法内联的缘故，将两个存储操作（如构造器中字段的初始化以及随后的更新）纳入同一个编译单元里。</p> 
<h2>死代码消除</h2> <p>除了字段存储优化之外，局部变量的死存储（dead store）同样也涉及了冗余存储。这是死代码消除（dead code eliminiation）的一种。不过，由于 
Sea-of-Nodes IR 的特性，死存储的优化无须额外代价。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(int x, int y) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int t = x*y; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码涉及两个存储局部变量操作。当即时编译器将其转换为 Sea-of-Nodes 
IR 之后，没有节点依赖于 t 的第一个值<code>x*y</code>。因此，该乘法运算将被消除，其结果如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int bar(int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>死存储还有一种变体，即在部分程序路径上有冗余存储。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(boolean 
f, int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int t = x*y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (f) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中，如果所传入的 boolean 类型的参数<code>f</code>是<code>true</code>，那么在程序执行路径上将先后进行两次对局部变量<code>t</code>的存储。</p> 
<p>同样，经过 Sea-of-Nodes IR 转换之后，返回节点所依赖的值是一个 phi 节点，将根据程序路径选择<code>x+y</code>或者<code>x*y</code>。也就是说，当<code>f</code>为<code>true</code>的程序路径上的乘法运算会被消除，其结果如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int bar(boolean f, int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (f) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> else 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x*y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>另一种死代码消除则是不可达分支消除。不可达分支就是任何程序路径都不可到达的分支，我们之前已经多次接触过了。</p> 
<p>在即时编译过程中，我们经常因为方法内联、常量传播以及基于 profile 的优化等，生成许多不可达分支。通过消除不可达分支，即时编译器可以精简数据流，并且减少编译时间以及最终生成机器码的大小。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int bar(int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (false) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
else </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
-x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，在上面的代码中，if 语句将一直跳转至 else 分支之中。因此，另一不可达分支可以直接消除掉，形成下面的代码：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int bar(int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return -x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <h2>总结与实践</h2> <p>今天我介绍了即时编译器关于字段访问的优化方式，以及死代码消除。</p> <p>即时编译器将沿着控制流缓存字段存储、读取的值，并在接下来的字段读取操作时直接使用该缓存值。</p> 
<p>这要求生成缓存值的访问以及使用缓存值的读取之间没有方法调用、内存屏障，或者其他可能存储该字段的节点。</p> <p>即时编译器还会优化冗余的字段存储操作。如果一个字段的两次存储之间没有对该字段的读取操作、方法调用以及内存屏障，那么即时编译器可以将第一个冗余的存储操作给消除掉。</p> 
<p>此外，我还介绍了死代码消除的两种形式。第一种是局部变量的死存储消除以及部分死存储消除。它们可以通过转换为 Sea-of-Nodes IR 来完成。第二种则是不可达分支。通过消除不可达分支，即时编译器可以精简数据流，并且减少编译时间以及最终生成机器码的大小。</p> 
<p>今天的实践环节，请思考即时编译器会怎么优化下面代码中的除法操作？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(int x, int y) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int t = x/y; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI">https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI</a><br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 5 msec}
2020-11-19 20:11:06.662 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.664 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:06.679 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在上一篇文章中，我介绍了逃逸分析，也介绍了基于逃逸分析的优化方式锁消除、栈上分配以及标量替换等内容。</p> <p>其中的标量替换，可以看成将对象本身拆散为一个个字段，并把原本对对象字段的访问，替换为对一个个局部变量的访问。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static int bar(int x) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo = new Foo(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo.a = x; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return foo.a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中的<code>bar</code>方法，经过逃逸分析以及标量替换后，其优化结果如下所示。（确切地说，是指所生成的 
IR 图与下述代码所生成的 IR 图类似。之后不再重复解释。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static int bar(int x) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int a = x; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>由于 Sea-of-Nodes IR 的特性，局部变量不复存在，取而代之的是一个个值。在例子对应的 
IR 图中，返回节点将直接返回所输入的参数。</p> <p><img src="https://static001.geekbang.org/resource/image/14/5d/14c64d61e81b764253a2fc96795d095d.png" 
alt=""></p> <p><strong>经过标量替换的<code>bar</code>方法</strong></p> <p>下面我列举了<code>bar</code>方法经由 
C2 即时编译生成的机器码（这里略去了指令地址的前 48 位）。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # {method} ''bar'' ''(I)I'' in ''FieldAccessTest'' 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # parm0: rsi = int // 参数 x </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # [sp+0x20] (sp of caller) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06a0: sub rsp,0x18 // 创建方法栈桢 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06a7: mov QWORD PTR [rsp+0x10],rbp // 
无关指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06ac: 
mov eax,esi // 将参数 x 存入返回值 eax 中 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06ae: add rsp,0x10 // 弹出方法栈桢 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06b2: pop rbp // 无关指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x06b3: mov r10,QWORD PTR [r15+0x70] // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x06b7: test DWORD PTR [r10],eax // 安全点测试 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x06ba: ret </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<blockquote> <p>在 X86_64 的机器码中，每当使用 call 指令进入目标方法的方法体中时，我们需要在栈上为当前方法分配一块内存作为其栈桢。而在退出该方法时，我们需要弹出当前方法所使用的栈桢。</p> 
</blockquote> <blockquote> <p>由于寄存器 rsp 维护着当前线程的栈顶指针，因此这些操作都是通过增减寄存器 rsp 来实现的，即上面这段机器码中偏移量为 
0x06a0 以及 0x06ae 的指令。</p> </blockquote><!-- [[[read_end]]] --> <blockquote> <p>在介绍安全点（safepoint）时我曾介绍过，HotSpot 
虚拟机的即时编译器将在方法返回时插入安全点测试指令，即图中偏移量为 0x06b3 以及 0x06ba 的指令。其中真正的安全点测试是 0x06b7 指令。</p> </blockquote> 
<blockquote> <p>如果虚拟机需要所有线程都到达安全点，那么该 test 指令所访问的内存地址所在的页将被标记为不可访问，而该指令也将触发 segfault，并借由 segfault 
处理器进入安全点之中。通常，该指令会附带<code>; {poll_return}</code>这样子的注释，这里被我略去了。</p> </blockquote> <blockquote> 
<p>在 X8_64 中，前几个传入参数会被放置于寄存器中，而返回值则需要存放在 rax 寄存器中。有时候你会看到返回值被存入 eax 寄存器中，这其实是同一个寄存器，只不过 rax 
表示 64 位寄存器，而 eax 表示 32 位寄存器。具体可以参考 x86 calling conventions[1]。</p> </blockquote> <p>当忽略掉创建、弹出方法栈桢，安全点测试以及其他无关指令之后，所剩下的方法体就只剩下偏移量为 
0x06ac 的 mov 指令，以及 0x06ba 的 ret 指令。前者将所传入的 int 型参数 x 移至代表返回值的 eax 寄存器中，后者是退出当前方法并返回至调用者中。</p> 
<p>虽然在部分情况下，逃逸分析以及基于逃逸分析的优化已经十分高效了，能够将代码优化到极其简单的地步，但是逃逸分析毕竟不是 Java 虚拟机的银色子弹。</p> <p>在现实中，Java 
程序中的对象或许本身便是逃逸的，或许因为方法内联不够彻底而被即时编译器当成是逃逸的。这两种情况都将导致即时编译器无法进行标量替换。这时候，针对对象字段访问的优化也变得格外重要起来。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> o.a = x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return o.a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，对象<code>o</code>是传入参数，不属于逃逸分析的范围（Java 
虚拟机中的逃逸分析针对的是新建对象）。该方法会将所传入的 int 型参数<code>x</code>的值存储至实例字段<code>Foo.a</code>中，然后再读取并返回同一字段的值。</p> 
<p>这段代码将涉及两次内存访问操作：存储以及读取实例字段<code>Foo.a</code>。我们可以轻易地将其手工优化为直接读取并返回传入参数 x 的值。由于这段代码较为简单，因此它极大可能被编译为寄存器之间的移动指令（即将输入参数<code>x</code>的值移至寄存器 
eax 中）。这与原本的内存访问指令相比，显然要高效得多。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> o.a = x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>那么即时编译器是否能够作出类似的自动优化呢？</p> <h2>字段读取优化</h2> 
<p>答案是可以的。即时编译器会优化实例字段以及静态字段访问，以减少总的内存访问数目。具体来说，它将沿着控制流，缓存各个字段存储节点将要存储的值，或者字段读取节点所得到的值。</p> 
<p>当即时编译器遇到对同一字段的读取节点时，如果缓存值还没有失效，那么它会将读取节点替换为该缓存值。</p> <p>当即时编译器遇到对同一字段的存储节点时，它会更新所缓存的值。当即时编译器遇到可能更新字段的节点时，如方法调用节点（在即时编译器看来，方法调用会执行未知代码），或者内存屏障节点（其他线程可能异步更新了字段），那么它会采取保守的策略，舍弃所有缓存值。</p> 
<p>在前面的例子中，我们见识了缓存字段存储节点的情况。下面我们来看一下缓存字段读取节点的情况。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int y = o.a + x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return o.a + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在上面这段代码中，实例字段<code>Foo.a</code>将被读取两次。即时编译器会将第一次读取的值缓存起来，并且替换第二次字段读取操作，以节省一次内存访问。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t = o.a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int y = t + x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>如果字段读取节点被替换成一个常量，那么它将进一步触发更多优化。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> o.a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (o.a &gt;= 0) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> else </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return -x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>例如在上面这段代码中，实例字段<code>Foo.a</code>会被赋值为 1。接下来的 if 语句将判断同一实例字段是否不小于 0。经过字段读取优化之后，<code>&gt;=</code>节点的两个输入参数分别为常数 
1 和 0，因此可以直接替换为具体结果<code>true</code>。如此一来，else 分支将变成不可达代码，可以直接删除，其优化结果如下所示。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static int bar(Foo o, int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
o.a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们再来看另一个例子。下面这段代码的<code>bar</code>方法中，实例字段<code>a</code>会被赋值为<code>true</code>，后面紧跟着一个以<code>a</code>为条件的 
while 循环。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> boolean a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> a = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> while (a) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
void whatever() { a = false; } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>同样，即时编译器会将 while 循环中读取实例字段<code>a</code>的操作直接替换为常量<code>true</code>，即下面代码所示的死循环。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> while (true) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 生成的机器码将陷入这一死循环中 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x066b: mov r11,QWORD PTR [r15+0x70] // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x066f: test DWORD PTR [r11],eax // 安全点测试 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0672: jmp 0x066b // while (true) </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在介绍 Java 内存模型时，我们便知道可以通过 volatile 关键字标记实例字段<code>a</code>，以此强制对它的读取。</p> <p>实际上，即时编译器将在 
volatile 字段访问前后插入内存屏障节点。这些内存屏障节点会阻止即时编译器将屏障之前所缓存的值用于屏障之后的读取节点之上。</p> <p>就我们的例子而言，尽管在 X86_64 
平台上，volatile 字段读取操作前后的内存屏障是 no-op，在即时编译过程中的屏障节点，还是会阻止即时编译器的字段读取优化，强制在循环中使用内存读取指令访问实例字段<code>Foo.a</code>的最新值。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x00e0: movzx r11d,BYTE PTR [rbx+0xc] // 读取 a </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00e5: mov r10,QWORD PTR [r15+0x70] // 
安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x00e9: 
test DWORD PTR [r10],eax // 安全点测试 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 0x00ec: test r11d,r11d // while (a) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x00ef: jne 0x00e0 // while (a) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>同理，加锁、解锁操作也同样会阻止即时编译器的字段读取优化。</p> 
<h2>字段存储优化</h2> <p>除了字段读取优化之外，即时编译器还将消除冗余的存储节点。如果一个字段先后被存储了两次，而且这两次存储之间没有对第一次存储内容的读取，那么即时编译器可以将第一个字段存储给消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举例来说，上面这段代码中的<code>bar</code>方法先后存储了两次<code>Foo.a</code>实例字段。由于第一次存储之后没有读取<code>Foo.a</code>的值，因此，即时编译器会将其看成冗余存储，并将之消除掉，生成如下代码：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，即便是在这两个字段存储操作之间读取该字段，即时编译器还是有可能在字段读取优化的帮助下，将第一个存储操作当成冗余存储给消除掉。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int t = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> a = t 
+ 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 优化为 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = t + 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 进一步优化为 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> void bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当然，如果所存储的字段被标记为 volatile，那么即时编译器也不能将冗余的存储操作消除掉。</p> <p>这种情况看似很蠢，但实际上并不少见，比如说两个存储之间隔着许多其他代码，或者因为方法内联的缘故，将两个存储操作（如构造器中字段的初始化以及随后的更新）纳入同一个编译单元里。</p> 
<h2>死代码消除</h2> <p>除了字段存储优化之外，局部变量的死存储（dead store）同样也涉及了冗余存储。这是死代码消除（dead code eliminiation）的一种。不过，由于 
Sea-of-Nodes IR 的特性，死存储的优化无须额外代价。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(int x, int y) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int t = x*y; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码涉及两个存储局部变量操作。当即时编译器将其转换为 Sea-of-Nodes 
IR 之后，没有节点依赖于 t 的第一个值<code>x*y</code>。因此，该乘法运算将被消除，其结果如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int bar(int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>死存储还有一种变体，即在部分程序路径上有冗余存储。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(boolean 
f, int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int t = x*y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (f) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中，如果所传入的 boolean 类型的参数<code>f</code>是<code>true</code>，那么在程序执行路径上将先后进行两次对局部变量<code>t</code>的存储。</p> 
<p>同样，经过 Sea-of-Nodes IR 转换之后，返回节点所依赖的值是一个 phi 节点，将根据程序路径选择<code>x+y</code>或者<code>x*y</code>。也就是说，当<code>f</code>为<code>true</code>的程序路径上的乘法运算会被消除，其结果如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int bar(boolean f, int x, int y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (f) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> else 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x*y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>另一种死代码消除则是不可达分支消除。不可达分支就是任何程序路径都不可到达的分支，我们之前已经多次接触过了。</p> 
<p>在即时编译过程中，我们经常因为方法内联、常量传播以及基于 profile 的优化等，生成许多不可达分支。通过消除不可达分支，即时编译器可以精简数据流，并且减少编译时间以及最终生成机器码的大小。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int bar(int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (false) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
else </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> return 
-x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，在上面的代码中，if 语句将一直跳转至 else 分支之中。因此，另一不可达分支可以直接消除掉，形成下面的代码：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int bar(int x) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return -x; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <h2>总结与实践</h2> <p>今天我介绍了即时编译器关于字段访问的优化方式，以及死代码消除。</p> <p>即时编译器将沿着控制流缓存字段存储、读取的值，并在接下来的字段读取操作时直接使用该缓存值。</p> 
<p>这要求生成缓存值的访问以及使用缓存值的读取之间没有方法调用、内存屏障，或者其他可能存储该字段的节点。</p> <p>即时编译器还会优化冗余的字段存储操作。如果一个字段的两次存储之间没有对该字段的读取操作、方法调用以及内存屏障，那么即时编译器可以将第一个冗余的存储操作给消除掉。</p> 
<p>此外，我还介绍了死代码消除的两种形式。第一种是局部变量的死存储消除以及部分死存储消除。它们可以通过转换为 Sea-of-Nodes IR 来完成。第二种则是不可达分支。通过消除不可达分支，即时编译器可以精简数据流，并且减少编译时间以及最终生成机器码的大小。</p> 
<p>今天的实践环节，请思考即时编译器会怎么优化下面代码中的除法操作？</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int bar(int x, int y) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int t = x/y; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> t = x+y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI">https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI</a><br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 5 msec}
2020-11-19 20:11:06.697 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=18 
 {executed in 1 msec}
2020-11-19 20:11:06.698 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:06.703 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=18 
 {executed in 2 msec}
2020-11-19 20:11:06.705 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:11:06.711 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787866, 1605787866, 1, 'zh-hans', 0, 1, 1, 
0, '24丨字段访问相关优化', 1, 18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.719 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=18 
 {executed in 1 msec}
2020-11-19 20:11:06.722 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:06.729 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787866, 1605787866, 1, 'zh-hans', 0, 
1, 1, 0, '24丨字段访问相关优化', 'book', 1, 18, 18) 
 {executed in 2 msec}
2020-11-19 20:11:06.736 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.738 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:06.742 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.744 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:06.750 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/2d43502664a95b036143e46e8d9f679f?bkt=en-26dcfdb4e5ee1a496b8c14bf714b1ebcbe0e246f2e6dbe6e91673cf27e16286956eed2dbfb6089e9&fid=3757516097-778750-457316073490472&time=1605787865&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-u3XIu68ctUm5GafY9nNJj%2FCyZlo%3D&to=92&size=4471606&sta_dx=4471606&sta_cs=4356&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4471606&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ab87b60e5c529ba2e7fc623a94a82cdade2effa33554e2ddbc96bdcab6896f8724a66d287df97695&sl=76480590&expires=8h&rt=pr&r=862961529&mlogid=7510787753036268733&vbdid=64799653&fin=24%E4%B8%A8%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510787753036268733&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5f2aaa70d2fd14de067f3365502e664ee936574bc32d0518&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=24%E4%B8%A8%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96.mp3', 
18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.759 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=18 
 {executed in 2 msec}
2020-11-19 20:11:06.761 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:06.772 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/2d43502664a95b036143e46e8d9f679f?bkt=en-26dcfdb4e5ee1a496b8c14bf714b1ebcbe0e246f2e6dbe6e91673cf27e16286956eed2dbfb6089e9&fid=3757516097-778750-457316073490472&time=1605787865&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-u3XIu68ctUm5GafY9nNJj%2FCyZlo%3D&to=92&size=4471606&sta_dx=4471606&sta_cs=4356&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4471606&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ab87b60e5c529ba2e7fc623a94a82cdade2effa33554e2ddbc96bdcab6896f8724a66d287df97695&sl=76480590&expires=8h&rt=pr&r=862961529&mlogid=7510787753036268733&vbdid=64799653&fin=24%E4%B8%A8%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96.mp3&bflag=92,34-92&rtype=1&dp-logid=7510787753036268733&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5f2aaa70d2fd14de067f3365502e664ee936574bc32d0518&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=24%E4%B8%A8%E5%AD%97%E6%AE%B5%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96.mp3', 
18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.781 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=18 
 {executed in 2 msec}
2020-11-19 20:11:06.784 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:06.788 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.790 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:06.801 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>qpm</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，请问一下，读这个专栏有点像涨视野的感觉，暂时来说对我看代码提供了新的灵感，但目前只能听，没法提问，这种感觉是是因为我底子不够么？还是我实践得比较少？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 按照自己的节奏学习就好啦，等以后遇到问题了也可以回来提问的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 希望老师推荐一本 JVM 书籍，（除了《深入理解java 虚拟机》，因为我发现最新出版也是2013年的） 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 除法操作直接消除，返回return x+y;&nbsp;&nbsp;&nbsp;&nbsp;？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 消除不了，有位同学答出来了，有除零异常</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> "其中真正的安全点测试是 0x06ba 指令"应该是0x06b7指令 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！已修改！</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/29/c6/7fd7efa3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xingoo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-05-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 字段缓存 <br>存储优化 <br>死代码消除:冗余代码，不可达代码 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/61/bbfb2d4a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>『LHCY』</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 不知道现在发还会不会回复。 <br>while（a.flag）{ 
<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(); <br>} <br>这种方式，在flag没有被volatile多线程方式修改flag=false会退出循环，是因为打印函数中的锁阻止了字段优化吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/1e/fd/a14d2be6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>誓言的梦</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有除零的异常 是通过什么手段/机制知道 还是写死的除法不能优化 或者回不回是通过 检测当输入除数为0就不优化 
输入不为0时才优化 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d9/c6/a295275b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>o</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 大佬，可否专门开一章讲讲对象的属性会在那些时候触发更新主存/用户内存？分别是单线程不同方法，多线程不同方法、多线程相同方法。是否和方法体大小也有关系？例如就是在该篇文章中，如果while的代码块足够简单就会形成死循环，但是如果加了输出语句就不会（之前测试volatile关键字的时候遇到过，晚点贴一下主要代码🙏） 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> Return x+y ； </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 课后实践中的除法无法优化，因为可能存在除零异常。即时编译器需要判断除数是否为0</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 因为x/y会有除0异常，这部分代码是否会被优化掉，不太确定，望老师指点。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的，因为有除0异常所以编译器没法优化掉这个除法</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这一篇洋洋洒洒，其实覆盖了更多后端优化的算法，是否可以罗列一下对应算法名称供参考？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 我记得就叫read elimination和write 
elimination。第三节的是dead store elimination和partial redundancy elimination。<br><br>Graal的相关代码在PEReadEliminationClosure以及ReadEliminationClosure中。可以自行阅读。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉写代码的能力水平跟编译器优化工作量还是有点关系的。 </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 一般我们写代码都会在保持代码可读性的同时，尽量减少编译器工作量</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 5 msec}
2020-11-19 20:11:06.815 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.819 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:06.831 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>qpm</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，请问一下，读这个专栏有点像涨视野的感觉，暂时来说对我看代码提供了新的灵感，但目前只能听，没法提问，这种感觉是是因为我底子不够么？还是我实践得比较少？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 按照自己的节奏学习就好啦，等以后遇到问题了也可以回来提问的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 希望老师推荐一本 JVM 书籍，（除了《深入理解java 虚拟机》，因为我发现最新出版也是2013年的） 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 除法操作直接消除，返回return x+y;&nbsp;&nbsp;&nbsp;&nbsp;？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 消除不了，有位同学答出来了，有除零异常</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> "其中真正的安全点测试是 0x06ba 指令"应该是0x06b7指令 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！已修改！</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/29/c6/7fd7efa3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xingoo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-05-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 字段缓存 <br>存储优化 <br>死代码消除:冗余代码，不可达代码 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/22/61/bbfb2d4a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>『LHCY』</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 不知道现在发还会不会回复。 <br>while（a.flag）{ 
<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(); <br>} <br>这种方式，在flag没有被volatile多线程方式修改flag=false会退出循环，是因为打印函数中的锁阻止了字段优化吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/1e/fd/a14d2be6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>誓言的梦</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有除零的异常 是通过什么手段/机制知道 还是写死的除法不能优化 或者回不回是通过 检测当输入除数为0就不优化 
输入不为0时才优化 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d9/c6/a295275b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>o</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 大佬，可否专门开一章讲讲对象的属性会在那些时候触发更新主存/用户内存？分别是单线程不同方法，多线程不同方法、多线程相同方法。是否和方法体大小也有关系？例如就是在该篇文章中，如果while的代码块足够简单就会形成死循环，但是如果加了输出语句就不会（之前测试volatile关键字的时候遇到过，晚点贴一下主要代码🙏） 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> Return x+y ； </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 课后实践中的除法无法优化，因为可能存在除零异常。即时编译器需要判断除数是否为0</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 因为x/y会有除0异常，这部分代码是否会被优化掉，不太确定，望老师指点。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的，因为有除0异常所以编译器没法优化掉这个除法</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这一篇洋洋洒洒，其实覆盖了更多后端优化的算法，是否可以罗列一下对应算法名称供参考？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 我记得就叫read elimination和write 
elimination。第三节的是dead store elimination和partial redundancy elimination。<br><br>Graal的相关代码在PEReadEliminationClosure以及ReadEliminationClosure中。可以自行阅读。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉写代码的能力水平跟编译器优化工作量还是有点关系的。 </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 一般我们写代码都会在保持代码可读性的同时，尽量减少编译器工作量</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 5 msec}
2020-11-19 20:11:06.843 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.845 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:06.852 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=18 
 {executed in 3 msec}
2020-11-19 20:11:06.853 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:06.860 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 18, 'https://static001.geekbang.org/resource/image/31/4e/314ffe519de65d5313327d1eb5097d4e.jpg', 
18) 
 {executed in 2 msec}
2020-11-19 20:11:06.868 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=18 
 {executed in 2 msec}
2020-11-19 20:11:06.870 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:06.875 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 18, 'https://static001.geekbang.org/resource/image/31/4e/314ffe519de65d5313327d1eb5097d4e.jpg', 
18) 
 {executed in 1 msec}
2020-11-19 20:11:06.881 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.883 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:06.889 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.895 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 20:11:06.896 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:06.901 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 20:11:06.910 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1071526948879964' 
 {executed in 1 msec}
2020-11-19 20:11:06.911 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.915 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787866, 1) 
 {executed in 1 msec}
2020-11-19 20:11:06.918 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787866, 1) 
 {executed in 0 msec}
2020-11-19 20:11:06.920 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|19            |
|--------------|

2020-11-19 20:11:06.931 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '2293d5d5-b0b2-42ff-85f3-a6617c78fdbb', 
19) 
 {executed in 1 msec}
2020-11-19 20:11:06.933 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '2293d5d5-b0b2-42ff-85f3-a6617c78fdbb', 19) 
 {executed in 0 msec}
2020-11-19 20:11:06.935 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|19            |
|--------------|

2020-11-19 20:11:06.948 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=19, revision_default=1, revision_timestamp=1605787866, 
revision_uid=1 where vid=19 
 {executed in 1 msec}
2020-11-19 20:11:06.957 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:06.959 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.965 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1071526948879964', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:06.977 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=19 
 {executed in 4 msec}
2020-11-19 20:11:06.979 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:06.988 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1071526948879964', 'zh-hans', 19, 19) 
 {executed in 2 msec}
2020-11-19 20:11:06.995 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=19 
 {executed in 1 msec}
2020-11-19 20:11:06.997 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:07.002 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=19 
 {executed in 1 msec}
2020-11-19 20:11:07.005 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:07.011 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 19, 0, 0, 0, 1, 0, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.018 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=19 
 {executed in 2 msec}
2020-11-19 20:11:07.020 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:07.025 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.027 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:07.032 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.041 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.043 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:07.048 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.054 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=19 
 {executed in 1 msec}
2020-11-19 20:11:07.056 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:07.060 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=19 
 {executed in 1 msec}
2020-11-19 20:11:07.062 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:11:07.067 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787867, 1605787867, 1, 'zh-hans', 0, 1, 1, 
0, '03-模块二：高效编译 (12讲)', 1, 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.074 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=19 
 {executed in 1 msec}
2020-11-19 20:11:07.076 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:07.081 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787867, 1605787867, 1, 'zh-hans', 0, 
1, 1, 0, '03-模块二：高效编译 (12讲)', 'book', 1, 19, 19) 
 {executed in 0 msec}
2020-11-19 20:11:07.087 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.089 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:07.093 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 20:11:07.094 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:07.099 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.105 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.107 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:07.112 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.117 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.119 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:07.123 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.125 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:07.129 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 20:11:07.136 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.138 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:07.144 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.150 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.152 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:07.156 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.159 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:07.165 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 19, '', 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.172 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.174 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:07.180 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 19, '', 19) 
 {executed in 0 msec}
2020-11-19 20:11:07.187 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 20:11:07.189 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:07.195 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:07.203 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=19 
 {executed in 2 msec}
2020-11-19 20:11:07.205 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:07.211 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 20:11:08.438 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119750304356059' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:11:08.440 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:46.594 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119750304356059' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:11:46.597 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:46.602 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1119750304356059', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:11:46.604 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1119750304356059', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:11:46.607 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|41            |
|--------------|

2020-11-19 20:11:46.622 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119750304356059' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:11:46.623 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:47.048 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1119750304356059' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:11:47.050 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:11:47.054 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1119750304356059', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:11:47.056 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1119750304356059', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:11:47.057 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|42            |
|--------------|

2020-11-19 20:11:47.070 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1119750304356059' 
 {executed in 1 msec}
2020-11-19 20:11:47.071 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:47.075 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787907, 1) 
 {executed in 1 msec}
2020-11-19 20:11:47.076 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787907, 1) 
 {executed in 0 msec}
2020-11-19 20:11:47.077 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|20            |
|--------------|

2020-11-19 20:11:47.087 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '7d2247d7-d2ae-483f-8c1d-0192ac29bf68', 
20) 
 {executed in 1 msec}
2020-11-19 20:11:47.088 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '7d2247d7-d2ae-483f-8c1d-0192ac29bf68', 20) 
 {executed in 0 msec}
2020-11-19 20:11:47.090 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|20            |
|--------------|

2020-11-19 20:11:47.101 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=20, revision_default=1, revision_timestamp=1605787907, 
revision_uid=1 where vid=20 
 {executed in 1 msec}
2020-11-19 20:11:47.109 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.111 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:47.116 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1119750304356059', 'zh-hans', 20, 20) 
 {executed in 1 msec}
2020-11-19 20:11:47.123 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.125 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:11:47.130 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1119750304356059', 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 20:11:47.139 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=20 
 {executed in 1 msec}
2020-11-19 20:11:47.141 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:47.145 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=20 
 {executed in 1 msec}
2020-11-19 20:11:47.148 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:11:47.154 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 20, 0, 0, 19, 0, 20) 
 {executed in 1 msec}
2020-11-19 20:11:47.160 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.163 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:47.166 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.169 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:47.196 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在前面的文章中，我曾使用了不少工具来辅助讲解，也收到了不少同学留言，说不了解这些工具，不知道都有什么用，应该怎么用。那么今天我便统一做一次具体的介绍。本篇代码较多，你可以点击文稿查看。</p> 
<h2>javap：查阅 Java 字节码</h2> <p>javap 是一个能够将 class 文件反汇编成人类可读格式的工具。在本专栏中，我们经常借助这个工具来查阅 Java 字节码。</p> 
<p>举个例子，在讲解异常处理那一篇中，我曾经展示过这么一段代码。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>编译过后，我们便可以使用 javap 来查阅 Foo.test 方法的字节码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javac Foo.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -p -v Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Classfile ../Foo.class </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Last modified ..; size 541 bytes </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Compiled from "Foo.java" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> minor version: 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> major version: 54 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SUPER 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> this_class: #7 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super_class: #8 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interfaces: 0, fields: 4, methods: 2, 
attributes: 1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#1 = Methodref #8.#23 // java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> #2 = Fieldref #7.#24 // Foo.tryBlock:I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #3 = Fieldref #7.#25 // Foo.finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #4 = Class #26 // java/lang/Exception 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #5 = Fieldref #7.#27 // Foo.catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #6 = Fieldref #7.#28 // Foo.methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #7 = Class #29 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #8 = Class #30 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #9 = Utf8 tryBlock </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #10 = Utf8 I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #11 = Utf8 catchBlock </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #12 = Utf8 finallyBlock </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #13 = Utf8 methodExit </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #14 = Utf8 &lt;init&gt; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #15 = Utf8 ()V </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #16 = Utf8 Code </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #17 = Utf8 LineNumberTable </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #18 = Utf8 test </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #19 = Utf8 StackMapTable </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #20 = Class #31 // java/lang/Throwable 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #21 = Utf8 SourceFile </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #22 = Utf8 Foo.java </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #23 = NameAndType #14:#15 // "&lt;init&gt;":()V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #24 = NameAndType #9:#10 // tryBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #25 = NameAndType #12:#10 // finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #26 = Utf8 java/lang/Exception </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #27 = NameAndType #11:#10 // catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #28 = NameAndType #13:#10 // methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #29 = Utf8 Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #30 = Utf8 java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #31 = Utf8 java/lang/Throwable </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private int catchBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="52"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="53"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private int methodExit; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="63"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="64"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="65"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="66"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="67"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=1, 
locals=1, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="68"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="69"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial 
#1 // Method java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> LineNumberTable: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 1: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="74"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="75"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="76"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="77"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="78"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=3, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="79"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="80"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: putfield #2 // Field tryBlock:I </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: putfield #5 // Field catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 20: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 21: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 33: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 34: athrow </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 37: putfield #6 // Field methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 5 13 Class java/lang<!-- [[[read_end]]] 
-->/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="107"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="108"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 13 
19 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="109"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LineNumberTable: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> line 9: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 5 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 10: 13 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 11: 14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 19 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 24 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 27 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 33 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 15: 35 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 16: 40 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> StackMapTable: number_of_entries = 3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> frame_type = 77 /* same_locals_1_stack_item 
*/ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="123"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack 
= [ class java/lang/Exception ] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="124"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
frame_type = 77 /* same_locals_1_stack_item */ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack = [ class java/lang/Throwable ] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> frame_type = 7 /* same */ </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> SourceFile: "Foo.java" </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这里面我用到了两个选项。第一个选项是 
-p。默认情况下 javap 会打印所有非私有的字段和方法，当加了 -p 选项后，它还将打印私有的字段和方法。第二个选项是 -v。它尽可能地打印所有信息。如果你只需要查阅方法对应的字节码，那么可以用 
-c 选项来替换 -v。</p> <p>javap 的 -v 选项的输出分为几大块。</p> <p>1. 基本信息，涵盖了原 class 文件的相关信息。</p> <p>class 
文件的版本号（minor version: 0，major version: 54），该类的访问权限（flags: (0x0021) ACC_PUBLIC, ACC_SUPER），该类（this_class: 
#7）以及父类（super_class: #8）的名字，所实现接口（interfaces: 0）、字段（fields: 4）、方法（methods: 2）以及属性（attributes: 
1）的数目。</p> <p>这里属性指的是 class 文件所携带的辅助信息，比如该 class 文件的源文件的名称。这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 
程序的调试，一般无须深入了解。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Classfile ../Foo.class </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Last modified ..; size 541 bytes </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Compiled from "Foo.java" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> minor version: 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> major version: 54 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SUPER 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> this_class: #7 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super_class: #8 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interfaces: 0, fields: 4, methods: 2, 
attributes: 1 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>class 文件的版本号指的是编译生成该 class 文件时所用的 JRE 版本。由较新的 
JRE 版本中的 javac 编译而成的 class 文件，不能在旧版本的 JRE 上跑，否则，会出现如下异常信息。（Java 8 对应的版本号为 52，Java 10 对应的版本号为 
54。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception in thread "main" java.lang.UnsupportedClassVersionError: 
Foo has been compiled by a more recent version of the Java Runtime (class file version 54.0), 
this version of the Java Runtime only recognizes class file versions up to 52.0 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>类的访问权限通常为 ACC_ 开头的常量。具体每个常量的意义可以查阅 Java 虚拟机规范 4.1 小节 [1]。</p> <p>2. 常量池，用来存放各种常量以及符号引用。</p> 
<p>常量池中的每一项都有一个对应的索引（如 #1），并且可能引用其他的常量池项（#1 = Methodref&nbsp;#8.#23）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#1 = Methodref #8.#23 // java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#8 = Class #30 // java/lang/Object </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#14 = Utf8 &lt;init&gt; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#15 = Utf8 ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> #23 = 
NameAndType #14:#15 // "&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#30 = Utf8 java/lang/Object </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举例来说，上图中的 1 号常量池项是一个指向 Object 类构造器的符号引用。它是由另外两个常量池项所构成。如果将它看成一个树结构的话，那么它的叶节点会是字符串常量，如下图所示。</p> 
<p><img src="https://static001.geekbang.org/resource/image/f8/8c/f87469e321c52b21b0d2abb88e7b288c.png" 
alt=""></p> <p>3. 字段区域，用来列举该类中的各个字段。</p> <p>这里最主要的信息便是该字段的类型（descriptor: I）以及访问权限（flags: (0x0002) 
ACC_PRIVATE）。对于声明为 final 的静态字段而言，如果它是基本类型或者字符串类型，那么字段区域还将包括它的常量值。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private int tryBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>另外，Java 虚拟机同样使用了“描述符”（descriptor）来描述字段的类型。具体的对照如下表所示。其中比较特殊的，我已经高亮显示。</p> <p>4. 
方法区域，用来列举该类中的各个方法。</p> <p>除了方法描述符以及访问权限之外，每个方法还包括最为重要的代码区域（Code:)。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=3, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 34: athrow </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
40: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception 
table: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> from 
to target type </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 13 Class java/lang/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 13 19 
27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LineNumberTable: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> line 9: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
line 16: 40 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> StackMapTable: 
number_of_entries = 3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
frame_type = 77 /* same_locals_1_stack_item */ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack = [ class java/lang/Exception ] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>代码区域一开始会声明该方法中的操作数栈（stack=2）和局部变量数目（locals=3）的最大值，以及该方法接收参数的个数（args_size=1）。注意这里局部变量指的是字节码中的局部变量，而非 
Java 程序中的局部变量。</p> <p>接下来则是该方法的字节码。每条字节码均标注了对应的偏移量（bytecode index，BCI），这是用来定位字节码的。比如说偏移量为 10 
的跳转字节码 10: goto 35，将跳转至偏移量为 35 的字节码 35: aload_0。</p> <p>紧跟着的异常表（Exception table:）也会使用偏移量来定位每个异常处理器所监控的范围（由 
from 到 to 的代码区域），以及异常处理器的起始位置（target）。除此之外，它还会声明所捕获的异常类型（type）。其中，any 指代任意异常类型。</p> <p>再接下来的行数表（LineNumberTable:）则是 
Java 源程序到字节码偏移量的映射。如果你在编译时使用了 -g 参数（javac -g Foo.java），那么这里还将出现局部变量表（LocalVariableTable:），展示 
Java 程序中每个局部变量的名字、类型以及作用域。</p> <p>行数表和局部变量表均属于调试信息。Java 虚拟机并不要求 class 文件必备这些信息。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
LocalVariableTable: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Start Length Slot Name Signature </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
14 5 1 e Ljava/lang/Exception; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 41 0 this LFoo; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>最后则是字节码操作数栈的映射表（StackMapTable: number_of_entries 
= 3）。该表描述的是字节码跳转后操作数栈的分布情况，一般被 Java 虚拟机用于验证所加载的类，以及即时编译相关的一些操作，正常情况下，你无须深入了解。</p> <h2>2.OpenJDK 
项目 Code Tools：实用小工具集</h2> <p>OpenJDK 的 Code Tools 项目 [2] 包含了好几个实用的小工具。</p> <p>在第一篇的实践环节中，我们使用了其中的字节码汇编器反汇编器 
ASMTools[3]，当前 6.0 版本的下载地址位于 [4]。ASMTools 的反汇编以及汇编操作所对应的命令分别为：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>和</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>该反汇编器的输出格式和 javap 的不尽相同。一般我只使用它来进行一些简单的字节码修改，以此生成无法直接由 
Java 编译器生成的类，它在 HotSpot 虚拟机自身的测试中比较常见。</p> <p>在第一篇的实践环节中，我们需要将整数 2 赋值到一个声明为 boolean 类型的局部变量中。我采取的做法是将编译生成的 
class 文件反汇编至一个文本文件中，然后找到 boolean flag = true 对应的字节码序列，也就是下面的两个。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
iconst_1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> istore_1; 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>将这里的 iconst_1 改为 iconst_2[5]，保存后再汇编至 class 文件即可完成第一篇实践环节的需求。</p> <p>除此之外，你还可以利用这一套工具来验证我之前文章中的一些结论。比如我说过 
class 文件允许出现参数类型相同、而返回类型不同的方法，并且，在作为库文件时 Java 编译器将使用先定义的那一个，来决定具体的返回类型。</p> <p>具体的验证方法便是在反汇编之后，利用文本编辑工具复制某一方法，并且更改该方法的描述符，保存后再汇编至 
class 文件。</p> <p>Code Tools 项目还包含另一个实用的小工具 JOL[6]，当前 0.9 版本的下载地址位于 [7]。JOL 可用于查阅 Java 虚拟机中对象的内存分布，具体可通过如下两条指令来实现。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -jar /path/to/jol-cli-0.9-full.jar internals java.util.HashMap 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -jar /path/to/jol-cli-0.9-full.jar 
estimates java.util.HashMap </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>3.ASM：Java 字节码框架</h2> <p>ASM[8] 是一个字节码分析及修改框架。它被广泛应用于许多项目之中，例如 
Groovy、Kotlin 的编译器，代码覆盖测试工具 Cobertura、JaCoCo，以及各式各样通过字节码注入实现的程序行为监控工具。甚至是 Java 8 中 Lambda 表达式的适配器类，也是借助 
ASM 来动态生成的。</p> <p>ASM 既可以生成新的 class 文件，也可以修改已有的 class 文件。前者相对比较简单一些。ASM 甚至还提供了一个辅助类 ASMifier，它将接收一个 
class 文件并且输出一段生成该 class 文件原始字节数组的代码。如果你想快速上手 ASM 的话，那么你可以借助 ASMifier 生成的代码来探索各个 API 的用法。</p> 
<p>下面我将借助 ASMifier，来生成第一篇实践环节所用到的类。（你可以通过该地址 [9] 下载 6.0-beta 版。）</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> boolean flag = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (flag) System.out.println("Hello, Java!"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag == true) System.out.println("Hello, 
JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }'' &gt; Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 这里的 javac 我使用的是 Java 8 版本的。ASM 6.0 可能暂不支持新版本的 
javac 编译出来的 class 文件 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ javac Foo.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /PATH/TO/asm-all-6.0_BETA.jar org.objectweb.asm.util.ASMifier Foo.class | tee FooDump.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class FooDump implements Opcodes { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static byte[] dump () throws Exception { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(0); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> FieldVisitor fv; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodVisitor mv; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> AnnotationVisitor av0; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "Foo", null, "java/lang/Object", 
null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, 
"main", "([Ljava/lang/String;)V", null, null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitInsn(ICONST_1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ISTORE, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ILOAD, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitInsn(RETURN); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitMaxs(2, 2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitEnd(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，ASMifier 
生成的代码中包含一个名为 FooDump 的类，其中定义了一个名为 dump 的方法。该方法将返回一个 byte 数组，其值为生成类的原始字节。</p> <p>在 dump 方法中，我们新建了功能类 
ClassWriter 的一个实例，并通过它来访问不同的成员，例如方法、字段等等。</p> <p>每当访问一种成员，我们便会得到另一个访问者。在上面这段代码中，当我们访问方法时（即 
visitMethod），便会得到一个 MethodVisitor。在接下来的代码中，我们会用这个 MethodVisitor 来访问（这里等同于生成）具体的指令。</p> <p>这便是 
ASM 所使用的访问者模式。当然，这段代码仅包含 ClassWriter 这一个访问者，因此看不出具体有什么好处。</p> <p>我们暂且不管这个访问者模式，先来看看如何实现第一篇课后实践的要求。首先，main 
方法中的 boolean flag = true; 语句对应的代码是：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitInsn(ICONST_1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitVarInsn(ISTORE, 1); </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>也就是说，我们只需将这里的 ICONST_1 更改为 ICONST_2，便可以满足要求。下面我用另一个类 Wrapper，来调用修改过后的 FooDump.dump 
方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo ''import java.nio.file.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Wrapper { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Files.write(Paths.get("Foo.class"), FooDump.dump()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> }'' &gt; Wrapper.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javac -cp /PATH/TO/asm-all-6.0_BETA.jar FooDump.java Wrapper.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /PATH/TO/asm-all-6.0_BETA.jar:. 
Wrapper </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java 
Foo </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里的输出结果应和通过 ASMTools 修改的结果一致。</p> <p>通过 ASM 来修改已有 class 文件则相对复杂一些。不过我们可以从下面这段简单的代码来开始学起：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassReader cr = new ClassReader("Foo"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cr.accept(cw, ClassReader.SKIP_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Files.write(Paths.get("Foo.class"), cw.toByteArray()); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这段代码的功能便是读取一个 
class 文件，将之转换为 ASM 的数据结构，然后再转换为原始字节数组。其中，我使用了两个功能类。除了已经介绍过的 ClassWriter 外，还有一个 ClassReader。</p> 
<p>ClassReader 将读取“Foo”类的原始字节，并且翻译成对应的访问请求。也就是说，在上面 ASMifier 生成的代码中的各个访问操作，现在都交给 ClassReader.accept 
这一方法来发出了。</p> <p>那么，如何修改这个 class 文件的字节码呢？原理很简单，就是将 ClassReader 的访问请求发给另外一个访问者，再由这个访问者委派给 ClassWriter。</p> 
<p>这样一来，新增操作可以通过在某一需要转发的请求后面附带新的请求来实现；删除操作可以通过不转发请求来实现；修改操作可以通过忽略原请求，新建并发出另外的请求来实现。</p> <p><img 
src="https://static001.geekbang.org/resource/image/2a/ce/2a5d6813e32b8f88abae2b9f7b151fce.png" 
alt=""></p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.nio.file.*; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.objectweb.asm.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class ASMHelper implements Opcodes { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class MyMethodVisitor extends MethodVisitor { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private MethodVisitor mv; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MyMethodVisitor(int api, MethodVisitor 
mv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> super(api, 
null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.mv 
= mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void visitCode() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitLdcInsn("Hello, World!"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", 
"println", "(Ljava/lang/String;)V", false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitInsn(RETURN); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitMaxs(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitEnd(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class MyClassVisitor extends ClassVisitor { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public MyClassVisitor(int api, ClassVisitor cv) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super(api, cv); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
MethodVisitor visitMethod(int access, String name, String descriptor, String signature, </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String[] exceptions) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodVisitor visitor = super.visitMethod(access, 
name, descriptor, signature, exceptions); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if ("main".equals(name)) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new MyMethodVisitor(ASM6, visitor); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return visitor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassReader cr = new ClassReader("Foo"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassVisitor cv = new MyClassVisitor(ASM6, 
cw); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> cr.accept(cv, 
ClassReader.SKIP_FRAMES); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Files.write(Paths.get("Foo.class"), cw.toByteArray()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里我贴了一段代码，在 ClassReader 和 ClassWriter 中间插入了一个自定义的访问者 MyClassVisitor。它将截获由 ClassReader 
发出的对名字为“main”的方法的访问请求，并且替换为另一个自定义的 MethodVisitor。</p> <p>这个 MethodVisitor 会忽略由 ClassReader 
发出的任何请求，仅在遇到 visitCode 请求时，生成一句“System.out.println(“Hello World!”);”。</p> <p>由于篇幅的限制，我就不继续深入介绍下去了。如果你对 
ASM 有浓厚的兴趣，可以参考这篇教程 [10]。</p> <p>你对这些常用工具还有哪些问题呢？可以给我留言，我们一起讨论。感谢你的收听，我们下期再见。</p> <p>[1]<br> 
<a href="https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1">https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1</a><br> 
[2]<br> <a href="http://openjdk.java.net/projects/code-tools/">http://openjdk.java.net/projects/code-tools/</a><br> 
[3]<br> <a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a><br> 
[4]<br> <a href="https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz">https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz</a><br> 
[5]<br> <a href="https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html">https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html</a><br> 
[6]<br> <a href="http://openjdk.java.net/projects/code-tools/jol/">http://openjdk.java.net/projects/code-tools/jol/</a><br> 
[7]<br> <a href="http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar">http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar</a><br> 
[8]<br> <a href="https://asm.ow2.io/">https://asm.ow2.io/</a><br> [9]<br> <a href="https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar">https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar</a><br> 
[10]<br> <a href="http://web.cs.ucla.edu/~msb/cs239-tutorial/">http://web.cs.ucla.edu/~msb/cs239-tutorial/</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 10 msec}
2020-11-19 20:11:47.221 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=20 
 {executed in 2 msec}
2020-11-19 20:11:47.223 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:11:47.246 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在前面的文章中，我曾使用了不少工具来辅助讲解，也收到了不少同学留言，说不了解这些工具，不知道都有什么用，应该怎么用。那么今天我便统一做一次具体的介绍。本篇代码较多，你可以点击文稿查看。</p> 
<h2>javap：查阅 Java 字节码</h2> <p>javap 是一个能够将 class 文件反汇编成人类可读格式的工具。在本专栏中，我们经常借助这个工具来查阅 Java 字节码。</p> 
<p>举个例子，在讲解异常处理那一篇中，我曾经展示过这么一段代码。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int catchBlock; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int methodExit; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void test() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> try { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
tryBlock = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} catch (Exception e) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
catchBlock = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} finally { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> finallyBlock 
= 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> methodExit = 3; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>编译过后，我们便可以使用 javap 来查阅 Foo.test 方法的字节码。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javac Foo.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javap -p -v Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Classfile ../Foo.class </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Last modified ..; size 541 bytes </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Compiled from "Foo.java" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> minor version: 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> major version: 54 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SUPER 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> this_class: #7 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super_class: #8 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interfaces: 0, fields: 4, methods: 2, 
attributes: 1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#1 = Methodref #8.#23 // java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> #2 = Fieldref #7.#24 // Foo.tryBlock:I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #3 = Fieldref #7.#25 // Foo.finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #4 = Class #26 // java/lang/Exception 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #5 = Fieldref #7.#27 // Foo.catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #6 = Fieldref #7.#28 // Foo.methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #7 = Class #29 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #8 = Class #30 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #9 = Utf8 tryBlock </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #10 = Utf8 I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #11 = Utf8 catchBlock </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #12 = Utf8 finallyBlock </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #13 = Utf8 methodExit </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #14 = Utf8 &lt;init&gt; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #15 = Utf8 ()V </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #16 = Utf8 Code </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #17 = Utf8 LineNumberTable </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #18 = Utf8 test </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #19 = Utf8 StackMapTable </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #20 = Class #31 // java/lang/Throwable 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #21 = Utf8 SourceFile </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #22 = Utf8 Foo.java </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #23 = NameAndType #14:#15 // "&lt;init&gt;":()V 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #24 = NameAndType #9:#10 // tryBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #25 = NameAndType #12:#10 // finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #26 = Utf8 java/lang/Exception </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #27 = NameAndType #11:#10 // catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #28 = NameAndType #13:#10 // methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #29 = Utf8 Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #30 = Utf8 java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> #31 = Utf8 java/lang/Throwable </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private int tryBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="51"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private int catchBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="52"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="53"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="54"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private int finallyBlock; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private int methodExit; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="63"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="64"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="65"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="66"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="67"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=1, 
locals=1, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="68"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="69"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: invokespecial 
#1 // Method java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> LineNumberTable: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 1: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="74"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="75"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="76"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="77"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="78"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=3, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="79"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="80"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: iconst_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: putfield #2 // Field tryBlock:I </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: astore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: iconst_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: putfield #5 // Field catchBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 19: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 20: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 21: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 24: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 27: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: iconst_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: putfield #3 // Field finallyBlock:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 33: aload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 34: athrow </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 36: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 37: putfield #6 // Field methodExit:I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 40: return </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> from to target type </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 5 13 Class java/lang<!-- [[[read_end]]] 
-->/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="107"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="108"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 13 
19 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="109"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LineNumberTable: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> line 9: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 5 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 10 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 10: 13 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 11: 14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 19 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 24 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 13: 27 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 14: 33 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 15: 35 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> line 16: 40 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> StackMapTable: number_of_entries = 3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> frame_type = 77 /* same_locals_1_stack_item 
*/ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="123"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack 
= [ class java/lang/Exception ] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="124"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
frame_type = 77 /* same_locals_1_stack_item */ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack = [ class java/lang/Throwable ] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> frame_type = 7 /* same */ </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> SourceFile: "Foo.java" </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这里面我用到了两个选项。第一个选项是 
-p。默认情况下 javap 会打印所有非私有的字段和方法，当加了 -p 选项后，它还将打印私有的字段和方法。第二个选项是 -v。它尽可能地打印所有信息。如果你只需要查阅方法对应的字节码，那么可以用 
-c 选项来替换 -v。</p> <p>javap 的 -v 选项的输出分为几大块。</p> <p>1. 基本信息，涵盖了原 class 文件的相关信息。</p> <p>class 
文件的版本号（minor version: 0，major version: 54），该类的访问权限（flags: (0x0021) ACC_PUBLIC, ACC_SUPER），该类（this_class: 
#7）以及父类（super_class: #8）的名字，所实现接口（interfaces: 0）、字段（fields: 4）、方法（methods: 2）以及属性（attributes: 
1）的数目。</p> <p>这里属性指的是 class 文件所携带的辅助信息，比如该 class 文件的源文件的名称。这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 
程序的调试，一般无须深入了解。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Classfile ../Foo.class </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Last modified ..; size 541 bytes </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Compiled from "Foo.java" </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class Foo </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> minor version: 0 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> major version: 54 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SUPER 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> this_class: #7 // Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super_class: #8 // java/lang/Object </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> interfaces: 0, fields: 4, methods: 2, 
attributes: 1 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>class 文件的版本号指的是编译生成该 class 文件时所用的 JRE 版本。由较新的 
JRE 版本中的 javac 编译而成的 class 文件，不能在旧版本的 JRE 上跑，否则，会出现如下异常信息。（Java 8 对应的版本号为 52，Java 10 对应的版本号为 
54。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception in thread "main" java.lang.UnsupportedClassVersionError: 
Foo has been compiled by a more recent version of the Java Runtime (class file version 54.0), 
this version of the Java Runtime only recognizes class file versions up to 52.0 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>类的访问权限通常为 ACC_ 开头的常量。具体每个常量的意义可以查阅 Java 虚拟机规范 4.1 小节 [1]。</p> <p>2. 常量池，用来存放各种常量以及符号引用。</p> 
<p>常量池中的每一项都有一个对应的索引（如 #1），并且可能引用其他的常量池项（#1 = Methodref&nbsp;#8.#23）。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Constant pool: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#1 = Methodref #8.#23 // java/lang/Object."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#8 = Class #30 // java/lang/Object </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#14 = Utf8 &lt;init&gt; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#15 = Utf8 ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> #23 = 
NameAndType #14:#15 // "&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
#30 = Utf8 java/lang/Object </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>举例来说，上图中的 1 号常量池项是一个指向 Object 类构造器的符号引用。它是由另外两个常量池项所构成。如果将它看成一个树结构的话，那么它的叶节点会是字符串常量，如下图所示。</p> 
<p><img src="https://static001.geekbang.org/resource/image/f8/8c/f87469e321c52b21b0d2abb88e7b288c.png" 
alt=""></p> <p>3. 字段区域，用来列举该类中的各个字段。</p> <p>这里最主要的信息便是该字段的类型（descriptor: I）以及访问权限（flags: (0x0002) 
ACC_PRIVATE）。对于声明为 final 的静态字段而言，如果它是基本类型或者字符串类型，那么字段区域还将包括它的常量值。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private int tryBlock; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: I </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0002) ACC_PRIVATE </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>另外，Java 虚拟机同样使用了“描述符”（descriptor）来描述字段的类型。具体的对照如下表所示。其中比较特殊的，我已经高亮显示。</p> <p>4. 
方法区域，用来列举该类中的各个方法。</p> <p>除了方法描述符以及访问权限之外，每个方法还包括最为重要的代码区域（Code:)。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void test(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
descriptor: ()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=3, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: goto 35 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 34: athrow </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 35: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
40: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Exception 
table: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> from 
to target type </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 13 Class java/lang/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 5 27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 13 19 
27 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LineNumberTable: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> line 9: 0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
line 16: 40 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> StackMapTable: 
number_of_entries = 3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
frame_type = 77 /* same_locals_1_stack_item */ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack = [ class java/lang/Exception ] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>代码区域一开始会声明该方法中的操作数栈（stack=2）和局部变量数目（locals=3）的最大值，以及该方法接收参数的个数（args_size=1）。注意这里局部变量指的是字节码中的局部变量，而非 
Java 程序中的局部变量。</p> <p>接下来则是该方法的字节码。每条字节码均标注了对应的偏移量（bytecode index，BCI），这是用来定位字节码的。比如说偏移量为 10 
的跳转字节码 10: goto 35，将跳转至偏移量为 35 的字节码 35: aload_0。</p> <p>紧跟着的异常表（Exception table:）也会使用偏移量来定位每个异常处理器所监控的范围（由 
from 到 to 的代码区域），以及异常处理器的起始位置（target）。除此之外，它还会声明所捕获的异常类型（type）。其中，any 指代任意异常类型。</p> <p>再接下来的行数表（LineNumberTable:）则是 
Java 源程序到字节码偏移量的映射。如果你在编译时使用了 -g 参数（javac -g Foo.java），那么这里还将出现局部变量表（LocalVariableTable:），展示 
Java 程序中每个局部变量的名字、类型以及作用域。</p> <p>行数表和局部变量表均属于调试信息。Java 虚拟机并不要求 class 文件必备这些信息。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
LocalVariableTable: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Start Length Slot Name Signature </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
14 5 1 e Ljava/lang/Exception; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 41 0 this LFoo; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>最后则是字节码操作数栈的映射表（StackMapTable: number_of_entries 
= 3）。该表描述的是字节码跳转后操作数栈的分布情况，一般被 Java 虚拟机用于验证所加载的类，以及即时编译相关的一些操作，正常情况下，你无须深入了解。</p> <h2>2.OpenJDK 
项目 Code Tools：实用小工具集</h2> <p>OpenJDK 的 Code Tools 项目 [2] 包含了好几个实用的小工具。</p> <p>在第一篇的实践环节中，我们使用了其中的字节码汇编器反汇编器 
ASMTools[3]，当前 6.0 版本的下载地址位于 [4]。ASMTools 的反汇编以及汇编操作所对应的命令分别为：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>和</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main 
Foo.jasm </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>该反汇编器的输出格式和 javap 的不尽相同。一般我只使用它来进行一些简单的字节码修改，以此生成无法直接由 
Java 编译器生成的类，它在 HotSpot 虚拟机自身的测试中比较常见。</p> <p>在第一篇的实践环节中，我们需要将整数 2 赋值到一个声明为 boolean 类型的局部变量中。我采取的做法是将编译生成的 
class 文件反汇编至一个文本文件中，然后找到 boolean flag = true 对应的字节码序列，也就是下面的两个。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
iconst_1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> istore_1; 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>将这里的 iconst_1 改为 iconst_2[5]，保存后再汇编至 class 文件即可完成第一篇实践环节的需求。</p> <p>除此之外，你还可以利用这一套工具来验证我之前文章中的一些结论。比如我说过 
class 文件允许出现参数类型相同、而返回类型不同的方法，并且，在作为库文件时 Java 编译器将使用先定义的那一个，来决定具体的返回类型。</p> <p>具体的验证方法便是在反汇编之后，利用文本编辑工具复制某一方法，并且更改该方法的描述符，保存后再汇编至 
class 文件。</p> <p>Code Tools 项目还包含另一个实用的小工具 JOL[6]，当前 0.9 版本的下载地址位于 [7]。JOL 可用于查阅 Java 虚拟机中对象的内存分布，具体可通过如下两条指令来实现。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -jar /path/to/jol-cli-0.9-full.jar internals java.util.HashMap 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -jar /path/to/jol-cli-0.9-full.jar 
estimates java.util.HashMap </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>3.ASM：Java 字节码框架</h2> <p>ASM[8] 是一个字节码分析及修改框架。它被广泛应用于许多项目之中，例如 
Groovy、Kotlin 的编译器，代码覆盖测试工具 Cobertura、JaCoCo，以及各式各样通过字节码注入实现的程序行为监控工具。甚至是 Java 8 中 Lambda 表达式的适配器类，也是借助 
ASM 来动态生成的。</p> <p>ASM 既可以生成新的 class 文件，也可以修改已有的 class 文件。前者相对比较简单一些。ASM 甚至还提供了一个辅助类 ASMifier，它将接收一个 
class 文件并且输出一段生成该 class 文件原始字节数组的代码。如果你想快速上手 ASM 的话，那么你可以借助 ASMifier 生成的代码来探索各个 API 的用法。</p> 
<p>下面我将借助 ASMifier，来生成第一篇实践环节所用到的类。（你可以通过该地址 [9] 下载 6.0-beta 版。）</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ echo '' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> boolean flag = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (flag) System.out.println("Hello, Java!"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (flag == true) System.out.println("Hello, 
JVM!"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> }'' &gt; Foo.java </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # 这里的 javac 我使用的是 Java 8 版本的。ASM 6.0 可能暂不支持新版本的 
javac 编译出来的 class 文件 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ javac Foo.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ java -cp /PATH/TO/asm-all-6.0_BETA.jar org.objectweb.asm.util.ASMifier Foo.class | tee FooDump.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class FooDump implements Opcodes { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static byte[] dump () throws Exception { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(0); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> FieldVisitor fv; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodVisitor mv; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> AnnotationVisitor av0; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "Foo", null, "java/lang/Object", 
null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, 
"main", "([Ljava/lang/String;)V", null, null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitInsn(ICONST_1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ISTORE, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitVarInsn(ILOAD, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitInsn(RETURN); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitMaxs(2, 2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
mv.visitEnd(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，ASMifier 
生成的代码中包含一个名为 FooDump 的类，其中定义了一个名为 dump 的方法。该方法将返回一个 byte 数组，其值为生成类的原始字节。</p> <p>在 dump 方法中，我们新建了功能类 
ClassWriter 的一个实例，并通过它来访问不同的成员，例如方法、字段等等。</p> <p>每当访问一种成员，我们便会得到另一个访问者。在上面这段代码中，当我们访问方法时（即 
visitMethod），便会得到一个 MethodVisitor。在接下来的代码中，我们会用这个 MethodVisitor 来访问（这里等同于生成）具体的指令。</p> <p>这便是 
ASM 所使用的访问者模式。当然，这段代码仅包含 ClassWriter 这一个访问者，因此看不出具体有什么好处。</p> <p>我们暂且不管这个访问者模式，先来看看如何实现第一篇课后实践的要求。首先，main 
方法中的 boolean flag = true; 语句对应的代码是：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitInsn(ICONST_1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitVarInsn(ISTORE, 1); </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>也就是说，我们只需将这里的 ICONST_1 更改为 ICONST_2，便可以满足要求。下面我用另一个类 Wrapper，来调用修改过后的 FooDump.dump 
方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo ''import java.nio.file.*; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Wrapper { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Files.write(Paths.get("Foo.class"), FooDump.dump()); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> }'' &gt; Wrapper.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ javac -cp /PATH/TO/asm-all-6.0_BETA.jar FooDump.java Wrapper.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java -cp /PATH/TO/asm-all-6.0_BETA.jar:. 
Wrapper </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> $ java 
Foo </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里的输出结果应和通过 ASMTools 修改的结果一致。</p> <p>通过 ASM 来修改已有 class 文件则相对复杂一些。不过我们可以从下面这段简单的代码来开始学起：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassReader cr = new ClassReader("Foo"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cr.accept(cw, ClassReader.SKIP_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Files.write(Paths.get("Foo.class"), cw.toByteArray()); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这段代码的功能便是读取一个 
class 文件，将之转换为 ASM 的数据结构，然后再转换为原始字节数组。其中，我使用了两个功能类。除了已经介绍过的 ClassWriter 外，还有一个 ClassReader。</p> 
<p>ClassReader 将读取“Foo”类的原始字节，并且翻译成对应的访问请求。也就是说，在上面 ASMifier 生成的代码中的各个访问操作，现在都交给 ClassReader.accept 
这一方法来发出了。</p> <p>那么，如何修改这个 class 文件的字节码呢？原理很简单，就是将 ClassReader 的访问请求发给另外一个访问者，再由这个访问者委派给 ClassWriter。</p> 
<p>这样一来，新增操作可以通过在某一需要转发的请求后面附带新的请求来实现；删除操作可以通过不转发请求来实现；修改操作可以通过忽略原请求，新建并发出另外的请求来实现。</p> <p><img 
src="https://static001.geekbang.org/resource/image/2a/ce/2a5d6813e32b8f88abae2b9f7b151fce.png" 
alt=""></p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import java.nio.file.*; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.objectweb.asm.*; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class ASMHelper implements Opcodes { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class MyMethodVisitor extends MethodVisitor { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> private MethodVisitor mv; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public MyMethodVisitor(int api, MethodVisitor 
mv) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> super(api, 
null); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> this.mv 
= mv; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void visitCode() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitLdcInsn("Hello, World!"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", 
"println", "(Ljava/lang/String;)V", false); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitInsn(RETURN); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitMaxs(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> mv.visitEnd(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class MyClassVisitor extends ClassVisitor { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public MyClassVisitor(int api, ClassVisitor cv) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> super(api, cv); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
MethodVisitor visitMethod(int access, String name, String descriptor, String signature, </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String[] exceptions) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> MethodVisitor visitor = super.visitMethod(access, 
name, descriptor, signature, exceptions); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if ("main".equals(name)) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return new MyMethodVisitor(ASM6, visitor); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return visitor; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="40"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) throws Exception { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassReader cr = new ClassReader("Foo"); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ClassVisitor cv = new MyClassVisitor(ASM6, 
cw); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="46"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> cr.accept(cv, 
ClassReader.SKIP_FRAMES); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="47"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Files.write(Paths.get("Foo.class"), cw.toByteArray()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="49"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>这里我贴了一段代码，在 ClassReader 和 ClassWriter 中间插入了一个自定义的访问者 MyClassVisitor。它将截获由 ClassReader 
发出的对名字为“main”的方法的访问请求，并且替换为另一个自定义的 MethodVisitor。</p> <p>这个 MethodVisitor 会忽略由 ClassReader 
发出的任何请求，仅在遇到 visitCode 请求时，生成一句“System.out.println(“Hello World!”);”。</p> <p>由于篇幅的限制，我就不继续深入介绍下去了。如果你对 
ASM 有浓厚的兴趣，可以参考这篇教程 [10]。</p> <p>你对这些常用工具还有哪些问题呢？可以给我留言，我们一起讨论。感谢你的收听，我们下期再见。</p> <p>[1]<br> 
<a href="https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1">https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1</a><br> 
[2]<br> <a href="http://openjdk.java.net/projects/code-tools/">http://openjdk.java.net/projects/code-tools/</a><br> 
[3]<br> <a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a><br> 
[4]<br> <a href="https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz">https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz</a><br> 
[5]<br> <a href="https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html">https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html</a><br> 
[6]<br> <a href="http://openjdk.java.net/projects/code-tools/jol/">http://openjdk.java.net/projects/code-tools/jol/</a><br> 
[7]<br> <a href="http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar">http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar</a><br> 
[8]<br> <a href="https://asm.ow2.io/">https://asm.ow2.io/</a><br> [9]<br> <a href="https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar">https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar</a><br> 
[10]<br> <a href="http://web.cs.ucla.edu/~msb/cs239-tutorial/">http://web.cs.ucla.edu/~msb/cs239-tutorial/</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 8 msec}
2020-11-19 20:11:47.268 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=20 
 {executed in 2 msec}
2020-11-19 20:11:47.270 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:47.277 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=20 
 {executed in 2 msec}
2020-11-19 20:11:47.279 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:11:47.285 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787907, 1605787907, 1, 'zh-hans', 0, 1, 1, 
0, '【工具篇】常用工具介绍', 1, 20, 20) 
 {executed in 1 msec}
2020-11-19 20:11:47.309 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=20 
 {executed in 1 msec}
2020-11-19 20:11:47.311 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:11:47.319 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787907, 1605787907, 1, 'zh-hans', 0, 
1, 1, 0, '【工具篇】常用工具介绍', 'book', 1, 20, 20) 
 {executed in 2 msec}
2020-11-19 20:11:47.343 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.345 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:47.349 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.351 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:47.378 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c2e74c0b7845ec295c69e3b13be1fff3?bkt=en-2bd419aa17f4904f8acdabc64649fb4a57ecb6852786562a0315ae0e5bd4c4a9c5c037aeae4f8504&fid=3757516097-778750-806494686020408&time=1605787905&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-pbTctVS%2B%2B6NWhFwL7pmnIDnF4Eg%3D&to=92&size=5022265&sta_dx=5022265&sta_cs=4307&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5022265&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-90802db5f248d3c85b56183b521a45ed154f40b7d9c606bf11bb59ee750175dfb2bc15de6f60b88e&sl=76480590&expires=8h&rt=pr&r=255856174&mlogid=7510798660650456610&vbdid=64799653&fin=%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.mp3&bflag=92,34-92&rtype=1&dp-logid=7510798660650456610&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b6ffb54ee86992d77da7e20f7dfd96886&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.mp3', 
20, 20) 
 {executed in 22 msec}
2020-11-19 20:11:47.388 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=20 
 {executed in 2 msec}
2020-11-19 20:11:47.390 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:11:47.402 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c2e74c0b7845ec295c69e3b13be1fff3?bkt=en-2bd419aa17f4904f8acdabc64649fb4a57ecb6852786562a0315ae0e5bd4c4a9c5c037aeae4f8504&fid=3757516097-778750-806494686020408&time=1605787905&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-pbTctVS%2B%2B6NWhFwL7pmnIDnF4Eg%3D&to=92&size=5022265&sta_dx=5022265&sta_cs=4307&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5022265&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-90802db5f248d3c85b56183b521a45ed154f40b7d9c606bf11bb59ee750175dfb2bc15de6f60b88e&sl=76480590&expires=8h&rt=pr&r=255856174&mlogid=7510798660650456610&vbdid=64799653&fin=%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.mp3&bflag=92,34-92&rtype=1&dp-logid=7510798660650456610&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b6ffb54ee86992d77da7e20f7dfd96886&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.mp3', 
20, 20) 
 {executed in 4 msec}
2020-11-19 20:11:47.411 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.413 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:47.418 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.420 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:47.431 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/02/72/6933412b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刹那间的永...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">32</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 果然还是一点都看不懂，老师，什么阶段适合接触虚拟机？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Thomas</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师后面讲下反射跟动态代理～很期待专门写一篇JAVA特性的原理。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaobang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 能系统的介绍下Java字节码吗，每次看到都是靠猜 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaobang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 能系统介绍下Java字节码吗？每次都是靠猜 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/59/08065309.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雨亦奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 666 <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/95/1b/ca2023e6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>hey,吕布</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，文中代码格式异常了，早上打开还好的 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这么诡异，我反馈一下</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>东方</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> ClassWriter继承并实现了虚基类ClassVisitor，实现了一系列的vist*方法(读取class信息至内存) 
<br> <br> <br>MyClassVisitor继承ClassWriter，只复写(Override)了visitMethod方法，当且仅当方法名称等于main时，才替换用自定义内容替换 
<br> <br> <br>整个逻辑等于说，读Foo.class到内存中，重新写一个Foo.class文件，main方法替换为"新内容"，其他保持不变 <br> <br> <br> 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>郑童文</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我不太明白 用ASM反汇编class 文件 之后不就改得到java源文件吗？为什么还有java 
之外的关键字? </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么我允许F oo Dump报无法加载主类?是因为没有main方法? 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！应该是Wrapper，而且cp也需要添加当前目录，即-cp 
/path/to/ASM.jar:. Wrapper<br><br></p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/a0/2240fb2c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>capo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 你好,代码ASMHelper.java中 MethodVisitor ClassVIsitor 应该都是Interface吧？super.visitMethod怎么调用的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这里有点隐晦难懂 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/c1/86/afd6e862.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王浩</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看了一遍没看没白,建议多讲些细节,比如如何使用javap查看字节码,说详细些,各种工具的特点是什么,最常用的工具是哪个,在什么场景下使用。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xuery</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 仔细看了下教程[10], 更加深刻的理解了如何通过修改字节码文件来达到修改类的效果，感谢，坚持深挖下去 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/4f/7e/4a053154.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bgmall</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> javap 查看class文件 <br> <br>基础md5 
jdk版本 <br> <br>常量池 <br> <br>字段描述 访问权限 <br> <br>方法代码栈 <br> <br>异常表(有异常捕获的才有) </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/1b/93/e3b44969.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>sgl</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 为什么方法里用的指令只有入栈，没有出栈？难道putfield这类指令，用了操作数栈上的数据以后，会自己调用出栈指令？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: putfield 可以想成 出栈再消耗数据</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/75/ca/15b32bc5.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>猎羽</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 写的不错，支持一下 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/75/ca/15b32bc5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>猎羽</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 写的不错，支持一下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 我的问题是reflection inflation后，jdk会生成字节码和相应的delegation 
classloader，这部分objects会在metaspace占据一定空间，似乎jvm没办法很好的管理这一部分内存？所以在java7里有个开关关掉这个优化，Dsun.reflect.inflationThreshold=2147483647。这个问题在java8中存在吗？老师熟悉这一点的话就讲讲吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 1.如何汇编至class文件啊？用什么工具？ <br>2.字节码的局部变量和java程序中的局部变量有什么区别？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 你可以通过ASMTools反汇编class文件，再将输出的文本汇编回class文件<br><br>2. 字节码中的局部变量会更多一些，Java编译器会根据需要存储一些非Java程序中的局部变量</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> reflection inflation 
会不会造成java 8 metaspace： Outofmemory </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
Reflection inflation会生成新的类，理论上是会导致你说的这个错误的。</p> </div> </div></li>', 0, 'full_html', 'zh-hans', 
20, 20) 
 {executed in 4 msec}
2020-11-19 20:11:47.442 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.445 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:11:47.456 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/02/72/6933412b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刹那间的永...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">32</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 果然还是一点都看不懂，老师，什么阶段适合接触虚拟机？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Thomas</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师后面讲下反射跟动态代理～很期待专门写一篇JAVA特性的原理。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaobang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 能系统的介绍下Java字节码吗，每次看到都是靠猜 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xiaobang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 能系统介绍下Java字节码吗？每次都是靠猜 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0b/59/08065309.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雨亦奇</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 666 <br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/95/1b/ca2023e6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>hey,吕布</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，文中代码格式异常了，早上打开还好的 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这么诡异，我反馈一下</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>东方</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> ClassWriter继承并实现了虚基类ClassVisitor，实现了一系列的vist*方法(读取class信息至内存) 
<br> <br> <br>MyClassVisitor继承ClassWriter，只复写(Override)了visitMethod方法，当且仅当方法名称等于main时，才替换用自定义内容替换 
<br> <br> <br>整个逻辑等于说，读Foo.class到内存中，重新写一个Foo.class文件，main方法替换为"新内容"，其他保持不变 <br> <br> <br> 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>郑童文</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我不太明白 用ASM反汇编class 文件 之后不就改得到java源文件吗？为什么还有java 
之外的关键字? </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么我允许F oo Dump报无法加载主类?是因为没有main方法? 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！应该是Wrapper，而且cp也需要添加当前目录，即-cp 
/path/to/ASM.jar:. Wrapper<br><br></p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/a0/2240fb2c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>capo</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 你好,代码ASMHelper.java中 MethodVisitor ClassVIsitor 应该都是Interface吧？super.visitMethod怎么调用的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QQ怪</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-17 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这里有点隐晦难懂 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/c1/86/afd6e862.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王浩</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看了一遍没看没白,建议多讲些细节,比如如何使用javap查看字节码,说详细些,各种工具的特点是什么,最常用的工具是哪个,在什么场景下使用。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xuery</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 仔细看了下教程[10], 更加深刻的理解了如何通过修改字节码文件来达到修改类的效果，感谢，坚持深挖下去 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/4f/7e/4a053154.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bgmall</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> javap 查看class文件 <br> <br>基础md5 
jdk版本 <br> <br>常量池 <br> <br>字段描述 访问权限 <br> <br>方法代码栈 <br> <br>异常表(有异常捕获的才有) </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/1b/93/e3b44969.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>sgl</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 为什么方法里用的指令只有入栈，没有出栈？难道putfield这类指令，用了操作数栈上的数据以后，会自己调用出栈指令？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: putfield 可以想成 出栈再消耗数据</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/75/ca/15b32bc5.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>猎羽</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 写的不错，支持一下 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/75/ca/15b32bc5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>猎羽</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 写的不错，支持一下。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-04 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 我的问题是reflection inflation后，jdk会生成字节码和相应的delegation 
classloader，这部分objects会在metaspace占据一定空间，似乎jvm没办法很好的管理这一部分内存？所以在java7里有个开关关掉这个优化，Dsun.reflect.inflationThreshold=2147483647。这个问题在java8中存在吗？老师熟悉这一点的话就讲讲吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>志远</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 1.如何汇编至class文件啊？用什么工具？ <br>2.字节码的局部变量和java程序中的局部变量有什么区别？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 1. 你可以通过ASMTools反汇编class文件，再将输出的文本汇编回class文件<br><br>2. 字节码中的局部变量会更多一些，Java编译器会根据需要存储一些非Java程序中的局部变量</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>xianhai</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> reflection inflation 
会不会造成java 8 metaspace： Outofmemory </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
Reflection inflation会生成新的类，理论上是会导致你说的这个错误的。</p> </div> </div></li>', 0, 'full_html', 'zh-hans', 
20, 20) 
 {executed in 5 msec}
2020-11-19 20:11:47.468 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.470 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:47.474 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.476 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:47.482 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 20, 'https://static001.geekbang.org/resource/image/64/15/64465d2cb3318fd52c3dae90e7394015.jpg', 
20) 
 {executed in 0 msec}
2020-11-19 20:11:47.493 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.495 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:11:47.501 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 20, 'https://static001.geekbang.org/resource/image/64/15/64465d2cb3318fd52c3dae90e7394015.jpg', 
20) 
 {executed in 1 msec}
2020-11-19 20:11:47.509 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.511 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:47.519 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 20, 20) 
 {executed in 1 msec}
2020-11-19 20:11:47.527 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=20 
 {executed in 1 msec}
2020-11-19 20:11:47.530 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:11:47.537 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 20, 20) 
 {executed in 2 msec}
2020-11-19 20:11:47.544 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1102693943196049' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:11:47.547 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:05.318 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1102693943196049' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:12:05.320 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:05.324 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1102693943196049', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:12:05.325 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1102693943196049', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:12:05.327 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|43            |
|--------------|

2020-11-19 20:12:05.342 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1102693943196049' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:12:05.343 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:05.760 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='1102693943196049' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:12:05.761 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:05.765 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('1102693943196049', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:12:05.767 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('1102693943196049', 
1, 'media') 
 {executed in 1 msec}
2020-11-19 20:12:05.768 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|44            |
|--------------|

2020-11-19 20:12:05.812 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1102693943196049' 
 {executed in 1 msec}
2020-11-19 20:12:05.814 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:05.822 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787925, 1) 
 {executed in 4 msec}
2020-11-19 20:12:05.824 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787925, 1) 
 {executed in 0 msec}
2020-11-19 20:12:05.825 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|21            |
|--------------|

2020-11-19 20:12:05.841 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '9df8a390-7983-4f02-8c84-dcb892e23483', 
21) 
 {executed in 3 msec}
2020-11-19 20:12:05.843 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '9df8a390-7983-4f02-8c84-dcb892e23483', 21) 
 {executed in 1 msec}
2020-11-19 20:12:05.844 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|21            |
|--------------|

2020-11-19 20:12:05.869 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=21, revision_default=1, revision_timestamp=1605787925, 
revision_uid=1 where vid=21 
 {executed in 7 msec}
2020-11-19 20:12:05.879 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:05.881 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:05.887 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1102693943196049', 'zh-hans', 21, 21) 
 {executed in 1 msec}
2020-11-19 20:12:05.909 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=21 
 {executed in 2 msec}
2020-11-19 20:12:05.911 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:05.921 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1102693943196049', 'zh-hans', 21, 21) 
 {executed in 5 msec}
2020-11-19 20:12:05.943 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=21 
 {executed in 4 msec}
2020-11-19 20:12:05.945 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:05.950 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=21 
 {executed in 2 msec}
2020-11-19 20:12:05.952 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:05.959 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 21, 0, 0, 19, 0, 21) 
 {executed in 1 msec}
2020-11-19 20:12:05.969 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:05.971 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:05.991 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=21 
 {executed in 6 msec}
2020-11-19 20:12:05.993 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:06.013 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>我们知道，Java 中<code>Iterable</code>对象的 foreach 循环遍历是一个语法糖，Java 
编译器会将该语法糖编译为调用<code>Iterable</code>对象的<code>iterator</code>方法，并用所返回的<code>Iterator</code>对象的<code>hasNext</code>以及<code>next</code>方法，来完成遍历。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; list, Consumer&lt;Object&gt; 
f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (Object 
obj : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
f.accept(obj); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面的 
Java 代码将使用 foreach 循环来遍历一个<code>ArrayList</code>对象，其等价的代码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void forEach(ArrayList&lt;Object&gt; list, Consumer&lt;Object&gt; f) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Iterator&lt;Object&gt; iter = list.iterator(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iter.hasNext()) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = iter.next(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我也列举了所涉及的<code>ArrayList</code>代码。我们可以看到，<code>ArrayList.iterator</code>方法将创建一个<code>ArrayList$Itr</code>实例。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class ArrayList ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Iterator&lt;E&gt; iterator() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new Itr(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private class Itr implements Iterator&lt;E&gt; { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int cursor; // index of next element to 
return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int lastRet 
= -1; // index of last element returned; -1 if no such </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int expectedModCount = modCount; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public boolean hasNext() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return cursor != size; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @SuppressWarnings("unchecked") </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public E next() { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> checkForComodification(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = cursor; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= size) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = ArrayList.this.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cursor = i + 1; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return (E) elementData[lastRet = i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final void checkForComodification() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (modCount != expectedModCount) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ConcurrentModificationException(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>因此，有同学认为我们应当避免在热点代码中使用 foreach 循环，并且直接使用基于<code>ArrayList.size</code>以及<code>ArrayList.get</code>的循环方式（如下所示），以减少对 
Java 堆的压力。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; list.size(); i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(list.get(i)); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，Java 虚拟机中的即时编译器可以将<code>ArrayList.iterator</code>方法中的实例创建操作给优化掉。不过，这需要方法内联以及逃逸分析的协作。</p> 
<p>在前面几篇中我们已经深入学习了方法内联，今天我便来介绍一下逃逸分析。</p><!-- [[[read_end]]] --> <h2>逃逸分析</h2> <p>逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”（出处参见 
[1]）。</p> <p>在 Java 虚拟机的即时编译语境下，逃逸分析将判断<strong>新建</strong>的对象是否<strong>逃逸</strong>。即时编译器判断对象是否逃逸的依据，一是对象是否被存入堆中（静态字段或者堆中对象的实例字段），二是对象是否被传入未知代码中。</p> 
<p>前者很好理解：一旦对象被存入堆中，其他线程便能获得该对象的引用。即时编译器也因此无法追踪所有使用该对象的代码位置。</p> <p>关于后者，由于 Java 虚拟机的即时编译器是以方法为单位的，对于方法中未被内联的方法调用，即时编译器会将其当成未知代码，毕竟它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中。因此，我们可以认为方法调用的调用者以及参数是逃逸的。</p> 
<p>通常来说，即时编译器里的逃逸分析是放在方法内联之后的，以便消除这些“未知代码”入口。</p> <p>回到文章开头的例子。理想情况下，即时编译器能够内联对<code>ArrayList$Itr</code>构造器的调用，对<code>hasNext</code>以及<code>next</code>方法的调用，以及当内联了<code>Itr.next</code>方法后，对<code>checkForComodification</code>方法的调用。</p> 
<p>如果这些方法调用均能够被内联，那么结果将近似于下面这段伪代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Itr iter = new Itr; // 注意这里是 new 指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.cursor = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.lastRet = -1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.expectedModCount = list.modCount; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iter.cursor &lt; list.size) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (list.modCount != iter.expectedModCount) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = iter.cursor; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= list.size) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = list.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> iter.cursor = i + 1; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> iter.lastRet = i; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = elementData[i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，这段代码所新建的<code>ArrayList$Itr</code>实例既没有被存入任何字段之中，也没有作为任何方法调用的调用者或者参数。因此，逃逸分析将断定该实例不逃逸。</p> 
<h2>基于逃逸分析的优化</h2> <p>即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。</p> <p>我们先来看一下锁消除。如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没有意义。这是因为其他线程并不能获得该锁对象，因此也不可能对其进行加锁。在这种情况下，即时编译器可以消除对该不逃逸锁对象的加锁、解锁操作。</p> 
<p>实际上，传统编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。</p> <p>在介绍 
Java 内存模型时，我曾提过<code>synchronized (new Object()) {}</code>会被完全优化掉。这正是因为基于逃逸分析的锁消除。由于其他线程不能获得该锁对象，因此也无法基于该锁对象构造两个线程之间的 
happens-before 规则。</p> <p><code>synchronized (escapedObject) {}</code>则不然。由于其他线程可能会对逃逸了的对象<code>escapedObject</code>进行加锁操作，从而构造了两个线程之间的 
happens-before 关系。因此即时编译器至少需要为这段代码生成一条刷新缓存的内存屏障指令。</p> <p>不过，基于逃逸分析的锁消除实际上并不多见。一般来说，开发人员不会直接对方法中新构造的对象进行加锁。事实上，逃逸分析的结果更多被用于将新建对象操作转换成栈上分配或者标量替换。</p> 
<p>我们知道，Java 虚拟机中对象都是在堆上分配的，而堆上的内容对任何线程都是可见的。与此同时，Java 虚拟机需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。</p> 
<p>如果逃逸分析能够证明某些新建的对象不逃逸，那么 Java 虚拟机完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。</p> 
<p>不过，由于实现起来需要更改大量假设了“对象只能堆分配”的代码，因此 HotSpot 虚拟机<strong>并没有</strong>采用栈上分配，而是使用了标量替换这么一项技术。</p> 
<p>所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的局部变量。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 对象。</p> <p>标量替换这项优化技术，可以看成将原本对对象的字段的访问，替换为一个个局部变量的访问。举例来说，前面经过内联之后的 
forEach 代码可以被转换为如下代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // Itr iter = new Itr; // 经过标量替换后该分配无意义，可以被优化掉 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int cursor = 0; // 标量替换 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int lastRet = -1; // 标量替换 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int expectedModCount = list.modCount; 
// 标量替换 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> while 
(cursor &lt; list.size) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (list.modCount != expectedModCount) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ConcurrentModificationException(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = cursor; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= list.size) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = list.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cursor = i + 1; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> lastRet = i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = elementData[i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，原本需要在内存中连续分布的对象，现已被拆散为一个个单独的字段<code>cursor</code>，<code>lastRet</code>，以及<code>expectedModCount</code>。这些字段既可以存储在栈上，也可以直接存储在寄存器中。而该对象的对象头信息则直接消失了，不再被保存至内存之中。</p> 
<p>由于该对象没有被实际分配，因此和栈上分配一样，它同样可以减轻垃圾回收的压力。与栈上分配相比，它对字段的内存连续性不做要求，而且，这些字段甚至可以直接在寄存器中维护，无须浪费任何内存空间。</p> 
<h2>部分逃逸分析</h2> <p>C2 的逃逸分析与控制流无关，相对来说比较简单。Graal 则引入了一个与控制流有关的逃逸分析，名为部分逃逸分析（partial escape 
analysis）[2]。它解决了所新建的实例仅在部分程序路径中逃逸的情况。</p> <p>举个例子，在下面这段代码中，新建实例只会在进入 if-then 分支时逃逸。（对<code>hashCode</code>方法的调用是一个 
HotSpot intrinsic，将被替换为一个无法内联的本地方法调用。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void bar(boolean cond) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object foo = new Object(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (cond) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 可以手工优化为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
static void bar(boolean cond) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (cond) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Object 
foo = new Object(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
foo.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>假设 if 
语句的条件成立的可能性只有 1%，那么在 99% 的情况下，程序没有必要新建对象。其手工优化的版本正是部分逃逸分析想要自动达到的成果。</p> <p>部分逃逸分析将根据控制流信息，判断出新建对象仅在部分分支中逃逸，并且将对象的新建操作推延至对象逃逸的分支中。这将使得原本因对象逃逸而无法避免的新建对象操作，不再出现在只执行 
if-else 分支的程序路径之中。</p> <p>综上，与 C2 所使用的逃逸分析相比，Graal 所使用的部分逃逸分析能够优化更多的情况，不过它编译时间也更长一些。</p> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机中即时编译器的逃逸分析，以及基于逃逸分析的优化。</p> <p>在 Java 虚拟机的即时编译语境下，逃逸分析将判断新建的对象是否会逃逸。即时编译器判断对象逃逸的依据有两个：一是看对象是否被存入堆中，二是看对象是否作为方法调用的调用者或者参数。</p> 
<p>即时编译器会根据逃逸分析的结果进行优化，如锁消除以及标量替换。后者指的是将原本连续分配的对象拆散为一个个单独的字段，分布在栈上或者寄存器中。</p> <p>部分逃逸分析是一种附带了控制流信息的逃逸分析。它将判断新建对象真正逃逸的分支，并且支持将新建操作推延至逃逸分支。</p> 
<hr> <p>今天的实践环节有两项内容。</p> <p>第一项内容，我们来验证一下<code>ArrayList.iterator</code>中的新建对象能否被逃逸分析所优化。运行下述代码并观察 
GC 的情况。你可以通过虚拟机参数<code>-XX:-DoEscapeAnalysis</code>来关闭默认开启的逃逸分析。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // java 
-XX:+PrintGC -XX:+DoEscapeAnalysis EscapeTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.ArrayList; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.function.Consumer; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class EscapeTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (Object obj : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 100; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> list.add(i); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 400_000_000; i++) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> forEach(list, obj -&gt; {}); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>第二项内容，我们来看一看部分逃逸分析的效果。你需要使用附带 
Graal 编译器的 Java 版本，如 Java 10，来运行下述代码，并且观察 GC 的情况。你可以通过虚拟机参数<code>-XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler</code>来启用 Graal。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run with </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -Xlog:gc Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -Xlog:gc Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder5; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder6; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder7; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder8; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder9; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHoldera; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderb; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderc; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderd; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHoldere; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderf; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void bar(boolean condition) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo = new Foo(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (condition) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; Integer.MAX_VALUE; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> bar(i % 100 == 0); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://zh.wikipedia.org/wiki/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90">https://zh.wikipedia.org/wiki/ 
逃逸分析</a><br> [2] <a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf">http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 21, 21) 
 {executed in 10 msec}
2020-11-19 20:12:06.040 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.042 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:06.060 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>我们知道，Java 中<code>Iterable</code>对象的 foreach 循环遍历是一个语法糖，Java 编译器会将该语法糖编译为调用<code>Iterable</code>对象的<code>iterator</code>方法，并用所返回的<code>Iterator</code>对象的<code>hasNext</code>以及<code>next</code>方法，来完成遍历。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; list, Consumer&lt;Object&gt; 
f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> for (Object 
obj : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
f.accept(obj); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面的 
Java 代码将使用 foreach 循环来遍历一个<code>ArrayList</code>对象，其等价的代码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void forEach(ArrayList&lt;Object&gt; list, Consumer&lt;Object&gt; f) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Iterator&lt;Object&gt; iter = list.iterator(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iter.hasNext()) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = iter.next(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我也列举了所涉及的<code>ArrayList</code>代码。我们可以看到，<code>ArrayList.iterator</code>方法将创建一个<code>ArrayList$Itr</code>实例。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class ArrayList ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Iterator&lt;E&gt; iterator() { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new Itr(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private class Itr implements Iterator&lt;E&gt; { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int cursor; // index of next element to 
return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int lastRet 
= -1; // index of last element returned; -1 if no such </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int expectedModCount = modCount; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public boolean hasNext() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return cursor != size; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @SuppressWarnings("unchecked") </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public E next() { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> checkForComodification(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = cursor; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= size) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = ArrayList.this.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cursor = i + 1; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return (E) elementData[lastRet = i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
final void checkForComodification() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (modCount != expectedModCount) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ConcurrentModificationException(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>因此，有同学认为我们应当避免在热点代码中使用 foreach 循环，并且直接使用基于<code>ArrayList.size</code>以及<code>ArrayList.get</code>的循环方式（如下所示），以减少对 
Java 堆的压力。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; list.size(); i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(list.get(i)); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>实际上，Java 虚拟机中的即时编译器可以将<code>ArrayList.iterator</code>方法中的实例创建操作给优化掉。不过，这需要方法内联以及逃逸分析的协作。</p> 
<p>在前面几篇中我们已经深入学习了方法内联，今天我便来介绍一下逃逸分析。</p><!-- [[[read_end]]] --> <h2>逃逸分析</h2> <p>逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”（出处参见 
[1]）。</p> <p>在 Java 虚拟机的即时编译语境下，逃逸分析将判断<strong>新建</strong>的对象是否<strong>逃逸</strong>。即时编译器判断对象是否逃逸的依据，一是对象是否被存入堆中（静态字段或者堆中对象的实例字段），二是对象是否被传入未知代码中。</p> 
<p>前者很好理解：一旦对象被存入堆中，其他线程便能获得该对象的引用。即时编译器也因此无法追踪所有使用该对象的代码位置。</p> <p>关于后者，由于 Java 虚拟机的即时编译器是以方法为单位的，对于方法中未被内联的方法调用，即时编译器会将其当成未知代码，毕竟它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中。因此，我们可以认为方法调用的调用者以及参数是逃逸的。</p> 
<p>通常来说，即时编译器里的逃逸分析是放在方法内联之后的，以便消除这些“未知代码”入口。</p> <p>回到文章开头的例子。理想情况下，即时编译器能够内联对<code>ArrayList$Itr</code>构造器的调用，对<code>hasNext</code>以及<code>next</code>方法的调用，以及当内联了<code>Itr.next</code>方法后，对<code>checkForComodification</code>方法的调用。</p> 
<p>如果这些方法调用均能够被内联，那么结果将近似于下面这段伪代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Itr iter = new Itr; // 注意这里是 new 指令 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.cursor = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.lastRet = -1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> iter.expectedModCount = list.modCount; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iter.cursor &lt; list.size) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (list.modCount != iter.expectedModCount) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = iter.cursor; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= list.size) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = list.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> iter.cursor = i + 1; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> iter.lastRet = i; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = elementData[i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，这段代码所新建的<code>ArrayList$Itr</code>实例既没有被存入任何字段之中，也没有作为任何方法调用的调用者或者参数。因此，逃逸分析将断定该实例不逃逸。</p> 
<h2>基于逃逸分析的优化</h2> <p>即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。</p> <p>我们先来看一下锁消除。如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没有意义。这是因为其他线程并不能获得该锁对象，因此也不可能对其进行加锁。在这种情况下，即时编译器可以消除对该不逃逸锁对象的加锁、解锁操作。</p> 
<p>实际上，传统编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。</p> <p>在介绍 
Java 内存模型时，我曾提过<code>synchronized (new Object()) {}</code>会被完全优化掉。这正是因为基于逃逸分析的锁消除。由于其他线程不能获得该锁对象，因此也无法基于该锁对象构造两个线程之间的 
happens-before 规则。</p> <p><code>synchronized (escapedObject) {}</code>则不然。由于其他线程可能会对逃逸了的对象<code>escapedObject</code>进行加锁操作，从而构造了两个线程之间的 
happens-before 关系。因此即时编译器至少需要为这段代码生成一条刷新缓存的内存屏障指令。</p> <p>不过，基于逃逸分析的锁消除实际上并不多见。一般来说，开发人员不会直接对方法中新构造的对象进行加锁。事实上，逃逸分析的结果更多被用于将新建对象操作转换成栈上分配或者标量替换。</p> 
<p>我们知道，Java 虚拟机中对象都是在堆上分配的，而堆上的内容对任何线程都是可见的。与此同时，Java 虚拟机需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。</p> 
<p>如果逃逸分析能够证明某些新建的对象不逃逸，那么 Java 虚拟机完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。</p> 
<p>不过，由于实现起来需要更改大量假设了“对象只能堆分配”的代码，因此 HotSpot 虚拟机<strong>并没有</strong>采用栈上分配，而是使用了标量替换这么一项技术。</p> 
<p>所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的局部变量。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 对象。</p> <p>标量替换这项优化技术，可以看成将原本对对象的字段的访问，替换为一个个局部变量的访问。举例来说，前面经过内联之后的 
forEach 代码可以被转换为如下代码：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // Itr iter = new Itr; // 经过标量替换后该分配无意义，可以被优化掉 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int cursor = 0; // 标量替换 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int lastRet = -1; // 标量替换 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int expectedModCount = list.modCount; 
// 标量替换 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> while 
(cursor &lt; list.size) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (list.modCount != expectedModCount) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ConcurrentModificationException(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int i = cursor; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= list.size) </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new NoSuchElementException(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object[] elementData = list.elementData; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (i &gt;= elementData.length) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ConcurrentModificationException(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> cursor = i + 1; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> lastRet = i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object obj = elementData[i]; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>可以看到，原本需要在内存中连续分布的对象，现已被拆散为一个个单独的字段<code>cursor</code>，<code>lastRet</code>，以及<code>expectedModCount</code>。这些字段既可以存储在栈上，也可以直接存储在寄存器中。而该对象的对象头信息则直接消失了，不再被保存至内存之中。</p> 
<p>由于该对象没有被实际分配，因此和栈上分配一样，它同样可以减轻垃圾回收的压力。与栈上分配相比，它对字段的内存连续性不做要求，而且，这些字段甚至可以直接在寄存器中维护，无须浪费任何内存空间。</p> 
<h2>部分逃逸分析</h2> <p>C2 的逃逸分析与控制流无关，相对来说比较简单。Graal 则引入了一个与控制流有关的逃逸分析，名为部分逃逸分析（partial escape 
analysis）[2]。它解决了所新建的实例仅在部分程序路径中逃逸的情况。</p> <p>举个例子，在下面这段代码中，新建实例只会在进入 if-then 分支时逃逸。（对<code>hashCode</code>方法的调用是一个 
HotSpot intrinsic，将被替换为一个无法内联的本地方法调用。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void bar(boolean cond) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Object foo = new Object(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (cond) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 可以手工优化为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
static void bar(boolean cond) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (cond) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> Object 
foo = new Object(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
foo.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>假设 if 
语句的条件成立的可能性只有 1%，那么在 99% 的情况下，程序没有必要新建对象。其手工优化的版本正是部分逃逸分析想要自动达到的成果。</p> <p>部分逃逸分析将根据控制流信息，判断出新建对象仅在部分分支中逃逸，并且将对象的新建操作推延至对象逃逸的分支中。这将使得原本因对象逃逸而无法避免的新建对象操作，不再出现在只执行 
if-else 分支的程序路径之中。</p> <p>综上，与 C2 所使用的逃逸分析相比，Graal 所使用的部分逃逸分析能够优化更多的情况，不过它编译时间也更长一些。</p> <h2>总结与实践</h2> 
<p>今天我介绍了 Java 虚拟机中即时编译器的逃逸分析，以及基于逃逸分析的优化。</p> <p>在 Java 虚拟机的即时编译语境下，逃逸分析将判断新建的对象是否会逃逸。即时编译器判断对象逃逸的依据有两个：一是看对象是否被存入堆中，二是看对象是否作为方法调用的调用者或者参数。</p> 
<p>即时编译器会根据逃逸分析的结果进行优化，如锁消除以及标量替换。后者指的是将原本连续分配的对象拆散为一个个单独的字段，分布在栈上或者寄存器中。</p> <p>部分逃逸分析是一种附带了控制流信息的逃逸分析。它将判断新建对象真正逃逸的分支，并且支持将新建操作推延至逃逸分支。</p> 
<hr> <p>今天的实践环节有两项内容。</p> <p>第一项内容，我们来验证一下<code>ArrayList.iterator</code>中的新建对象能否被逃逸分析所优化。运行下述代码并观察 
GC 的情况。你可以通过虚拟机参数<code>-XX:-DoEscapeAnalysis</code>来关闭默认开启的逃逸分析。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // java 
-XX:+PrintGC -XX:+DoEscapeAnalysis EscapeTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.ArrayList; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import java.util.function.Consumer; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class EscapeTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void forEach(ArrayList&lt;Object&gt; 
list, Consumer&lt;Object&gt; f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (Object obj : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> f.accept(obj); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void main(String[] args) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 100; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> list.add(i); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 400_000_000; i++) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> forEach(list, obj -&gt; {}); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>第二项内容，我们来看一看部分逃逸分析的效果。你需要使用附带 
Graal 编译器的 Java 版本，如 Java 10，来运行下述代码，并且观察 GC 的情况。你可以通过虚拟机参数<code>-XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler</code>来启用 Graal。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run with </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -Xlog:gc Foo </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -Xlog:gc Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder5; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder6; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder7; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder8; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolder9; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHoldera; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderb; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderc; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderd; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHoldere; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeHolderf; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void bar(boolean condition) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Foo foo = new Foo(); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (condition) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; Integer.MAX_VALUE; i++) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> bar(i % 100 == 0); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>[1] <a href="https://zh.wikipedia.org/wiki/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90">https://zh.wikipedia.org/wiki/ 
逃逸分析</a><br> [2] <a href="http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf">http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 21, 21) 
 {executed in 7 msec}
2020-11-19 20:12:06.078 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=21 
 {executed in 1 msec}
2020-11-19 20:12:06.080 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:06.089 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=21 
 {executed in 1 msec}
2020-11-19 20:12:06.091 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:12:06.096 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787926, 1605787926, 1, 'zh-hans', 0, 1, 1, 
0, '23丨逃逸分析', 1, 21, 21) 
 {executed in 1 msec}
2020-11-19 20:12:06.109 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=21 
 {executed in 1 msec}
2020-11-19 20:12:06.111 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:06.143 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787926, 1605787926, 1, 'zh-hans', 0, 
1, 1, 0, '23丨逃逸分析', 'book', 1, 21, 21) 
 {executed in 5 msec}
2020-11-19 20:12:06.170 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=21 
 {executed in 2 msec}
2020-11-19 20:12:06.172 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:06.176 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.178 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:06.185 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cbb3ba401de4bd9a6c7fc42278e6021e?bkt=en-c58a217c5b5bf7b25067e0ac1af49f13efb8a08907585c2beabbf4728956caf5e2e979edf6d3275e&fid=3757516097-778750-457827005563770&time=1605787924&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Nf5ACuQy4wlrfDzcpHiIS%2FjOknY%3D&to=92&size=4433363&sta_dx=4433363&sta_cs=4363&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4433363&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c9b75e8f3692301307cc006877d4fac9f6ef1974dc0a92adac7c1139d3a4d2bb3d3c0061aeff3725&sl=76480590&expires=8h&rt=pr&r=996325723&mlogid=7510803680689130389&vbdid=64799653&fin=23%E4%B8%A8%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.mp3&bflag=92,34-92&rtype=1&dp-logid=7510803680689130389&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865ee8bf5d66706dd69447d3fbc37b44afe3e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=23%E4%B8%A8%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.mp3', 
21, 21) 
 {executed in 1 msec}
2020-11-19 20:12:06.195 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.196 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:06.202 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cbb3ba401de4bd9a6c7fc42278e6021e?bkt=en-c58a217c5b5bf7b25067e0ac1af49f13efb8a08907585c2beabbf4728956caf5e2e979edf6d3275e&fid=3757516097-778750-457827005563770&time=1605787924&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Nf5ACuQy4wlrfDzcpHiIS%2FjOknY%3D&to=92&size=4433363&sta_dx=4433363&sta_cs=4363&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182971&mtime=1605787493&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4433363&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c9b75e8f3692301307cc006877d4fac9f6ef1974dc0a92adac7c1139d3a4d2bb3d3c0061aeff3725&sl=76480590&expires=8h&rt=pr&r=996325723&mlogid=7510803680689130389&vbdid=64799653&fin=23%E4%B8%A8%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.mp3&bflag=92,34-92&rtype=1&dp-logid=7510803680689130389&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865ee8bf5d66706dd69447d3fbc37b44afe3e&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=23%E4%B8%A8%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.mp3', 
21, 21) 
 {executed in 0 msec}
2020-11-19 20:12:06.210 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 20:12:06.212 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:06.215 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.217 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:06.238 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>魏春河</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 怎么看出来对象是否放入堆中？不是所有的对象都在堆中吗 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 本章介绍逃逸分析的优化作用，那么它有什么不足的地方吗？ </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师讲的非常好，对jvm的了解更加深入了一些 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 你好，我翻了一下R大关于escape analysis的一篇知乎回答，里面提到C2可以对不逸出当前线程的锁做消除，这个过程是怎样的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>四阿哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师讲的很有帮助，陈列原理，结合事例，有理有据，逻辑清晰，层次鲜明 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小橙橙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 第一个示例，加了jvm参数，控制台什么内容都没有打印出来，jdk是1.8 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/aa/85/b9946d11.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>idiandian</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 锁消除的概念很有意思 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
21, 21) 
 {executed in 16 msec}
2020-11-19 20:12:06.274 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.276 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:06.287 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>魏春河</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 怎么看出来对象是否放入堆中？不是所有的对象都在堆中吗 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 本章介绍逃逸分析的优化作用，那么它有什么不足的地方吗？ </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>倔强</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师讲的非常好，对jvm的了解更加深入了一些 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 你好，我翻了一下R大关于escape analysis的一篇知乎回答，里面提到C2可以对不逸出当前线程的锁做消除，这个过程是怎样的？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>四阿哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师讲的很有帮助，陈列原理，结合事例，有理有据，逻辑清晰，层次鲜明 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>小橙橙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 第一个示例，加了jvm参数，控制台什么内容都没有打印出来，jdk是1.8 </div> 
<!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/aa/85/b9946d11.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>idiandian</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 锁消除的概念很有意思 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 
21, 21) 
 {executed in 6 msec}
2020-11-19 20:12:06.310 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.312 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:06.317 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=21 
 {executed in 2 msec}
2020-11-19 20:12:06.319 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:06.324 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 21, 'https://static001.geekbang.org/resource/image/ac/b5/ac7e23a4e5bb6d1525bb59e58e4dc1b5.jpg', 
21) 
 {executed in 0 msec}
2020-11-19 20:12:06.361 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=21 
 {executed in 2 msec}
2020-11-19 20:12:06.363 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:06.370 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 21, 'https://static001.geekbang.org/resource/image/ac/b5/ac7e23a4e5bb6d1525bb59e58e4dc1b5.jpg', 
21) 
 {executed in 0 msec}
2020-11-19 20:12:06.420 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.423 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:06.435 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 21, 21) 
 {executed in 4 msec}
2020-11-19 20:12:06.448 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 20:12:06.450 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:06.457 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 21, 21) 
 {executed in 1 msec}
2020-11-19 20:12:06.475 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='880914595129533' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:12:06.477 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:23.603 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='880914595129533' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:12:23.608 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:23.615 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('880914595129533', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:12:23.618 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('880914595129533', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:12:23.621 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|45            |
|--------------|

2020-11-19 20:12:23.643 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='880914595129533' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:12:23.645 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:24.118 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='880914595129533' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:12:24.120 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:24.124 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('880914595129533', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:12:24.126 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('880914595129533', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:12:24.127 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|46            |
|--------------|

2020-11-19 20:12:24.140 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='880914595129533' 
 {executed in 1 msec}
2020-11-19 20:12:24.141 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:24.145 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787944, 1) 
 {executed in 1 msec}
2020-11-19 20:12:24.146 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787944, 1) 
 {executed in 0 msec}
2020-11-19 20:12:24.147 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|22            |
|--------------|

2020-11-19 20:12:24.157 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '7165ff2b-938f-4734-80f3-a9d14716ec92', 
22) 
 {executed in 1 msec}
2020-11-19 20:12:24.158 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '7165ff2b-938f-4734-80f3-a9d14716ec92', 22) 
 {executed in 0 msec}
2020-11-19 20:12:24.160 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|22            |
|--------------|

2020-11-19 20:12:24.172 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=22, revision_default=1, revision_timestamp=1605787944, 
revision_uid=1 where vid=22 
 {executed in 1 msec}
2020-11-19 20:12:24.181 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.182 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:24.188 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '880914595129533', 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.195 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.197 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:24.202 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '880914595129533', 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.209 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=22 
 {executed in 1 msec}
2020-11-19 20:12:24.211 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:24.214 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=22 
 {executed in 1 msec}
2020-11-19 20:12:24.216 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:24.222 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 22, 0, 0, 19, 0, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.229 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 20:12:24.230 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:24.234 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.236 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:24.248 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>前不久，有同学问我，<code>String.indexOf</code>方法和自己实现的<code>indexOf</code>方法在字节码层面上差不多，为什么执行效率却有天壤之别呢？今天我们就来看一看。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int indexOf(String str) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (coder() == str.coder()) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return isLatin1() ? StringLatin1.indexOf(value, str.value) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> : StringUTF16.indexOf(value, str.value); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (coder() == LATIN1) { // str.coder == UTF16 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return StringUTF16.indexOfLatin1(value, str.value); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>为了解答这个问题，我们来读一下<code>String.indexOf</code>方法的源代码（上面的代码截取自 
Java 10.0.2）。</p> <blockquote> <p>在 Java 9 之前，字符串是用 char 数组来存储的，主要为了支持非英文字符。然而，大多数 Java 程序中的字符串都是由 
Latin1 字符组成的。也就是说每个字符仅需占据一个字节，而使用 char 数组的存储方式将极大地浪费内存空间。</p> <p>Java 9 引入了 Compact Strings[1] 
的概念，当字符串仅包含 Latin1 字符时，使用一个字节代表一个字符的编码格式，使得内存使用效率大大提高。</p> </blockquote> <p>假设我们调用<code>String.indexOf</code>方法的调用者以及参数均为只包含 
Latin1 字符的字符串，那么该方法的关键在于对<code>StringLatin1.indexOf</code>方法的调用。</p> <p>下面我列举了<code>StringLatin1.indexOf</code>方法的源代码。你会发现，它并没有使用特别高明的算法，唯一值得注意的便是方法声明前的<code>@HotSpotIntrinsicCandidate</code>注解。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int indexOf(byte[] value, 
byte[] str) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (str.length == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (value.length == 0) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return indexOf(value, value.length, str, str.length, 0); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int indexOf(byte[] value, int valueCount, byte[] str, int strCount, int fromIndex) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> byte first = str[0]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int max = (valueCount - strCount); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = fromIndex; i &lt;= max; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Look for first character. </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (value[i] != first) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (++i &lt;= max &amp;&amp; value[i] 
!= first); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Found first character, now look at 
the rest of value </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &lt;= max) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int j = i + 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int end = j + strCount - 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int k = 1; j &lt; end &amp;&amp; value[j] == str[k]; j++, k++); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (j == end) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Found whole string. </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 HotSpot 虚拟机中，所有被该注解标注的方法都是 HotSpot intrinsic。对这些方法的调用，会被 
HotSpot 虚拟机替换成高效的指令序列。而原本的方法实现则会被忽略掉。</p> <p>换句话说，HotSpot 虚拟机将为标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法额外维护一套高效实现。如果 
Java 核心类库的开发者更改了原本的实现，那么虚拟机中的高效实现也需要进行相应的修改，以保证程序语义一致。</p> <p>需要注意的是，其他虚拟机未必维护了这些 intrinsic 
的高效实现，它们可以直接使用原本的较为低效的 JDK 代码。同样，不同版本的 HotSpot 虚拟机所实现的 intrinsic 数量也大不相同。通常越新版本的 Java，其 intrinsic 
数量越多。</p> <p>你或许会产生这么一个疑问：为什么不直接在源代码中使用这些高效实现呢？</p> <p>这是因为高效实现通常依赖于具体的 CPU 指令，而这些 CPU 指令不好在 
Java 源程序中表达。再者，换了一个体系架构，说不定就没有对应的 CPU 指令，也就无法进行 intrinsic 优化了。</p> <p>下面我们便来看几个具体的例子。</p> <h2>intrinsic 
与 CPU 指令</h2> <p>在文章开头的例子中，<code>StringLatin1.indexOf</code>方法将在一个字符串（byte 数组）中查找另一个字符串（byte 
数组），并且返回命中时的索引值，或者 -1（未命中）。</p> <p>“恰巧”的是，X86_64 体系架构的 SSE4.2 指令集就包含一条指令 PCMPESTRI，让它能够在 16 
字节以下的字符串中，查找另一个 16 字节以下的字符串，并且返回命中时的索引值。</p> <p>因此，HotSpot 虚拟机便围绕着这一指令，开发出 X86_64 体系架构上的高效实现，并替换原本对<code>StringLatin1.indexOf</code>方法的调用。</p> 
<p>另外一个例子则是整数加法的溢出处理。一般我们在做整数加法时，需要考虑结果是否会溢出，并且在溢出的情况下作出相应的处理，以保证程序的正确性。</p> <p>Java 核心类库提供了一个<code>Math.addExact</code>方法。它将接收两个 
int 值（或 long 值）作为参数，并返回这两个 int 值的和。当这两个 int 值之和溢出时，该方法将抛出<code>ArithmeticException</code>异常。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int addExact(int x, int y) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r = x + y; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // HD 2-12 Overflow iff both arguments 
have the opposite sign of the result </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (((x ^ r) &amp; (y ^ r)) &lt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ArithmeticException("integer overflow"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return r; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 Java 层面判断 int 值之和是否溢出比较费事。我们需要分别比较两个 
int 值与它们的和的符号是否不同。如果都不同，那么我们便认为这两个 int 值之和溢出。对应的实现便是两个异或操作，一个与操作，以及一个比较操作。</p> <p>在 X86_64 
体系架构中，大部分计算指令都会更新状态寄存器（FLAGS register），其中就有表示指令结果是否溢出的溢出标识位（overflow flag）。因此，我们只需在加法指令之后比较溢出标志位，便可以知道 
int 值之和是否溢出了。对应的伪代码如下所示：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int addExact(int x, int 
y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int r 
= x + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> jo LABEL_OVERFLOW; 
// jump if overflow flag set </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return r; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LABEL_OVERFLOW: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArithmeticException("integer 
overflow"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // or 
deoptimize </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>最后一个例子则是<code>Integer.bitCount</code>方法，它将统计所输入的 int 值的二进制形式中有多少个 1。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bitCount(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // HD, Figure 5-2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 
2) &amp; 0x33333333); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 8); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 16); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return i &amp; 0x3f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我们可以看到，<code>Integer.bitCount</code>方法的实现还是很巧妙的，但是它需要的计算步骤也比较多。在 
X86_64 体系架构中，我们仅需要一条指令<code>popcnt</code>，便可以直接统计出 int 值中 1 的个数。</p> <h2>intrinsic 与方法内联</h2> 
<p>HotSpot 虚拟机中，intrinsic 的实现方式分为两种。</p> <p>一种是独立的桩程序。它既可以被解释执行器利用，直接替换对原方法的调用；也可以被即时编译器所利用，它把代表对原方法的调用的 
IR 节点，替换为对这些桩程序的调用的 IR 节点。以这种形式实现的 intrinsic 比较少，主要包括<code>Math</code>类中的一些方法。</p> <p>另一种则是特殊的编译器 
IR 节点。显然，这种实现方式仅能够被即时编译器所利用。</p> <p>在编译过程中，即时编译器会将对原方法的调用的 IR 节点，替换成特殊的 IR 节点，并参与接下来的优化过程。最终，即时编译器的后端将根据这些特殊的 
IR 节点，生成指定的 CPU 指令。大部分的 intrinsic 都是通过这种方式实现的。</p> <p>这个替换过程是在方法内联时进行的。当即时编译器碰到方法调用节点时，它将查询目标方法是不是 
intrinsic。</p> <p>如果是，则插入相应的特殊 IR 节点；如果不是，则进行原本的内联工作。（即判断是否需要内联目标方法的方法体，并在需要内联的情况下，将目标方法的 IR 
图纳入当前的编译范围之中。）</p> <p>也就是说，如果方法调用的目标方法是 intrinsic，那么即时编译器会直接忽略原目标方法的字节码，甚至根本不在乎原目标方法是否有字节码。即便是 
native 方法，只要它被标记为 intrinsic，即时编译器便能够将之 " 内联 " 进来，并插入特殊的 IR 节点。</p> <p>事实上，不少被标记为 intrinsic 
的方法都是 native 方法。原本对这些 native 方法的调用需要经过 JNI（Java Native Interface），其性能开销十分巨大。但是，经过即时编译器的 intrinsic 
优化之后，这部分 JNI 开销便直接消失不见，并且最终的结果也十分高效。</p> <p>举个例子，我们可以通过<code>Thread.currentThread</code>方法来获取当前线程。这是一个 
native 方法，同时也是一个 HotSpot intrinsic。在 X86_64 体系架构中，R13 寄存器存放着当前线程的指针。因此，对该方法的调用将被即时编译器替换为一个特殊 
IR 节点，并最终生成读取 R13 寄存器指令。</p> <h2>已有 intrinsic 简介</h2> <p>最新版本的 HotSpot 虚拟机定义了三百多个 intrinsic。</p> 
<p>在这三百多个 intrinsic 中，有三成以上是<code>Unsafe</code>类的方法。不过，我们一般不会直接使用<code>Unsafe</code>类的方法，而是通过<code>java.util.concurrent</code>包来间接使用。</p> 
<p>举个例子，<code>Unsafe</code>类中经常会被用到的便是<code>compareAndSwap</code>方法（Java 9+ 更名为<code>compareAndSet</code>或<code>compareAndExchange</code>方法）。在 
X86_64 体系架构中，对这些方法的调用将被替换为<code>lock cmpxchg</code>指令，也就是原子性更新指令。</p> <p>除了<code>Unsafe</code>类的方法之外，HotSpot 
虚拟机中的 intrinsic 还包括下面的几种。</p> <ol> <li><code>StringBuilder</code>和<code>StringBuffer</code>类的方法。HotSpot 
虚拟机将优化利用这些方法构造字符串的方式，以尽量减少需要复制内存的情况。</li> <li><code>String</code>类、<code>StringLatin1</code>类、<code>StringUTF16</code>类和<code>Arrays</code>类的方法。HotSpot 
虚拟机将使用 SIMD 指令（single instruction multiple data，即用一条指令处理多个数据）对这些方法进行优化。<br> 举个例子，<code>Arrays.equals(byte[], 
byte[])</code>方法原本是逐个字节比较，在使用了 SIMD 指令之后，可以放入 16 字节的 XMM 寄存器中（甚至是 64 字节的 ZMM 寄存器中）批量比较。</li> 
<li>基本类型的包装类、<code>Object</code>类、<code>Math</code>类、<code>System</code>类中各个功能性方法，反射 API、<code>MethodHandle</code>类中与调用机制相关的方法，压缩、加密相关方法。这部分 
intrinsic 则比较简单，这里就不详细展开了。如果你有感兴趣的，可以自行查阅资料，或者在文末留言。</li> </ol> <p>如果你想知道 HotSpot 虚拟机定义的所有 
intrinsic，那么你可以直接查阅 OpenJDK 代码 [2]。（该链接是 Java 12 的 intrinsic 列表。Java 8 的 intrinsic 列表可以查阅这一链接 
[3]。）</p> <h2>总结与实践</h2> <p>今天我介绍了 HotSpot 虚拟机中的 intrinsic。</p> <p>HotSpot 虚拟机将对标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法的调用，替换为直接使用基于特定 
CPU 指令的高效实现。这些方法我们便称之为 intrinsic。</p> <p>具体来说，intrinsic 的实现有两种。一是不大常见的桩程序，可以在解释执行或者即时编译生成的代码中使用。二是特殊的 
IR 节点。即时编译器将在方法内联过程中，将对 intrinsic 的调用替换为这些特殊的 IR 节点，并最终生成指定的 CPU 指令。</p> <p>HotSpot 虚拟机定义了三百多个 
intrinsic。其中比较特殊的有<code>Unsafe</code>类的方法，基本上使用 java.util.concurrent 包便会间接使用到<code>Unsafe</code>类的 
intrinsic。除此之外，<code>String</code>类和<code>Arrays</code>类中的 intrinsic 也比较特殊。即时编译器将为之生成非常高效的 
SIMD 指令。</p> <p>今天的实践环节，你可以体验一下<code>Integer.bitCount</code> intrinsic 带来的性能提升。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// time java Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int bitCount(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // HD, Figure 5-2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 
2) &amp; 0x33333333); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 8); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 16); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return i &amp; 0x3f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = Integer.MIN_VALUE; i &lt; Integer.MAX_VALUE; i++) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += bitCount(i); // In a second run, 
replace with Integer.bitCount </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(sum); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="http://openjdk.java.net/jeps/254">http://openjdk.java.net/jeps/254</a><br> 
[2] <a href="http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727">http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727</a><br> 
[3] <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 4 msec}
2020-11-19 20:12:24.269 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.271 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:24.283 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>前不久，有同学问我，<code>String.indexOf</code>方法和自己实现的<code>indexOf</code>方法在字节码层面上差不多，为什么执行效率却有天壤之别呢？今天我们就来看一看。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int indexOf(String str) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (coder() == str.coder()) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return isLatin1() ? StringLatin1.indexOf(value, str.value) </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> : StringUTF16.indexOf(value, str.value); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (coder() == LATIN1) { // str.coder == UTF16 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return StringUTF16.indexOfLatin1(value, str.value); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>为了解答这个问题，我们来读一下<code>String.indexOf</code>方法的源代码（上面的代码截取自 
Java 10.0.2）。</p> <blockquote> <p>在 Java 9 之前，字符串是用 char 数组来存储的，主要为了支持非英文字符。然而，大多数 Java 程序中的字符串都是由 
Latin1 字符组成的。也就是说每个字符仅需占据一个字节，而使用 char 数组的存储方式将极大地浪费内存空间。</p> <p>Java 9 引入了 Compact Strings[1] 
的概念，当字符串仅包含 Latin1 字符时，使用一个字节代表一个字符的编码格式，使得内存使用效率大大提高。</p> </blockquote> <p>假设我们调用<code>String.indexOf</code>方法的调用者以及参数均为只包含 
Latin1 字符的字符串，那么该方法的关键在于对<code>StringLatin1.indexOf</code>方法的调用。</p> <p>下面我列举了<code>StringLatin1.indexOf</code>方法的源代码。你会发现，它并没有使用特别高明的算法，唯一值得注意的便是方法声明前的<code>@HotSpotIntrinsicCandidate</code>注解。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int indexOf(byte[] value, 
byte[] str) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (str.length == 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (value.length == 0) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return indexOf(value, value.length, str, str.length, 0); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int indexOf(byte[] value, int valueCount, byte[] str, int strCount, int fromIndex) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> byte first = str[0]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int max = (valueCount - strCount); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = fromIndex; i &lt;= max; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Look for first character. </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (value[i] != first) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (++i &lt;= max &amp;&amp; value[i] 
!= first); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Found first character, now look at 
the rest of value </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &lt;= max) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int j = i + 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int end = j + strCount - 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int k = 1; j &lt; end &amp;&amp; value[j] == str[k]; j++, k++); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (j == end) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Found whole string. </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return -1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 HotSpot 虚拟机中，所有被该注解标注的方法都是 HotSpot intrinsic。对这些方法的调用，会被 
HotSpot 虚拟机替换成高效的指令序列。而原本的方法实现则会被忽略掉。</p> <p>换句话说，HotSpot 虚拟机将为标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法额外维护一套高效实现。如果 
Java 核心类库的开发者更改了原本的实现，那么虚拟机中的高效实现也需要进行相应的修改，以保证程序语义一致。</p> <p>需要注意的是，其他虚拟机未必维护了这些 intrinsic 
的高效实现，它们可以直接使用原本的较为低效的 JDK 代码。同样，不同版本的 HotSpot 虚拟机所实现的 intrinsic 数量也大不相同。通常越新版本的 Java，其 intrinsic 
数量越多。</p> <p>你或许会产生这么一个疑问：为什么不直接在源代码中使用这些高效实现呢？</p> <p>这是因为高效实现通常依赖于具体的 CPU 指令，而这些 CPU 指令不好在 
Java 源程序中表达。再者，换了一个体系架构，说不定就没有对应的 CPU 指令，也就无法进行 intrinsic 优化了。</p> <p>下面我们便来看几个具体的例子。</p> <h2>intrinsic 
与 CPU 指令</h2> <p>在文章开头的例子中，<code>StringLatin1.indexOf</code>方法将在一个字符串（byte 数组）中查找另一个字符串（byte 
数组），并且返回命中时的索引值，或者 -1（未命中）。</p> <p>“恰巧”的是，X86_64 体系架构的 SSE4.2 指令集就包含一条指令 PCMPESTRI，让它能够在 16 
字节以下的字符串中，查找另一个 16 字节以下的字符串，并且返回命中时的索引值。</p> <p>因此，HotSpot 虚拟机便围绕着这一指令，开发出 X86_64 体系架构上的高效实现，并替换原本对<code>StringLatin1.indexOf</code>方法的调用。</p> 
<p>另外一个例子则是整数加法的溢出处理。一般我们在做整数加法时，需要考虑结果是否会溢出，并且在溢出的情况下作出相应的处理，以保证程序的正确性。</p> <p>Java 核心类库提供了一个<code>Math.addExact</code>方法。它将接收两个 
int 值（或 long 值）作为参数，并返回这两个 int 值的和。当这两个 int 值之和溢出时，该方法将抛出<code>ArithmeticException</code>异常。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int addExact(int x, int y) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r = x + y; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // HD 2-12 Overflow iff both arguments 
have the opposite sign of the result </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (((x ^ r) &amp; (y ^ r)) &lt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> throw new ArithmeticException("integer overflow"); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return r; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在 Java 层面判断 int 值之和是否溢出比较费事。我们需要分别比较两个 
int 值与它们的和的符号是否不同。如果都不同，那么我们便认为这两个 int 值之和溢出。对应的实现便是两个异或操作，一个与操作，以及一个比较操作。</p> <p>在 X86_64 
体系架构中，大部分计算指令都会更新状态寄存器（FLAGS register），其中就有表示指令结果是否溢出的溢出标识位（overflow flag）。因此，我们只需在加法指令之后比较溢出标志位，便可以知道 
int 值之和是否溢出了。对应的伪代码如下所示：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int addExact(int x, int 
y) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int r 
= x + y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> jo LABEL_OVERFLOW; 
// jump if overflow flag set </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return r; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> LABEL_OVERFLOW: 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> throw new ArithmeticException("integer 
overflow"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // or 
deoptimize </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>最后一个例子则是<code>Integer.bitCount</code>方法，它将统计所输入的 int 值的二进制形式中有多少个 1。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @HotSpotIntrinsicCandidate </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bitCount(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // HD, Figure 5-2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 
2) &amp; 0x33333333); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 8); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 16); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return i &amp; 0x3f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我们可以看到，<code>Integer.bitCount</code>方法的实现还是很巧妙的，但是它需要的计算步骤也比较多。在 
X86_64 体系架构中，我们仅需要一条指令<code>popcnt</code>，便可以直接统计出 int 值中 1 的个数。</p> <h2>intrinsic 与方法内联</h2> 
<p>HotSpot 虚拟机中，intrinsic 的实现方式分为两种。</p> <p>一种是独立的桩程序。它既可以被解释执行器利用，直接替换对原方法的调用；也可以被即时编译器所利用，它把代表对原方法的调用的 
IR 节点，替换为对这些桩程序的调用的 IR 节点。以这种形式实现的 intrinsic 比较少，主要包括<code>Math</code>类中的一些方法。</p> <p>另一种则是特殊的编译器 
IR 节点。显然，这种实现方式仅能够被即时编译器所利用。</p> <p>在编译过程中，即时编译器会将对原方法的调用的 IR 节点，替换成特殊的 IR 节点，并参与接下来的优化过程。最终，即时编译器的后端将根据这些特殊的 
IR 节点，生成指定的 CPU 指令。大部分的 intrinsic 都是通过这种方式实现的。</p> <p>这个替换过程是在方法内联时进行的。当即时编译器碰到方法调用节点时，它将查询目标方法是不是 
intrinsic。</p> <p>如果是，则插入相应的特殊 IR 节点；如果不是，则进行原本的内联工作。（即判断是否需要内联目标方法的方法体，并在需要内联的情况下，将目标方法的 IR 
图纳入当前的编译范围之中。）</p> <p>也就是说，如果方法调用的目标方法是 intrinsic，那么即时编译器会直接忽略原目标方法的字节码，甚至根本不在乎原目标方法是否有字节码。即便是 
native 方法，只要它被标记为 intrinsic，即时编译器便能够将之 " 内联 " 进来，并插入特殊的 IR 节点。</p> <p>事实上，不少被标记为 intrinsic 
的方法都是 native 方法。原本对这些 native 方法的调用需要经过 JNI（Java Native Interface），其性能开销十分巨大。但是，经过即时编译器的 intrinsic 
优化之后，这部分 JNI 开销便直接消失不见，并且最终的结果也十分高效。</p> <p>举个例子，我们可以通过<code>Thread.currentThread</code>方法来获取当前线程。这是一个 
native 方法，同时也是一个 HotSpot intrinsic。在 X86_64 体系架构中，R13 寄存器存放着当前线程的指针。因此，对该方法的调用将被即时编译器替换为一个特殊 
IR 节点，并最终生成读取 R13 寄存器指令。</p> <h2>已有 intrinsic 简介</h2> <p>最新版本的 HotSpot 虚拟机定义了三百多个 intrinsic。</p> 
<p>在这三百多个 intrinsic 中，有三成以上是<code>Unsafe</code>类的方法。不过，我们一般不会直接使用<code>Unsafe</code>类的方法，而是通过<code>java.util.concurrent</code>包来间接使用。</p> 
<p>举个例子，<code>Unsafe</code>类中经常会被用到的便是<code>compareAndSwap</code>方法（Java 9+ 更名为<code>compareAndSet</code>或<code>compareAndExchange</code>方法）。在 
X86_64 体系架构中，对这些方法的调用将被替换为<code>lock cmpxchg</code>指令，也就是原子性更新指令。</p> <p>除了<code>Unsafe</code>类的方法之外，HotSpot 
虚拟机中的 intrinsic 还包括下面的几种。</p> <ol> <li><code>StringBuilder</code>和<code>StringBuffer</code>类的方法。HotSpot 
虚拟机将优化利用这些方法构造字符串的方式，以尽量减少需要复制内存的情况。</li> <li><code>String</code>类、<code>StringLatin1</code>类、<code>StringUTF16</code>类和<code>Arrays</code>类的方法。HotSpot 
虚拟机将使用 SIMD 指令（single instruction multiple data，即用一条指令处理多个数据）对这些方法进行优化。<br> 举个例子，<code>Arrays.equals(byte[], 
byte[])</code>方法原本是逐个字节比较，在使用了 SIMD 指令之后，可以放入 16 字节的 XMM 寄存器中（甚至是 64 字节的 ZMM 寄存器中）批量比较。</li> 
<li>基本类型的包装类、<code>Object</code>类、<code>Math</code>类、<code>System</code>类中各个功能性方法，反射 API、<code>MethodHandle</code>类中与调用机制相关的方法，压缩、加密相关方法。这部分 
intrinsic 则比较简单，这里就不详细展开了。如果你有感兴趣的，可以自行查阅资料，或者在文末留言。</li> </ol> <p>如果你想知道 HotSpot 虚拟机定义的所有 
intrinsic，那么你可以直接查阅 OpenJDK 代码 [2]。（该链接是 Java 12 的 intrinsic 列表。Java 8 的 intrinsic 列表可以查阅这一链接 
[3]。）</p> <h2>总结与实践</h2> <p>今天我介绍了 HotSpot 虚拟机中的 intrinsic。</p> <p>HotSpot 虚拟机将对标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法的调用，替换为直接使用基于特定 
CPU 指令的高效实现。这些方法我们便称之为 intrinsic。</p> <p>具体来说，intrinsic 的实现有两种。一是不大常见的桩程序，可以在解释执行或者即时编译生成的代码中使用。二是特殊的 
IR 节点。即时编译器将在方法内联过程中，将对 intrinsic 的调用替换为这些特殊的 IR 节点，并最终生成指定的 CPU 指令。</p> <p>HotSpot 虚拟机定义了三百多个 
intrinsic。其中比较特殊的有<code>Unsafe</code>类的方法，基本上使用 java.util.concurrent 包便会间接使用到<code>Unsafe</code>类的 
intrinsic。除此之外，<code>String</code>类和<code>Arrays</code>类中的 intrinsic 也比较特殊。即时编译器将为之生成非常高效的 
SIMD 指令。</p> <p>今天的实践环节，你可以体验一下<code>Integer.bitCount</code> intrinsic 带来的性能提升。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// time java Foo </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class Foo { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int bitCount(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> // HD, Figure 5-2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 
2) &amp; 0x33333333); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 8); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i = i + (i &gt;&gt;&gt; 16); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return i &amp; 0x3f; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = Integer.MIN_VALUE; i &lt; Integer.MAX_VALUE; i++) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += bitCount(i); // In a second run, 
replace with Integer.bitCount </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println(sum); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="http://openjdk.java.net/jeps/254">http://openjdk.java.net/jeps/254</a><br> 
[2] <a href="http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727">http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727</a><br> 
[3] <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 2 msec}
2020-11-19 20:12:24.300 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=22 
 {executed in 1 msec}
2020-11-19 20:12:24.303 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:24.308 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=22 
 {executed in 2 msec}
2020-11-19 20:12:24.310 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:12:24.316 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787944, 1605787944, 1, 'zh-hans', 0, 1, 1, 
0, '22丨HotSpot虚拟机的intrinsic', 1, 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.325 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=22 
 {executed in 2 msec}
2020-11-19 20:12:24.327 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:24.332 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787944, 1605787944, 1, 'zh-hans', 0, 
1, 1, 0, '22丨HotSpot虚拟机的intrinsic', 'book', 1, 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.340 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=22 
 {executed in 2 msec}
2020-11-19 20:12:24.341 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:24.345 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.346 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:24.351 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6467298d2be79ff8cb86ffdecdcb256c?bkt=en-24c643f198a62f885f211f1b5167a0eacd7fc2eee906e9889792245438a2161b5021889798e2324a&fid=3757516097-778750-206838845446414&time=1605787942&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-9NDPvWDyKik1kya5SsXrcOBz%2F4o%3D&to=92&size=4490205&sta_dx=4490205&sta_cs=4300&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182970&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4490205&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-462d58fd4b77905661d14eaefc2cb579d9b28d75485a9ae4881f4b8c2a7bbff3d7966952ce571fbd&sl=76480590&expires=8h&rt=pr&r=343605416&mlogid=7510808594331603431&vbdid=64799653&fin=22%E4%B8%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84intrinsic.mp3&bflag=92,34-92&rtype=1&dp-logid=7510808594331603431&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=82267e380bbbb0898b636555d6881f8187522d89b2084766&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=22%E4%B8%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84intrinsic.mp3', 
22, 22) 
 {executed in 0 msec}
2020-11-19 20:12:24.359 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.361 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:24.367 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6467298d2be79ff8cb86ffdecdcb256c?bkt=en-24c643f198a62f885f211f1b5167a0eacd7fc2eee906e9889792245438a2161b5021889798e2324a&fid=3757516097-778750-206838845446414&time=1605787942&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-9NDPvWDyKik1kya5SsXrcOBz%2F4o%3D&to=92&size=4490205&sta_dx=4490205&sta_cs=4300&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182970&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4490205&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-462d58fd4b77905661d14eaefc2cb579d9b28d75485a9ae4881f4b8c2a7bbff3d7966952ce571fbd&sl=76480590&expires=8h&rt=pr&r=343605416&mlogid=7510808594331603431&vbdid=64799653&fin=22%E4%B8%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84intrinsic.mp3&bflag=92,34-92&rtype=1&dp-logid=7510808594331603431&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=82267e380bbbb0898b636555d6881f8187522d89b2084766&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=22%E4%B8%A8HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84intrinsic.mp3', 
22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.374 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=22 
 {executed in 2 msec}
2020-11-19 20:12:24.376 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:24.379 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 20:12:24.381 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:24.389 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/2e/9b/84370b68.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>^_^</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我个人觉得老师讲的非常好，这些东西更像是讲解一个系统似的，让我们更懂他们的运行机制，推算出我们系统每个类、方法和属性在jvm上的运作模式。这课程真的对于我们java开发的真的是太有帮助了，不想某某些课程占着实践经验的名义混。感谢老师辛苦啦！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 嗯，JVM的重要性自不必言，学好是进阶的台阶，否则就是屏障。不知道运行原理和机制，怎么理解OOM？怎么优化性能？怎么分析和定位一些奇怪的问题？ 
<br> <br>老师讲的相当好了，只是知识储备不够的话，学习曲线是比较陡峭的，比如IR图，那个是第一次听，来龙去脉都不清楚自然会懵逼。还好大部分都能听明白和吸收，只是以后面试能判断出面试官的水平。 
<br> <br>懂JVM我感觉就好像了解地球是圆的以及围绕太阳公转一样，好像平时生活上也没什么用，不过如果想要征服星辰大海，以及迷失方向时还是挺有用的。 <br> <br>嗯，总之，老师讲的非常好，毕竟只是一个专栏的入门教程，已经如此深入了，相当有用，这也是我付费了第一个专栏，由于老师讲的好，我在极客时间又订阅的好多，现在已看不过来了，不过这个专栏我一直没断，每天必听必看，感觉学到不少知识。 
<br> <br>嗯，今天讲解的 intrinsic ，我感觉也听明白了，总结一下： <br>1:intrinsic-可认为也是一种hotspot虚拟机，为提高JVM性能的优化机制或技巧 
<br> <br>2:使用注解的方式来和Java代码结合 <br> <br>3:本质上适配出对应系统体系架构，然后直接使用和系统体系架构强关联的高效指令来执行对应的功能 <br> <br>4:针对不同的类具体的高效指令亦不同 
<br> <br>疑问❓ <br>1:intrinsic 是只有hotspot虚拟机支持吗？ <br> <br>2:系统的体系架构适配是唯一的吗？主要是x86_64？按照这个思路是不是可以有多个类似的注视，针对多种的系统体系架构来优化呢？毕竟计算机系统的体系架构是有限的 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/0a/98e116e0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_09d83...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得有些功能你要先知道，再去考虑能否会用到这些功能。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 嗯嗯！<br>我的想法是，在这个专栏中介绍JVM各个组件的设计与实现。之后当开发人员在遇到性能问题时，能够联想到具体是哪个组件可能出了问题，从而针对性地去做调优。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我还是看得蛮过瘾的，周一三五早上起来第一件事就是看更新，的确可能不是很实用，但是对于对虚拟机感兴趣的同学来讲，是满足了好奇心 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/7b/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ahern88</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得这份虚拟机教程写的知识有点偏，不够实用，大家觉得呢 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>JVM对用户来说是透明的，可调优的参数也在逐渐减少，总体朝着自适配前进。所以把本专栏当成工具书来看的话，确实没有多少实用性。<br><br>不过就算是自适配的虚拟机，也有覆盖不到的场景。专栏前面这两部分，正是在介绍JVM各个模块的设计与实现，以便开发人员在发现性能问题时能够联想到可能出问题的具体模块。<br><br>接下来的第三部分会介绍一些性能监控分析工具，希望会对你有所帮助。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LenX</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我觉得老师讲的非常好，尤其是上两讲讲方法内联，结合老师讲的，在课后我又恶补了一下 IR 
方面的知识，收获很大。 <br>尽管目前我的工作不会直接用到这方面的知识，但我相信这些底层机制、原理性的知识点，对成长为一名优秀的工程师是必备的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/ABjAPveWxOuBs3ibbCaBicX7OSibic3prycYG9vOicGHMEv8Vws5o3epykBSFHkbysnaKeMqQaJufINNUncGhmAEomg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雪人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这些东西，尽管现在可能看起来不会都懂，但留着以后无论什么时候再看，都会有或多或少的收获，而这个收获，对以后的前进之路，是有非常大的帮助，感谢老师，希望老师有空能再出一份专栏吧 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 我看了下java8中没有找到这个注解。调用从源码复制出来的方法和直接调用源码的方法没有性能上的差别。是java8没有加入这种优化吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: Java8已经有一些intrinsic，但不多。<br><br>这个注解应该是Java 9引入的，它的意思其实是用来提醒JDK开发人员注意虚拟机里有对应的intrinsic，改动的话需要通知我们</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/55/ba/2fb88756.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>JZ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Java8中并没有看到相应的注解，如String类的indexOf方法，Java8中没有类似的优化？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 记得是9之后才大量加入的</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>四阿哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 第三部分，利用工具进行调优，非常期待，其实像PrintCompile这类参数也是十分实用的 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bradsun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 不好意思，昨天没写清楚。就是intrinsic，只有少部分可以直接被解释器应用，而大部分只能被编译器应用。为什么不都可以被解释器调用，这样解释执行的时候不会更高效吗 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bradsun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个为什么不都是独立的形式。而且只有少部分是独立的。谢谢 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 不好意思没明白你的问题。什么是独立的？</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 2 msec}
2020-11-19 20:12:24.408 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.410 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:24.417 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/2e/9b/84370b68.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>^_^</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我个人觉得老师讲的非常好，这些东西更像是讲解一个系统似的，让我们更懂他们的运行机制，推算出我们系统每个类、方法和属性在jvm上的运作模式。这课程真的对于我们java开发的真的是太有帮助了，不想某某些课程占着实践经验的名义混。感谢老师辛苦啦！ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 多谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-13 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 嗯，JVM的重要性自不必言，学好是进阶的台阶，否则就是屏障。不知道运行原理和机制，怎么理解OOM？怎么优化性能？怎么分析和定位一些奇怪的问题？ 
<br> <br>老师讲的相当好了，只是知识储备不够的话，学习曲线是比较陡峭的，比如IR图，那个是第一次听，来龙去脉都不清楚自然会懵逼。还好大部分都能听明白和吸收，只是以后面试能判断出面试官的水平。 
<br> <br>懂JVM我感觉就好像了解地球是圆的以及围绕太阳公转一样，好像平时生活上也没什么用，不过如果想要征服星辰大海，以及迷失方向时还是挺有用的。 <br> <br>嗯，总之，老师讲的非常好，毕竟只是一个专栏的入门教程，已经如此深入了，相当有用，这也是我付费了第一个专栏，由于老师讲的好，我在极客时间又订阅的好多，现在已看不过来了，不过这个专栏我一直没断，每天必听必看，感觉学到不少知识。 
<br> <br>嗯，今天讲解的 intrinsic ，我感觉也听明白了，总结一下： <br>1:intrinsic-可认为也是一种hotspot虚拟机，为提高JVM性能的优化机制或技巧 
<br> <br>2:使用注解的方式来和Java代码结合 <br> <br>3:本质上适配出对应系统体系架构，然后直接使用和系统体系架构强关联的高效指令来执行对应的功能 <br> <br>4:针对不同的类具体的高效指令亦不同 
<br> <br>疑问❓ <br>1:intrinsic 是只有hotspot虚拟机支持吗？ <br> <br>2:系统的体系架构适配是唯一的吗？主要是x86_64？按照这个思路是不是可以有多个类似的注视，针对多种的系统体系架构来优化呢？毕竟计算机系统的体系架构是有限的 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/0a/98e116e0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_09d83...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得有些功能你要先知道，再去考虑能否会用到这些功能。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 嗯嗯！<br>我的想法是，在这个专栏中介绍JVM各个组件的设计与实现。之后当开发人员在遇到性能问题时，能够联想到具体是哪个组件可能出了问题，从而针对性地去做调优。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我还是看得蛮过瘾的，周一三五早上起来第一件事就是看更新，的确可能不是很实用，但是对于对虚拟机感兴趣的同学来讲，是满足了好奇心 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 谢谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/5d/7b/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ahern88</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我觉得这份虚拟机教程写的知识有点偏，不够实用，大家觉得呢 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>JVM对用户来说是透明的，可调优的参数也在逐渐减少，总体朝着自适配前进。所以把本专栏当成工具书来看的话，确实没有多少实用性。<br><br>不过就算是自适配的虚拟机，也有覆盖不到的场景。专栏前面这两部分，正是在介绍JVM各个模块的设计与实现，以便开发人员在发现性能问题时能够联想到可能出问题的具体模块。<br><br>接下来的第三部分会介绍一些性能监控分析工具，希望会对你有所帮助。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>LenX</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 我觉得老师讲的非常好，尤其是上两讲讲方法内联，结合老师讲的，在课后我又恶补了一下 IR 
方面的知识，收获很大。 <br>尽管目前我的工作不会直接用到这方面的知识，但我相信这些底层机制、原理性的知识点，对成长为一名优秀的工程师是必备的。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
多谢支持！</p> </div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/ABjAPveWxOuBs3ibbCaBicX7OSibic3prycYG9vOicGHMEv8Vws5o3epykBSFHkbysnaKeMqQaJufINNUncGhmAEomg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>雪人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这些东西，尽管现在可能看起来不会都懂，但留着以后无论什么时候再看，都会有或多或少的收获，而这个收获，对以后的前进之路，是有非常大的帮助，感谢老师，希望老师有空能再出一份专栏吧 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>白三岁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 我看了下java8中没有找到这个注解。调用从源码复制出来的方法和直接调用源码的方法没有性能上的差别。是java8没有加入这种优化吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: Java8已经有一些intrinsic，但不多。<br><br>这个注解应该是Java 9引入的，它的意思其实是用来提醒JDK开发人员注意虚拟机里有对应的intrinsic，改动的话需要通知我们</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/55/ba/2fb88756.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>JZ</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Java8中并没有看到相应的注解，如String类的indexOf方法，Java8中没有类似的优化？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 记得是9之后才大量加入的</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>四阿哥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 第三部分，利用工具进行调优，非常期待，其实像PrintCompile这类参数也是十分实用的 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bradsun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 不好意思，昨天没写清楚。就是intrinsic，只有少部分可以直接被解释器应用，而大部分只能被编译器应用。为什么不都可以被解释器调用，这样解释执行的时候不会更高效吗 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>bradsun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个为什么不都是独立的形式。而且只有少部分是独立的。谢谢 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 不好意思没明白你的问题。什么是独立的？</p> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.437 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.440 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:24.443 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.445 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:24.450 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 22, 'https://static001.geekbang.org/resource/image/08/dc/089d9a185ab3f08c3ab9b0275fccb0dc.jpg', 
22) 
 {executed in 0 msec}
2020-11-19 20:12:24.458 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=22 
 {executed in 2 msec}
2020-11-19 20:12:24.459 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:24.464 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 22, 'https://static001.geekbang.org/resource/image/08/dc/089d9a185ab3f08c3ab9b0275fccb0dc.jpg', 
22) 
 {executed in 0 msec}
2020-11-19 20:12:24.471 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 20:12:24.472 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:24.478 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.484 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 20:12:24.485 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:24.490 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 20:12:24.496 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='823672788263981' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:12:24.497 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:42.343 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='823672788263981' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:12:42.349 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:42.358 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('823672788263981', 1, 'net_content') 
 {executed in 2 msec}
2020-11-19 20:12:42.363 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('823672788263981', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:12:42.368 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|47            |
|--------------|

2020-11-19 20:12:42.412 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='823672788263981' 
and bookchecke0_.name='media' 
 {executed in 2 msec}
2020-11-19 20:12:42.417 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:46.405 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='823672788263981' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:12:46.407 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:12:46.410 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('823672788263981', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:12:46.411 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('823672788263981', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:12:46.413 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|48            |
|--------------|

2020-11-19 20:12:46.426 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='823672788263981' 
 {executed in 1 msec}
2020-11-19 20:12:46.428 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:46.431 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787966, 1) 
 {executed in 1 msec}
2020-11-19 20:12:46.433 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787966, 1) 
 {executed in 0 msec}
2020-11-19 20:12:46.434 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|23            |
|--------------|

2020-11-19 20:12:46.442 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '57acebcd-0aad-43f8-b750-dcb40959aec7', 
23) 
 {executed in 0 msec}
2020-11-19 20:12:46.444 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '57acebcd-0aad-43f8-b750-dcb40959aec7', 23) 
 {executed in 0 msec}
2020-11-19 20:12:46.446 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|23            |
|--------------|

2020-11-19 20:12:46.460 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=23, revision_default=1, revision_timestamp=1605787966, 
revision_uid=1 where vid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.469 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=23 
 {executed in 2 msec}
2020-11-19 20:12:46.470 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:46.477 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '823672788263981', 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.489 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.491 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:12:46.497 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '823672788263981', 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.506 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.508 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:46.512 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.515 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:12:46.523 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 23, 0, 0, 19, 0, 23) 
 {executed in 2 msec}
2020-11-19 20:12:46.529 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.532 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:46.538 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.540 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:46.554 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在上一篇中，我举的例子都是静态方法调用，即时编译器可以轻易地确定唯一的目标方法。</p> <p>然而，对于需要动态绑定的虚方法调用来说，即时编译器则需要先对虚方法调用进行去虚化（devirtualize），即转换为一个或多个直接调用，然后才能进行方法内联。</p> 
<p><strong>即时编译器的去虚化方式可分为完全去虚化以及条件去虚化（guarded devirtualization）。</strong></p> <p><strong>完全去虚化</strong>是通过类型推导或者类层次分析（class 
hierarchy analysis），识别虚方法调用的唯一目标方法，从而将其转换为直接调用的一种优化手段。它的关键在于证明虚方法调用的目标方法是唯一的。</p> <p><strong>条件去虚化</strong>则是将虚方法调用转换为若干个类型测试以及直接调用的一种优化手段。它的关键在于找出需要进行比较的类型。</p> 
<p>在介绍具体的去虚化方式之前，我们先来看一段代码。这里我定义了一个抽象类 BinaryOp，其中包含一个抽象方法 apply。BinaryOp 类有两个子类 Add 和 Sub，均实现了 
apply 方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> abstract class BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public abstract int apply(int a, int b); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Add extends BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int apply(int a, int b) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return a + b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Sub extends BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int apply(int a, int b) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return a - b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>下面我便用这个例子来逐一讲解这几种去虚化方式。</p> 
<h2>基于类型推导的完全去虚化</h2> <p>基于类型推导的完全去虚化将通过数据流分析推导出调用者的动态类型，从而确定具体的目标方法。</p><!-- [[[read_end]]] 
--> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> BinaryOp op = new Add(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int bar(BinaryOp op) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> op = (Add) op; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中的 
foo 方法和 bar 方法均会调用 apply 方法，且调用者的声明类型皆为 BinaryOp。这意味着 Java 编译器会将其编译为 invokevirtual 指令，调用 BinaryOp.apply 
方法。</p> <p>前两篇中我曾提到过，在 Sea-of-Nodes 的 IR 系统中，变量不复存在，取而代之的是具体值。这些具体值的类型往往要比变量的声明类型精确。<br> <img 
src="https://static001.geekbang.org/resource/image/28/07/2874be42bccaece59ed2484aaa478407.png" 
alt=""></p> <p><strong>foo 方法的 IR 图（方法内联前）</strong></p> <p><img src="https://static001.geekbang.org/resource/image/32/fc/32ce05f4929ae328ffbf5517175420fc.png" 
alt=""></p> <h3>bar 方法的 IR 图（方法内联前）</h3> <p>在上面两张 IR 图中，方法调用的调用者（即 8 号 CallTarget 节点的第一个依赖值）分别为 
2 号 New 节点，以及 5 号 Pi 节点。后者可以简单看成强制转换后的精确类型。由于这两个节点的类型均被精确为 Add 类，因此，原 invokevirtual 指令对应的 9 
号 invoke 节点都被识别对 Add.apply 方法的调用。</p> <p>经过对该具体方法的内联之后，对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/a9/0d/a90e99097591778a4dd5d145f84ed00d.png" 
alt=""></p> <h3>foo 方法的 IR 图（方法内联及逃逸分析后）</h3> <p><img src="https://static001.geekbang.org/resource/image/31/4a/3161d594415960a3675fad00812df94a.png" 
alt=""></p> <h3>bar 方法的 IR 图（方法内联后）</h3> <p>可以看到，通过将字节码转换为 Sea-of-Nodes IR 之后，即时编译器便可以直接去虚化，并将唯一的目标方法进一步内联进来。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int notInlined(BinaryOp op) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (op instanceof Add) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>不过，对于上面这段代码中的 notInlined 方法，尽管理论上即时编译器能够推导出调用者的动态类型为 
Add，但是 C2 和 Graal 都没有这么做。</p> <p>其原因在于类型推导属于全局优化，本身比较浪费时间；另一方面，就算不进行基于类型推导的完全去虚化，也有接下来的基于类层次分析的去虚化，以及条件去虚化兜底，覆盖大部分的代码情况。</p> 
<p><img src="https://static001.geekbang.org/resource/image/14/2f/1492fc7d74c1e904d47196f8f63b682f.png" 
alt=""></p> <h3>notInlined 方法的 IR 图（方法内联失败后）</h3> <p>因此，C2 和 Graal 决定，如果生成 Sea-of-Nodes IR 
后，调用者的动态类型已能够直接确定，那么就进行这项去虚化。如果需要额外的数据流分析方能确定，那么干脆不做，以节省编译时间，并依赖接下来的去虚化手段进行优化。</p> <h2>基于类层次分析的完全去虚化</h2> 
<p>基于类层次分析的完全去虚化通过分析 Java 虚拟机中所有已被加载的类，判断某个抽象方法或者接口方法是否仅有一个实现。如果是，那么对这些方法的调用将只能调用至该具体实现中。</p> 
<p>在上面的例子中，假设在编译 foo、bar 或 notInlined 方法时，Java 虚拟机仅加载了 Add。那么，BinaryOp.apply 方法只有 Add.apply 
这么一个具体实现。因此，当即时编译器碰到对 BinaryOp.apply 的调用时，便可直接内联 Add.apply 的内容。</p> <p>那么问题来了，即时编译器如何保证在今后的执行过程中，BinaryOp.apply 
方法还是只有 Add.apply 这么一个具体实现呢？</p> <p>事实上，它无法保证。因为 Java 虚拟机有可能在上述编译完成之后加载 Sub 类，从而引入另一个 BinaryOp.apply 
方法的具体实现 Sub.apply。</p> <p>Java 虚拟机的做法是为当前编译结果注册若干个假设（assumption），假定某抽象类只有一个子类，或者某抽象方法只有一个具体实现，又或者某类没有子类等。</p> 
<p>之后，每当新的类被加载，Java 虚拟机便会重新验证这些假设。如果某个假设不再成立，那么 Java 虚拟机便会对其所属的编译结果进行去优化。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int test(BinaryOp op) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码中的 test 方法为例。假设即时编译的时候，如果类层次分析得出 
BinaryOp 类只有 Add 一个子类的结论，那么即时编译器可以注册一个假设，假定抽象方法 BinaryOp.apply 有且仅有 Add.apply 这个具体实现。</p> <p>基于这个假设，原虚方法调用便可直接被去虚化为对 
Add.apply 方法的调用。如果在之后的运行过程中，Java 虚拟机又加载了 Sub 类，那么该假设失效，Java 虚拟机需要触发 test 方法编译结果的去优化。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(Add op) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return op.apply(2, 1); // 仍需添加假设 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>事实上，即便调用者的声明类型为 Add，即时编译器仍需为之添加假设。这是因为 
Java 虚拟机不能保证没有重写了 apply 方法的 Add 类的子类。</p> <p>为了保证这里 apply 方法的语义，即时编译器需要假设 Add 类没有子类。当然，通过将 
Add 类标注为 final，可以避开这个问题。</p> <p>可以看到，即时编译器并不要求目标方法使用 final 修饰符。只要目标方法事实上是 final 的（effective 
final），便可以进行相应的去虚化以及内联。</p> <p>不过，如果使用了 final 修饰符，即时编译器便可以不用生成对应的假设。这将使编译结果更加精简，并减少类加载时所需验证的内容。</p> 
<p><img src="https://static001.geekbang.org/resource/image/f8/91/f87c733b714828c22c9d67c83911cd91.png" 
alt=""></p> <h3>test 方法的 IR 图（方法内联后）</h3> <p>让我们回到原本的例子中。从 test 方法的 IR 图可以看出，生成的代码无须检测调用者的动态类型是否为 
Add，便直接执行内联之后的 Add.apply 方法中的内容（2+1 经过常量折叠之后得到 3，对应 13 号常数节点）。这是因为动态类型检测已被移至假设之中了。</p> <p>然而，对于接口方法调用，该去虚化手段则不能移除动态类型检测。这是因为在执行 
invokeinterface 指令时，Java 虚拟机必须对调用者的动态类型进行测试，看它是否实现了目标接口方法所在的接口。</p> <blockquote> <p>Java 类验证器将接口类型直接看成 
Object 类型，所以有可能出现声明类型为接口，实际类型没有继承该接口的情况，如下例所示。</p> </blockquote> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// A.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> interface 
I {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class A { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void test(I obj) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println("Hello World"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> test(new B()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // B.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class B implements I { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Step 1: compile A.java and B.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // Step 2: remove "implements I" from B.java, and compile B.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Step 3: run A </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>既然这一类型测试无法避免，C2 干脆就不对接口方法调用进行基于类层次分析的完全去虚化，而是依赖于接下来的条件去虚化。</p> <h2>条件去虚化</h2> <p>前面提到，条件去虚化通过向代码中添加若干个类型比较，将虚方法调用转换为若干个直接调用。</p> 
<p>具体的原理非常简单，是将调用者的动态类型，依次与 Java 虚拟机所收集的类型 Profile 中记录的类型相比较。如果匹配，则直接调用该记录类型所对应的目标方法。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(BinaryOp op) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>我们继续使用前面的例子。假设编译时类型 
Profile 记录了调用者的两个类型 Sub 和 Add，那么即时编译器可以据此进行条件去虚化，依次比较调用者的动态类型是否为 Sub 或者 Add，并内联相应的方法。其伪代码如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(BinaryOp op) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (op.getClass() == Sub.class) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 2 - 1; // inlined Sub.apply </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else if (op.getClass() == Add.class) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 2 + 1; // inlined Add.apply </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // 当匹配不到类型 Profile 中的类型怎么办？ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>如果遍历完类型 Profile 中的所有记录，仍旧匹配不到调用者的动态类型，那么即时编译器有两种选择。</p> <p>第一，如果类型 Profile 
是完整的，也就是说，所有出现过的动态类型都被记录至类型 Profile 之中，那么即时编译器可以让程序进行去优化，重新收集类型 Profile，对应的 IR 图如下所示（这里 27 
号 TypeSwitch 节点等价于前面伪代码中的多个 if 语句）：<br> <img src="https://static001.geekbang.org/resource/image/88/6d/8885061253bc50be255cff736b683f6d.png" 
alt=""></p> <h3>当匹配不到动态类型时进行去优化</h3> <p>第二，如果类型 Profile 是不完整的，也就是说，某些出现过的动态类型并没有记录至类型 Profile 
之中，那么重新收集并没有多大作用。此时，即时编译器可以让程序进行原本的虚调用，通过内联缓存进行调用，或者通过方法表进行动态绑定。对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/dd/de/ddb0474fdad3031e935003c2d57a04de.png" 
alt=""></p> <h3>当匹配不到动态类型时进行虚调用（仅在 Graal 中使用。）</h3> <p>在 C2 中，如果类型 Profile 是不完整的，即时编译器压根不会进行条件去虚化，而是直接使用内联缓存或者方法表。</p> 
<h2>总结与实践</h2> <p>今天我介绍了即时编译器去虚化的几种方法。</p> <p>完全去虚化通过类型推导或者类层次分析，将虚方法调用转换为直接调用。它的关键在于证明虚方法调用的目标方法是唯一的。</p> 
<p>条件去虚化通过向代码中增添类型比较，将虚方法调用转换为一个个的类型测试以及对应该类型的直接调用。它将借助 Java 虚拟机所收集的类型 Profile。</p> <p>今天的实践环节，我们来重现因类加载导致去优化的过程。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // Run with java -XX:CompileCommand=''dontinline JITTest.test'' 
-XX:+PrintCompilation JITTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class JITTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static abstract class BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public abstract int apply(int a, int b); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static class Add extends BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int apply(int a, int b) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a + b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static class Sub extends BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int apply(int a, int b) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a - b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int test(BinaryOp op) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Add add = new Add(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 400_000; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> test(add); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
System.out.println("Loading Sub"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Sub[] array = new Sub[0]; // Load class Sub </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Expect output: "JITTest::test (7 bytes) 
made not entrant" </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 4 msec}
2020-11-19 20:12:46.567 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.569 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:12:46.581 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在上一篇中，我举的例子都是静态方法调用，即时编译器可以轻易地确定唯一的目标方法。</p> <p>然而，对于需要动态绑定的虚方法调用来说，即时编译器则需要先对虚方法调用进行去虚化（devirtualize），即转换为一个或多个直接调用，然后才能进行方法内联。</p> 
<p><strong>即时编译器的去虚化方式可分为完全去虚化以及条件去虚化（guarded devirtualization）。</strong></p> <p><strong>完全去虚化</strong>是通过类型推导或者类层次分析（class 
hierarchy analysis），识别虚方法调用的唯一目标方法，从而将其转换为直接调用的一种优化手段。它的关键在于证明虚方法调用的目标方法是唯一的。</p> <p><strong>条件去虚化</strong>则是将虚方法调用转换为若干个类型测试以及直接调用的一种优化手段。它的关键在于找出需要进行比较的类型。</p> 
<p>在介绍具体的去虚化方式之前，我们先来看一段代码。这里我定义了一个抽象类 BinaryOp，其中包含一个抽象方法 apply。BinaryOp 类有两个子类 Add 和 Sub，均实现了 
apply 方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> abstract class BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public abstract int apply(int a, int b); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Add extends BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int apply(int a, int b) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return a + b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Sub extends BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int apply(int a, int b) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return a - b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>下面我便用这个例子来逐一讲解这几种去虚化方式。</p> 
<h2>基于类型推导的完全去虚化</h2> <p>基于类型推导的完全去虚化将通过数据流分析推导出调用者的动态类型，从而确定具体的目标方法。</p><!-- [[[read_end]]] 
--> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> BinaryOp op = new Add(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int bar(BinaryOp op) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> op = (Add) op; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>举个例子，上面这段代码中的 
foo 方法和 bar 方法均会调用 apply 方法，且调用者的声明类型皆为 BinaryOp。这意味着 Java 编译器会将其编译为 invokevirtual 指令，调用 BinaryOp.apply 
方法。</p> <p>前两篇中我曾提到过，在 Sea-of-Nodes 的 IR 系统中，变量不复存在，取而代之的是具体值。这些具体值的类型往往要比变量的声明类型精确。<br> <img 
src="https://static001.geekbang.org/resource/image/28/07/2874be42bccaece59ed2484aaa478407.png" 
alt=""></p> <p><strong>foo 方法的 IR 图（方法内联前）</strong></p> <p><img src="https://static001.geekbang.org/resource/image/32/fc/32ce05f4929ae328ffbf5517175420fc.png" 
alt=""></p> <h3>bar 方法的 IR 图（方法内联前）</h3> <p>在上面两张 IR 图中，方法调用的调用者（即 8 号 CallTarget 节点的第一个依赖值）分别为 
2 号 New 节点，以及 5 号 Pi 节点。后者可以简单看成强制转换后的精确类型。由于这两个节点的类型均被精确为 Add 类，因此，原 invokevirtual 指令对应的 9 
号 invoke 节点都被识别对 Add.apply 方法的调用。</p> <p>经过对该具体方法的内联之后，对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/a9/0d/a90e99097591778a4dd5d145f84ed00d.png" 
alt=""></p> <h3>foo 方法的 IR 图（方法内联及逃逸分析后）</h3> <p><img src="https://static001.geekbang.org/resource/image/31/4a/3161d594415960a3675fad00812df94a.png" 
alt=""></p> <h3>bar 方法的 IR 图（方法内联后）</h3> <p>可以看到，通过将字节码转换为 Sea-of-Nodes IR 之后，即时编译器便可以直接去虚化，并将唯一的目标方法进一步内联进来。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int notInlined(BinaryOp op) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (op instanceof Add) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>不过，对于上面这段代码中的 notInlined 方法，尽管理论上即时编译器能够推导出调用者的动态类型为 
Add，但是 C2 和 Graal 都没有这么做。</p> <p>其原因在于类型推导属于全局优化，本身比较浪费时间；另一方面，就算不进行基于类型推导的完全去虚化，也有接下来的基于类层次分析的去虚化，以及条件去虚化兜底，覆盖大部分的代码情况。</p> 
<p><img src="https://static001.geekbang.org/resource/image/14/2f/1492fc7d74c1e904d47196f8f63b682f.png" 
alt=""></p> <h3>notInlined 方法的 IR 图（方法内联失败后）</h3> <p>因此，C2 和 Graal 决定，如果生成 Sea-of-Nodes IR 
后，调用者的动态类型已能够直接确定，那么就进行这项去虚化。如果需要额外的数据流分析方能确定，那么干脆不做，以节省编译时间，并依赖接下来的去虚化手段进行优化。</p> <h2>基于类层次分析的完全去虚化</h2> 
<p>基于类层次分析的完全去虚化通过分析 Java 虚拟机中所有已被加载的类，判断某个抽象方法或者接口方法是否仅有一个实现。如果是，那么对这些方法的调用将只能调用至该具体实现中。</p> 
<p>在上面的例子中，假设在编译 foo、bar 或 notInlined 方法时，Java 虚拟机仅加载了 Add。那么，BinaryOp.apply 方法只有 Add.apply 
这么一个具体实现。因此，当即时编译器碰到对 BinaryOp.apply 的调用时，便可直接内联 Add.apply 的内容。</p> <p>那么问题来了，即时编译器如何保证在今后的执行过程中，BinaryOp.apply 
方法还是只有 Add.apply 这么一个具体实现呢？</p> <p>事实上，它无法保证。因为 Java 虚拟机有可能在上述编译完成之后加载 Sub 类，从而引入另一个 BinaryOp.apply 
方法的具体实现 Sub.apply。</p> <p>Java 虚拟机的做法是为当前编译结果注册若干个假设（assumption），假定某抽象类只有一个子类，或者某抽象方法只有一个具体实现，又或者某类没有子类等。</p> 
<p>之后，每当新的类被加载，Java 虚拟机便会重新验证这些假设。如果某个假设不再成立，那么 Java 虚拟机便会对其所属的编译结果进行去优化。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int test(BinaryOp op) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码中的 test 方法为例。假设即时编译的时候，如果类层次分析得出 
BinaryOp 类只有 Add 一个子类的结论，那么即时编译器可以注册一个假设，假定抽象方法 BinaryOp.apply 有且仅有 Add.apply 这个具体实现。</p> <p>基于这个假设，原虚方法调用便可直接被去虚化为对 
Add.apply 方法的调用。如果在之后的运行过程中，Java 虚拟机又加载了 Sub 类，那么该假设失效，Java 虚拟机需要触发 test 方法编译结果的去优化。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(Add op) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return op.apply(2, 1); // 仍需添加假设 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>事实上，即便调用者的声明类型为 Add，即时编译器仍需为之添加假设。这是因为 
Java 虚拟机不能保证没有重写了 apply 方法的 Add 类的子类。</p> <p>为了保证这里 apply 方法的语义，即时编译器需要假设 Add 类没有子类。当然，通过将 
Add 类标注为 final，可以避开这个问题。</p> <p>可以看到，即时编译器并不要求目标方法使用 final 修饰符。只要目标方法事实上是 final 的（effective 
final），便可以进行相应的去虚化以及内联。</p> <p>不过，如果使用了 final 修饰符，即时编译器便可以不用生成对应的假设。这将使编译结果更加精简，并减少类加载时所需验证的内容。</p> 
<p><img src="https://static001.geekbang.org/resource/image/f8/91/f87c733b714828c22c9d67c83911cd91.png" 
alt=""></p> <h3>test 方法的 IR 图（方法内联后）</h3> <p>让我们回到原本的例子中。从 test 方法的 IR 图可以看出，生成的代码无须检测调用者的动态类型是否为 
Add，便直接执行内联之后的 Add.apply 方法中的内容（2+1 经过常量折叠之后得到 3，对应 13 号常数节点）。这是因为动态类型检测已被移至假设之中了。</p> <p>然而，对于接口方法调用，该去虚化手段则不能移除动态类型检测。这是因为在执行 
invokeinterface 指令时，Java 虚拟机必须对调用者的动态类型进行测试，看它是否实现了目标接口方法所在的接口。</p> <blockquote> <p>Java 类验证器将接口类型直接看成 
Object 类型，所以有可能出现声明类型为接口，实际类型没有继承该接口的情况，如下例所示。</p> </blockquote> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// A.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> interface 
I {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class A { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void test(I obj) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> System.out.println("Hello World"); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> test(new B()); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // B.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public class B implements I { } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Step 1: compile A.java and B.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // Step 2: remove "implements I" from B.java, and compile B.java 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Step 3: run A </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>既然这一类型测试无法避免，C2 干脆就不对接口方法调用进行基于类层次分析的完全去虚化，而是依赖于接下来的条件去虚化。</p> <h2>条件去虚化</h2> <p>前面提到，条件去虚化通过向代码中添加若干个类型比较，将虚方法调用转换为若干个直接调用。</p> 
<p>具体的原理非常简单，是将调用者的动态类型，依次与 Java 虚拟机所收集的类型 Profile 中记录的类型相比较。如果匹配，则直接调用该记录类型所对应的目标方法。</p> <pre 
style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(BinaryOp op) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>我们继续使用前面的例子。假设编译时类型 
Profile 记录了调用者的两个类型 Sub 和 Add，那么即时编译器可以据此进行条件去虚化，依次比较调用者的动态类型是否为 Sub 或者 Add，并内联相应的方法。其伪代码如下所示：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int test(BinaryOp op) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (op.getClass() == Sub.class) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 2 - 1; // inlined Sub.apply </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else if (op.getClass() == Add.class) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 2 + 1; // inlined Add.apply </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... // 当匹配不到类型 Profile 中的类型怎么办？ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>如果遍历完类型 Profile 中的所有记录，仍旧匹配不到调用者的动态类型，那么即时编译器有两种选择。</p> <p>第一，如果类型 Profile 
是完整的，也就是说，所有出现过的动态类型都被记录至类型 Profile 之中，那么即时编译器可以让程序进行去优化，重新收集类型 Profile，对应的 IR 图如下所示（这里 27 
号 TypeSwitch 节点等价于前面伪代码中的多个 if 语句）：<br> <img src="https://static001.geekbang.org/resource/image/88/6d/8885061253bc50be255cff736b683f6d.png" 
alt=""></p> <h3>当匹配不到动态类型时进行去优化</h3> <p>第二，如果类型 Profile 是不完整的，也就是说，某些出现过的动态类型并没有记录至类型 Profile 
之中，那么重新收集并没有多大作用。此时，即时编译器可以让程序进行原本的虚调用，通过内联缓存进行调用，或者通过方法表进行动态绑定。对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/dd/de/ddb0474fdad3031e935003c2d57a04de.png" 
alt=""></p> <h3>当匹配不到动态类型时进行虚调用（仅在 Graal 中使用。）</h3> <p>在 C2 中，如果类型 Profile 是不完整的，即时编译器压根不会进行条件去虚化，而是直接使用内联缓存或者方法表。</p> 
<h2>总结与实践</h2> <p>今天我介绍了即时编译器去虚化的几种方法。</p> <p>完全去虚化通过类型推导或者类层次分析，将虚方法调用转换为直接调用。它的关键在于证明虚方法调用的目标方法是唯一的。</p> 
<p>条件去虚化通过向代码中增添类型比较，将虚方法调用转换为一个个的类型测试以及对应该类型的直接调用。它将借助 Java 虚拟机所收集的类型 Profile。</p> <p>今天的实践环节，我们来重现因类加载导致去优化的过程。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // Run with java -XX:CompileCommand=''dontinline JITTest.test'' 
-XX:+PrintCompilation JITTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class JITTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
static abstract class BinaryOp { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public abstract int apply(int a, int b); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static class Add extends BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int apply(int a, int b) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a + b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> static class Sub extends BinaryOp { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int apply(int a, int b) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return a - b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int test(BinaryOp op) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return op.apply(2, 1); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws Exception { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Add add = new Add(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; 400_000; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> test(add); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
System.out.println("Loading Sub"); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Sub[] array = new Sub[0]; // Load class Sub </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // Expect output: "JITTest::test (7 bytes) 
made not entrant" </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 4 msec}
2020-11-19 20:12:46.598 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.600 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:46.604 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.606 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:12:46.613 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787966, 1605787966, 1, 'zh-hans', 0, 1, 1, 
0, '21丨方法内联（下）', 1, 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.620 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=23 
 {executed in 1 msec}
2020-11-19 20:12:46.622 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:12:46.628 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787966, 1605787966, 1, 'zh-hans', 0, 
1, 1, 0, '21丨方法内联（下）', 'book', 1, 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.636 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.638 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:46.642 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.645 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:46.652 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/b3767bef7cf560601565f3195b7e654c?bkt=en-2fb6763f1c8fb101cb253bc65b9daaa1ab7cac5f8a253d7682b83316ea242321c00b87df741e7114&fid=3757516097-778750-212113162517602&time=1605787965&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-B7rH7S0iZt6kzYdCUXlvjR11tJI%3D&to=92&size=4722382&sta_dx=4722382&sta_cs=4386&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182968&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4722382&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-22c33133d6b033746d3620e35423068d11e62cfd2881e8f278a11b510730cf6a680998e026df679e&sl=76480590&expires=8h&rt=pr&r=825713615&mlogid=7510813640963692341&vbdid=64799653&fin=21%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510813640963692341&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542502f1c95cf7617cb4e6b9759faf1b32d5a&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=21%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.659 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.660 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:12:46.667 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/b3767bef7cf560601565f3195b7e654c?bkt=en-2fb6763f1c8fb101cb253bc65b9daaa1ab7cac5f8a253d7682b83316ea242321c00b87df741e7114&fid=3757516097-778750-212113162517602&time=1605787965&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-B7rH7S0iZt6kzYdCUXlvjR11tJI%3D&to=92&size=4722382&sta_dx=4722382&sta_cs=4386&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182968&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4722382&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-22c33133d6b033746d3620e35423068d11e62cfd2881e8f278a11b510730cf6a680998e026df679e&sl=76480590&expires=8h&rt=pr&r=825713615&mlogid=7510813640963692341&vbdid=64799653&fin=21%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510813640963692341&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f542502f1c95cf7617cb4e6b9759faf1b32d5a&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=21%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.674 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.676 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:46.679 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.682 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:46.727 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感觉跟不上了，先过吧！ <br>已经拉下两节了，日后回头再看看。 
<br>现在仅明白，方法内联-是编译器的一种代码优化手段，会根据不同代码调用方式有不同的优化方式，目的都是为了提高JVM的效率，根本方式，我认为就是采用取巧的方式，提前判断出来可以少做一些事情，然后先提前做一些准备，整体的时间和空间成本会降下来。 
<br>另外，提供小建议，雨迪能否对于这种比较比较抽象的知识，来点生动形象的比喻以便帮助消化，之前在知乎看到一篇关于锁的文章，全篇通过生动形象的比喻讲解锁的本质、分类、各种锁的特点，读起来一下子就明白了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> IR 图分析看了这三篇，好几次，现在还是不甚明白， </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
如果都看懂了，可以考虑来我司，或者阿里的JIT专家职位 :)<br><br>一般来说，了解这些优化针对怎样的代码模式，会转化为怎样的代码就可以啦。至于IR图，主要是用来辅助理解具体的优化过程。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李亮亮</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 后面两张图是不是还应该有Deopt NullCheckException 
这条红色的路径？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdV7Y5XbOicib3slyyVg2JmsjAg9YiaJnujTFia3iaIzic0RAaE4hNTFUgiba3OOwr8g0J6pZntKA3Xl6tQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一少爷</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么后面留言的人越来越少了，我觉得后面这些也很关键很有趣呀。对思想的提升很有帮助的。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fe/df/f1ce77a8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>星星个是大...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 节点上的P（0）是否是代表方法的参数，C(1)这些代表常量，各个节点的线的颜色是否有什么含义呢？老师能不能指导一下 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 是每个对象有type profile的限制么？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
每条类型相关字节码，如invokeinterface invokevirtual checkcast instanceof等</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 是C1在不同的编译层次么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我也不清楚，什么时候可以有完整的profile，什么时候是不完整的 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 回了原提问，这里复制一下:<br><br>每个字节码的type 
profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，想请教一下，“类型Profile”完整还是不完整，是如何判断的？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type 
profile是不完整的。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d1/0e/96550e61.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王树忠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 遇到jvm崩溃，可否帮分析下 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 39 msec}
2020-11-19 20:12:46.743 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.746 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:12:46.778 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">8</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 感觉跟不上了，先过吧！ <br>已经拉下两节了，日后回头再看看。 
<br>现在仅明白，方法内联-是编译器的一种代码优化手段，会根据不同代码调用方式有不同的优化方式，目的都是为了提高JVM的效率，根本方式，我认为就是采用取巧的方式，提前判断出来可以少做一些事情，然后先提前做一些准备，整体的时间和空间成本会降下来。 
<br>另外，提供小建议，雨迪能否对于这种比较比较抽象的知识，来点生动形象的比喻以便帮助消化，之前在知乎看到一篇关于锁的文章，全篇通过生动形象的比喻讲解锁的本质、分类、各种锁的特点，读起来一下子就明白了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> IR 图分析看了这三篇，好几次，现在还是不甚明白， </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
如果都看懂了，可以考虑来我司，或者阿里的JIT专家职位 :)<br><br>一般来说，了解这些优化针对怎样的代码模式，会转化为怎样的代码就可以啦。至于IR图，主要是用来辅助理解具体的优化过程。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李亮亮</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 后面两张图是不是还应该有Deopt NullCheckException 
这条红色的路径？ </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdV7Y5XbOicib3slyyVg2JmsjAg9YiaJnujTFia3iaIzic0RAaE4hNTFUgiba3OOwr8g0J6pZntKA3Xl6tQ/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>一少爷</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么后面留言的人越来越少了，我觉得后面这些也很关键很有趣呀。对思想的提升很有帮助的。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/fe/df/f1ce77a8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>星星个是大...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 节点上的P（0）是否是代表方法的参数，C(1)这些代表常量，各个节点的线的颜色是否有什么含义呢？老师能不能指导一下 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 是每个对象有type profile的限制么？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
每条类型相关字节码，如invokeinterface invokevirtual checkcast instanceof等</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Scott</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 是C1在不同的编译层次么？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-09 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我也不清楚，什么时候可以有完整的profile，什么时候是不完整的 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 回了原提问，这里复制一下:<br><br>每个字节码的type 
profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，想请教一下，“类型Profile”完整还是不完整，是如何判断的？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type 
profile是不完整的。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d1/0e/96550e61.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王树忠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 遇到jvm崩溃，可否帮分析下 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li>', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 26 msec}
2020-11-19 20:12:46.876 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.878 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:46.901 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=23 
 {executed in 20 msec}
2020-11-19 20:12:46.903 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:46.908 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 23, 'https://static001.geekbang.org/resource/image/eb/37/eb20c3a62cfbeaf191ae84581a2af237.jpg', 
23) 
 {executed in 1 msec}
2020-11-19 20:12:46.916 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=23 
 {executed in 2 msec}
2020-11-19 20:12:46.918 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:12:46.924 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 23, 'https://static001.geekbang.org/resource/image/eb/37/eb20c3a62cfbeaf191ae84581a2af237.jpg', 
23) 
 {executed in 1 msec}
2020-11-19 20:12:46.930 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.933 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:46.939 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.946 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 20:12:46.948 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:12:46.953 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 20:12:46.960 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='210382217552146' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:12:46.961 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:11.323 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='210382217552146' 
and bookchecke0_.name='net_content' 
 {executed in 10 msec}
2020-11-19 20:13:11.325 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:11.349 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('210382217552146', 1, 'net_content') 
 {executed in 12 msec}
2020-11-19 20:13:11.352 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('210382217552146', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:13:11.354 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|49            |
|--------------|

2020-11-19 20:13:11.410 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='210382217552146' 
and bookchecke0_.name='media' 
 {executed in 3 msec}
2020-11-19 20:13:11.411 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:11.892 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='210382217552146' 
and bookchecke0_.name='media' 
 {executed in 6 msec}
2020-11-19 20:13:11.894 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:11.898 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('210382217552146', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:13:11.899 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('210382217552146', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:13:11.901 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|50            |
|--------------|

2020-11-19 20:13:11.915 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='210382217552146' 
 {executed in 2 msec}
2020-11-19 20:13:11.916 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:11.921 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605787991, 1) 
 {executed in 2 msec}
2020-11-19 20:13:11.922 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605787991, 1) 
 {executed in 0 msec}
2020-11-19 20:13:11.924 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|24            |
|--------------|

2020-11-19 20:13:11.935 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'c0d26ce7-fe77-4d96-887c-85ed8cf96435', 
24) 
 {executed in 1 msec}
2020-11-19 20:13:11.936 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'c0d26ce7-fe77-4d96-887c-85ed8cf96435', 24) 
 {executed in 0 msec}
2020-11-19 20:13:11.938 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|24            |
|--------------|

2020-11-19 20:13:11.952 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=24, revision_default=1, revision_timestamp=1605787991, 
revision_uid=1 where vid=24 
 {executed in 2 msec}
2020-11-19 20:13:11.962 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:11.964 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:11.988 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '210382217552146', 'zh-hans', 24, 24) 
 {executed in 19 msec}
2020-11-19 20:13:12.010 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.012 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:12.019 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '210382217552146', 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.028 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=24 
 {executed in 2 msec}
2020-11-19 20:13:12.030 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:12.033 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=24 
 {executed in 1 msec}
2020-11-19 20:13:12.035 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:12.041 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 24, 0, 0, 19, 0, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.047 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.049 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:12.052 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.054 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:12.064 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p> 
<p>方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。</p> <p>以 getter/setter 为例，如果没有方法内联，在调用 
getter/setter 时，程序需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对 getter/setter 
的方法调用后，上述操作仅剩字段访问。</p> <p>在 C2 中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2 将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。</p> 
<blockquote> <p><span class="reference">复习一下：即时编译器首先解析字节码，并生成 IR 图，然后在该 IR 图上进行优化。优化是由一个个独立的优化阶段（optimization 
phase）串联起来的。每个优化阶段都会对 IR 图进行转换。最后即时编译器根据 IR 图的节点以及调度顺序生成机器码。</span></p> </blockquote> <p>同 
C2 一样，Graal 也会在解析字节码的过程中进行方法调用的内联。此外，Graal 还拥有一个独立的优化阶段，来寻找指代方法调用的 IR 节点，并将之替换为目标方法的 IR 图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 方法内联的过程 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static boolean flag = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int value0 = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int value1 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int result = bar(flag); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (result != 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean flag) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return flag ? value0 : value1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码中的 
foo 方法将接收一个 int 类型的参数，而 bar 方法将接收一个 boolean 类型的参数。其中，foo 方法会读取静态字段 flag 的值，并作为参数调用 bar 方法。</p> 
<p><img src="https://static001.geekbang.org/resource/image/c0/59/c024b8b45570f25534f76f0c4d378559.png" 
alt=""><br> <strong>foo 方法的 IR 图（内联前）</strong></p> <p>在编译 foo 方法时，其对应的 IR 图中将出现对 bar 方法的调用，即上图中的 
5 号 Invoke 节点。如果内联算法判定应当内联对 bar 方法的调用时，那么即时编译器将开始解析 bar 方法的字节码，并生成对应的 IR 图，如下图所示。</p> <p><img 
src="https://static001.geekbang.org/resource/image/96/55/96d8575326f7c1991c6677e6d2d17155.png" 
alt=""><br> <strong>bar 方法的 IR 图</strong></p> <p>接下来，即时编译器便可以进行方法内联，把 bar 方法所对应的 IR 图纳入到对 foo 
方法的编译中。具体的操作便是将 foo 方法的 IR 图中 5 号 Invoke 节点替换为 bar 方法的 IR 图。</p> <p><img src="https://static001.geekbang.org/resource/image/62/c8/6209f233f5518ee470eb08422c8d0bc8.png" 
alt=""><br> <strong>foo 方法的 IR 图（内联后）</strong></p> <p>除了将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，即时编译器还需额外完成下述三项操作。</p> 
<p>第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将 bar 方法 IR 图中的 1 号 P(0) 节点替换为 foo 
方法 IR 图中的 3 号 LoadField 节点。</p> <p>第二，在调用者方法的 IR 图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个 
Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。</p> <p>在我们的例子中，就是将 8 号 == 节点，以及 12 号 Return 节点连接到原 5 号 Invoke 
节点的边，重新指向新生成的 24 号 Phi 节点中。</p> <p>第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。</p> 
<p>经过方法内联之后，即时编译器将得到一个新的 IR 图，并且在接下来的编译过程中对这个新的 IR 图进行进一步的优化。不过在上面这个例子中，方法内联后的 IR 图并没有能够进一步优化的地方。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final static boolean flag = true; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public final static int value0 = 0; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public final static int value1 = 1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int result = bar(flag); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (result != 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean flag) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return flag ? value0 : value1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>不过，如果我们将代码中的三个静态字段标记为 
final，那么 Java 编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar 方法对应的字节码如下所示。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: ifeq 
8 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: goto 9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在编译 foo 方法时，一旦即时编译器决定要内联对 bar 方法的调用，那么它会将调用 
bar 方法所使用的参数，也就是常数 1，替换 bar 方法 IR 图中的参数。经过死代码消除之后，bar 方法将直接返回常数 0，所需复制的 IR 图也只有常数 0 这么一个节点。</p> 
<p>经过方法内联之后，foo 方法的 IR 图将变成如下所示：<br> <img src="https://static001.geekbang.org/resource/image/15/36/1506286ffb9c9d0d8a927e8174594536.png" 
alt=""></p> <p>该 IR 图可以进一步优化（死代码消除），并最终得到这张极为简单的 IR 图：<br> <img src="https://static001.geekbang.org/resource/image/6a/03/6affa54acd4d5f180efacdac93b02a03.png" 
alt=""></p> <h2>方法内联的条件</h2> <p>方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。</p> 
<p>此外，内联越多也将导致生成的机器码越长。在 Java 虚拟机里，编译生成的机器码会被部署到 Code Cache 之中。这个 Code Cache 是有大小限制的（由 Java 
虚拟机参数 -XX:ReservedCodeCacheSize 控制）。</p> <p>这就意味着，生成的机器码越长，越容易填满 Code Cache，从而出现 Code Cache 
已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has been disabled）。</p> <p>因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable 
类的方法不能被其他类中的方法所内联，你可以直接参考<a href="http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197">JDK 
的源代码</a>。）</p> <p><strong>首先，由 -XX:CompileCommand 中的 inline 指令指定的方法，以及由 @ForceInline 注解的方法（仅限于 
JDK 内部方法），会被强制内联。</strong> 而由 -XX:CompileCommand 中的 dontinline 指令或 exclude 指令（表示不编译）指定的方法，以及由 
@DontInline 注解的方法（仅限于 JDK 内部方法），则始终不会被内联。</p> <p><strong>其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是 
native 方法，都将导致方法调用无法内联。</strong></p> <p><strong>再次，C2 不支持内联超过 9 层的调用（可以通过虚拟机参数 -XX:MaxInlineLevel 
调整），以及 1 层的直接递归调用（可以通过虚拟机参数 -XX:MaxRecursiveInlineLevel 调整）。</strong></p> <blockquote> <p><span 
class="reference">如果方法 a 调用了方法 b，而方法 b 调用了方法 c，那么我们称 b 为 a 的 1 层调用，而 c 为 a 的 2 层调用。</span></p> 
</blockquote> <p>最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前 IR 图的大小来决定方法调用能否被内联。</p> <p><img 
src="https://static001.geekbang.org/resource/image/49/c3/49fb3a3849e82ddcc74bd982a5e4eac3.jpg" 
alt=""></p> <p>我在上面的表格列举了一些 C2 相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。</p> <h2>总结与实践</h2> <p>今天我介绍了方法内联的过程以及条件。</p> 
<p>方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p> <p>即时编译器既可以在解析过程中替换方法调用字节码，也可以在 
IR 图中替换方法调用 IR 节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。</p> <p>方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前 
IR 图的大小来决定方法调用能否被内联。</p> <p>今天的实践环节，你可以利用虚拟机参数 -XX:+PrintInlining 来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考<a 
href="https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages">这一网页</a>。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 3 msec}
2020-11-19 20:13:12.074 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.076 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:12.086 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p> 
<p>方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。</p> <p>以 getter/setter 为例，如果没有方法内联，在调用 
getter/setter 时，程序需要保存当前方法的执行位置，创建并压入用于 getter/setter 的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对 getter/setter 
的方法调用后，上述操作仅剩字段访问。</p> <p>在 C2 中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2 将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。</p> 
<blockquote> <p><span class="reference">复习一下：即时编译器首先解析字节码，并生成 IR 图，然后在该 IR 图上进行优化。优化是由一个个独立的优化阶段（optimization 
phase）串联起来的。每个优化阶段都会对 IR 图进行转换。最后即时编译器根据 IR 图的节点以及调度顺序生成机器码。</span></p> </blockquote> <p>同 
C2 一样，Graal 也会在解析字节码的过程中进行方法调用的内联。此外，Graal 还拥有一个独立的优化阶段，来寻找指代方法调用的 IR 节点，并将之替换为目标方法的 IR 图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。</p><!-- 
[[[read_end]]] --> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 方法内联的过程 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static boolean flag = true; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int value0 = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int value1 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int result = bar(flag); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (result != 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean flag) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return flag ? value0 : value1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>上面这段代码中的 
foo 方法将接收一个 int 类型的参数，而 bar 方法将接收一个 boolean 类型的参数。其中，foo 方法会读取静态字段 flag 的值，并作为参数调用 bar 方法。</p> 
<p><img src="https://static001.geekbang.org/resource/image/c0/59/c024b8b45570f25534f76f0c4d378559.png" 
alt=""><br> <strong>foo 方法的 IR 图（内联前）</strong></p> <p>在编译 foo 方法时，其对应的 IR 图中将出现对 bar 方法的调用，即上图中的 
5 号 Invoke 节点。如果内联算法判定应当内联对 bar 方法的调用时，那么即时编译器将开始解析 bar 方法的字节码，并生成对应的 IR 图，如下图所示。</p> <p><img 
src="https://static001.geekbang.org/resource/image/96/55/96d8575326f7c1991c6677e6d2d17155.png" 
alt=""><br> <strong>bar 方法的 IR 图</strong></p> <p>接下来，即时编译器便可以进行方法内联，把 bar 方法所对应的 IR 图纳入到对 foo 
方法的编译中。具体的操作便是将 foo 方法的 IR 图中 5 号 Invoke 节点替换为 bar 方法的 IR 图。</p> <p><img src="https://static001.geekbang.org/resource/image/62/c8/6209f233f5518ee470eb08422c8d0bc8.png" 
alt=""><br> <strong>foo 方法的 IR 图（内联后）</strong></p> <p>除了将被调用方法的 IR 图节点复制到调用者方法的 IR 图中，即时编译器还需额外完成下述三项操作。</p> 
<p>第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将 bar 方法 IR 图中的 1 号 P(0) 节点替换为 foo 
方法 IR 图中的 3 号 LoadField 节点。</p> <p>第二，在调用者方法的 IR 图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个 
Phi 节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。</p> <p>在我们的例子中，就是将 8 号 == 节点，以及 12 号 Return 节点连接到原 5 号 Invoke 
节点的边，重新指向新生成的 24 号 Phi 节点中。</p> <p>第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。</p> 
<p>经过方法内联之后，即时编译器将得到一个新的 IR 图，并且在接下来的编译过程中对这个新的 IR 图进行进一步的优化。不过在上面这个例子中，方法内联后的 IR 图并没有能够进一步优化的地方。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public final static boolean flag = true; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public final static int value0 = 0; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public final static int value1 = 1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int result = bar(flag); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (result != 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean flag) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return flag ? value0 : value1; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>不过，如果我们将代码中的三个静态字段标记为 
final，那么 Java 编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar 方法对应的字节码如下所示。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int bar(boolean); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: ifeq 
8 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: iconst_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: goto 9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在编译 foo 方法时，一旦即时编译器决定要内联对 bar 方法的调用，那么它会将调用 
bar 方法所使用的参数，也就是常数 1，替换 bar 方法 IR 图中的参数。经过死代码消除之后，bar 方法将直接返回常数 0，所需复制的 IR 图也只有常数 0 这么一个节点。</p> 
<p>经过方法内联之后，foo 方法的 IR 图将变成如下所示：<br> <img src="https://static001.geekbang.org/resource/image/15/36/1506286ffb9c9d0d8a927e8174594536.png" 
alt=""></p> <p>该 IR 图可以进一步优化（死代码消除），并最终得到这张极为简单的 IR 图：<br> <img src="https://static001.geekbang.org/resource/image/6a/03/6affa54acd4d5f180efacdac93b02a03.png" 
alt=""></p> <h2>方法内联的条件</h2> <p>方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。</p> 
<p>此外，内联越多也将导致生成的机器码越长。在 Java 虚拟机里，编译生成的机器码会被部署到 Code Cache 之中。这个 Code Cache 是有大小限制的（由 Java 
虚拟机参数 -XX:ReservedCodeCacheSize 控制）。</p> <p>这就意味着，生成的机器码越长，越容易填满 Code Cache，从而出现 Code Cache 
已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has been disabled）。</p> <p>因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable 
类的方法不能被其他类中的方法所内联，你可以直接参考<a href="http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197">JDK 
的源代码</a>。）</p> <p><strong>首先，由 -XX:CompileCommand 中的 inline 指令指定的方法，以及由 @ForceInline 注解的方法（仅限于 
JDK 内部方法），会被强制内联。</strong> 而由 -XX:CompileCommand 中的 dontinline 指令或 exclude 指令（表示不编译）指定的方法，以及由 
@DontInline 注解的方法（仅限于 JDK 内部方法），则始终不会被内联。</p> <p><strong>其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是 
native 方法，都将导致方法调用无法内联。</strong></p> <p><strong>再次，C2 不支持内联超过 9 层的调用（可以通过虚拟机参数 -XX:MaxInlineLevel 
调整），以及 1 层的直接递归调用（可以通过虚拟机参数 -XX:MaxRecursiveInlineLevel 调整）。</strong></p> <blockquote> <p><span 
class="reference">如果方法 a 调用了方法 b，而方法 b 调用了方法 c，那么我们称 b 为 a 的 1 层调用，而 c 为 a 的 2 层调用。</span></p> 
</blockquote> <p>最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前 IR 图的大小来决定方法调用能否被内联。</p> <p><img 
src="https://static001.geekbang.org/resource/image/49/c3/49fb3a3849e82ddcc74bd982a5e4eac3.jpg" 
alt=""></p> <p>我在上面的表格列举了一些 C2 相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。</p> <h2>总结与实践</h2> <p>今天我介绍了方法内联的过程以及条件。</p> 
<p>方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p> <p>即时编译器既可以在解析过程中替换方法调用字节码，也可以在 
IR 图中替换方法调用 IR 节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。</p> <p>方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前 
IR 图的大小来决定方法调用能否被内联。</p> <p>今天的实践环节，你可以利用虚拟机参数 -XX:+PrintInlining 来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考<a 
href="https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages">这一网页</a>。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 3 msec}
2020-11-19 20:13:12.100 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=24 
 {executed in 1 msec}
2020-11-19 20:13:12.102 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:12.111 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=24 
 {executed in 4 msec}
2020-11-19 20:13:12.113 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:13:12.119 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605787992, 1605787992, 1, 'zh-hans', 0, 1, 1, 
0, '20丨方法内联（上）', 1, 24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.124 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=24 
 {executed in 1 msec}
2020-11-19 20:13:12.127 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:12.132 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605787992, 1605787992, 1, 'zh-hans', 0, 
1, 1, 0, '20丨方法内联（上）', 'book', 1, 24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.139 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.140 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:12.144 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.145 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:12.151 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/9eb2f0be0ee05346dd5646433854bab1?bkt=en-00f3aa810d089f202d70b0270f8628f55a8fc9390cb5232da6ac2501bb6b712bce61f8ef1f282f4112d7533c356817a3a7de7d7c8a597b87a5d53df057a2de74&fid=3757516097-778750-452957437207229&time=1605787990&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Jh9xkMEESDYFbPKUo35LaUuXvlQ%3D&to=92&size=3819799&sta_dx=3819799&sta_cs=4327&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182968&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=3819799&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-24f72d24087d3a2fb53bf1385d4aacc1d4606acc7e1840c0c5a31b44bd1c13d5313e9343cba943975a11724dacc9f23e4f9fd9562084c91d305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=425053104&mlogid=7510821427513439691&vbdid=64799653&fin=20%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510821427513439691&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c405b5cea14f42c7715e0210dec50d85f8654d5c0c9c9acd&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=20%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.157 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.158 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:12.164 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/9eb2f0be0ee05346dd5646433854bab1?bkt=en-00f3aa810d089f202d70b0270f8628f55a8fc9390cb5232da6ac2501bb6b712bce61f8ef1f282f4112d7533c356817a3a7de7d7c8a597b87a5d53df057a2de74&fid=3757516097-778750-452957437207229&time=1605787990&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Jh9xkMEESDYFbPKUo35LaUuXvlQ%3D&to=92&size=3819799&sta_dx=3819799&sta_cs=4327&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182968&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=3819799&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-24f72d24087d3a2fb53bf1385d4aacc1d4606acc7e1840c0c5a31b44bd1c13d5313e9343cba943975a11724dacc9f23e4f9fd9562084c91d305a5e1275657320&sl=76480590&expires=8h&rt=pr&r=425053104&mlogid=7510821427513439691&vbdid=64799653&fin=20%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510821427513439691&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c405b5cea14f42c7715e0210dec50d85f8654d5c0c9c9acd&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=20%E4%B8%A8%E6%96%B9%E6%B3%95%E5%86%85%E8%81%94%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.170 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.172 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:12.175 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.177 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:12.187 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/41/bc18ff9f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>木心</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> IR只有我看不懂吗？各颜色的模块代表什么意思，还有不同钥匙的线代表什么意思？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 方法内联，一种优化代码的手段，其目的就是想让代码执行的更快一些，它怎么做到的呢？以前记录过性能优化的思路就那么几种，让赶的快的干，如果实现不了就让干的快的多干，干的慢点少干。方法内联是采用少干活的方式来提高效率的，直接将对应方法的字节码内联过来，省下了记录切换上下文环境的时间和空间。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/76/ee/357be450.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刘冠利</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问final的使用对内联有多大帮助? </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
在(下)篇有介绍</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金龟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 默认的内联时机是什么样的呢？比如默认在什么情况方法会内联 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-21 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，能否提供一个学习IR图的地址？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这方面的知识网上并不多。可以知乎上搜Sea of nodes IR，看R大的回答，有不少链接可以参考。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 建议老师单独开个专题讲IGV生成的IR图 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请问方法内联是发生在解释执行阶段吗？这里方法调用可以理解为解释执行中的小部分解释吗？有些困惑，麻烦老师解释执行下。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 方法内联只发生在即时编译器中。<br><br>方法调用就是字面意思。在即时编译过程中，即时编译器会将当前方法所包含的方法调用的目标方法纳入编译范围中。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 最后引入常量后foo方法两个图是一样的，后面一幅图应该if节点被优化掉了吧，直接返回0了。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e0/8e/0e4bc2a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>皮卡皮卡丘</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这个是方法内联信息吗，怎么和代码里的信息有差别？@ 1 java.lang.Object::&lt;init&gt; 
(1 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
5 java.lang.AbstractStringBuilder::appendNull (56 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
10 java.lang.String::length (6 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
21 java.lang.AbstractStringBuilder::ensureCapacityInternal (27 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
17 java.lang.AbstractStringBuilder::newCapacity (39 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
20 java.util.Arrays::copyOf (19 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
11 java.lang.Math::min (11 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
14 java.lang.System::arraycopy (0 bytes) intrinsic <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
35 java.lang.String::getChars (62 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
1 java.lang.Object::&lt;init&gt; (1 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
13 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
30 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
65 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
75 java.util.Arrays::copyOfRange (63 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
17 java.lang.AbstractStringBuilder::newCapacity (39 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
20 java.util.Arrays::copyOf (19 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
11 java.lang.Math::min (11 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
14 java.lang.System::arraycopy (0 bytes) intrinsic <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
66 java.lang.String::indexOfSupplementary (71 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
3 java.lang.String::indexOf (70 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
1 java.lang.Character::toUpperCase (9 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: PrintInlining将打印JVM里所有即时编译的内联优化信息，所以看起来比较杂</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 5 msec}
2020-11-19 20:13:12.208 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.210 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:12.220 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/fc/41/bc18ff9f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>木心</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-11 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">17</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> IR只有我看不懂吗？各颜色的模块代表什么意思，还有不同钥匙的线代表什么意思？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-10 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 方法内联，一种优化代码的手段，其目的就是想让代码执行的更快一些，它怎么做到的呢？以前记录过性能优化的思路就那么几种，让赶的快的干，如果实现不了就让干的快的多干，干的慢点少干。方法内联是采用少干活的方式来提高效率的，直接将对应方法的字节码内联过来，省下了记录切换上下文环境的时间和空间。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/76/ee/357be450.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>刘冠利</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问final的使用对内联有多大帮助? </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
在(下)篇有介绍</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>金龟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 默认的内联时机是什么样的呢？比如默认在什么情况方法会内联 </div> <!----> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-21 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，能否提供一个学习IR图的地址？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这方面的知识网上并不多。可以知乎上搜Sea of nodes IR，看R大的回答，有不少链接可以参考。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 建议老师单独开个专题讲IGV生成的IR图 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请问方法内联是发生在解释执行阶段吗？这里方法调用可以理解为解释执行中的小部分解释吗？有些困惑，麻烦老师解释执行下。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 方法内联只发生在即时编译器中。<br><br>方法调用就是字面意思。在即时编译过程中，即时编译器会将当前方法所包含的方法调用的目标方法纳入编译范围中。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 最后引入常量后foo方法两个图是一样的，后面一幅图应该if节点被优化掉了吧，直接返回0了。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e0/8e/0e4bc2a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>皮卡皮卡丘</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-05 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这个是方法内联信息吗，怎么和代码里的信息有差别？@ 1 java.lang.Object::&lt;init&gt; 
(1 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
5 java.lang.AbstractStringBuilder::appendNull (56 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
10 java.lang.String::length (6 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
21 java.lang.AbstractStringBuilder::ensureCapacityInternal (27 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
17 java.lang.AbstractStringBuilder::newCapacity (39 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
20 java.util.Arrays::copyOf (19 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
11 java.lang.Math::min (11 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
14 java.lang.System::arraycopy (0 bytes) intrinsic <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
35 java.lang.String::getChars (62 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
1 java.lang.Object::&lt;init&gt; (1 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
13 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
30 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
65 java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded) not inlineable <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
75 java.util.Arrays::copyOfRange (63 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
17 java.lang.AbstractStringBuilder::newCapacity (39 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
20 java.util.Arrays::copyOf (19 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
11 java.lang.Math::min (11 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
14 java.lang.System::arraycopy (0 bytes) intrinsic <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
66 java.lang.String::indexOfSupplementary (71 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
3 java.lang.String::indexOf (70 bytes) callee is too large <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ 
1 java.lang.Character::toUpperCase (9 bytes) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: PrintInlining将打印JVM里所有即时编译的内联优化信息，所以看起来比较杂</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 5 msec}
2020-11-19 20:13:12.242 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=24 
 {executed in 2 msec}
2020-11-19 20:13:12.243 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:12.247 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.249 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:12.255 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 24, 'https://static001.geekbang.org/resource/image/b1/cd/b111682f0a93feefa54d6c121123adcd.jpg', 
24) 
 {executed in 1 msec}
2020-11-19 20:13:12.261 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.262 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:12.268 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 24, 'https://static001.geekbang.org/resource/image/b1/cd/b111682f0a93feefa54d6c121123adcd.jpg', 
24) 
 {executed in 1 msec}
2020-11-19 20:13:12.274 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 20:13:12.275 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:12.280 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 24, 24) 
 {executed in 0 msec}
2020-11-19 20:13:12.287 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 20:13:12.288 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:12.294 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 20:13:12.357 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='228454727990514' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:13:12.358 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:35.944 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='228454727990514' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:13:35.946 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:35.949 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('228454727990514', 1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:13:35.951 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('228454727990514', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:13:35.952 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|51            |
|--------------|

2020-11-19 20:13:35.964 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='228454727990514' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:13:35.966 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:36.401 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='228454727990514' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:13:36.402 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:36.407 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('228454727990514', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:13:36.408 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('228454727990514', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:13:36.409 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|52            |
|--------------|

2020-11-19 20:13:36.423 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='228454727990514' 
 {executed in 1 msec}
2020-11-19 20:13:36.424 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:36.428 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788016, 1) 
 {executed in 1 msec}
2020-11-19 20:13:36.429 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788016, 1) 
 {executed in 0 msec}
2020-11-19 20:13:36.430 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|25            |
|--------------|

2020-11-19 20:13:36.440 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '5dbf3e00-71c3-4cf0-b59a-1d3a5102f772', 
25) 
 {executed in 1 msec}
2020-11-19 20:13:36.441 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '5dbf3e00-71c3-4cf0-b59a-1d3a5102f772', 25) 
 {executed in 0 msec}
2020-11-19 20:13:36.443 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|25            |
|--------------|

2020-11-19 20:13:36.456 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=25, revision_default=1, revision_timestamp=1605788016, 
revision_uid=1 where vid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.463 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.465 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:36.470 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '228454727990514', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 20:13:36.478 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.480 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:36.486 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '228454727990514', 'zh-hans', 25, 25) 
 {executed in 1 msec}
2020-11-19 20:13:36.493 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.495 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:36.498 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.500 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:36.506 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 25, 0, 0, 19, 0, 25) 
 {executed in 0 msec}
2020-11-19 20:13:36.512 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.514 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:36.517 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.519 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:36.531 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在前面的篇章中，有不少同学反馈对 Java 字节码并不是特别熟悉。那么今天我便来系统性地介绍一遍 Java 字节码。</p> 
<h2>操作数栈</h2> <p>我们知道，Java 字节码是 Java 虚拟机所使用的指令集。因此，它与 Java 虚拟机基于栈的计算模型是密不可分的。</p> <p>在解释执行过程中，每当为 
Java 方法分配栈桢时，Java 虚拟机往往需要开辟一块额外的空间作为操作数栈，来存放计算的操作数以及返回结果。</p> <p>具体来说便是：执行每一条指令之前，Java 虚拟机要求该指令的操作数已被压入操作数栈中。在执行指令时，Java 
虚拟机会将该指令所需的操作数弹出，并且将指令的结果重新压入栈中。</p> <p><img src="https://static001.geekbang.org/resource/image/13/21/13720f6eb83d096ec600309648330821.png" 
alt=""></p> <p>以加法指令 iadd 为例。假设在执行该指令前，栈顶的两个元素分别为 int 值 1 和 int 值 2，那么 iadd 指令将弹出这两个 int，并将求得的和 
int 值 3 压入栈中。</p> <p><img src="https://static001.geekbang.org/resource/image/13/db/138c20e60c081c8698770ff8d5d93fdb.png" 
alt=""></p> <p>由于 iadd 指令只消耗栈顶的两个元素，因此，对于离栈顶距离为 2 的元素，即图中的问号，iadd 指令并不关心它是否存在，更加不会对其进行修改。</p> 
<p>Java 字节码中有好几条指令是直接作用在操作数栈上的。最为常见的便是 dup： 复制栈顶元素，以及 pop：舍弃栈顶元素。</p> <p>dup 指令常用于复制 new 指令所生成的未经初始化的引用。例如在下面这段代码的 
foo 方法中，当执行 new 指令时，Java 虚拟机将指向一块已分配的、未初始化的内存的引用压入操作数栈中。</p><!-- [[[read_end]]] --> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Object o = new Object(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的字节码如下： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void foo(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 new java.lang.Object [3] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 invokespecial java.lang.Object() [8] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7 astore_1 [o] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>接下来，我们需要以这个引用为调用者，调用其构造器，也就是上面字节码中的 
invokespecial 指令。要注意，该指令将消耗操作数栈上的元素，作为它的调用者以及参数（不过 Object 的构造器不需要参数）。</p> <p>因此，我们需要利用 dup 
指令复制一份 new 指令的结果，并用来调用构造器。当调用返回之后，操作数栈上仍有原本由 new 指令生成的引用，可用于接下来的操作（即偏移量为 7 的字节码，下面会介绍到）。</p> 
<p>pop 指令则常用于舍弃调用指令的返回结果。例如在下面这段代码的 foo 方法中，我将调用静态方法 bar，但是却不用其返回值。</p> <p>由于对应的 invokestatic 
指令仍旧会将返回值压入 foo 方法的操作数栈中，因此 Java 虚拟机需要额外执行 pop 指令，将返回值舍弃。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static boolean bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return false; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> bar(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// foo 方法对应的字节码如下： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 invokestatic FooTest.bar() : boolean [24] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3 pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
4 return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>需要注意的是，上述两条指令只能处理非 long 或者非 double 类型的值，这是因为 
long 类型或者 double 类型的值，需要占据两个栈单元。当遇到这些值时，我们需要同时复制栈顶两个单元的 dup2 指令，以及弹出栈顶两个单元的 pop2 指令。</p> <p>除此之外，不算常见但也是直接作用于操作数栈的还有 
swap 指令，它将交换栈顶两个元素的值。</p> <p>在 Java 字节码中，有一部分指令可以直接将常量加载到操作数栈上。以 int 类型为例，Java 虚拟机既可以通过 iconst 
指令加载 -1 至 5 之间的 int 值，也可以通过 bipush、sipush 加载一个字节、两个字节所能代表的 int 值。</p> <p>Java 虚拟机还可以通过 ldc 
加载常量池中的常量值，例如 ldc&nbsp;#18 将加载常量池中的第 18 项。</p> <p>这些常量包括 int 类型、long 类型、float 类型、double 类型、String 
类型以及 Class 类型的常量。</p> <p><img src="https://static001.geekbang.org/resource/image/0d/8f/0dfbecf954660bcdc76eac65beac1e8f.jpg" 
alt=""></p> <p><strong>常数加载指令表</strong></p> <p>正常情况下，操作数栈的压入弹出都是一条条指令完成的。唯一的例外情况是在抛异常时，Java 
虚拟机会清除操作数栈上的所有内容，而后将异常实例压入操作数栈上。</p> <h2>局部变量区</h2> <p>Java 方法栈桢的另外一个重要组成部分则是局部变量区，字节码程序可以将计算的结果缓存在局部变量区之中。</p> 
<p>实际上，Java 虚拟机将局部变量区当成一个数组，依次存放 this 指针（仅非静态方法），所传入的参数，以及字节码中的局部变量。</p> <p>和操作数栈一样，long 类型以及 
double 类型的值将占据两个单元，其余类型仅占据一个单元。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void foo(long l, float f) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int i = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String s = "Hello, World"; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码中的 foo 方法为例，由于它是一个实例方法，因此局部变量数组的第 
0 个单元存放着 this 指针。</p> <p>第一个参数为 long 类型，于是数组的 1、2 两个单元存放着所传入的 long 类型参数的值。第二个参数则是 float 类型，于是数组的第 
3 个单元存放着所传入的 float 类型参数的值。</p> <p><img src="https://static001.geekbang.org/resource/image/22/d9/228d0f5f2d6437e7aca87c6df2d01bd9.png" 
alt=""></p> <p>在方法体里的两个代码块中，我分别定义了两个局部变量 i 和 s。由于这两个局部变量的生命周期没有重合之处，因此，Java 编译器可以将它们编排至同一单元中。也就是说，局部变量数组的第 
4 个单元将为 i 或者 s。</p> <p>存储在局部变量区的值，通常需要加载至操作数栈中，方能进行计算，得到计算结果后再存储至局部变量数组中。这些加载、存储指令是区分类型的。例如，int 
类型的加载指令为 iload，存储指令为 istore。</p> <p><img src="https://static001.geekbang.org/resource/image/83/f9/83ece83ecd260c2eda282747467e49f9.jpg" 
alt=""><br> <strong>局部变量区访问指令表</strong></p> <p>局部变量数组的加载、存储指令都需要指明所加载单元的下标。举例来说，aload 0 指的是加载第 
0 个单元所存储的引用，在前面示例中的 foo 方法里指的便是加载 this 指针。</p> <p>在我印象中，Java 字节码中唯一能够直接作用于局部变量区的指令是 iinc M 
N（M 为非负整数，N 为整数）。该指令指的是将局部变量数组的第 M 个单元中的 int 值增加 N，常用于 for 循环中自增量的更新。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 100; i&gt;=0; i--) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的字节码如下： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
void foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 bipush 
100 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 2 istore_1 
[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 goto 
9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6 iinc 1 -1 [i] // i-- </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9 iload_1 [i] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10 ifge 6 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 13 return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>综合示例</h2> <p>下面我们来看一个综合的例子：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int bar(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return ((i + 1) - 2) * 3 / 4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的字节码如下： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=2, locals=1, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 2: iadd </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
3: iconst_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: isub 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: iconst_4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: idiv </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了一个 bar 方法。它将接收一个 int 类型的参数，进行一系列计算之后再返回。</p> 
<p>对应的字节码中的 stack=2, locals=1 代表该方法需要的操作数栈空间为 2，局部变量数组空间为 1。当调用 bar(5) 时，每条指令执行前后局部变量数组空间以及操作数栈的分布如下：</p> 
<p><img src="https://static001.geekbang.org/resource/image/c5/32/c57cb9c2222f0f79459bf4c58e1a4c32.png" 
alt=""></p> <h2>Java 字节码简介</h2> <p>前面我已经介绍了加载常量指令、操作数栈专用指令以及局部变量区访问指令。下面我们来看看其他的类别。</p> <p>Java 
相关指令，包括各类具备高层语义的字节码，即 new（后跟目标类，生成该类的未初始化的对象），instanceof（后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。是则压入 1，否则压入 
0），checkcast（后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。如果不是便抛出异常），athrow（将栈顶异常抛出），以及 monitorenter（为栈顶对象加锁）和 
monitorexit（为栈顶对象解锁）。</p> <p>此外，该类型的指令还包括字段访问指令，即静态字段访问指令 getstatic、putstatic，和实例字段访问指令 getfield、putfield。这四条指令均附带用以定位目标字段的信息，但所消耗的操作数栈元素皆不同。</p> 
<p><img src="https://static001.geekbang.org/resource/image/da/d9/da3ff3aa4aaa2531d23286fec65b08d9.png" 
alt=""></p> <p>以 putfield 为例，在上图中，它会把值 v 存储至对象 obj 的目标字段之中。</p> <p>方法调用指令，包括 invokestatic，invokespecial，invokevirtual，invokeinterface 
以及 invokedynamic。这几条字节码我们已经反反复复提及了，就不再具体介绍各自的含义了。</p> <p>除 invokedynamic 外，其他的方法调用指令所消耗的操作数栈元素是根据调用类型以及目标方法描述符来确定的。在进行方法调用之前，程序需要依次压入调用者（invokestatic 
不需要），以及各个参数。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int neg(int i) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int foo(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return neg(neg(i)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // foo 方法对应的字节码如下：foo 方法对应的字节码如下： </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int foo(int i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2 iload_1 [i] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 invokevirtual FooTest.neg(int) : int 
[25] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 6 invokevirtual 
FooTest.neg(int) : int [25] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
9 ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码为例，当调用 foo(2) 时，每条指令执行前后局部变量数组空间以及操作数栈的分布如下所示：</p> 
<p><img src="https://static001.geekbang.org/resource/image/47/95/476fa1bcb6b36b5b651c2a4101073295.png" 
alt=""></p> <p>数组相关指令，包括新建基本类型数组的 newarray，新建引用类型数组的 anewarray，生成多维数组的 multianewarray，以及求数组长度的 
arraylength。另外，它还包括数组的加载指令以及存储指令。这些指令是区分类型的。例如，int 数组的加载指令为 iaload，存储指令为 iastore。</p> <p><img 
src="https://static001.geekbang.org/resource/image/5d/1f/5d935dcdd55e9f8461a6e5b0ac22001f.jpg" 
alt=""></p> <p><strong>数组访问指令表</strong></p> <p>控制流指令，包括无条件跳转 goto，条件跳转指令，tableswitch 和 lookupswtich（前者针对密集的 
cases，后者针对稀疏的 cases），返回指令，以及被废弃的 jsr，ret 指令。其中返回指令是区分类型的。例如，返回 int 值的指令为 ireturn。</p> <p><img 
src="https://static001.geekbang.org/resource/image/f5/f0/f5195b5425a9547af9ce8371aef5c4f0.jpg" 
alt=""></p> <p><strong>返回指令表</strong></p> <p>除返回指令外，其他的控制流指令均附带一个或者多个字节码偏移量，代表需要跳转到的位置。例如下面的 
abs 方法中偏移量为 1 的条件跳转指令，当栈顶元素小于 0 时，跳转至偏移量为 6 的字节码。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int abs(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &gt;= 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 对应的字节码如下所示： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int abs(int i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1 iflt 6 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5 ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7 ineg </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8 ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>剩余的 Java 字节码几乎都和计算相关，这里就不再详细阐述了。</p> <h2>总结与实践</h2> 
<p>今天我简单介绍了各种类型的 Java 字节码。</p> <p>Java 方法的栈桢分为操作数栈和局部变量区。通常来说，程序需要将变量从局部变量区加载至操作数栈中，进行一番运算之后再存储回局部变量区中。</p> 
<p>Java 字节码可以划分为很多种类型，如加载常量指令，操作数栈专用指令，局部变量区访问指令，Java 相关指令，方法调用指令，数组相关指令，控制流指令，以及计算相关指令。</p> 
<p>今天的实践环节，你可以尝试自己分析一段较为复杂的字节码，在草稿上画出局部变量数组以及操作数栈分布图。当碰到不熟悉的指令时，你可以查阅<a href="https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-6.html#jvms-6.5">Java 
虚拟机规范第 6.5 小节</a> ，或者<a href="https://cs.au.dk/~mis/dOvs/jvmspec/ref-Java.html">此链接</a>。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 3 msec}
2020-11-19 20:13:36.541 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.543 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:36.556 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在前面的篇章中，有不少同学反馈对 Java 字节码并不是特别熟悉。那么今天我便来系统性地介绍一遍 Java 字节码。</p> <h2>操作数栈</h2> 
<p>我们知道，Java 字节码是 Java 虚拟机所使用的指令集。因此，它与 Java 虚拟机基于栈的计算模型是密不可分的。</p> <p>在解释执行过程中，每当为 Java 方法分配栈桢时，Java 
虚拟机往往需要开辟一块额外的空间作为操作数栈，来存放计算的操作数以及返回结果。</p> <p>具体来说便是：执行每一条指令之前，Java 虚拟机要求该指令的操作数已被压入操作数栈中。在执行指令时，Java 
虚拟机会将该指令所需的操作数弹出，并且将指令的结果重新压入栈中。</p> <p><img src="https://static001.geekbang.org/resource/image/13/21/13720f6eb83d096ec600309648330821.png" 
alt=""></p> <p>以加法指令 iadd 为例。假设在执行该指令前，栈顶的两个元素分别为 int 值 1 和 int 值 2，那么 iadd 指令将弹出这两个 int，并将求得的和 
int 值 3 压入栈中。</p> <p><img src="https://static001.geekbang.org/resource/image/13/db/138c20e60c081c8698770ff8d5d93fdb.png" 
alt=""></p> <p>由于 iadd 指令只消耗栈顶的两个元素，因此，对于离栈顶距离为 2 的元素，即图中的问号，iadd 指令并不关心它是否存在，更加不会对其进行修改。</p> 
<p>Java 字节码中有好几条指令是直接作用在操作数栈上的。最为常见的便是 dup： 复制栈顶元素，以及 pop：舍弃栈顶元素。</p> <p>dup 指令常用于复制 new 指令所生成的未经初始化的引用。例如在下面这段代码的 
foo 方法中，当执行 new 指令时，Java 虚拟机将指向一块已分配的、未初始化的内存的引用压入操作数栈中。</p><!-- [[[read_end]]] --> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Object o = new Object(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的字节码如下： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void foo(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 new java.lang.Object [3] </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 invokespecial java.lang.Object() [8] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 7 astore_1 [o] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8 return </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>接下来，我们需要以这个引用为调用者，调用其构造器，也就是上面字节码中的 
invokespecial 指令。要注意，该指令将消耗操作数栈上的元素，作为它的调用者以及参数（不过 Object 的构造器不需要参数）。</p> <p>因此，我们需要利用 dup 
指令复制一份 new 指令的结果，并用来调用构造器。当调用返回之后，操作数栈上仍有原本由 new 指令生成的引用，可用于接下来的操作（即偏移量为 7 的字节码，下面会介绍到）。</p> 
<p>pop 指令则常用于舍弃调用指令的返回结果。例如在下面这段代码的 foo 方法中，我将调用静态方法 bar，但是却不用其返回值。</p> <p>由于对应的 invokestatic 
指令仍旧会将返回值压入 foo 方法的操作数栈中，因此 Java 虚拟机需要额外执行 pop 指令，将返回值舍弃。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static boolean bar() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return false; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> bar(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// foo 方法对应的字节码如下： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0 invokestatic FooTest.bar() : boolean [24] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3 pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
4 return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>需要注意的是，上述两条指令只能处理非 long 或者非 double 类型的值，这是因为 
long 类型或者 double 类型的值，需要占据两个栈单元。当遇到这些值时，我们需要同时复制栈顶两个单元的 dup2 指令，以及弹出栈顶两个单元的 pop2 指令。</p> <p>除此之外，不算常见但也是直接作用于操作数栈的还有 
swap 指令，它将交换栈顶两个元素的值。</p> <p>在 Java 字节码中，有一部分指令可以直接将常量加载到操作数栈上。以 int 类型为例，Java 虚拟机既可以通过 iconst 
指令加载 -1 至 5 之间的 int 值，也可以通过 bipush、sipush 加载一个字节、两个字节所能代表的 int 值。</p> <p>Java 虚拟机还可以通过 ldc 
加载常量池中的常量值，例如 ldc&nbsp;#18 将加载常量池中的第 18 项。</p> <p>这些常量包括 int 类型、long 类型、float 类型、double 类型、String 
类型以及 Class 类型的常量。</p> <p><img src="https://static001.geekbang.org/resource/image/0d/8f/0dfbecf954660bcdc76eac65beac1e8f.jpg" 
alt=""></p> <p><strong>常数加载指令表</strong></p> <p>正常情况下，操作数栈的压入弹出都是一条条指令完成的。唯一的例外情况是在抛异常时，Java 
虚拟机会清除操作数栈上的所有内容，而后将异常实例压入操作数栈上。</p> <h2>局部变量区</h2> <p>Java 方法栈桢的另外一个重要组成部分则是局部变量区，字节码程序可以将计算的结果缓存在局部变量区之中。</p> 
<p>实际上，Java 虚拟机将局部变量区当成一个数组，依次存放 this 指针（仅非静态方法），所传入的参数，以及字节码中的局部变量。</p> <p>和操作数栈一样，long 类型以及 
double 类型的值将占据两个单元，其余类型仅占据一个单元。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void foo(long l, float f) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int i = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> String s = "Hello, World"; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码中的 foo 方法为例，由于它是一个实例方法，因此局部变量数组的第 
0 个单元存放着 this 指针。</p> <p>第一个参数为 long 类型，于是数组的 1、2 两个单元存放着所传入的 long 类型参数的值。第二个参数则是 float 类型，于是数组的第 
3 个单元存放着所传入的 float 类型参数的值。</p> <p><img src="https://static001.geekbang.org/resource/image/22/d9/228d0f5f2d6437e7aca87c6df2d01bd9.png" 
alt=""></p> <p>在方法体里的两个代码块中，我分别定义了两个局部变量 i 和 s。由于这两个局部变量的生命周期没有重合之处，因此，Java 编译器可以将它们编排至同一单元中。也就是说，局部变量数组的第 
4 个单元将为 i 或者 s。</p> <p>存储在局部变量区的值，通常需要加载至操作数栈中，方能进行计算，得到计算结果后再存储至局部变量数组中。这些加载、存储指令是区分类型的。例如，int 
类型的加载指令为 iload，存储指令为 istore。</p> <p><img src="https://static001.geekbang.org/resource/image/83/f9/83ece83ecd260c2eda282747467e49f9.jpg" 
alt=""><br> <strong>局部变量区访问指令表</strong></p> <p>局部变量数组的加载、存储指令都需要指明所加载单元的下标。举例来说，aload 0 指的是加载第 
0 个单元所存储的引用，在前面示例中的 foo 方法里指的便是加载 this 指针。</p> <p>在我印象中，Java 字节码中唯一能够直接作用于局部变量区的指令是 iinc M 
N（M 为非负整数，N 为整数）。该指令指的是将局部变量数组的第 M 个单元中的 int 值增加 N，常用于 for 循环中自增量的更新。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 100; i&gt;=0; i--) {} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 对应的字节码如下： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
void foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 bipush 
100 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 2 istore_1 
[i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 goto 
9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6 iinc 1 -1 [i] // i-- </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 9 iload_1 [i] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10 ifge 6 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 13 return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>综合示例</h2> <p>下面我们来看一个综合的例子：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int bar(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return ((i + 1) - 2) * 3 / 4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 对应的字节码如下： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=2, locals=1, args_size=1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: iconst_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 2: iadd </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
3: iconst_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: isub 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: iconst_3 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 6: imul </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: iconst_4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: idiv </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了一个 bar 方法。它将接收一个 int 类型的参数，进行一系列计算之后再返回。</p> 
<p>对应的字节码中的 stack=2, locals=1 代表该方法需要的操作数栈空间为 2，局部变量数组空间为 1。当调用 bar(5) 时，每条指令执行前后局部变量数组空间以及操作数栈的分布如下：</p> 
<p><img src="https://static001.geekbang.org/resource/image/c5/32/c57cb9c2222f0f79459bf4c58e1a4c32.png" 
alt=""></p> <h2>Java 字节码简介</h2> <p>前面我已经介绍了加载常量指令、操作数栈专用指令以及局部变量区访问指令。下面我们来看看其他的类别。</p> <p>Java 
相关指令，包括各类具备高层语义的字节码，即 new（后跟目标类，生成该类的未初始化的对象），instanceof（后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。是则压入 1，否则压入 
0），checkcast（后跟目标类，判断栈顶元素是否为目标类 / 接口的实例。如果不是便抛出异常），athrow（将栈顶异常抛出），以及 monitorenter（为栈顶对象加锁）和 
monitorexit（为栈顶对象解锁）。</p> <p>此外，该类型的指令还包括字段访问指令，即静态字段访问指令 getstatic、putstatic，和实例字段访问指令 getfield、putfield。这四条指令均附带用以定位目标字段的信息，但所消耗的操作数栈元素皆不同。</p> 
<p><img src="https://static001.geekbang.org/resource/image/da/d9/da3ff3aa4aaa2531d23286fec65b08d9.png" 
alt=""></p> <p>以 putfield 为例，在上图中，它会把值 v 存储至对象 obj 的目标字段之中。</p> <p>方法调用指令，包括 invokestatic，invokespecial，invokevirtual，invokeinterface 
以及 invokedynamic。这几条字节码我们已经反反复复提及了，就不再具体介绍各自的含义了。</p> <p>除 invokedynamic 外，其他的方法调用指令所消耗的操作数栈元素是根据调用类型以及目标方法描述符来确定的。在进行方法调用之前，程序需要依次压入调用者（invokestatic 
不需要），以及各个参数。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int neg(int i) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int foo(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return neg(neg(i)); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // foo 方法对应的字节码如下：foo 方法对应的字节码如下： </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int foo(int i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1 aload_0 [this] </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2 iload_1 [i] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3 invokevirtual FooTest.neg(int) : int 
[25] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 6 invokevirtual 
FooTest.neg(int) : int [25] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
9 ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>以上面这段代码为例，当调用 foo(2) 时，每条指令执行前后局部变量数组空间以及操作数栈的分布如下所示：</p> 
<p><img src="https://static001.geekbang.org/resource/image/47/95/476fa1bcb6b36b5b651c2a4101073295.png" 
alt=""></p> <p>数组相关指令，包括新建基本类型数组的 newarray，新建引用类型数组的 anewarray，生成多维数组的 multianewarray，以及求数组长度的 
arraylength。另外，它还包括数组的加载指令以及存储指令。这些指令是区分类型的。例如，int 数组的加载指令为 iaload，存储指令为 iastore。</p> <p><img 
src="https://static001.geekbang.org/resource/image/5d/1f/5d935dcdd55e9f8461a6e5b0ac22001f.jpg" 
alt=""></p> <p><strong>数组访问指令表</strong></p> <p>控制流指令，包括无条件跳转 goto，条件跳转指令，tableswitch 和 lookupswtich（前者针对密集的 
cases，后者针对稀疏的 cases），返回指令，以及被废弃的 jsr，ret 指令。其中返回指令是区分类型的。例如，返回 int 值的指令为 ireturn。</p> <p><img 
src="https://static001.geekbang.org/resource/image/f5/f0/f5195b5425a9547af9ce8371aef5c4f0.jpg" 
alt=""></p> <p><strong>返回指令表</strong></p> <p>除返回指令外，其他的控制流指令均附带一个或者多个字节码偏移量，代表需要跳转到的位置。例如下面的 
abs 方法中偏移量为 1 的条件跳转指令，当栈顶元素小于 0 时，跳转至偏移量为 6 的字节码。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int abs(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (i &gt;= 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return -i; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 对应的字节码如下所示： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public int abs(int i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1 iflt 6 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5 ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6 iload_1 [i] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7 ineg </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8 ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>剩余的 Java 字节码几乎都和计算相关，这里就不再详细阐述了。</p> <h2>总结与实践</h2> 
<p>今天我简单介绍了各种类型的 Java 字节码。</p> <p>Java 方法的栈桢分为操作数栈和局部变量区。通常来说，程序需要将变量从局部变量区加载至操作数栈中，进行一番运算之后再存储回局部变量区中。</p> 
<p>Java 字节码可以划分为很多种类型，如加载常量指令，操作数栈专用指令，局部变量区访问指令，Java 相关指令，方法调用指令，数组相关指令，控制流指令，以及计算相关指令。</p> 
<p>今天的实践环节，你可以尝试自己分析一段较为复杂的字节码，在草稿上画出局部变量数组以及操作数栈分布图。当碰到不熟悉的指令时，你可以查阅<a href="https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-6.html#jvms-6.5">Java 
虚拟机规范第 6.5 小节</a> ，或者<a href="https://cs.au.dk/~mis/dOvs/jvmspec/ref-Java.html">此链接</a>。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 5 msec}
2020-11-19 20:13:36.567 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.569 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:36.573 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.575 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:13:36.580 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788016, 1605788016, 1, 'zh-hans', 0, 1, 1, 
0, '19丨Java字节码（基础篇）', 1, 25, 25) 
 {executed in 0 msec}
2020-11-19 20:13:36.588 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=25 
 {executed in 1 msec}
2020-11-19 20:13:36.590 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:36.596 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788016, 1605788016, 1, 'zh-hans', 0, 
1, 1, 0, '19丨Java字节码（基础篇）', 'book', 1, 25, 25) 
 {executed in 1 msec}
2020-11-19 20:13:36.604 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.606 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:36.609 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.611 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:36.641 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/69adec47d30b7e2eec056725e855187a?bkt=en-29a7ad5d1913bc6f46f18b855b2fc935ea182b90aa10172738103f0777a8fe6397ba4d7c66d6239e&fid=3757516097-778750-383891700777678&time=1605788015&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ZHoXL1WYeV%2BGylE55fsDUeoR8wc%3D&to=92&size=5126757&sta_dx=5126757&sta_cs=4328&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182978&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5126757&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f7041b808bccabebfdfa1e57ed1d77d69ad8e7eaf87cfe8f4c835d3c91e9706ef993b35b9d348ea4&sl=76480590&expires=8h&rt=pr&r=345298556&mlogid=7510828002216329708&vbdid=64799653&fin=19%E4%B8%A8Java%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510828002216329708&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=78cccb630bb0656e502f5eb078dde1cb3cfea8a678444b6c&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=19%E4%B8%A8Java%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89.mp3', 
25, 25) 
 {executed in 1 msec}
2020-11-19 20:13:36.674 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.676 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:36.682 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/69adec47d30b7e2eec056725e855187a?bkt=en-29a7ad5d1913bc6f46f18b855b2fc935ea182b90aa10172738103f0777a8fe6397ba4d7c66d6239e&fid=3757516097-778750-383891700777678&time=1605788015&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ZHoXL1WYeV%2BGylE55fsDUeoR8wc%3D&to=92&size=5126757&sta_dx=5126757&sta_cs=4328&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182978&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5126757&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f7041b808bccabebfdfa1e57ed1d77d69ad8e7eaf87cfe8f4c835d3c91e9706ef993b35b9d348ea4&sl=76480590&expires=8h&rt=pr&r=345298556&mlogid=7510828002216329708&vbdid=64799653&fin=19%E4%B8%A8Java%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510828002216329708&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=78cccb630bb0656e502f5eb078dde1cb3cfea8a678444b6c&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=19%E4%B8%A8Java%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89.mp3', 
25, 25) 
 {executed in 1 msec}
2020-11-19 20:13:36.700 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=25 
 {executed in 2 msec}
2020-11-19 20:13:36.703 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:36.707 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.709 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:36.725 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 详尽，赞👍 <br> <br>随便找几断代码，javap反编译，查jvm手册一会儿就明白了 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:.Java代码由Java的语言语法组成，有开发人员来编写 
<br> <br>2:.class 代码有Java编译器来编译，Java编译器也是有对应的开发人员来编写的，.class代码有字节码指令来组成，如果人理解Java字节码指令集比较简单也可以直接编写.class代码 
<br> <br>3:Java对应的机器码有JVM来编译出来，原料是.class代码，如果人类理解机器码比较容易，那么可能变成就直接在机器硬件上直接编写机器码了 <br> <br>4:高级语言的出现是为提高人编写代码的效率，我们学习.class字节码指令集、JVM、机器码等的知识，是为了使我们编写高级语言代码能更好的在机器硬件上的执行效率更高，从高级语言的代码到能在机器上运行的机器码，中间经过了好几层的转换，所以，了解每一层是怎么转换就能更快的定位出高级语言代码的性能瓶颈了，感觉是为了在人的编码效率和机器的执行效率之间找平衡点 
<br> <br>有个疑问❓ <br>没太理解，JVM基于栈的计算模型的原因，推测可能是为了更简单的实现和更高的性能但是是怎么做到的呢？请老师解释一下 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
基于栈的计算模型确实是为了实现起来容易一些，但它并不高效，因为没有使用底层体系架构的寄存器。<br><br>在JVM中，只有解释器完整地模拟出该计算模型。即时编译器在解析字节码时会使用一个虚拟的栈计算模型，但是在接下来的编译优化，以及生成的机器码就不用了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么局部变量要初始化？想请老师专业解答下！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
如果是虚拟机初始化局部变量，那么它需要掌握每个变量的生命周期，以便初始化共享同一下标的局部变量。实现起来比较费事。<br><br>另一方面，从代码规范来看，使用未经初始化的局部变量意义不明。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “因此，我们需要利用 dup 指令复制一份 new 指令的结果，并用来调用构造器。当调用返回之后，操作数栈上仍有原本由 
new 指令生成的引用去...” <br> <br>第一步栈顶压入new对象的引用r0，执行dup后复制r0得到r1，压入栈顶。r1用于调用构造器,完成后会pop, 留下栈顶元素r0。不知我这样理解对不？ 
<br>我的问题是为什么要dup呢？直接用r0不做pop不好吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 构造器是没有返回结果的，所以不用pop。如果不dup的话，就只有一个r0，在调用构造器时用掉了，程序就再没有对该新建对象的引用了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 数组访问指令表，int文稿中写的iaload，iastore；表格中列的iastore和istore 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/e9/b6aa6364.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沈飞龙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想请教下 编译后匿名内部类会生成一个class文件，但是函数式接口实现的代码却不会生成一个class文件，这是什么原理？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/25/80/fdd5a88f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ﹏雨天__...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 讲解内容中，这几张总结表，写的真的给力。赞 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/cf/2f/3951b6a8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李鑫磊</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 笔记：https://www.jianshu.com/p/b395ed905e0d </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/30/2b/bc5873c6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>对方正在输...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在JVM中,每个方法中,代码语句执行完毕,是不是都会默认有个return 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 正常执行路径会有return，有返回值的是ireturn，areturn这些。异常执行路径会有athrow。你可以试试查看只有一句throw 
new Exception()的方法</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> C/C++的汇编指令，会有大量寄存器的操作 <br>请问java的指令会用到寄存器吗？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Java字节码不会，但是底下的实现(比如解释执行器，即时编译器)是会的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/51/6f/f33beea5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>YIFENG</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 64位虚拟机中long和double也都是占用两个栈单元吗？ 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 10 msec}
2020-11-19 20:13:36.737 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.739 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:36.748 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>东方</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">13</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 详尽，赞👍 <br> <br>随便找几断代码，javap反编译，查jvm手册一会儿就明白了 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 1:.Java代码由Java的语言语法组成，有开发人员来编写 
<br> <br>2:.class 代码有Java编译器来编译，Java编译器也是有对应的开发人员来编写的，.class代码有字节码指令来组成，如果人理解Java字节码指令集比较简单也可以直接编写.class代码 
<br> <br>3:Java对应的机器码有JVM来编译出来，原料是.class代码，如果人类理解机器码比较容易，那么可能变成就直接在机器硬件上直接编写机器码了 <br> <br>4:高级语言的出现是为提高人编写代码的效率，我们学习.class字节码指令集、JVM、机器码等的知识，是为了使我们编写高级语言代码能更好的在机器硬件上的执行效率更高，从高级语言的代码到能在机器上运行的机器码，中间经过了好几层的转换，所以，了解每一层是怎么转换就能更快的定位出高级语言代码的性能瓶颈了，感觉是为了在人的编码效率和机器的执行效率之间找平衡点 
<br> <br>有个疑问❓ <br>没太理解，JVM基于栈的计算模型的原因，推测可能是为了更简单的实现和更高的性能但是是怎么做到的呢？请老师解释一下 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
基于栈的计算模型确实是为了实现起来容易一些，但它并不高效，因为没有使用底层体系架构的寄存器。<br><br>在JVM中，只有解释器完整地模拟出该计算模型。即时编译器在解析字节码时会使用一个虚拟的栈计算模型，但是在接下来的编译优化，以及生成的机器码就不用了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 为什么局部变量要初始化？想请老师专业解答下！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
如果是虚拟机初始化局部变量，那么它需要掌握每个变量的生命周期，以便初始化共享同一下标的局部变量。实现起来比较费事。<br><br>另一方面，从代码规范来看，使用未经初始化的局部变量意义不明。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-06 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “因此，我们需要利用 dup 指令复制一份 new 指令的结果，并用来调用构造器。当调用返回之后，操作数栈上仍有原本由 
new 指令生成的引用去...” <br> <br>第一步栈顶压入new对象的引用r0，执行dup后复制r0得到r1，压入栈顶。r1用于调用构造器,完成后会pop, 留下栈顶元素r0。不知我这样理解对不？ 
<br>我的问题是为什么要dup呢？直接用r0不做pop不好吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 构造器是没有返回结果的，所以不用pop。如果不dup的话，就只有一个r0，在调用构造器时用掉了，程序就再没有对该新建对象的引用了。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Void_seT</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 数组访问指令表，int文稿中写的iaload，iastore；表格中列的iastore和istore 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/11/e9/b6aa6364.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>沈飞龙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想请教下 编译后匿名内部类会生成一个class文件，但是函数式接口实现的代码却不会生成一个class文件，这是什么原理？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/25/80/fdd5a88f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ﹏雨天__...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 讲解内容中，这几张总结表，写的真的给力。赞 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/cf/2f/3951b6a8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>李鑫磊</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-19 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 笔记：https://www.jianshu.com/p/b395ed905e0d </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/30/2b/bc5873c6.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>对方正在输...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-12 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 在JVM中,每个方法中,代码语句执行完毕,是不是都会默认有个return 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 正常执行路径会有return，有返回值的是ireturn，areturn这些。异常执行路径会有athrow。你可以试试查看只有一句throw 
new Exception()的方法</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> C/C++的汇编指令，会有大量寄存器的操作 <br>请问java的指令会用到寄存器吗？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Java字节码不会，但是底下的实现(比如解释执行器，即时编译器)是会的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/51/6f/f33beea5.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>YIFENG</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 64位虚拟机中long和double也都是占用两个栈单元吗？ 
</div> <!----> <!----> </div></li>', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 4 msec}
2020-11-19 20:13:36.759 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.761 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:36.765 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.766 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:36.772 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 25, 'https://static001.geekbang.org/resource/image/70/3c/70da5bcd822f579b8fc705743d7f883c.jpg', 
25) 
 {executed in 1 msec}
2020-11-19 20:13:36.779 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.781 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:36.786 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 25, 'https://static001.geekbang.org/resource/image/70/3c/70da5bcd822f579b8fc705743d7f883c.jpg', 
25) 
 {executed in 0 msec}
2020-11-19 20:13:36.793 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.795 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:36.800 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 20:13:36.807 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 20:13:36.808 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:36.814 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 25, 25) 
 {executed in 1 msec}
2020-11-19 20:13:36.821 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='876647839457719' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:13:36.823 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:53.852 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='876647839457719' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:13:53.857 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:53.866 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('876647839457719', 1, 'net_content') 
 {executed in 2 msec}
2020-11-19 20:13:53.870 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('876647839457719', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:13:53.874 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|53            |
|--------------|

2020-11-19 20:13:53.903 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='876647839457719' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:13:53.905 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:54.303 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='876647839457719' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:13:54.305 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:13:54.309 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('876647839457719', 1, 'media') 
 {executed in 0 msec}
2020-11-19 20:13:54.311 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('876647839457719', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:13:54.313 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|54            |
|--------------|

2020-11-19 20:13:54.326 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='876647839457719' 
 {executed in 1 msec}
2020-11-19 20:13:54.327 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:54.331 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788034, 1) 
 {executed in 1 msec}
2020-11-19 20:13:54.332 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788034, 1) 
 {executed in 0 msec}
2020-11-19 20:13:54.333 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|26            |
|--------------|

2020-11-19 20:13:54.342 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '472e14c8-f085-49be-9504-2e00d876347f', 
26) 
 {executed in 1 msec}
2020-11-19 20:13:54.343 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '472e14c8-f085-49be-9504-2e00d876347f', 26) 
 {executed in 0 msec}
2020-11-19 20:13:54.344 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|26            |
|--------------|

2020-11-19 20:13:54.356 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=26, revision_default=1, revision_timestamp=1605788034, 
revision_uid=1 where vid=26 
 {executed in 1 msec}
2020-11-19 20:13:54.363 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.364 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:54.370 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '876647839457719', 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.376 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.378 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:13:54.383 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '876647839457719', 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.388 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=26 
 {executed in 0 msec}
2020-11-19 20:13:54.390 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:54.394 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=26 
 {executed in 1 msec}
2020-11-19 20:13:54.396 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:13:54.401 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 26, 0, 0, 19, 0, 26) 
 {executed in 0 msec}
2020-11-19 20:13:54.408 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.409 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:54.414 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.416 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:54.427 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在上一章中，我利用了程序控制流图以及伪代码，来展示即时编译器中基于 profile 的优化。不过，这并非实际的优化过程。</p> 
<h2>1. 中间表达形式（IR）</h2> <p>在编译原理课程中，我们通常将编译器分为前端和后端。其中，前端会对所输入的程序进行词法分析、语法分析、语义分析，然后生成中间表达形式，也就是 
IR（Intermediate Representation ）。后端会对 IR 进行优化，然后生成目标代码。</p> <p>如果不考虑解释执行的话，从 Java 源代码到最终的机器码实际上经过了两轮编译：Java 
编译器将 Java 源代码编译成 Java 字节码，而即时编译器则将 Java 字节码编译成机器码。</p> <p>对于即时编译器来说，所输入的 Java 字节码剥离了很多高级的 Java 
语法，而且其采用的基于栈的计算模型非常容易建模。因此，即时编译器并不需要重新进行词法分析、语法分析以及语义分析，而是直接将 Java 字节码作为一种 IR。</p> <p>不过，Java 
字节码本身并不适合直接作为可供优化的 IR。这是因为现代编译器一般采用静态单赋值（Static Single Assignment，SSA）IR。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> y = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre><!-- [[[read_end]]] --> <p>举个例子（<a href="https://en.wikipedia.org/wiki/Static_single_assignment_form">来源</a>），上面这段代码所对应的 
SSA 形式伪代码是下面这段：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> y1 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y2 = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> x1 = y2; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在源代码中，我们可以轻易地发现第一个对 y 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析（具体的优化叫<a 
href="https://en.wikipedia.org/wiki/Reaching_definition">reaching definition</a>），从后至前依次确认哪些变量的值被覆盖（kill）掉。</p> 
<p>不过，如果借助了 SSA IR，编译器则可以通过查找赋值了但是没有使用的变量，来识别冗余赋值。</p> <p>除此之外，SSA IR 对其他优化方式也有很大的帮助，例如常量折叠（constant 
folding）、常量传播（constant propagation）、强度削减（strength reduction）以及死代码删除（dead code elimination）等。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 示例： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1=4*1024 经过常量折叠后变为 x1=4096 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1=4; y1=x1 经过常量传播后变为 x1=4; y1=4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
y1=x1*3 经过强度削减后变为 y1=(x1&lt;&lt;1)+x1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if(2&gt;1){y1=1;}else{y2=1;}经过死代码删除后变为 y1=1 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>部分同学可能会手动进行上述优化，以期望能够达到更高的运行效率。实际上，对于这些简单的优化，编译器会代为执行，以便程序员专注于代码的可读性。</p> <p>SSA IR 会带来一个问题，那便是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 
if 语句的两个分支中，变量 y 分别被赋值为 0 或 1，并且在接下来的代码中读取 y 的值。此时，根据不同的执行路径，所读取到的值也很有可能不同。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = ..; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (x 
&gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> y = 0; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = y; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>为了解决这个问题，我们需要引入一个 Phi 函数的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码便可以转换为下面这段 
SSA 伪代码。这里的 Phi 函数将根据前面两个分支分别选择 y1、y2 的值，并赋值给 y3。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1 = ..; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (x1 
&gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> y1 = 
0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> y2 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
y3 = Phi(y1, y2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x2 = y3; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>总之，即时编译器会将 Java 字节码转换成 SSA IR。更确切的说，是一张包含控制流和数据流的 
IR 图，每个字节码对应其中的若干个节点（注意，有些字节码并没有对应的 IR 节点）。然后，即时编译器在 IR 图上面进行优化。</p> <p>我们可以将每一种优化看成一个独立的图算法，它接收一个 
IR 图，并输出经过转换后的 IR 图。整个编译器优化过程便是一个个优化串联起来的。</p> <h2>2. Sea-of-nodes</h2> <p>HotSpot 里的 C2 采用的是一种名为 
Sea-of-Nodes 的 SSA IR。它的最大特点，便是去除了变量的概念，直接采用变量所指向的值，来进行运算。</p> <p>在上面这段 SSA 伪代码中，我们使用了多个变量名 
x1、x2、y1 和 y2。这在 Sea-of-Nodes 将不复存在。</p> <p>取而代之的则是对应的值，比如说 Phi(y1, y2) 变成 Phi(0, 1)，后者本身也是一个值，被其他 
IR 节点所依赖。正因如此，常量传播在 Sea-of-Nodes 中变成了一个 no-op。</p> <p>Graal 的 IR 同样也是 Sea-of-Nodes 类型的，并且可以认为是 
C2 IR 的精简版本。由于 Graal 的 IR 系统更加容易理解，而且工具支持相对来说也比较全、比较新，所以下面我将围绕着 Graal 的 IR 系统来讲解。</p> <p><span 
class="reference">尽管 IR 系统不同，C2 和 Graal 所实现的优化大同小异。对于那小部分不同的地方，它们也在不停地相互“借鉴”。所以你无须担心不通用的问题。</span></p> 
<p>为了方便你理解今天的内容，我将利用 IR 可视化工具<a href="http://ssw.jku.at/General/Staff/TW/igv.html">Ideal Graph 
Visualizer</a>（IGV），来展示具体的 IR 图。（这里 Ideal 是 C2 中 IR 的名字。）</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(int count) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; count; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>上面这段代码所对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/2d/fe/2d107fd56885909797a4ada966f2bdfe.png" 
alt=""></p> <p><strong>IR 图</strong></p> <p>这里面，0 号 Start 节点是方法入口，21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的皆属于浮动节点。若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 
B0、B1 等。</p> <p><img src="https://static001.geekbang.org/resource/image/0b/8b/0be8e6fccbeedb821bd23bbef899f78b.png" 
alt=""></p> <p><strong>基本块直接的控制流关系</strong></p> <p>基本块是仅有一个入口和一个出口的指令序列（IR 节点序列）。一个基本块的出口可以和若干个基本块的入口相连接，反之亦然。</p> 
<p>在我们的例子中，B0 和 B2 的出口与 B1 的入口连接，代表在执行完 B0 或 B2 后可以跳转至 B1，并继续执行 B1 中的内容。而 B1 的出口则与 B2 和 B3 
的入口连接。</p> <p>可以看到，上面的 IR 图已经没有 sum 或者 i 这样的变量名了，取而代之的是一个个的值，例如源程序中的 i&lt;count 被转换为 10 号 &lt; 
节点，其接收两个值，分别为代表 i 的 8 号 Phi 节点，以及代表输入第 0 个参数的 1 号 P(0) 节点。</p> <p>关于 8 号 Phi 节点，前面讲过，它将根据不同的执行路径选择不同的值。如果是从 
5 号 End 节点进入的，则选择常量 0；如果是从 20 号 LoopEnd 节点跳转进入的，则选择 19 号 + 节点。</p> <p>你可以自己分析一下代表 sum 的 7 号 
Phi 节点，根据不同的执行路径都选择了哪些值。</p> <p>浮动节点的位置并不固定。在编译过程中，编译器需要（多次）计算浮动节点具体的排布位置。这个过程我们称之为节点调度（node 
scheduling）。</p> <p>节点调度是根据节点之间的依赖关系来进行的。举个例子，在前面的 IR 图中，10 号 &lt; 节点是 16 号 if 节点用来判断是否跳转的条件，因此它需要排布在 
16 号 if 节点（注意这是一个固定节点）之前。同时它又依赖于 8 号 Phi 节点的值以及 1 号 P(0) 节点的值，因此它需要排布在这两个节点之后。</p> <p>需要注意的是，C2 
没有固定节点这一概念，所有的 IR 节点都是浮动节点。它将根据各个基本块头尾之间的控制依赖，以及数据依赖和内存依赖，来进行节点调度。</p> <p>这里的内存依赖是什么一个概念呢？假设一段程序往内存中存储了一个值，而后又读取同一内存，那么显然程序希望读取到的是所存储的值。即时编译器不能任意调度对同一内存地址的读写，因为它们之间存在依赖关系。</p> 
<p>C2 的做法便是将这种时序上的先后记录为内存依赖，并让节点调度算法在进行调度时考虑这些内存依赖关系。Graal 则将内存读写转换成固定节点。由于固定节点存在先后关系，因此无须额外记录内存依赖。</p> 
<h2>3. Gloval Value Numbering</h2> <p>下面介绍一种因 Sea-of-Nodes 而变得非常容易的优化技术 —— Gloval Value Numbering（GVN）。</p> 
<p>GVN 是一种发现并消除等价计算的优化技术。举例来说，如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 
GVN 还将省下冗余的乘法操作。</p> <p>在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：如果一个浮动节点本身不存在内存副作用（由于 GVN 
可能影响节点调度，如果有内存副作用的话，那么将引发一些源代码中不可能出现的情况） ，那么即时编译器只需判断该浮动节点是否与已存在的浮动节点的类型相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo(int a, int b) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = a * b; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a &gt; 0) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a * b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (b &gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a * b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们来看一个实际的案例。在上面这段代码中，如果 a 和 b 都大于 0，那么我们需要做三次乘法。通过 GVN 之后，我们只会在 B0 中做一次乘法，并且在接下来的代码中直接使用乘法的结果，也就是 
4 号 * 节点所代表的值。</p> <p><img src="https://static001.geekbang.org/resource/image/f9/e1/f965693c5b1912f28065349b171832e1.png" 
alt=""></p> <p>我们可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。</p> <p>这两者的区别在于，GVN 
直接比较值的相同与否，而 CSE 则是借助词法分析器来判断两个表达式相同与否。因此，在不少情况下，CSE 还需借助常量传播来达到消除的效果。</p> <h2>总结与实践</h2> <p>今天我介绍了即时编译器的内部构造。</p> 
<p>即时编译器将所输入的 Java 字节码转换成 SSA IR，以便更好地进行优化。</p> <p>具体来说，C2 和 Graal 采用的是一种名为 Sea-of-Nodes 的 
IR，其特点用 IR 节点来代表程序中的值，并且将源程序中基于变量的计算转换为基于值的计算。</p> <p>此外，我还介绍了 C2 和 Graal 的 IR 的可视化工具 IGV，以及基于 
IR 的优化 GVN。</p> <p>今天的实践环节，你可以尝试使用 IGV 来查看上一篇实践环节中的代码的具体编译过程。</p> <p>你可以通过<a href="https://github.com/oracle/graal/releases/tag/idealgraphvisualizer-543">该页面</a>下载当前版本的 
IGV。解压后，可运行脚本位于 bin/idealgraphvisualizer 中。IGV 启动完成后，你可以通过下述指令将 IR 图打印至 IGV 中。（需附带 Graal 编译器的 
Java 10 或以上版本。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -XX:CompileCommand=''dontinline,CompilationTest::hash'' -Dgraal.Dump=:3 
-Dgraal.MethodFilter=''CompilationTest.hash'' -Dgraal.OptDeoptimizationGrouping=false CompilationTest 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class CompilationTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object input) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (input instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(input); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return input.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> hash(i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 4 msec}
2020-11-19 20:13:54.438 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.440 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:13:54.451 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在上一章中，我利用了程序控制流图以及伪代码，来展示即时编译器中基于 profile 的优化。不过，这并非实际的优化过程。</p> <h2>1. 
中间表达形式（IR）</h2> <p>在编译原理课程中，我们通常将编译器分为前端和后端。其中，前端会对所输入的程序进行词法分析、语法分析、语义分析，然后生成中间表达形式，也就是 IR（Intermediate 
Representation ）。后端会对 IR 进行优化，然后生成目标代码。</p> <p>如果不考虑解释执行的话，从 Java 源代码到最终的机器码实际上经过了两轮编译：Java 
编译器将 Java 源代码编译成 Java 字节码，而即时编译器则将 Java 字节码编译成机器码。</p> <p>对于即时编译器来说，所输入的 Java 字节码剥离了很多高级的 Java 
语法，而且其采用的基于栈的计算模型非常容易建模。因此，即时编译器并不需要重新进行词法分析、语法分析以及语义分析，而是直接将 Java 字节码作为一种 IR。</p> <p>不过，Java 
字节码本身并不适合直接作为可供优化的 IR。这是因为现代编译器一般采用静态单赋值（Static Single Assignment，SSA）IR。这种 IR 的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> y = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = y; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre><!-- [[[read_end]]] --> <p>举个例子（<a href="https://en.wikipedia.org/wiki/Static_single_assignment_form">来源</a>），上面这段代码所对应的 
SSA 形式伪代码是下面这段：</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> y1 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y2 = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> x1 = y2; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>在源代码中，我们可以轻易地发现第一个对 y 的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析（具体的优化叫<a 
href="https://en.wikipedia.org/wiki/Reaching_definition">reaching definition</a>），从后至前依次确认哪些变量的值被覆盖（kill）掉。</p> 
<p>不过，如果借助了 SSA IR，编译器则可以通过查找赋值了但是没有使用的变量，来识别冗余赋值。</p> <p>除此之外，SSA IR 对其他优化方式也有很大的帮助，例如常量折叠（constant 
folding）、常量传播（constant propagation）、强度削减（strength reduction）以及死代码删除（dead code elimination）等。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 示例： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1=4*1024 经过常量折叠后变为 x1=4096 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1=4; y1=x1 经过常量传播后变为 x1=4; y1=4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
y1=x1*3 经过强度削减后变为 y1=(x1&lt;&lt;1)+x1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if(2&gt;1){y1=1;}else{y2=1;}经过死代码删除后变为 y1=1 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>部分同学可能会手动进行上述优化，以期望能够达到更高的运行效率。实际上，对于这些简单的优化，编译器会代为执行，以便程序员专注于代码的可读性。</p> <p>SSA IR 会带来一个问题，那便是不同执行路径可能会对同一变量设置不同的值。例如下面这段代码 
if 语句的两个分支中，变量 y 分别被赋值为 0 或 1，并且在接下来的代码中读取 y 的值。此时，根据不同的执行路径，所读取到的值也很有可能不同。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = ..; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (x 
&gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> y = 0; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> y = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x = y; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>为了解决这个问题，我们需要引入一个 Phi 函数的概念，能够根据不同的执行路径选择不同的值。于是，上面这段代码便可以转换为下面这段 
SSA 伪代码。这里的 Phi 函数将根据前面两个分支分别选择 y1、y2 的值，并赋值给 y3。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x1 = ..; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> if (x1 
&gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> y1 = 
0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> y2 = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
y3 = Phi(y1, y2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
x2 = y3; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>总之，即时编译器会将 Java 字节码转换成 SSA IR。更确切的说，是一张包含控制流和数据流的 
IR 图，每个字节码对应其中的若干个节点（注意，有些字节码并没有对应的 IR 节点）。然后，即时编译器在 IR 图上面进行优化。</p> <p>我们可以将每一种优化看成一个独立的图算法，它接收一个 
IR 图，并输出经过转换后的 IR 图。整个编译器优化过程便是一个个优化串联起来的。</p> <h2>2. Sea-of-nodes</h2> <p>HotSpot 里的 C2 采用的是一种名为 
Sea-of-Nodes 的 SSA IR。它的最大特点，便是去除了变量的概念，直接采用变量所指向的值，来进行运算。</p> <p>在上面这段 SSA 伪代码中，我们使用了多个变量名 
x1、x2、y1 和 y2。这在 Sea-of-Nodes 将不复存在。</p> <p>取而代之的则是对应的值，比如说 Phi(y1, y2) 变成 Phi(0, 1)，后者本身也是一个值，被其他 
IR 节点所依赖。正因如此，常量传播在 Sea-of-Nodes 中变成了一个 no-op。</p> <p>Graal 的 IR 同样也是 Sea-of-Nodes 类型的，并且可以认为是 
C2 IR 的精简版本。由于 Graal 的 IR 系统更加容易理解，而且工具支持相对来说也比较全、比较新，所以下面我将围绕着 Graal 的 IR 系统来讲解。</p> <p><span 
class="reference">尽管 IR 系统不同，C2 和 Graal 所实现的优化大同小异。对于那小部分不同的地方，它们也在不停地相互“借鉴”。所以你无须担心不通用的问题。</span></p> 
<p>为了方便你理解今天的内容，我将利用 IR 可视化工具<a href="http://ssw.jku.at/General/Staff/TW/igv.html">Ideal Graph 
Visualizer</a>（IGV），来展示具体的 IR 图。（这里 Ideal 是 C2 中 IR 的名字。）</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(int count) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> for (int i = 0; i &lt; count; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>上面这段代码所对应的 IR 图如下所示：</p> <p><img src="https://static001.geekbang.org/resource/image/2d/fe/2d107fd56885909797a4ada966f2bdfe.png" 
alt=""></p> <p><strong>IR 图</strong></p> <p>这里面，0 号 Start 节点是方法入口，21 号 Return 节点是方法出口。红色加粗线条为控制流，蓝色线条为数据流，而其他颜色的线条则是特殊的控制流或数据流。被控制流边所连接的是固定节点，其他的皆属于浮动节点。若干个顺序执行的节点将被包含在同一个基本块之中，如图中的 
B0、B1 等。</p> <p><img src="https://static001.geekbang.org/resource/image/0b/8b/0be8e6fccbeedb821bd23bbef899f78b.png" 
alt=""></p> <p><strong>基本块直接的控制流关系</strong></p> <p>基本块是仅有一个入口和一个出口的指令序列（IR 节点序列）。一个基本块的出口可以和若干个基本块的入口相连接，反之亦然。</p> 
<p>在我们的例子中，B0 和 B2 的出口与 B1 的入口连接，代表在执行完 B0 或 B2 后可以跳转至 B1，并继续执行 B1 中的内容。而 B1 的出口则与 B2 和 B3 
的入口连接。</p> <p>可以看到，上面的 IR 图已经没有 sum 或者 i 这样的变量名了，取而代之的是一个个的值，例如源程序中的 i&lt;count 被转换为 10 号 &lt; 
节点，其接收两个值，分别为代表 i 的 8 号 Phi 节点，以及代表输入第 0 个参数的 1 号 P(0) 节点。</p> <p>关于 8 号 Phi 节点，前面讲过，它将根据不同的执行路径选择不同的值。如果是从 
5 号 End 节点进入的，则选择常量 0；如果是从 20 号 LoopEnd 节点跳转进入的，则选择 19 号 + 节点。</p> <p>你可以自己分析一下代表 sum 的 7 号 
Phi 节点，根据不同的执行路径都选择了哪些值。</p> <p>浮动节点的位置并不固定。在编译过程中，编译器需要（多次）计算浮动节点具体的排布位置。这个过程我们称之为节点调度（node 
scheduling）。</p> <p>节点调度是根据节点之间的依赖关系来进行的。举个例子，在前面的 IR 图中，10 号 &lt; 节点是 16 号 if 节点用来判断是否跳转的条件，因此它需要排布在 
16 号 if 节点（注意这是一个固定节点）之前。同时它又依赖于 8 号 Phi 节点的值以及 1 号 P(0) 节点的值，因此它需要排布在这两个节点之后。</p> <p>需要注意的是，C2 
没有固定节点这一概念，所有的 IR 节点都是浮动节点。它将根据各个基本块头尾之间的控制依赖，以及数据依赖和内存依赖，来进行节点调度。</p> <p>这里的内存依赖是什么一个概念呢？假设一段程序往内存中存储了一个值，而后又读取同一内存，那么显然程序希望读取到的是所存储的值。即时编译器不能任意调度对同一内存地址的读写，因为它们之间存在依赖关系。</p> 
<p>C2 的做法便是将这种时序上的先后记录为内存依赖，并让节点调度算法在进行调度时考虑这些内存依赖关系。Graal 则将内存读写转换成固定节点。由于固定节点存在先后关系，因此无须额外记录内存依赖。</p> 
<h2>3. Gloval Value Numbering</h2> <p>下面介绍一种因 Sea-of-Nodes 而变得非常容易的优化技术 —— Gloval Value Numbering（GVN）。</p> 
<p>GVN 是一种发现并消除等价计算的优化技术。举例来说，如果一段程序中出现了多次操作数相同的乘法，那么即时编译器可以将这些乘法并为一个，从而降低输出机器码的大小。如果这些乘法出现在同一执行路径上，那么 
GVN 还将省下冗余的乘法操作。</p> <p>在 Sea-of-Nodes 中，由于只存在值的概念，因此 GVN 算法将非常简单：如果一个浮动节点本身不存在内存副作用（由于 GVN 
可能影响节点调度，如果有内存副作用的话，那么将引发一些源代码中不可能出现的情况） ，那么即时编译器只需判断该浮动节点是否与已存在的浮动节点的类型相同，所输入的 IR 节点是否一致，便可以将这两个浮动节点归并成一个。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static int foo(int a, int b) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = a * b; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (a &gt; 0) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += a * b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (b &gt; 0) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> sum += a * b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return sum; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>我们来看一个实际的案例。在上面这段代码中，如果 a 和 b 都大于 0，那么我们需要做三次乘法。通过 GVN 之后，我们只会在 B0 中做一次乘法，并且在接下来的代码中直接使用乘法的结果，也就是 
4 号 * 节点所代表的值。</p> <p><img src="https://static001.geekbang.org/resource/image/f9/e1/f965693c5b1912f28065349b171832e1.png" 
alt=""></p> <p>我们可以将 GVN 理解为在 IR 图上的公共子表达式消除（Common Subexpression Elimination，CSE）。</p> <p>这两者的区别在于，GVN 
直接比较值的相同与否，而 CSE 则是借助词法分析器来判断两个表达式相同与否。因此，在不少情况下，CSE 还需借助常量传播来达到消除的效果。</p> <h2>总结与实践</h2> <p>今天我介绍了即时编译器的内部构造。</p> 
<p>即时编译器将所输入的 Java 字节码转换成 SSA IR，以便更好地进行优化。</p> <p>具体来说，C2 和 Graal 采用的是一种名为 Sea-of-Nodes 的 
IR，其特点用 IR 节点来代表程序中的值，并且将源程序中基于变量的计算转换为基于值的计算。</p> <p>此外，我还介绍了 C2 和 Graal 的 IR 的可视化工具 IGV，以及基于 
IR 的优化 GVN。</p> <p>今天的实践环节，你可以尝试使用 IGV 来查看上一篇实践环节中的代码的具体编译过程。</p> <p>你可以通过<a href="https://github.com/oracle/graal/releases/tag/idealgraphvisualizer-543">该页面</a>下载当前版本的 
IGV。解压后，可运行脚本位于 bin/idealgraphvisualizer 中。IGV 启动完成后，你可以通过下述指令将 IR 图打印至 IGV 中。（需附带 Graal 编译器的 
Java 10 或以上版本。）</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -XX:CompileCommand=''dontinline,CompilationTest::hash'' -Dgraal.Dump=:3 
-Dgraal.MethodFilter=''CompilationTest.hash'' -Dgraal.OptDeoptimizationGrouping=false CompilationTest 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class CompilationTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object input) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (input instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(input); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return input.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> hash(i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 4 msec}
2020-11-19 20:13:54.465 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=26 
 {executed in 2 msec}
2020-11-19 20:13:54.468 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:54.473 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=26 
 {executed in 1 msec}
2020-11-19 20:13:54.476 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:13:54.486 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788034, 1605788034, 1, 'zh-hans', 0, 1, 1, 
0, '18丨即时编译器的中间表达形式', 1, 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.494 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=26 
 {executed in 2 msec}
2020-11-19 20:13:54.496 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:13:54.502 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788034, 1605788034, 1, 'zh-hans', 0, 
1, 1, 0, '18丨即时编译器的中间表达形式', 'book', 1, 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.508 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.510 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:54.513 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.515 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:54.521 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/4a4be5e9fa8e63a706f1dc15369fcf1d?bkt=en-2e2b5030dd6ff0376a61c3c2b8d4eade394740cf9a2dd9c803e9664f8bde902e9b974f841a7a5d85&fid=3757516097-778750-569611937584143&time=1605788032&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-VSVEm4za62Z%2BxQrEF0SBK3tALuY%3D&to=92&size=5148700&sta_dx=5148700&sta_cs=4340&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182970&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5148700&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-634519403c806411bde6122f2e56922f77ba604de3788335aa34be7c16fbb7639ef76bb2763651dd&sl=76480590&expires=8h&rt=pr&r=198285926&mlogid=7510832819015253135&vbdid=64799653&fin=18%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510832819015253135&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211bab3c0eebe2d8bde08d5ec4c3bc70fd7b&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=18%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F.mp3', 
26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.527 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.529 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:13:54.536 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/4a4be5e9fa8e63a706f1dc15369fcf1d?bkt=en-2e2b5030dd6ff0376a61c3c2b8d4eade394740cf9a2dd9c803e9664f8bde902e9b974f841a7a5d85&fid=3757516097-778750-569611937584143&time=1605788032&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-VSVEm4za62Z%2BxQrEF0SBK3tALuY%3D&to=92&size=5148700&sta_dx=5148700&sta_cs=4340&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182970&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5148700&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-634519403c806411bde6122f2e56922f77ba604de3788335aa34be7c16fbb7639ef76bb2763651dd&sl=76480590&expires=8h&rt=pr&r=198285926&mlogid=7510832819015253135&vbdid=64799653&fin=18%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510832819015253135&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211bab3c0eebe2d8bde08d5ec4c3bc70fd7b&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=18%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F.mp3', 
26, 26) 
 {executed in 2 msec}
2020-11-19 20:13:54.542 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.544 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:54.548 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.549 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:54.556 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/53/ab/6c07638a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>MissSunda...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-09 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看不太懂。哈哈哈...可能基础还不到这个水平吧，多看多思考吧。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 除了你上面提到的内存依赖，我看到C2的ideal graph里面还有一种依赖叫做I/O 
dependency，这个在Graal的graph里似乎也没有了。可以解释一下C2的这个I/O dependency是做什么的，以及Graal是如何替代这种依赖的表示的么？ </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 首先这些dependency都是为了scheduling服务的，也就是把图序列化为指令序列，图节点中的相互依赖会让它们拥有先后关系。<br><br>个人理解哈，原本的IO 
dependency就是IO顺序，Cliff Click大神的论文中说的是没有内存映射的IO访问。现在C2应该用来泛指非内存访问的JVM状态。<br><br>Graal里这种额外的依赖关系都是用控制流先后顺序来表达的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>likun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好 我这边找不到bebug版本的jdk10，好像无法查看ir图 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 导出Graal IR不用debug版本的JDK</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> IR图有点看不懂。基本块是根据什么原则划分的？ 
有些块有start,begin, end等等，有些块却没有？ 为什么GVN代码中，都是判断a,b是否大于0，图中B3来了一个Merge节点? </div> <!----> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 先说一下，这个是Graal的IR。<br><br>基本块的划分规则是根据其定义来的，即最长的，顺序执行的节点集。<br><br>start 
begin end是为了标注基本块的起始和结尾，便于优化，没有其他实际意义。<br><br>merge节点可以看成控制流交汇的节点，在Graal里就是用来挂phi节点的。最后有两个return而没有merge，实际上是另外一个优化code 
duplicati，将原本的merge优化掉，生成两条独立程序路径。在这两条路径中，b的值是唯一的，而不是一个phi方法。</p> </div> </div></li>', 0, 'full_html', 
'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.569 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=26 
 {executed in 2 msec}
2020-11-19 20:13:54.570 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:13:54.577 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/53/ab/6c07638a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>MissSunda...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-09 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 看不太懂。哈哈哈...可能基础还不到这个水平吧，多看多思考吧。 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ext4</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-31 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 除了你上面提到的内存依赖，我看到C2的ideal graph里面还有一种依赖叫做I/O 
dependency，这个在Graal的graph里似乎也没有了。可以解释一下C2的这个I/O dependency是做什么的，以及Graal是如何替代这种依赖的表示的么？ </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 首先这些dependency都是为了scheduling服务的，也就是把图序列化为指令序列，图节点中的相互依赖会让它们拥有先后关系。<br><br>个人理解哈，原本的IO 
dependency就是IO顺序，Cliff Click大神的论文中说的是没有内存映射的IO访问。现在C2应该用来泛指非内存访问的JVM状态。<br><br>Graal里这种额外的依赖关系都是用控制流先后顺序来表达的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>likun</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 你好 我这边找不到bebug版本的jdk10，好像无法查看ir图 </div> 
<!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 导出Graal IR不用debug版本的JDK</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> IR图有点看不懂。基本块是根据什么原则划分的？ 
有些块有start,begin, end等等，有些块却没有？ 为什么GVN代码中，都是判断a,b是否大于0，图中B3来了一个Merge节点? </div> <!----> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 先说一下，这个是Graal的IR。<br><br>基本块的划分规则是根据其定义来的，即最长的，顺序执行的节点集。<br><br>start 
begin end是为了标注基本块的起始和结尾，便于优化，没有其他实际意义。<br><br>merge节点可以看成控制流交汇的节点，在Graal里就是用来挂phi节点的。最后有两个return而没有merge，实际上是另外一个优化code 
duplicati，将原本的merge优化掉，生成两条独立程序路径。在这两条路径中，b的值是唯一的，而不是一个phi方法。</p> </div> </div></li>', 0, 'full_html', 
'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.588 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.589 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:54.593 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.594 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:54.600 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 26, 'https://static001.geekbang.org/resource/image/61/87/613b6b983449620bc771dc9bc9689387.jpg', 
26) 
 {executed in 1 msec}
2020-11-19 20:13:54.607 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.608 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:13:54.614 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 26, 'https://static001.geekbang.org/resource/image/61/87/613b6b983449620bc771dc9bc9689387.jpg', 
26) 
 {executed in 1 msec}
2020-11-19 20:13:54.621 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.623 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:54.628 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 26, 26) 
 {executed in 0 msec}
2020-11-19 20:13:54.634 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 20:13:54.635 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:13:54.641 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 20:13:54.647 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='797938228699469' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:13:54.648 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:12.814 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='797938228699469' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:14:12.816 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:12.819 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('797938228699469', 1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:14:12.821 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('797938228699469', 
1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:14:12.822 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|55            |
|--------------|

2020-11-19 20:14:12.835 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='797938228699469' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:14:12.836 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:13.323 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='797938228699469' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:14:13.325 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:13.330 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('797938228699469', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:14:13.331 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('797938228699469', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:14:13.333 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|56            |
|--------------|

2020-11-19 20:14:13.347 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='797938228699469' 
 {executed in 1 msec}
2020-11-19 20:14:13.349 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:13.354 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788053, 1) 
 {executed in 1 msec}
2020-11-19 20:14:13.355 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788053, 1) 
 {executed in 0 msec}
2020-11-19 20:14:13.356 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|27            |
|--------------|

2020-11-19 20:14:13.366 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'bdf3be08-da2e-467c-83c1-a9a86e3574d9', 
27) 
 {executed in 0 msec}
2020-11-19 20:14:13.368 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'bdf3be08-da2e-467c-83c1-a9a86e3574d9', 27) 
 {executed in 0 msec}
2020-11-19 20:14:13.369 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|27            |
|--------------|

2020-11-19 20:14:13.382 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=27, revision_default=1, revision_timestamp=1605788053, 
revision_uid=1 where vid=27 
 {executed in 1 msec}
2020-11-19 20:14:13.388 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.389 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:13.395 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '797938228699469', 'zh-hans', 27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.401 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.403 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:13.408 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '797938228699469', 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 20:14:13.415 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=27 
 {executed in 1 msec}
2020-11-19 20:14:13.416 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:14:13.420 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=27 
 {executed in 1 msec}
2020-11-19 20:14:13.422 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:14:13.427 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 27, 0, 0, 19, 0, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.434 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.435 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:13.439 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.440 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:13.455 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>今天我们来继续讲解 Java 虚拟机中的即时编译。</p> <h2>Profiling</h2> <p>上篇提到，分层编译中的 
0 层、2 层和 3 层都会进行 profiling，收集能够反映程序执行状态的数据。其中，最为基础的便是方法的调用次数以及循环回边的执行次数。它们被用于触发即时编译。</p> <p>此外，0 
层和 3 层还会收集用于 4 层 C2 编译的数据，比如说分支跳转字节码的分支 profile（branch profile），包括跳转次数和不跳转次数，以及非私有实例方法调用指令、强制类型转换 
checkcast 指令、类型测试 instanceof 指令，和引用类型的数组存储 aastore 指令的类型 profile（receiver type profile）。</p> 
<p>分支 profile 和类型 profile 的收集将给应用程序带来不少的性能开销。据统计，正是因为这部分额外的 profiling，使得 3 层 C1 代码的性能比 2 层 
C1 代码的低 30%。</p> <p>在通常情况下，我们不会在解释执行过程中收集分支 profile 以及类型 profile。只有在方法触发 C1 编译后，Java 虚拟机认为该方法有可能被 
C2 编译，方才在该方法的 C1 代码中收集这些 profile。</p> <p>只要在比较极端的情况下，例如等待 C1 编译的方法数目太多时，Java 虚拟机才会开始在解释执行过程中收集这些 
profile。</p><!-- [[[read_end]]] --> <p>那么这些耗费巨大代价收集而来的 profile 具体有什么作用呢？</p> <p>答案是，C2 可以根据收集得到的数据进行猜测，假设接下来的执行同样会按照所收集的 
profile 进行，从而作出比较激进的优化。</p> <h2>基于分支 profile 的优化</h2> <p>举个例子，下面这段代码中包含两个条件判断。第一个条件判断将测试所输入的 
boolean 值。</p> <p>如果为 true，则将局部变量 v 设置为所输入的 int 值。如果为 false，则将所输入的 int 值经过一番运算之后，再存入局部变量 v 
之中。</p> <p>第二个条件判断则测试局部变量 v 是否和所输入的 int 值相等。如果相等，则返回 0。如果不等，则将局部变量 v 经过一番运算之后，再将之返回。显然，当所输入的 
boolean 值为 true 的情况下，这段代码将返回 0。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int foo(boolean f, int in) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int v; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> v = in; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> v = (int) 
Math.sin(in); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (v == in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return (int) Math.cos(v); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译而成的字节码： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int foo(boolean, int); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: ifeq 9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6: goto 16 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: i2d </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: invokestatic java/lang/Math.sin:(D)D </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: d2i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 16: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: if_icmpne 23 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 21: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 22: ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 23: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 24: i2d </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 25: invokestatic java/lang/Math.cos:(D)D </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: d2i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 29: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><img src="https://static001.geekbang.org/resource/image/53/0e/53d57c8c7645d8e2292a08ee97557b0e.png" 
alt=""></p> <p>假设应用程序调用该方法时，所传入的 boolean 值皆为 true。那么，偏移量为 1 以及偏移量为 18 的条件跳转指令所对应的分支 profile 
中，跳转的次数都为 0。</p> <p><img src="https://static001.geekbang.org/resource/image/90/cc/90eb47e4c9b202c45804ef7383a9d6cc.png" 
alt=""></p> <p>C2 可以根据这两个分支 profile 作出假设，在接下来的执行过程中，这两个条件跳转指令仍旧不会发生跳转。基于这个假设，C2 便不再编译这两个条件跳转语句所对应的 
false 分支了。</p> <p>我们暂且不管当假设错误的时候会发生什么，先来看一看剩下来的代码。经过“剪枝”之后，在第二个条件跳转处，v 的值只有可能为所输入的 int 值。因此，该条件跳转可以进一步被优化掉。最终的结果是，在第一个条件跳转之后，C2 
代码将直接返回 0。</p> <p><img src="https://static001.geekbang.org/resource/image/d9/9a/d997a7ea02b7f85136974a54dce7589a.png" 
alt=""></p> <p>这里我打印了 C2 的编译结果。可以看到，在地址为 2cee 的指令处进行过一次比较之后，该机器码便直接返回 0。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Compiled method (c2) 95 16 4 CompilationTest::foo (30 bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
CompilationTest.foo [0x0000000104fb2ce0, 0x0000000104fb2d38] 88 bytes </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Entry Point] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Verified Entry Point] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Constants] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # {method} {0x000000012629e380} ''foo'' 
''(ZI)I'' in ''CompilationTest'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm0: rsi = boolean </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm1: rdx = int </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# [sp+0x30] (sp of caller) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x0000000104fb2ce0: mov DWORD PTR [rsp-0x14000],eax </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2ce7: push rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2ce8: sub rsp,0x20 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2cec: test esi,esi </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2cee: je 0x0000000104fb2cfe // 跳转至? </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf0: xor eax,eax // 将返回值设置为 
0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf2: add rsp,0x20 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf6: pop rbp </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf7: test DWORD PTR [rip+0xfffffffffca32303],eax 
// safepoint </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cfd: 
ret </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>总结一下，根据条件跳转指令的分支 profile，即时编译器可以将从未执行过的分支剪掉，以避免编译这些很有可能不会用到的代码，从而节省编译时间以及部署代码所要消耗的内存空间。此外，“剪枝”将精简程序的数据流，从而触发更多的优化。</p> 
<p>在现实中，分支 profile 出现仅跳转或者仅不跳转的情况并不多见。当然，即时编译器对分支 profile 的利用也不仅限于“剪枝”。它还会根据分支 profile，计算每一条程序执行路径的概率，以便某些编译器优化优先处理概率较高的路径。</p> 
<h2>基于类型 profile 的优化</h2> <p>另外一个例子则是关于 instanceof 以及方法调用的类型 profile。下面这段代码将测试所传入的对象是否为 Exception 
的实例，如果是，则返回它的系统哈希值；如果不是，则返回它的哈希值。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object in) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(in); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return in.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译而成的字节码： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(java.lang.Object); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: instanceof java/lang/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: ifeq 12 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: invokestatic java/lang/System.identityHashCode:(Ljava/lang/Object;)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/lang/Object.hashCode:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: ireturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>假设应用程序调用该方法时，所传入的 Object 皆为 Integer 实例。那么，偏移量为 1 的 instanceof 指令的类型 profile 仅包含 Integer，偏移量为 
4 的分支跳转语句的分支 profile 中不跳转的次数为 0，偏移量为 13 的方法调用指令的类型 profile 仅包含 Integer。</p> <p><img src="https://static001.geekbang.org/resource/image/2c/77/2c13a1af8632a2bbf77338e57c957b77.png" 
alt=""></p> <p>在 Java 虚拟机中，instanceof 测试并不简单。如果 instanceof 的目标类型是 final 类型，那么 Java 虚拟机仅需比较测试对象的动态类型是否为该 
final 类型。</p> <p>在讲解对象的内存分布那一篇中，我曾经提到过，对象头存有该对象的动态类型。因此，获取对象的动态类型仅为单一的内存读指令。</p> <p>如果目标类型不是 
final 类型，比如说我们例子中的 Exception，那么 Java 虚拟机需要从测试对象的动态类型开始，依次测试该类，该类的父类、祖先类，该类所直接实现或者间接实现的接口是否与目标类型一致。</p> 
<p>不过，在我们的例子中，instanceof 指令的类型 profile 仅包含 Integer。根据这个信息，即时编译器可以假设，在接下来的执行过程中，所输入的 Object 
对象仍为 Integer 实例。</p> <p>因此，生成的代码将测试所输入的对象的动态类型是否为 Integer。如果是的话，则继续执行接下来的代码。（该优化源自 Graal，采用 
C2 可能无法复现。）</p> <p>然后，即时编译器会采用和第一个例子中一致的针对分支 profile 的优化，以及对方法调用的条件去虚化内联。</p> <p>我会在接下来的篇章中详细介绍内联，这里先说结果：生成的代码将测试所输入的对象动态类型是否为 
Integer。如果是的话，则执行 Integer.hashCode() 方法的实质内容，也就是返回该 Integer 实例的 value 字段。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public final class Integer ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int hashCode() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return Integer.hashCode(value); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int hashCode(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/ef/b6/ef02474d3474e96c6f55b07493652fb6.png" 
alt=""></p> <p>和第一个例子一样，根据数据流分析，上述代码可以最终优化为极其简单的形式。</p> <p><img src="https://static001.geekbang.org/resource/image/53/be/53e470037dd49d3d27695a5174fc3dbe.png" 
alt=""></p> <p>这里我打印了 Graal 的编译结果。可以看到，在地址为 1ab7 的指令处进行过一次比较之后，该机器码便直接返回所传入的 Integer 对象的 value 
字段。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Compiled method (JVMCI) 600 23 4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
---------------------------------------------------------------------- </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> CompilationTest.hash (CompilationTest.hash(Object)) 
[0x000000011d811aa0, 0x000000011d811b00] 96 bytes </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Entry Point] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Verified Entry Point] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Constants] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> # {method} {0x00000001157053c8} ''hash'' ''(Ljava/lang/Object;)I'' 
in ''CompilationTest'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm0: rsi:rsi = ''java/lang/Object'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> # [sp+0x20] (sp of caller) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811aa0: mov DWORD PTR [rsp-0x14000],eax </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811aa7: sub rsp,0x18 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811aab: mov QWORD PTR [rsp+0x10],rbp 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 比较 [rsi+0x8]，也就是所传入的 Object 参数的动态类型，是否为 
Integer。这里 0xf80022ad 是 Integer 类的内存地址。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ab0: cmp DWORD PTR [rsi+0x8],0xf80022ad </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 如果不是，跳转至？ </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811ab7: jne 0x000000011d811ad3 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 加载 Integer.value。在启用压缩指针时，该字段的偏移量为 
12，也就是 0xc </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811abd: 
mov eax,DWORD PTR [rsi+0xc] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000011d811ac0: mov rbp,QWORD PTR [rsp+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ac5: add rsp,0x18 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ac9: test DWORD PTR [rip+0xfffffffff272f537],eax 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811acf: vzeroupper </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811ad2: ret </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>和基于分支 profile 的优化一样，基于类型 profile 的优化同样也是作出假设，从而精简控制流以及数据流。这两者的核心都是假设。</p> <p>对于分支 
profile，即时编译器假设的是仅执行某一分支；对于类型 profile，即时编译器假设的是对象的动态类型仅为类型 profile 中的那几个。</p> <p>那么，当假设失败的情况下，程序将何去何从？我们继续往下看。</p> 
<h2>去优化</h2> <p>Java 虚拟机给出的解决方案便是去优化，即从执行即时编译生成的机器码切换回解释执行。</p> <p>在生成的机器码中，即时编译器将在假设失败的位置上插入一个陷阱（trap）。该陷阱实际上是一条 
call 指令，调用至 Java 虚拟机里专门负责去优化的方法。与普通的 call 指令不一样的是，去优化方法将更改栈上的返回地址，并不再返回即时编译器生成的机器码中。</p> <p>在上面的程序控制流图中，我画了很多红色方框的问号。这些问号便代表着一个个的陷阱。一旦踏入这些陷阱，便将发生去优化，并切换至解释执行。</p> 
<p>去优化的过程相当复杂。由于即时编译器采用了许多优化方式，其生成的代码和原本的字节码的差异非常之大。</p> <p>在去优化的过程中，需要将当前机器码的执行状态转换至某一字节码之前的执行状态，并从该字节码开始执行。这便要求即时编译器在编译过程中记录好这两种执行状态的映射。</p> 
<p>举例来说，经过逃逸分析之后，机器码可能并没有实际分配对象，而是在各个寄存器中存储该对象的各个字段（标量替换，具体我会在之后的篇章中进行介绍）。在去优化过程中，Java 虚拟机需要还原出这个对象，以便解释执行时能够使用该对象。</p> 
<p>当根据映射关系创建好对应的解释执行栈桢后，Java 虚拟机便会采用 OSR 技术，动态替换栈上的内容，并在目标字节码处开始解释执行。</p> <p>此外，在调用 Java 虚拟机的去优化方法时，即时编译器生成的机器码可以根据产生去优化的原因来决定是否保留这一份机器码，以及何时重新编译对应的 
Java 方法。</p> <p>如果去优化的原因与优化无关，即使重新编译也不会改变生成的机器码，那么生成的机器码可以在调用去优化方法时传入 Action_None，表示保留这一份机器码，在下一次调用该方法时重新进入这一份机器码。</p> 
<p>如果去优化的原因与静态分析的结果有关，例如类层次分析，那么生成的机器码可以在调用去优化方法时传入 Action_Recompile，表示不保留这一份机器码，但是可以不经过重新 
profile，直接重新编译。</p> <p>如果去优化的原因与基于 profile 的激进优化有关，那么生成的机器码需要在调用去优化方法时传入 Action_Reinterpret，表示不保留这一份机器码，而且需要重新收集程序的 
profile。</p> <p>这是因为基于 profile 的优化失败的时候，往往代表这程序的执行状态发生改变，因此需要更正已收集的 profile，以更好地反映新的程序执行状态。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机的 profiling 以及基于所收集的数据的优化和去优化。</p> <p>通常情况下，解释执行过程中仅收集方法的调用次数以及循环回边的执行次数。</p> 
<p>当方法被 3 层 C1 所编译时，生成的 C1 代码将收集条件跳转指令的分支 profile，以及类型相关指令的类型 profile。在部分极端情况下，Java 虚拟机也会在解释执行过程中收集这些 
profile。</p> <p>基于分支 profile 的优化以及基于类型 profile 的优化都将对程序今后的执行作出假设。这些假设将精简所要编译的代码的控制流以及数据流。在假设失败的情况下，Java 
虚拟机将采取去优化，退回至解释执行并重新收集相关的 profile。</p> <p>今天的实践环节，你可以使用参数</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
-XX:CompileCommand=''print,*ClassName.methodName'' </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>来打印程序运行过程中即时编译器生成的机器码。官方的 
JDK 可能不包含反汇编器动态链接库，如 hsdis-amd64.dylib。你可能需要另外下载。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// java -XX:CompileCommand=''print,CompilationTest.foo'' CompilationTestjava -XX:CompileCommand=''print,CompilationTest.foo'' 
CompilationTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class CompilationTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(boolean f, int in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int v; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
v = in; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> v = (int) Math.sin(in); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (v == in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return (int) Math.cos(v); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> foo(true, 2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -XX:CompileCommand=''print,CompilationTest2.hash'' CompilationTest2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class CompilationTest2 { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object input) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (input instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(input); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return input.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> hash(i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 5 msec}
2020-11-19 20:14:13.468 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.470 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:13.486 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>今天我们来继续讲解 Java 虚拟机中的即时编译。</p> <h2>Profiling</h2> <p>上篇提到，分层编译中的 0 层、2 
层和 3 层都会进行 profiling，收集能够反映程序执行状态的数据。其中，最为基础的便是方法的调用次数以及循环回边的执行次数。它们被用于触发即时编译。</p> <p>此外，0 
层和 3 层还会收集用于 4 层 C2 编译的数据，比如说分支跳转字节码的分支 profile（branch profile），包括跳转次数和不跳转次数，以及非私有实例方法调用指令、强制类型转换 
checkcast 指令、类型测试 instanceof 指令，和引用类型的数组存储 aastore 指令的类型 profile（receiver type profile）。</p> 
<p>分支 profile 和类型 profile 的收集将给应用程序带来不少的性能开销。据统计，正是因为这部分额外的 profiling，使得 3 层 C1 代码的性能比 2 层 
C1 代码的低 30%。</p> <p>在通常情况下，我们不会在解释执行过程中收集分支 profile 以及类型 profile。只有在方法触发 C1 编译后，Java 虚拟机认为该方法有可能被 
C2 编译，方才在该方法的 C1 代码中收集这些 profile。</p> <p>只要在比较极端的情况下，例如等待 C1 编译的方法数目太多时，Java 虚拟机才会开始在解释执行过程中收集这些 
profile。</p><!-- [[[read_end]]] --> <p>那么这些耗费巨大代价收集而来的 profile 具体有什么作用呢？</p> <p>答案是，C2 可以根据收集得到的数据进行猜测，假设接下来的执行同样会按照所收集的 
profile 进行，从而作出比较激进的优化。</p> <h2>基于分支 profile 的优化</h2> <p>举个例子，下面这段代码中包含两个条件判断。第一个条件判断将测试所输入的 
boolean 值。</p> <p>如果为 true，则将局部变量 v 设置为所输入的 int 值。如果为 false，则将所输入的 int 值经过一番运算之后，再存入局部变量 v 
之中。</p> <p>第二个条件判断则测试局部变量 v 是否和所输入的 int 值相等。如果相等，则返回 0。如果不等，则将局部变量 v 经过一番运算之后，再将之返回。显然，当所输入的 
boolean 值为 true 的情况下，这段代码将返回 0。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int foo(boolean f, int in) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int v; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> v = in; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> v = (int) 
Math.sin(in); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (v == in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return (int) Math.cos(v); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译而成的字节码： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int foo(boolean, int); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: ifeq 9 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 6: goto 16 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: i2d </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: invokestatic java/lang/Math.sin:(D)D </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: d2i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 16: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: if_icmpne 23 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 21: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 22: ireturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 23: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 24: i2d </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 25: invokestatic java/lang/Math.cos:(D)D </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: d2i </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 29: ireturn </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><img src="https://static001.geekbang.org/resource/image/53/0e/53d57c8c7645d8e2292a08ee97557b0e.png" 
alt=""></p> <p>假设应用程序调用该方法时，所传入的 boolean 值皆为 true。那么，偏移量为 1 以及偏移量为 18 的条件跳转指令所对应的分支 profile 
中，跳转的次数都为 0。</p> <p><img src="https://static001.geekbang.org/resource/image/90/cc/90eb47e4c9b202c45804ef7383a9d6cc.png" 
alt=""></p> <p>C2 可以根据这两个分支 profile 作出假设，在接下来的执行过程中，这两个条件跳转指令仍旧不会发生跳转。基于这个假设，C2 便不再编译这两个条件跳转语句所对应的 
false 分支了。</p> <p>我们暂且不管当假设错误的时候会发生什么，先来看一看剩下来的代码。经过“剪枝”之后，在第二个条件跳转处，v 的值只有可能为所输入的 int 值。因此，该条件跳转可以进一步被优化掉。最终的结果是，在第一个条件跳转之后，C2 
代码将直接返回 0。</p> <p><img src="https://static001.geekbang.org/resource/image/d9/9a/d997a7ea02b7f85136974a54dce7589a.png" 
alt=""></p> <p>这里我打印了 C2 的编译结果。可以看到，在地址为 2cee 的指令处进行过一次比较之后，该机器码便直接返回 0。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Compiled method (c2) 95 16 4 CompilationTest::foo (30 bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
CompilationTest.foo [0x0000000104fb2ce0, 0x0000000104fb2d38] 88 bytes </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Entry Point] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Verified Entry Point] </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> [Constants] </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> # {method} {0x000000012629e380} ''foo'' 
''(ZI)I'' in ''CompilationTest'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm0: rsi = boolean </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm1: rdx = int </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# [sp+0x30] (sp of caller) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x0000000104fb2ce0: mov DWORD PTR [rsp-0x14000],eax </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2ce7: push rbp </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2ce8: sub rsp,0x20 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2cec: test esi,esi </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x0000000104fb2cee: je 0x0000000104fb2cfe // 跳转至? </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf0: xor eax,eax // 将返回值设置为 
0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf2: add rsp,0x20 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf6: pop rbp </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cf7: test DWORD PTR [rip+0xfffffffffca32303],eax 
// safepoint </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x0000000104fb2cfd: 
ret </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ... 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>总结一下，根据条件跳转指令的分支 profile，即时编译器可以将从未执行过的分支剪掉，以避免编译这些很有可能不会用到的代码，从而节省编译时间以及部署代码所要消耗的内存空间。此外，“剪枝”将精简程序的数据流，从而触发更多的优化。</p> 
<p>在现实中，分支 profile 出现仅跳转或者仅不跳转的情况并不多见。当然，即时编译器对分支 profile 的利用也不仅限于“剪枝”。它还会根据分支 profile，计算每一条程序执行路径的概率，以便某些编译器优化优先处理概率较高的路径。</p> 
<h2>基于类型 profile 的优化</h2> <p>另外一个例子则是关于 instanceof 以及方法调用的类型 profile。下面这段代码将测试所传入的对象是否为 Exception 
的实例，如果是，则返回它的系统哈希值；如果不是，则返回它的哈希值。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object in) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (in instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(in); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return in.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 编译而成的字节码： </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(java.lang.Object); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: instanceof java/lang/Exception </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: ifeq 12 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: invokestatic java/lang/System.identityHashCode:(Ljava/lang/Object;)I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: ireturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 12: aload_0 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/lang/Object.hashCode:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: ireturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>假设应用程序调用该方法时，所传入的 Object 皆为 Integer 实例。那么，偏移量为 1 的 instanceof 指令的类型 profile 仅包含 Integer，偏移量为 
4 的分支跳转语句的分支 profile 中不跳转的次数为 0，偏移量为 13 的方法调用指令的类型 profile 仅包含 Integer。</p> <p><img src="https://static001.geekbang.org/resource/image/2c/77/2c13a1af8632a2bbf77338e57c957b77.png" 
alt=""></p> <p>在 Java 虚拟机中，instanceof 测试并不简单。如果 instanceof 的目标类型是 final 类型，那么 Java 虚拟机仅需比较测试对象的动态类型是否为该 
final 类型。</p> <p>在讲解对象的内存分布那一篇中，我曾经提到过，对象头存有该对象的动态类型。因此，获取对象的动态类型仅为单一的内存读指令。</p> <p>如果目标类型不是 
final 类型，比如说我们例子中的 Exception，那么 Java 虚拟机需要从测试对象的动态类型开始，依次测试该类，该类的父类、祖先类，该类所直接实现或者间接实现的接口是否与目标类型一致。</p> 
<p>不过，在我们的例子中，instanceof 指令的类型 profile 仅包含 Integer。根据这个信息，即时编译器可以假设，在接下来的执行过程中，所输入的 Object 
对象仍为 Integer 实例。</p> <p>因此，生成的代码将测试所输入的对象的动态类型是否为 Integer。如果是的话，则继续执行接下来的代码。（该优化源自 Graal，采用 
C2 可能无法复现。）</p> <p>然后，即时编译器会采用和第一个例子中一致的针对分支 profile 的优化，以及对方法调用的条件去虚化内联。</p> <p>我会在接下来的篇章中详细介绍内联，这里先说结果：生成的代码将测试所输入的对象动态类型是否为 
Integer。如果是的话，则执行 Integer.hashCode() 方法的实质内容，也就是返回该 Integer 实例的 value 字段。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public final class Integer ... { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public int hashCode() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return Integer.hashCode(value); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int hashCode(int value) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return value; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p><img src="https://static001.geekbang.org/resource/image/ef/b6/ef02474d3474e96c6f55b07493652fb6.png" 
alt=""></p> <p>和第一个例子一样，根据数据流分析，上述代码可以最终优化为极其简单的形式。</p> <p><img src="https://static001.geekbang.org/resource/image/53/be/53e470037dd49d3d27695a5174fc3dbe.png" 
alt=""></p> <p>这里我打印了 Graal 的编译结果。可以看到，在地址为 1ab7 的指令处进行过一次比较之后，该机器码便直接返回所传入的 Integer 对象的 value 
字段。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Compiled method (JVMCI) 600 23 4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
---------------------------------------------------------------------- </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> CompilationTest.hash (CompilationTest.hash(Object)) 
[0x000000011d811aa0, 0x000000011d811b00] 96 bytes </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Entry Point] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Verified Entry Point] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> [Constants] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> # {method} {0x00000001157053c8} ''hash'' ''(Ljava/lang/Object;)I'' 
in ''CompilationTest'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
# parm0: rsi:rsi = ''java/lang/Object'' </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> # [sp+0x20] (sp of caller) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811aa0: mov DWORD PTR [rsp-0x14000],eax </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811aa7: sub rsp,0x18 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811aab: mov QWORD PTR [rsp+0x10],rbp 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 比较 [rsi+0x8]，也就是所传入的 Object 参数的动态类型，是否为 
Integer。这里 0xf80022ad 是 Integer 类的内存地址。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ab0: cmp DWORD PTR [rsi+0x8],0xf80022ad </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 如果不是，跳转至？ </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811ab7: jne 0x000000011d811ad3 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 加载 Integer.value。在启用压缩指针时，该字段的偏移量为 
12，也就是 0xc </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811abd: 
mov eax,DWORD PTR [rsi+0xc] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0x000000011d811ac0: mov rbp,QWORD PTR [rsp+0x10] </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ac5: add rsp,0x18 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0x000000011d811ac9: test DWORD PTR [rip+0xfffffffff272f537],eax 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811acf: vzeroupper </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 0x000000011d811ad2: ret </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>和基于分支 profile 的优化一样，基于类型 profile 的优化同样也是作出假设，从而精简控制流以及数据流。这两者的核心都是假设。</p> <p>对于分支 
profile，即时编译器假设的是仅执行某一分支；对于类型 profile，即时编译器假设的是对象的动态类型仅为类型 profile 中的那几个。</p> <p>那么，当假设失败的情况下，程序将何去何从？我们继续往下看。</p> 
<h2>去优化</h2> <p>Java 虚拟机给出的解决方案便是去优化，即从执行即时编译生成的机器码切换回解释执行。</p> <p>在生成的机器码中，即时编译器将在假设失败的位置上插入一个陷阱（trap）。该陷阱实际上是一条 
call 指令，调用至 Java 虚拟机里专门负责去优化的方法。与普通的 call 指令不一样的是，去优化方法将更改栈上的返回地址，并不再返回即时编译器生成的机器码中。</p> <p>在上面的程序控制流图中，我画了很多红色方框的问号。这些问号便代表着一个个的陷阱。一旦踏入这些陷阱，便将发生去优化，并切换至解释执行。</p> 
<p>去优化的过程相当复杂。由于即时编译器采用了许多优化方式，其生成的代码和原本的字节码的差异非常之大。</p> <p>在去优化的过程中，需要将当前机器码的执行状态转换至某一字节码之前的执行状态，并从该字节码开始执行。这便要求即时编译器在编译过程中记录好这两种执行状态的映射。</p> 
<p>举例来说，经过逃逸分析之后，机器码可能并没有实际分配对象，而是在各个寄存器中存储该对象的各个字段（标量替换，具体我会在之后的篇章中进行介绍）。在去优化过程中，Java 虚拟机需要还原出这个对象，以便解释执行时能够使用该对象。</p> 
<p>当根据映射关系创建好对应的解释执行栈桢后，Java 虚拟机便会采用 OSR 技术，动态替换栈上的内容，并在目标字节码处开始解释执行。</p> <p>此外，在调用 Java 虚拟机的去优化方法时，即时编译器生成的机器码可以根据产生去优化的原因来决定是否保留这一份机器码，以及何时重新编译对应的 
Java 方法。</p> <p>如果去优化的原因与优化无关，即使重新编译也不会改变生成的机器码，那么生成的机器码可以在调用去优化方法时传入 Action_None，表示保留这一份机器码，在下一次调用该方法时重新进入这一份机器码。</p> 
<p>如果去优化的原因与静态分析的结果有关，例如类层次分析，那么生成的机器码可以在调用去优化方法时传入 Action_Recompile，表示不保留这一份机器码，但是可以不经过重新 
profile，直接重新编译。</p> <p>如果去优化的原因与基于 profile 的激进优化有关，那么生成的机器码需要在调用去优化方法时传入 Action_Reinterpret，表示不保留这一份机器码，而且需要重新收集程序的 
profile。</p> <p>这是因为基于 profile 的优化失败的时候，往往代表这程序的执行状态发生改变，因此需要更正已收集的 profile，以更好地反映新的程序执行状态。</p> 
<h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机的 profiling 以及基于所收集的数据的优化和去优化。</p> <p>通常情况下，解释执行过程中仅收集方法的调用次数以及循环回边的执行次数。</p> 
<p>当方法被 3 层 C1 所编译时，生成的 C1 代码将收集条件跳转指令的分支 profile，以及类型相关指令的类型 profile。在部分极端情况下，Java 虚拟机也会在解释执行过程中收集这些 
profile。</p> <p>基于分支 profile 的优化以及基于类型 profile 的优化都将对程序今后的执行作出假设。这些假设将精简所要编译的代码的控制流以及数据流。在假设失败的情况下，Java 
虚拟机将采取去优化，退回至解释执行并重新收集相关的 profile。</p> <p>今天的实践环节，你可以使用参数</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
-XX:CompileCommand=''print,*ClassName.methodName'' </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>来打印程序运行过程中即时编译器生成的机器码。官方的 
JDK 可能不包含反汇编器动态链接库，如 hsdis-amd64.dylib。你可能需要另外下载。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// java -XX:CompileCommand=''print,CompilationTest.foo'' CompilationTestjava -XX:CompileCommand=''print,CompilationTest.foo'' 
CompilationTest </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class CompilationTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static int foo(boolean f, int in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int v; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> if (f) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
v = in; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } else 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> v = (int) Math.sin(in); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (v == in) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return (int) Math.cos(v); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> foo(true, 2); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // java -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler -XX:CompileCommand=''print,CompilationTest2.hash'' CompilationTest2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class CompilationTest2 { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static int hash(Object input) { 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> if (input instanceof Exception) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return System.identityHashCode(input); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } else { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return input.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="33"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void main(String[] args) 
throws InterruptedException { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="35"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int i = 0; i &lt; 500000; i++) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> hash(i); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="38"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Thread.sleep(2000); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="39"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p><img 
src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 6 msec}
2020-11-19 20:14:13.496 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=27 
 {executed in 2 msec}
2020-11-19 20:14:13.498 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:14:13.503 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=27 
 {executed in 1 msec}
2020-11-19 20:14:13.505 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:14:13.511 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788053, 1605788053, 1, 'zh-hans', 0, 1, 1, 
0, '17丨即时编译（下）', 1, 27, 27) 
 {executed in 0 msec}
2020-11-19 20:14:13.517 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=27 
 {executed in 1 msec}
2020-11-19 20:14:13.519 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:14:13.526 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788053, 1605788053, 1, 'zh-hans', 0, 
1, 1, 0, '17丨即时编译（下）', 'book', 1, 27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.538 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.539 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:13.543 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.545 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:13.551 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/0355403b46d1c1fda637d4f8094c595a?bkt=en-1df98aeb722e81f59217b4915205a01120967a11f33792be173f7009836a77dd46e5f1318cfde050&fid=3757516097-778750-647811172566536&time=1605788051&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-GZ1vtZnseQvv5MTd2vHKCtrwZ%2FI%3D&to=92&size=5172733&sta_dx=5172733&sta_cs=4359&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182967&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5172733&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-2f3b7047fa4ef78f56c8653a650c305012028a83cd386fe3ada5ffac1ca8badff7450c20a8f3382f&sl=76480590&expires=8h&rt=pr&r=244404118&mlogid=7510837900069310707&vbdid=64799653&fin=17%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510837900069310707&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=1fcc15f39be93977ac68f640bb9f6ead0cae777502b570ec&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=17%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.557 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.559 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:13.565 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/0355403b46d1c1fda637d4f8094c595a?bkt=en-1df98aeb722e81f59217b4915205a01120967a11f33792be173f7009836a77dd46e5f1318cfde050&fid=3757516097-778750-647811172566536&time=1605788051&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-GZ1vtZnseQvv5MTd2vHKCtrwZ%2FI%3D&to=92&size=5172733&sta_dx=5172733&sta_cs=4359&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182967&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5172733&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-2f3b7047fa4ef78f56c8653a650c305012028a83cd386fe3ada5ffac1ca8badff7450c20a8f3382f&sl=76480590&expires=8h&rt=pr&r=244404118&mlogid=7510837900069310707&vbdid=64799653&fin=17%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8B%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510837900069310707&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=1fcc15f39be93977ac68f640bb9f6ead0cae777502b570ec&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=17%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8B%EF%BC%89.mp3', 
27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.571 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.573 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:13.577 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.578 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:13.588 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这节是即时编译器的有关优化、去优化、以及何时优化和为什么去优化的内容。可能比较底层，看不见摸不着，一句两句也说不清楚，所以，有点晦涩。 
<br>不过经过反复看有点感觉了，小结如下： <br>1:profile-是收集运行时状态信息，用于编译器优化，当然，收集信息也是耗性能的，所以，也是有前提条件的，当存在优化的可能性时才去费劲吧啦的收集相关信息 
<br> <br>2:本节介绍的两种优化的方式思路，都是采用取巧少做事情的方式实现，是建立在假设有些事情不需要做的前提下采用的优化措施 <br> <br>3:如果假设失败，那就去优化呗！还用原来的方式老老实实的解释执行就完了 
<br> <br>上述思路是理解了，不过具体实现还是蒙蒙的，应该是水平有限理解不到位吧！整体还是有收获的，所以，非常感谢！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
我觉得总结得很到位了。<br><br>这篇文章主要就是在介绍profile-guided optimization。介绍了两个优化的案例，以及过于乐观的优化出错时怎么补救。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/03/80/1d5a150f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>徐志毅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪老师，请问有什么方式可以跟踪JMM里主内存与工作内存的交互，如什么时候加载到工作内存、什么时候同步到主内存～ 
盼回复，谢谢 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: JMM的工作内存是个虚拟概念，映射到我们的体系架构就是CPU缓存。<br><br>要追踪缓存更新事件的话，估计得看perf，VTune等支持CPU 
performance counter的工具啦</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a1/36/7b839d96.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jimi</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 那么有什么规则，可以让代码尽可能被优化？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>xiaobang</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想问下生成的机器码如何和其它未编译的字节码交互？比如相互调用，访问对象内的字段，new对象和对应的gc 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在同一方法内，所有的字节码都被编译了。机器码与字节码的切换在方法调用(或者循环回边，对应OSR编译)。<br><br>对于已经在堆上的对象，字节码和机器码所使用对象布局是一致的，解释执行器从哪个偏移量访问某字段，机器码也会从这个偏移量访问字段。(对于标量替换的新建对象，机器码会在去优化时重建对象。)<br><br>JVM里的Runtime是共享的，因此像new对象，实际上都会走到同一个底层方法中。GC是独立的组件，跟字节码机器码没关系，所有new对象都会被JVM 
runtime追踪。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/42/11/f26d89fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>乔毅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教下老师，JIT利用SIMD进行优化的实现程度？实践中看到大多是仅仅做了循环展开。换言之，有没有什么最佳实践，可以写出JIT 
SIMD优化友好的代码。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 马上会专门开一篇介绍。可以关注一下OpenJDK的Panama项目，会提供vector 
API</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>茶底</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 大佬我已经把graal拿到手了。目前用了下gu下语言挺好使的。但是这个怎么编译啊。。。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Java 10自带Graal编译器。Oracle 
OTN下的GraalVM也是编译好的版本，无需另外编译。<br><br>如果想要改Graal源代码后编译，可以参考github.com/oracle/graal/tree/master/compiler/README.md</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉好难，我想问下在现实情况下通过编译器调优的情况多吗？ </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 调优的情况不多的，能做的即时编译器都帮你做了</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 3 msec}
2020-11-19 20:14:13.598 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.600 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:13.610 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-02 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 这节是即时编译器的有关优化、去优化、以及何时优化和为什么去优化的内容。可能比较底层，看不见摸不着，一句两句也说不清楚，所以，有点晦涩。 
<br>不过经过反复看有点感觉了，小结如下： <br>1:profile-是收集运行时状态信息，用于编译器优化，当然，收集信息也是耗性能的，所以，也是有前提条件的，当存在优化的可能性时才去费劲吧啦的收集相关信息 
<br> <br>2:本节介绍的两种优化的方式思路，都是采用取巧少做事情的方式实现，是建立在假设有些事情不需要做的前提下采用的优化措施 <br> <br>3:如果假设失败，那就去优化呗！还用原来的方式老老实实的解释执行就完了 
<br> <br>上述思路是理解了，不过具体实现还是蒙蒙的，应该是水平有限理解不到位吧！整体还是有收获的，所以，非常感谢！ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
我觉得总结得很到位了。<br><br>这篇文章主要就是在介绍profile-guided optimization。介绍了两个优化的案例，以及过于乐观的优化出错时怎么补救。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/03/80/1d5a150f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>徐志毅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪老师，请问有什么方式可以跟踪JMM里主内存与工作内存的交互，如什么时候加载到工作内存、什么时候同步到主内存～ 
盼回复，谢谢 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: JMM的工作内存是个虚拟概念，映射到我们的体系架构就是CPU缓存。<br><br>要追踪缓存更新事件的话，估计得看perf，VTune等支持CPU 
performance counter的工具啦</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a1/36/7b839d96.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>jimi</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-29 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 那么有什么规则，可以让代码尽可能被优化？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>xiaobang</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 想问下生成的机器码如何和其它未编译的字节码交互？比如相互调用，访问对象内的字段，new对象和对应的gc 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 在同一方法内，所有的字节码都被编译了。机器码与字节码的切换在方法调用(或者循环回边，对应OSR编译)。<br><br>对于已经在堆上的对象，字节码和机器码所使用对象布局是一致的，解释执行器从哪个偏移量访问某字段，机器码也会从这个偏移量访问字段。(对于标量替换的新建对象，机器码会在去优化时重建对象。)<br><br>JVM里的Runtime是共享的，因此像new对象，实际上都会走到同一个底层方法中。GC是独立的组件，跟字节码机器码没关系，所有new对象都会被JVM 
runtime追踪。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/42/11/f26d89fd.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>乔毅</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教下老师，JIT利用SIMD进行优化的实现程度？实践中看到大多是仅仅做了循环展开。换言之，有没有什么最佳实践，可以写出JIT 
SIMD优化友好的代码。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 马上会专门开一篇介绍。可以关注一下OpenJDK的Panama项目，会提供vector 
API</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>茶底</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 大佬我已经把graal拿到手了。目前用了下gu下语言挺好使的。但是这个怎么编译啊。。。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: Java 10自带Graal编译器。Oracle 
OTN下的GraalVM也是编译好的版本，无需另外编译。<br><br>如果想要改Graal源代码后编译，可以参考github.com/oracle/graal/tree/master/compiler/README.md</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 感觉好难，我想问下在现实情况下通过编译器调优的情况多吗？ </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 调优的情况不多的，能做的即时编译器都帮你做了</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 5 msec}
2020-11-19 20:14:13.617 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.619 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:13.622 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.624 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:13.630 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 27, 'https://static001.geekbang.org/resource/image/2c/5e/2c716b1c57ccf6fcdc00e39620c1fc5e.jpg', 
27) 
 {executed in 1 msec}
2020-11-19 20:14:13.637 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=27 
 {executed in 2 msec}
2020-11-19 20:14:13.639 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:13.644 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 27, 'https://static001.geekbang.org/resource/image/2c/5e/2c716b1c57ccf6fcdc00e39620c1fc5e.jpg', 
27) 
 {executed in 0 msec}
2020-11-19 20:14:13.651 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.653 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:14:13.659 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.666 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 20:14:13.668 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:14:13.674 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 27, 27) 
 {executed in 1 msec}
2020-11-19 20:14:13.681 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497848284402527' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:14:13.683 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:43.717 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497848284402527' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:14:43.722 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:43.729 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('497848284402527', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:14:43.732 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('497848284402527', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:14:43.734 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|57            |
|--------------|

2020-11-19 20:14:43.760 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497848284402527' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:14:43.762 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:44.201 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='497848284402527' 
and bookchecke0_.name='media' 
 {executed in 2 msec}
2020-11-19 20:14:44.204 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:14:44.207 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('497848284402527', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:14:44.208 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('497848284402527', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:14:44.209 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|58            |
|--------------|

2020-11-19 20:14:44.222 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='497848284402527' 
 {executed in 1 msec}
2020-11-19 20:14:44.223 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:44.227 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788084, 1) 
 {executed in 1 msec}
2020-11-19 20:14:44.229 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788084, 1) 
 {executed in 1 msec}
2020-11-19 20:14:44.230 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|28            |
|--------------|

2020-11-19 20:14:44.239 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'dacbb1c6-0f72-4bc2-860b-27abdd5a2166', 
28) 
 {executed in 1 msec}
2020-11-19 20:14:44.240 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'dacbb1c6-0f72-4bc2-860b-27abdd5a2166', 28) 
 {executed in 0 msec}
2020-11-19 20:14:44.241 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|28            |
|--------------|

2020-11-19 20:14:44.253 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=28, revision_default=1, revision_timestamp=1605788084, 
revision_uid=1 where vid=28 
 {executed in 1 msec}
2020-11-19 20:14:44.260 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.262 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:44.267 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '497848284402527', 'zh-hans', 28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.273 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.275 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:14:44.280 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '497848284402527', 'zh-hans', 28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.286 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=28 
 {executed in 1 msec}
2020-11-19 20:14:44.288 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:14:44.291 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=28 
 {executed in 0 msec}
2020-11-19 20:14:44.293 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:14:44.299 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 28, 0, 0, 19, 0, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.304 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.306 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:44.309 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.311 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:44.321 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在专栏的第一篇中，我曾经简单地介绍过即时编译。这是一项用来提升应用程序运行效率的技术。通常而言，代码会先被 Java 
虚拟机解释执行，之后反复执行的热点代码则会被即时编译成为机器码，直接运行在底层硬件之上。</p> <p>今天我们便来详细剖析一下 Java 虚拟机中的即时编译。</p> <h2>分层编译模式</h2> 
<p>HotSpot 虚拟机包含多个即时编译器 C1、C2 和 Graal。</p> <p>其中，Graal 是一个实验性质的即时编译器，可以通过参数 -XX:+UnlockExperimentalVMOptions 
-XX:+UseJVMCICompiler 启用，并且替换 C2。</p> <p>在 Java 7 以前，我们需要根据程序的特性选择对应的即时编译器。对于执行时间较短的，或者对启动性能有要求的程序，我们采用编译效率较快的 
C1，对应参数 -client。</p> <p>对于执行时间较长的，或者对峰值性能有要求的程序，我们采用生成代码执行效率较快的 C2，对应参数 -server。</p> <p>Java 
7 引入了分层编译（对应参数 -XX:+TieredCompilation）的概念，综合了 C1 的启动性能优势和 C2 的峰值性能优势。</p> <p>分层编译将 Java 虚拟机的执行状态分为了五个层次。为了方便阐述，我用“C1 
代码”来指代由 C1 生成的机器码，“C2 代码”来指代由 C2 生成的机器码。五个层级分别是：</p><!-- [[[read_end]]] --> <ol start="0"> 
<li>解释执行；</li> <li>执行不带 profiling 的 C1 代码；</li> <li>执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码；</li> 
<li>执行带所有 profiling 的 C1 代码；</li> <li>执行 C2 代码。</li> </ol> <p>通常情况下，C2 代码的执行效率要比 C1 代码的高出 30% 
以上。然而，对于 C1 代码的三种状态，按执行效率从高至低则是 1 层 &gt; 2 层 &gt; 3 层。</p> <p>其中 1 层的性能比 2 层的稍微高一些，而 2 层的性能又比 
3 层高出 30%。这是因为 profiling 越多，其额外的性能开销越大。</p> <p>这里解释一下，profiling 是指在程序执行过程中，收集能够反映程序执行状态的数据。这里所收集的数据我们称之为程序的 
profile。</p> <p>你可能已经接触过许许多多的 profiler，例如 JDK 附带的 hprof。这些 profiler 大多通过注入（instrumentation）或者 
JVMTI 事件来实现的。Java 虚拟机也内置了 profiling。我会在下一篇中具体介绍 Java 虚拟机的 profiling 都在做些什么。</p> <p>在 5 个层次的执行状态中，1 
层和 4 层为终止状态。当一个方法被终止状态编译过后，如果编译后的代码并没有失效，那么 Java 虚拟机是不会再次发出该方法的编译请求的。</p> <p><img src="https://static001.geekbang.org/resource/image/c5/e5/c503010c157b7db7596893633b624fe5.png" 
alt=""><br> 不同的编译路径，图片来源于我之前一篇<a href="https://zhengyudi.github.io/2018/03/20/graal-intro/">介绍 
Graal 的博客</a>。</p> <p>这里我列举了 4 个不同的编译路径（<a href="http://cr.openjdk.java.net/~iveresov/tiered/Tiered.pdf">Igor 
的演讲</a>列举了更多的编译路径）。通常情况下，热点方法会被 3 层的 C1 编译，然后再被 4 层的 C2 编译。</p> <p>如果方法的字节码数目比较少（如 getter/setter），而且 
3 层的 profiling 没有可收集的数据。</p> <p>那么，Java 虚拟机断定该方法对于 C1 代码和 C2 代码的执行效率相同。在这种情况下，Java 虚拟机会在 3 
层编译之后，直接选择用 1 层的 C1 编译。由于这是一个终止状态，因此 Java 虚拟机不会继续用 4 层的 C2 编译。</p> <p>在 C1 忙碌的情况下，Java 虚拟机在解释执行过程中对程序进行 
profiling，而后直接由 4 层的 C2 编译。在 C2 忙碌的情况下，方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。</p> 
<p>Java 8 默认开启了分层编译。不管是开启还是关闭分层编译，原本用来选择即时编译器的参数 -client 和 -server 都是无效的。当关闭分层编译的情况下，Java 虚拟机将直接采用 
C2。</p> <p>如果你希望只是用 C1，那么你可以在打开分层编译的情况下使用参数 -XX:TieredStopAtLevel=1。在这种情况下，Java 虚拟机会在解释执行之后直接由 
1 层的 C1 进行编译。</p> <h2>即时编译的触发</h2> <p>Java 虚拟机是根据方法的调用次数以及循环回边的执行次数来触发即时编译的。前面提到，Java 虚拟机在 
0 层、2 层和 3 层执行状态时进行 profiling，其中就包含方法的调用次数和循环回边的执行次数。</p> <p>这里的循环回边是一个控制流图中的概念。在字节码中，我们可以简单理解为往回跳转的指令。（注意，这并不一定符合循环回边的定义。）</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void foo(Object obj) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 200; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举例来说，上面这段代码将被编译为下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 7 的字节码中。在解释执行时，每当运行一次该指令，Java 
虚拟机便会将该方法的循环回边计数器加 1。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void foo(java.lang.Object); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: istore_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 2: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: goto 14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 7: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
8: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: iadd 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: istore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: iinc 2, 1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: iload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: sipush 200 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 18: if_icmplt 7 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 21: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>在即时编译过程中，我们会识别循环的头部和尾部。在上面这段字节码中，循环的头部是偏移量为 14 的字节码，尾部为偏移量为 11 的字节码。</p> <p>循环尾部到循环头部的控制流边就是真正意义上的循环回边。也就是说，C1 
将在这个位置插入增加循环回边计数器的代码。</p> <p>解释执行和 C1 代码中增加循环回边计数器的位置并不相同，但这并不会对程序造成影响。</p> <p>实际上，Java 虚拟机并不会对这些计数器进行同步操作，因此收集而来的执行次数也并非精确值。不管如何，即时编译的触发并不需要非常精确的数值。只要该数值足够大，就能说明对应的方法包含热点代码。</p> 
<p>具体来说，在不启用分层编译的情况下，当方法的调用次数和循环回边的次数的和，超过由参数 -XX:CompileThreshold 指定的阈值时（使用 C1 时，该值为 1500；使用 
C2 时，该值为 10000），便会触发即时编译。</p> <p>当启用分层编译时，Java 虚拟机将不再采用由参数 -XX:CompileThreshold 指定的阈值（该参数失效），而是使用另一套阈值系统。在这套系统中，阈值的大小是动态调整的。</p> 
<p>所谓的动态调整其实并不复杂：在比较阈值时，Java 虚拟机会将阈值与某个系数 s 相乘。该系数与当前待编译的方法数目成正相关，与编译线程的数目成负相关。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
系数的计算方法为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> s = queue_size_X 
/ (TierXLoadFeedback * compiler_count_X) + 1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
其中 X 是执行层次，可取 3 或者 4； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
queue_size_X 是执行层次为 X 的待编译方法的数目； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
TierXLoadFeedback 是预设好的参数，其中 Tier3LoadFeedback 为 5，Tier4LoadFeedback 为 3； </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> compiler_count_X 是层次 X 的编译线程数目。 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在 64 位 Java 虚拟机中，默认情况下编译线程的总数目是根据处理器数量来调整的（对应参数 -XX:+CICompilerCountPerCPU，默认为 
true；当通过参数 -XX:+CICompilerCount=N 强制设定总编译线程数目时，CICompilerCountPerCPU 将被设置为 false）。</p> <p>Java 
虚拟机会将这些编译线程按照 1:2 的比例分配给 C1 和 C2（至少各为 1 个）。举个例子，对于一个四核机器来说，总的编译线程数目为 3，其中包含一个 C1 编译线程和两个 C2 
编译线程。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 对于四核及以上的机器，总的编译线程的数目为： </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> n = log2(N) * log2(log2(N)) * 3 / 2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 其中 N 为 CPU 核心数目。 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>当启用分层编译时，即时编译具体的触发条件如下。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 当方法调用次数大于由参数 -XX:TierXInvocationThreshold 
指定的阈值乘以系数，或者当方法调用次数大于由参数 -XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数 -XX:TierXCompileThreshold 
指定的阈值乘以系数时，便会触发 X 层即时编译。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 触发条件为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i &gt; TierXInvocationThreshold * s || (i &gt; TierXMinInvocationThreshold 
* s &amp;&amp; i + b &gt; TierXCompileThreshold * s) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>其中 i 
为调用次数，b 为循环回边次数。</p> <h2>OSR 编译</h2> <p>可以看到，决定一个方法是否为热点代码的因素有两个：方法的调用次数、循环回边的执行次数。即时编译便是根据这两个计数器的和来触发的。为什么 
Java 虚拟机需要维护两个不同的计数器呢？</p> <p>实际上，除了以方法为单位的即时编译之外，Java 虚拟机还存在着另一种以循环为单位的即时编译，叫做 On-Stack-Replacement（OSR）编译。循环回边计数器便是用来触发这种类型的编译的。</p> 
<p>OSR 实际上是一种技术，它指的是在程序执行过程中，动态地替换掉 Java 方法栈桢，从而使得程序能够在非方法入口处进行解释执行和编译后的代码之间的切换。事实上，去优化（deoptimization）采用的技术也可以称之为 
OSR。</p> <p>在不启用分层编译的情况下，触发 OSR 编译的阈值是由参数 -XX:CompileThreshold 指定的阈值的倍数。</p> <p>该倍数的计算方法为：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> (OnStackReplacePercentage - InterpreterProfilePercentage)/100 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 其中 -XX:InterpreterProfilePercentage 的默认值为 33，当使用 C1 时 -XX:OnStackReplacePercentage 
为 933，当使用 C2 时为 140。 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>也就是说，默认情况下，C1 的 OSR 编译的阈值为 13500，而 C2 的为 
10700。</p> <p>在启用分层编译的情况下，触发 OSR 编译的阈值则是由参数 -XX:TierXBackEdgeThreshold 指定的阈值乘以系数。</p> <p>OSR 
编译在正常的应用程序中并不多见。它只在基准测试时比较常见，因此并不需要过多了解。</p> <h2>总结与实践</h2> <p>今天我详细地介绍了 Java 虚拟机中的即时编译。</p> 
<p>从 Java 8 开始，Java 虚拟机默认采用分层编译的方式。它将执行分为五个层次，分为为 0 层解释执行，1 层执行没有 profiling 的 C1 代码，2 层执行部分 
profiling 的 C1 代码，3 层执行全部 profiling 的 C1 代码，和 4 层执行 C2 代码。</p> <p>通常情况下，方法会首先被解释执行，然后被 3 层的 
C1 编译，最后被 4 层的 C2 编译。</p> <p>即时编译是由方法调用计数器和循环回边计数器触发的。在使用分层编译的情况下，触发编译的阈值是根据当前待编译的方法数目动态调整的。</p> 
<p>OSR 是一种能够在非方法入口处进行解释执行和编译后代码之间切换的技术。OSR 编译可以用来解决单次调用方法包含热循环的性能优化问题。</p> <p>今天的实践环节，你可以使用参数 
-XX:+PrintCompilation 来打印你项目中的即时编译情况。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 15 3 CompilationTest::foo (16 bytes) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 16 3 java.lang.Integer::valueOf (32 
bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 17 
4 CompilationTest::foo (16 bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 88 18 4 java.lang.Integer::valueOf (32 bytes) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 89 15 3 CompilationTest::foo (16 bytes) 
made not entrant </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
89 16 3 java.lang.Integer::valueOf (32 bytes) made not entrant </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 90 19 % 3 CompilationTest::main @ 5 (33 bytes) </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>简单解释一下该参数的输出：第一列是时间，第二列是 Java 虚拟机维护的编译 ID。</p> <p>接下来是一系列标识，包括 %（是否 OSR 编译），s（是否 
synchronized 方法），！（是否包含异常处理器），b（是否阻塞了应用线程，可了解一下参数 -Xbatch），n（是否为 native 方法）。再接下来则是编译层次，以及方法名。如果是 
OSR 编译，那么方法名后面还会跟着 @以及循环所在的字节码。</p> <p>当发生去优化时，你将看到之前出现过的编译，不过被标记了“made not entrant"。它表示该方法不能再被进入。</p> 
<p>当 Java 虚拟机检测到所有的线程都退出该编译后的“made not entrant”时，会将该方法标记为“made zombie”，此时可以回收这块代码所占据的空间了。<br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 3 msec}
2020-11-19 20:14:44.336 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=28 
 {executed in 3 msec}
2020-11-19 20:14:44.338 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:14:44.348 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在专栏的第一篇中，我曾经简单地介绍过即时编译。这是一项用来提升应用程序运行效率的技术。通常而言，代码会先被 Java 虚拟机解释执行，之后反复执行的热点代码则会被即时编译成为机器码，直接运行在底层硬件之上。</p> 
<p>今天我们便来详细剖析一下 Java 虚拟机中的即时编译。</p> <h2>分层编译模式</h2> <p>HotSpot 虚拟机包含多个即时编译器 C1、C2 和 Graal。</p> 
<p>其中，Graal 是一个实验性质的即时编译器，可以通过参数 -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用，并且替换 
C2。</p> <p>在 Java 7 以前，我们需要根据程序的特性选择对应的即时编译器。对于执行时间较短的，或者对启动性能有要求的程序，我们采用编译效率较快的 C1，对应参数 -client。</p> 
<p>对于执行时间较长的，或者对峰值性能有要求的程序，我们采用生成代码执行效率较快的 C2，对应参数 -server。</p> <p>Java 7 引入了分层编译（对应参数 -XX:+TieredCompilation）的概念，综合了 
C1 的启动性能优势和 C2 的峰值性能优势。</p> <p>分层编译将 Java 虚拟机的执行状态分为了五个层次。为了方便阐述，我用“C1 代码”来指代由 C1 生成的机器码，“C2 
代码”来指代由 C2 生成的机器码。五个层级分别是：</p><!-- [[[read_end]]] --> <ol start="0"> <li>解释执行；</li> <li>执行不带 
profiling 的 C1 代码；</li> <li>执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码；</li> <li>执行带所有 profiling 
的 C1 代码；</li> <li>执行 C2 代码。</li> </ol> <p>通常情况下，C2 代码的执行效率要比 C1 代码的高出 30% 以上。然而，对于 C1 代码的三种状态，按执行效率从高至低则是 
1 层 &gt; 2 层 &gt; 3 层。</p> <p>其中 1 层的性能比 2 层的稍微高一些，而 2 层的性能又比 3 层高出 30%。这是因为 profiling 越多，其额外的性能开销越大。</p> 
<p>这里解释一下，profiling 是指在程序执行过程中，收集能够反映程序执行状态的数据。这里所收集的数据我们称之为程序的 profile。</p> <p>你可能已经接触过许许多多的 
profiler，例如 JDK 附带的 hprof。这些 profiler 大多通过注入（instrumentation）或者 JVMTI 事件来实现的。Java 虚拟机也内置了 profiling。我会在下一篇中具体介绍 
Java 虚拟机的 profiling 都在做些什么。</p> <p>在 5 个层次的执行状态中，1 层和 4 层为终止状态。当一个方法被终止状态编译过后，如果编译后的代码并没有失效，那么 
Java 虚拟机是不会再次发出该方法的编译请求的。</p> <p><img src="https://static001.geekbang.org/resource/image/c5/e5/c503010c157b7db7596893633b624fe5.png" 
alt=""><br> 不同的编译路径，图片来源于我之前一篇<a href="https://zhengyudi.github.io/2018/03/20/graal-intro/">介绍 
Graal 的博客</a>。</p> <p>这里我列举了 4 个不同的编译路径（<a href="http://cr.openjdk.java.net/~iveresov/tiered/Tiered.pdf">Igor 
的演讲</a>列举了更多的编译路径）。通常情况下，热点方法会被 3 层的 C1 编译，然后再被 4 层的 C2 编译。</p> <p>如果方法的字节码数目比较少（如 getter/setter），而且 
3 层的 profiling 没有可收集的数据。</p> <p>那么，Java 虚拟机断定该方法对于 C1 代码和 C2 代码的执行效率相同。在这种情况下，Java 虚拟机会在 3 
层编译之后，直接选择用 1 层的 C1 编译。由于这是一个终止状态，因此 Java 虚拟机不会继续用 4 层的 C2 编译。</p> <p>在 C1 忙碌的情况下，Java 虚拟机在解释执行过程中对程序进行 
profiling，而后直接由 4 层的 C2 编译。在 C2 忙碌的情况下，方法会被 2 层的 C1 编译，然后再被 3 层的 C1 编译，以减少方法在 3 层的执行时间。</p> 
<p>Java 8 默认开启了分层编译。不管是开启还是关闭分层编译，原本用来选择即时编译器的参数 -client 和 -server 都是无效的。当关闭分层编译的情况下，Java 虚拟机将直接采用 
C2。</p> <p>如果你希望只是用 C1，那么你可以在打开分层编译的情况下使用参数 -XX:TieredStopAtLevel=1。在这种情况下，Java 虚拟机会在解释执行之后直接由 
1 层的 C1 进行编译。</p> <h2>即时编译的触发</h2> <p>Java 虚拟机是根据方法的调用次数以及循环回边的执行次数来触发即时编译的。前面提到，Java 虚拟机在 
0 层、2 层和 3 层执行状态时进行 profiling，其中就包含方法的调用次数和循环回边的执行次数。</p> <p>这里的循环回边是一个控制流图中的概念。在字节码中，我们可以简单理解为往回跳转的指令。（注意，这并不一定符合循环回边的定义。）</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public static void foo(Object obj) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int sum = 0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 200; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> sum += i; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举例来说，上面这段代码将被编译为下面的字节码。其中，偏移量为 18 的字节码将往回跳至偏移量为 7 的字节码中。在解释执行时，每当运行一次该指令，Java 
虚拟机便会将该方法的循环回边计数器加 1。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public static void foo(java.lang.Object); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: istore_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 2: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 3: istore_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4: goto 14 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 7: iload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
8: iload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 9: iadd 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 10: istore_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 11: iinc 2, 1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 14: iload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 15: sipush 200 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 18: if_icmplt 7 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 21: return </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>在即时编译过程中，我们会识别循环的头部和尾部。在上面这段字节码中，循环的头部是偏移量为 14 的字节码，尾部为偏移量为 11 的字节码。</p> <p>循环尾部到循环头部的控制流边就是真正意义上的循环回边。也就是说，C1 
将在这个位置插入增加循环回边计数器的代码。</p> <p>解释执行和 C1 代码中增加循环回边计数器的位置并不相同，但这并不会对程序造成影响。</p> <p>实际上，Java 虚拟机并不会对这些计数器进行同步操作，因此收集而来的执行次数也并非精确值。不管如何，即时编译的触发并不需要非常精确的数值。只要该数值足够大，就能说明对应的方法包含热点代码。</p> 
<p>具体来说，在不启用分层编译的情况下，当方法的调用次数和循环回边的次数的和，超过由参数 -XX:CompileThreshold 指定的阈值时（使用 C1 时，该值为 1500；使用 
C2 时，该值为 10000），便会触发即时编译。</p> <p>当启用分层编译时，Java 虚拟机将不再采用由参数 -XX:CompileThreshold 指定的阈值（该参数失效），而是使用另一套阈值系统。在这套系统中，阈值的大小是动态调整的。</p> 
<p>所谓的动态调整其实并不复杂：在比较阈值时，Java 虚拟机会将阈值与某个系数 s 相乘。该系数与当前待编译的方法数目成正相关，与编译线程的数目成负相关。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
系数的计算方法为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> s = queue_size_X 
/ (TierXLoadFeedback * compiler_count_X) + 1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
其中 X 是执行层次，可取 3 或者 4； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
queue_size_X 是执行层次为 X 的待编译方法的数目； </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
TierXLoadFeedback 是预设好的参数，其中 Tier3LoadFeedback 为 5，Tier4LoadFeedback 为 3； </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> compiler_count_X 是层次 X 的编译线程数目。 </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>在 64 位 Java 虚拟机中，默认情况下编译线程的总数目是根据处理器数量来调整的（对应参数 -XX:+CICompilerCountPerCPU，默认为 
true；当通过参数 -XX:+CICompilerCount=N 强制设定总编译线程数目时，CICompilerCountPerCPU 将被设置为 false）。</p> <p>Java 
虚拟机会将这些编译线程按照 1:2 的比例分配给 C1 和 C2（至少各为 1 个）。举个例子，对于一个四核机器来说，总的编译线程数目为 3，其中包含一个 C1 编译线程和两个 C2 
编译线程。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 对于四核及以上的机器，总的编译线程的数目为： </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> n = log2(N) * log2(log2(N)) * 3 / 2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 其中 N 为 CPU 核心数目。 </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>当启用分层编译时，即时编译具体的触发条件如下。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 当方法调用次数大于由参数 -XX:TierXInvocationThreshold 
指定的阈值乘以系数，或者当方法调用次数大于由参数 -XX:TierXMINInvocationThreshold 指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数 -XX:TierXCompileThreshold 
指定的阈值乘以系数时，便会触发 X 层即时编译。 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 触发条件为： </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> i &gt; TierXInvocationThreshold * s || (i &gt; TierXMinInvocationThreshold 
* s &amp;&amp; i + b &gt; TierXCompileThreshold * s) </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>其中 i 
为调用次数，b 为循环回边次数。</p> <h2>OSR 编译</h2> <p>可以看到，决定一个方法是否为热点代码的因素有两个：方法的调用次数、循环回边的执行次数。即时编译便是根据这两个计数器的和来触发的。为什么 
Java 虚拟机需要维护两个不同的计数器呢？</p> <p>实际上，除了以方法为单位的即时编译之外，Java 虚拟机还存在着另一种以循环为单位的即时编译，叫做 On-Stack-Replacement（OSR）编译。循环回边计数器便是用来触发这种类型的编译的。</p> 
<p>OSR 实际上是一种技术，它指的是在程序执行过程中，动态地替换掉 Java 方法栈桢，从而使得程序能够在非方法入口处进行解释执行和编译后的代码之间的切换。事实上，去优化（deoptimization）采用的技术也可以称之为 
OSR。</p> <p>在不启用分层编译的情况下，触发 OSR 编译的阈值是由参数 -XX:CompileThreshold 指定的阈值的倍数。</p> <p>该倍数的计算方法为：</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> (OnStackReplacePercentage - InterpreterProfilePercentage)/100 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 其中 -XX:InterpreterProfilePercentage 的默认值为 33，当使用 C1 时 -XX:OnStackReplacePercentage 
为 933，当使用 C2 时为 140。 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>也就是说，默认情况下，C1 的 OSR 编译的阈值为 13500，而 C2 的为 
10700。</p> <p>在启用分层编译的情况下，触发 OSR 编译的阈值则是由参数 -XX:TierXBackEdgeThreshold 指定的阈值乘以系数。</p> <p>OSR 
编译在正常的应用程序中并不多见。它只在基准测试时比较常见，因此并不需要过多了解。</p> <h2>总结与实践</h2> <p>今天我详细地介绍了 Java 虚拟机中的即时编译。</p> 
<p>从 Java 8 开始，Java 虚拟机默认采用分层编译的方式。它将执行分为五个层次，分为为 0 层解释执行，1 层执行没有 profiling 的 C1 代码，2 层执行部分 
profiling 的 C1 代码，3 层执行全部 profiling 的 C1 代码，和 4 层执行 C2 代码。</p> <p>通常情况下，方法会首先被解释执行，然后被 3 层的 
C1 编译，最后被 4 层的 C2 编译。</p> <p>即时编译是由方法调用计数器和循环回边计数器触发的。在使用分层编译的情况下，触发编译的阈值是根据当前待编译的方法数目动态调整的。</p> 
<p>OSR 是一种能够在非方法入口处进行解释执行和编译后代码之间切换的技术。OSR 编译可以用来解决单次调用方法包含热循环的性能优化问题。</p> <p>今天的实践环节，你可以使用参数 
-XX:+PrintCompilation 来打印你项目中的即时编译情况。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 15 3 CompilationTest::foo (16 bytes) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 16 3 java.lang.Integer::valueOf (32 
bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 88 17 
4 CompilationTest::foo (16 bytes) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 88 18 4 java.lang.Integer::valueOf (32 bytes) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 89 15 3 CompilationTest::foo (16 bytes) 
made not entrant </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
89 16 3 java.lang.Integer::valueOf (32 bytes) made not entrant </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 90 19 % 3 CompilationTest::main @ 5 (33 bytes) </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>简单解释一下该参数的输出：第一列是时间，第二列是 Java 虚拟机维护的编译 ID。</p> <p>接下来是一系列标识，包括 %（是否 OSR 编译），s（是否 
synchronized 方法），！（是否包含异常处理器），b（是否阻塞了应用线程，可了解一下参数 -Xbatch），n（是否为 native 方法）。再接下来则是编译层次，以及方法名。如果是 
OSR 编译，那么方法名后面还会跟着 @以及循环所在的字节码。</p> <p>当发生去优化时，你将看到之前出现过的编译，不过被标记了“made not entrant"。它表示该方法不能再被进入。</p> 
<p>当 Java 虚拟机检测到所有的线程都退出该编译后的“made not entrant”时，会将该方法标记为“made zombie”，此时可以回收这块代码所占据的空间了。<br> 
<img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 4 msec}
2020-11-19 20:14:44.365 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=28 
 {executed in 7 msec}
2020-11-19 20:14:44.367 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:14:44.370 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=28 
 {executed in 1 msec}
2020-11-19 20:14:44.372 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:14:44.379 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788084, 1605788084, 1, 'zh-hans', 0, 1, 1, 
0, '16丨即时编译（上）', 1, 28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.385 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=28 
 {executed in 1 msec}
2020-11-19 20:14:44.387 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:14:44.394 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788084, 1605788084, 1, 'zh-hans', 0, 
1, 1, 0, '16丨即时编译（上）', 'book', 1, 28, 28) 
 {executed in 2 msec}
2020-11-19 20:14:44.400 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.401 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:44.404 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 20:14:44.406 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:44.412 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/3b7ab6a74f0bf7253e5906654ec69e9a?bkt=en-1df98aeb722e81f5031be215d51eb132fa067424077893e121e17d99e543de1339bc2f41d1500f7b&fid=3757516097-778750-653261913612804&time=1605788082&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-F40NseEvEHTaXQ8Pi%2B8xU%2BVSzzY%3D&to=92&size=5155387&sta_dx=5155387&sta_cs=4340&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182966&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5155387&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-b268952d38e6cf0a32b726f1edb25f9fc85915693a8edef801669fd5570cdd18c70598980ff6a3a3&sl=76480590&expires=8h&rt=pr&r=292021789&mlogid=7510846202984027703&vbdid=64799653&fin=16%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510846202984027703&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865ee9204401e1208c9503aedc1c031f82b49&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=16%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.418 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.420 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:14:44.426 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/3b7ab6a74f0bf7253e5906654ec69e9a?bkt=en-1df98aeb722e81f5031be215d51eb132fa067424077893e121e17d99e543de1339bc2f41d1500f7b&fid=3757516097-778750-653261913612804&time=1605788082&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-F40NseEvEHTaXQ8Pi%2B8xU%2BVSzzY%3D&to=92&size=5155387&sta_dx=5155387&sta_cs=4340&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182966&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=5155387&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-b268952d38e6cf0a32b726f1edb25f9fc85915693a8edef801669fd5570cdd18c70598980ff6a3a3&sl=76480590&expires=8h&rt=pr&r=292021789&mlogid=7510846202984027703&vbdid=64799653&fin=16%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8A%EF%BC%89.mp3&bflag=92,34-92&rtype=1&dp-logid=7510846202984027703&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865ee9204401e1208c9503aedc1c031f82b49&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=16%E4%B8%A8%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%EF%BC%88%E4%B8%8A%EF%BC%89.mp3', 
28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.432 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.433 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:44.437 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.438 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:44.450 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有点费解，不过还好又明白了一些东西，小结如下： <br>1:即时编译-直接将Java字节码编译成机器码，运行在底层硬件之上，这么玩是为了提高代码的执行效率，通俗点就是能使代码跑的更快一些 
<br> <br>2:即时编译的触发点是热点代码，即 即时编译仅针对热点代码来触发，热点代码是通过方法的调用次数或者回边循环的次数来标示的，这里也侧面反映出来即时编译是针对方法块的，有个疑问❓为什么不把所有代码都即时编译一下呢？这样程序的执行效率不是更快吗？为什么还分热点非热点呢？ 
<br> <br>3:分层编译的设计也有点奇怪，为什么要这样呢？使用最快的编译代码编译器编译的代码不是更好吗？ <br> <br>4:解释执行-将Java字节码一段一段的编译成机器码在底层硬件上运行，即时编译是一个相对解释执行而言的概念，它将热点代码先编译成机器码缓存起来，在解释执行字节码的时候判断出已经缓存起来了就不在编译直接获取执行就可以了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 2. 即时编译是以方法为单位的。动态编译比较耗时，如果花了大量CPU资源编译出来的机器码运行不了几次，就很浪费了。<br><br>3. 
机器码越快，需要的编译时间就越长。分层编译是一种折衷的方式，既能够满足部分不那么热的代码能够在短时间内编译完成，也能满足很热的代码能够拥有最好的优化。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/43/38/72feb2e0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>哇！怎么这...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，-XX:+PrintCompilation看到的信息都是及时编译的结果吗，还是说包含了及时编译（C1 
C2）和解释编译的结果，有没其他查看代码里即时编译的其他相关文档 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>逆流的鱼</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 疑问:即时编译之后的机器码和 native 方法是不是可以等同，这样是不是他俩都是占用jvm的内存和线程资源，而具体的Java程序只是持有机器码方法和native方法的引用，具体Java程序的线程调用时也是再委托给JVM 
执行 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/11/82/ab3f0985.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>槛外人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么一块代码会被2层编译后还会被3、4层编译？不能某一层编译就完了吗？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 其中一个原因是快速地收集profile，所以会用2 
3层编译后的代码，既能够高效运行，也能够收集最终用来4层编译的profile</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5e/ec/70c8d94d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大场镇车王</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问带所有profiling是什么意思 所有是个什么概念 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
下篇会讲。主要有分支跳转指令的branch profile，和类型相关指令的type profile。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/85/618103b6.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>郑杰</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 能说下及时编译的结果是什么样的吗，然后他是怎么跟解释执行一起运行的 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 编译结果就是二进制码，下一篇有具体示例。解释执行遇到方法调用时，JVM会判断目标方法是否被编译。如果是，就跳转至编译好的二进制码中。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/09/c7/861b4a70.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>泰格杨</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 去优化是啥意思？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 就是从执行机器码切换回解释执行，下一篇会详细介绍。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjDxrsib6EUtKt6ROhrCNXlEQSoZQNlCG4mPjCGyvicibYbUlGrwiarMSTV3LNoE7IPtDf1NDZ4X2ib2g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_75b4c...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-11 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 还是有点不懂，即时编译是在程序运行的时候触发？解释编译是指我们普通的java文件被编译class文件的内容？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>未知</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 每次看都有收获。第三遍。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，问下，中止状态是什么意思？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这里的上下文是在讲编译层次吧？指的是到了1层或者4层之后，就不再就同一个方法触发新的编译请求，除非是OSR编译或者已被去优化</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夜行观星</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看了分层，还看封面，老师真的用心 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/86/a8/427879a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>vick</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教两个问题： <br>1. 解释执行如果发现该方法还没有被编译，是否就是触发即时编译生成二进制码去执行？ 
<br>2. 一个方法被即时编译成二进制码后，程序运行期间是否就可以无限循环利用之前编译的机器码去执行了，会有需要再重新编译的情况吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Leon 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 小结一下： <br> <br>分层编译的引入是为了让即时编译更具备灵性，使得虚拟机可以根据量化的实际情况以及相应的算法动态选择执行代码的编译路径。分层编译是否开启，决定了编译器的执行阈值是否动态化。 
<br> <br>根据两种不同的计数器（方法调用计数器和循环回边的执行次数计数器），虚拟机有不同的考量，基于方法层面的优化，会使用方法调用计数器作为主要依据，而基于循环层面的，则使用循环回边计数器作为主要依据。 
<br> <br>由此引入了OSR技术，即一种能够替换正在运行函数的栈帧的技术。其目的在于能让执行引擎能在不同的优化层次间来回切换，并以更细粒度（循环）的形式实现之。为了平衡启动性能与峰值性能，OSR可以实现低层次优化往高层次优化的迁移；为了去优化以及方便获取调试信息，OSR可以实现高层次优化往低层次迁移。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有个小问题，1、4层是终止（接受）状态的前提是，您的五层应该从0开始，到4层结束，但是您现在1层开始，5层结束，那么终止状态应该是2层和5层。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的，我原稿里是从0开始，可能MD语法给识别错了。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> ”前面提到，Java 虚拟机在 
0 层、2 层和 3 层执行状态时进行 profiling” <br>第0层是解释执行，前面没说带profiling啊？ 前面只列出第2，3层带profiling. 这里会不会笔误？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！<br><br>解释执行是带profiling的。最开始列2 
3层时明确标注带profiling，是为了区分1，2，3层。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/5f/91/a9b51d4e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Desire</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问打印出！表示什么意思 n表示native </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 是否包含异常处理器</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>魏春河</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我记得前面提到过CompileThreshold 默认是15，今天怎么成1500了？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 15应该是反射调用从本地实现切换为动态实现吧。这里的1500是即时编译的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Java中的即时编译器，是不是重新将java代码编译成机器码，并没有使用class文件？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 确切地说，即时编译器将加载进VM中的类的某个方法所对应的byte数组编译为机器码。你也可以理解为从class文件到机器码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>公号-代码...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问即时编译的对象是方法级还是语句块级？ </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 一般都是方法级。<br><br>OSR编译会拿热循环作为编译对象。</p> </div> </div></li>', 0, 
'full_html', 'zh-hans', 28, 28) 
 {executed in 5 msec}
2020-11-19 20:14:44.461 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.463 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:14:44.474 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有点费解，不过还好又明白了一些东西，小结如下： <br>1:即时编译-直接将Java字节码编译成机器码，运行在底层硬件之上，这么玩是为了提高代码的执行效率，通俗点就是能使代码跑的更快一些 
<br> <br>2:即时编译的触发点是热点代码，即 即时编译仅针对热点代码来触发，热点代码是通过方法的调用次数或者回边循环的次数来标示的，这里也侧面反映出来即时编译是针对方法块的，有个疑问❓为什么不把所有代码都即时编译一下呢？这样程序的执行效率不是更快吗？为什么还分热点非热点呢？ 
<br> <br>3:分层编译的设计也有点奇怪，为什么要这样呢？使用最快的编译代码编译器编译的代码不是更好吗？ <br> <br>4:解释执行-将Java字节码一段一段的编译成机器码在底层硬件上运行，即时编译是一个相对解释执行而言的概念，它将热点代码先编译成机器码缓存起来，在解释执行字节码的时候判断出已经缓存起来了就不在编译直接获取执行就可以了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 2. 即时编译是以方法为单位的。动态编译比较耗时，如果花了大量CPU资源编译出来的机器码运行不了几次，就很浪费了。<br><br>3. 
机器码越快，需要的编译时间就越长。分层编译是一种折衷的方式，既能够满足部分不那么热的代码能够在短时间内编译完成，也能满足很热的代码能够拥有最好的优化。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/43/38/72feb2e0.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>哇！怎么这...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-14 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，-XX:+PrintCompilation看到的信息都是及时编译的结果吗，还是说包含了及时编译（C1 
C2）和解释编译的结果，有没其他查看代码里即时编译的其他相关文档 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>逆流的鱼</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 疑问:即时编译之后的机器码和 native 方法是不是可以等同，这样是不是他俩都是占用jvm的内存和线程资源，而具体的Java程序只是持有机器码方法和native方法的引用，具体Java程序的线程调用时也是再委托给JVM 
执行 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/11/82/ab3f0985.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>槛外人</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-06 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 为什么一块代码会被2层编译后还会被3、4层编译？不能某一层编译就完了吗？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 其中一个原因是快速地收集profile，所以会用2 
3层编译后的代码，既能够高效运行，也能够收集最终用来4层编译的profile</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5e/ec/70c8d94d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大场镇车王</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请问带所有profiling是什么意思 所有是个什么概念 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
下篇会讲。主要有分支跳转指令的branch profile，和类型相关指令的type profile。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/85/618103b6.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>郑杰</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 能说下及时编译的结果是什么样的吗，然后他是怎么跟解释执行一起运行的 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 编译结果就是二进制码，下一篇有具体示例。解释执行遇到方法调用时，JVM会判断目标方法是否被编译。如果是，就跳转至编译好的二进制码中。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/09/c7/861b4a70.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>泰格杨</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 去优化是啥意思？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 就是从执行机器码切换回解释执行，下一篇会详细介绍。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjDxrsib6EUtKt6ROhrCNXlEQSoZQNlCG4mPjCGyvicibYbUlGrwiarMSTV3LNoE7IPtDf1NDZ4X2ib2g/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_75b4c...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-11 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 还是有点不懂，即时编译是在程序运行的时候触发？解释编译是指我们普通的java文件被编译class文件的内容？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>未知</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 每次看都有收获。第三遍。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，问下，中止状态是什么意思？ </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这里的上下文是在讲编译层次吧？指的是到了1层或者4层之后，就不再就同一个方法触发新的编译请求，除非是OSR编译或者已被去优化</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>夜行观星</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-01 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 看了分层，还看封面，老师真的用心 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/86/a8/427879a9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>vick</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 请教两个问题： <br>1. 解释执行如果发现该方法还没有被编译，是否就是触发即时编译生成二进制码去执行？ 
<br>2. 一个方法被即时编译成二进制码后，程序运行期间是否就可以无限循环利用之前编译的机器码去执行了，会有需要再重新编译的情况吗？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>Leon 
Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-18 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 小结一下： <br> <br>分层编译的引入是为了让即时编译更具备灵性，使得虚拟机可以根据量化的实际情况以及相应的算法动态选择执行代码的编译路径。分层编译是否开启，决定了编译器的执行阈值是否动态化。 
<br> <br>根据两种不同的计数器（方法调用计数器和循环回边的执行次数计数器），虚拟机有不同的考量，基于方法层面的优化，会使用方法调用计数器作为主要依据，而基于循环层面的，则使用循环回边计数器作为主要依据。 
<br> <br>由此引入了OSR技术，即一种能够替换正在运行函数的栈帧的技术。其目的在于能让执行引擎能在不同的优化层次间来回切换，并以更细粒度（循环）的形式实现之。为了平衡启动性能与峰值性能，OSR可以实现低层次优化往高层次优化的迁移；为了去优化以及方便获取调试信息，OSR可以实现高层次优化往低层次迁移。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Leon Wong</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-17 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 有个小问题，1、4层是终止（接受）状态的前提是，您的五层应该从0开始，到4层结束，但是您现在1层开始，5层结束，那么终止状态应该是2层和5层。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的，我原稿里是从0开始，可能MD语法给识别错了。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> ”前面提到，Java 虚拟机在 
0 层、2 层和 3 层执行状态时进行 profiling” <br>第0层是解释执行，前面没说带profiling啊？ 前面只列出第2，3层带profiling. 这里会不会笔误？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢指出！<br><br>解释执行是带profiling的。最开始列2 
3层时明确标注带profiling，是为了区分1，2，3层。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/5f/91/a9b51d4e.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Desire</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问打印出！表示什么意思 n表示native </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 是否包含异常处理器</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>魏春河</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 我记得前面提到过CompileThreshold 默认是15，今天怎么成1500了？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 15应该是反射调用从本地实现切换为动态实现吧。这里的1500是即时编译的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>杨春鹏</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-28 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> Java中的即时编译器，是不是重新将java代码编译成机器码，并没有使用class文件？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 确切地说，即时编译器将加载进VM中的类的某个方法所对应的byte数组编译为机器码。你也可以理解为从class文件到机器码。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>公号-代码...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请问即时编译的对象是方法级还是语句块级？ </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 一般都是方法级。<br><br>OSR编译会拿热循环作为编译对象。</p> </div> </div></li>', 0, 
'full_html', 'zh-hans', 28, 28) 
 {executed in 5 msec}
2020-11-19 20:14:44.481 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.483 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:44.486 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.488 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:44.495 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 28, 'https://static001.geekbang.org/resource/image/5e/fa/5e1a093b44690db48866a72778f245fa.jpg', 
28) 
 {executed in 2 msec}
2020-11-19 20:14:44.504 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.506 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:14:44.515 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 28, 'https://static001.geekbang.org/resource/image/5e/fa/5e1a093b44690db48866a72778f245fa.jpg', 
28) 
 {executed in 1 msec}
2020-11-19 20:14:44.522 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 20:14:44.525 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:14:44.534 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.542 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=28 
 {executed in 2 msec}
2020-11-19 20:14:44.544 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:14:44.553 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 28, 28) 
 {executed in 1 msec}
2020-11-19 20:14:44.560 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='124628729182087' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:14:44.562 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:08.152 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='124628729182087' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:15:08.154 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:08.197 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('124628729182087', 1, 'net_content') 
 {executed in 38 msec}
2020-11-19 20:15:08.199 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('124628729182087', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:15:08.201 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|59            |
|--------------|

2020-11-19 20:15:08.227 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='124628729182087' 
and bookchecke0_.name='media' 
 {executed in 2 msec}
2020-11-19 20:15:08.229 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:08.629 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='124628729182087' 
and bookchecke0_.name='media' 
 {executed in 2 msec}
2020-11-19 20:15:08.630 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:08.634 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('124628729182087', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:15:08.635 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('124628729182087', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:15:08.636 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|60            |
|--------------|

2020-11-19 20:15:08.649 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='124628729182087' 
 {executed in 1 msec}
2020-11-19 20:15:08.651 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:08.655 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788108, 1) 
 {executed in 1 msec}
2020-11-19 20:15:08.656 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788108, 1) 
 {executed in 0 msec}
2020-11-19 20:15:08.658 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|29            |
|--------------|

2020-11-19 20:15:08.667 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '4f89cb76-bc60-4c63-8437-defe184544ce', 
29) 
 {executed in 1 msec}
2020-11-19 20:15:08.669 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '4f89cb76-bc60-4c63-8437-defe184544ce', 29) 
 {executed in 0 msec}
2020-11-19 20:15:08.671 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|29            |
|--------------|

2020-11-19 20:15:08.688 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=29, revision_default=1, revision_timestamp=1605788108, 
revision_uid=1 where vid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.693 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.695 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:08.700 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '124628729182087', 'zh-hans', 29, 29) 
 {executed in 0 msec}
2020-11-19 20:15:08.706 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.707 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:08.713 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '124628729182087', 'zh-hans', 29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.719 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.721 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:08.725 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.727 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:08.734 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 29, 0, 0, 19, 0, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.740 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.741 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:08.745 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.748 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:08.762 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在前面的篇章中，我们多次提到了 Java 语法和 Java 字节码的差异之处。这些差异之处都是通过 Java 
编译器来协调的。今天我们便来列举一下 Java 编译器的协调工作。</p> <h2>自动装箱与自动拆箱</h2> <p>首先要提到的便是 Java 的自动装箱（auto-boxing）和自动拆箱（auto-unboxing）。</p> 
<p>我们知道，Java 语言拥有 8 个基本类型，每个基本类型都有对应的包装（wrapper）类型。</p> <p>之所以需要包装类型，是因为许多 Java 核心类库的 API 都是面向对象的。举个例子，Java 
核心类库中的容器类，就只支持引用类型。</p> <p>当需要一个能够存储数值的容器类时，我们往往定义一个存储包装类对象的容器。</p> <p>对于基本类型的数值来说，我们需要先将其转换为对应的包装类，再存入容器之中。在 
Java 程序中，这个转换可以是显式，也可以是隐式的，后者正是 Java 中的自动装箱。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
int foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ArrayList&lt;Integer&gt; 
list = new ArrayList&lt;&gt;(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
list.add(0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int result 
= list.get(0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>以上图中的 Java 代码为例。我构造了一个 Integer 类型的 ArrayList，并且向其中添加一个 int 值 0。然后，我会获取该 ArrayList 
的第 0 个元素，并作为 int 值返回给调用者。这段代码对应的 Java 字节码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: new 
java/util/ArrayList </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
3: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: invokespecial 
java/util/ArrayList."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: astore_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 9: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 10: invokestatic java/lang/Integer.valueOf:(I)Ljava/lang/Integer; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/util/ArrayList.add:(Ljava/lang/Object;)Z 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: invokevirtual java/util/ArrayList.get:(I)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: checkcast java/lang/Integer </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: invokevirtual java/lang/Integer.intValue:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: istore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: iload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: ireturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>当向泛型参数为 Integer 的 ArrayList 添加 int 值时，便需要用到自动装箱了。在上面字节码偏移量为 10 的指令中，我们调用了 Integer.valueOf 
方法，将 int 类型的值转换为 Integer 类型，再存储至容器类中。</p><!-- [[[read_end]]] --> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static Integer valueOf(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return IntegerCache.cache[i + (-IntegerCache.low)]; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new Integer(i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这是 Integer.valueOf 
的源代码。可以看到，当请求的 int 值在某个范围内时，我们会返回缓存了的 Integer 对象；而当所请求的 int 值在范围之外时，我们则会新建一个 Integer 对象。</p> 
<p>在介绍反射的那一篇中，我曾经提到参数 java.lang.Integer.IntegerCache.high。这个参数将影响这里面的 IntegerCache.high。</p> 
<p>也就是说，我们可以通过配置该参数，扩大 Integer 缓存的范围。Java 虚拟机参数 -XX:+AggressiveOpts 也会将 IntegerCache.high 调整至 
20000。</p> <p>奇怪的是，Java 并不支持对 IntegerCache.low 的更改，也就是说，对于小于 -128 的整数，我们无法直接使用由 Java 核心类库所缓存的 
Integer 对象。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: invokevirtual java/lang/Integer.intValue:()I 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当从泛型参数为 Integer 的 ArrayList 取出元素时，我们得到的实际上也是 Integer 对象。如果应用程序期待的是一个 int 值，那么就会发生自动拆箱。</p> 
<p>在我们的例子中，自动拆箱对应的是字节码偏移量为 25 的指令。该指令将调用 Integer.intValue 方法。这是一个实例方法，直接返回 Integer 对象所存储的 int 
值。</p> <h2>泛型与类型擦除</h2> <p>你可能已经留意到了，在前面例子生成的字节码中，往 ArrayList 中添加元素的 add 方法，所接受的参数类型是 Object；而从 
ArrayList 中获取元素的 get 方法，其返回类型同样也是 Object。</p> <p>前者还好，但是对于后者，在字节码中我们需要进行向下转换，将所返回的 Object 强制转换为 
Integer，方能进行接下来的自动拆箱。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/util/ArrayList.add:(Ljava/lang/Object;)Z 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: invokevirtual java/util/ArrayList.get:(I)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: checkcast java/lang/Integer </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>之所以会出现这种情况，是因为 Java 泛型的类型擦除。这是个什么概念呢？简单地说，那便是 Java 程序里的泛型信息，在 Java 虚拟机里全部都丢失了。这么做主要是为了兼容引入泛型之前的代码。</p> 
<p>当然，并不是每一个泛型参数被擦除类型后都会变成 Object 类。对于限定了继承类的泛型参数，经过类型擦除后，所有的泛型参数都将变成所限定的继承类。也就是说，Java 编译器将选取该泛型所能指代的所有类中层次最高的那个，作为替换泛型的类。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class GenericTest&lt;T extends Number&gt; { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> T foo(T t) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，在上面这段 Java 代码中，我定义了一个 T extends Number 的泛型参数。它所对应的字节码如下所示。可以看到，foo 方法的方法描述符所接收参数的类型以及返回类型都为 
Number。方法描述符是 Java 虚拟机识别方法调用的目标方法的关键。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> T foo(T); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: (Ljava/lang/Number;)Ljava/lang/Number; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0000) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=1, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: areturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Signature: (TT;)TT; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>不过，字节码中仍存在泛型参数的信息，如方法声明里的 T foo(T)，以及方法签名（Signature）中的“(TT;)TT;”。这类信息主要由 
Java 编译器在编译他类时使用。</p> <p>既然泛型会被类型擦除，那么我们还有必要用它吗？</p> <p>我认为是有必要的。Java 编译器可以根据泛型参数判断程序中的语法是否正确。举例来说，尽管经过类型擦除后，ArrayList.add 
方法所接收的参数是 Object 类型，但是往泛型参数为 Integer 类型的 ArrayList 中添加字符串对象，Java 编译器是会报错的。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> list.add("0"); // 编译出错 </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>桥接方法</h2> 
<p>泛型的类型擦除带来了不少问题。其中一个便是方法重写。在第四篇的课后实践中，我留了这么一段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Merchant&lt;T extends Customer&gt; { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(T customer) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0d; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class VIPOnlyMerchant extends Merchant&lt;VIP&gt; 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(VIP customer) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0d; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>VIPOnlyMerchant 中的 actionPrice 方法是符合 Java 
语言的方法重写的，毕竟都使用 @Override 来注解了。然而，经过类型擦除后，父类的方法描述符为 (LCustomer;)D，而子类的方法描述符为 (LVIP;)D。这显然不符合 
Java 虚拟机关于方法重写的定义。</p> <p>为了保证编译而成的 Java 字节码能够保留重写的语义，Java 编译器额外添加了一个桥接方法。该桥接方法在字节码层面重写了父类的方法，并将调用子类的方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class VIPOnlyMerchant extends Merchant&lt;VIP&gt; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(VIP); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: (LVIP;)D </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: dconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: dreturn 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(Customer); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)D </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, 
ACC_SYNTHETIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: checkcast class VIP </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokevirtual actionPrice:(LVIP;)D 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: dreturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 这个桥接方法等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(Customer customer) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return actionPrice((VIP) customer); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在我们的例子中，VIPOnlyMerchant 
类将包含一个桥接方法 actionPrice(Customer)，它重写了父类的同名同方法描述符的方法。该桥接方法将传入的 Customer 参数强制转换为 VIP 类型，再调用原本的 
actionPrice(VIP) 方法。</p> <p>当一个声明类型为 Merchant，实际类型为 VIPOnlyMerchant 的对象，调用 actionPrice 方法时，字节码里的符号引用指向的是 
Merchant.actionPrice(Customer) 方法。Java 虚拟机将动态绑定至 VIPOnlyMerchant 类的桥接方法之中，并且调用其 actionPrice(VIP) 
方法。</p> <p>需要注意的是，在 javap 的输出中，该桥接方法的访问标识符除了代表桥接方法的 ACC_BRIDGE 之外，还有 ACC_SYNTHETIC。它表示该方法对于 
Java 源代码来说是不可见的。当你尝试通过传入一个声明类型为 Customer 的对象作为参数，调用 VIPOnlyMerchant 类的 actionPrice 方法时，Java 
编译器会报错，并且提示参数类型不匹配。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Customer customer = new VIP(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new VIPOnlyMerchant().actionPrice(customer); 
// 编译出错 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>当然，如果你实在想要调用这个桥接方法，那么你可以选择使用反射机制。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Merchant { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Number actionPrice(Customer customer) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class NaiveMerchant extends Merchant { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Double actionPrice(Customer customer) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0D; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>除了前面介绍的泛型重写会生成桥接方法之外，如果子类定义了一个与父类参数类型相同的方法，其返回类型为父类方法返回类型的子类，那么 
Java 编译器也会为其生成桥接方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class NaiveMerchant extends Merchant </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public java.lang.Double actionPrice(Customer); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)Ljava/lang/Double; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0001) ACC_PUBLIC </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=2, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: dconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: invokestatic Double.valueOf:(D)Ljava/lang/Double; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: areturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public java.lang.Number actionPrice(Customer); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)Ljava/lang/Number; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, 
ACC_SYNTHETIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: aload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: invokevirtual actionPrice:(LCustomer;)Ljava/lang/Double; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: areturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>我之前曾提到过，class 文件里允许出现两个同名、同参数类型但是不同返回类型的方法。这里的原方法和桥接方法便是其中一个例子。由于该桥接方法同样标注了 ACC_SYNTHETIC，因此，当在 
Java 程序中调用 NaiveMerchant.actionPrice 时，我们只会调用到原方法。</p> <h2>其他语法糖</h2> <p>在前面的篇章中，我已经介绍过了变长参数、try-with-resources 
以及在同一 catch 代码块中捕获多种异常等语法糖。下面我将列举另外两个常见的语法糖。</p> <p>foreach 循环允许 Java 程序在 for 循环里遍历数组或者 Iterable 
对象。对于数组来说，foreach 循环将从 0 开始逐一访问数组中的元素，直至数组的末尾。其等价的代码如下面所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(int[] array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int item : array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public void bar(int[] array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] myArray = array; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int length = myArray.length; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int item = myArray[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>对于 Iterable 对象来说，foreach 循环将调用其 iterator 
方法，并且用它的 hasNext 以及 next 方法来遍历该 Iterable 对象中的元素。其等价的代码如下面所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(ArrayList&lt;Integer&gt; list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (Integer item : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void bar(ArrayList&lt;Integer&gt; list) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Iterator&lt;Integer&gt; iterator = list.iterator(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iterator.hasNext()) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Integer item = iterator.next(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>字符串 switch 编译而成的字节码看起来非常复杂，但实际上就是一个哈希桶。由于每个 
case 所截获的字符串都是常量值，因此，Java 编译器会将原来的字符串 switch 转换为 int 值 switch，比较所输入的字符串的哈希值。</p> <p>由于字符串哈希值很容易发生碰撞，因此，我们还需要用 
String.equals 逐个比较相同哈希值的字符串。</p> <p>如果你感兴趣的话，可以自己利用 javap 分析字符串 switch 编译而成的字节码。</p> <h2>总结与实践</h2> 
<p>今天我主要介绍了 Java 编译器对几个语法糖的处理。</p> <p>基本类型和其包装类型之间的自动转换，也就是自动装箱、自动拆箱，是通过加入 [Wrapper].valueOf（如 
Integer.valueOf）以及 [Wrapper].[primitive]Value（如 Integer.intValue）方法调用来实现的。</p> <p>Java 程序中的泛型信息会被擦除。具体来说，Java 
编译器将选取该泛型所能指代的所有类中层次最高的那个，作为替换泛型的具体类。</p> <p>由于 Java 语义与 Java 字节码中关于重写的定义并不一致，因此 Java 编译器会生成桥接方法作为适配器。此外，我还介绍了 
foreach 循环以及字符串 switch 的编译。</p> <p>今天的实践环节，你可以探索一下 Java 10 的 var 关键字，是否保存了泛型信息？是否支持自动装拆箱？</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> var value = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> var list = new ArrayList&lt;Integer&gt;(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> list.add(value); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // list.add("1"); 这一句能够编译吗？ </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 4 msec}
2020-11-19 20:15:08.771 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.773 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:08.788 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在前面的篇章中，我们多次提到了 Java 语法和 Java 字节码的差异之处。这些差异之处都是通过 Java 编译器来协调的。今天我们便来列举一下 
Java 编译器的协调工作。</p> <h2>自动装箱与自动拆箱</h2> <p>首先要提到的便是 Java 的自动装箱（auto-boxing）和自动拆箱（auto-unboxing）。</p> 
<p>我们知道，Java 语言拥有 8 个基本类型，每个基本类型都有对应的包装（wrapper）类型。</p> <p>之所以需要包装类型，是因为许多 Java 核心类库的 API 都是面向对象的。举个例子，Java 
核心类库中的容器类，就只支持引用类型。</p> <p>当需要一个能够存储数值的容器类时，我们往往定义一个存储包装类对象的容器。</p> <p>对于基本类型的数值来说，我们需要先将其转换为对应的包装类，再存入容器之中。在 
Java 程序中，这个转换可以是显式，也可以是隐式的，后者正是 Java 中的自动装箱。</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
int foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> ArrayList&lt;Integer&gt; 
list = new ArrayList&lt;&gt;(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
list.add(0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int result 
= list.get(0); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
return result; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>以上图中的 Java 代码为例。我构造了一个 Integer 类型的 ArrayList，并且向其中添加一个 int 值 0。然后，我会获取该 ArrayList 
的第 0 个元素，并作为 int 值返回给调用者。这段代码对应的 Java 字节码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public int foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: new 
java/util/ArrayList </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
3: dup </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: invokespecial 
java/util/ArrayList."&lt;init&gt;":()V </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 7: astore_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 8: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 9: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 10: invokestatic java/lang/Integer.valueOf:(I)Ljava/lang/Integer; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/util/ArrayList.add:(Ljava/lang/Object;)Z 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 16: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: iconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: invokevirtual java/util/ArrayList.get:(I)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: checkcast java/lang/Integer </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: invokevirtual java/lang/Integer.intValue:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 28: istore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 29: iload_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 30: ireturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>当向泛型参数为 Integer 的 ArrayList 添加 int 值时，便需要用到自动装箱了。在上面字节码偏移量为 10 的指令中，我们调用了 Integer.valueOf 
方法，将 int 类型的值转换为 Integer 类型，再存储至容器类中。</p><!-- [[[read_end]]] --> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static Integer valueOf(int i) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return IntegerCache.cache[i + (-IntegerCache.low)]; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return new Integer(i); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>这是 Integer.valueOf 
的源代码。可以看到，当请求的 int 值在某个范围内时，我们会返回缓存了的 Integer 对象；而当所请求的 int 值在范围之外时，我们则会新建一个 Integer 对象。</p> 
<p>在介绍反射的那一篇中，我曾经提到参数 java.lang.Integer.IntegerCache.high。这个参数将影响这里面的 IntegerCache.high。</p> 
<p>也就是说，我们可以通过配置该参数，扩大 Integer 缓存的范围。Java 虚拟机参数 -XX:+AggressiveOpts 也会将 IntegerCache.high 调整至 
20000。</p> <p>奇怪的是，Java 并不支持对 IntegerCache.low 的更改，也就是说，对于小于 -128 的整数，我们无法直接使用由 Java 核心类库所缓存的 
Integer 对象。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 25: invokevirtual java/lang/Integer.intValue:()I 
</div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>当从泛型参数为 Integer 的 ArrayList 取出元素时，我们得到的实际上也是 Integer 对象。如果应用程序期待的是一个 int 值，那么就会发生自动拆箱。</p> 
<p>在我们的例子中，自动拆箱对应的是字节码偏移量为 25 的指令。该指令将调用 Integer.intValue 方法。这是一个实例方法，直接返回 Integer 对象所存储的 int 
值。</p> <h2>泛型与类型擦除</h2> <p>你可能已经留意到了，在前面例子生成的字节码中，往 ArrayList 中添加元素的 add 方法，所接受的参数类型是 Object；而从 
ArrayList 中获取元素的 get 方法，其返回类型同样也是 Object。</p> <p>前者还好，但是对于后者，在字节码中我们需要进行向下转换，将所返回的 Object 强制转换为 
Integer，方能进行接下来的自动拆箱。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 13: invokevirtual java/util/ArrayList.add:(Ljava/lang/Object;)Z 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: invokevirtual java/util/ArrayList.get:(I)Ljava/lang/Object; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 22: checkcast java/lang/Integer </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>之所以会出现这种情况，是因为 Java 泛型的类型擦除。这是个什么概念呢？简单地说，那便是 Java 程序里的泛型信息，在 Java 虚拟机里全部都丢失了。这么做主要是为了兼容引入泛型之前的代码。</p> 
<p>当然，并不是每一个泛型参数被擦除类型后都会变成 Object 类。对于限定了继承类的泛型参数，经过类型擦除后，所有的泛型参数都将变成所限定的继承类。也就是说，Java 编译器将选取该泛型所能指代的所有类中层次最高的那个，作为替换泛型的类。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class GenericTest&lt;T extends Number&gt; { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> T foo(T t) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return t; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>举个例子，在上面这段 Java 代码中，我定义了一个 T extends Number 的泛型参数。它所对应的字节码如下所示。可以看到，foo 方法的方法描述符所接收参数的类型以及返回类型都为 
Number。方法描述符是 Java 虚拟机识别方法调用的目标方法的关键。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> T foo(T); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: (Ljava/lang/Number;)Ljava/lang/Number; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0000) </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=1, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> 1: areturn </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Signature: (TT;)TT; </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>不过，字节码中仍存在泛型参数的信息，如方法声明里的 T foo(T)，以及方法签名（Signature）中的“(TT;)TT;”。这类信息主要由 
Java 编译器在编译他类时使用。</p> <p>既然泛型会被类型擦除，那么我们还有必要用它吗？</p> <p>我认为是有必要的。Java 编译器可以根据泛型参数判断程序中的语法是否正确。举例来说，尽管经过类型擦除后，ArrayList.add 
方法所接收的参数是 Object 类型，但是往泛型参数为 Integer 类型的 ArrayList 中添加字符串对象，Java 编译器是会报错的。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> list.add("0"); // 编译出错 </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <h2>桥接方法</h2> 
<p>泛型的类型擦除带来了不少问题。其中一个便是方法重写。在第四篇的课后实践中，我留了这么一段代码：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Merchant&lt;T extends Customer&gt; { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(T customer) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0d; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class VIPOnlyMerchant extends Merchant&lt;VIP&gt; 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(VIP customer) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0d; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>VIPOnlyMerchant 中的 actionPrice 方法是符合 Java 
语言的方法重写的，毕竟都使用 @Override 来注解了。然而，经过类型擦除后，父类的方法描述符为 (LCustomer;)D，而子类的方法描述符为 (LVIP;)D。这显然不符合 
Java 虚拟机关于方法重写的定义。</p> <p>为了保证编译而成的 Java 字节码能够保留重写的语义，Java 编译器额外添加了一个桥接方法。该桥接方法在字节码层面重写了父类的方法，并将调用子类的方法。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class VIPOnlyMerchant extends Merchant&lt;VIP&gt; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ... </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(VIP); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> descriptor: (LVIP;)D </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> flags: (0x0001) ACC_PUBLIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: dconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: dreturn 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(Customer); </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)D </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, 
ACC_SYNTHETIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 0: aload_0 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: checkcast class VIP </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokevirtual actionPrice:(LVIP;)D 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: dreturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 这个桥接方法等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public double actionPrice(Customer customer) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return actionPrice((VIP) customer); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在我们的例子中，VIPOnlyMerchant 
类将包含一个桥接方法 actionPrice(Customer)，它重写了父类的同名同方法描述符的方法。该桥接方法将传入的 Customer 参数强制转换为 VIP 类型，再调用原本的 
actionPrice(VIP) 方法。</p> <p>当一个声明类型为 Merchant，实际类型为 VIPOnlyMerchant 的对象，调用 actionPrice 方法时，字节码里的符号引用指向的是 
Merchant.actionPrice(Customer) 方法。Java 虚拟机将动态绑定至 VIPOnlyMerchant 类的桥接方法之中，并且调用其 actionPrice(VIP) 
方法。</p> <p>需要注意的是，在 javap 的输出中，该桥接方法的访问标识符除了代表桥接方法的 ACC_BRIDGE 之外，还有 ACC_SYNTHETIC。它表示该方法对于 
Java 源代码来说是不可见的。当你尝试通过传入一个声明类型为 Customer 的对象作为参数，调用 VIPOnlyMerchant 类的 actionPrice 方法时，Java 
编译器会报错，并且提示参数类型不匹配。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Customer customer = new VIP(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> new VIPOnlyMerchant().actionPrice(customer); 
// 编译出错 </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span 
class="iconfont"></span>复制代码 </div></pre> <p>当然，如果你实在想要调用这个桥接方法，那么你可以选择使用反射机制。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
class Merchant { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public Number actionPrice(Customer customer) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> return 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class NaiveMerchant extends Merchant { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Override </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public Double actionPrice(Customer customer) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> return 0.0D; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>除了前面介绍的泛型重写会生成桥接方法之外，如果子类定义了一个与父类参数类型相同的方法，其返回类型为父类方法返回类型的子类，那么 
Java 编译器也会为其生成桥接方法。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> class NaiveMerchant extends Merchant </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public java.lang.Double actionPrice(Customer); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)Ljava/lang/Double; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0001) ACC_PUBLIC </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=2, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: dconst_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: invokestatic Double.valueOf:(D)Ljava/lang/Double; </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: areturn </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public java.lang.Number actionPrice(Customer); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (LCustomer;)Ljava/lang/Number; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, 
ACC_SYNTHETIC </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> stack=2, 
locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_0 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: aload_1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: invokevirtual actionPrice:(LCustomer;)Ljava/lang/Double; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: areturn </div></td> </tr> </tbody> 
</table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> 
<p>我之前曾提到过，class 文件里允许出现两个同名、同参数类型但是不同返回类型的方法。这里的原方法和桥接方法便是其中一个例子。由于该桥接方法同样标注了 ACC_SYNTHETIC，因此，当在 
Java 程序中调用 NaiveMerchant.actionPrice 时，我们只会调用到原方法。</p> <h2>其他语法糖</h2> <p>在前面的篇章中，我已经介绍过了变长参数、try-with-resources 
以及在同一 catch 代码块中捕获多种异常等语法糖。下面我将列举另外两个常见的语法糖。</p> <p>foreach 循环允许 Java 程序在 for 循环里遍历数组或者 Iterable 
对象。对于数组来说，foreach 循环将从 0 开始逐一访问数组中的元素，直至数组的末尾。其等价的代码如下面所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(int[] array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (int item : array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> public void bar(int[] array) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int[] myArray = array; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int length = myArray.length; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (int i = 0; i &lt; length; i++) { </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int item = myArray[i]; </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>对于 Iterable 对象来说，foreach 循环将调用其 iterator 
方法，并且用它的 hasNext 以及 next 方法来遍历该 Iterable 对象中的元素。其等价的代码如下面所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(ArrayList&lt;Integer&gt; list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> for (Integer item : list) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // 等同于 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void bar(ArrayList&lt;Integer&gt; list) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Iterator&lt;Integer&gt; iterator = list.iterator(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> while (iterator.hasNext()) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Integer item = iterator.next(); </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>字符串 switch 编译而成的字节码看起来非常复杂，但实际上就是一个哈希桶。由于每个 
case 所截获的字符串都是常量值，因此，Java 编译器会将原来的字符串 switch 转换为 int 值 switch，比较所输入的字符串的哈希值。</p> <p>由于字符串哈希值很容易发生碰撞，因此，我们还需要用 
String.equals 逐个比较相同哈希值的字符串。</p> <p>如果你感兴趣的话，可以自己利用 javap 分析字符串 switch 编译而成的字节码。</p> <h2>总结与实践</h2> 
<p>今天我主要介绍了 Java 编译器对几个语法糖的处理。</p> <p>基本类型和其包装类型之间的自动转换，也就是自动装箱、自动拆箱，是通过加入 [Wrapper].valueOf（如 
Integer.valueOf）以及 [Wrapper].[primitive]Value（如 Integer.intValue）方法调用来实现的。</p> <p>Java 程序中的泛型信息会被擦除。具体来说，Java 
编译器将选取该泛型所能指代的所有类中层次最高的那个，作为替换泛型的具体类。</p> <p>由于 Java 语义与 Java 字节码中关于重写的定义并不一致，因此 Java 编译器会生成桥接方法作为适配器。此外，我还介绍了 
foreach 循环以及字符串 switch 的编译。</p> <p>今天的实践环节，你可以探索一下 Java 10 的 var 关键字，是否保存了泛型信息？是否支持自动装拆箱？</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> var value = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> var list = new ArrayList&lt;Integer&gt;(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> list.add(value); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // list.add("1"); 这一句能够编译吗？ </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 4 msec}
2020-11-19 20:15:08.803 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.805 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:08.809 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.811 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:15:08.818 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788108, 1605788108, 1, 'zh-hans', 0, 1, 1, 
0, '15丨Java语法糖与Java编译器', 1, 29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.828 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=29 
 {executed in 1 msec}
2020-11-19 20:15:08.831 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:08.837 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788108, 1605788108, 1, 'zh-hans', 0, 
1, 1, 0, '15丨Java语法糖与Java编译器', 'book', 1, 29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.848 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=29 
 {executed in 2 msec}
2020-11-19 20:15:08.850 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:08.854 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.856 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:08.862 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/0aa4746131210cf2c4f447a2e001d9d5?bkt=en-d3a65691252603d3f1c9dda757dfe9eb43df36b872507e177c93094e1e5f84b69aa8c97fe6113e36&fid=3757516097-778750-899115453401613&time=1605788107&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5kOv6Rf0aVUufSnsKxtAapvcrLo%3D&to=92&size=4812661&sta_dx=4812661&sta_cs=2353&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4812661&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-4c3537224aee47d48efa8ff84b049f7518cf2373b33da930028f2edd0c896aacf0108cc7bd40764c&sl=76480590&expires=8h&rt=pr&r=685617362&mlogid=7510852769147629593&vbdid=64799653&fin=15%E4%B8%A8Java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%8EJava%E7%BC%96%E8%AF%91%E5%99%A8.mp3&bflag=92,34-92&rtype=1&dp-logid=7510852769147629593&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=16c8192e22ea32f5808757febc63d52a6b72887835ab9e41&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=15%E4%B8%A8Java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%8EJava%E7%BC%96%E8%AF%91%E5%99%A8.mp3', 
29, 29) 
 {executed in 0 msec}
2020-11-19 20:15:08.869 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=29 
 {executed in 2 msec}
2020-11-19 20:15:08.871 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:08.877 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/0aa4746131210cf2c4f447a2e001d9d5?bkt=en-d3a65691252603d3f1c9dda757dfe9eb43df36b872507e177c93094e1e5f84b69aa8c97fe6113e36&fid=3757516097-778750-899115453401613&time=1605788107&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5kOv6Rf0aVUufSnsKxtAapvcrLo%3D&to=92&size=4812661&sta_dx=4812661&sta_cs=2353&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=4812661&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-4c3537224aee47d48efa8ff84b049f7518cf2373b33da930028f2edd0c896aacf0108cc7bd40764c&sl=76480590&expires=8h&rt=pr&r=685617362&mlogid=7510852769147629593&vbdid=64799653&fin=15%E4%B8%A8Java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%8EJava%E7%BC%96%E8%AF%91%E5%99%A8.mp3&bflag=92,34-92&rtype=1&dp-logid=7510852769147629593&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=16c8192e22ea32f5808757febc63d52a6b72887835ab9e41&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=15%E4%B8%A8Java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B8%8EJava%E7%BC%96%E8%AF%91%E5%99%A8.mp3', 
29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.883 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.885 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:08.888 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.890 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:08.903 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 本节还是比较容易理解的，也搞清楚了泛型相关的疑惑点，非常感谢。 
<br>小结如下： <br>1:Java语法糖-是一种帮助开发人员提高开发效率的小甜点，原理是将一些繁琐的事情交给编译器来处理，开发人员少做一些事情，当然，本纸上这些事情还必须要做，只是有编译器来做了 
<br> <br>2:Java语法糖有那几种呢？如下所示： <br>2-1:包装类型和基本类型间的转换，自动装箱和拆箱的设计 <br>2-2:泛型的设计 <br>2-3:变长参数的设计 
<br>2-4:try-with-resources，关闭资源的设计 <br>2-5:在同一个catch代码块中捕获多种异常 <br>2-6:finally代码块总是被执行的设计 <br>2-7:foreach循环数组的设计 
<br>2-8:foreach循环Iterable对象的设计 <br> <br>3:编译器的具体实现细节不是很清楚，猜测是识别出对应的语法然后填充上对应的代码，将语法糖还原成其本质-一些重复繁琐的代码块 
<br> <br>4:之前有同事问我泛型是怎么实现的？ <br>我讲不出来，只晓得使用泛型后，不需要写类型强转的代码了，如果类型不对也会有提示且编译失败，现在知道的多一点了，本质上类型强转的工作还是必须要做的，只是不是有开发人员来做了，由编译器来做，并且编译器会擦除掉对应的泛型信息，使用合适的父类型来代替，可能是Object类也可能是声明泛型时指定的继承的类 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 直到这节课逐渐感知到了学习jvm的妙处，我想将这专栏反复看和实践终能消化为自己的知识 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/9a/01/1489f98d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>^_^</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> C++ 是真泛型，java 较之算是伪泛型 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
确实</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>WL</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> invokestatic Double.valueOf:(D)Ljava/lang/Double; 
<br>想请教一下老师这个字节码中的(D)和java前的L的作用是标记什么, 查了半天都没查到, 希望老师回答一下. </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>东方</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> var保存了泛型信息 <br> <br>var定义变量必须直接初始化，基于初始化的值做类型推导，javac编译期间的语法糖 
<br> <br>所以不能声明函数的参数为var类型 <br> <br> <br>foreach语法糖，对于实现了迭代器Iterable&lt;T&gt;接口的类型，使用迭代器方法； 
<br>foreach对于数组和变长参数的处理方式与上述略有不同，先求数组长度，再做类似while循环遍历 <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/49/8b/3596a3e2.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>403</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 相比来看，c#的泛型是真泛型 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: ;)</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 每次看到示例代码的java字节码就犯懵，觉得很复杂，是不是有必要去了解下字节码 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 字节码其实不难的。我会专门写一篇来介绍一下。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/b6/ee3b4ef7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>herome</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 求老师画图啊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
这一篇貌似没啥地方能够画图的吧？请问你具体对哪一块有疑问？</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 奇怪的是，Java 并不支持对 
IntegerCache.low 的更改，也就是说，对于小于 -128 的整数，我们无法直接使用由 Java 核心类库所缓存的 Integer 对象。 <br>这个奇怪的现象到底是为啥呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: JDK认为用户不需要缓存小于-128的整数。这当然有可能是错误的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>任鹏斌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有点落后刚升级到jdk8对10还一无所知 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
Java新版本的语法糖并不多，我印象中10也只有var</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 从实现上说可以设计一个int类型的list，而jdk中arrayList是object类型，这样做是不是为了通用型考虑呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 6 msec}
2020-11-19 20:15:08.912 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.914 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:08.923 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">14</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 本节还是比较容易理解的，也搞清楚了泛型相关的疑惑点，非常感谢。 
<br>小结如下： <br>1:Java语法糖-是一种帮助开发人员提高开发效率的小甜点，原理是将一些繁琐的事情交给编译器来处理，开发人员少做一些事情，当然，本纸上这些事情还必须要做，只是有编译器来做了 
<br> <br>2:Java语法糖有那几种呢？如下所示： <br>2-1:包装类型和基本类型间的转换，自动装箱和拆箱的设计 <br>2-2:泛型的设计 <br>2-3:变长参数的设计 
<br>2-4:try-with-resources，关闭资源的设计 <br>2-5:在同一个catch代码块中捕获多种异常 <br>2-6:finally代码块总是被执行的设计 <br>2-7:foreach循环数组的设计 
<br>2-8:foreach循环Iterable对象的设计 <br> <br>3:编译器的具体实现细节不是很清楚，猜测是识别出对应的语法然后填充上对应的代码，将语法糖还原成其本质-一些重复繁琐的代码块 
<br> <br>4:之前有同事问我泛型是怎么实现的？ <br>我讲不出来，只晓得使用泛型后，不需要写类型强转的代码了，如果类型不对也会有提示且编译失败，现在知道的多一点了，本质上类型强转的工作还是必须要做的，只是不是有开发人员来做了，由编译器来做，并且编译器会擦除掉对应的泛型信息，使用合适的父类型来代替，可能是Object类也可能是声明泛型时指定的继承的类 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 赞</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>永烁星光</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">6</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 直到这节课逐渐感知到了学习jvm的妙处，我想将这专栏反复看和实践终能消化为自己的知识 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/9a/01/1489f98d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>^_^</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-13 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> C++ 是真泛型，java 较之算是伪泛型 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
确实</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>WL</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-14 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> invokestatic Double.valueOf:(D)Ljava/lang/Double; 
<br>想请教一下老师这个字节码中的(D)和java前的L的作用是标记什么, 查了半天都没查到, 希望老师回答一下. </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/f8/db/acd55fa4.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>东方</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> var保存了泛型信息 <br> <br>var定义变量必须直接初始化，基于初始化的值做类型推导，javac编译期间的语法糖 
<br> <br>所以不能声明函数的参数为var类型 <br> <br> <br>foreach语法糖，对于实现了迭代器Iterable&lt;T&gt;接口的类型，使用迭代器方法； 
<br>foreach对于数组和变长参数的处理方式与上述略有不同，先求数组长度，再做类似while循环遍历 <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/49/8b/3596a3e2.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>403</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 相比来看，c#的泛型是真泛型 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: ;)</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 每次看到示例代码的java字节码就犯懵，觉得很复杂，是不是有必要去了解下字节码 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 字节码其实不难的。我会专门写一篇来介绍一下。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/bf/b6/ee3b4ef7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>herome</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 求老师画图啊 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
这一篇貌似没啥地方能够画图的吧？请问你具体对哪一块有疑问？</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-25 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 奇怪的是，Java 并不支持对 
IntegerCache.low 的更改，也就是说，对于小于 -128 的整数，我们无法直接使用由 Java 核心类库所缓存的 Integer 对象。 <br>这个奇怪的现象到底是为啥呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: JDK认为用户不需要缓存小于-128的整数。这当然有可能是错误的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>任鹏斌</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有点落后刚升级到jdk8对10还一无所知 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
Java新版本的语法糖并不多，我印象中10也只有var</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/d4/f3/b73d8abf.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>三木子</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 从实现上说可以设计一个int类型的list，而jdk中arrayList是object类型，这样做是不是为了通用型考虑呢？ 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的</p> </div> </div></li>', 
0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 3 msec}
2020-11-19 20:15:08.933 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.935 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:08.939 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.941 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:08.947 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 29, 'https://static001.geekbang.org/resource/image/41/58/41fa3e1980c19c1acb310e5e2b00f558.jpg', 
29) 
 {executed in 1 msec}
2020-11-19 20:15:08.953 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.954 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:08.961 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 29, 'https://static001.geekbang.org/resource/image/41/58/41fa3e1980c19c1acb310e5e2b00f558.jpg', 
29) 
 {executed in 2 msec}
2020-11-19 20:15:08.967 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.969 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:08.975 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.980 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 20:15:08.982 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:08.988 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 29, 29) 
 {executed in 1 msec}
2020-11-19 20:15:08.994 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='35322757858255' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:15:08.996 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:32.588 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='35322757858255' 
and bookchecke0_.name='net_content' 
 {executed in 3 msec}
2020-11-19 20:15:32.594 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:32.601 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('35322757858255', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:15:32.604 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('35322757858255', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:15:32.607 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|61            |
|--------------|

2020-11-19 20:15:32.631 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='35322757858255' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:15:32.633 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:33.071 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='35322757858255' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:15:33.074 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:33.077 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('35322757858255', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:15:33.078 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('35322757858255', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:15:33.080 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|62            |
|--------------|

2020-11-19 20:15:33.162 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='35322757858255' 
 {executed in 1 msec}
2020-11-19 20:15:33.166 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:33.175 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788133, 1) 
 {executed in 1 msec}
2020-11-19 20:15:33.179 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788133, 1) 
 {executed in 0 msec}
2020-11-19 20:15:33.182 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|30            |
|--------------|

2020-11-19 20:15:33.266 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'cc1c6ed4-f8c6-4e87-a6dc-902c8a6fa1a3', 
30) 
 {executed in 1 msec}
2020-11-19 20:15:33.270 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'cc1c6ed4-f8c6-4e87-a6dc-902c8a6fa1a3', 30) 
 {executed in 0 msec}
2020-11-19 20:15:33.273 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|30            |
|--------------|

2020-11-19 20:15:33.368 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=30, revision_default=1, revision_timestamp=1605788133, 
revision_uid=1 where vid=30 
 {executed in 2 msec}
2020-11-19 20:15:33.454 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=30 
 {executed in 2 msec}
2020-11-19 20:15:33.458 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:33.475 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '35322757858255', 'zh-hans', 30, 30) 
 {executed in 5 msec}
2020-11-19 20:15:33.636 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.638 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:33.644 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '35322757858255', 'zh-hans', 30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.673 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=30 
 {executed in 2 msec}
2020-11-19 20:15:33.676 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:33.681 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=30 
 {executed in 1 msec}
2020-11-19 20:15:33.683 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:33.689 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 30, 0, 0, 19, 0, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.697 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.699 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:33.703 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=30 
 {executed in 0 msec}
2020-11-19 20:15:33.704 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:33.715 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在 Java 程序中，我们可以利用 synchronized 关键字来对程序进行加锁。它既可以用来声明一个 synchronized 
代码块，也可以直接标记静态方法或者实例方法。</p> <p>当声明 synchronized 代码块时，编译而成的字节码将包含 monitorenter 和 monitorexit 
指令。这两种指令均会消耗操作数栈上的一个引用类型的元素（也就是 synchronized 关键字括号里的引用），作为所要加锁解锁的锁对象。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(Object lock) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
synchronized (lock) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
lock.hashCode(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 上面的 Java 代码将编译为下面的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void foo(java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: dup 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: monitorenter </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokevirtual java/lang/Object.hashCode:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: monitorexit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: goto 19 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14: astore_3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 16: monitorexit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: aload_3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: athrow </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> from to target type </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 11 14 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14 17 14 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文稿中贴了一段包含 synchronized 代码块的 Java 代码，以及它所编译而成的字节码。你可能会留意到，上面的字节码中包含一个 
monitorenter 指令以及多个 monitorexit 指令。这是因为 Java 虚拟机需要确保所获得的锁在正常执行路径，以及异常执行路径上都能够被解锁。</p> <p><span 
class="reference">你可以根据我在介绍异常处理时介绍过的知识，对照字节码和异常处理表来构造所有可能的执行路径，看看在执行了 monitorenter 指令之后，是否都有执行 
monitorexit 指令。</span></p> <p>当用 synchronized 标记方法时，你会看到字节码中方法的访问标记包括 ACC_SYNCHRONIZED。该标记表示在进入该方法时，Java 
虚拟机需要进行 monitorenter 操作。而在退出该方法时，不管是正常返回，还是向调用者抛异常，Java 虚拟机均需要进行 monitorexit 操作。</p><!-- [[[read_end]]] 
--> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public synchronized void foo(Object lock) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> lock.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 上面的 Java 代码将编译为下面的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public synchronized void foo(java.lang.Object); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (Ljava/lang/Object;)V </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=1, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: invokevirtual java/lang/Object.hashCode:()I </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里 monitorenter 和 monitorexit 操作所对应的锁对象是隐式的。对于实例方法来说，这两个操作对应的锁对象是 
this；对于静态方法来说，这两个操作对应的锁对象则是所在类的 Class 实例。</p> <p>关于 monitorenter 和 monitorexit 的作用，我们可以抽象地理解为每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针。</p> 
<p>当执行 monitorenter 时，如果目标锁对象的计数器为 0，那么说明它没有被其他线程所持有。在这个情况下，Java 虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加 
1。</p> <p>在目标锁对象的计数器不为 0 的情况下，如果锁对象的持有线程是当前线程，那么 Java 虚拟机可以将其计数器加 1，否则需要等待，直至持有线程释放该锁。</p> 
<p>当执行 monitorexit 时，Java 虚拟机则需将锁对象的计数器减 1。当计数器减为 0 时，那便代表该锁已经被释放掉了。</p> <p>之所以采用这种计数器的方式，是为了允许同一个线程重复获取同一把锁。举个例子，如果一个 
Java 类中拥有多个 synchronized 方法，那么这些方法之间的相互调用，不管是直接的还是间接的，都会涉及对同一把锁的重复加锁操作。因此，我们需要设计这么一个可重入的特性，来避免编程里的隐式约束。</p> 
<p>说完抽象的锁算法，下面我们便来介绍 HotSpot 虚拟机中具体的锁实现。</p> <h2>重量级锁</h2> <p>重量级锁是 Java 虚拟机中最为基础的锁实现。在这种状态下，Java 
虚拟机会阻塞加锁失败的线程，并且在目标锁被释放的时候，唤醒这些线程。</p> <p>Java 线程的阻塞以及唤醒，都是依靠操作系统来完成的。举例来说，对于符合 posix 接口的操作系统（如 
macOS 和绝大部分的 Linux），上述操作是通过 pthread 的互斥锁（mutex）来实现的。此外，这些操作将涉及系统调用，需要从操作系统的用户态切换至内核态，其开销非常之大。</p> 
<p>为了尽量避免昂贵的线程阻塞、唤醒操作，Java 虚拟机会在线程进入阻塞状态之前，以及被唤醒后竞争不到锁的情况下，进入自旋状态，在处理器上空跑并且轮询锁是否被释放。如果此时锁恰好被释放了，那么当前线程便无须进入阻塞状态，而是直接获得这把锁。</p> 
<p>与线程阻塞相比，自旋状态可能会浪费大量的处理器资源。这是因为当前线程仍处于运行状况，只不过跑的是无用指令。它期望在运行无用指令的过程中，锁能够被释放出来。</p> <p>我们可以用等红绿灯作为例子。Java 
线程的阻塞相当于熄火停车，而自旋状态相当于怠速停车。如果红灯的等待时间非常长，那么熄火停车相对省油一些；如果红灯的等待时间非常短，比如说我们在 synchronized 代码块里只做了一个整型加法，那么在短时间内锁肯定会被释放出来，因此怠速停车更加合适。</p> 
<p>然而，对于 Java 虚拟机来说，它并不能看到红灯的剩余时间，也就没办法根据等待时间的长短来选择自旋还是阻塞。Java 虚拟机给出的方案是自适应自旋，根据以往自旋等待时是否能够获得锁，来动态调整自旋的时间（循环数目）。</p> 
<p>就我们的例子来说，如果之前不熄火等到了绿灯，那么这次不熄火的时间就长一点；如果之前不熄火没等到绿灯，那么这次不熄火的时间就短一点。</p> <p>自旋状态还带来另外一个副作用，那便是不公平的锁机制。处于阻塞状态的线程，并没有办法立刻竞争被释放的锁。然而，处于自旋状态的线程，则很有可能优先获得这把锁。</p> 
<h2>轻量级锁</h2> <p>你可能见到过深夜的十字路口，四个方向都闪黄灯的情况。由于深夜十字路口的车辆来往可能比较少，如果还设置红绿灯交替，那么很有可能出现四个方向仅有一辆车在等红灯的情况。</p> 
<p>因此，红绿灯可能被设置为闪黄灯的情况，代表车辆可以自由通过，但是司机需要注意观察（个人理解，实际意义请咨询交警部门）。</p> <p>Java 虚拟机也存在着类似的情形：多个线程在不同的时间段请求同一把锁，也就是说没有锁竞争。针对这种情形，Java 
虚拟机采用了轻量级锁，来避免重量级锁的阻塞以及唤醒。</p> <p>在介绍轻量级锁的原理之前，我们先来了解一下 Java 虚拟机是怎么区分轻量级锁和重量级锁的。</p> <p>（你可以参照<a 
href="https://wiki.openjdk.java.net/display/HotSpot/Synchronization">HotSpot Wiki</a>里这张图阅读。）</p> 
<p>在对象内存布局那一篇中我曾经介绍了对象头中的标记字段（mark word）。它的最后两位便被用来表示该对象的锁状态。其中，00 代表轻量级锁，01 代表无锁（或偏向锁），10 
代表重量级锁，11 则跟垃圾回收算法的标记有关。</p> <p>当进行加锁操作时，Java 虚拟机会判断是否已经是重量级锁。如果不是，它会在当前线程的当前栈桢中划出一块空间，作为该锁的锁记录，并且将锁对象的标记字段复制到该锁记录中。</p> 
<p>然后，Java 虚拟机会尝试用 CAS（compare-and-swap）操作替换锁对象的标记字段。这里解释一下，CAS 是一个原子操作，它会比较目标地址的值是否和期望值相等，如果相等，则替换为一个新的值。</p> 
<p>假设当前锁对象的标记字段为 X…XYZ，Java 虚拟机会比较该字段是否为 X…X01。如果是，则替换为刚才分配的锁记录的地址。由于内存对齐的缘故，它的最后两位为 00。此时，该线程已成功获得这把锁，可以继续执行了。</p> 
<p>如果不是 X…X01，那么有两种可能。第一，该线程重复获取同一把锁。此时，Java 虚拟机会将锁记录清零，以代表该锁被重复获取。第二，其他线程持有该锁。此时，Java 虚拟机会将这把锁膨胀为重量级锁，并且阻塞当前线程。</p> 
<p>当进行解锁操作时，如果当前锁记录（你可以将一个线程的所有锁记录想象成一个栈结构，每次加锁压入一条锁记录，解锁弹出一条锁记录，当前锁记录指的便是栈顶的锁记录）的值为 0，则代表重复进入同一把锁，直接返回即可。</p> 
<p>否则，Java 虚拟机会尝试用 CAS 操作，比较锁对象的标记字段的值是否为当前锁记录的地址。如果是，则替换为锁记录中的值，也就是锁对象原本的标记字段。此时，该线程已经成功释放这把锁。</p> 
<p>如果不是，则意味着这把锁已经被膨胀为重量级锁。此时，Java 虚拟机会进入重量级锁的释放过程，唤醒因竞争该锁而被阻塞了的线程。</p> <h2>偏向锁</h2> <p>如果说轻量级锁针对的情况很乐观，那么接下来的偏向锁针对的情况则更加乐观：从始至终只有一个线程请求某一把锁。</p> 
<p>这就好比你在私家庄园里装了个红绿灯，并且庄园里只有你在开车。偏向锁的做法便是在红绿灯处识别来车的车牌号。如果匹配到你的车牌号，那么直接亮绿灯。</p> <p>具体来说，在线程进行加锁时，如果该锁对象支持偏向锁，那么 
Java 虚拟机会通过 CAS 操作，将当前线程的地址记录在锁对象的标记字段之中，并且将标记字段的最后三位设置为 101。</p> <p>在接下来的运行过程中，每当有线程请求这把锁，Java 
虚拟机只需判断锁对象标记字段中：最后三位是否为 101，是否包含当前线程的地址，以及 epoch 值是否和锁对象的类的 epoch 值相同。如果都满足，那么当前线程持有该偏向锁，可以直接返回。</p> 
<p>这里的 epoch 值是一个什么概念呢？</p> <p>我们先从偏向锁的撤销讲起。当请求加锁的线程和锁对象标记字段保持的线程地址不匹配时（而且 epoch 值相等，如若不等，那么当前线程可以将该锁重偏向至自己），Java 
虚拟机需要撤销该偏向锁。这个撤销过程非常麻烦，它要求持有偏向锁的线程到达安全点，再将偏向锁替换成轻量级锁。</p> <p>如果某一类锁对象的总撤销数超过了一个阈值（对应 Java 虚拟机参数 
-XX:BiasedLockingBulkRebiasThreshold，默认为 20），那么 Java 虚拟机会宣布这个类的偏向锁失效。</p> <p>具体的做法便是在每个类中维护一个 
epoch 值，你可以理解为第几代偏向锁。当设置偏向锁时，Java 虚拟机需要将该 epoch 值复制到锁对象的标记字段中。</p> <p>在宣布某个类的偏向锁失效时，Java 虚拟机实则将该类的 
epoch 值加 1，表示之前那一代的偏向锁已经失效。而新设置的偏向锁则需要复制新的 epoch 值。</p> <p>为了保证当前持有偏向锁并且已加锁的线程不至于因此丢锁，Java 
虚拟机需要遍历所有线程的 Java 栈，找出该类已加锁的实例，并且将它们标记字段中的 epoch 值加 1。该操作需要所有线程处于安全点状态。</p> <p>如果总撤销数超过另一个阈值（对应 
Java 虚拟机参数 -XX:BiasedLockingBulkRevokeThreshold，默认值为 40），那么 Java 虚拟机会认为这个类已经不再适合偏向锁。此时，Java 
虚拟机会撤销该类实例的偏向锁，并且在之后的加锁过程中直接为该类实例设置轻量级锁。</p> <h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机中 synchronized 
关键字的实现，按照代价由高至低可分为重量级锁、轻量级锁和偏向锁三种。</p> <p>重量级锁会阻塞、唤醒请求加锁的线程。它针对的是多个线程同时竞争同一把锁的情况。Java 虚拟机采取了自适应自旋，来避免线程在面对非常小的 
synchronized 代码块时，仍会被阻塞、唤醒的情况。</p> <p>轻量级锁采用 CAS 操作，将锁对象的标记字段替换为一个指针，指向当前线程栈上的一块空间，存储着锁对象原本的标记字段。它针对的是多个线程在不同时间段申请同一把锁的情况。</p> 
<p>偏向锁只会在第一次请求时采用 CAS 操作，在锁对象的标记字段中记录下当前线程的地址。在之后的运行过程中，持有该偏向锁的线程的加锁操作将直接返回。它针对的是锁仅会被同一线程持有的情况。</p> 
<p>今天的实践环节，我们来验证一个坊间传闻：调用 Object.hashCode() 会关闭该对象的偏向锁 [1]。</p> <p>你可以采用参数 -XX:+PrintBiasedLockingStatistics 
来打印各类锁的个数。由于 C2 使用的是另外一个参数 -XX:+PrintPreciseBiasedLockingStatistics，因此你可以限制 Java 虚拟机仅使用 C1 
来即时编译（对应参数 -XX:TieredStopAtLevel=1）。</p> <ol> <li>通过参数 -XX:+UseBiasedLocking，比较开关偏向锁时的输出结果。</li> 
<li>在 main 方法的循环前添加 lock.hashCode 调用，并查看输出结果。</li> <li>在 Lock 类中复写 hashCode 方法，并查看输出结果。</li> 
<li>在 main 方法的循环前添加 System.identityHashCode 调用，并查看输出结果。</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with -XX:+UnlockDiagnosticVMOptions -XX:+PrintBiasedLockingStatistics -XX:TieredStopAtLevel=1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class SynchronizedTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static Lock lock = new Lock(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int counter = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
synchronized (lock) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
counter++; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws InterruptedException { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // lock.hashCode(); // Step 2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // System.identityHashCode(lock); // Step 
4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 1_000_000; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class Lock { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // @Override public int hashCode() { return 0; } // Step 3 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://blogs.oracle.com/dave/biased-locking-in-hotspot">https://blogs.oracle.com/dave/biased-locking-in-hotspot</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 30, 30) 
 {executed in 3 msec}
2020-11-19 20:15:33.727 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.729 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:33.739 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在 Java 程序中，我们可以利用 synchronized 关键字来对程序进行加锁。它既可以用来声明一个 synchronized 代码块，也可以直接标记静态方法或者实例方法。</p> 
<p>当声明 synchronized 代码块时，编译而成的字节码将包含 monitorenter 和 monitorexit 指令。这两种指令均会消耗操作数栈上的一个引用类型的元素（也就是 
synchronized 关键字括号里的引用），作为所要加锁解锁的锁对象。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void foo(Object lock) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> synchronized (lock) { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> lock.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// 上面的 Java 代码将编译为下面的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void foo(java.lang.Object); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 1: dup 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 2: astore_2 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 3: monitorenter </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: aload_1 </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 5: invokevirtual java/lang/Object.hashCode:()I 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 8: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 9: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 10: monitorexit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 11: goto 19 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14: astore_3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 15: aload_2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 16: monitorexit </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 17: aload_3 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 18: athrow </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 19: return </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> Exception table: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> from to target type </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 4 11 14 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 14 17 14 any </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>我在文稿中贴了一段包含 synchronized 代码块的 Java 代码，以及它所编译而成的字节码。你可能会留意到，上面的字节码中包含一个 
monitorenter 指令以及多个 monitorexit 指令。这是因为 Java 虚拟机需要确保所获得的锁在正常执行路径，以及异常执行路径上都能够被解锁。</p> <p><span 
class="reference">你可以根据我在介绍异常处理时介绍过的知识，对照字节码和异常处理表来构造所有可能的执行路径，看看在执行了 monitorenter 指令之后，是否都有执行 
monitorexit 指令。</span></p> <p>当用 synchronized 标记方法时，你会看到字节码中方法的访问标记包括 ACC_SYNCHRONIZED。该标记表示在进入该方法时，Java 
虚拟机需要进行 monitorenter 操作。而在退出该方法时，不管是正常返回，还是向调用者抛异常，Java 虚拟机均需要进行 monitorexit 操作。</p><!-- [[[read_end]]] 
--> <pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public synchronized void foo(Object lock) { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> lock.hashCode(); </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // 上面的 Java 代码将编译为下面的字节码 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public synchronized void foo(java.lang.Object); </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> descriptor: (Ljava/lang/Object;)V </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Code: </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> stack=1, locals=2, args_size=2 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 0: aload_1 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 1: invokevirtual java/lang/Object.hashCode:()I </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> 4: pop </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> 5: return </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里 monitorenter 和 monitorexit 操作所对应的锁对象是隐式的。对于实例方法来说，这两个操作对应的锁对象是 
this；对于静态方法来说，这两个操作对应的锁对象则是所在类的 Class 实例。</p> <p>关于 monitorenter 和 monitorexit 的作用，我们可以抽象地理解为每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针。</p> 
<p>当执行 monitorenter 时，如果目标锁对象的计数器为 0，那么说明它没有被其他线程所持有。在这个情况下，Java 虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加 
1。</p> <p>在目标锁对象的计数器不为 0 的情况下，如果锁对象的持有线程是当前线程，那么 Java 虚拟机可以将其计数器加 1，否则需要等待，直至持有线程释放该锁。</p> 
<p>当执行 monitorexit 时，Java 虚拟机则需将锁对象的计数器减 1。当计数器减为 0 时，那便代表该锁已经被释放掉了。</p> <p>之所以采用这种计数器的方式，是为了允许同一个线程重复获取同一把锁。举个例子，如果一个 
Java 类中拥有多个 synchronized 方法，那么这些方法之间的相互调用，不管是直接的还是间接的，都会涉及对同一把锁的重复加锁操作。因此，我们需要设计这么一个可重入的特性，来避免编程里的隐式约束。</p> 
<p>说完抽象的锁算法，下面我们便来介绍 HotSpot 虚拟机中具体的锁实现。</p> <h2>重量级锁</h2> <p>重量级锁是 Java 虚拟机中最为基础的锁实现。在这种状态下，Java 
虚拟机会阻塞加锁失败的线程，并且在目标锁被释放的时候，唤醒这些线程。</p> <p>Java 线程的阻塞以及唤醒，都是依靠操作系统来完成的。举例来说，对于符合 posix 接口的操作系统（如 
macOS 和绝大部分的 Linux），上述操作是通过 pthread 的互斥锁（mutex）来实现的。此外，这些操作将涉及系统调用，需要从操作系统的用户态切换至内核态，其开销非常之大。</p> 
<p>为了尽量避免昂贵的线程阻塞、唤醒操作，Java 虚拟机会在线程进入阻塞状态之前，以及被唤醒后竞争不到锁的情况下，进入自旋状态，在处理器上空跑并且轮询锁是否被释放。如果此时锁恰好被释放了，那么当前线程便无须进入阻塞状态，而是直接获得这把锁。</p> 
<p>与线程阻塞相比，自旋状态可能会浪费大量的处理器资源。这是因为当前线程仍处于运行状况，只不过跑的是无用指令。它期望在运行无用指令的过程中，锁能够被释放出来。</p> <p>我们可以用等红绿灯作为例子。Java 
线程的阻塞相当于熄火停车，而自旋状态相当于怠速停车。如果红灯的等待时间非常长，那么熄火停车相对省油一些；如果红灯的等待时间非常短，比如说我们在 synchronized 代码块里只做了一个整型加法，那么在短时间内锁肯定会被释放出来，因此怠速停车更加合适。</p> 
<p>然而，对于 Java 虚拟机来说，它并不能看到红灯的剩余时间，也就没办法根据等待时间的长短来选择自旋还是阻塞。Java 虚拟机给出的方案是自适应自旋，根据以往自旋等待时是否能够获得锁，来动态调整自旋的时间（循环数目）。</p> 
<p>就我们的例子来说，如果之前不熄火等到了绿灯，那么这次不熄火的时间就长一点；如果之前不熄火没等到绿灯，那么这次不熄火的时间就短一点。</p> <p>自旋状态还带来另外一个副作用，那便是不公平的锁机制。处于阻塞状态的线程，并没有办法立刻竞争被释放的锁。然而，处于自旋状态的线程，则很有可能优先获得这把锁。</p> 
<h2>轻量级锁</h2> <p>你可能见到过深夜的十字路口，四个方向都闪黄灯的情况。由于深夜十字路口的车辆来往可能比较少，如果还设置红绿灯交替，那么很有可能出现四个方向仅有一辆车在等红灯的情况。</p> 
<p>因此，红绿灯可能被设置为闪黄灯的情况，代表车辆可以自由通过，但是司机需要注意观察（个人理解，实际意义请咨询交警部门）。</p> <p>Java 虚拟机也存在着类似的情形：多个线程在不同的时间段请求同一把锁，也就是说没有锁竞争。针对这种情形，Java 
虚拟机采用了轻量级锁，来避免重量级锁的阻塞以及唤醒。</p> <p>在介绍轻量级锁的原理之前，我们先来了解一下 Java 虚拟机是怎么区分轻量级锁和重量级锁的。</p> <p>（你可以参照<a 
href="https://wiki.openjdk.java.net/display/HotSpot/Synchronization">HotSpot Wiki</a>里这张图阅读。）</p> 
<p>在对象内存布局那一篇中我曾经介绍了对象头中的标记字段（mark word）。它的最后两位便被用来表示该对象的锁状态。其中，00 代表轻量级锁，01 代表无锁（或偏向锁），10 
代表重量级锁，11 则跟垃圾回收算法的标记有关。</p> <p>当进行加锁操作时，Java 虚拟机会判断是否已经是重量级锁。如果不是，它会在当前线程的当前栈桢中划出一块空间，作为该锁的锁记录，并且将锁对象的标记字段复制到该锁记录中。</p> 
<p>然后，Java 虚拟机会尝试用 CAS（compare-and-swap）操作替换锁对象的标记字段。这里解释一下，CAS 是一个原子操作，它会比较目标地址的值是否和期望值相等，如果相等，则替换为一个新的值。</p> 
<p>假设当前锁对象的标记字段为 X…XYZ，Java 虚拟机会比较该字段是否为 X…X01。如果是，则替换为刚才分配的锁记录的地址。由于内存对齐的缘故，它的最后两位为 00。此时，该线程已成功获得这把锁，可以继续执行了。</p> 
<p>如果不是 X…X01，那么有两种可能。第一，该线程重复获取同一把锁。此时，Java 虚拟机会将锁记录清零，以代表该锁被重复获取。第二，其他线程持有该锁。此时，Java 虚拟机会将这把锁膨胀为重量级锁，并且阻塞当前线程。</p> 
<p>当进行解锁操作时，如果当前锁记录（你可以将一个线程的所有锁记录想象成一个栈结构，每次加锁压入一条锁记录，解锁弹出一条锁记录，当前锁记录指的便是栈顶的锁记录）的值为 0，则代表重复进入同一把锁，直接返回即可。</p> 
<p>否则，Java 虚拟机会尝试用 CAS 操作，比较锁对象的标记字段的值是否为当前锁记录的地址。如果是，则替换为锁记录中的值，也就是锁对象原本的标记字段。此时，该线程已经成功释放这把锁。</p> 
<p>如果不是，则意味着这把锁已经被膨胀为重量级锁。此时，Java 虚拟机会进入重量级锁的释放过程，唤醒因竞争该锁而被阻塞了的线程。</p> <h2>偏向锁</h2> <p>如果说轻量级锁针对的情况很乐观，那么接下来的偏向锁针对的情况则更加乐观：从始至终只有一个线程请求某一把锁。</p> 
<p>这就好比你在私家庄园里装了个红绿灯，并且庄园里只有你在开车。偏向锁的做法便是在红绿灯处识别来车的车牌号。如果匹配到你的车牌号，那么直接亮绿灯。</p> <p>具体来说，在线程进行加锁时，如果该锁对象支持偏向锁，那么 
Java 虚拟机会通过 CAS 操作，将当前线程的地址记录在锁对象的标记字段之中，并且将标记字段的最后三位设置为 101。</p> <p>在接下来的运行过程中，每当有线程请求这把锁，Java 
虚拟机只需判断锁对象标记字段中：最后三位是否为 101，是否包含当前线程的地址，以及 epoch 值是否和锁对象的类的 epoch 值相同。如果都满足，那么当前线程持有该偏向锁，可以直接返回。</p> 
<p>这里的 epoch 值是一个什么概念呢？</p> <p>我们先从偏向锁的撤销讲起。当请求加锁的线程和锁对象标记字段保持的线程地址不匹配时（而且 epoch 值相等，如若不等，那么当前线程可以将该锁重偏向至自己），Java 
虚拟机需要撤销该偏向锁。这个撤销过程非常麻烦，它要求持有偏向锁的线程到达安全点，再将偏向锁替换成轻量级锁。</p> <p>如果某一类锁对象的总撤销数超过了一个阈值（对应 Java 虚拟机参数 
-XX:BiasedLockingBulkRebiasThreshold，默认为 20），那么 Java 虚拟机会宣布这个类的偏向锁失效。</p> <p>具体的做法便是在每个类中维护一个 
epoch 值，你可以理解为第几代偏向锁。当设置偏向锁时，Java 虚拟机需要将该 epoch 值复制到锁对象的标记字段中。</p> <p>在宣布某个类的偏向锁失效时，Java 虚拟机实则将该类的 
epoch 值加 1，表示之前那一代的偏向锁已经失效。而新设置的偏向锁则需要复制新的 epoch 值。</p> <p>为了保证当前持有偏向锁并且已加锁的线程不至于因此丢锁，Java 
虚拟机需要遍历所有线程的 Java 栈，找出该类已加锁的实例，并且将它们标记字段中的 epoch 值加 1。该操作需要所有线程处于安全点状态。</p> <p>如果总撤销数超过另一个阈值（对应 
Java 虚拟机参数 -XX:BiasedLockingBulkRevokeThreshold，默认值为 40），那么 Java 虚拟机会认为这个类已经不再适合偏向锁。此时，Java 
虚拟机会撤销该类实例的偏向锁，并且在之后的加锁过程中直接为该类实例设置轻量级锁。</p> <h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机中 synchronized 
关键字的实现，按照代价由高至低可分为重量级锁、轻量级锁和偏向锁三种。</p> <p>重量级锁会阻塞、唤醒请求加锁的线程。它针对的是多个线程同时竞争同一把锁的情况。Java 虚拟机采取了自适应自旋，来避免线程在面对非常小的 
synchronized 代码块时，仍会被阻塞、唤醒的情况。</p> <p>轻量级锁采用 CAS 操作，将锁对象的标记字段替换为一个指针，指向当前线程栈上的一块空间，存储着锁对象原本的标记字段。它针对的是多个线程在不同时间段申请同一把锁的情况。</p> 
<p>偏向锁只会在第一次请求时采用 CAS 操作，在锁对象的标记字段中记录下当前线程的地址。在之后的运行过程中，持有该偏向锁的线程的加锁操作将直接返回。它针对的是锁仅会被同一线程持有的情况。</p> 
<p>今天的实践环节，我们来验证一个坊间传闻：调用 Object.hashCode() 会关闭该对象的偏向锁 [1]。</p> <p>你可以采用参数 -XX:+PrintBiasedLockingStatistics 
来打印各类锁的个数。由于 C2 使用的是另外一个参数 -XX:+PrintPreciseBiasedLockingStatistics，因此你可以限制 Java 虚拟机仅使用 C1 
来即时编译（对应参数 -XX:TieredStopAtLevel=1）。</p> <ol> <li>通过参数 -XX:+UseBiasedLocking，比较开关偏向锁时的输出结果。</li> 
<li>在 main 方法的循环前添加 lock.hashCode 调用，并查看输出结果。</li> <li>在 Lock 类中复写 hashCode 方法，并查看输出结果。</li> 
<li>在 main 方法的循环前添加 System.identityHashCode 调用，并查看输出结果。</li> </ol> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
// Run with -XX:+UnlockDiagnosticVMOptions -XX:+PrintBiasedLockingStatistics -XX:TieredStopAtLevel=1 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public class SynchronizedTest { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static Lock lock = new Lock(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static int counter = 0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void foo() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
synchronized (lock) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
counter++; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) throws InterruptedException { </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // lock.hashCode(); // Step 2 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // System.identityHashCode(lock); // Step 
4 </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (int i = 0; i &lt; 1_000_000; i++) 
{ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> foo(); </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> static class Lock { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> // @Override public int hashCode() { return 0; } // Step 3 </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>[1] <a href="https://blogs.oracle.com/dave/biased-locking-in-hotspot">https://blogs.oracle.com/dave/biased-locking-in-hotspot</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 30, 30) 
 {executed in 2 msec}
2020-11-19 20:15:33.750 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=30 
 {executed in 1 msec}
2020-11-19 20:15:33.752 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:33.756 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=30 
 {executed in 1 msec}
2020-11-19 20:15:33.758 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:15:33.764 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788133, 1605788133, 1, 'zh-hans', 0, 1, 1, 
0, '14丨Java虚拟机是怎么实现synchronized的？', 1, 30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.771 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=30 
 {executed in 2 msec}
2020-11-19 20:15:33.773 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:33.779 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788133, 1605788133, 1, 'zh-hans', 0, 
1, 1, 0, '14丨Java虚拟机是怎么实现synchronized的？', 'book', 1, 30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.785 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=30 
 {executed in 2 msec}
2020-11-19 20:15:33.786 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:33.790 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.792 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:33.798 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/40d759519e3a8d6b3bdd2a9ea3ebf825?bkt=en-2fb6763f1c8fb1011e8b28fd70ddcb5ecec0a1ee6328015f069d16d069fad8e7bafe3db15d192d25&fid=3757516097-778750-820960785056090&time=1605788131&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-mnqETI3uS%2F70xO%2B929%2BcHxeG9Gw%3D&to=92&size=6954075&sta_dx=6954075&sta_cs=4373&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6954075&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c19b6fc9d4df75783dbe54c87a32d608081891f98c88acb0462df05567a201abbb9a2ccdfc8a33e2&sl=76480590&expires=8h&rt=pr&r=279423513&mlogid=7510859320860467951&vbdid=64799653&fin=14%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0synchronized%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510859320860467951&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=26fa64dbec288224d73ff426bfb466088db015473ca5aae2305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=14%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0synchronized%E7%9A%84%EF%BC%9F.mp3', 
30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.813 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.814 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:33.821 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/40d759519e3a8d6b3bdd2a9ea3ebf825?bkt=en-2fb6763f1c8fb1011e8b28fd70ddcb5ecec0a1ee6328015f069d16d069fad8e7bafe3db15d192d25&fid=3757516097-778750-820960785056090&time=1605788131&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-mnqETI3uS%2F70xO%2B929%2BcHxeG9Gw%3D&to=92&size=6954075&sta_dx=6954075&sta_cs=4373&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CQingdao%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6954075&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-c19b6fc9d4df75783dbe54c87a32d608081891f98c88acb0462df05567a201abbb9a2ccdfc8a33e2&sl=76480590&expires=8h&rt=pr&r=279423513&mlogid=7510859320860467951&vbdid=64799653&fin=14%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0synchronized%E7%9A%84%EF%BC%9F.mp3&bflag=92,34-92&rtype=1&dp-logid=7510859320860467951&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=26fa64dbec288224d73ff426bfb466088db015473ca5aae2305a5e1275657320&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=14%E4%B8%A8Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0synchronized%E7%9A%84%EF%BC%9F.mp3', 
30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.827 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.829 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:33.832 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.834 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:33.847 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/8e/e7/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>谢阳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 如果不是 X…X01，那么有两种可能。第一，该线程重复获取同一把锁。此时，Java 虚拟机会将锁记录清零，以代表该锁被重复获取。第二，其他线程持有该锁。此时，Java 
虚拟机会将这把锁膨胀为重量级锁，并且阻塞当前线程。 <br> <br>老师这段不太明白。1 锁记录清零怎么理解？改变锁对象的标记字段吗？2 锁膨胀的时候其他线程还持有锁对象吧，这个时候膨胀会具体做什么操作？如果操作了锁对象的标记字段会影响稍后释放锁的cas吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/c9/f44cb7f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>爪哇夜未眠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 太抽象了，老师能画点儿图吗…… </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
不好意思哈，因为网上有很多图，忘了放个链接了。<br><br>你可以参考wiki.openjdk.java.net/display/HotSpot/Synchronization中的图。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 恩，今天才补上小结，因为听不明白了，后来反复听以及补上锁的相关知识才有点明白。 
<br>我认为雨迪确实应该补上点图，这样才更容易理解，否则确实抽象，另外，我觉得讲解的次序有点小问题。 <br>如果这样讲就更容易理解了（个人见解） <br>1:讲解一下锁的本质，锁到底是个什么东西？锁的特点容易理解，毕竟都见过摸过用过 
<br> <br>2:讲解一下锁的分类和特点，什么表锁、行锁、自旋锁、可重用锁、轻量锁、重量锁、阻塞锁、线程锁、进程锁、分布式锁、偏向锁等等吧！都是站在不同的角度或层级根据锁的特点，为了好区分给锁起的名字 
<br> <br>3:讲解一下JVM中的各种锁，讲解一下他们的特点和实现，然后讲解一下咱们本节的主角是属于哪一种或哪几种锁 <br> <br>4:我的理解，锁的本质-在程序世界里是一种保证资源正确竞争的机制，如果没有对同一资源竞争也就没有了锁存在的意义，在计算世界中资源引起竞争的核心基本是空间，有其是计算机的内存空间，当然数据肯定也是一种引起激烈竞争的资源，不过往往会体现到空间上去，因为计算机中的数据必定存于某空间地址之中的 
<br> <br>5:感觉明白可重用锁的实现原理了，这个也是雨迪讲的最细致的一种实现方式，恩，非常感谢🙏 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>本文的讲解流程是从通用锁算法到针对特殊情况的锁算法来的。一开始monitorenter是用重型锁的，然后为了针对没有竞争锁的情况有了轻型锁，再然后为了针对只有一个线程持有某个锁的情况有了偏向锁。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/57/449e76fb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QlDoors</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 练习试了无数遍，都没有偏向锁，后来上网查才发现需要加-XX:BiasedLockingStartupDelay=0。 
<br> <br>http://zhizus.com/2018-09-03-%E5%81%8F%E5%90%91%E9%94%81.html <br> <br>注意：Hotspot虚拟机在开机启动后有个延迟（4s），经过延迟后才会对每个创建的对象开启偏向锁。我们可以通过设置下面的参数来修改这个延迟，或者直接sleep一段时间-XX:BiasedLockingStartupDelay=0 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “当进行解锁操作时，如果当前锁记录（你可以将一个线程的所有锁记录想象成一个栈结构，每次加锁压入一条锁记录，解锁弹出一条锁记录，当前锁记录指的便是栈顶的锁记录）的值为 
0，则代表重复进入同一把锁，直接返回即可。” <br>这种情况也需要弹出当前锁记录的吧？ 不然锁记录一直是0不变了。 如果是我这样理解的话，重复获取同一把锁的话，不是简单地清零，而应该是把0作为一条新的锁记录压入栈顶。 
<br>不知道我这样理解对不？请老师指点 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！赞</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/cd/e1/368f872c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>NEO🍋</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师关于偏向锁有个疑问 “它针对的是锁仅会被同一线程持有的情况。” 如果只有一个线程持有锁 
还有必要加锁吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，这个属于应用程序的问题，JVM只是观察到这种情况，并尝试做出优化。<br><br>有一种可能，就是很长一段时间内，只有一个线程频繁加锁，后面换成另外的线程，这样前面那段时间可以用偏向锁。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/c9/cb/7b6802cc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>贾智文</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文中说轻量级锁因为内存对齐所以标识位是00，那么为什么重量级锁的时候，存储内容也是指针，却没有内存对齐呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0e/b1/aab3759b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>何yuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直认为synchronized是重量锁，是否也不一定？jvm处理的时候是先将当偏向锁处理，然后慢慢膨胀为重量级锁的是吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 默认情况下是的。以前有个延缓毫秒数-XX:BiasedLockingStartupDelay，一开始用轻量级锁，在启动四秒之后才开始用偏向锁。我记得Java 
9还是10默认值改为0了。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师请教个问题： <br>1：锁从偏向一直到重量级的过程是"单向不可逆"的，这个"单向不可逆"是限制在对象的整个生命周期，还是在对象到达了某个状态后再次有线程使用其作为锁对象还会继续重复这个过程？从每撤销一次对象的epoch值就会+1，而这个+1代表的就是偏向锁升级为轻量级锁，而每个对象又维护了一个epoch值代表对象撤销次数（偏向锁-&gt;轻量级锁次数），是不是就代表这个锁升级的过程会在不同的时间段重复发生n词？ 
<br>2：为什么要设置一个最大的撤销次数（epoch值），意义在哪里？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 1. 单向不可逆 针对一个对象的整个生命周期。<br><br>epoch+1发生在多次同一类型的实例的偏向锁撤销之后，存放在类型(Class)那里的。<br><br>2. 
当频繁检测到某个类的实例出现撤销偏向锁的，就代表这个类不适合用来搞偏向锁。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请教一下，不是很明白epoch的作用，偏向锁默认被撤销20次使偏向锁失效才更新这个字段，没有想明白epoch的必要性 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/70/3a/6b82e940.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>(^o^)</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> “否则，Java 虚拟机会尝试用 CAS 操作，比较锁对象的标记字段的值是否为当前锁记录的地址。如果是，则替换为锁记录中的值，也就是锁对象原本的标记字段。此时，该线程已经成功释放这把锁。 
<br> <br>如果不是，则意味着这把锁已经被膨胀为重量级锁。”升级为重量级锁的过程，会改变锁对象的什么信息呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>李亮亮</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 一个撤销阀值为40，一个撤销阀值为20 ，20这个表示超过这个次数那个这个偏向锁就换代了。epoch的值加1，如果撤销次数超过40就证明这个类不适合使用偏向锁。照这个数据来讲是不是意味着差不多换2代就表示该类不适合偏向锁了，不知道我理解的对不？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e4/6e/ef9aece4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ、今生绝...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪老师，我有个疑问：假设线程A加锁，CAS将锁对象对象头替换成指向线程A的Lock 
Record的地址，在这里，原值：对象mark word中的内容，也就是hashcode，期望值：本线程Lock Record地址，对象：锁对象，在替换成功后我们说线程A获得了锁，OK，线程A开始执行同步代码块，在它执行完之前，线程B来获取锁，发现属于轻量级锁标志，于是CAS替换mark 
word，此时CAS的原值仍然为为锁对象的mark word吧，而此时锁对象mark word中记录的不再是hashcode而是指向线程A的Lock Record的地址，但是对于CAS它管你对象头存的是什么，现在获取到什么，什么就是原值，于是：原值：对象头中指向线程A中LR的地址，期望值：线程B中LR（目前对他来说，是将锁对象中指向线程A中LR的地址存入本线程LR）的地址，目标对象：锁对象，怎么会CAS不成功？于是现在线程B也获取到锁，两个线程都会在执行同步代码块！我觉得我理解的哪块不对？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/91/51/234f9a73.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王肖武</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> “当进行加锁操作时，Java 虚拟机会判断是否已经是重量级锁。如果不是，它会在当前线程的当前栈桢中划出一块空间，作为该锁的锁记录，并且将锁对象的标记字段复制到该锁记录中。” 
<br>有个疑问麻烦老师帮解答一下：栈帧不是一遍连续的空间吗？大小不是固定的吗？划出的空间是从哪里分配出来的呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/db/a4/3a1112ca.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lincoln���...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 您好，文章写的挺好，读完有个问题想请教下： <br>当t1线程获取了某个对象锁（lock1）的偏向锁，还没执行完的时候，另外一个线程t2也尝试获取这个对象锁(lock1)，我看文章上说需要撤销偏向锁，等到达安全点的时候，再将偏向锁替换成轻量级锁。 
<br>我有个问题：两个线程同时竞争同一把锁的情况，轻量级锁也解决不了吧，只能用重量级锁解决吧？为什么还要替换成轻量级锁呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/09/30/ff83622b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>LINEZH</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有一个疑问, JVM是如何选择使用重量锁/轻量锁/自旋锁呢? 是在执行的时候根据锁和线程的情况决定吗, 
能不能说的具体一点? </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0e/1b/1902d6fa.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>第9根烟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这边验证了Object.hashCode() 不会关闭该对象的偏向锁。。不知道最后答案是什么？哪里有全篇的课后作业的答案？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/60/d9/829ac53b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>fangxuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-05 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 单线程情况下，开启偏向锁和不开启偏向锁，性能上有什么差别吗？差别在哪儿？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>yihang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师您好，我是这几天才开始学习这个专栏。有这么几个问题，觉得读完文章也未能找到答案，请老师解答： 
<br>1） 如果轻量级锁已经发现有竞争，膨胀为重量级锁，那么之前拥有锁的线程，解锁时会唤醒该对象上的阻塞线程。这句话我理解了，但这时对象上的Mark Word 还是重量级锁的指针（状态10）吗？直到最后一个线程释放了锁，对象上的Mark 
Word 仍然保持状态 10 还是会恢复到无锁的状态（01）？还是从这往后就始终保持重量级锁的状态了？ <br> <br>2）偏向锁中的 Rebias 和 revoke bias 应该是不同的概念吧，字面意思，后者应该是撤销偏向，而前者似乎是重用偏向。【如果某一类锁对象的总撤销数超过了一个阈值（对应 
Java 虚拟机参数 -XX:BiasedLockingBulkRebiasThreshold，默认为 20），那么 Java 虚拟机会宣布这个类的偏向锁失效。】说实话这句话真没看懂，什么叫【这个类的偏向锁失效】，感觉这个参数是为了优化偏向锁，能够让偏向锁得以重用 
<br>我在 stackoverflow上找了一篇解释： <br>subsequent bulk rebias is possible if and only if number of 
revokes more than BiasedLockingBulkRebiasThreshold and less than BiasedLockingBulkRevokeThreshold 
and the latest revoke was not later than BiasedLockingDecayTime, where all escaped variables 
are JVM properties. <br>不知道他说的是否在理？请指教，地址：https://stackoverflow.com/questions/46312817/does-java-ever-rebias-an-individual-lock 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/2d/ec4ed8ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>shawn</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师对于轻量级锁可以这样理解么？如下： “轻量级锁，b线程在锁竞争时，发现锁已经被a线程占用，则b线程不进入内核态，让b线程自旋，执行空循环，等待a线程释放锁。如果，完成自旋策略还是发现a线程没有释放锁，或者让c线程占用了。则b线程试图将轻量级锁升级为重量级锁。” 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 30, 30) 
 {executed in 5 msec}
2020-11-19 20:15:33.856 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.858 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:33.871 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/8e/e7/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>谢阳</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 如果不是 X…X01，那么有两种可能。第一，该线程重复获取同一把锁。此时，Java 虚拟机会将锁记录清零，以代表该锁被重复获取。第二，其他线程持有该锁。此时，Java 
虚拟机会将这把锁膨胀为重量级锁，并且阻塞当前线程。 <br> <br>老师这段不太明白。1 锁记录清零怎么理解？改变锁对象的标记字段吗？2 锁膨胀的时候其他线程还持有锁对象吧，这个时候膨胀会具体做什么操作？如果操作了锁对象的标记字段会影响稍后释放锁的cas吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/c9/f44cb7f3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>爪哇夜未眠</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">10</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 太抽象了，老师能画点儿图吗…… </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
不好意思哈，因为网上有很多图，忘了放个链接了。<br><br>你可以参考wiki.openjdk.java.net/display/HotSpot/Synchronization中的图。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>godtrue</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-01 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 恩，今天才补上小结，因为听不明白了，后来反复听以及补上锁的相关知识才有点明白。 
<br>我认为雨迪确实应该补上点图，这样才更容易理解，否则确实抽象，另外，我觉得讲解的次序有点小问题。 <br>如果这样讲就更容易理解了（个人见解） <br>1:讲解一下锁的本质，锁到底是个什么东西？锁的特点容易理解，毕竟都见过摸过用过 
<br> <br>2:讲解一下锁的分类和特点，什么表锁、行锁、自旋锁、可重用锁、轻量锁、重量锁、阻塞锁、线程锁、进程锁、分布式锁、偏向锁等等吧！都是站在不同的角度或层级根据锁的特点，为了好区分给锁起的名字 
<br> <br>3:讲解一下JVM中的各种锁，讲解一下他们的特点和实现，然后讲解一下咱们本节的主角是属于哪一种或哪几种锁 <br> <br>4:我的理解，锁的本质-在程序世界里是一种保证资源正确竞争的机制，如果没有对同一资源竞争也就没有了锁存在的意义，在计算世界中资源引起竞争的核心基本是空间，有其是计算机的内存空间，当然数据肯定也是一种引起激烈竞争的资源，不过往往会体现到空间上去，因为计算机中的数据必定存于某空间地址之中的 
<br> <br>5:感觉明白可重用锁的实现原理了，这个也是雨迪讲的最细致的一种实现方式，恩，非常感谢🙏 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 多谢建议！<br><br>本文的讲解流程是从通用锁算法到针对特殊情况的锁算法来的。一开始monitorenter是用重型锁的，然后为了针对没有竞争锁的情况有了轻型锁，再然后为了针对只有一个线程持有某个锁的情况有了偏向锁。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/59/57/449e76fb.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>QlDoors</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">5</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 练习试了无数遍，都没有偏向锁，后来上网查才发现需要加-XX:BiasedLockingStartupDelay=0。 
<br> <br>http://zhizus.com/2018-09-03-%E5%81%8F%E5%90%91%E9%94%81.html <br> <br>注意：Hotspot虚拟机在开机启动后有个延迟（4s），经过延迟后才会对每个创建的对象开启偏向锁。我们可以通过设置下面的参数来修改这个延迟，或者直接sleep一段时间-XX:BiasedLockingStartupDelay=0 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1Y9r3uuNQ1c5cbsk7XeVBEiamwwGsa7DuawliaFr6NG9yNZhdasOKXVdUpu1F3kVFibFWWZibeawjbg/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>code-arti...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">4</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> “当进行解锁操作时，如果当前锁记录（你可以将一个线程的所有锁记录想象成一个栈结构，每次加锁压入一条锁记录，解锁弹出一条锁记录，当前锁记录指的便是栈顶的锁记录）的值为 
0，则代表重复进入同一把锁，直接返回即可。” <br>这种情况也需要弹出当前锁记录的吧？ 不然锁记录一直是0不变了。 如果是我这样理解的话，重复获取同一把锁的话，不是简单地清零，而应该是把0作为一条新的锁记录压入栈顶。 
<br>不知道我这样理解对不？请老师指点 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 对的！赞</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/cd/e1/368f872c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>NEO🍋</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">3</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师关于偏向锁有个疑问 “它针对的是锁仅会被同一线程持有的情况。” 如果只有一个线程持有锁 
还有必要加锁吗？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div 
class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 哈，这个属于应用程序的问题，JVM只是观察到这种情况，并尝试做出优化。<br><br>有一种可能，就是很长一段时间内，只有一个线程频繁加锁，后面换成另外的线程，这样前面那段时间可以用偏向锁。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/c9/cb/7b6802cc.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>贾智文</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 文中说轻量级锁因为内存对齐所以标识位是00，那么为什么重量级锁的时候，存储内容也是指针，却没有内存对齐呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0e/b1/aab3759b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>何yuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">2</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 一直认为synchronized是重量锁，是否也不一定？jvm处理的时候是先将当偏向锁处理，然后慢慢膨胀为重量级锁的是吗？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 默认情况下是的。以前有个延缓毫秒数-XX:BiasedLockingStartupDelay，一开始用轻量级锁，在启动四秒之后才开始用偏向锁。我记得Java 
9还是10默认值改为0了。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_98716...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-10-18 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师请教个问题： <br>1：锁从偏向一直到重量级的过程是"单向不可逆"的，这个"单向不可逆"是限制在对象的整个生命周期，还是在对象到达了某个状态后再次有线程使用其作为锁对象还会继续重复这个过程？从每撤销一次对象的epoch值就会+1，而这个+1代表的就是偏向锁升级为轻量级锁，而每个对象又维护了一个epoch值代表对象撤销次数（偏向锁-&gt;轻量级锁次数），是不是就代表这个锁升级的过程会在不同的时间段重复发生n词？ 
<br>2：为什么要设置一个最大的撤销次数（epoch值），意义在哪里？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 1. 单向不可逆 针对一个对象的整个生命周期。<br><br>epoch+1发生在多次同一类型的实例的偏向锁撤销之后，存放在类型(Class)那里的。<br><br>2. 
当频繁检测到某个类的实例出现撤销偏向锁的，就代表这个类不适合用来搞偏向锁。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Scott</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 请教一下，不是很明白epoch的作用，偏向锁默认被撤销20次使偏向锁失效才更新这个字段，没有想明白epoch的必要性 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/70/3a/6b82e940.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>(^o^)</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> “否则，Java 虚拟机会尝试用 CAS 操作，比较锁对象的标记字段的值是否为当前锁记录的地址。如果是，则替换为锁记录中的值，也就是锁对象原本的标记字段。此时，该线程已经成功释放这把锁。 
<br> <br>如果不是，则意味着这把锁已经被膨胀为重量级锁。”升级为重量级锁的过程，会改变锁对象的什么信息呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>李亮亮</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-10 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 一个撤销阀值为40，一个撤销阀值为20 ，20这个表示超过这个次数那个这个偏向锁就换代了。epoch的值加1，如果撤销次数超过40就证明这个类不适合使用偏向锁。照这个数据来讲是不是意味着差不多换2代就表示该类不适合偏向锁了，不知道我理解的对不？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/e4/6e/ef9aece4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>ゞ、今生绝...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-04-08 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 雨迪老师，我有个疑问：假设线程A加锁，CAS将锁对象对象头替换成指向线程A的Lock 
Record的地址，在这里，原值：对象mark word中的内容，也就是hashcode，期望值：本线程Lock Record地址，对象：锁对象，在替换成功后我们说线程A获得了锁，OK，线程A开始执行同步代码块，在它执行完之前，线程B来获取锁，发现属于轻量级锁标志，于是CAS替换mark 
word，此时CAS的原值仍然为为锁对象的mark word吧，而此时锁对象mark word中记录的不再是hashcode而是指向线程A的Lock Record的地址，但是对于CAS它管你对象头存的是什么，现在获取到什么，什么就是原值，于是：原值：对象头中指向线程A中LR的地址，期望值：线程B中LR（目前对他来说，是将锁对象中指向线程A中LR的地址存入本线程LR）的地址，目标对象：锁对象，怎么会CAS不成功？于是现在线程B也获取到锁，两个线程都会在执行同步代码块！我觉得我理解的哪块不对？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/91/51/234f9a73.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>王肖武</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-07 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> “当进行加锁操作时，Java 虚拟机会判断是否已经是重量级锁。如果不是，它会在当前线程的当前栈桢中划出一块空间，作为该锁的锁记录，并且将锁对象的标记字段复制到该锁记录中。” 
<br>有个疑问麻烦老师帮解答一下：栈帧不是一遍连续的空间吗？大小不是固定的吗？划出的空间是从哪里分配出来的呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/db/a4/3a1112ca.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lincoln���...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-26 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 您好，文章写的挺好，读完有个问题想请教下： <br>当t1线程获取了某个对象锁（lock1）的偏向锁，还没执行完的时候，另外一个线程t2也尝试获取这个对象锁(lock1)，我看文章上说需要撤销偏向锁，等到达安全点的时候，再将偏向锁替换成轻量级锁。 
<br>我有个问题：两个线程同时竞争同一把锁的情况，轻量级锁也解决不了吧，只能用重量级锁解决吧？为什么还要替换成轻量级锁呢？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/12/09/30/ff83622b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>LINEZH</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 有一个疑问, JVM是如何选择使用重量锁/轻量锁/自旋锁呢? 是在执行的时候根据锁和线程的情况决定吗, 
能不能说的具体一点? </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0e/1b/1902d6fa.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>第9根烟</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-08 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 这边验证了Object.hashCode() 不会关闭该对象的偏向锁。。不知道最后答案是什么？哪里有全篇的课后作业的答案？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/60/d9/829ac53b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>fangxuan</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-05 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 单线程情况下，开启偏向锁和不开启偏向锁，性能上有什么差别吗？差别在哪儿？ 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>yihang</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-27 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师您好，我是这几天才开始学习这个专栏。有这么几个问题，觉得读完文章也未能找到答案，请老师解答： 
<br>1） 如果轻量级锁已经发现有竞争，膨胀为重量级锁，那么之前拥有锁的线程，解锁时会唤醒该对象上的阻塞线程。这句话我理解了，但这时对象上的Mark Word 还是重量级锁的指针（状态10）吗？直到最后一个线程释放了锁，对象上的Mark 
Word 仍然保持状态 10 还是会恢复到无锁的状态（01）？还是从这往后就始终保持重量级锁的状态了？ <br> <br>2）偏向锁中的 Rebias 和 revoke bias 应该是不同的概念吧，字面意思，后者应该是撤销偏向，而前者似乎是重用偏向。【如果某一类锁对象的总撤销数超过了一个阈值（对应 
Java 虚拟机参数 -XX:BiasedLockingBulkRebiasThreshold，默认为 20），那么 Java 虚拟机会宣布这个类的偏向锁失效。】说实话这句话真没看懂，什么叫【这个类的偏向锁失效】，感觉这个参数是为了优化偏向锁，能够让偏向锁得以重用 
<br>我在 stackoverflow上找了一篇解释： <br>subsequent bulk rebias is possible if and only if number of 
revokes more than BiasedLockingBulkRebiasThreshold and less than BiasedLockingBulkRevokeThreshold 
and the latest revoke was not later than BiasedLockingDecayTime, where all escaped variables 
are JVM properties. <br>不知道他说的是否在理？请指教，地址：https://stackoverflow.com/questions/46312817/does-java-ever-rebias-an-individual-lock 
<br> </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/6a/2d/ec4ed8ce.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>shawn</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-26 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 老师对于轻量级锁可以这样理解么？如下： “轻量级锁，b线程在锁竞争时，发现锁已经被a线程占用，则b线程不进入内核态，让b线程自旋，执行空循环，等待a线程释放锁。如果，完成自旋策略还是发现a线程没有释放锁，或者让c线程占用了。则b线程试图将轻量级锁升级为重量级锁。” 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li>', 
0, 'full_html', 'zh-hans', 30, 30) 
 {executed in 5 msec}
2020-11-19 20:15:33.881 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.883 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:33.886 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.888 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:33.895 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 30, 'https://static001.geekbang.org/resource/image/24/01/24c2733f6cb363952b2fb1d7607f8301.jpg', 
30) 
 {executed in 1 msec}
2020-11-19 20:15:33.901 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.903 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:33.909 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 30, 'https://static001.geekbang.org/resource/image/24/01/24c2733f6cb363952b2fb1d7607f8301.jpg', 
30) 
 {executed in 1 msec}
2020-11-19 20:15:33.915 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.917 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:33.923 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 30, 30) 
 {executed in 1 msec}
2020-11-19 20:15:33.929 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=30 
 {executed in 1 msec}
2020-11-19 20:15:33.931 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:33.937 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 30, 30) 
 {executed in 0 msec}
2020-11-19 20:15:33.943 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='319299995716834' 
and bookchecke0_.name='net_content' 
 {executed in 1 msec}
2020-11-19 20:15:33.945 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:55.998 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='319299995716834' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:15:56.002 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:56.011 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('319299995716834', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:15:56.014 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('319299995716834', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:15:56.017 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|63            |
|--------------|

2020-11-19 20:15:56.054 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='319299995716834' 
and bookchecke0_.name='media' 
 {executed in 2 msec}
2020-11-19 20:15:56.056 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:56.633 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='319299995716834' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:15:56.635 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:15:56.638 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('319299995716834', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:15:56.639 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('319299995716834', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:15:56.640 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|64            |
|--------------|

2020-11-19 20:15:56.653 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='319299995716834' 
 {executed in 1 msec}
2020-11-19 20:15:56.655 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:56.658 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788156, 1) 
 {executed in 1 msec}
2020-11-19 20:15:56.659 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788156, 1) 
 {executed in 0 msec}
2020-11-19 20:15:56.661 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|31            |
|--------------|

2020-11-19 20:15:56.671 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '262b556a-e638-4a77-8ddf-ac8e6af3dcd6', 
31) 
 {executed in 1 msec}
2020-11-19 20:15:56.672 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '262b556a-e638-4a77-8ddf-ac8e6af3dcd6', 31) 
 {executed in 0 msec}
2020-11-19 20:15:56.674 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|31            |
|--------------|

2020-11-19 20:15:56.687 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=31, revision_default=1, revision_timestamp=1605788156, 
revision_uid=1 where vid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.693 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.695 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:56.700 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '319299995716834', 'zh-hans', 31, 31) 
 {executed in 0 msec}
2020-11-19 20:15:56.706 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.708 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:56.714 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '319299995716834', 'zh-hans', 31, 31) 
 {executed in 1 msec}
2020-11-19 20:15:56.720 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.722 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:56.725 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.727 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:56.733 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 31, 0, 0, 19, 0, 31) 
 {executed in 1 msec}
2020-11-19 20:15:56.743 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.744 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:56.748 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.750 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:56.760 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>我们先来看一个反常识的例子。</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a=0, b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void method1() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r2 = a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void method2() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r1 = b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了两个共享变量 a 和 b，以及两个方法。第一个方法将局部变量 r2 
赋值为 a，然后将共享变量 b 赋值为 1。第二个方法将局部变量 r1 赋值为 b，然后将共享变量 a 赋值为 2。请问（r1，r2）的可能值都有哪些？</p> <p>在单线程环境下，我们可以先调用第一个方法，最终（r1，r2）为（1，0）；也可以先调用第二个方法，最终为（0，2）。</p> 
<p>在多线程环境下，假设这两个方法分别跑在两个不同的线程之上，如果 Java 虚拟机在执行了任一方法的第一条赋值语句之后便切换线程，那么最终结果将可能出现（0，0）的情况。</p> 
<p>除上述三种情况之外，Java 语言规范第 17.4 小节 [1] 还介绍了一种看似不可能的情况（1，2）。</p> <p>造成这一情况的原因有三个，分别为即时编译器的重排序，处理器的乱序执行，以及内存系统的重排序。由于后两种原因涉及具体的体系架构，我们暂且放到一边。下面我先来讲一下编译器优化的重排序是怎么一回事。</p> 
<p>首先需要说明一点，即时编译器（和处理器）需要保证程序能够遵守 as-if-serial 属性。通俗地说，就是在单线程情况下，要给程序一个顺序执行的假象。即经过重排序的执行结果要与顺序执行的结果保持一致。</p><!-- 
[[[read_end]]] --> <p>另外，如果两个操作之间存在数据依赖，那么即时编译器（和处理器）不能调整它们的顺序，否则将会造成程序语义的改变。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a=0, b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void method1() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r2 = a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. // Code uses b </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (r2 == 2) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，我扩展了先前例子中的第一个方法。新增的代码会先使用共享变量 
b 的值，然后再使用局部变量 r2 的值。</p> <p>此时，即时编译器有两种选择。</p> <p>第一，在一开始便将 a 加载至某一寄存器中，并且在接下来 b 的赋值操作以及使用 
b 的代码中避免使用该寄存器。第二，在真正使用 r2 时才将 a 加载至寄存器中。这么一来，在执行使用 b 的代码时，我们不再霸占一个通用寄存器，从而减少需要借助栈空间的情况。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a=0, b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method1() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (..) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int r2 
= a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> .. // Code uses r2 and rewrites a </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>另一个例子则是将第一个方法的代码放入一个循环中。除了原本的两条赋值语句之外，我只在循环中添加了使用 
r2，并且更新 a 的代码。由于对 b 的赋值是循环无关的，即时编译器很有可能将其移出循环之前，而对 r2 的赋值语句还停留在循环之中。</p> <p>如果想要复现这两个场景，你可能需要添加大量有意义的局部变量，来给寄存器分配算法施加压力。</p> 
<p>可以看到，即时编译器的优化可能将原本字段访问的执行顺序打乱。在单线程环境下，由于 as-if-serial 的保证，我们无须担心顺序执行不可能发生的情况，如（r1，r2）=（1，2）。</p> 
<p>然而，在多线程情况下，这种数据竞争（data race）的情况是有可能发生的。而且，Java 语言规范将其归咎于应用程序没有作出恰当的同步操作。</p> <h2>Java 内存模型与 
happens-before 关系</h2> <p>为了让应用程序能够免于数据竞争的干扰，Java 5 引入了明确定义的 Java 内存模型。其中最为重要的一个概念便是 happens-before 
关系。happens-before 关系是用来描述两个操作的内存可见性的。如果操作 X happens-before 操作 Y，那么 X 的结果对于 Y 可见。</p> <p>在同一个线程中，字节码的先后顺序（program 
order）也暗含了 happens-before 关系：在程序控制流路径中靠前的字节码 happens-before 靠后的字节码。然而，这并不意味着前者一定在后者之前执行。实际上，如果后者没有观测前者的运行结果，即后者没有数据依赖于前者，那么它们可能会被重排序。</p> 
<p>除了线程内的 happens-before 关系之外，Java 内存模型还定义了下述线程间的 happens-before 关系。</p> <ol> <li>解锁操作 happens-before 
之后（这里指时钟顺序先后）对同一把锁的加锁操作。</li> <li>volatile 字段的写操作 happens-before 之后（这里指时钟顺序先后）对同一字段的读操作。</li> 
<li>线程的启动操作（即 Thread.starts()） happens-before 该线程的第一个操作。</li> <li>线程的最后一个操作 happens-before 
它的终止事件（即其他线程通过 Thread.isAlive() 或 Thread.join() 判断该线程是否中止）。</li> <li>线程对其他线程的中断操作 happens-before 
被中断线程所收到的中断事件（即被中断线程的 InterruptedException 异常，或者第三个线程针对被中断线程的 Thread.interrupted 或者 Thread.isInterrupted 
调用）。</li> <li>构造器中的最后一个操作 happens-before 析构器的第一个操作。</li> </ol> <p>happens-before 关系还具备传递性。如果操作 
X happens-before 操作 Y，而操作 Y happens-before 操作 Z，那么操作 X happens-before 操作 Z。</p> <p>在文章开头的例子中，程序没有定义任何 
happens-before 关系，仅拥有默认的线程内 happens-before 关系。也就是 r2 的赋值操作 happens-before b 的赋值操作，r1 的赋值操作 
happens-before a 的赋值操作。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Thread1 Thread2 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> | | </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> b=1 | </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
| r1=b </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> | a=2 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> r2=a | </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>拥有 happens-before 
关系的两对赋值操作之间没有数据依赖，因此即时编译器、处理器都可能对其进行重排序。举例来说，只要将 b 的赋值操作排在 r2 的赋值操作之前，那么便可以按照赋值 b，赋值 r1，赋值 
a，赋值 r2 的顺序得到（1，2）的结果。</p> <p>那么如何解决这个问题呢？答案是，将 a 或者 b 设置为 volatile 字段。</p> <p>比如说将 b 设置为 volatile 
字段。假设 r1 能够观测到 b 的赋值结果 1。显然，这需要 b 的赋值操作在时钟顺序上先于 r1 的赋值操作。根据 volatile 字段的 happens-before 关系，我们知道 
b 的赋值操作 happens-before r1 的赋值操作。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int a=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> volatile int b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method1() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int r2 = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method2() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int r1 = b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> a = 
2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>根据同一个线程中，字节码顺序所暗含的 happens-before 关系，以及 happens-before 关系的传递性，我们可以轻易得出 r2 的赋值操作 
happens-before a 的赋值操作。</p> <p>这也就意味着，当对 a 进行赋值时，对 r2 的赋值操作已经完成了。因此，在 b 为 volatile 字段的情况下，程序不可能出现（r1，r2）为（1，2）的情况。</p> 
<p>由此可以看出，解决这种数据竞争问题的关键在于构造一个跨线程的 happens-before 关系 ：操作 X happens-before 操作 Y，使得操作 X 之前的字节码的结果对操作 
Y 之后的字节码可见。</p> <h2>Java 内存模型的底层实现</h2> <p>在理解了 Java 内存模型的概念之后，我们现在来看看它的底层实现。Java 内存模型是通过内存屏障（memory 
barrier）来禁止重排序的。</p> <p>对于即时编译器来说，它会针对前面提到的每一个 happens-before 关系，向正在编译的目标方法中插入相应的读读、读写、写读以及写写内存屏障。</p> 
<p>这些内存屏障会限制即时编译器的重排序操作。以 volatile 字段访问为例，所插入的内存屏障将不允许 volatile 字段写操作之前的内存访问被重排序至其之后；也将不允许 
volatile 字段读操作之后的内存访问被重排序至其之前。</p> <p>然后，即时编译器将根据具体的底层体系架构，将这些内存屏障替换成具体的 CPU 指令。以我们日常接触的 X86_64 
架构来说，读读、读写以及写写内存屏障是空操作（no-op），只有写读内存屏障会被替换成具体指令 [2]。</p> <p>在文章开头的例子中，method1 和 method2 之中的代码均属于先读后写（假设 
r1 和 r2 被存储在寄存器之中）。X86_64 架构的处理器并不能将读操作重排序至写操作之后，具体可参考 Intel Software Developer Manual Volumn 
3，8.2.3.3 小节。因此，我认为例子中的重排序必然是即时编译器造成的。</p> <p>举例来说，对于 volatile 字段，即时编译器将在 volatile 字段的读写操作前后各插入一些内存屏障。</p> 
<p>然而，在 X86_64 架构上，只有 volatile 字段写操作之后的写读内存屏障需要用具体指令来替代。（HotSpot 所选取的具体指令是 lock add DWORD PTR 
[rsp],0x0，而非 mfence[3]。）</p> <p>该具体指令的效果，可以简单理解为强制刷新处理器的写缓存。写缓存是处理器用来加速内存存储效率的一项技术。</p> <p>在碰到内存写操作时，处理器并不会等待该指令结束，而是直接开始下一指令，并且依赖于写缓存将更改的数据同步至主内存（main 
memory）之中。</p> <p>强制刷新写缓存，将使得当前线程写入 volatile 字段的值（以及写缓存中已有的其他内存修改），同步至主内存之中。</p> <p>由于内存写操作同时会无效化其他处理器所持有的、指向同一内存地址的缓存行，因此可以认为其他处理器能够立即见到该 
volatile 字段的最新值。</p> <h2>锁，volatile 字段，final 字段与安全发布</h2> <p>下面我来讲讲 Java 内存模型涉及的几个关键词。</p> 
<p>前面提到，锁操作同样具备 happens-before 关系。具体来说，解锁操作 happens-before 之后对同一把锁的加锁操作。实际上，在解锁时，Java 虚拟机同样需要强制刷新缓存，使得当前线程所修改的内存对其他线程可见。</p> 
<p>需要注意的是，锁操作的 happens-before 规则的关键字是同一把锁。也就意味着，如果编译器能够（通过逃逸分析）证明某把锁仅被同一线程持有，那么它可以移除相应的加锁解锁操作。</p> 
<p>因此也就不再强制刷新缓存。举个例子，即时编译后的 synchronized (new Object()) {}，可能等同于空操作，而不会强制刷新缓存。</p> <p>volatile 
字段可以看成一种轻量级的、不保证原子性的同步，其性能往往优于（至少不亚于）锁操作。然而，频繁地访问 volatile 字段也会因为不断地强制刷新缓存而严重影响程序的性能。</p> <p>在 
X86_64 平台上，只有 volatile 字段的写操作会强制刷新缓存。因此，理想情况下对 volatile 字段的使用应当多读少写，并且应当只有一个线程进行写操作。</p> <p>volatile 
字段的另一个特性是即时编译器无法将其分配到寄存器里。换句话说，volatile 字段的每次访问均需要直接从内存中读写。</p> <p>final 实例字段则涉及新建对象的发布问题。当一个对象包含 
final 实例字段时，我们希望其他线程只能看到已初始化的 final 实例字段。</p> <p>因此，即时编译器会在 final 字段的写操作后插入一个写写屏障，以防某些优化将新建对象的发布（即将实例对象写入一个共享引用中）重排序至 
final 字段的写操作之前。在 X86_64 平台上，写写屏障是空操作。</p> <p>新建对象的安全发布（safe publication）问题不仅仅包括 final 实例字段的可见性，还包括其他实例字段的可见性。</p> 
<p>当发布一个已初始化的对象时，我们希望所有已初始化的实例字段对其他线程可见。否则，其他线程可能见到一个仅部分初始化的新建对象，从而造成程序错误。这里我就不展开了。如果你感兴趣的话，可以参考这篇博客 
[4]。</p> <h2>总结与实践</h2> <p>今天我主要介绍了 Java 的内存模型。</p> <p>Java 内存模型通过定义了一系列的 happens-before 操作，让应用程序开发者能够轻易地表达不同线程的操作之间的内存可见性。</p> 
<p>在遵守 Java 内存模型的前提下，即时编译器以及底层体系架构能够调整内存访问操作，以达到性能优化的效果。如果开发者没有正确地利用 happens-before 规则，那么将可能导致数据竞争。</p> 
<p>Java 内存模型是通过内存屏障来禁止重排序的。对于即时编译器来说，内存屏障将限制它所能做的重排序优化。对于处理器来说，内存屏障会导致缓存的刷新操作。</p> <p>今天的实践环节，我们来复现文章初始的例子。由于复现需要大量的线程切换事件，因此我借助了 
OpenJDK CodeTools 项目的 jcstress 工具 [5]，来对该例子进行并发情况下的压力测试。具体的命令如下所示：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jcstress -DarchetypeArtifactId=jcstress-java-test-archetype 
-DarchetypeVersion=0.1.1 -DgroupId=org.sample -DartifactId=test -Dversion=1.0 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ cd test </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo ''package org.sample; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import org.openjdk.jcstress.annotations.*; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.openjdk.jcstress.infra.results.IntResult2; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @JCStressTest </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Outcome(id = {"0, 0", "0, 2", "1, 0"}, 
expect = Expect.ACCEPTABLE, desc = "Normal outcome") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Outcome(id = {"1, 2"}, expect = Expect.ACCEPTABLE_INTERESTING, 
desc = "Abnormal outcome") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@State </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class ConcurrencyTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int 
b=0; // 改成 volatile 试试？ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Actor </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
void method1(IntResult2 r) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
r.r2 = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 
1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Actor </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void method2(IntResult2 r) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> r.r1 = b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
}'' &gt; src/main/java/org/sample/ConcurrencyTest.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ mvn package </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -jar target/jcstress.jar </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果你想要复现非安全发布的情形，那么你可以试试这一测试用例 
[6]。</p> <p>[1] <a href="https://docs.oracle.com/javase/specs/jls/se10/html/jls-17.html#jls-17.4">https://docs.oracle.com/javase/specs/jls/se10/html/jls-17.html#jls-17.4</a><br> 
[2] <a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html">http://gee.cs.oswego.edu/dl/jmm/cookbook.html</a><br> 
[3] <a href="https://blogs.oracle.com/dave/instruction-selection-for-volatile-fences-:-mfence-vs-lock:add">https://blogs.oracle.com/dave/instruction-selection-for-volatile-fences-:-mfence-vs-lock:add</a><br> 
[4] <a href="http://vlkan.com/blog/post/2014/02/14/java-safe-publication/">http://vlkan.com/blog/post/2014/02/14/java-safe-publication/</a><br> 
[5] <a href="https://wiki.openjdk.java.net/display/CodeTools/jcstress">https://wiki.openjdk.java.net/display/CodeTools/jcstress</a><br> 
[6] <a href="http://hg.openjdk.java.net/code-tools/jcstress/file/64f2cf32fa0a/tests-custom/src/main/java/org/openjdk/jcstress/tests/unsafe/UnsafePublication.java">http://hg.openjdk.java.net/code-tools/jcstress/file/64f2cf32fa0a/tests-custom/src/main/java/org/openjdk/jcstress/tests/unsafe/UnsafePublication.java</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 31, 31) 
 {executed in 3 msec}
2020-11-19 20:15:56.772 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.774 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:56.785 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>我们先来看一个反常识的例子。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int a=0, b=0; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void method1() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int r2 = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> b = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void method2() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r1 = b; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>这里我定义了两个共享变量 a 和 b，以及两个方法。第一个方法将局部变量 r2 
赋值为 a，然后将共享变量 b 赋值为 1。第二个方法将局部变量 r1 赋值为 b，然后将共享变量 a 赋值为 2。请问（r1，r2）的可能值都有哪些？</p> <p>在单线程环境下，我们可以先调用第一个方法，最终（r1，r2）为（1，0）；也可以先调用第二个方法，最终为（0，2）。</p> 
<p>在多线程环境下，假设这两个方法分别跑在两个不同的线程之上，如果 Java 虚拟机在执行了任一方法的第一条赋值语句之后便切换线程，那么最终结果将可能出现（0，0）的情况。</p> 
<p>除上述三种情况之外，Java 语言规范第 17.4 小节 [1] 还介绍了一种看似不可能的情况（1，2）。</p> <p>造成这一情况的原因有三个，分别为即时编译器的重排序，处理器的乱序执行，以及内存系统的重排序。由于后两种原因涉及具体的体系架构，我们暂且放到一边。下面我先来讲一下编译器优化的重排序是怎么一回事。</p> 
<p>首先需要说明一点，即时编译器（和处理器）需要保证程序能够遵守 as-if-serial 属性。通俗地说，就是在单线程情况下，要给程序一个顺序执行的假象。即经过重排序的执行结果要与顺序执行的结果保持一致。</p><!-- 
[[[read_end]]] --> <p>另外，如果两个操作之间存在数据依赖，那么即时编译器（和处理器）不能调整它们的顺序，否则将会造成程序语义的改变。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a=0, b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> public void method1() { </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int r2 = a; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. // Code uses b </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> if (r2 == 2) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> .. </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>在上面这段代码中，我扩展了先前例子中的第一个方法。新增的代码会先使用共享变量 
b 的值，然后再使用局部变量 r2 的值。</p> <p>此时，即时编译器有两种选择。</p> <p>第一，在一开始便将 a 加载至某一寄存器中，并且在接下来 b 的赋值操作以及使用 
b 的代码中避免使用该寄存器。第二，在真正使用 r2 时才将 a 加载至寄存器中。这么一来，在执行使用 b 的代码时，我们不再霸占一个通用寄存器，从而减少需要借助栈空间的情况。</p> 
<pre style="position: relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int a=0, b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method1() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
for (..) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int r2 
= a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> .. // Code uses r2 and rewrites a </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <p>另一个例子则是将第一个方法的代码放入一个循环中。除了原本的两条赋值语句之外，我只在循环中添加了使用 
r2，并且更新 a 的代码。由于对 b 的赋值是循环无关的，即时编译器很有可能将其移出循环之前，而对 r2 的赋值语句还停留在循环之中。</p> <p>如果想要复现这两个场景，你可能需要添加大量有意义的局部变量，来给寄存器分配算法施加压力。</p> 
<p>可以看到，即时编译器的优化可能将原本字段访问的执行顺序打乱。在单线程环境下，由于 as-if-serial 的保证，我们无须担心顺序执行不可能发生的情况，如（r1，r2）=（1，2）。</p> 
<p>然而，在多线程情况下，这种数据竞争（data race）的情况是有可能发生的。而且，Java 语言规范将其归咎于应用程序没有作出恰当的同步操作。</p> <h2>Java 内存模型与 
happens-before 关系</h2> <p>为了让应用程序能够免于数据竞争的干扰，Java 5 引入了明确定义的 Java 内存模型。其中最为重要的一个概念便是 happens-before 
关系。happens-before 关系是用来描述两个操作的内存可见性的。如果操作 X happens-before 操作 Y，那么 X 的结果对于 Y 可见。</p> <p>在同一个线程中，字节码的先后顺序（program 
order）也暗含了 happens-before 关系：在程序控制流路径中靠前的字节码 happens-before 靠后的字节码。然而，这并不意味着前者一定在后者之前执行。实际上，如果后者没有观测前者的运行结果，即后者没有数据依赖于前者，那么它们可能会被重排序。</p> 
<p>除了线程内的 happens-before 关系之外，Java 内存模型还定义了下述线程间的 happens-before 关系。</p> <ol> <li>解锁操作 happens-before 
之后（这里指时钟顺序先后）对同一把锁的加锁操作。</li> <li>volatile 字段的写操作 happens-before 之后（这里指时钟顺序先后）对同一字段的读操作。</li> 
<li>线程的启动操作（即 Thread.starts()） happens-before 该线程的第一个操作。</li> <li>线程的最后一个操作 happens-before 
它的终止事件（即其他线程通过 Thread.isAlive() 或 Thread.join() 判断该线程是否中止）。</li> <li>线程对其他线程的中断操作 happens-before 
被中断线程所收到的中断事件（即被中断线程的 InterruptedException 异常，或者第三个线程针对被中断线程的 Thread.interrupted 或者 Thread.isInterrupted 
调用）。</li> <li>构造器中的最后一个操作 happens-before 析构器的第一个操作。</li> </ol> <p>happens-before 关系还具备传递性。如果操作 
X happens-before 操作 Y，而操作 Y happens-before 操作 Z，那么操作 X happens-before 操作 Z。</p> <p>在文章开头的例子中，程序没有定义任何 
happens-before 关系，仅拥有默认的线程内 happens-before 关系。也就是 r2 的赋值操作 happens-before b 的赋值操作，r1 的赋值操作 
happens-before a 的赋值操作。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> Thread1 Thread2 </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> | | </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> b=1 | </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
| r1=b </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> | a=2 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> r2=a | </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>拥有 happens-before 
关系的两对赋值操作之间没有数据依赖，因此即时编译器、处理器都可能对其进行重排序。举例来说，只要将 b 的赋值操作排在 r2 的赋值操作之前，那么便可以按照赋值 b，赋值 r1，赋值 
a，赋值 r2 的顺序得到（1，2）的结果。</p> <p>那么如何解决这个问题呢？答案是，将 a 或者 b 设置为 volatile 字段。</p> <p>比如说将 b 设置为 volatile 
字段。假设 r1 能够观测到 b 的赋值结果 1。显然，这需要 b 的赋值操作在时钟顺序上先于 r1 的赋值操作。根据 volatile 字段的 happens-before 关系，我们知道 
b 的赋值操作 happens-before r1 的赋值操作。</p> <pre style="position: relative;"><code> <table class="hljs-ln"> 
<tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> int a=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> volatile int b=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method1() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int r2 = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="6"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 1; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public void method2() { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int r1 = b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> a = 
2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> </tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <p>根据同一个线程中，字节码顺序所暗含的 happens-before 关系，以及 happens-before 关系的传递性，我们可以轻易得出 r2 的赋值操作 
happens-before a 的赋值操作。</p> <p>这也就意味着，当对 a 进行赋值时，对 r2 的赋值操作已经完成了。因此，在 b 为 volatile 字段的情况下，程序不可能出现（r1，r2）为（1，2）的情况。</p> 
<p>由此可以看出，解决这种数据竞争问题的关键在于构造一个跨线程的 happens-before 关系 ：操作 X happens-before 操作 Y，使得操作 X 之前的字节码的结果对操作 
Y 之后的字节码可见。</p> <h2>Java 内存模型的底层实现</h2> <p>在理解了 Java 内存模型的概念之后，我们现在来看看它的底层实现。Java 内存模型是通过内存屏障（memory 
barrier）来禁止重排序的。</p> <p>对于即时编译器来说，它会针对前面提到的每一个 happens-before 关系，向正在编译的目标方法中插入相应的读读、读写、写读以及写写内存屏障。</p> 
<p>这些内存屏障会限制即时编译器的重排序操作。以 volatile 字段访问为例，所插入的内存屏障将不允许 volatile 字段写操作之前的内存访问被重排序至其之后；也将不允许 
volatile 字段读操作之后的内存访问被重排序至其之前。</p> <p>然后，即时编译器将根据具体的底层体系架构，将这些内存屏障替换成具体的 CPU 指令。以我们日常接触的 X86_64 
架构来说，读读、读写以及写写内存屏障是空操作（no-op），只有写读内存屏障会被替换成具体指令 [2]。</p> <p>在文章开头的例子中，method1 和 method2 之中的代码均属于先读后写（假设 
r1 和 r2 被存储在寄存器之中）。X86_64 架构的处理器并不能将读操作重排序至写操作之后，具体可参考 Intel Software Developer Manual Volumn 
3，8.2.3.3 小节。因此，我认为例子中的重排序必然是即时编译器造成的。</p> <p>举例来说，对于 volatile 字段，即时编译器将在 volatile 字段的读写操作前后各插入一些内存屏障。</p> 
<p>然而，在 X86_64 架构上，只有 volatile 字段写操作之后的写读内存屏障需要用具体指令来替代。（HotSpot 所选取的具体指令是 lock add DWORD PTR 
[rsp],0x0，而非 mfence[3]。）</p> <p>该具体指令的效果，可以简单理解为强制刷新处理器的写缓存。写缓存是处理器用来加速内存存储效率的一项技术。</p> <p>在碰到内存写操作时，处理器并不会等待该指令结束，而是直接开始下一指令，并且依赖于写缓存将更改的数据同步至主内存（main 
memory）之中。</p> <p>强制刷新写缓存，将使得当前线程写入 volatile 字段的值（以及写缓存中已有的其他内存修改），同步至主内存之中。</p> <p>由于内存写操作同时会无效化其他处理器所持有的、指向同一内存地址的缓存行，因此可以认为其他处理器能够立即见到该 
volatile 字段的最新值。</p> <h2>锁，volatile 字段，final 字段与安全发布</h2> <p>下面我来讲讲 Java 内存模型涉及的几个关键词。</p> 
<p>前面提到，锁操作同样具备 happens-before 关系。具体来说，解锁操作 happens-before 之后对同一把锁的加锁操作。实际上，在解锁时，Java 虚拟机同样需要强制刷新缓存，使得当前线程所修改的内存对其他线程可见。</p> 
<p>需要注意的是，锁操作的 happens-before 规则的关键字是同一把锁。也就意味着，如果编译器能够（通过逃逸分析）证明某把锁仅被同一线程持有，那么它可以移除相应的加锁解锁操作。</p> 
<p>因此也就不再强制刷新缓存。举个例子，即时编译后的 synchronized (new Object()) {}，可能等同于空操作，而不会强制刷新缓存。</p> <p>volatile 
字段可以看成一种轻量级的、不保证原子性的同步，其性能往往优于（至少不亚于）锁操作。然而，频繁地访问 volatile 字段也会因为不断地强制刷新缓存而严重影响程序的性能。</p> <p>在 
X86_64 平台上，只有 volatile 字段的写操作会强制刷新缓存。因此，理想情况下对 volatile 字段的使用应当多读少写，并且应当只有一个线程进行写操作。</p> <p>volatile 
字段的另一个特性是即时编译器无法将其分配到寄存器里。换句话说，volatile 字段的每次访问均需要直接从内存中读写。</p> <p>final 实例字段则涉及新建对象的发布问题。当一个对象包含 
final 实例字段时，我们希望其他线程只能看到已初始化的 final 实例字段。</p> <p>因此，即时编译器会在 final 字段的写操作后插入一个写写屏障，以防某些优化将新建对象的发布（即将实例对象写入一个共享引用中）重排序至 
final 字段的写操作之前。在 X86_64 平台上，写写屏障是空操作。</p> <p>新建对象的安全发布（safe publication）问题不仅仅包括 final 实例字段的可见性，还包括其他实例字段的可见性。</p> 
<p>当发布一个已初始化的对象时，我们希望所有已初始化的实例字段对其他线程可见。否则，其他线程可能见到一个仅部分初始化的新建对象，从而造成程序错误。这里我就不展开了。如果你感兴趣的话，可以参考这篇博客 
[4]。</p> <h2>总结与实践</h2> <p>今天我主要介绍了 Java 的内存模型。</p> <p>Java 内存模型通过定义了一系列的 happens-before 操作，让应用程序开发者能够轻易地表达不同线程的操作之间的内存可见性。</p> 
<p>在遵守 Java 内存模型的前提下，即时编译器以及底层体系架构能够调整内存访问操作，以达到性能优化的效果。如果开发者没有正确地利用 happens-before 规则，那么将可能导致数据竞争。</p> 
<p>Java 内存模型是通过内存屏障来禁止重排序的。对于即时编译器来说，内存屏障将限制它所能做的重排序优化。对于处理器来说，内存屏障会导致缓存的刷新操作。</p> <p>今天的实践环节，我们来复现文章初始的例子。由于复现需要大量的线程切换事件，因此我借助了 
OpenJDK CodeTools 项目的 jcstress 工具 [5]，来对该例子进行并发情况下的压力测试。具体的命令如下所示：</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
$ mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jcstress -DarchetypeArtifactId=jcstress-java-test-archetype 
-DarchetypeVersion=0.1.1 -DgroupId=org.sample -DartifactId=test -Dversion=1.0 </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> $ cd test </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ echo ''package org.sample; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> import org.openjdk.jcstress.annotations.*; </div></td> </tr> <tr> 
<td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> import org.openjdk.jcstress.infra.results.IntResult2; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @JCStressTest </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Outcome(id = {"0, 0", "0, 2", "1, 0"}, 
expect = Expect.ACCEPTABLE, desc = "Normal outcome") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> @Outcome(id = {"1, 2"}, expect = Expect.ACCEPTABLE_INTERESTING, 
desc = "Abnormal outcome") </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@State </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
class ConcurrencyTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
int a=0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="12"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> int 
b=0; // 改成 volatile 试试？ </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="13"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
@Actor </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="14"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> public 
void method1(IntResult2 r) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="15"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
r.r2 = a; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="16"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> b = 
1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> @Actor </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> public void method2(IntResult2 r) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> r.r1 = b; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> a = 2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
}'' &gt; src/main/java/org/sample/ConcurrencyTest.java </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ mvn package </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> $ java -jar target/jcstress.jar </div></td> </tr> </tbody> </table></code> 
<div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>如果你想要复现非安全发布的情形，那么你可以试试这一测试用例 
[6]。</p> <p>[1] <a href="https://docs.oracle.com/javase/specs/jls/se10/html/jls-17.html#jls-17.4">https://docs.oracle.com/javase/specs/jls/se10/html/jls-17.html#jls-17.4</a><br> 
[2] <a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html">http://gee.cs.oswego.edu/dl/jmm/cookbook.html</a><br> 
[3] <a href="https://blogs.oracle.com/dave/instruction-selection-for-volatile-fences-:-mfence-vs-lock:add">https://blogs.oracle.com/dave/instruction-selection-for-volatile-fences-:-mfence-vs-lock:add</a><br> 
[4] <a href="http://vlkan.com/blog/post/2014/02/14/java-safe-publication/">http://vlkan.com/blog/post/2014/02/14/java-safe-publication/</a><br> 
[5] <a href="https://wiki.openjdk.java.net/display/CodeTools/jcstress">https://wiki.openjdk.java.net/display/CodeTools/jcstress</a><br> 
[6] <a href="http://hg.openjdk.java.net/code-tools/jcstress/file/64f2cf32fa0a/tests-custom/src/main/java/org/openjdk/jcstress/tests/unsafe/UnsafePublication.java">http://hg.openjdk.java.net/code-tools/jcstress/file/64f2cf32fa0a/tests-custom/src/main/java/org/openjdk/jcstress/tests/unsafe/UnsafePublication.java</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 31, 31) 
 {executed in 2 msec}
2020-11-19 20:15:56.798 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.800 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:56.804 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.806 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:15:56.812 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788156, 1605788156, 1, 'zh-hans', 0, 1, 1, 
0, '13丨Java内存模型', 1, 31, 31) 
 {executed in 1 msec}
2020-11-19 20:15:56.818 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=31 
 {executed in 1 msec}
2020-11-19 20:15:56.820 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:56.826 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788156, 1605788156, 1, 'zh-hans', 0, 
1, 1, 0, '13丨Java内存模型', 'book', 1, 31, 31) 
 {executed in 0 msec}
2020-11-19 20:15:56.833 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.834 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:56.837 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=31 
 {executed in 0 msec}
2020-11-19 20:15:56.839 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:56.848 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/d4577c0c83b3d7b50d90cfa5eaa8ffca?bkt=en-07c9b0a504a370605fab38fac87650fff40fcc6a9ca5bc7a41dc25192b8daca6e8e4a1989d655a31&fid=3757516097-778750-725369704742474&time=1605788155&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5ZQQ8Zfa4mCvdB%2BatvxVMMyj%2Fcc%3D&to=92&size=6745722&sta_dx=6745722&sta_cs=4383&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6745722&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-3ca4ec8c46ad0b6bee0717c418002acbe9cbfda827dc22434f44762d1db6dfbd3b4da1f362016d43&sl=76480590&expires=8h&rt=pr&r=314745811&mlogid=7510865610921361892&vbdid=64799653&fin=13%E4%B8%A8Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.mp3&bflag=92,34-92&rtype=1&dp-logid=7510865610921361892&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=78cccb630bb0656e502f5eb078dde1cbf2ecb9a5b3b597ae&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=13%E4%B8%A8Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.mp3', 
31, 31) 
 {executed in 4 msec}
2020-11-19 20:15:56.854 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.856 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:56.865 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/d4577c0c83b3d7b50d90cfa5eaa8ffca?bkt=en-07c9b0a504a370605fab38fac87650fff40fcc6a9ca5bc7a41dc25192b8daca6e8e4a1989d655a31&fid=3757516097-778750-725369704742474&time=1605788155&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5ZQQ8Zfa4mCvdB%2BatvxVMMyj%2Fcc%3D&to=92&size=6745722&sta_dx=6745722&sta_cs=4383&sta_ft=mp3&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Ccnc&ctime=1567182965&mtime=1605787492&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=6745722&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-3ca4ec8c46ad0b6bee0717c418002acbe9cbfda827dc22434f44762d1db6dfbd3b4da1f362016d43&sl=76480590&expires=8h&rt=pr&r=314745811&mlogid=7510865610921361892&vbdid=64799653&fin=13%E4%B8%A8Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.mp3&bflag=92,34-92&rtype=1&dp-logid=7510865610921361892&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=78cccb630bb0656e502f5eb078dde1cbf2ecb9a5b3b597ae&hflag=30&adg=c_0f3c8fb981bae1fdae375754a6f1d609&reqlabel=778750_l_eeb31e180410b8be0e62f686c2b42c5d_-1_43d73532db4f9890a29565ef474ca519&ibp=1&by=themis&filename=13%E4%B8%A8Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.mp3', 
31, 31) 
 {executed in 4 msec}
2020-11-19 20:15:56.871 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.873 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:56.876 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.878 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:56.890 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5e/ec/70c8d94d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大场镇车王</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">4</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师 为什么volatile内存屏障不允许所有写操作之前的读操作被重排序到写操作之后？前面不是说volatile的写操作happens 
before对用一字段的读操作吗 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: volatile字段的happens-before关系指的是在两个不同线程中，volatile的写操作 
happens-before 之后对同一字段的读操作。这里有个关键字之后，指的是时间上的先后。也就是我这边写，你之后再读就一定能读得到我刚刚写的值。普通字段则没有这个保证。<br><br>屏障不允许重排序是针对即时编译器的。写后对同一字段的读，属于数据依赖，本来也不可以重排序的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/9f/71345740.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>黑崽</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
请教个问题。刚才有说不会把volatile放到寄存器，但是应该会在栈里面对吧。直接读取主内存，读写的是栈数据，然后利用堆内存和栈上数据是利用写缓存刷新同步的？ </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 我可能没有在原文中讲清楚。这里指的是volatile变量不能被分配到寄存器中，但是计算还是加载到寄存器中来计算的。<br><br>所谓的分配到寄存器中，你可以理解为编译器将内存中的值缓存在寄存器中，之后一直用访问寄存器来代表对这个内存的访问的。假设我们要遍历一个数组，数组的长度是内存中的值。由于我们每次循环都要比较一次，因此编译器决定把它放在寄存器中，免得每次比较都要读一次内存。对于会更改的内存值，编译器也可以先缓存至寄存器，最后更新回内存即可。<br><br>Volatile会禁止上述优化。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0c/2f/54f7f676.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Jerry Ch...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-08-21 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 博客在哪里啊？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 文末[4]所指向的链接。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>追梦</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，求讲解下jvm中代码如何实现的内存屏障 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 即时编译器生成的代码里会使用CPU的内存屏障指令。HotSpot采用的lock前缀的指令，lock add DWORD PTR 
[rsp] 0。它也会刷缓存。<br><br>至于在即时编译器里禁止重排序所使用的”内存屏障”，就是一个特殊的编译器中间表达形式节点。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>qpm</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师我提个问题。一个共享对象的变量是非volatile的，那么这个变量的写入会先写到寄存器上，再写回内存吗？那么jvm是不是无论如何都不保证啥时候变量的值会写回内存。假如另一个线程加锁访问这个变量，是不是jvm也不保证它能拿到最新数据。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的！如果即时编译器把那个变量放在寄存器里维护，那么另一个线程也没辙。</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a0/47/620308a3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Alex 1984</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-08-20 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
老师，我在一些技术文章里看到说 volatile 的变量是存在工作内存，这个工作内存是一个什么概念？ </div> <!----> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 工作内存是JMM抽象出来的一个概念。你可以映射到实际的CPU缓存。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">22</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 恩，这节听了好几遍，也读了几遍，最后还是感觉蒙蒙的。 <br>下面说下我的感受： <br>1:一图胜千言，尤其对于描述复杂的东西，这个建议其他同学也有提议的，希望雨迪采纳一下 
<br> <br>2:感觉有些概念没有解释，比如： <br>2-1:Java内存模型，这节不就是要讲Java内存类型是什么？有什么特点？为什么这么设计嘛？不过我没看到这些内容，当然，特点是讲了的 
happens-before 机制 <br>2-2:内存屏蔽，这是什么意思？它怎么就能禁止重排序啦？还有有其引申出的各种屏蔽是怎么回事呢？也没完全明白 <br> <br> <br>3:前面讲 
as-if-serial 大概明白什么意思了，多处理器为了提高效率会采用流水线的方式来执行程序指令，但是同时要保证程序执行逻辑的正确性，所以，实际执行程序的指令和代码层面上会有不同，这个是由编译器来保证的，虽然执行逻辑不同但是程序逻辑是没变的，单线程没问题，但是多线程就变得复杂一些了，光靠这种方式保证不了啦，所以引出了下文 
<br> <br>4:happens-before，这个概念和作用比较容易理解，线程内有这种关系，线程间更有，这个机制我认为就是为了多线程环境下为了保证程序逻辑正确性的一种方式，不过它的具体实现细节感觉没理解，不清楚他是怎么办到的 
<br> <br>5:volatile 这个关键字之前也学习过，作用是保证内容的修改对所有线程可见，原理是修改后同步更新所有的内容，这是因为内存和处理器直接还是存在距离的，比如：内存-一级缓存-二级缓存-各种寄存器-cpu，如果是内存-cpu，则不会有这种问题了，不过性能也就不行了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以配合程晓明大大的《深入理解Java内存模型》 <br>https://www.infoq.cn/article/java_memory_model 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/3a/cb/97dee373.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>啃yi嘴泥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，关于指令重排序有点不太理解，指令重排序的粒度是方法级别的，还是整个源文件级别的。文中说道，b 
加了volatile后，能够保证 b=1 先于r1=b ，这个我能理解，但是如何保证不会因为指令重排导致 b=1 先于r2=a发生呢？文中虽然说了，同一个线程中，字节码顺序暗含了r2=a 
happen before b=1，但是文中也提到了，拥有happen-before关系的两对赋值操作之间没有数据依赖，处理器可以指令重排序。r2=a 和b=1之间没有数据依赖呀！不好意思，这块有点迷糊，老师能给详细解答下不？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 首先，b加了volatile之后，并不能保证b=1一定先于r1=b，而是保证r1=b始终能够看到b的最新值。比如说b=1;b=2，之后在另一个CPU上执行r1=b，那么r1会被赋值为2。如果先执行r1=b，然后在另外一个CPU上执行b=1和b=2，那么r1将看到b=1之前的值。<br><br>在没有标记volatile的时候，同一线程中，r2=a和b=1存在happens 
before关系，但因为没有数据依赖可以重排列。一旦标记了volatile，即时编译器和CPU需要考虑到多线程happens-before关系，因此不能自由地重排序。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/56/43/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阿巍-豆夫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于Volatile, 我想问下，如果是单个cpu的系统上运行多线程的程序，是不是这个volative就没有效果了？ 
因为大家都使用同一个寄存器。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 理论上，因为都使用同一套缓存，所以不需要volatile。实际实现中，对编译器不能重排列的限制还是存在的，但具体的memory 
barrier指令的实现是no-op。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/51/f309515c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>冬末未末</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> happen-before 在这里不能理解成在什么之前发生，它和时间没有任何关系。个人感觉解释成“生效可见于” 
更准确。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/5d/e50cf9c7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kenneth</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 同求讲解该问题，谢谢老师！： <br>啃yi嘴泥 <br>老师你好，关于指令重排序有点不太理解，指令重排序的粒度是方法级别的，还是整个源文件级别的。文中说道，b 
加了volatile后，能够保证 b=1 先于r1=b ，这个我能理解，但是如何保证不会因为指令重排导致 b=1 先于r2=a发生呢？文中虽然说了，同一个线程中，字节码顺序暗含了r2=a 
happen before b=1，但是文中也提到了，拥有happen-before关系的两对赋值操作之间没有数据依赖，处理器可以指令重排序。r2=a 和b=1之间没有数据依赖呀！不好意思，这块有点迷糊，老师能给详细解答下不？ 
<br>2018-08-24 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 嗯，我回到原问题上哈</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，既然有写缓存，是不是也有读缓存呢？强制刷新写缓存，无效化相应的内存数据，那么这些内存数据的读缓存也就失效了，需要重新加载最新数据，是否可以这样理解？ 
<br> <br>另外强制刷新写缓存是否也有粒度一说？就是我们加的锁也有粒度之分，那么所触发的强制刷新写缓存的区域可能不一样？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/48/00/5451e224.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>MacHIne���...</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 大大，我的理解是这样 上面的volatile并没有保证 读写 b的顺序 而唯一出现(1,2)的可能就是 
a的写入在读取前 b的写入也在读取前 而根据hb规则 当出现b的写入在读取前时 编译器无法对1线程进行重排序 那么对 <br>a的读取就发生在了写入前， 也就避免了 （1，2），请问这样想对吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epLLXBLBLgticobxvBYRezd304Y66Q8ibYCl7mG9dvTHGrx9obRcn7ZmJBcib3ibsQPIX3xIbNYiaAUrOA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_c991e...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-07 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，你答复的有一段话，我有疑问 <br>首先，b加了volatile之后，并不能保证b=1一定先于r1=b，而是保证r1=b始终能够看到b的最新值。比如说b=1;b=2，之后在另一个CPU上执行r1=b，那么r1会被赋值为2。如果先执行r1=b，然后在另外一个CPU上执行b=1和b=2，那么r1将看到b=1之前的值。 
<br> <br>这段话意思是，虽然有happens-before关系，但是如果读在一个线程，而且执行时间在，另外线程的写之前，那其实是读不到最新的值的，是这样吗。 这块是有时序问题吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/2b/3c/1d18cb88.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>snowDreams</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JMM仅使用一篇文章讲解,总有点意犹未尽的感觉 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/db/a4/3a1112ca.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lincoln���...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-15 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请教个问题，看到留言里面有回复：“在解释执行时，字节码之间也有内存屏障”。这句话意思是不是：解释执行过程中也会动态生成并插入内存屏障，而不是.class文件字节码之间有内存屏障？因为我比较了volatile字段和普通字段的写操作的字节码，没看出来有什么区别。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>zzr</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 编译器为啥要重排序 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJngnbXIXoL0odUt5Ma172x44j0Y9xicdJqpJ3wRXqiaeqxEfJM50FtkHj3cBTKoFuGg5FlXDcLdf1w/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>NickNYU</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，看了很久您的文章，感觉收益颇丰，有个小建议，能否讲到某些知识点的时候，附上JVM的源码就更好了。因为源码更直观一些 
<br>谢谢老师 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/5e/b1/51746dc2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>侯布阁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问老师，解释执行是一行一行执行的，此时会有指令重排序吗？ </div> <!----> 
<!----> </div></li>', 0, 'full_html', 'zh-hans', 31, 31) 
 {executed in 6 msec}
2020-11-19 20:15:56.900 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.902 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:56.914 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5e/ec/70c8d94d.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>大场镇车王</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">4</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师 为什么volatile内存屏障不允许所有写操作之前的读操作被重排序到写操作之后？前面不是说volatile的写操作happens 
before对用一字段的读操作吗 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: volatile字段的happens-before关系指的是在两个不同线程中，volatile的写操作 
happens-before 之后对同一字段的读操作。这里有个关键字之后，指的是时间上的先后。也就是我这边写，你之后再读就一定能读得到我刚刚写的值。普通字段则没有这个保证。<br><br>屏障不允许重排序是针对即时编译器的。写后对同一字段的读，属于数据依赖，本来也不可以重排序的。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/a0/9f/71345740.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>黑崽</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">2</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
请教个问题。刚才有说不会把volatile放到寄存器，但是应该会在栈里面对吧。直接读取主内存，读写的是栈数据，然后利用堆内存和栈上数据是利用写缓存刷新同步的？ </div> <!----> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 我可能没有在原文中讲清楚。这里指的是volatile变量不能被分配到寄存器中，但是计算还是加载到寄存器中来计算的。<br><br>所谓的分配到寄存器中，你可以理解为编译器将内存中的值缓存在寄存器中，之后一直用访问寄存器来代表对这个内存的访问的。假设我们要遍历一个数组，数组的长度是内存中的值。由于我们每次循环都要比较一次，因此编译器决定把它放在寄存器中，免得每次比较都要读一次内存。对于会更改的内存值，编译器也可以先缓存至寄存器，最后更新回内存即可。<br><br>Volatile会禁止上述优化。</p> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0c/2f/54f7f676.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Jerry Ch...</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-08-21 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 博客在哪里啊？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 文末[4]所指向的链接。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>追梦</span> 
<span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，求讲解下jvm中代码如何实现的内存屏障 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 即时编译器生成的代码里会使用CPU的内存屏障指令。HotSpot采用的lock前缀的指令，lock add DWORD PTR 
[rsp] 0。它也会刷缓存。<br><br>至于在即时编译器里禁止重排序所使用的”内存屏障”，就是一个特殊的编译器中间表达形式节点。</p> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>qpm</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 2018-08-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师我提个问题。一个共享对象的变量是非volatile的，那么这个变量的写入会先写到寄存器上，再写回内存吗？那么jvm是不是无论如何都不保证啥时候变量的值会写回内存。假如另一个线程加锁访问这个变量，是不是jvm也不保证它能拿到最新数据。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 对的！如果即时编译器把那个变量放在寄存器里维护，那么另一个线程也没辙。</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/a0/47/620308a3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Alex 1984</span> <span class="_1bkbsnjg_0">置顶</span> </div> <div class="_1H1Z49Dr_0"> 
2018-08-20 </div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 
老师，我在一些技术文章里看到说 volatile 的变量是存在工作内存，这个工作内存是一个什么概念？ </div> <!----> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 工作内存是JMM抽象出来的一个概念。你可以映射到实际的CPU缓存。</p> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>godtrue</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-23 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">22</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 恩，这节听了好几遍，也读了几遍，最后还是感觉蒙蒙的。 <br>下面说下我的感受： <br>1:一图胜千言，尤其对于描述复杂的东西，这个建议其他同学也有提议的，希望雨迪采纳一下 
<br> <br>2:感觉有些概念没有解释，比如： <br>2-1:Java内存模型，这节不就是要讲Java内存类型是什么？有什么特点？为什么这么设计嘛？不过我没看到这些内容，当然，特点是讲了的 
happens-before 机制 <br>2-2:内存屏蔽，这是什么意思？它怎么就能禁止重排序啦？还有有其引申出的各种屏蔽是怎么回事呢？也没完全明白 <br> <br> <br>3:前面讲 
as-if-serial 大概明白什么意思了，多处理器为了提高效率会采用流水线的方式来执行程序指令，但是同时要保证程序执行逻辑的正确性，所以，实际执行程序的指令和代码层面上会有不同，这个是由编译器来保证的，虽然执行逻辑不同但是程序逻辑是没变的，单线程没问题，但是多线程就变得复杂一些了，光靠这种方式保证不了啦，所以引出了下文 
<br> <br>4:happens-before，这个概念和作用比较容易理解，线程内有这种关系，线程间更有，这个机制我认为就是为了多线程环境下为了保证程序逻辑正确性的一种方式，不过它的具体实现细节感觉没理解，不清楚他是怎么办到的 
<br> <br>5:volatile 这个关键字之前也学习过，作用是保证内容的修改对所有线程可见，原理是修改后同步更新所有的内容，这是因为内存和处理器直接还是存在距离的，比如：内存-一级缓存-二级缓存-各种寄存器-cpu，如果是内存-cpu，则不会有这种问题了，不过性能也就不行了 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>　素丶　　</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-11-20 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">11</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 可以配合程晓明大大的《深入理解Java内存模型》 <br>https://www.infoq.cn/article/java_memory_model 
</div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/3a/cb/97dee373.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>啃yi嘴泥</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-24 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">7</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师你好，关于指令重排序有点不太理解，指令重排序的粒度是方法级别的，还是整个源文件级别的。文中说道，b 
加了volatile后，能够保证 b=1 先于r1=b ，这个我能理解，但是如何保证不会因为指令重排导致 b=1 先于r2=a发生呢？文中虽然说了，同一个线程中，字节码顺序暗含了r2=a 
happen before b=1，但是文中也提到了，拥有happen-before关系的两对赋值操作之间没有数据依赖，处理器可以指令重排序。r2=a 和b=1之间没有数据依赖呀！不好意思，这块有点迷糊，老师能给详细解答下不？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 首先，b加了volatile之后，并不能保证b=1一定先于r1=b，而是保证r1=b始终能够看到b的最新值。比如说b=1;b=2，之后在另一个CPU上执行r1=b，那么r1会被赋值为2。如果先执行r1=b，然后在另外一个CPU上执行b=1和b=2，那么r1将看到b=1之前的值。<br><br>在没有标记volatile的时候，同一线程中，r2=a和b=1存在happens 
before关系，但因为没有数据依赖可以重排列。一旦标记了volatile，即时编译器和CPU需要考虑到多线程happens-before关系，因此不能自由地重排序。</p> </div> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/56/43/abb7bfe3.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>阿巍-豆夫</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-03 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 关于Volatile, 我想问下，如果是单个cpu的系统上运行多线程的程序，是不是这个volative就没有效果了？ 
因为大家都使用同一个寄存器。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 理论上，因为都使用同一套缓存，所以不需要volatile。实际实现中，对编译器不能重排列的限制还是存在的，但具体的memory 
barrier指令的实现是no-op。</p> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/12/51/f309515c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>冬末未末</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-09-27 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> happen-before 在这里不能理解成在什么之前发生，它和时间没有任何关系。个人感觉解释成“生效可见于” 
更准确。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> 
</div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/0d/5d/e50cf9c7.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Kenneth</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-30 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 同求讲解该问题，谢谢老师！： <br>啃yi嘴泥 <br>老师你好，关于指令重排序有点不太理解，指令重排序的粒度是方法级别的，还是整个源文件级别的。文中说道，b 
加了volatile后，能够保证 b=1 先于r1=b ，这个我能理解，但是如何保证不会因为指令重排导致 b=1 先于r2=a发生呢？文中虽然说了，同一个线程中，字节码顺序暗含了r2=a 
happen before b=1，但是文中也提到了，拥有happen-before关系的两对赋值操作之间没有数据依赖，处理器可以指令重排序。r2=a 和b=1之间没有数据依赖呀！不好意思，这块有点迷糊，老师能给详细解答下不？ 
<br>2018-08-24 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 嗯，我回到原问题上哈</p> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>熊猫酒仙</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-08-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
<!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，既然有写缓存，是不是也有读缓存呢？强制刷新写缓存，无效化相应的内存数据，那么这些内存数据的读缓存也就失效了，需要重新加载最新数据，是否可以这样理解？ 
<br> <br>另外强制刷新写缓存是否也有粒度一说？就是我们加的锁也有粒度之分，那么所触发的强制刷新写缓存的区域可能不一样？ </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/48/00/5451e224.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>MacHIne���...</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-22 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0"> 大大，我的理解是这样 上面的volatile并没有保证 读写 b的顺序 而唯一出现(1,2)的可能就是 
a的写入在读取前 b的写入也在读取前 而根据hb规则 当出现b的写入在读取前时 编译器无法对1线程进行重排序 那么对 <br>a的读取就发生在了写入前， 也就避免了 （1，2），请问这样想对吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epLLXBLBLgticobxvBYRezd304Y66Q8ibYCl7mG9dvTHGrx9obRcn7ZmJBcib3ibsQPIX3xIbNYiaAUrOA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>Geek_c991e...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-03-07 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 老师，你答复的有一段话，我有疑问 <br>首先，b加了volatile之后，并不能保证b=1一定先于r1=b，而是保证r1=b始终能够看到b的最新值。比如说b=1;b=2，之后在另一个CPU上执行r1=b，那么r1会被赋值为2。如果先执行r1=b，然后在另外一个CPU上执行b=1和b=2，那么r1将看到b=1之前的值。 
<br> <br>这段话意思是，虽然有happens-before关系，但是如果读在一个线程，而且执行时间在，另外线程的写之前，那其实是读不到最新的值的，是这样吗。 这块是有时序问题吗 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/2b/3c/1d18cb88.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>snowDreams</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-21 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> JMM仅使用一篇文章讲解,总有点意犹未尽的感觉 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/db/a4/3a1112ca.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>lincoln���...</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-02-15 </div> </div> 
<div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 请教个问题，看到留言里面有回复：“在解释执行时，字节码之间也有内存屏障”。这句话意思是不是：解释执行过程中也会动态生成并插入内存屏障，而不是.class文件字节码之间有内存屏障？因为我比较了volatile字段和普通字段的写操作的字节码，没看出来有什么区别。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="" class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> 
<div> <div class="_18Dng5rT_0"> <span>zzr</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-20 
</div> </div> <div class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0"> 编译器为啥要重排序 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> </div></li> 
<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJngnbXIXoL0odUt5Ma172x44j0Y9xicdJqpJ3wRXqiaeqxEfJM50FtkHj3cBTKoFuGg5FlXDcLdf1w/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>NickNYU</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-01-07 </div> </div> <div 
class="_2eMTs2JE_0"> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> <!----> </div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师，看了很久您的文章，感觉收益颇丰，有个小建议，能否讲到某些知识点的时候，附上JVM的源码就更好了。因为源码更直观一些 
<br>谢谢老师 </div> <!----> <!----> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/5e/b1/51746dc2.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>侯布阁</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2018-12-15 </div> </div> <div class="_2eMTs2JE_0"> 
<div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> <!----> 
</div> </div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 请问老师，解释执行是一行一行执行的，此时会有指令重排序吗？ </div> <!----> 
<!----> </div></li>', 0, 'full_html', 'zh-hans', 31, 31) 
 {executed in 5 msec}
2020-11-19 20:15:56.922 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=31 
 {executed in 0 msec}
2020-11-19 20:15:56.923 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:56.927 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.928 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:56.934 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 31, 'https://static001.geekbang.org/resource/image/56/1f/563f86ba13dcd41bdbcca1591182fd1f.jpg', 
31) 
 {executed in 1 msec}
2020-11-19 20:15:56.944 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.945 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:56.952 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 31, 'https://static001.geekbang.org/resource/image/56/1f/563f86ba13dcd41bdbcca1591182fd1f.jpg', 
31) 
 {executed in 1 msec}
2020-11-19 20:15:56.958 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.960 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:56.967 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 31, 31) 
 {executed in 0 msec}
2020-11-19 20:15:56.973 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=31 
 {executed in 1 msec}
2020-11-19 20:15:56.974 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:56.980 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 31, 31) 
 {executed in 1 msec}
2020-11-19 20:15:56.986 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='967922784557471' 
 {executed in 1 msec}
2020-11-19 20:15:56.988 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:56.991 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788156, 1) 
 {executed in 1 msec}
2020-11-19 20:15:56.992 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788156, 1) 
 {executed in 0 msec}
2020-11-19 20:15:56.994 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|32            |
|--------------|

2020-11-19 20:15:57.003 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '0ac63470-89f2-4419-96c6-5eb27c91a88a', 
32) 
 {executed in 1 msec}
2020-11-19 20:15:57.004 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '0ac63470-89f2-4419-96c6-5eb27c91a88a', 32) 
 {executed in 0 msec}
2020-11-19 20:15:57.006 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|32            |
|--------------|

2020-11-19 20:15:57.019 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=32, revision_default=1, revision_timestamp=1605788156, 
revision_uid=1 where vid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.025 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.027 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:57.091 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '967922784557471', 'zh-hans', 32, 32) 
 {executed in 59 msec}
2020-11-19 20:15:57.104 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.107 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:15:57.141 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '967922784557471', 'zh-hans', 32, 32) 
 {executed in 25 msec}
2020-11-19 20:15:57.149 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.151 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:57.154 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.156 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:15:57.162 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 32, 0, 0, 0, 1, 0, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.169 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.171 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:57.174 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.176 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:57.182 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.191 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=32 
 {executed in 3 msec}
2020-11-19 20:15:57.193 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:15:57.200 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 32, 32) 
 {executed in 0 msec}
2020-11-19 20:15:57.208 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.209 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:57.213 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.215 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:15:57.221 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788157, 1605788157, 1, 'zh-hans', 0, 1, 1, 
0, '02-模块一：Java虚拟机基本原理 (12讲)', 1, 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.227 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=32 
 {executed in 1 msec}
2020-11-19 20:15:57.229 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:15:57.236 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788157, 1605788157, 1, 'zh-hans', 0, 
1, 1, 0, '02-模块一：Java虚拟机基本原理 (12讲)', 'book', 1, 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.241 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.243 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:57.246 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_0_, bookfieldm0_.bundle as bundle2_8_0_, bookfieldm0_.delta 
as delta3_8_0_, bookfieldm0_.langcode as langcode4_8_0_, bookfieldm0_.field_media_value as 
field_me5_8_0_, bookfieldm0_.revision_id as revision6_8_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.248 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:57.254 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.260 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_17_0_, nodefieldm0_.bundle as bundle2_17_0_, nodefieldm0_.delta 
as delta3_17_0_, nodefieldm0_.langcode as langcode4_17_0_, nodefieldm0_.field_media_value as 
field_me5_17_0_, nodefieldm0_.revision_id as revision6_17_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.262 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 20:15:57.268 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.274 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_, bookfieldc0_.bundle as bundle2_5_, bookfieldc0_.field_comment_value 
as field_co3_5_, bookfieldc0_.delta as delta4_5_, bookfieldc0_.field_comment_format as field_co5_5_, 
bookfieldc0_.langcode as langcode6_5_, bookfieldc0_.revision_id as revision7_5_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.276 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:57.279 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_5_0_, bookfieldc0_.bundle as bundle2_5_0_, bookfieldc0_.field_comment_value 
as field_co3_5_0_, bookfieldc0_.delta as delta4_5_0_, bookfieldc0_.field_comment_format as 
field_co5_5_0_, bookfieldc0_.langcode as langcode6_5_0_, bookfieldc0_.revision_id as revision7_5_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.281 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:57.287 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.293 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_14_0_, nodefieldc0_.bundle as bundle2_14_0_, nodefieldc0_.field_comment_value 
as field_co3_14_0_, nodefieldc0_.delta as delta4_14_0_, nodefieldc0_.field_comment_format as 
field_co5_14_0_, nodefieldc0_.langcode as langcode6_14_0_, nodefieldc0_.revision_id as revision7_14_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.295 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 20:15:57.301 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.307 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_, bookfieldt0_.bundle as bundle2_9_, bookfieldt0_.delta 
as delta3_9_, bookfieldt0_.langcode as langcode4_9_, bookfieldt0_.revision_id as revision5_9_, 
bookfieldt0_.field_thumb_value as field_th6_9_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.309 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:57.312 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_9_0_, bookfieldt0_.bundle as bundle2_9_0_, bookfieldt0_.delta 
as delta3_9_0_, bookfieldt0_.langcode as langcode4_9_0_, bookfieldt0_.revision_id as revision5_9_0_, 
bookfieldt0_.field_thumb_value as field_th6_9_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.314 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:57.320 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 32, '', 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.326 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_18_0_, nodefieldt0_.bundle as bundle2_18_0_, nodefieldt0_.delta 
as delta3_18_0_, nodefieldt0_.langcode as langcode4_18_0_, nodefieldt0_.revision_id as revision5_18_0_, 
nodefieldt0_.field_thumb_value as field_th6_18_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.328 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 20:15:57.334 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 32, '', 32) 
 {executed in 1 msec}
2020-11-19 20:15:57.340 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_6_0_, bookfieldf0_.langcode 
as langcode5_6_0_, bookfieldf0_.revision_id as revision6_6_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.341 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:57.348 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 32, 32) 
 {executed in 0 msec}
2020-11-19 20:15:57.354 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_15_0_, nodefieldf0_.langcode 
as langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=32 
 {executed in 1 msec}
2020-11-19 20:15:57.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 20:15:57.362 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 32, 32) 
 {executed in 1 msec}
2020-11-19 20:15:58.425 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='371631433219725' 
and bookchecke0_.name='net_content' 
 {executed in 2 msec}
2020-11-19 20:15:58.430 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:29.045 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='371631433219725' 
and bookchecke0_.name='net_content' 
 {executed in 3 msec}
2020-11-19 20:16:29.050 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:29.058 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('371631433219725', 1, 'net_content') 
 {executed in 1 msec}
2020-11-19 20:16:29.062 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('371631433219725', 
1, 'net_content') 
 {executed in 0 msec}
2020-11-19 20:16:29.066 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|65            |
|--------------|

2020-11-19 20:16:29.091 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='371631433219725' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:16:29.092 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:29.633 INFO  jdbc.sqltiming Line:373 - select bookchecke0_.item_id as item_id1_2_, bookchecke0_.fsid as fsid2_2_, bookchecke0_.got 
as got3_2_, bookchecke0_.name as name4_2_ from book_check bookchecke0_ where bookchecke0_.fsid='371631433219725' 
and bookchecke0_.name='media' 
 {executed in 1 msec}
2020-11-19 20:16:29.634 INFO  jdbc.resultsettable Line:610 - 
|--------|-----|----|-----|
|item_id |fsid |got |name |
|--------|-----|----|-----|
|--------|-----|----|-----|

2020-11-19 20:16:29.638 INFO  jdbc.sqltiming Line:373 - insert into book_check (fsid, got, name) values ('371631433219725', 1, 'media') 
 {executed in 1 msec}
2020-11-19 20:16:29.640 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into book_check (fsid, got, name) values ('371631433219725', 
1, 'media') 
 {executed in 0 msec}
2020-11-19 20:16:29.641 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|66            |
|--------------|

2020-11-19 20:16:29.654 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_, bookfieldf0_.bundle as bundle2_7_, bookfieldf0_.delta 
as delta3_7_, bookfieldf0_.field_fsid_value as field_fs4_7_, bookfieldf0_.langcode as langcode5_7_, 
bookfieldf0_.revision_id as revision6_7_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='371631433219725' 
 {executed in 1 msec}
2020-11-19 20:16:29.656 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:29.659 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605788189, 1) 
 {executed in 1 msec}
2020-11-19 20:16:29.660 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605788189, 1) 
 {executed in 0 msec}
2020-11-19 20:16:29.662 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|33            |
|--------------|

2020-11-19 20:16:29.671 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd052f717-0c75-4f6b-bfee-db15833d80f6', 
33) 
 {executed in 0 msec}
2020-11-19 20:16:29.673 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd052f717-0c75-4f6b-bfee-db15833d80f6', 33) 
 {executed in 0 msec}
2020-11-19 20:16:29.674 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|33            |
|--------------|

2020-11-19 20:16:29.698 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=33, revision_default=1, revision_timestamp=1605788189, 
revision_uid=1 where vid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.704 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_7_0_, bookfieldf0_.bundle as bundle2_7_0_, bookfieldf0_.delta 
as delta3_7_0_, bookfieldf0_.field_fsid_value as field_fs4_7_0_, bookfieldf0_.langcode as langcode5_7_0_, 
bookfieldf0_.revision_id as revision6_7_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.706 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:29.712 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '371631433219725', 'zh-hans', 33, 33) 
 {executed in 1 msec}
2020-11-19 20:16:29.718 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_16_0_, nodefieldf0_.bundle as bundle2_16_0_, nodefieldf0_.delta 
as delta3_16_0_, nodefieldf0_.field_fsid_value as field_fs4_16_0_, nodefieldf0_.langcode as 
langcode5_16_0_, nodefieldf0_.revision_id as revision6_16_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.719 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 20:16:29.725 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '371631433219725', 'zh-hans', 33, 33) 
 {executed in 1 msec}
2020-11-19 20:16:29.735 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.736 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:16:29.740 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.741 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 20:16:29.747 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 32, 33, 0, 0, 32, 0, 33) 
 {executed in 0 msec}
2020-11-19 20:16:29.753 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_, nodebodyen0_.body_value as body_val2_4_, nodebodyen0_.body_summary 
as body_sum3_4_, nodebodyen0_.bundle as bundle4_4_, nodebodyen0_.delta as delta5_4_, nodebodyen0_.body_format 
as body_for6_4_, nodebodyen0_.langcode as langcode7_4_, nodebodyen0_.revision_id as revision8_4_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.755 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:29.758 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_13_0_, nodebodyre0_.body_value as body_val2_13_0_, 
nodebodyre0_.body_summary as body_sum3_13_0_, nodebodyre0_.bundle as bundle4_13_0_, nodebodyre0_.delta 
as delta5_13_0_, nodebodyre0_.body_format as body_for6_13_0_, nodebodyre0_.langcode as langcode7_13_0_, 
nodebodyre0_.revision_id as revision8_13_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.760 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:29.769 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<p>在读博士的时候，我曾经写过一个统计 Java 对象生命周期的动态分析，并且用它来跑了一些基准测试。</p> <p>其中一些程序的结果，恰好验证了许多研究人员的假设，即大部分的 
Java 对象只存活一小段时间，而存活下来的小部分 Java 对象则会存活很长一段时间。</p> <p><img src="https://static001.geekbang.org/resource/image/e2/89/e235d25ca15b60a511a2d90317eb9589.png" 
alt=""></p> <p>（pmd 中 Java 对象生命周期的直方图，红色的表示被逃逸分析优化掉的对象）</p> <p>之所以要提到这个假设，是因为它造就了 Java 虚拟机的分代回收思想。简单来说，就是将堆空间划分为两代，分别叫做新生代和老年代。新生代用来存储新建的对象。当对象存活时间够长时，则将其移动到老年代。</p> 
<p>Java 虚拟机可以给不同代使用不同的回收算法。对于新生代，我们猜测大部分的 Java 对象只存活一小段时间，那么便可以频繁地采用耗时较短的垃圾回收算法，让大部分的垃圾都能够在新生代被回收掉。</p> 
<p>对于老年代，我们猜测大部分的垃圾已经在新生代中被回收了，而在老年代中的对象有大概率会继续存活。当真正触发针对老年代的回收时，则代表这个假设出错了，或者堆的空间已经耗尽了。</p> 
<p>这时候，Java 虚拟机往往需要做一次全堆扫描，耗时也将不计成本。（当然，现代的垃圾回收器都在并发收集的道路上发展，来避免这种全堆扫描的情况。）</p><!-- [[[read_end]]] 
--> <p>今天这一篇我们来关注一下针对新生代的 Minor GC。首先，我们来看看 Java 虚拟机中的堆具体是怎么划分的。</p> <h2>Java 虚拟机的堆划分</h2> 
<p>前面提到，Java 虚拟机将堆划分为新生代和老年代。其中，新生代又被划分为 Eden 区，以及两个大小相同的 Survivor 区。</p> <p>默认情况下，Java 虚拟机采取的是一种动态分配的策略（对应 
Java 虚拟机参数 -XX:+UsePSAdaptiveSurvivorSizePolicy），根据生成对象的速率，以及 Survivor 区的使用情况动态调整 Eden 区和 Survivor 
区的比例。</p> <p>当然，你也可以通过参数 -XX:SurvivorRatio 来固定这个比例。但是需要注意的是，其中一个 Survivor 区会一直为空，因此比例越低浪费的堆空间将越高。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2c/e5/2cc29b8de676d3747416416a3523e4e5.png" 
alt=""></p> <p>通常来说，当我们调用 new 指令时，它会在 Eden 区中划出一块作为存储对象的内存。由于堆空间是线程共享的，因此直接在这里边划空间是需要进行同步的。</p> 
<p>否则，将有可能出现两个对象共用一段内存的事故。如果你还记得前两篇我用“停车位”打的比方的话，这里就相当于两个司机（线程）同时将车停入同一个停车位，因而发生剐蹭事故。</p> <p>Java 
虚拟机的解决方法是为每个司机预先申请多个停车位，并且只允许该司机停在自己的停车位上。那么当司机的停车位用完了该怎么办呢（假设这个司机代客泊车）？</p> <p>答案是：再申请多个停车位便可以了。这项技术被称之为 
TLAB（Thread Local Allocation Buffer，对应虚拟机参数 -XX:+UseTLAB，默认开启）。</p> <p>具体来说，每个线程可以向 Java 虚拟机申请一段连续的内存，比如 
2048 字节，作为线程私有的 TLAB。</p> <p>这个操作需要加锁，线程需要维护两个指针（实际上可能更多，但重要也就两个），一个指向 TLAB 中空余内存的起始位置，一个则指向 
TLAB 末尾。</p> <p>接下来的 new 指令，便可以直接通过指针加法（bump the pointer）来实现，即把指向空余内存位置的指针加上所请求的字节数。</p> <blockquote> 
<p><span class="reference">我猜测会有留言问为什么不把 bump the pointer 翻译成指针碰撞。这里先解释一下，在英语中我们通常省略了 bump 
up the pointer 中的 up。在这个上下文中 bump 的含义应为“提高”。另外一个例子是当我们发布软件的新版本时，也会说 bump the version number。</span></p> 
</blockquote> <p>如果加法后空余内存指针的值仍小于或等于指向末尾的指针，则代表分配成功。否则，TLAB 已经没有足够的空间来满足本次新建操作。这个时候，便需要当前线程重新申请新的 
TLAB。</p> <p>当 Eden 区的空间耗尽了怎么办？这个时候 Java 虚拟机便会触发一次 Minor GC，来收集新生代的垃圾。存活下来的对象，则会被送到 Survivor 
区。</p> <p>前面提到，新生代共有两个 Survivor 区，我们分别用 from 和 to 来指代。其中 to 指向的 Survivior 区是空的。</p> <p>当发生 
Minor GC 时，Eden 区和 from 指向的 Survivor 区中的存活对象会被复制到 to 指向的 Survivor 区中，然后交换 from 和 to 指针，以保证下一次 
Minor GC 时，to 指向的 Survivor 区还是空的。</p> <p>Java 虚拟机会记录 Survivor 区中的对象一共被来回复制了几次。如果一个对象被复制的次数为 
15（对应虚拟机参数 -XX:+MaxTenuringThreshold），那么该对象将被晋升（promote）至老年代。另外，如果单个 Survivor 区已经被占用了 50%（对应虚拟机参数 
-XX:TargetSurvivorRatio），那么较高复制次数的对象也会被晋升至老年代。</p> <p>总而言之，当发生 Minor GC 时，我们应用了标记 - 复制算法，将 
Survivor 区中的老存活对象晋升到老年代，然后将剩下的存活对象和 Eden 区的存活对象复制到另一个 Survivor 区中。理想情况下，Eden 区中的对象基本都死亡了，那么需要复制的数据将非常少，因此采用这种标记 
- 复制算法的效果极好。</p> <p>Minor GC 的另外一个好处是不用对整个堆进行垃圾回收。但是，它却有一个问题，那就是老年代的对象可能引用新生代的对象。也就是说，在标记存活对象的时候，我们需要扫描老年代中的对象。如果该对象拥有对新生代对象的引用，那么这个引用也会被作为 
GC Roots。</p> <p>这样一来，岂不是又做了一次全堆扫描呢？</p> <h2>卡表</h2> <p>HotSpot 给出的解决方案是一项叫做卡表（Card Table）的技术。该技术将整个堆划分为一个个大小为 
512 字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p> <p>在进行 
Minor GC 的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到 Minor GC 的 GC Roots 里。当完成所有脏卡的扫描之后，Java 
虚拟机便会将所有脏卡的标识位清零。</p> <p>由于 Minor GC 伴随着存活对象的复制，而复制需要更新指向该对象的引用。因此，在更新引用的同时，我们又会设置引用所在的卡的标识位。这个时候，我们可以确保脏卡中必定包含指向新生代对象的引用。</p> 
<p>在 Minor GC 之前，我们并不能确保脏卡中包含指向新生代对象的引用。其原因和如何设置卡的标识位有关。</p> <p>首先，如果想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么 
Java 虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p> <p>这个操作在解释执行器中比较容易实现。但是在即时编译器生成的机器码中，则需要插入额外的逻辑。这也就是所谓的写屏障（write 
barrier，注意不要和 volatile 字段的写屏障混淆）。</p> <p>写屏障需要尽可能地保持简洁。这是因为我们并不希望在每条引用型实例变量的写指令后跟着一大串注入的指令。</p> 
<p>因此，写屏障并不会判断更新后的引用是否指向新生代中的对象，而是宁可错杀，不可放过，一律当成可能指向新生代对象的引用。</p> <p>这么一来，写屏障便可精简为下面的伪代码 [1]。这里右移 
9 位相当于除以 512，Java 虚拟机便是通过这种方式来从地址映射到卡表中的索引的。最终，这段代码会被编译成一条移位指令和一条存储指令。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
CARD_TABLE [this address &gt;&gt; 9] = DIRTY; </div></td> </tr> </tbody> </table></code> <div 
class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>虽然写屏障不可避免地带来一些开销，但是它能够加大 
Minor GC 的吞吐率（ 应用运行时间 /(应用运行时间 + 垃圾回收时间) ）。总的来说还是值得的。不过，在高并发环境下，写屏障又带来了虚共享（false sharing）问题 
[2]。</p> <p>在介绍对象内存布局中我曾提到虚共享问题，讲的是几个 volatile 字段出现在同一缓存行里造成的虚共享。这里的虚共享则是卡表中不同卡的标识位之间的虚共享问题。</p> 
<p>在 HotSpot 中，卡表是通过 byte 数组来实现的。对于一个 64 字节的缓存行来说，如果用它来加载部分卡表，那么它将对应 64 张卡，也就是 32KB 的内存。</p> 
<p>如果同时有两个 Java 线程，在这 32KB 内存中进行引用更新操作，那么也将造成存储卡表的同一部分的缓存行的写回、无效化或者同步操作，因而间接影响程序性能。</p> <p>为此，HotSpot 
引入了一个新的参数 -XX:+UseCondCardMark，来尽量减少写卡表的操作。其伪代码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (CARD_TABLE [this address &gt;&gt; 9] != DIRTY) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> CARD_TABLE [this address &gt;&gt; 9] = DIRTY; </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机中垃圾回收具体实现的一些通用知识。</p> <p>Java 虚拟机将堆分为新生代和老年代，并且对不同代采用不同的垃圾回收算法。其中，新生代分为 
Eden 区和两个大小一致的 Survivor 区，并且其中一个 Survivor 区是空的。</p> <p>在只针对新生代的 Minor GC 中，Eden 区和非空 Survivor 
区的存活对象会被复制到空的 Survivor 区中，当 Survivor 区中的存活对象复制次数超过一定数值时，它将被晋升至老年代。</p> <p>因为 Minor GC 只针对新生代进行垃圾回收，所以在枚举 
GC Roots 的时候，它需要考虑从老年代到新生代的引用。为了避免扫描整个老年代，Java 虚拟机引入了名为卡表的技术，大致地标出可能存在老年代到新生代引用的内存区域。</p> <p>由于篇幅的原因，我没有讲解 
Java 虚拟机中具体的垃圾回收器。我在文章的末尾附了一段简单的介绍，如果你有兴趣的话可以参阅一下。</p> <p>今天的实践环节，我们来看看 Java 对象的生命周期对垃圾回收的影响。</p> 
<p>前面提到，Java 虚拟机的分代垃圾回收是基于大部分对象只存活一小段时间，小部分对象却存活一大段时间的假设的。</p> <p>然而，现实情况中并非每个程序都符合前面提到的假设。如果一个程序拥有中等生命周期的对象，并且刚移动到老年代便不再使用，那么将给默认的垃圾回收策略造成极大的麻烦。</p> 
<p>下面这段程序将生成 64G 的 Java 对象。并且，我通过 ALIVE_OBJECT_SIZE 这一变量来定义同时存活的 Java 对象的大小。这也是一种对于垃圾回收器来说比较直观的生命周期。</p> 
<p>当我们使用 Java 8 的默认 GC，并且将新生代的空间限制在 100M 时，试着估算当 ALIVE_OBJECT_SIZE 为多少时，这段程序不会触发 Full GC（提示一下，如果 
Survivor 区没法存储所有存活对象，将发生什么。）。实际运行情况又是怎么样的？</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run 
with java -XX:+PrintGC -Xmn100M -XX:PretenureSizeThreshold=10000 LifetimeTest </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // You may also try with -XX:+PrintHeapAtGC，-XX:-UsePSAdaptiveSurvivorSizePolicy 
or -XX:SurvivorRatio=N </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class LifetimeTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final int K = 1024; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> private static final int M = K * K; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static final int G = K * M; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final int ALIVE_OBJECT_SIZE = 32 * M; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int length = ALIVE_OBJECT_SIZE / 64; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ObjectOf64Bytes[] array = new ObjectOf64Bytes[length]; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (long i = 0; i &lt; G; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> array[(int) (i % length)] = new ObjectOf64Bytes(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ObjectOf64Bytes { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder5; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>附录：Java 虚拟机中的垃圾回收器</h2> <p>针对新生代的垃圾回收器共有三个：Serial，Parallel 
Scavenge 和 Parallel New。这三个采用的都是标记 - 复制算法。其中，Serial 是一个单线程的，Parallel New 可以看成 Serial 的多线程版本。Parallel 
Scavenge 和 Parallel New 类似，但更加注重吞吐率。此外，Parallel Scavenge 不能与 CMS 一起使用。</p> <p>针对老年代的垃圾回收器也有三个：刚刚提到的 
Serial Old 和 Parallel Old，以及 CMS。Serial Old 和 Parallel Old 都是标记 - 压缩算法。同样，前者是单线程的，而后者可以看成前者的多线程版本。</p> 
<p>CMS 采用的是标记 - 清除算法，并且是并发的。除了少数几个操作需要 Stop-the-world 之外，它可以在应用程序运行过程中进行垃圾回收。在并发收集失败的情况下，Java 
虚拟机会使用其他两个压缩型垃圾回收器进行一次垃圾回收。由于 G1 的出现，CMS 在 Java 9 中已被废弃 [3]。</p> <p>G1（Garbage First）是一个横跨新生代和老年代的垃圾回收器。实际上，它已经打乱了前面所说的堆结构，直接将堆分成极其多个区域。每个区域都可以充当 
Eden 区、Survivor 区或者老年代中的一个。它采用的是标记 - 压缩算法，而且和 CMS 一样都能够在应用程序运行过程中并发地进行垃圾回收。</p> <p>G1 能够针对每个细分的区域来进行垃圾回收。在选择进行垃圾回收的区域时，它会优先回收死亡对象较多的区域。这也是 
G1 名字的由来。</p> <p>即将到来的 Java 11 引入了 ZGC，宣称暂停时间不超过 10ms。如果你感兴趣的话，可参考 R 大的这篇文章 [4]。</p> <p>[1]<br> 
<a href="http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html">http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html</a><br> 
[2]<br> <a href="https://blogs.oracle.com/dave/false-sharing-induced-by-card-table-marking">https://blogs.oracle.com/dave/false-sharing-induced-by-card-table-marking</a><br> 
[3]<br> <a href="http://openjdk.java.net/jeps/291">http://openjdk.java.net/jeps/291</a><br> 
[4] <a href="https://www.zhihu.com/question/287945354/answer/458761494">https://www.zhihu.com/question/287945354/answer/458761494</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 33, 33) 
 {executed in 2 msec}
2020-11-19 20:16:29.780 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_4_0_, nodebodyen0_.body_value as body_val2_4_0_, 
nodebodyen0_.body_summary as body_sum3_4_0_, nodebodyen0_.bundle as bundle4_4_0_, nodebodyen0_.delta 
as delta5_4_0_, nodebodyen0_.body_format as body_for6_4_0_, nodebodyen0_.langcode as langcode7_4_0_, 
nodebodyen0_.revision_id as revision8_4_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.782 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 20:16:29.790 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<p>在读博士的时候，我曾经写过一个统计 Java 对象生命周期的动态分析，并且用它来跑了一些基准测试。</p> <p>其中一些程序的结果，恰好验证了许多研究人员的假设，即大部分的 
Java 对象只存活一小段时间，而存活下来的小部分 Java 对象则会存活很长一段时间。</p> <p><img src="https://static001.geekbang.org/resource/image/e2/89/e235d25ca15b60a511a2d90317eb9589.png" 
alt=""></p> <p>（pmd 中 Java 对象生命周期的直方图，红色的表示被逃逸分析优化掉的对象）</p> <p>之所以要提到这个假设，是因为它造就了 Java 虚拟机的分代回收思想。简单来说，就是将堆空间划分为两代，分别叫做新生代和老年代。新生代用来存储新建的对象。当对象存活时间够长时，则将其移动到老年代。</p> 
<p>Java 虚拟机可以给不同代使用不同的回收算法。对于新生代，我们猜测大部分的 Java 对象只存活一小段时间，那么便可以频繁地采用耗时较短的垃圾回收算法，让大部分的垃圾都能够在新生代被回收掉。</p> 
<p>对于老年代，我们猜测大部分的垃圾已经在新生代中被回收了，而在老年代中的对象有大概率会继续存活。当真正触发针对老年代的回收时，则代表这个假设出错了，或者堆的空间已经耗尽了。</p> 
<p>这时候，Java 虚拟机往往需要做一次全堆扫描，耗时也将不计成本。（当然，现代的垃圾回收器都在并发收集的道路上发展，来避免这种全堆扫描的情况。）</p><!-- [[[read_end]]] 
--> <p>今天这一篇我们来关注一下针对新生代的 Minor GC。首先，我们来看看 Java 虚拟机中的堆具体是怎么划分的。</p> <h2>Java 虚拟机的堆划分</h2> 
<p>前面提到，Java 虚拟机将堆划分为新生代和老年代。其中，新生代又被划分为 Eden 区，以及两个大小相同的 Survivor 区。</p> <p>默认情况下，Java 虚拟机采取的是一种动态分配的策略（对应 
Java 虚拟机参数 -XX:+UsePSAdaptiveSurvivorSizePolicy），根据生成对象的速率，以及 Survivor 区的使用情况动态调整 Eden 区和 Survivor 
区的比例。</p> <p>当然，你也可以通过参数 -XX:SurvivorRatio 来固定这个比例。但是需要注意的是，其中一个 Survivor 区会一直为空，因此比例越低浪费的堆空间将越高。</p> 
<p><img src="https://static001.geekbang.org/resource/image/2c/e5/2cc29b8de676d3747416416a3523e4e5.png" 
alt=""></p> <p>通常来说，当我们调用 new 指令时，它会在 Eden 区中划出一块作为存储对象的内存。由于堆空间是线程共享的，因此直接在这里边划空间是需要进行同步的。</p> 
<p>否则，将有可能出现两个对象共用一段内存的事故。如果你还记得前两篇我用“停车位”打的比方的话，这里就相当于两个司机（线程）同时将车停入同一个停车位，因而发生剐蹭事故。</p> <p>Java 
虚拟机的解决方法是为每个司机预先申请多个停车位，并且只允许该司机停在自己的停车位上。那么当司机的停车位用完了该怎么办呢（假设这个司机代客泊车）？</p> <p>答案是：再申请多个停车位便可以了。这项技术被称之为 
TLAB（Thread Local Allocation Buffer，对应虚拟机参数 -XX:+UseTLAB，默认开启）。</p> <p>具体来说，每个线程可以向 Java 虚拟机申请一段连续的内存，比如 
2048 字节，作为线程私有的 TLAB。</p> <p>这个操作需要加锁，线程需要维护两个指针（实际上可能更多，但重要也就两个），一个指向 TLAB 中空余内存的起始位置，一个则指向 
TLAB 末尾。</p> <p>接下来的 new 指令，便可以直接通过指针加法（bump the pointer）来实现，即把指向空余内存位置的指针加上所请求的字节数。</p> <blockquote> 
<p><span class="reference">我猜测会有留言问为什么不把 bump the pointer 翻译成指针碰撞。这里先解释一下，在英语中我们通常省略了 bump 
up the pointer 中的 up。在这个上下文中 bump 的含义应为“提高”。另外一个例子是当我们发布软件的新版本时，也会说 bump the version number。</span></p> 
</blockquote> <p>如果加法后空余内存指针的值仍小于或等于指向末尾的指针，则代表分配成功。否则，TLAB 已经没有足够的空间来满足本次新建操作。这个时候，便需要当前线程重新申请新的 
TLAB。</p> <p>当 Eden 区的空间耗尽了怎么办？这个时候 Java 虚拟机便会触发一次 Minor GC，来收集新生代的垃圾。存活下来的对象，则会被送到 Survivor 
区。</p> <p>前面提到，新生代共有两个 Survivor 区，我们分别用 from 和 to 来指代。其中 to 指向的 Survivior 区是空的。</p> <p>当发生 
Minor GC 时，Eden 区和 from 指向的 Survivor 区中的存活对象会被复制到 to 指向的 Survivor 区中，然后交换 from 和 to 指针，以保证下一次 
Minor GC 时，to 指向的 Survivor 区还是空的。</p> <p>Java 虚拟机会记录 Survivor 区中的对象一共被来回复制了几次。如果一个对象被复制的次数为 
15（对应虚拟机参数 -XX:+MaxTenuringThreshold），那么该对象将被晋升（promote）至老年代。另外，如果单个 Survivor 区已经被占用了 50%（对应虚拟机参数 
-XX:TargetSurvivorRatio），那么较高复制次数的对象也会被晋升至老年代。</p> <p>总而言之，当发生 Minor GC 时，我们应用了标记 - 复制算法，将 
Survivor 区中的老存活对象晋升到老年代，然后将剩下的存活对象和 Eden 区的存活对象复制到另一个 Survivor 区中。理想情况下，Eden 区中的对象基本都死亡了，那么需要复制的数据将非常少，因此采用这种标记 
- 复制算法的效果极好。</p> <p>Minor GC 的另外一个好处是不用对整个堆进行垃圾回收。但是，它却有一个问题，那就是老年代的对象可能引用新生代的对象。也就是说，在标记存活对象的时候，我们需要扫描老年代中的对象。如果该对象拥有对新生代对象的引用，那么这个引用也会被作为 
GC Roots。</p> <p>这样一来，岂不是又做了一次全堆扫描呢？</p> <h2>卡表</h2> <p>HotSpot 给出的解决方案是一项叫做卡表（Card Table）的技术。该技术将整个堆划分为一个个大小为 
512 字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p> <p>在进行 
Minor GC 的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到 Minor GC 的 GC Roots 里。当完成所有脏卡的扫描之后，Java 
虚拟机便会将所有脏卡的标识位清零。</p> <p>由于 Minor GC 伴随着存活对象的复制，而复制需要更新指向该对象的引用。因此，在更新引用的同时，我们又会设置引用所在的卡的标识位。这个时候，我们可以确保脏卡中必定包含指向新生代对象的引用。</p> 
<p>在 Minor GC 之前，我们并不能确保脏卡中包含指向新生代对象的引用。其原因和如何设置卡的标识位有关。</p> <p>首先，如果想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么 
Java 虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p> <p>这个操作在解释执行器中比较容易实现。但是在即时编译器生成的机器码中，则需要插入额外的逻辑。这也就是所谓的写屏障（write 
barrier，注意不要和 volatile 字段的写屏障混淆）。</p> <p>写屏障需要尽可能地保持简洁。这是因为我们并不希望在每条引用型实例变量的写指令后跟着一大串注入的指令。</p> 
<p>因此，写屏障并不会判断更新后的引用是否指向新生代中的对象，而是宁可错杀，不可放过，一律当成可能指向新生代对象的引用。</p> <p>这么一来，写屏障便可精简为下面的伪代码 [1]。这里右移 
9 位相当于除以 512，Java 虚拟机便是通过这种方式来从地址映射到卡表中的索引的。最终，这段代码会被编译成一条移位指令和一条存储指令。</p> <pre style="position: 
relative;"><code> <table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
CARD_TABLE [this address &gt;&gt; 9] = DIRTY; </div></td> </tr> </tbody> </table></code> <div 
class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 </div></pre> <p>虽然写屏障不可避免地带来一些开销，但是它能够加大 
Minor GC 的吞吐率（ 应用运行时间 /(应用运行时间 + 垃圾回收时间) ）。总的来说还是值得的。不过，在高并发环境下，写屏障又带来了虚共享（false sharing）问题 
[2]。</p> <p>在介绍对象内存布局中我曾提到虚共享问题，讲的是几个 volatile 字段出现在同一缓存行里造成的虚共享。这里的虚共享则是卡表中不同卡的标识位之间的虚共享问题。</p> 
<p>在 HotSpot 中，卡表是通过 byte 数组来实现的。对于一个 64 字节的缓存行来说，如果用它来加载部分卡表，那么它将对应 64 张卡，也就是 32KB 的内存。</p> 
<p>如果同时有两个 Java 线程，在这 32KB 内存中进行引用更新操作，那么也将造成存储卡表的同一部分的缓存行的写回、无效化或者同步操作，因而间接影响程序性能。</p> <p>为此，HotSpot 
引入了一个新的参数 -XX:+UseCondCardMark，来尽量减少写卡表的操作。其伪代码如下所示：</p> <pre style="position: relative;"><code> 
<table class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
if (CARD_TABLE [this address &gt;&gt; 9] != DIRTY) </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> CARD_TABLE [this address &gt;&gt; 9] = DIRTY; </div></td> </tr> 
</tbody> </table></code> <div class="richcontent-pre-copy"> <span class="iconfont"></span>复制代码 
</div></pre> <h2>总结与实践</h2> <p>今天我介绍了 Java 虚拟机中垃圾回收具体实现的一些通用知识。</p> <p>Java 虚拟机将堆分为新生代和老年代，并且对不同代采用不同的垃圾回收算法。其中，新生代分为 
Eden 区和两个大小一致的 Survivor 区，并且其中一个 Survivor 区是空的。</p> <p>在只针对新生代的 Minor GC 中，Eden 区和非空 Survivor 
区的存活对象会被复制到空的 Survivor 区中，当 Survivor 区中的存活对象复制次数超过一定数值时，它将被晋升至老年代。</p> <p>因为 Minor GC 只针对新生代进行垃圾回收，所以在枚举 
GC Roots 的时候，它需要考虑从老年代到新生代的引用。为了避免扫描整个老年代，Java 虚拟机引入了名为卡表的技术，大致地标出可能存在老年代到新生代引用的内存区域。</p> <p>由于篇幅的原因，我没有讲解 
Java 虚拟机中具体的垃圾回收器。我在文章的末尾附了一段简单的介绍，如果你有兴趣的话可以参阅一下。</p> <p>今天的实践环节，我们来看看 Java 对象的生命周期对垃圾回收的影响。</p> 
<p>前面提到，Java 虚拟机的分代垃圾回收是基于大部分对象只存活一小段时间，小部分对象却存活一大段时间的假设的。</p> <p>然而，现实情况中并非每个程序都符合前面提到的假设。如果一个程序拥有中等生命周期的对象，并且刚移动到老年代便不再使用，那么将给默认的垃圾回收策略造成极大的麻烦。</p> 
<p>下面这段程序将生成 64G 的 Java 对象。并且，我通过 ALIVE_OBJECT_SIZE 这一变量来定义同时存活的 Java 对象的大小。这也是一种对于垃圾回收器来说比较直观的生命周期。</p> 
<p>当我们使用 Java 8 的默认 GC，并且将新生代的空间限制在 100M 时，试着估算当 ALIVE_OBJECT_SIZE 为多少时，这段程序不会触发 Full GC（提示一下，如果 
Survivor 区没法存储所有存活对象，将发生什么。）。实际运行情况又是怎么样的？</p> <pre style="position: relative;"><code> <table 
class="hljs-ln"> <tbody> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" 
data-line-number="1"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> // Run 
with java -XX:+PrintGC -Xmn100M -XX:PretenureSizeThreshold=10000 LifetimeTest </div></td> </tr> 
<tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> // You may also try with -XX:+PrintHeapAtGC，-XX:-UsePSAdaptiveSurvivorSizePolicy 
or -XX:SurvivorRatio=N </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="3"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public class LifetimeTest { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="4"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final int K = 1024; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div 
class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td> <td class="hljs-ln-code"> <div 
class="hljs-ln-line"> private static final int M = K * K; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> private static final int G = K * M; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="8"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
private static final int ALIVE_OBJECT_SIZE = 32 * M; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="10"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
public static void main(String[] args) { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> int length = ALIVE_OBJECT_SIZE / 64; </div></td> </tr> <tr> <td 
class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> ObjectOf64Bytes[] array = new ObjectOf64Bytes[length]; 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> for (long i = 0; i &lt; G; i++) { </div></td> 
</tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> array[(int) (i % length)] = new ObjectOf64Bytes(); 
</div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line 
hljs-ln-n" data-line-number="17"></div></td> <td class="hljs-ln-code"> <div class="hljs-ln-line"> 
} </div></td> </tr> <tr> <td class="hljs-ln-numbers"> <div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></td> 
<td class="hljs-ln-code"> <div class="hljs-ln-line"> </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> class ObjectOf64Bytes { </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder0; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder1; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder2; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder3; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder4; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> long placeholder5; </div></td> </tr> <tr> <td class="hljs-ln-numbers"> 
<div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></td> <td class="hljs-ln-code"> 
<div class="hljs-ln-line"> } </div></td> </tr> </tbody> </table></code> <div class="richcontent-pre-copy"> 
<span class="iconfont"></span>复制代码 </div></pre> <h2>附录：Java 虚拟机中的垃圾回收器</h2> <p>针对新生代的垃圾回收器共有三个：Serial，Parallel 
Scavenge 和 Parallel New。这三个采用的都是标记 - 复制算法。其中，Serial 是一个单线程的，Parallel New 可以看成 Serial 的多线程版本。Parallel 
Scavenge 和 Parallel New 类似，但更加注重吞吐率。此外，Parallel Scavenge 不能与 CMS 一起使用。</p> <p>针对老年代的垃圾回收器也有三个：刚刚提到的 
Serial Old 和 Parallel Old，以及 CMS。Serial Old 和 Parallel Old 都是标记 - 压缩算法。同样，前者是单线程的，而后者可以看成前者的多线程版本。</p> 
<p>CMS 采用的是标记 - 清除算法，并且是并发的。除了少数几个操作需要 Stop-the-world 之外，它可以在应用程序运行过程中进行垃圾回收。在并发收集失败的情况下，Java 
虚拟机会使用其他两个压缩型垃圾回收器进行一次垃圾回收。由于 G1 的出现，CMS 在 Java 9 中已被废弃 [3]。</p> <p>G1（Garbage First）是一个横跨新生代和老年代的垃圾回收器。实际上，它已经打乱了前面所说的堆结构，直接将堆分成极其多个区域。每个区域都可以充当 
Eden 区、Survivor 区或者老年代中的一个。它采用的是标记 - 压缩算法，而且和 CMS 一样都能够在应用程序运行过程中并发地进行垃圾回收。</p> <p>G1 能够针对每个细分的区域来进行垃圾回收。在选择进行垃圾回收的区域时，它会优先回收死亡对象较多的区域。这也是 
G1 名字的由来。</p> <p>即将到来的 Java 11 引入了 ZGC，宣称暂停时间不超过 10ms。如果你感兴趣的话，可参考 R 大的这篇文章 [4]。</p> <p>[1]<br> 
<a href="http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html">http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html</a><br> 
[2]<br> <a href="https://blogs.oracle.com/dave/false-sharing-induced-by-card-table-marking">https://blogs.oracle.com/dave/false-sharing-induced-by-card-table-marking</a><br> 
[3]<br> <a href="http://openjdk.java.net/jeps/291">http://openjdk.java.net/jeps/291</a><br> 
[4] <a href="https://www.zhihu.com/question/287945354/answer/458761494">https://www.zhihu.com/question/287945354/answer/458761494</a></p> 
<p><img src="https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg" 
alt=""></p>', '', 'book', 0, 'full_html', 'zh-hans', 33, 33) 
 {executed in 2 msec}
2020-11-19 20:16:29.800 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_, nodefiledd0_.changed as changed2_10_, nodefiledd0_.created 
as created3_10_, nodefiledd0_.default_langcode as default_4_10_, nodefiledd0_.langcode as langcode5_10_, 
nodefiledd0_.promote as promote6_10_, nodefiledd0_.revision_translation_affected as revision7_10_, 
nodefiledd0_.status as status8_10_, nodefiledd0_.sticky as sticky9_10_, nodefiledd0_.title 
as title10_10_, nodefiledd0_.type as type11_10_, nodefiledd0_.uid as uid12_10_, nodefiledd0_.vid 
as vid13_10_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.802 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:16:29.805 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_11_0_, nodefieldr0_.changed as changed2_11_0_, nodefieldr0_.created 
as created3_11_0_, nodefieldr0_.default_langcode as default_4_11_0_, nodefieldr0_.langcode 
as langcode5_11_0_, nodefieldr0_.promote as promote6_11_0_, nodefieldr0_.revision_translation_affected 
as revision7_11_0_, nodefieldr0_.status as status8_11_0_, nodefieldr0_.sticky as sticky9_11_0_, 
nodefieldr0_.title as title10_11_0_, nodefieldr0_.uid as uid11_11_0_, nodefieldr0_.vid as vid12_11_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.807 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 20:16:29.815 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605788189, 1605788189, 1, 'zh-hans', 0, 1, 1, 
0, '12丨垃圾回收（下）', 1, 33, 33) 
 {executed in 2 msec}
2020-11-19 20:16:29.822 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_10_0_, nodefiledd0_.changed as changed2_10_0_, nodefiledd0_.created 
as created3_10_0_, nodefiledd0_.default_langcode as default_4_10_0_, nodefiledd0_.langcode 
as langcode5_10_0_, nodefiledd0_.promote as promote6_10_0_, nodefiledd0_.revision_translation_affected 
as revision7_10_0_, nodefiledd0_.status as status8_10_0_, nodefiledd0_.sticky as sticky9_10_0_, 
nodefiledd0_.title as title10_10_0_, nodefiledd0_.type as type11_10_0_, nodefiledd0_.uid as 
uid12_10_0_, nodefiledd0_.vid as vid13_10_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=33 
 {executed in 1 msec}
2020-11-19 20:16:29.824 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 20:16:29.831 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605788189, 1605788189, 1, 'zh-hans', 0, 
1, 1, 0, '12丨垃圾回收（下）', 'book', 1, 33, 33) 
 {executed in 1 msec}
2020-11-19 20:16:29.838 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_8_, bookfieldm0_.bundle as bundle2_8_, bookfieldm0_.delta 
as delta3_8_, bookfieldm0_.langcode as langcode4_8_, bookfieldm0_.field_media_value as field_me5_8_, 
bookfieldm0_.revision_id as revision6_8_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=33 
 {executed in 1 msec}
2020-11-19 20:16:29.839 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

