2020-11-19 11:08:37.085 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:08:37.087 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755317, 1605755317, 1, 'zh-hans', 0, 
1, 1, 0, '31丨防人之心不可无：网站安全问题窥视', 'book', 1, 15, 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.094 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.094 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:08:37.095 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.095 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:08:37.097 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/f7bf73ce176d51b95cce0ab559ed4fb3?bkt=en-24c643f198a62f88dc3a1af7cf3d95dbd6ee843827de6bc4c9288bb62e91225cab1b61ac6460dffa&fid=3757516097-778750-289949616803584&time=1605755315&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5249hAvLdMvVpF1E5hE7SY80nSc%3D&to=92&size=16271294&sta_dx=16271294&sta_cs=3208&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746263&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16271294&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f7df68abd56e711632d85d677ccebb7bdb301b5c837f79f9408b2752e4d63d5e763fd2f9db945faf&sl=76480590&expires=8h&rt=pr&r=651031983&mlogid=7502050309678808923&vbdid=2247232042&fin=31%E4%B8%A8%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%EF%BC%9A%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%AA%A5%E8%A7%86.m4a&bflag=92,34-92&rtype=1&dp-logid=7502050309678808923&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=86348c5ac45f19b1bedf8e6ef084c28854d4532a7fbfaa13&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=31%E4%B8%A8%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%EF%BC%9A%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%AA%A5%E8%A7%86.m4a', 
15, 15) 
 {executed in 1 msec}
2020-11-19 11:08:37.101 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 11:08:37.101 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:08:37.103 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/f7bf73ce176d51b95cce0ab559ed4fb3?bkt=en-24c643f198a62f88dc3a1af7cf3d95dbd6ee843827de6bc4c9288bb62e91225cab1b61ac6460dffa&fid=3757516097-778750-289949616803584&time=1605755315&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-5249hAvLdMvVpF1E5hE7SY80nSc%3D&to=92&size=16271294&sta_dx=16271294&sta_cs=3208&sta_ft=m4a&sta_ct=6&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574746263&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16271294&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-f7df68abd56e711632d85d677ccebb7bdb301b5c837f79f9408b2752e4d63d5e763fd2f9db945faf&sl=76480590&expires=8h&rt=pr&r=651031983&mlogid=7502050309678808923&vbdid=2247232042&fin=31%E4%B8%A8%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%EF%BC%9A%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%AA%A5%E8%A7%86.m4a&bflag=92,34-92&rtype=1&dp-logid=7502050309678808923&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=86348c5ac45f19b1bedf8e6ef084c28854d4532a7fbfaa13&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=31%E4%B8%A8%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%EF%BC%9A%E7%BD%91%E7%AB%99%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%AA%A5%E8%A7%86.m4a', 
15, 15) 
 {executed in 1 msec}
2020-11-19 11:08:37.105 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.106 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:08:37.106 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.107 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:08:37.110 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-20 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> XSS和CSRF都和身份有关系，前者是劫持了某个身份，后者是假冒了某个身份。而手工输入验证码实在鉴权之前发生的，一个验证码正确不能说明任何身份信息，只能说明在网站活动的实体是一个具有识别验证码的对象，这个对象可能是人。好像叫“图灵测试”还是什么来着。 
<br> <br>提交信用卡信息，有两个方面需要考虑，一个是信息的保密性，这个应该要依靠加解密来实现；第二个是要实现不可抵赖性，即确保这个行为是真实的用户发出的真实的请求，即第一要防止XSS，即身份被冒用；第二要防止CSRF，即行为被仿造。像老师课里讲到的，利用TOKEN信息，这个TOKEN也可以来自永和的电子令牌或U盾，做到防抵赖等。 
<br> <br>最后，用户也要验证服务提供者的身份，这就需要HTTPS了。但是如果DNS被劫持，确实不好办，最近我们另外一个项目遇到了这个问题，但是客户端也不支持HTTP-DNS。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-20 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 这块刚好是欠缺的关于安全方面的。下面是对于今天2个问题的个人理解 <br>&nbsp;1.短信验证:短信验证应当是防范了XSS攻击。 <br>&nbsp;2.支付系统：多种攻击都应当要防范，支付可能是直接的网络密码支付或者密码支付；我觉得以下几种方式都要防御；XSS、SQL注入、DNS以及DDOS攻击。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;如果可以的话希望老师可以适当补充这块的知识或书籍资料；其实在现在而言 ，这个大概是每个IT人员都应当有的常识。谢谢老师今天的分享，期待老师后续的分享。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你讲的短信验证是验证码中的特殊一种，它不但能确定对方“是真实的”，而不是机器，还能验证对方的身份，它比普通的验证码要麻烦，但是可以防范更多的攻击方式，所以你可以多想一想，再补充。<br><br>对于扩展阅读，因为这篇已经有 
4 条了，考虑接受程度和需要的时间成本，除非有我认为特别好的材料，一般就不再增加了。但是安全方面的学习材料互联网上很多，我相信你也可以找得到。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 2 msec}
2020-11-19 11:08:37.113 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=15 
 {executed in 1 msec}
2020-11-19 11:08:37.113 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:08:37.116 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-20 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> XSS和CSRF都和身份有关系，前者是劫持了某个身份，后者是假冒了某个身份。而手工输入验证码实在鉴权之前发生的，一个验证码正确不能说明任何身份信息，只能说明在网站活动的实体是一个具有识别验证码的对象，这个对象可能是人。好像叫“图灵测试”还是什么来着。 
<br> <br>提交信用卡信息，有两个方面需要考虑，一个是信息的保密性，这个应该要依靠加解密来实现；第二个是要实现不可抵赖性，即确保这个行为是真实的用户发出的真实的请求，即第一要防止XSS，即身份被冒用；第二要防止CSRF，即行为被仿造。像老师课里讲到的，利用TOKEN信息，这个TOKEN也可以来自永和的电子令牌或U盾，做到防抵赖等。 
<br> <br>最后，用户也要验证服务提供者的身份，这就需要HTTPS了。但是如果DNS被劫持，确实不好办，最近我们另外一个项目遇到了这个问题，但是客户端也不支持HTTP-DNS。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-20 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 这块刚好是欠缺的关于安全方面的。下面是对于今天2个问题的个人理解 <br>&nbsp;1.短信验证:短信验证应当是防范了XSS攻击。 <br>&nbsp;2.支付系统：多种攻击都应当要防范，支付可能是直接的网络密码支付或者密码支付；我觉得以下几种方式都要防御；XSS、SQL注入、DNS以及DDOS攻击。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;如果可以的话希望老师可以适当补充这块的知识或书籍资料；其实在现在而言 ，这个大概是每个IT人员都应当有的常识。谢谢老师今天的分享，期待老师后续的分享。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 你讲的短信验证是验证码中的特殊一种，它不但能确定对方“是真实的”，而不是机器，还能验证对方的身份，它比普通的验证码要麻烦，但是可以防范更多的攻击方式，所以你可以多想一想，再补充。<br><br>对于扩展阅读，因为这篇已经有 
4 条了，考虑接受程度和需要的时间成本，除非有我认为特别好的材料，一般就不再增加了。但是安全方面的学习材料互联网上很多，我相信你也可以找得到。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 15, 15) 
 {executed in 2 msec}
2020-11-19 11:08:37.119 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.120 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:08:37.120 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.121 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:08:37.122 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 15, 'https://static001.geekbang.org/resource/image/c0/74/c01cf3b2092046ff7ba8cfef70f6c074.jpg', 
15) 
 {executed in 1 msec}
2020-11-19 11:08:37.124 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.124 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:08:37.125 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 15, 'https://static001.geekbang.org/resource/image/c0/74/c01cf3b2092046ff7ba8cfef70f6c074.jpg', 
15) 
 {executed in 0 msec}
2020-11-19 11:08:37.128 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.128 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:08:37.129 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 15, 15) 
 {executed in 0 msec}
2020-11-19 11:08:37.132 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=15 
 {executed in 0 msec}
2020-11-19 11:08:37.133 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:08:37.134 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 15, 15) 
 {executed in 0 msec}
2020-11-19 11:09:20.509 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='594022459254717' 
 {executed in 0 msec}
2020-11-19 11:09:20.510 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:09:20.511 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755360, 1) 
 {executed in 0 msec}
2020-11-19 11:09:20.511 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755360, 1) 
 {executed in 0 msec}
2020-11-19 11:09:20.511 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|16            |
|--------------|

2020-11-19 11:09:20.519 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '63dbe220-c088-4916-bf6b-a8210b932608', 
16) 
 {executed in 0 msec}
2020-11-19 11:09:20.519 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '63dbe220-c088-4916-bf6b-a8210b932608', 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.520 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|16            |
|--------------|

2020-11-19 11:09:20.523 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=16, revision_default=1, revision_timestamp=1605755360, 
revision_uid=1 where vid=16 
 {executed in 0 msec}
2020-11-19 11:09:20.527 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.527 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:09:20.528 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '594022459254717', 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.532 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.532 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:09:20.533 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '594022459254717', 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.536 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=16 
 {executed in 0 msec}
2020-11-19 11:09:20.537 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:09:20.538 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=16 
 {executed in 1 msec}
2020-11-19 11:09:20.538 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:09:20.539 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 16, 0, 0, 12, 0, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.542 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.543 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:09:20.544 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.544 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:09:20.547 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2172" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-952d23fc " data-slate-type="paragraph" data-slate-object="block" 
data-key="2173"> <span data-slate-object="text" data-key="2174"><span data-slate-leaf="true" 
data-offset-key="2174:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-4918b60d " data-slate-type="paragraph" data-slate-object="block" data-key="2175"> 
<span data-slate-object="text" data-key="2176"><span data-slate-leaf="true" data-offset-key="2176:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们继续 Ops 三部曲。今天我要讲一讲持续集成和持续发布，以及 
Web 全栈项目中一些常见的测试维度。</span></span></span> </div> <h2 class="se-b7f06a4e" data-slate-type="heading" 
data-slate-object="block" data-key="2177"><span data-slate-object="text" data-key="2178"><span 
data-slate-leaf="true" data-offset-key="2178:0" data-first-offset="true"><span data-slate-string="true">CI/CD 
和 Pipeline</span></span></span></h2> <div class="se-4fd2580d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2179"> <span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">CI 
指的是 Continuous Integration，持续集成，而 CD 指的是 Continuous Delivery，持续交付。它们二者结合起来，通过将工程师的代码变更反复、多次、快速地集成到代码主线，执行多种自动化的测试和验证，从而给出快速反馈，并最终达到将变更持续、迅速发布到线上的目的。</span></span></span> 
</div> <div class="se-bbf30371 " data-slate-type="paragraph" data-slate-object="block" data-key="2181"> 
<span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" data-offset-key="2182:0" 
data-first-offset="true"><span data-slate-string="true">为了达到持续集成和持续交付，我们几乎一定会使用一个叫做 pipeline 
的工具来将流程自动化。Ops 中我们总在谈论的 Pipeline，指的就是它。</span></span></span><span data-slate-object="text" 
data-key="2183"><span data-slate-leaf="true" data-offset-key="2183:0" data-first-offset="true"><span 
class="se-60dbd664" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Pipeline 
是一个将代码开发、编译、构建、测试、部署等等 Ops 活动集成起来并自动化的基础设施。</span></span></span></span><span data-slate-object="text" 
data-key="2184"><span data-slate-leaf="true" data-offset-key="2184:0" data-first-offset="true"><span 
data-slate-string="true">把 Pipeline 放在最先讲，是因为它是集成 Ops 各种自动化工具的核心，而这一系列工具，往往从编译过程就开始，到部署后的验证执行结束。</span></span></span> 
</div> <div class="se-bb30b8e0 " data-slate-type="paragraph" data-slate-object="block" data-key="2185"> 
<span data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">Pipeline 确定和统一了从开发、测试到部署的主要流程，但最大的作用是对劳动力的解放。程序来控制代码从版本库到线上的行进流程，而非人。因此，如果一个 
pipeline 上面设置太多个需要人工审批的暂停点，这样的自动化就会失去一大部分意义。</span></span></span> </div> <div class="se-a7d253a4" 
data-slate-type="image" data-slate-object="block" data-key="2187"> <img class="se-250fb7f7" 
src="https://static001.geekbang.org/resource/image/40/65/40a75789b51db76bf4afdfd6f3a01565.jpg"> 
</div> <div class="se-ee67feea " data-slate-type="paragraph" data-slate-object="block" data-key="2188"> 
<span data-slate-object="text" data-key="2189"><span data-slate-leaf="true" data-offset-key="2189:0" 
data-first-offset="true"><span data-slate-string="true">上图来自维基百科的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2190" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="2191"><span data-slate-leaf="true" data-offset-key="2191:0" data-first-offset="true"><span 
data-slate-string="true">持续交付</span></span></span></a><span data-slate-object="text" data-key="2192"><span 
data-slate-leaf="true" data-offset-key="2192:0" data-first-offset="true"><span data-slate-string="true">词条，从中你也可以看到，整个流程中，版本管理是触发构建和测试的核心工具，而</span></span></span><span 
data-slate-object="text" data-key="2193"><span data-slate-leaf="true" data-offset-key="2193:0" 
data-first-offset="true"><span class="se-ed51bf55" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">多层次、不同阶段的测试则是保证整个持续集成和持续交付的关键</span></span></span></span><span data-slate-object="text" 
data-key="2194"><span data-slate-leaf="true" data-offset-key="2194:0" data-first-offset="true"><span 
data-slate-string="true">。接下去，我们就来结合实例理解这一点。</span></span></span> </div> <h2 class="se-44633a11" 
data-slate-type="heading" data-slate-object="block" data-key="2195"><span data-slate-object="text" 
data-key="2196"><span data-slate-leaf="true" data-offset-key="2196:0" data-first-offset="true"><span 
data-slate-string="true">不同测试的集成</span></span></span></h2> <div class="se-2c705b9a " data-slate-type="paragraph" 
data-slate-object="block" data-key="2197"> <span data-slate-object="text" data-key="2198"><span 
data-slate-leaf="true" data-offset-key="2198:0" data-first-offset="true"><span data-slate-string="true">记得上个月和一位硕士毕业以后做过一年网络工程师的朋友聊天，他正在慢慢转向通用软件工程师的角色。他在学校里修的是计算机相关的专业，因为毕业没有多久，他对于学校里做项目的情况还历历在目。</span></span></span> 
</div> <div class="se-c7114019 " data-slate-type="paragraph" data-slate-object="block" data-key="2199"> 
<span data-slate-object="text" data-key="2200"><span data-slate-leaf="true" data-offset-key="2200:0" 
data-first-offset="true"><span data-slate-string="true">我问道：“你觉得工业界和学校里做项目有什么不同呢？”他说：“最大的不同在于，学校里更多的是‘实现功能’，而工作以后，更多的是‘实现工程’。”</span></span></span> 
</div> <div class="se-f939b9d5 " data-slate-type="paragraph" data-slate-object="block" data-key="2201"> 
<span data-slate-object="text" data-key="2202"><span data-slate-leaf="true" data-offset-key="2202:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这个概括非常贴切，事实上，实现的“功能”，只是“工程”范畴内太小的一部分了（关于这方面，你也许会想起 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2203" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="2204"><span data-slate-leaf="true" data-offset-key="2204:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2205"><span data-slate-leaf="true" data-offset-key="2205:0" 
data-first-offset="true"><span data-slate-string="true"> 的选修课堂，关于程序员“独立性”的介绍），一个程序员的工程能力，远远不只有实现功能那么简单。而测试，就是从学校迈向职场，以及在职场上成熟精进的角度之一。</span></span></span> 
</div> <div class="se-65779193 " data-slate-type="paragraph" data-slate-object="block" data-key="2206"> 
<span data-slate-object="text" data-key="2207"><span data-slate-leaf="true" data-offset-key="2207:0" 
data-first-offset="true"><span data-slate-string="true">在读书的时候，我们可能已经学过测试的 V 模型（下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2208" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2209"><span data-slate-leaf="true" data-offset-key="2209:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2210"><span data-slate-leaf="true" data-offset-key="2210:0" data-first-offset="true"><span 
data-slate-string="true">文章）：</span></span></span> </div> <div class="se-6bd54995" data-slate-type="image" 
data-slate-object="block" data-key="2211"> <img class="se-848517f8" src="https://static001.geekbang.org/resource/image/75/ef/7532ac75f2d65347d7fba6d1912b5fef.jpg"> 
</div> <div class="se-e9f5c1e6 " data-slate-type="paragraph" data-slate-object="block" data-key="2212"> 
<span data-slate-object="text" data-key="2213"><span data-slate-leaf="true" data-offset-key="2213:0" 
data-first-offset="true"><span data-slate-string="true">这是一个基本的给不同测试分层的方式，当然，还有从其它维度进行的测试分类方法。在有了 
pipeline 以后，这些测试可以集成到上面去。每一层测试分别对应到设计阶段的特定环节。在实际项目中，不同维度测试的实现可谓参差不齐。我来挑几个，说说我的理解，并讲讲我所见到的来自 
Web 全栈项目中的一些典型问题。</span></span></span> </div> <h3 class="se-d742ae0e" data-slate-type="heading" 
data-slate-object="block" data-key="2214"><span data-slate-object="text" data-key="2215"><span 
data-slate-leaf="true" data-offset-key="2215:0" data-first-offset="true"><span data-slate-string="true">1. 
单元测试</span></span></span></h3> <div class="se-c2e0914f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2216"> <span data-slate-object="text" data-key="2217"><span data-slate-leaf="true" 
data-offset-key="2217:0" data-first-offset="true"><span data-slate-string="true">单元测试（Unit 
Test），这一步还属于代码层面的行为活动，因此单元测试一定要是开发写的，因为单元测试重要的一个因素就是要保证它能够做到白盒覆盖。</span></span></span> </div> 
<div class="se-34b13c68 " data-slate-type="paragraph" data-slate-object="block" data-key="2218"> 
<span data-slate-object="text" data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" 
data-first-offset="true"><span data-slate-string="true">单元测试要求易于执行、快速反馈，且必须要做到完全的执行幂等性。对于整个持续集成活动来说，单元测试和其它测试不同，它是和源代码的编译构建放在一起的，也就是说，单元测试执行的失败，往往意味着编译构建的失败，而非一个单独测试过程的失败。据我观察，在 
Web 全栈项目中，团队普遍都能够意识到单元测试的重要性，但是存在这样几个典型的问题。</span></span></span> </div> <div class="se-f63a31cb 
" data-slate-type="paragraph" data-slate-object="block" data-key="2220"> <span data-slate-object="text" 
data-key="2221"><span data-slate-leaf="true" data-offset-key="2221:0" data-first-offset="true"><span 
class="se-d6f050e9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">问题一：执行缓慢，缺乏快速反馈。</span></span></span></span> 
</div> <div class="se-442ca016 " data-slate-type="paragraph" data-slate-object="block" data-key="2222"> 
<span data-slate-object="text" data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" 
data-first-offset="true"><span data-slate-string="true">由于需要反复执行和根据结果修改代码，快速的反馈是非常重要的，从几秒内到几十秒内必须得到结果。我见过有一些团队的单元测试跑一遍要十分钟以上，那么这种情况首先要考虑的是，单元测试是不是该优化了？代码包是不是太大，该拆分了？其次才去见招拆招，比如要求能够跑增量的测试，换言之，改动了什么内容，能够重跑改动的那一部分，而不是所有的测试集合，否则就失去了单元测试的意义。</span></span></span> 
</div> <div class="se-1fede1d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2224"> 
<span data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">特别说一个例子。有一些项目中，为了模拟一些代码的行为，会使用 sleep() 
方法来让某些代码的执行“等一下”，这是一个典型的不良实践，这一类显式地拖慢单元测试执行的方法应当被限制或禁止。我们可以定义 TimeKeeper 之类用来返回“当前时间”的对象，这样在测试的时候，我们就可以替换其逻辑来模拟时间的流逝。</span></span></span> 
</div> <div class="se-2296f954 " data-slate-type="paragraph" data-slate-object="block" data-key="2226"> 
<span data-slate-object="text" data-key="2227"><span data-slate-leaf="true" data-offset-key="2227:0" 
data-first-offset="true"><span class="se-7bc8fa7d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">问题二：无法消除依赖。</span></span></span></span> </div> <div class="se-4dcc5f64 
" data-slate-type="paragraph" data-slate-object="block" data-key="2228"> <span data-slate-object="text" 
data-key="2229"><span data-slate-leaf="true" data-offset-key="2229:0" data-first-offset="true"><span 
data-slate-string="true">单元测试关注的是方法、函数这些很小的“单元”，因此，为了能够专注在有限的代码层面并保持快速，所有的远程接口、其它组件的调用等等，全部都要用桩方法替换掉。但我依然看到很多项目中单元测试会调用数据库，会加载复杂的配置文件集合等等，我认为这些都是不妥的。我们希望单元测试放在开发机器上能跑，放到构建机器上也能跑，能做到这一点的前提，就是要把这些依赖组件全部拿掉。</span></span></span> 
</div> <div class="se-fcc330f8 " data-slate-type="paragraph" data-slate-object="block" data-key="2230"> 
<span data-slate-object="text" data-key="2231"><span data-slate-leaf="true" data-offset-key="2231:0" 
data-first-offset="true"><span class="se-324af6ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">问题三：对达到“单元测试覆盖率”机械而生硬地执行。</span></span></span></span> </div> <div 
class="se-899ad72e " data-slate-type="paragraph" data-slate-object="block" data-key="2232"> 
<span data-slate-object="text" data-key="2233"><span data-slate-leaf="true" data-offset-key="2233:0" 
data-first-offset="true"><span data-slate-string="true">我是坚决反对那些在软件开发中不讲实际情况而制定生硬指标的做法的。单元测试和其它测试一样，书写和维护也都是有成本的，并非覆盖率越高越好，要优先覆盖那些核心逻辑和复杂逻辑的源代码（这个代码无论是在前端还是后端，我们都有很成熟的单元测试框架和技术了），因此我们单纯地讲一个覆盖率是缺乏意义的。</span></span></span> 
</div> <div class="se-b8838f86 " data-slate-type="paragraph" data-slate-object="block" data-key="2234"> 
<span data-slate-object="text" data-key="2235"><span data-slate-leaf="true" data-offset-key="2235:0" 
data-first-offset="true"><span data-slate-string="true">一个单元测试覆盖率 85% 的代码也许会比 15% 的代码好，但是，一个单元测试覆盖率 
95% 的代码可未必比 90% 的更好，我反而会担心里面是不是有很多为了单纯达标覆盖率而被迫写的无意义覆盖测试的代码。</span></span></span> </div> <h3 
class="se-03bb98c4" data-slate-type="heading" data-slate-object="block" data-key="2236"><span 
data-slate-object="text" data-key="2237"><span data-slate-leaf="true" data-offset-key="2237:0" 
data-first-offset="true"><span data-slate-string="true">2. 集成测试</span></span></span></h3> <div 
class="se-7f511adb " data-slate-type="paragraph" data-slate-object="block" data-key="2238"> 
<span data-slate-object="text" data-key="2239"><span data-slate-leaf="true" data-offset-key="2239:0" 
data-first-offset="true"><span data-slate-string="true">集成测试（Integration Test）泛指系统组件之间集成起来的功能性测试，但在 
Web 项目中，经常特指的是针对暴露的 Web 接口进行的端到端的测试。它一般被放在持续集成的 pipeline 中，编译构建阶段结束以后执行。</span></span></span> 
</div> <div class="se-52218e14 " data-slate-type="paragraph" data-slate-object="block" data-key="2240"> 
<span data-slate-object="text" data-key="2241"><span data-slate-leaf="true" data-offset-key="2241:0" 
data-first-offset="true"><span data-slate-string="true">集成测试的成熟程度，往往是一个项目质量的一个非常好的体现。在某些团队中，集成测试通过几个不同的环境来完成，比如α环境、β环境、γ环境等等，依次递进，越来越接近生产环境。比如α环境是部署在开发机上的，β环境是部署在专门机器上的测试环境，而γ环境又叫做“pre-prod”环境，是线上环境的拷贝，连数据库的数据都是从线上定期同步而来的。</span></span></span> 
</div> <div class="se-2465da71 " data-slate-type="paragraph" data-slate-object="block" data-key="2242"> 
<span data-slate-object="text" data-key="2243"><span data-slate-leaf="true" data-offset-key="2243:0" 
data-first-offset="true"><span class="se-a4d5f7d6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">集成测试的过程中，一个很容易出现的问题，就是测试无法具备独立性或幂等性。</span></span></span></span><span 
data-slate-object="text" data-key="2244"><span data-slate-leaf="true" data-offset-key="2244:0" 
data-first-offset="true"><span data-slate-string="true">集成测试的执行，往往比单个的单元测试执行要复杂得多，有独立性要求测试的执行不会出现冲突，即要么保证某测试环境在任何时间只有单独的测试在执行，要么允许多个测试执行，但它们之间互不影响。幂等性则要求测试如果执行了一半，中止了（这种情况很常见），那么测试执行的残留数据，不会影响到下一次测试的顺利执行。</span></span></span> 
</div> <h3 class="se-53d0e115" data-slate-type="heading" data-slate-object="block" data-key="2245"><span 
data-slate-object="text" data-key="2246"><span data-slate-leaf="true" data-offset-key="2246:0" 
data-first-offset="true"><span data-slate-string="true">3. 冒烟测试</span></span></span></h3> <div 
class="se-6aa4b5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="2247"> 
<span data-slate-object="text" data-key="2248"><span data-slate-leaf="true" data-offset-key="2248:0" 
data-first-offset="true"><span data-slate-string="true">冒烟测试（Smoke Testing）在 Web 项目中非常实用。冒烟测试最关心的不是功能的覆盖，而是对重要功能或者核心功能的保障。到了这一步，通常在线上部署完成后，为了进一步确保它是一次成功的部署，需要有快速而易于执行的测试来覆盖核心测试用例。</span></span></span> 
</div> <div class="se-94bc2659 " data-slate-type="paragraph" data-slate-object="block" data-key="2249"> 
<span data-slate-object="text" data-key="2250"><span data-slate-leaf="true" data-offset-key="2250:0" 
data-first-offset="true"><span data-slate-string="true">这就像每年的常规体检，你不可能事无巨细地做各种各样侵入性强的检查，而是通过快速的几项，比如血常规、心跳、血压等等来执行核心的几项检查。在某些公司，冒烟测试还被称作“Sanity 
Test”，从字面意思也可以得知，测试的目的仅仅是保证系统“没有发疯”。通常不会有测试放到生产线的机器上执行，但冒烟测试是一个例外，它在新代码部署到线上以后，会快速地执行一下，然后再进行流量的切换。</span></span></span> 
</div> <div class="se-b94c637e " data-slate-type="paragraph" data-slate-object="block" data-key="2251"> 
<span data-slate-object="text" data-key="2252"><span data-slate-leaf="true" data-offset-key="2252:0" 
data-first-offset="true"><span data-slate-string="true">除了功能上的快速冒烟覆盖，在某些系统中，性能是一个尤其重要的关注点，那么还会划分出 
Soak Testing（浸泡测试）这样的针对性能的测试来。当然，它对系统的影响可能较大，有时候不会部署在生产环境，而是在前面提到的 pre-prod 的生产环境的镜像环境中。</span></span></span> 
</div> <div class="se-13734eb4 " data-slate-type="paragraph" data-slate-object="block" data-key="2253"> 
<span data-slate-object="text" data-key="2254"><span data-slate-leaf="true" data-offset-key="2254:0" 
data-first-offset="true"><span class="se-49d596a3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">冒烟测试最容易出现的问题，是用例简洁程度和核心功能覆盖的不平衡。</span></span></span></span><span 
data-slate-object="text" data-key="2255"><span data-slate-leaf="true" data-offset-key="2255:0" 
data-first-offset="true"><span data-slate-string="true">冒烟测试要求用例尽可能简单，这样也能保证执行迅速，不拖慢整个部署的过程；但是，另一方面我们也希望核心功能都被覆盖到，许多团队容易犯的错误，就是在产品一开始的时候可以将冒烟测试的用例管理得非常好，但是随着时间进展，冒烟测试变得越来越笨重而庞大，最终失去了平衡。</span></span></span> 
</div> <h2 class="se-ba808a04" data-slate-type="heading" data-slate-object="block" data-key="2256"><span 
data-slate-object="text" data-key="2257"><span data-slate-leaf="true" data-offset-key="2257:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-480e4d7b " data-slate-type="paragraph" data-slate-object="block" data-key="2258"> 
<span data-slate-object="text" data-key="2259"><span data-slate-leaf="true" data-offset-key="2259:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了持续集成和持续发布，以及 Web 全栈项目中常见的测试维度，并讲到了各自容易出现的问题，依然希望你可以有效避坑。</span></span></span> 
</div> <div class="se-4e69ec57 " data-slate-type="paragraph" data-slate-object="block" data-key="2260"> 
<span data-slate-object="text" data-key="2261"><span data-slate-leaf="true" data-offset-key="2261:0" 
data-first-offset="true"><span data-slate-string="true">下面是提问时间：</span></span></span> </div> 
<div class="se-d7c9030c" data-slate-type="list" data-slate-object="block" data-key="2262"> 
<div class="se-5c20486f se-917e2478" data-slate-type="list-line" data-slate-object="block" 
data-key="2263"> <span data-slate-object="text" data-key="2264"><span data-slate-leaf="true" 
data-offset-key="2264:0" data-first-offset="true"><span data-slate-string="true">在你经历的项目中，你们是否实现或部分实现了持续集成和持续发布，能说说吗？</span></span></span> 
</div> <div class="se-fa8f6838 se-41460bfb" data-slate-type="list-line" data-slate-object="block" 
data-key="2265"> <span data-slate-object="text" data-key="2266"><span data-slate-leaf="true" 
data-offset-key="2266:0" data-first-offset="true"><span data-slate-string="true">除去文中介绍的，你觉得还有哪些测试的维度是 
Web 项目特有或经常关注的（比如浏览器兼容性测试）？</span></span></span> </div> </div> <div class="se-b24a6af1 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2267"> <span data-slate-object="text" data-key="2268"><span 
data-slate-leaf="true" data-offset-key="2268:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文就到这里，欢迎你继续学习下面的选修课堂，同时，也欢迎你在留言区就今天的内容与我讨论。</span></span></span> 
</div> <h2 class="se-1fdf4974" data-slate-type="heading" data-slate-object="block" data-key="2269"><span 
data-slate-object="text" data-key="2270"><span data-slate-leaf="true" data-offset-key="2270:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：持续集成和持续发布的更多挑战</span></span></span></h2> 
<div class="se-9568e4a8 " data-slate-type="paragraph" data-slate-object="block" data-key="2271"> 
<span data-slate-object="text" data-key="2272"><span data-slate-leaf="true" data-offset-key="2272:0" 
data-first-offset="true"><span data-slate-string="true">今天我们介绍的测试技术，还有上一讲介绍的部署技术，只是持续集成和持续发布的其中一部分核心内容，还有更多的挑战需要我们面对，也许对于它们中的不少内容，你已经在工作中接触过。</span></span></span> 
</div> <h3 class="se-011f2d66" data-slate-type="heading" data-slate-object="block" data-key="2273"><span 
data-slate-object="text" data-key="2274"><span data-slate-leaf="true" data-offset-key="2274:0" 
data-first-offset="true"><span data-slate-string="true">1. 代码静态分析</span></span></span></h3> 
<div class="se-82e16489 " data-slate-type="paragraph" data-slate-object="block" data-key="2275"> 
<span data-slate-object="text" data-key="2276"><span data-slate-leaf="true" data-offset-key="2276:0" 
data-first-offset="true"><span data-slate-string="true">对于软件工程而言，我们知道问题能够发现得越早，修复问题的代价就越小。比如，对于 
Java 来说，FindBugs、PMD 可以用于在编译期发现代码中常见的问题，CheckStyle 可以提示代码不符合规范的地方，等等。</span></span></span> 
</div> <div class="se-8584db02 " data-slate-type="paragraph" data-slate-object="block" data-key="2277"> 
<span data-slate-object="text" data-key="2278"><span data-slate-leaf="true" data-offset-key="2278:0" 
data-first-offset="true"><span data-slate-string="true">这些工具确实能带来好处，但是在应用它们的时候，我们需要时刻记住一点：</span></span></span><span 
data-slate-object="text" data-key="2279"><span data-slate-leaf="true" data-offset-key="2279:0" 
data-first-offset="true"><span class="se-535369ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">工具永远是为程序员服务的，而不是反过来</span></span></span></span><span data-slate-object="text" 
data-key="2280"><span data-slate-leaf="true" data-offset-key="2280:0" data-first-offset="true"><span 
data-slate-string="true">。我强调这一点的原因是，在我的工作中，曾经经历过这样的事情——程序员为了通过这些静态工具的检查，对代码做了许多毫无意义的修改。比如这样的例子：</span></span></span> 
</div> <div class="se-15b8821b se-6e8e9002" data-slate-type="pre" data-slate-object="block" 
data-key="2281" data-code-language="cpp"> <div class="se-a3003b52 se-3d7e348e"> <span></span> 
</div> <div class="se-8182bff9"> <div class="se-813010ea se-31ddd0cd" data-code-line-number="1"></div> 
<div class="se-813010ea se-31ddd0cd" data-code-line-number="2"></div> <div class="se-813010ea 
se-31ddd0cd" data-code-line-number="3"></div> <div class="se-813010ea se-31ddd0cd" data-code-line-number="4"></div> 
<div class="se-813010ea se-31ddd0cd" data-code-line-number="5"></div> </div> <div class="se-be86b354 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2282"> <span data-slate-object="text" data-key="2283"><span data-slate-leaf="true" 
data-offset-key="2283:0" data-first-offset="true"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3635411596" data-annotation-type="annotation"><span data-slate-string="true">/**</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2284"> <span data-slate-object="text" data-key="2285"><span data-slate-leaf="true" 
data-offset-key="2285:0" data-first-offset="true"><span data-slate-string="true"> * 返回名字。</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2286"> <span data-slate-object="text" data-key="2287"><span data-slate-leaf="true" 
data-offset-key="2287:0" data-first-offset="true"><span data-slate-string="true"> * @return 
名字</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="2288"> <span data-slate-object="text" data-key="2289"><span 
data-slate-leaf="true" data-offset-key="2289:0" data-first-offset="true"><span data-slate-string="true"> 
*/</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="2290"> <span data-slate-object="text" data-key="2291"><span 
data-slate-leaf="true" data-offset-key="2291:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6156994268" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8505198913" data-annotation-type="annotation"><span data-slate-string="true"> 
String </span></span></span><span data-slate-leaf="true" data-offset-key="2291:2"><span class=" 
gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_0620745332" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true">getName</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:3"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8374632445" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_8505198913" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="2291:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:5"><span data-slate-string="true">{ ... }</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-4a2422ed " data-slate-type="paragraph" data-slate-object="block" data-key="2292"> 
<span data-slate-object="text" data-key="2293"><span data-slate-leaf="true" data-offset-key="2293:0" 
data-first-offset="true"><span data-slate-string="true">本来是一个特别简单而直接的 get 方法，命名也是符合常见 getter/setter 
的规约的。但是，为了通过 CheckStyle 这样的静态工具检查，添加了这样本无必要、读起来也显然毫无意义的注释。你可以想象，代码中有许许多多的 get/set 方法，那这样的注释会有多少。我认为，和文中提到的测试覆盖率的那一条一样，这也是工具起到了反面作用的例子。</span></span></span> 
</div> <h3 class="se-1ff9c52f" data-slate-type="heading" data-slate-object="block" data-key="2294"><span 
data-slate-object="text" data-key="2295"><span data-slate-leaf="true" data-offset-key="2295:0" 
data-first-offset="true"><span data-slate-string="true">2. 依赖管理</span></span></span></h3> <div 
class="se-84248e25 " data-slate-type="paragraph" data-slate-object="block" data-key="2296"> 
<span data-slate-object="text" data-key="2297"><span data-slate-leaf="true" data-offset-key="2297:0" 
data-first-offset="true"><span data-slate-string="true">对于 Java 程序员来说，有个略带戏谑的说法是：“没有痛不欲生地处理过 
Jar 包冲突的 Java 程序员不是真正的 Java 程序员。”这在一定程度上说明了依赖管理的重要性。</span></span></span> </div> <div class="se-0cbdf874 
" data-slate-type="paragraph" data-slate-object="block" data-key="2298"> <span data-slate-object="text" 
data-key="2299"><span data-slate-leaf="true" data-offset-key="2299:0" data-first-offset="true"><span 
data-slate-string="true">注意这里说的依赖，即便对于 Java 来说，也不一定是 Jar 包，可以是任何文件夹和文件。尤其是对于茁壮发展的 Java 社区来说，版本多如牛毛，质量良莠不齐，包和类的命名冲突简直是家常便饭。我在项目中用过好几个依赖管理的工具，比如 
Python 的 pip，Java 的 Ant 和 Maven，还有一些公司内部未开源的工具。我认为，一个好的依赖管理的工具，有这么几点核心特性需要具备：</span></span></span> 
</div> <div class="se-682c515e" data-slate-type="list" data-slate-object="block" data-key="2300"> 
<div class="se-af65f64a se-3a470e56" data-slate-type="list-line" data-slate-object="block" 
data-key="2301"> <span data-slate-object="text" data-key="2302"><span data-slate-leaf="true" 
data-offset-key="2302:0" data-first-offset="true"><span class="se-135fb28d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">一个抽象合理、配置简约的 DSL。</span></span></span></span><span 
data-slate-object="text" data-key="2303"><span data-slate-leaf="true" data-offset-key="2303:0" 
data-first-offset="true"><span data-slate-string="true">本质上说，依赖管理需要某种领域特定语言的配置方式来达到完整支持的目的，这可以是稍复杂的 
XML，可以是简单键值对列表，也可以是 YAML 格式等等（关于这些格式，我会在下一章“专题”部分做出介绍）。</span></span></span> </div> <div class="se-25b158c1 
se-c65cd46b" data-slate-type="list-line" data-slate-object="block" data-key="2304"> <span data-slate-object="text" 
data-key="2305"><span data-slate-leaf="true" data-offset-key="2305:0" data-first-offset="true"><span 
class="se-96985a44" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持将单独的包组织成集合来简化配置。</span></span></span></span><span 
data-slate-object="text" data-key="2306"><span data-slate-leaf="true" data-offset-key="2306:0" 
data-first-offset="true"><span data-slate-string="true">即若干个关联功能的 Jar 包可以组成一个集合，来简化依赖配置，比如 
SpringBoot 几个相关包的集合。当然，这种方式也会带来一些副作用，一个是可能引入了一些原本不需要的 Jar 包；另一个是，如果存在局部版本不匹配，处理起来就会比较麻烦，而且打破了基于集合整体配置的简化优势。</span></span></span> 
</div> <div class="se-46ba54b8 se-c8e1acc9" data-slate-type="list-line" data-slate-object="block" 
data-key="2307"> <span data-slate-object="text" data-key="2308"><span data-slate-leaf="true" 
data-offset-key="2308:0" data-first-offset="true"><span class="se-2069a90b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">支持基于版本的递归依赖。</span></span></span></span><span 
data-slate-object="text" data-key="2309"><span data-slate-leaf="true" data-offset-key="2309:0" 
data-first-offset="true"><span data-slate-string="true">比如 A 依赖于 B，B 依赖于 C，那么只需要在 A 的依赖文件中配置 
B，C 就会被自动引入。B 是 A 的直接依赖，而 C 是 A 的间接依赖。</span></span></span> </div> <div class="se-2a4e9344 
se-12fbe8b1" data-slate-type="list-line" data-slate-object="block" data-key="2310"> <span data-slate-object="text" 
data-key="2311"><span data-slate-leaf="true" data-offset-key="2311:0" data-first-offset="true"><span 
class="se-eb2d7784" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持版本冲突的选择。</span></span></span></span><span 
data-slate-object="text" data-key="2312"><span data-slate-leaf="true" data-offset-key="2312:0" 
data-first-offset="true"><span data-slate-string="true">比如 A 依赖于 B 和 C，B 依赖于 D 1.0，C 依赖于 D 
2.0，那么通过配置可以选择在最终引入依赖的时候引入 D 1.0 还是 2.0。</span></span></span> </div> <div class="se-bb5609ba 
se-d5b36269" data-slate-type="list-line" data-slate-object="block" data-key="2313"> <span data-slate-object="text" 
data-key="2314"><span data-slate-leaf="true" data-offset-key="2314:0" data-first-offset="true"><span 
class="se-cc9f3753" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持不同环境的不同依赖配置。</span></span></span></span><span 
data-slate-object="text" data-key="2315"><span data-slate-leaf="true" data-offset-key="2315:0" 
data-first-offset="true"><span data-slate-string="true">比如编译期的依赖，测试期的依赖和运行期的依赖都可能不一样。</span></span></span> 
</div> </div> <h3 class="se-eb803b4a" data-slate-type="heading" data-slate-object="block" data-key="2316"><span 
data-slate-object="text" data-key="2317"><span data-slate-leaf="true" data-offset-key="2317:0" 
data-first-offset="true"><span data-slate-string="true">3. 环境监控</span></span></span></h3> <div 
class="se-249c5fd9 " data-slate-type="paragraph" data-slate-object="block" data-key="2318"> 
<span data-slate-object="text" data-key="2319"><span data-slate-leaf="true" data-offset-key="2319:0" 
data-first-offset="true"><span data-slate-string="true">既然要持续集成和持续发布，自动化可以将人力和重复劳动省下来，但是并不代表把对系统的关注和了解省下来。环境监控，指的是通过一定的工具，来对集成和发布的不同环境做出不同维度的监控，它包括如下特性：</span></span></span> 
</div> <div class="se-7893c2d8" data-slate-type="list" data-slate-object="block" data-key="2320"> 
<div class="se-6e0f584c se-cad536b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2321"> <span data-slate-object="text" data-key="2322"><span data-slate-leaf="true" 
data-offset-key="2322:0" data-first-offset="true"><span class="se-d038dc66" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">多维度、分级别、可视化的数据统计和监控。</span></span></span></span><span 
data-slate-object="text" data-key="2323"><span data-slate-leaf="true" data-offset-key="2323:0" 
data-first-offset="true"><span data-slate-string="true">核心性能的统计信息既包括应用的统计信息，也包括存储，比如数据库的统计信息，还包括容器（比如 
Docker）或者是机器本身的统计信息。监控信息的分级在数据量巨大的时候显得至关重要，信息量大而缺乏组织就是没有信息。通常，有一个核心 KPI 页面，可以快速获知核心组件的健康信息，这个要求在一屏以内，以便可以一眼就看得到，其它信息可以在不同的子页面中展开。</span></span></span> 
</div> <div class="se-63f13668 se-99db2e90" data-slate-type="list-line" data-slate-object="block" 
data-key="2324"> <span data-slate-object="text" data-key="2325"><span data-slate-leaf="true" 
data-offset-key="2325:0" data-first-offset="true"><span class="se-41ac96c9" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">基于监控信息的自动化操作。</span></span></span></span><span 
data-slate-object="text" data-key="2326"><span data-slate-leaf="true" data-offset-key="2326:0" 
data-first-offset="true"><span data-slate-string="true">最常见的例子就是告警。CPU 过高了要告警，I/O 过高了要告警，失败次数超过阈值要告警。使用监控工具根据这些信息可以很容易地配置合理的告警规则，要做一个完备的告警系统，规则可以非常复杂。告警和上面说的监控一样，也要分级。小问题自动创建低优先级的问题单（ticket），大问题创建高优先级的问题单，紧急问题电话、短信自动联系 
oncall。其它操作，还包括自动熔断、自动限流、自动扩容和自动降级（参见 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2327" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="2328"><span 
data-slate-leaf="true" data-offset-key="2328:0" data-first-offset="true"><span data-slate-string="true">[第 
17 讲]</span></span></span></a><span data-slate-object="text" data-key="2329"><span data-slate-leaf="true" 
data-offset-key="2329:0" data-first-offset="true"><span data-slate-string="true"> 优雅降级）等等。</span></span></span> 
</div> <div class="se-d33c7a8b se-54d89985" data-slate-type="list-line" data-slate-object="block" 
data-key="2330"> <span data-slate-object="text" data-key="2331"><span data-slate-leaf="true" 
data-offset-key="2331:0" data-first-offset="true"><span class="se-c9efc156" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">上述模块的规则自定义和重用能力。</span></span></span></span><span 
data-slate-object="text" data-key="2332"><span data-slate-leaf="true" data-offset-key="2332:0" 
data-first-offset="true"><span data-slate-string="true">在上面说到这些复杂的需求的时候，如果一切都从头开始做无疑是非常耗时费力的。因而和软件代码需要组织和重构一样，告警的配置和规则也是。一般说来，在大厂内部，都有这方面支持比较好的工具，对于缺乏这样强大的自研能力的中小公司来说，业界也有比较成熟的解决方案可以直接购买。</span></span></span> 
</div> </div> <h2 class="se-1da0524e" data-slate-type="heading" data-slate-object="block" data-key="2333"><span 
data-slate-object="text" data-key="2334"><span data-slate-leaf="true" data-offset-key="2334:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-24751c43" data-slate-type="list" data-slate-object="block" data-key="2335"> <div 
class="se-78335952 se-b3746201" data-slate-type="list-line" data-slate-object="block" data-key="2336"> 
<span data-slate-object="text" data-key="2337"><span data-slate-leaf="true" data-offset-key="2337:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了测试的 V 模型，感兴趣的话欢迎继续阅读这篇 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2338" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2339"><span data-slate-leaf="true" data-offset-key="2339:0" 
data-first-offset="true"><span data-slate-string="true">V Model</span></span></span></a><span 
data-slate-object="text" data-key="2340"><span data-slate-leaf="true" data-offset-key="2340:0" 
data-first-offset="true"><span data-slate-string="true">，特别是它对其优劣的比较分析。</span></span></span> 
</div> <div class="se-07a30e5f se-57e7c2bd" data-slate-type="list-line" data-slate-object="block" 
data-key="2341"> <span data-slate-object="text" data-key="2342"><span data-slate-leaf="true" 
data-offset-key="2342:0" data-first-offset="true"><span data-slate-string="true">我们在做 Web 项目的时候，在单元测试的层面，去测试多线程代码的正确，是比较困难的，有一些开源库对此做了一些尝试，比如 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2343" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="2344"><span data-slate-leaf="true" data-offset-key="2344:0" 
data-first-offset="true"><span data-slate-string="true">thread-weaver</span></span></span></a><span 
data-slate-object="text" data-key="2345"><span data-slate-leaf="true" data-offset-key="2345:0" 
data-first-offset="true"><span data-slate-string="true">，感兴趣的话可以了解。</span></span></span> </div> 
<div class="se-0366d6a2 se-82e7edcf" data-slate-type="list-line" data-slate-object="block" 
data-key="2346"> <span data-slate-object="text" data-key="2347"><span data-slate-leaf="true" 
data-offset-key="2347:0" data-first-offset="true"><span data-slate-string="true">文中提到了 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2348" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2349"><span data-slate-leaf="true" data-offset-key="2349:0" 
data-first-offset="true"><span data-slate-string="true">Maven</span></span></span></a><span 
data-slate-object="text" data-key="2350"><span data-slate-leaf="true" data-offset-key="2350:0" 
data-first-offset="true"><span data-slate-string="true"> 这种管理依赖并进行项目构建打包的工具，如果你使用 Java 语言的话，你应该了解一下，如果你需要中文教程来系统学习，那么你可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2351" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2352"><span data-slate-leaf="true" data-offset-key="2352:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2353"><span data-slate-leaf="true" data-offset-key="2353:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-8d64d989" data-slate-type="image" 
data-slate-object="block" data-key="2354"> <img class="se-b7f2701d" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.551 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.551 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:09:20.554 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2172" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-952d23fc " data-slate-type="paragraph" data-slate-object="block" data-key="2173"> 
<span data-slate-object="text" data-key="2174"><span data-slate-leaf="true" data-offset-key="2174:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-4918b60d " data-slate-type="paragraph" data-slate-object="block" data-key="2175"> 
<span data-slate-object="text" data-key="2176"><span data-slate-leaf="true" data-offset-key="2176:0" 
data-first-offset="true"><span data-slate-string="true">今天，我们继续 Ops 三部曲。今天我要讲一讲持续集成和持续发布，以及 
Web 全栈项目中一些常见的测试维度。</span></span></span> </div> <h2 class="se-b7f06a4e" data-slate-type="heading" 
data-slate-object="block" data-key="2177"><span data-slate-object="text" data-key="2178"><span 
data-slate-leaf="true" data-offset-key="2178:0" data-first-offset="true"><span data-slate-string="true">CI/CD 
和 Pipeline</span></span></span></h2> <div class="se-4fd2580d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2179"> <span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">CI 
指的是 Continuous Integration，持续集成，而 CD 指的是 Continuous Delivery，持续交付。它们二者结合起来，通过将工程师的代码变更反复、多次、快速地集成到代码主线，执行多种自动化的测试和验证，从而给出快速反馈，并最终达到将变更持续、迅速发布到线上的目的。</span></span></span> 
</div> <div class="se-bbf30371 " data-slate-type="paragraph" data-slate-object="block" data-key="2181"> 
<span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" data-offset-key="2182:0" 
data-first-offset="true"><span data-slate-string="true">为了达到持续集成和持续交付，我们几乎一定会使用一个叫做 pipeline 
的工具来将流程自动化。Ops 中我们总在谈论的 Pipeline，指的就是它。</span></span></span><span data-slate-object="text" 
data-key="2183"><span data-slate-leaf="true" data-offset-key="2183:0" data-first-offset="true"><span 
class="se-60dbd664" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Pipeline 
是一个将代码开发、编译、构建、测试、部署等等 Ops 活动集成起来并自动化的基础设施。</span></span></span></span><span data-slate-object="text" 
data-key="2184"><span data-slate-leaf="true" data-offset-key="2184:0" data-first-offset="true"><span 
data-slate-string="true">把 Pipeline 放在最先讲，是因为它是集成 Ops 各种自动化工具的核心，而这一系列工具，往往从编译过程就开始，到部署后的验证执行结束。</span></span></span> 
</div> <div class="se-bb30b8e0 " data-slate-type="paragraph" data-slate-object="block" data-key="2185"> 
<span data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">Pipeline 确定和统一了从开发、测试到部署的主要流程，但最大的作用是对劳动力的解放。程序来控制代码从版本库到线上的行进流程，而非人。因此，如果一个 
pipeline 上面设置太多个需要人工审批的暂停点，这样的自动化就会失去一大部分意义。</span></span></span> </div> <div class="se-a7d253a4" 
data-slate-type="image" data-slate-object="block" data-key="2187"> <img class="se-250fb7f7" 
src="https://static001.geekbang.org/resource/image/40/65/40a75789b51db76bf4afdfd6f3a01565.jpg"> 
</div> <div class="se-ee67feea " data-slate-type="paragraph" data-slate-object="block" data-key="2188"> 
<span data-slate-object="text" data-key="2189"><span data-slate-leaf="true" data-offset-key="2189:0" 
data-first-offset="true"><span data-slate-string="true">上图来自维基百科的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2190" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="2191"><span data-slate-leaf="true" data-offset-key="2191:0" data-first-offset="true"><span 
data-slate-string="true">持续交付</span></span></span></a><span data-slate-object="text" data-key="2192"><span 
data-slate-leaf="true" data-offset-key="2192:0" data-first-offset="true"><span data-slate-string="true">词条，从中你也可以看到，整个流程中，版本管理是触发构建和测试的核心工具，而</span></span></span><span 
data-slate-object="text" data-key="2193"><span data-slate-leaf="true" data-offset-key="2193:0" 
data-first-offset="true"><span class="se-ed51bf55" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">多层次、不同阶段的测试则是保证整个持续集成和持续交付的关键</span></span></span></span><span data-slate-object="text" 
data-key="2194"><span data-slate-leaf="true" data-offset-key="2194:0" data-first-offset="true"><span 
data-slate-string="true">。接下去，我们就来结合实例理解这一点。</span></span></span> </div> <h2 class="se-44633a11" 
data-slate-type="heading" data-slate-object="block" data-key="2195"><span data-slate-object="text" 
data-key="2196"><span data-slate-leaf="true" data-offset-key="2196:0" data-first-offset="true"><span 
data-slate-string="true">不同测试的集成</span></span></span></h2> <div class="se-2c705b9a " data-slate-type="paragraph" 
data-slate-object="block" data-key="2197"> <span data-slate-object="text" data-key="2198"><span 
data-slate-leaf="true" data-offset-key="2198:0" data-first-offset="true"><span data-slate-string="true">记得上个月和一位硕士毕业以后做过一年网络工程师的朋友聊天，他正在慢慢转向通用软件工程师的角色。他在学校里修的是计算机相关的专业，因为毕业没有多久，他对于学校里做项目的情况还历历在目。</span></span></span> 
</div> <div class="se-c7114019 " data-slate-type="paragraph" data-slate-object="block" data-key="2199"> 
<span data-slate-object="text" data-key="2200"><span data-slate-leaf="true" data-offset-key="2200:0" 
data-first-offset="true"><span data-slate-string="true">我问道：“你觉得工业界和学校里做项目有什么不同呢？”他说：“最大的不同在于，学校里更多的是‘实现功能’，而工作以后，更多的是‘实现工程’。”</span></span></span> 
</div> <div class="se-f939b9d5 " data-slate-type="paragraph" data-slate-object="block" data-key="2201"> 
<span data-slate-object="text" data-key="2202"><span data-slate-leaf="true" data-offset-key="2202:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这个概括非常贴切，事实上，实现的“功能”，只是“工程”范畴内太小的一部分了（关于这方面，你也许会想起 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2203" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="2204"><span data-slate-leaf="true" data-offset-key="2204:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2205"><span data-slate-leaf="true" data-offset-key="2205:0" 
data-first-offset="true"><span data-slate-string="true"> 的选修课堂，关于程序员“独立性”的介绍），一个程序员的工程能力，远远不只有实现功能那么简单。而测试，就是从学校迈向职场，以及在职场上成熟精进的角度之一。</span></span></span> 
</div> <div class="se-65779193 " data-slate-type="paragraph" data-slate-object="block" data-key="2206"> 
<span data-slate-object="text" data-key="2207"><span data-slate-leaf="true" data-offset-key="2207:0" 
data-first-offset="true"><span data-slate-string="true">在读书的时候，我们可能已经学过测试的 V 模型（下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2208" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2209"><span data-slate-leaf="true" data-offset-key="2209:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2210"><span data-slate-leaf="true" data-offset-key="2210:0" data-first-offset="true"><span 
data-slate-string="true">文章）：</span></span></span> </div> <div class="se-6bd54995" data-slate-type="image" 
data-slate-object="block" data-key="2211"> <img class="se-848517f8" src="https://static001.geekbang.org/resource/image/75/ef/7532ac75f2d65347d7fba6d1912b5fef.jpg"> 
</div> <div class="se-e9f5c1e6 " data-slate-type="paragraph" data-slate-object="block" data-key="2212"> 
<span data-slate-object="text" data-key="2213"><span data-slate-leaf="true" data-offset-key="2213:0" 
data-first-offset="true"><span data-slate-string="true">这是一个基本的给不同测试分层的方式，当然，还有从其它维度进行的测试分类方法。在有了 
pipeline 以后，这些测试可以集成到上面去。每一层测试分别对应到设计阶段的特定环节。在实际项目中，不同维度测试的实现可谓参差不齐。我来挑几个，说说我的理解，并讲讲我所见到的来自 
Web 全栈项目中的一些典型问题。</span></span></span> </div> <h3 class="se-d742ae0e" data-slate-type="heading" 
data-slate-object="block" data-key="2214"><span data-slate-object="text" data-key="2215"><span 
data-slate-leaf="true" data-offset-key="2215:0" data-first-offset="true"><span data-slate-string="true">1. 
单元测试</span></span></span></h3> <div class="se-c2e0914f " data-slate-type="paragraph" data-slate-object="block" 
data-key="2216"> <span data-slate-object="text" data-key="2217"><span data-slate-leaf="true" 
data-offset-key="2217:0" data-first-offset="true"><span data-slate-string="true">单元测试（Unit 
Test），这一步还属于代码层面的行为活动，因此单元测试一定要是开发写的，因为单元测试重要的一个因素就是要保证它能够做到白盒覆盖。</span></span></span> </div> 
<div class="se-34b13c68 " data-slate-type="paragraph" data-slate-object="block" data-key="2218"> 
<span data-slate-object="text" data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" 
data-first-offset="true"><span data-slate-string="true">单元测试要求易于执行、快速反馈，且必须要做到完全的执行幂等性。对于整个持续集成活动来说，单元测试和其它测试不同，它是和源代码的编译构建放在一起的，也就是说，单元测试执行的失败，往往意味着编译构建的失败，而非一个单独测试过程的失败。据我观察，在 
Web 全栈项目中，团队普遍都能够意识到单元测试的重要性，但是存在这样几个典型的问题。</span></span></span> </div> <div class="se-f63a31cb 
" data-slate-type="paragraph" data-slate-object="block" data-key="2220"> <span data-slate-object="text" 
data-key="2221"><span data-slate-leaf="true" data-offset-key="2221:0" data-first-offset="true"><span 
class="se-d6f050e9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">问题一：执行缓慢，缺乏快速反馈。</span></span></span></span> 
</div> <div class="se-442ca016 " data-slate-type="paragraph" data-slate-object="block" data-key="2222"> 
<span data-slate-object="text" data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" 
data-first-offset="true"><span data-slate-string="true">由于需要反复执行和根据结果修改代码，快速的反馈是非常重要的，从几秒内到几十秒内必须得到结果。我见过有一些团队的单元测试跑一遍要十分钟以上，那么这种情况首先要考虑的是，单元测试是不是该优化了？代码包是不是太大，该拆分了？其次才去见招拆招，比如要求能够跑增量的测试，换言之，改动了什么内容，能够重跑改动的那一部分，而不是所有的测试集合，否则就失去了单元测试的意义。</span></span></span> 
</div> <div class="se-1fede1d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2224"> 
<span data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">特别说一个例子。有一些项目中，为了模拟一些代码的行为，会使用 sleep() 
方法来让某些代码的执行“等一下”，这是一个典型的不良实践，这一类显式地拖慢单元测试执行的方法应当被限制或禁止。我们可以定义 TimeKeeper 之类用来返回“当前时间”的对象，这样在测试的时候，我们就可以替换其逻辑来模拟时间的流逝。</span></span></span> 
</div> <div class="se-2296f954 " data-slate-type="paragraph" data-slate-object="block" data-key="2226"> 
<span data-slate-object="text" data-key="2227"><span data-slate-leaf="true" data-offset-key="2227:0" 
data-first-offset="true"><span class="se-7bc8fa7d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">问题二：无法消除依赖。</span></span></span></span> </div> <div class="se-4dcc5f64 
" data-slate-type="paragraph" data-slate-object="block" data-key="2228"> <span data-slate-object="text" 
data-key="2229"><span data-slate-leaf="true" data-offset-key="2229:0" data-first-offset="true"><span 
data-slate-string="true">单元测试关注的是方法、函数这些很小的“单元”，因此，为了能够专注在有限的代码层面并保持快速，所有的远程接口、其它组件的调用等等，全部都要用桩方法替换掉。但我依然看到很多项目中单元测试会调用数据库，会加载复杂的配置文件集合等等，我认为这些都是不妥的。我们希望单元测试放在开发机器上能跑，放到构建机器上也能跑，能做到这一点的前提，就是要把这些依赖组件全部拿掉。</span></span></span> 
</div> <div class="se-fcc330f8 " data-slate-type="paragraph" data-slate-object="block" data-key="2230"> 
<span data-slate-object="text" data-key="2231"><span data-slate-leaf="true" data-offset-key="2231:0" 
data-first-offset="true"><span class="se-324af6ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">问题三：对达到“单元测试覆盖率”机械而生硬地执行。</span></span></span></span> </div> <div 
class="se-899ad72e " data-slate-type="paragraph" data-slate-object="block" data-key="2232"> 
<span data-slate-object="text" data-key="2233"><span data-slate-leaf="true" data-offset-key="2233:0" 
data-first-offset="true"><span data-slate-string="true">我是坚决反对那些在软件开发中不讲实际情况而制定生硬指标的做法的。单元测试和其它测试一样，书写和维护也都是有成本的，并非覆盖率越高越好，要优先覆盖那些核心逻辑和复杂逻辑的源代码（这个代码无论是在前端还是后端，我们都有很成熟的单元测试框架和技术了），因此我们单纯地讲一个覆盖率是缺乏意义的。</span></span></span> 
</div> <div class="se-b8838f86 " data-slate-type="paragraph" data-slate-object="block" data-key="2234"> 
<span data-slate-object="text" data-key="2235"><span data-slate-leaf="true" data-offset-key="2235:0" 
data-first-offset="true"><span data-slate-string="true">一个单元测试覆盖率 85% 的代码也许会比 15% 的代码好，但是，一个单元测试覆盖率 
95% 的代码可未必比 90% 的更好，我反而会担心里面是不是有很多为了单纯达标覆盖率而被迫写的无意义覆盖测试的代码。</span></span></span> </div> <h3 
class="se-03bb98c4" data-slate-type="heading" data-slate-object="block" data-key="2236"><span 
data-slate-object="text" data-key="2237"><span data-slate-leaf="true" data-offset-key="2237:0" 
data-first-offset="true"><span data-slate-string="true">2. 集成测试</span></span></span></h3> <div 
class="se-7f511adb " data-slate-type="paragraph" data-slate-object="block" data-key="2238"> 
<span data-slate-object="text" data-key="2239"><span data-slate-leaf="true" data-offset-key="2239:0" 
data-first-offset="true"><span data-slate-string="true">集成测试（Integration Test）泛指系统组件之间集成起来的功能性测试，但在 
Web 项目中，经常特指的是针对暴露的 Web 接口进行的端到端的测试。它一般被放在持续集成的 pipeline 中，编译构建阶段结束以后执行。</span></span></span> 
</div> <div class="se-52218e14 " data-slate-type="paragraph" data-slate-object="block" data-key="2240"> 
<span data-slate-object="text" data-key="2241"><span data-slate-leaf="true" data-offset-key="2241:0" 
data-first-offset="true"><span data-slate-string="true">集成测试的成熟程度，往往是一个项目质量的一个非常好的体现。在某些团队中，集成测试通过几个不同的环境来完成，比如α环境、β环境、γ环境等等，依次递进，越来越接近生产环境。比如α环境是部署在开发机上的，β环境是部署在专门机器上的测试环境，而γ环境又叫做“pre-prod”环境，是线上环境的拷贝，连数据库的数据都是从线上定期同步而来的。</span></span></span> 
</div> <div class="se-2465da71 " data-slate-type="paragraph" data-slate-object="block" data-key="2242"> 
<span data-slate-object="text" data-key="2243"><span data-slate-leaf="true" data-offset-key="2243:0" 
data-first-offset="true"><span class="se-a4d5f7d6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">集成测试的过程中，一个很容易出现的问题，就是测试无法具备独立性或幂等性。</span></span></span></span><span 
data-slate-object="text" data-key="2244"><span data-slate-leaf="true" data-offset-key="2244:0" 
data-first-offset="true"><span data-slate-string="true">集成测试的执行，往往比单个的单元测试执行要复杂得多，有独立性要求测试的执行不会出现冲突，即要么保证某测试环境在任何时间只有单独的测试在执行，要么允许多个测试执行，但它们之间互不影响。幂等性则要求测试如果执行了一半，中止了（这种情况很常见），那么测试执行的残留数据，不会影响到下一次测试的顺利执行。</span></span></span> 
</div> <h3 class="se-53d0e115" data-slate-type="heading" data-slate-object="block" data-key="2245"><span 
data-slate-object="text" data-key="2246"><span data-slate-leaf="true" data-offset-key="2246:0" 
data-first-offset="true"><span data-slate-string="true">3. 冒烟测试</span></span></span></h3> <div 
class="se-6aa4b5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="2247"> 
<span data-slate-object="text" data-key="2248"><span data-slate-leaf="true" data-offset-key="2248:0" 
data-first-offset="true"><span data-slate-string="true">冒烟测试（Smoke Testing）在 Web 项目中非常实用。冒烟测试最关心的不是功能的覆盖，而是对重要功能或者核心功能的保障。到了这一步，通常在线上部署完成后，为了进一步确保它是一次成功的部署，需要有快速而易于执行的测试来覆盖核心测试用例。</span></span></span> 
</div> <div class="se-94bc2659 " data-slate-type="paragraph" data-slate-object="block" data-key="2249"> 
<span data-slate-object="text" data-key="2250"><span data-slate-leaf="true" data-offset-key="2250:0" 
data-first-offset="true"><span data-slate-string="true">这就像每年的常规体检，你不可能事无巨细地做各种各样侵入性强的检查，而是通过快速的几项，比如血常规、心跳、血压等等来执行核心的几项检查。在某些公司，冒烟测试还被称作“Sanity 
Test”，从字面意思也可以得知，测试的目的仅仅是保证系统“没有发疯”。通常不会有测试放到生产线的机器上执行，但冒烟测试是一个例外，它在新代码部署到线上以后，会快速地执行一下，然后再进行流量的切换。</span></span></span> 
</div> <div class="se-b94c637e " data-slate-type="paragraph" data-slate-object="block" data-key="2251"> 
<span data-slate-object="text" data-key="2252"><span data-slate-leaf="true" data-offset-key="2252:0" 
data-first-offset="true"><span data-slate-string="true">除了功能上的快速冒烟覆盖，在某些系统中，性能是一个尤其重要的关注点，那么还会划分出 
Soak Testing（浸泡测试）这样的针对性能的测试来。当然，它对系统的影响可能较大，有时候不会部署在生产环境，而是在前面提到的 pre-prod 的生产环境的镜像环境中。</span></span></span> 
</div> <div class="se-13734eb4 " data-slate-type="paragraph" data-slate-object="block" data-key="2253"> 
<span data-slate-object="text" data-key="2254"><span data-slate-leaf="true" data-offset-key="2254:0" 
data-first-offset="true"><span class="se-49d596a3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">冒烟测试最容易出现的问题，是用例简洁程度和核心功能覆盖的不平衡。</span></span></span></span><span 
data-slate-object="text" data-key="2255"><span data-slate-leaf="true" data-offset-key="2255:0" 
data-first-offset="true"><span data-slate-string="true">冒烟测试要求用例尽可能简单，这样也能保证执行迅速，不拖慢整个部署的过程；但是，另一方面我们也希望核心功能都被覆盖到，许多团队容易犯的错误，就是在产品一开始的时候可以将冒烟测试的用例管理得非常好，但是随着时间进展，冒烟测试变得越来越笨重而庞大，最终失去了平衡。</span></span></span> 
</div> <h2 class="se-ba808a04" data-slate-type="heading" data-slate-object="block" data-key="2256"><span 
data-slate-object="text" data-key="2257"><span data-slate-leaf="true" data-offset-key="2257:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-480e4d7b " data-slate-type="paragraph" data-slate-object="block" data-key="2258"> 
<span data-slate-object="text" data-key="2259"><span data-slate-leaf="true" data-offset-key="2259:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了持续集成和持续发布，以及 Web 全栈项目中常见的测试维度，并讲到了各自容易出现的问题，依然希望你可以有效避坑。</span></span></span> 
</div> <div class="se-4e69ec57 " data-slate-type="paragraph" data-slate-object="block" data-key="2260"> 
<span data-slate-object="text" data-key="2261"><span data-slate-leaf="true" data-offset-key="2261:0" 
data-first-offset="true"><span data-slate-string="true">下面是提问时间：</span></span></span> </div> 
<div class="se-d7c9030c" data-slate-type="list" data-slate-object="block" data-key="2262"> 
<div class="se-5c20486f se-917e2478" data-slate-type="list-line" data-slate-object="block" 
data-key="2263"> <span data-slate-object="text" data-key="2264"><span data-slate-leaf="true" 
data-offset-key="2264:0" data-first-offset="true"><span data-slate-string="true">在你经历的项目中，你们是否实现或部分实现了持续集成和持续发布，能说说吗？</span></span></span> 
</div> <div class="se-fa8f6838 se-41460bfb" data-slate-type="list-line" data-slate-object="block" 
data-key="2265"> <span data-slate-object="text" data-key="2266"><span data-slate-leaf="true" 
data-offset-key="2266:0" data-first-offset="true"><span data-slate-string="true">除去文中介绍的，你觉得还有哪些测试的维度是 
Web 项目特有或经常关注的（比如浏览器兼容性测试）？</span></span></span> </div> </div> <div class="se-b24a6af1 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2267"> <span data-slate-object="text" data-key="2268"><span 
data-slate-leaf="true" data-offset-key="2268:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文就到这里，欢迎你继续学习下面的选修课堂，同时，也欢迎你在留言区就今天的内容与我讨论。</span></span></span> 
</div> <h2 class="se-1fdf4974" data-slate-type="heading" data-slate-object="block" data-key="2269"><span 
data-slate-object="text" data-key="2270"><span data-slate-leaf="true" data-offset-key="2270:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：持续集成和持续发布的更多挑战</span></span></span></h2> 
<div class="se-9568e4a8 " data-slate-type="paragraph" data-slate-object="block" data-key="2271"> 
<span data-slate-object="text" data-key="2272"><span data-slate-leaf="true" data-offset-key="2272:0" 
data-first-offset="true"><span data-slate-string="true">今天我们介绍的测试技术，还有上一讲介绍的部署技术，只是持续集成和持续发布的其中一部分核心内容，还有更多的挑战需要我们面对，也许对于它们中的不少内容，你已经在工作中接触过。</span></span></span> 
</div> <h3 class="se-011f2d66" data-slate-type="heading" data-slate-object="block" data-key="2273"><span 
data-slate-object="text" data-key="2274"><span data-slate-leaf="true" data-offset-key="2274:0" 
data-first-offset="true"><span data-slate-string="true">1. 代码静态分析</span></span></span></h3> 
<div class="se-82e16489 " data-slate-type="paragraph" data-slate-object="block" data-key="2275"> 
<span data-slate-object="text" data-key="2276"><span data-slate-leaf="true" data-offset-key="2276:0" 
data-first-offset="true"><span data-slate-string="true">对于软件工程而言，我们知道问题能够发现得越早，修复问题的代价就越小。比如，对于 
Java 来说，FindBugs、PMD 可以用于在编译期发现代码中常见的问题，CheckStyle 可以提示代码不符合规范的地方，等等。</span></span></span> 
</div> <div class="se-8584db02 " data-slate-type="paragraph" data-slate-object="block" data-key="2277"> 
<span data-slate-object="text" data-key="2278"><span data-slate-leaf="true" data-offset-key="2278:0" 
data-first-offset="true"><span data-slate-string="true">这些工具确实能带来好处，但是在应用它们的时候，我们需要时刻记住一点：</span></span></span><span 
data-slate-object="text" data-key="2279"><span data-slate-leaf="true" data-offset-key="2279:0" 
data-first-offset="true"><span class="se-535369ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">工具永远是为程序员服务的，而不是反过来</span></span></span></span><span data-slate-object="text" 
data-key="2280"><span data-slate-leaf="true" data-offset-key="2280:0" data-first-offset="true"><span 
data-slate-string="true">。我强调这一点的原因是，在我的工作中，曾经经历过这样的事情——程序员为了通过这些静态工具的检查，对代码做了许多毫无意义的修改。比如这样的例子：</span></span></span> 
</div> <div class="se-15b8821b se-6e8e9002" data-slate-type="pre" data-slate-object="block" 
data-key="2281" data-code-language="cpp"> <div class="se-a3003b52 se-3d7e348e"> <span></span> 
</div> <div class="se-8182bff9"> <div class="se-813010ea se-31ddd0cd" data-code-line-number="1"></div> 
<div class="se-813010ea se-31ddd0cd" data-code-line-number="2"></div> <div class="se-813010ea 
se-31ddd0cd" data-code-line-number="3"></div> <div class="se-813010ea se-31ddd0cd" data-code-line-number="4"></div> 
<div class="se-813010ea se-31ddd0cd" data-code-line-number="5"></div> </div> <div class="se-be86b354 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2282"> <span data-slate-object="text" data-key="2283"><span data-slate-leaf="true" 
data-offset-key="2283:0" data-first-offset="true"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_3635411596" data-annotation-type="annotation"><span data-slate-string="true">/**</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2284"> <span data-slate-object="text" data-key="2285"><span data-slate-leaf="true" 
data-offset-key="2285:0" data-first-offset="true"><span data-slate-string="true"> * 返回名字。</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="2286"> <span data-slate-object="text" data-key="2287"><span data-slate-leaf="true" 
data-offset-key="2287:0" data-first-offset="true"><span data-slate-string="true"> * @return 
名字</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="2288"> <span data-slate-object="text" data-key="2289"><span 
data-slate-leaf="true" data-offset-key="2289:0" data-first-offset="true"><span data-slate-string="true"> 
*/</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="2290"> <span data-slate-object="text" data-key="2291"><span 
data-slate-leaf="true" data-offset-key="2291:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6156994268" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8505198913" data-annotation-type="annotation"><span data-slate-string="true"> 
String </span></span></span><span data-slate-leaf="true" data-offset-key="2291:2"><span class=" 
gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_0620745332" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true">getName</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:3"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8374632445" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_8505198913" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="2291:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8505198913" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="2291:5"><span data-slate-string="true">{ ... }</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-4a2422ed " data-slate-type="paragraph" data-slate-object="block" data-key="2292"> 
<span data-slate-object="text" data-key="2293"><span data-slate-leaf="true" data-offset-key="2293:0" 
data-first-offset="true"><span data-slate-string="true">本来是一个特别简单而直接的 get 方法，命名也是符合常见 getter/setter 
的规约的。但是，为了通过 CheckStyle 这样的静态工具检查，添加了这样本无必要、读起来也显然毫无意义的注释。你可以想象，代码中有许许多多的 get/set 方法，那这样的注释会有多少。我认为，和文中提到的测试覆盖率的那一条一样，这也是工具起到了反面作用的例子。</span></span></span> 
</div> <h3 class="se-1ff9c52f" data-slate-type="heading" data-slate-object="block" data-key="2294"><span 
data-slate-object="text" data-key="2295"><span data-slate-leaf="true" data-offset-key="2295:0" 
data-first-offset="true"><span data-slate-string="true">2. 依赖管理</span></span></span></h3> <div 
class="se-84248e25 " data-slate-type="paragraph" data-slate-object="block" data-key="2296"> 
<span data-slate-object="text" data-key="2297"><span data-slate-leaf="true" data-offset-key="2297:0" 
data-first-offset="true"><span data-slate-string="true">对于 Java 程序员来说，有个略带戏谑的说法是：“没有痛不欲生地处理过 
Jar 包冲突的 Java 程序员不是真正的 Java 程序员。”这在一定程度上说明了依赖管理的重要性。</span></span></span> </div> <div class="se-0cbdf874 
" data-slate-type="paragraph" data-slate-object="block" data-key="2298"> <span data-slate-object="text" 
data-key="2299"><span data-slate-leaf="true" data-offset-key="2299:0" data-first-offset="true"><span 
data-slate-string="true">注意这里说的依赖，即便对于 Java 来说，也不一定是 Jar 包，可以是任何文件夹和文件。尤其是对于茁壮发展的 Java 社区来说，版本多如牛毛，质量良莠不齐，包和类的命名冲突简直是家常便饭。我在项目中用过好几个依赖管理的工具，比如 
Python 的 pip，Java 的 Ant 和 Maven，还有一些公司内部未开源的工具。我认为，一个好的依赖管理的工具，有这么几点核心特性需要具备：</span></span></span> 
</div> <div class="se-682c515e" data-slate-type="list" data-slate-object="block" data-key="2300"> 
<div class="se-af65f64a se-3a470e56" data-slate-type="list-line" data-slate-object="block" 
data-key="2301"> <span data-slate-object="text" data-key="2302"><span data-slate-leaf="true" 
data-offset-key="2302:0" data-first-offset="true"><span class="se-135fb28d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">一个抽象合理、配置简约的 DSL。</span></span></span></span><span 
data-slate-object="text" data-key="2303"><span data-slate-leaf="true" data-offset-key="2303:0" 
data-first-offset="true"><span data-slate-string="true">本质上说，依赖管理需要某种领域特定语言的配置方式来达到完整支持的目的，这可以是稍复杂的 
XML，可以是简单键值对列表，也可以是 YAML 格式等等（关于这些格式，我会在下一章“专题”部分做出介绍）。</span></span></span> </div> <div class="se-25b158c1 
se-c65cd46b" data-slate-type="list-line" data-slate-object="block" data-key="2304"> <span data-slate-object="text" 
data-key="2305"><span data-slate-leaf="true" data-offset-key="2305:0" data-first-offset="true"><span 
class="se-96985a44" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持将单独的包组织成集合来简化配置。</span></span></span></span><span 
data-slate-object="text" data-key="2306"><span data-slate-leaf="true" data-offset-key="2306:0" 
data-first-offset="true"><span data-slate-string="true">即若干个关联功能的 Jar 包可以组成一个集合，来简化依赖配置，比如 
SpringBoot 几个相关包的集合。当然，这种方式也会带来一些副作用，一个是可能引入了一些原本不需要的 Jar 包；另一个是，如果存在局部版本不匹配，处理起来就会比较麻烦，而且打破了基于集合整体配置的简化优势。</span></span></span> 
</div> <div class="se-46ba54b8 se-c8e1acc9" data-slate-type="list-line" data-slate-object="block" 
data-key="2307"> <span data-slate-object="text" data-key="2308"><span data-slate-leaf="true" 
data-offset-key="2308:0" data-first-offset="true"><span class="se-2069a90b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">支持基于版本的递归依赖。</span></span></span></span><span 
data-slate-object="text" data-key="2309"><span data-slate-leaf="true" data-offset-key="2309:0" 
data-first-offset="true"><span data-slate-string="true">比如 A 依赖于 B，B 依赖于 C，那么只需要在 A 的依赖文件中配置 
B，C 就会被自动引入。B 是 A 的直接依赖，而 C 是 A 的间接依赖。</span></span></span> </div> <div class="se-2a4e9344 
se-12fbe8b1" data-slate-type="list-line" data-slate-object="block" data-key="2310"> <span data-slate-object="text" 
data-key="2311"><span data-slate-leaf="true" data-offset-key="2311:0" data-first-offset="true"><span 
class="se-eb2d7784" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持版本冲突的选择。</span></span></span></span><span 
data-slate-object="text" data-key="2312"><span data-slate-leaf="true" data-offset-key="2312:0" 
data-first-offset="true"><span data-slate-string="true">比如 A 依赖于 B 和 C，B 依赖于 D 1.0，C 依赖于 D 
2.0，那么通过配置可以选择在最终引入依赖的时候引入 D 1.0 还是 2.0。</span></span></span> </div> <div class="se-bb5609ba 
se-d5b36269" data-slate-type="list-line" data-slate-object="block" data-key="2313"> <span data-slate-object="text" 
data-key="2314"><span data-slate-leaf="true" data-offset-key="2314:0" data-first-offset="true"><span 
class="se-cc9f3753" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">支持不同环境的不同依赖配置。</span></span></span></span><span 
data-slate-object="text" data-key="2315"><span data-slate-leaf="true" data-offset-key="2315:0" 
data-first-offset="true"><span data-slate-string="true">比如编译期的依赖，测试期的依赖和运行期的依赖都可能不一样。</span></span></span> 
</div> </div> <h3 class="se-eb803b4a" data-slate-type="heading" data-slate-object="block" data-key="2316"><span 
data-slate-object="text" data-key="2317"><span data-slate-leaf="true" data-offset-key="2317:0" 
data-first-offset="true"><span data-slate-string="true">3. 环境监控</span></span></span></h3> <div 
class="se-249c5fd9 " data-slate-type="paragraph" data-slate-object="block" data-key="2318"> 
<span data-slate-object="text" data-key="2319"><span data-slate-leaf="true" data-offset-key="2319:0" 
data-first-offset="true"><span data-slate-string="true">既然要持续集成和持续发布，自动化可以将人力和重复劳动省下来，但是并不代表把对系统的关注和了解省下来。环境监控，指的是通过一定的工具，来对集成和发布的不同环境做出不同维度的监控，它包括如下特性：</span></span></span> 
</div> <div class="se-7893c2d8" data-slate-type="list" data-slate-object="block" data-key="2320"> 
<div class="se-6e0f584c se-cad536b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2321"> <span data-slate-object="text" data-key="2322"><span data-slate-leaf="true" 
data-offset-key="2322:0" data-first-offset="true"><span class="se-d038dc66" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">多维度、分级别、可视化的数据统计和监控。</span></span></span></span><span 
data-slate-object="text" data-key="2323"><span data-slate-leaf="true" data-offset-key="2323:0" 
data-first-offset="true"><span data-slate-string="true">核心性能的统计信息既包括应用的统计信息，也包括存储，比如数据库的统计信息，还包括容器（比如 
Docker）或者是机器本身的统计信息。监控信息的分级在数据量巨大的时候显得至关重要，信息量大而缺乏组织就是没有信息。通常，有一个核心 KPI 页面，可以快速获知核心组件的健康信息，这个要求在一屏以内，以便可以一眼就看得到，其它信息可以在不同的子页面中展开。</span></span></span> 
</div> <div class="se-63f13668 se-99db2e90" data-slate-type="list-line" data-slate-object="block" 
data-key="2324"> <span data-slate-object="text" data-key="2325"><span data-slate-leaf="true" 
data-offset-key="2325:0" data-first-offset="true"><span class="se-41ac96c9" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">基于监控信息的自动化操作。</span></span></span></span><span 
data-slate-object="text" data-key="2326"><span data-slate-leaf="true" data-offset-key="2326:0" 
data-first-offset="true"><span data-slate-string="true">最常见的例子就是告警。CPU 过高了要告警，I/O 过高了要告警，失败次数超过阈值要告警。使用监控工具根据这些信息可以很容易地配置合理的告警规则，要做一个完备的告警系统，规则可以非常复杂。告警和上面说的监控一样，也要分级。小问题自动创建低优先级的问题单（ticket），大问题创建高优先级的问题单，紧急问题电话、短信自动联系 
oncall。其它操作，还包括自动熔断、自动限流、自动扩容和自动降级（参见 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2327" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="2328"><span 
data-slate-leaf="true" data-offset-key="2328:0" data-first-offset="true"><span data-slate-string="true">[第 
17 讲]</span></span></span></a><span data-slate-object="text" data-key="2329"><span data-slate-leaf="true" 
data-offset-key="2329:0" data-first-offset="true"><span data-slate-string="true"> 优雅降级）等等。</span></span></span> 
</div> <div class="se-d33c7a8b se-54d89985" data-slate-type="list-line" data-slate-object="block" 
data-key="2330"> <span data-slate-object="text" data-key="2331"><span data-slate-leaf="true" 
data-offset-key="2331:0" data-first-offset="true"><span class="se-c9efc156" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">上述模块的规则自定义和重用能力。</span></span></span></span><span 
data-slate-object="text" data-key="2332"><span data-slate-leaf="true" data-offset-key="2332:0" 
data-first-offset="true"><span data-slate-string="true">在上面说到这些复杂的需求的时候，如果一切都从头开始做无疑是非常耗时费力的。因而和软件代码需要组织和重构一样，告警的配置和规则也是。一般说来，在大厂内部，都有这方面支持比较好的工具，对于缺乏这样强大的自研能力的中小公司来说，业界也有比较成熟的解决方案可以直接购买。</span></span></span> 
</div> </div> <h2 class="se-1da0524e" data-slate-type="heading" data-slate-object="block" data-key="2333"><span 
data-slate-object="text" data-key="2334"><span data-slate-leaf="true" data-offset-key="2334:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-24751c43" data-slate-type="list" data-slate-object="block" data-key="2335"> <div 
class="se-78335952 se-b3746201" data-slate-type="list-line" data-slate-object="block" data-key="2336"> 
<span data-slate-object="text" data-key="2337"><span data-slate-leaf="true" data-offset-key="2337:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了测试的 V 模型，感兴趣的话欢迎继续阅读这篇 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2338" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2339"><span data-slate-leaf="true" data-offset-key="2339:0" 
data-first-offset="true"><span data-slate-string="true">V Model</span></span></span></a><span 
data-slate-object="text" data-key="2340"><span data-slate-leaf="true" data-offset-key="2340:0" 
data-first-offset="true"><span data-slate-string="true">，特别是它对其优劣的比较分析。</span></span></span> 
</div> <div class="se-07a30e5f se-57e7c2bd" data-slate-type="list-line" data-slate-object="block" 
data-key="2341"> <span data-slate-object="text" data-key="2342"><span data-slate-leaf="true" 
data-offset-key="2342:0" data-first-offset="true"><span data-slate-string="true">我们在做 Web 项目的时候，在单元测试的层面，去测试多线程代码的正确，是比较困难的，有一些开源库对此做了一些尝试，比如 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2343" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="2344"><span data-slate-leaf="true" data-offset-key="2344:0" 
data-first-offset="true"><span data-slate-string="true">thread-weaver</span></span></span></a><span 
data-slate-object="text" data-key="2345"><span data-slate-leaf="true" data-offset-key="2345:0" 
data-first-offset="true"><span data-slate-string="true">，感兴趣的话可以了解。</span></span></span> </div> 
<div class="se-0366d6a2 se-82e7edcf" data-slate-type="list-line" data-slate-object="block" 
data-key="2346"> <span data-slate-object="text" data-key="2347"><span data-slate-leaf="true" 
data-offset-key="2347:0" data-first-offset="true"><span data-slate-string="true">文中提到了 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2348" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2349"><span data-slate-leaf="true" data-offset-key="2349:0" 
data-first-offset="true"><span data-slate-string="true">Maven</span></span></span></a><span 
data-slate-object="text" data-key="2350"><span data-slate-leaf="true" data-offset-key="2350:0" 
data-first-offset="true"><span data-slate-string="true"> 这种管理依赖并进行项目构建打包的工具，如果你使用 Java 语言的话，你应该了解一下，如果你需要中文教程来系统学习，那么你可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2351" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="2352"><span data-slate-leaf="true" data-offset-key="2352:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2353"><span data-slate-leaf="true" data-offset-key="2353:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-8d64d989" data-slate-type="image" 
data-slate-object="block" data-key="2354"> <img class="se-b7f2701d" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 11:09:20.559 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=16 
 {executed in 1 msec}
2020-11-19 11:09:20.559 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:09:20.560 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=16 
 {executed in 0 msec}
2020-11-19 11:09:20.561 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:09:20.562 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755360, 1605755360, 1, 'zh-hans', 0, 1, 1, 
0, '30丨Ops三部曲之三：测试和发布', 1, 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.565 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=16 
 {executed in 0 msec}
2020-11-19 11:09:20.566 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:09:20.567 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755360, 1605755360, 1, 'zh-hans', 0, 
1, 1, 0, '30丨Ops三部曲之三：测试和发布', 'book', 1, 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.571 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.571 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:09:20.572 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.572 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:09:20.574 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/77186c3bdcc22b35a8430b2ff85d38ca?bkt=en-29a7ad5d1913bc6f5e7f24efe3a394d3011c889ace50d04b20a6d02b23d9adf170788c06de1c3594&fid=3757516097-778750-190689253489824&time=1605755359&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-hdSwfPPzhIUaRRisXPhI9I3Ncqk%3D&to=92&size=13565953&sta_dx=13565953&sta_cs=3275&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074448&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13565953&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-aac77f5241f63584d9add61c519bc9248e1290386e0b5d6de729b6701ec5c196b2cca9d31a758f1e&sl=76480590&expires=8h&rt=pr&r=803063652&mlogid=7502062022650733982&vbdid=2247232042&fin=30%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%91%E5%B8%83.m4a&bflag=92,34-92&rtype=1&dp-logid=7502062022650733982&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865eeaf5bd8717da619af11badcb73f769730&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=30%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%91%E5%B8%83.m4a', 
16, 16) 
 {executed in 1 msec}
2020-11-19 11:09:20.578 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.578 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:09:20.580 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/77186c3bdcc22b35a8430b2ff85d38ca?bkt=en-29a7ad5d1913bc6f5e7f24efe3a394d3011c889ace50d04b20a6d02b23d9adf170788c06de1c3594&fid=3757516097-778750-190689253489824&time=1605755359&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-hdSwfPPzhIUaRRisXPhI9I3Ncqk%3D&to=92&size=13565953&sta_dx=13565953&sta_cs=3275&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074448&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13565953&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-aac77f5241f63584d9add61c519bc9248e1290386e0b5d6de729b6701ec5c196b2cca9d31a758f1e&sl=76480590&expires=8h&rt=pr&r=803063652&mlogid=7502062022650733982&vbdid=2247232042&fin=30%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%91%E5%B8%83.m4a&bflag=92,34-92&rtype=1&dp-logid=7502062022650733982&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865eeaf5bd8717da619af11badcb73f769730&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=30%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%91%E5%B8%83.m4a', 
16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.584 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.584 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:09:20.585 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.585 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:09:20.587 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 1 msec}
2020-11-19 11:09:20.591 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.591 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:09:20.592 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.596 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.597 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:09:20.598 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.598 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:09:20.599 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 16, 'https://static001.geekbang.org/resource/image/dd/b5/dd0ffa214f122831489f08f4e34aa8b5.jpg', 
16) 
 {executed in 0 msec}
2020-11-19 11:09:20.603 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=16 
 {executed in 0 msec}
2020-11-19 11:09:20.603 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:09:20.604 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 16, 'https://static001.geekbang.org/resource/image/dd/b5/dd0ffa214f122831489f08f4e34aa8b5.jpg', 
16) 
 {executed in 0 msec}
2020-11-19 11:09:20.609 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.609 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:09:20.610 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:09:20.615 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=16 
 {executed in 1 msec}
2020-11-19 11:09:20.615 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:09:20.616 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 16, 16) 
 {executed in 0 msec}
2020-11-19 11:10:23.716 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='540889291713260' 
 {executed in 1 msec}
2020-11-19 11:10:23.717 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:23.719 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755423, 1) 
 {executed in 0 msec}
2020-11-19 11:10:23.720 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755423, 1) 
 {executed in 0 msec}
2020-11-19 11:10:23.720 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|17            |
|--------------|

2020-11-19 11:10:23.729 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '716fc821-4ba9-4e71-870c-08ba6fa0d997', 
17) 
 {executed in 0 msec}
2020-11-19 11:10:23.730 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '716fc821-4ba9-4e71-870c-08ba6fa0d997', 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.730 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|17            |
|--------------|

2020-11-19 11:10:23.738 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=17, revision_default=1, revision_timestamp=1605755423, 
revision_uid=1 where vid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.742 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.743 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:23.744 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '540889291713260', 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.751 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 11:10:23.751 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:23.753 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '540889291713260', 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.759 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.760 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:23.761 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.761 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:23.763 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 17, 0, 0, 12, 0, 17) 
 {executed in 1 msec}
2020-11-19 11:10:23.767 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.767 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:23.768 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.768 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:23.773 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1385" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-bca7372b " data-slate-type="paragraph" data-slate-object="block" 
data-key="1386"> <span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" 
data-offset-key="1387:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-29e03091 " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">今天我们来谈谈 Ops 的三部曲之二，集群部署。毕竟一台物理机能够承载的请求数是十分有限的，同时，一台物理机还存在着单点故障（Single 
Point Failure）问题，因此我们通常需要把多台 Web 服务器组成集群，来提供服务。</span></span></span> </div> <h2 class="se-6578403e" 
data-slate-type="heading" data-slate-object="block" data-key="1390"><span data-slate-object="text" 
data-key="1391"><span data-slate-leaf="true" data-offset-key="1391:0" data-first-offset="true"><span 
data-slate-string="true">负载分担</span></span></span></h2> <div class="se-a3f52b1b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1392"> <span data-slate-object="text" data-key="1393"><span 
data-slate-leaf="true" data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1394" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1396"><span data-slate-leaf="true" data-offset-key="1396:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的反向代理吗？负载分担，又叫负载均衡，也就是 Load Balancer，就是反向代理设备中非常常见的一种，它可以高效地将访问请求按某种策略发送到内网相应的后端服务器上，但是对外却只暴露单一的一个地址。</span></span></span> 
</div> <div class="se-6ce980b8 " data-slate-type="paragraph" data-slate-object="block" data-key="1397"> 
<span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" data-offset-key="1398:0" 
data-first-offset="true"><span data-slate-string="true">除了作为名词特指设备，负载分担还可以作为动词指用来分配请求负载的行为，它可大可小，小可以到使用 
F5 等负载均衡的专用设备来将请求映射到几台服务器上，但也可以大到用 DNS 来实现广域网的路由。例如同样访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1399" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span 
data-slate-string="true">www.google.com</span></span></span></a><span data-slate-object="text" 
data-key="1401"><span data-slate-leaf="true" data-offset-key="1401:0" data-first-offset="true"><span 
data-slate-string="true">，DNS 会对于不同地区的人解析为不同且就近的 IP 地址，而每个 IP 地址，实际又是一个更小的负载分担的子网和服务器集群。</span></span></span> 
</div> <div class="se-91fb642e" data-slate-type="image" data-slate-object="block" data-key="1402"> 
<img class="se-92b71a4f" src="https://static001.geekbang.org/resource/image/9f/fe/9f13dc9a69ec0e78d515383f30721cfe.jpg"> 
</div> <div class="se-ffb24206 " data-slate-type="paragraph" data-slate-object="block" data-key="1403"> 
<span data-slate-object="text" data-key="1404"><span data-slate-leaf="true" data-offset-key="1404:0" 
data-first-offset="true"><span data-slate-string="true">上图演示了这样一个过程：</span></span></span> </div> 
<div class="se-e9b5e97b" data-slate-type="list" data-slate-object="block" data-key="1405"> 
<div class="se-b824ab4b se-de23ea70" data-slate-type="list-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true">用户 A 和用户 B 
都去 DNS 服务器查询 Google 的 IP 地址，但是他们在不同地区，不同的 DNS 服务器返回了不同的 IP 地址；</span></span></span> </div> 
<div class="se-50ca7ebc se-961ea754" data-slate-type="list-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true">以用户 B 为例，根据返回的地址发送了一个 
HTTP GET 请求，这个请求被负载均衡器转发给了服务器集群中的其中一台服务器 Web Server 2 处理并返回。这个城堡一样的结构图示就是负载均衡器，负责转发请求到实际的服务器。它可以由硬件实现，例如 
F5；也可以由软件实现，例如 Nginx。</span></span></span> </div> </div> <div class="se-5fc670b1 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1410"> <span data-slate-object="text" data-key="1411"><span 
data-slate-leaf="true" data-offset-key="1411:0" data-first-offset="true"><span data-slate-string="true">对于 
DNS 的记录查询，我们曾在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1412" 
class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" 
data-offset-key="1413:0" data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1414"><span data-slate-leaf="true" data-offset-key="1414:0" 
data-first-offset="true"><span data-slate-string="true"> 动手实践过，如果你忘记了可以回看。</span></span></span> 
</div> <h3 class="se-9b306957" data-slate-type="heading" data-slate-object="block" data-key="1415"><span 
data-slate-object="text" data-key="1416"><span data-slate-leaf="true" data-offset-key="1416:0" 
data-first-offset="true"><span data-slate-string="true">策略算法</span></span></span></h3> <div 
class="se-a82b3098 " data-slate-type="paragraph" data-slate-object="block" data-key="1417"> 
<span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" data-offset-key="1418:0" 
data-first-offset="true"><span data-slate-string="true">负载分担需要把请求发送到相应的服务器上，但是怎么选择那一台服务器，这里就涉及到策略算法了，这个算法可以很简单，也可以非常复杂。常见的包括这样几种：</span></span></span> 
</div> <div class="se-bb557a2e" data-slate-type="list" data-slate-object="block" data-key="1419"> 
<div class="se-d943d18d se-90003142" data-slate-type="list-line" data-slate-object="block" 
data-key="1420"> <span data-slate-object="text" data-key="1421"><span data-slate-leaf="true" 
data-offset-key="1421:0" data-first-offset="true"><span data-slate-string="true">随机选择：从服务器的池中随机选择一台，这是一种实现上最简单的方式。</span></span></span> 
</div> <div class="se-6b72ada9 se-abcf1d31" data-slate-type="list-line" data-slate-object="block" 
data-key="1422"> <span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" 
data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true">轮询（Round Robin）：按顺序一台一台地将请求转发，本质上它和随机选择一样，缺乏对任务较为合理的分配。</span></span></span> 
</div> <div class="se-a5aec116 se-6d252e7d" data-slate-type="list-line" data-slate-object="block" 
data-key="1424"> <span data-slate-object="text" data-key="1425"><span data-slate-leaf="true" 
data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true">最小连接：这种方式检测当前和负载均衡器连接的所有后端服务器中，连接数最小的一个。这是一种近似寻找“最小资源占用”的机器的方法。</span></span></span> 
</div> <div class="se-d7f2607f se-bf9c8d96" data-slate-type="list-line" data-slate-object="block" 
data-key="1426"> <span data-slate-object="text" data-key="1427"><span data-slate-leaf="true" 
data-offset-key="1427:0" data-first-offset="true"><span data-slate-string="true">其它寻找“最小资源占用的方法”，例如根据服务器报告上来的 
CPU 使用率等等来分配，但是对于统计信息的收集，会显著增加系统的复杂度。</span></span></span> </div> <div class="se-f038be13 se-4985a521" 
data-slate-type="list-line" data-slate-object="block" data-key="1428"> <span data-slate-object="text" 
data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" data-first-offset="true"><span 
data-slate-string="true">指定的哈希算法：例如我们曾在 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1430" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1431"><span 
data-slate-leaf="true" data-offset-key="1431:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="1432"><span data-slate-leaf="true" 
data-offset-key="1432:0" data-first-offset="true"><span data-slate-string="true"> 中介绍的一致性哈希，这种方式也非常常用，这种方式就不只是从访问压力分散的角度来考虑了，还起到了寻找数据的“路由”的作用，如果你忘记了，可以回看。</span></span></span> 
</div> </div> <h2 class="se-3b7ea43e" data-slate-type="heading" data-slate-object="block" data-key="1433"><span 
data-slate-object="text" data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" 
data-first-offset="true"><span data-slate-string="true">服务端 Session 和浏览器 Cookie</span></span></span></h2> 
<div class="se-6fa78af2 " data-slate-type="paragraph" data-slate-object="block" data-key="1435"> 
<span data-slate-object="text" data-key="1436"><span data-slate-leaf="true" data-offset-key="1436:0" 
data-first-offset="true"><span data-slate-string="true">从上面负载分担的策略算法可以看出，大部分的策略算法是适合服务器“无状态”的场景，换言之，来自于同一个浏览器的请求，很可能这一个被转发给了服务器 
1，紧接着的下一个就被转给服务器 2 了。在没有状态的情况下，这第二个请求被转给哪台服务器都无所谓。</span></span></span> </div> <h3 class="se-e8956d20" 
data-slate-type="heading" data-slate-object="block" data-key="1437"><span data-slate-object="text" 
data-key="1438"><span data-slate-leaf="true" data-offset-key="1438:0" data-first-offset="true"><span 
data-slate-string="true">服务端 Session</span></span></span></h3> <div class="se-6400b887 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1439"> <span data-slate-object="text" data-key="1440"><span 
data-slate-leaf="true" data-offset-key="1440:0" data-first-offset="true"><span data-slate-string="true">对于很多 
Web 业务来说，我们恰恰希望服务器是“有状态”的。比如说，登陆是一个消耗资源较为明显的行为，在登陆的过程中，服务器要进行鉴权，去数据库查询用户的权限，获取用户的信息等操作。那么用户在登陆以后，一定时间内活跃的访问，我们希望可以直接完成，而不需要再次进行重复的鉴权、权限查询和用户信息获取等操作。</span></span></span> 
</div> <div class="se-7741c3f2 " data-slate-type="paragraph" data-slate-object="block" data-key="1441"> 
<span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" data-offset-key="1442:0" 
data-first-offset="true"><span data-slate-string="true">这就需要服务端存储的“会话”（Session）对象来实现了。Web 服务器在内存中存放一个临时对象，这个对象就可以存放针对特定用户的具体信息，比如上面提到的用户信息和用户权限信息等等。这样，当用户再一次的请求访问到来的时候，就可以优先去会话对象中查看，如果用户已经登录，已经具备了这些信息，那么就不需要再执行这些重复的鉴权、信息获取等操作了，从而省下大量的资源。</span></span></span> 
</div> <div class="se-18c69106 " data-slate-type="paragraph" data-slate-object="block" data-key="1443"> 
<span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" data-offset-key="1444:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们也不知道用户什么时候就停止了对网站的使用，他可能会主动“登出”，这就要求我们</span></span></span><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span class="se-0482c1c1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">主动</span></span></span></span><span data-slate-object="text" data-key="1446"><span 
data-slate-leaf="true" data-offset-key="1446:0" data-first-offset="true"><span data-slate-string="true">将会话过期或销毁；他也可能默默地离开，这就需要一个会话管理的超时机制，在一定时间以后也要“</span></span></span><span 
data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span class="se-c3e29665" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">被动</span></span></span></span><span data-slate-object="text" data-key="1448"><span 
data-slate-leaf="true" data-offset-key="1448:0" data-first-offset="true"><span data-slate-string="true">”销毁这个会话，以避免会话信息无效的资源占用或潜在的安全隐患，这个时间就叫做会话超时时间。</span></span></span> 
</div> <h3 class="se-020a4089" data-slate-type="heading" data-slate-object="block" data-key="1449"><span 
data-slate-object="text" data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" 
data-first-offset="true"><span data-slate-string="true">浏览器 Cookie</span></span></span></h3> 
<div class="se-0b1037c0 " data-slate-type="paragraph" data-slate-object="block" data-key="1451"> 
<span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" data-offset-key="1452:0" 
data-first-offset="true"><span data-slate-string="true">说完了服务端 Session，我再来说说浏览器 Cookie。</span></span></span> 
</div> <div class="se-0afb357e " data-slate-type="paragraph" data-slate-object="block" data-key="1453"> 
<span data-slate-object="text" data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" 
data-first-offset="true"><span data-slate-string="true">浏览器可以以文本的形式在本地存放少量的信息。比如，在最近一次访问服务器、创建会话之后，服务器会生成一个标记用户身份的随机串，这样在这个用户下次访问同一个服务器的时候，就可以带上这个随机串，那么服务器就能够根据这个随机串得知，哦，是老用户到访，欢迎欢迎。</span></span></span> 
</div> <div class="se-2b20d914 " data-slate-type="paragraph" data-slate-object="block" data-key="1455"> 
<span data-slate-object="text" data-key="1456"><span data-slate-leaf="true" data-offset-key="1456:0" 
data-first-offset="true"><span data-slate-string="true">这个随机串，以文本的形式在浏览器端的存储，就被称为 Cookie。这个存储可以仅仅是在内存中的，因而浏览器退出就失效了；也可以存储在硬盘上，那么浏览器重新启动以后，请求发送依然可以携带这个信息。</span></span></span> 
</div> <div class="se-10f986ff " data-slate-type="paragraph" data-slate-object="block" data-key="1457"> 
<span data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">从这套机制中，你可能已经发现了，它们在努力做的其实就是一件事——给 HTTP 
通信填坑。</span></span></span> </div> <div class="se-c82cb358 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1459"> <span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" 
data-offset-key="1460:0" data-first-offset="true"><span data-slate-string="true">回想一下，我们已经介绍过 
HTTP 版本的天生缺陷。在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1461" 
class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1462"><span data-slate-leaf="true" 
data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">[第 02 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1463"><span data-slate-leaf="true" data-offset-key="1463:0" 
data-first-offset="true"><span data-slate-string="true"> 我们介绍了，</span></span></span><span data-slate-object="text" 
data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" data-first-offset="true"><span 
class="se-9347d21c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">缺乏数据加密传输的安全性大坑</span></span></span></span><span 
data-slate-object="text" data-key="1465"><span data-slate-leaf="true" data-offset-key="1465:0" 
data-first-offset="true"><span data-slate-string="true">，被 HTTPS 给填了；在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1466" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true">[第 03 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1468"><span data-slate-leaf="true" data-offset-key="1468:0" 
data-first-offset="true"><span data-slate-string="true"> 我们学习了，</span></span></span><span data-slate-object="text" 
data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" data-first-offset="true"><span 
class="se-22a55a7f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">只能由客户端主动发起消息传递的交互模式上的坑</span></span></span></span><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true">，被服务端推送等多种技术给填了。</span></span></span> 
</div> <div class="se-fcb74dfd " data-slate-type="paragraph" data-slate-object="block" data-key="1471"> 
<span data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">现在，我们来填第三个坑——HTTP </span></span></span><span 
data-slate-object="text" data-key="1473"><span data-slate-leaf="true" data-offset-key="1473:0" 
data-first-offset="true"><span class="se-2785fef7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">协议本身无法保持状态的坑</span></span></span></span><span data-slate-object="text" 
data-key="1474"><span data-slate-leaf="true" data-offset-key="1474:0" data-first-offset="true"><span 
data-slate-string="true">。既然协议本身无法保持状态，那么协议的两头只好多做一点工作了，而客户端 Cookie 和服务端 Session 都能够保存一定的状态信息，这就让客户端和服务端连续的多次交互，可以建立在一定状态的基础上进行。</span></span></span> 
</div> <h2 class="se-da5c76ad" data-slate-type="heading" data-slate-object="block" data-key="1475"><span 
data-slate-object="text" data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" 
data-first-offset="true"><span data-slate-string="true">集群部署</span></span></span></h2> <div 
class="se-8a14b901 " data-slate-type="paragraph" data-slate-object="block" data-key="1477"> 
<span data-slate-object="text" data-key="1478"><span data-slate-leaf="true" data-offset-key="1478:0" 
data-first-offset="true"><span data-slate-string="true">集群带来了无单点故障的好处，因为无单点故障，是保证业务不中断的前提。但是，每当有 
bug 修复，或是新版本发布，我们就需要将新代码部署到线上环境中，在这种情况下，我们该怎样保证不间断地提供服务呢？</span></span></span> </div> <div 
class="se-c6dd0761 " data-slate-type="paragraph" data-slate-object="block" data-key="1479"> 
<span data-slate-object="text" data-key="1480"><span data-slate-leaf="true" data-offset-key="1480:0" 
data-first-offset="true"><span data-slate-string="true">在软件产品上线的实践活动中，有多种新版本的部署策略，它们包括：</span></span></span> 
</div> <div class="se-0020a0cb" data-slate-type="list" data-slate-object="block" data-key="1481"> 
<div class="se-32e8a87e se-a84ed201" data-slate-type="list-line" data-slate-object="block" 
data-key="1482"> <span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" 
data-offset-key="1483:0" data-first-offset="true"><span data-slate-string="true">重建（Recreate）部署：旧版本停止，新版本启动。</span></span></span> 
</div> <div class="se-2fe2e4c8 se-7eb97120" data-slate-type="list-line" data-slate-object="block" 
data-key="1484"> <span data-slate-object="text" data-key="1485"><span data-slate-leaf="true" 
data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true">滚动（Ramped）部署：旧版本缓慢地释出，并逐渐被新版本替代。这是最常见的内部服务的部署方式，我在下面会详述。</span></span></span> 
</div> <div class="se-a7d150a0 se-4a6d61a0" data-slate-type="list-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">蓝绿（Blue/Green）部署：在旧版本不停机的情况下，新版本先完成部署，再将流量从旧版本导过来。这也是非常常见的，这种部署的好处是，可以有充分的时间，对部署了但未上线的新版本做全量的测试，在线下确保没有问题了之后再切换线上流量。</span></span></span> 
</div> <div class="se-874c68ba se-16a240c6" data-slate-type="list-line" data-slate-object="block" 
data-key="1488"> <span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" 
data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">金丝雀（Canary）部署：先导入少量的用户访问新版本，在验证正常后再逐步扩展到所有机器。这种部署也较为常见，最大的优点是它非常“谨慎”，可以逐步地扩展影响用户的范围，对于一些用户量非常大的业务，这种方式相对比较稳妥，可以不断观察使用情况和流量数据，在部署环节的任意时间做出适当调整。</span></span></span> 
</div> <div class="se-37370e2e se-0eccd2ca" data-slate-type="list-line" data-slate-object="block" 
data-key="1490"> <span data-slate-object="text" data-key="1491"><span data-slate-leaf="true" 
data-offset-key="1491:0" data-first-offset="true"><span data-slate-string="true">A/B 测试（A/B 
Testing）部署：导入特定用户到新版本代码。</span></span></span> </div> <div class="se-93c3a0c9 se-8bc7c43b" data-slate-type="list-line" 
data-slate-object="block" data-key="1492"> <span data-slate-object="text" data-key="1493"><span 
data-slate-leaf="true" data-offset-key="1493:0" data-first-offset="true"><span data-slate-string="true">影子（Shadow）部署：新版本接收实际的发往老版本的源请求的拷贝，但是并不干预源请求的处理和响应本身。</span></span></span> 
</div> </div> <div class="se-35c924b5 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1494"> <span data-slate-object="text" data-key="1495"><span data-slate-leaf="true" 
data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">既然使用集群，一大目的就是保证可用性，避免停机时间，而上面这六种中的第一种——重建部署，显然是存在停机时间的，因此很少采用。</span></span></span> 
</div> <h3 class="se-edc5f215" data-slate-type="heading" data-slate-object="block" data-key="1496"><span 
data-slate-object="text" data-key="1497"><span data-slate-leaf="true" data-offset-key="1497:0" 
data-first-offset="true"><span data-slate-string="true">滚动部署</span></span></span></h3> <div 
class="se-ab4b9d01 " data-slate-type="paragraph" data-slate-object="block" data-key="1498"> 
<span data-slate-object="text" data-key="1499"><span data-slate-leaf="true" data-offset-key="1499:0" 
data-first-offset="true"><span data-slate-string="true">在互联网大厂（包括我所经历的 Amazon 和 Oracle），对于一般的服务来说，绝大多数服务的部署，采用的都是滚动部署。为什么？我们来看一下其它几项的缺点，你就清楚了。</span></span></span> 
</div> <div class="se-ab6fe7d5" data-slate-type="list" data-slate-object="block" data-key="1500"> 
<div class="se-16a4afb2 se-3a244d48" data-slate-type="list-line" data-slate-object="block" 
data-key="1501"> <span data-slate-object="text" data-key="1502"><span data-slate-leaf="true" 
data-offset-key="1502:0" data-first-offset="true"><span data-slate-string="true">重建部署存在停机时间，不讨论。</span></span></span> 
</div> <div class="se-1fe2ae2d se-51f0716d" data-slate-type="list-line" data-slate-object="block" 
data-key="1503"> <span data-slate-object="text" data-key="1504"><span data-slate-leaf="true" 
data-offset-key="1504:0" data-first-offset="true"><span data-slate-string="true">蓝绿部署需要两倍的服务器资源，这个是一个局限性，而即便资源申请不是问题，这部署期间多出一倍的资源，机器需要进行初始化等各种准备，会有一定的时间和资源开销；再有一个是老版本代码的机器上可能有一些配置，而这个配置在完成部署后切换的时候会丢失。</span></span></span> 
</div> <div class="se-3fdc1e9a se-25cea67f" data-slate-type="list-line" data-slate-object="block" 
data-key="1505"> <span data-slate-object="text" data-key="1506"><span data-slate-leaf="true" 
data-offset-key="1506:0" data-first-offset="true"><span data-slate-string="true">剩下的三种部署相对更为“谨慎”，自然效率较低，即部署速度较慢，对于绝大多数服务的部署来说，有些得不偿失。当然，事物都有两面性，它们对于许多面向互联网用户等至关重要的业务来说，有时就可能是更佳的选择。</span></span></span> 
</div> </div> <div class="se-e2217825 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1507"> <span data-slate-object="text" data-key="1508"><span data-slate-leaf="true" 
data-offset-key="1508:0" data-first-offset="true"><span data-slate-string="true">那对于一般的系统，部署会按照 
50% - 50% 进行，即将部署分为两个阶段。第一个阶段，50% 的服务器保持不动，另 50% 的服务器部署新版本；完成后，在第二个阶段，将这 50% 的老版本给更新了，从而达成所有节点的新版本。对于流量比较大的服务，也有采取 
33% - 33% - 34% 这样三阶段进行的。</span></span></span> </div> <div class="se-298c3f3f " data-slate-type="paragraph" 
data-slate-object="block" data-key="1509"> <span data-slate-object="text" data-key="1510"><span 
data-slate-leaf="true" data-offset-key="1510:0" data-first-offset="true"><span data-slate-string="true">下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1511" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1512"><span data-slate-leaf="true" data-offset-key="1512:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" data-first-offset="true"><span 
data-slate-string="true">文章，很好地展示了这个滚动部署渐进的过程：</span></span></span> </div> <div class="se-8899b54e" 
data-slate-type="image" data-slate-object="block" data-key="1514"> <img class="se-a22acbdb" 
src="https://static001.geekbang.org/resource/image/41/d1/4101aa91a1d7ba7347444f3deb5b51d1.gif"> 
</div> <h3 class="se-479d9f02" data-slate-type="heading" data-slate-object="block" data-key="1515"><span 
data-slate-object="text" data-key="1516"><span data-slate-leaf="true" data-offset-key="1516:0" 
data-first-offset="true"><span data-slate-string="true">数据和版本的兼容</span></span></span></h3> 
<div class="se-2a1bcb23 " data-slate-type="paragraph" data-slate-object="block" data-key="1517"> 
<span data-slate-object="text" data-key="1518"><span data-slate-leaf="true" data-offset-key="1518:0" 
data-first-offset="true"><span data-slate-string="true">在应用部署的实践过程中，程序员一般不会忽略对于程序异常引发服务中断的处理。比如说，新版本部署怎样进行 
Sanity Test（对于部署后的新版本代码，进行快速而基本的测试），确保其没有大的问题，在测试通过以后再让负载分担把流量引导过来；再比如说，如果新版本出现了较为严重的问题，服务无法支撑，就要“回滚”（Rollback），退回到原有的版本。</span></span></span> 
</div> <div class="se-b7078d8e " data-slate-type="paragraph" data-slate-object="block" data-key="1519"> 
<span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" data-offset-key="1520:0" 
data-first-offset="true"><span data-slate-string="true">但是，我们</span></span></span><span data-slate-object="text" 
data-key="1521"><span data-slate-leaf="true" data-offset-key="1521:0" data-first-offset="true"><span 
class="se-0112415c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">除了要考虑程序，还要考虑数据，特别是数据和版本的兼容问题。数据造成的问题更大，单纯因为程序有问题还可能回滚，但若数据有问题却是连回滚的机会都没有的。</span></span></span></span><span 
data-slate-object="text" data-key="1522"><span data-slate-leaf="true" data-offset-key="1522:0" 
data-first-offset="true"><span data-slate-string="true">我来举个真实的例子。</span></span></span> </div> 
<div class="se-32c0add0 " data-slate-type="paragraph" data-slate-object="block" data-key="1523"> 
<span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" data-offset-key="1524:0" 
data-first-offset="true"><span data-slate-string="true">某 Web 服务提供了数据的读写功能，现在在新版本的数据 schema 
中增加了新的属性“ratio”。于是，相应的，新版本代码也进行了修改，于是无论老数据还是新数据，无论数据的 schema 中有没有这个 ratio，都可以被正确处理。</span></span></span> 
</div> <div class="se-557ff4e1 " data-slate-type="paragraph" data-slate-object="block" data-key="1525"> 
<span data-slate-object="text" data-key="1526"><span data-slate-leaf="true" data-offset-key="1526:0" 
data-first-offset="true"><span data-slate-string="true">但是，老代码是无法顺利处理这个新数据加入的 ratio 属性的。在采用滚动部署的过程中，新、老版本的代码同时运行的时候，如果新代码写入了这个带有 
ratio 的数据，之后又被老版本代码读取到，就会引发错误。我用一张图来说明这个问题：</span></span></span> </div> <div class="se-7304bbda" 
data-slate-type="image" data-slate-object="block" data-key="1527"> <img class="se-98acca30" 
src="https://static001.geekbang.org/resource/image/aa/7b/aad1c4e5d962158e1b1dbb3aead1dd7b.jpg"> 
</div> <div class="se-d84b5434 " data-slate-type="paragraph" data-slate-object="block" data-key="1528"> 
<span data-slate-object="text" data-key="1529"><span data-slate-leaf="true" data-offset-key="1529:0" 
data-first-offset="true"><span data-slate-string="true">读到这里，你可能会说，那采用蓝绿部署等方式，一口气将旧代码切换到新代码不就行了吗？</span></span></span> 
</div> <div class="se-8964830e " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">没错，但是这是在没有异常发生的情况下。事实上，所有的部署都需要考虑异常情况，如果有异常情况，需要回滚代码，这突然变得不可能了——因为新数据已经写到了数据库中，一旦回滚到老代码，这些新数据就会导致程序错误。这依然会让负责部署任务的程序员陷入两难的境地。</span></span></span> 
</div> <div class="se-1aab6e64 " data-slate-type="paragraph" data-slate-object="block" data-key="1532"> 
<span data-slate-object="text" data-key="1533"><span data-slate-leaf="true" data-offset-key="1533:0" 
data-first-offset="true"><span data-slate-string="true">因此，从设计开始，我们要就考虑数据和版本的兼容问题：</span></span></span> 
</div> <div class="se-3fbb44f6" data-slate-type="list" data-slate-object="block" data-key="1534"> 
<div class="se-05253e8f se-30670fa4" data-slate-type="list-line" data-slate-object="block" 
data-key="1535"> <span data-slate-object="text" data-key="1536"><span data-slate-leaf="true" 
data-offset-key="1536:0" data-first-offset="true"><span class="se-17df03c2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">既要考虑新代码版本 + 老数据，这个是属于大多数情况，程序员一般不会忘记；</span></span></span></span> 
</div> <div class="se-28841362 se-338b9505" data-slate-type="list-line" data-slate-object="block" 
data-key="1537"> <span data-slate-object="text" data-key="1538"><span data-slate-leaf="true" 
data-offset-key="1538:0" data-first-offset="true"><span class="se-9e4ab4d3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">还要考虑老代码版本 + 新数据，这个很容易遗漏 ，出问题的往往是这个。</span></span></span></span> 
</div> </div> <div class="se-4ee32c71 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1539"> <span data-slate-object="text" data-key="1540"><span data-slate-leaf="true" 
data-offset-key="1540:0" data-first-offset="true"><span data-slate-string="true">那如果真是这样，有什么解决办法吗？</span></span></span> 
</div> <div class="se-2fd8ba5d " data-slate-type="paragraph" data-slate-object="block" data-key="1541"> 
<span data-slate-object="text" data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" 
data-first-offset="true"><span data-slate-string="true">有的，虽然这会有一些麻烦。办法就是引入一个新版本 V2 和老版本 V1 
之间的中间版本 V1.5，先部署 V1.5，而这个 V1.5 的代码更新就做一件事，去兼容这个新的数据属性 ratio——代码 V1.5 可以同时兼容数据有 ratio 和无 ratio 
两种情况，请注意这时候实际的数据还没有 ratio，因此这时候如果出了异常需要回滚代码也是没有任何问题的。</span></span></span> </div> <div class="se-272df001 
" data-slate-type="paragraph" data-slate-object="block" data-key="1543"> <span data-slate-object="text" 
data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" data-first-offset="true"><span 
data-slate-string="true">之后再来部署 V2，这样，如果有了异常，可以回滚到 V1.5，这就不会使我们陷入“两难”的境地了。但是，在这完成之后，项目组应该回过头来想一想，为什么 
V1 的设计如此僵硬，增加一个新的 ratio 属性就引起了如此之大的数据不兼容问题，后续是否有改进的空间。</span></span></span> </div> <h2 class="se-8ef8e55e" 
data-slate-type="heading" data-slate-object="block" data-key="1545"><span data-slate-object="text" 
data-key="1546"><span data-slate-leaf="true" data-offset-key="1546:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-4442ecfa " data-slate-type="paragraph" 
data-slate-object="block" data-key="1547"> <span data-slate-object="text" data-key="1548"><span 
data-slate-leaf="true" data-offset-key="1548:0" data-first-offset="true"><span data-slate-string="true">今天我详细介绍了负载分担下的集群和新代码部署的方式，也介绍了服务端 
Session 和客户端 Cookie 的原理，希望你能有所启发，有效避坑。</span></span></span> </div> <div class="se-226f1aaf 
" data-slate-type="paragraph" data-slate-object="block" data-key="1549"> <span data-slate-object="text" 
data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" data-first-offset="true"><span 
data-slate-string="true">现在我来提两个问题：</span></span></span> </div> <div class="se-638fb292" data-slate-type="list" 
data-slate-object="block" data-key="1551"> <div class="se-34861533 se-14e3c423" data-slate-type="list-line" 
data-slate-object="block" data-key="1552"> <span data-slate-object="text" data-key="1553"><span 
data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span data-slate-string="true">在你参与过的项目中，代码部署环节，采用的是上面介绍的六种策略中的哪一种呢，或者是第七种？</span></span></span> 
</div> <div class="se-1e2ca5ef se-d8c5d559" data-slate-type="list-line" data-slate-object="block" 
data-key="1554"> <span data-slate-object="text" data-key="1555"><span data-slate-leaf="true" 
data-offset-key="1555:0" data-first-offset="true"><span data-slate-string="true">文中我介绍了 Session 
和 Cookie 都可以存放一定的信息，现在试想一下，如果你来实现极客时间这个网站（包括注册、登陆和课程订阅功能），你觉得哪些信息应当存放在浏览器的 Cookie 内，哪些信息应当存放在服务端 
Session 中呢？</span></span></span> </div> </div> <div class="se-f2dcd530 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1556"> <span data-slate-object="text" data-key="1557"><span 
data-slate-leaf="true" data-offset-key="1557:0" data-first-offset="true"><span data-slate-string="true">最后，对于 
Session 和 Cookie 的部分，今天还有选修课堂，可以帮助你通过具体实践，理解原理，加深印象，希望你可以继续阅读。如果有体会，或者有问题，欢迎你在留言区留言，我们一起讨论。</span></span></span> 
</div> <h2 class="se-31f0017d" data-slate-type="heading" data-slate-object="block" data-key="1558"><span 
data-slate-object="text" data-key="1559"><span data-slate-leaf="true" data-offset-key="1559:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：动手实践并理解 Session 和 Cookie 的原理</span></span></span></h2> 
<div class="se-15005f45 " data-slate-type="paragraph" data-slate-object="block" data-key="1560"> 
<span data-slate-object="text" data-key="1561"><span data-slate-leaf="true" data-offset-key="1561:0" 
data-first-offset="true"><span data-slate-string="true">还记得 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1562" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1563"><span data-slate-leaf="true" data-offset-key="1563:0" data-first-offset="true"><span 
data-slate-string="true">[第 10 讲]</span></span></span></a><span data-slate-object="text" data-key="1564"><span 
data-slate-leaf="true" data-offset-key="1564:0" data-first-offset="true"><span data-slate-string="true"> 
的选修课堂吗？我们来对当时创建的 ${CATALINA_HOME}/webapps/ROOT/WEB-INF/BookServlet.java 稍作修改，在文件开头的地方引入 java.util.logging.Logger 
这个日志类，再在 BookServlet 中创建日志对象，最后在我们曾经实现的 doGet 方法中添加打印 Session 中我们存放的上一次访问的 categoryName 信息，完整代码如下：</span></span></span> 
</div> <div class="se-fed7418b se-f3bac9ef" data-slate-type="pre" data-slate-object="block" 
data-key="1565" data-code-language="java"> <div class="se-09bbf205 se-8fac6a17"> <span></span> 
</div> <div class="se-d2cf7c3d"> <div class="se-75f07380 se-75ef9780" data-code-line-number="1"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="2"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="3"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="4"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="5"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="6"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="7"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="8"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="9"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="10"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="11"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="12"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="13"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="14"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="15"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="16"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="17"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="18"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="19"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="20"></div> </div> <div class="se-289b8074 
ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1566"> <span data-slate-object="text" data-key="1567"><span data-slate-leaf="true" 
data-offset-key="1567:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1624808494" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:1"><span data-slate-string="true"> java.util.logging.Logger;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1568"> <span data-slate-object="text" data-key="1569"><span data-slate-leaf="true" 
data-offset-key="1569:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6332941434" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1569:1"><span data-slate-string="true"> java.io.IOException;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1570"> <span data-slate-object="text" data-key="1571"><span data-slate-leaf="true" 
data-offset-key="1571:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8866350475" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1571:1"><span data-slate-string="true"> javax.servlet.ServletException;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1572"> <span data-slate-object="text" data-key="1573"><span data-slate-leaf="true" 
data-offset-key="1573:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1892454412" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1573:1"><span data-slate-string="true"> javax.servlet.http.HttpServlet;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1574"> <span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" 
data-offset-key="1575:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3245917533" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1575:1"><span data-slate-string="true"> javax.servlet.http.HttpServletRequest;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1576"> <span data-slate-object="text" data-key="1577"><span data-slate-leaf="true" 
data-offset-key="1577:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0795042138" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1577:1"><span data-slate-string="true"> javax.servlet.http.HttpServletResponse;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1578"> <span data-slate-object="text" data-key="1579"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1580"> <span data-slate-object="text" 
data-key="1581"><span data-slate-leaf="true" data-offset-key="1581:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4472520857" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1581:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5304497072" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1581:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1581:4"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_4412571682" data-annotation-type="annotation"><span 
data-slate-string="true">BookServlet</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1581:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:6"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1305405701" data-annotation-type="annotation"><span 
data-slate-string="true">extends</span></span></span></span><span data-slate-leaf="true" data-offset-key="1581:7"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1581:8"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_4404331140" data-annotation-type="annotation"><span 
data-slate-string="true">HttpServlet</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1581:9"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:10"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1582"> <span data-slate-object="text" data-key="1583"><span data-slate-leaf="true" 
data-offset-key="1583:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1583:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8517655771" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1583:2"><span data-slate-string="true"> Logger logger 
= Logger.getLogger(BookServlet.class.getName());</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1584"> <span data-slate-object="text" 
data-key="1585"><span data-slate-leaf="true" data-offset-key="1585:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1585:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1002261126" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true">protected</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:3"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7930643434" 
data-annotation-type="annotation"><span data-slate-string="true">void</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_4156509329" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3779312377" 
data-annotation-type="annotation"><span data-slate-string="true">doGet</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:6"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_7943554133" data-annotation-type="annotation"><span 
data-slate-string="true">(HttpServletRequest request, HttpServletResponse response)</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:8"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2460031663" 
data-annotation-type="annotation"><span data-slate-string="true">throws</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:9"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
ServletException, IOException </span></span></span><span data-slate-leaf="true" data-offset-key="1585:10"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="1586"> <span data-slate-object="text" 
data-key="1587"><span data-slate-leaf="true" data-offset-key="1587:0" data-first-offset="true"><span 
data-slate-string="true"> String category = request.getParameter(</span></span><span data-slate-leaf="true" 
data-offset-key="1587:1"><span class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_9788246711" 
data-annotation-type="annotation"><span data-slate-string="true">"category"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1587:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1588"> <span data-slate-object="text" data-key="1589"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1590"> <span data-slate-object="text" 
data-key="1591"><span data-slate-leaf="true" data-offset-key="1591:0" data-first-offset="true"><span 
data-slate-string="true"> String lastCategoryName = (String) request.getSession().getAttribute(</span></span><span 
data-slate-leaf="true" data-offset-key="1591:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3602862808" data-annotation-type="annotation"><span data-slate-string="true">"lastCategoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1591:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1592"> <span data-slate-object="text" data-key="1593"><span data-slate-leaf="true" 
data-offset-key="1593:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1593:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9438197264" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1593:2"><span data-slate-string="true">.logger.info(</span></span><span 
data-slate-leaf="true" data-offset-key="1593:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0667187608" data-annotation-type="annotation"><span data-slate-string="true">"Last 
category name: "</span></span></span><span data-slate-leaf="true" data-offset-key="1593:4"><span 
data-slate-string="true"> + lastCategoryName);</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1594"> <span data-slate-object="text" 
data-key="1595"><span data-slate-leaf="true" data-offset-key="1595:0" data-first-offset="true"><span 
data-slate-string="true"> request.getSession().setAttribute(</span></span><span data-slate-leaf="true" 
data-offset-key="1595:1"><span class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8810354179" 
data-annotation-type="annotation"><span data-slate-string="true">"lastCategoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1595:2"><span data-slate-string="true">, category);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1596"> <span data-slate-object="text" data-key="1597"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1598"> <span data-slate-object="text" 
data-key="1599"><span data-slate-leaf="true" data-offset-key="1599:0" data-first-offset="true"><span 
data-slate-string="true"> request.setAttribute(</span></span><span data-slate-leaf="true" data-offset-key="1599:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_1586583172" 
data-annotation-type="annotation"><span data-slate-string="true">"categoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1599:2"><span data-slate-string="true">, category);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1600"> <span data-slate-object="text" data-key="1601"><span data-slate-leaf="true" 
data-offset-key="1601:0" data-first-offset="true"><span data-slate-string="true"> request.getRequestDispatcher(</span></span><span 
data-slate-leaf="true" data-offset-key="1601:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8908562175" data-annotation-type="annotation"><span data-slate-string="true">"/book.jsp"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1601:2"><span data-slate-string="true">).forward(request, 
response);</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1602"> <span data-slate-object="text" data-key="1603"><span 
data-slate-leaf="true" data-offset-key="1603:0" data-first-offset="true"><span data-slate-string="true"> 
}</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1604"> <span data-slate-object="text" data-key="1605"><span 
data-slate-leaf="true" data-offset-key="1605:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 141px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-78eb7d59 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1606"> <span data-slate-object="text" data-key="1607"><span data-slate-leaf="true" 
data-offset-key="1607:0" data-first-offset="true"><span data-slate-string="true">你看，这里新添加的逻辑主要是，尝试从 
Session 中获取 lastCategoryName 并打印，同时把这次请求携带的 category 存放到 Session 中去，以便下次获取。</span></span></span> 
</div> <div class="se-299d8eb1 " data-slate-type="paragraph" data-slate-object="block" data-key="1608"> 
<span data-slate-object="text" data-key="1609"><span data-slate-leaf="true" data-offset-key="1609:0" 
data-first-offset="true"><span data-slate-string="true">老规矩，编译一下：</span></span></span> </div> 
<div class="se-09138937 se-904fe58f" data-slate-type="pre" data-slate-object="block" data-key="1610" 
data-code-language="objectivec"> <div class="se-fa8c9397 se-4b26f52c"> <span></span> </div> 
<div class="se-96455073"> <div class="se-438efd88 se-a9985500" data-code-line-number="1"></div> 
</div> <div class="se-2671d9a3 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1611"> <span data-slate-object="text" data-key="1612"><span 
data-slate-leaf="true" data-offset-key="1612:0" data-first-offset="true"><span data-slate-string="true">javac 
BookServlet.java -classpath ${</span></span><span data-slate-leaf="true" data-offset-key="1612:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_3909922927" 
data-annotation-type="annotation"><span data-slate-string="true">CATALINA_HOME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1612:2"><span data-slate-string="true">}/lib/servlet-api.jar</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 244px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-057ace93 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1613"> <span data-slate-object="text" data-key="1614"><span data-slate-leaf="true" 
data-offset-key="1614:0" data-first-offset="true"><span data-slate-string="true">现在启动 Tomcat：</span></span></span> 
</div> <div class="se-2ef12458 se-d66e0b55" data-slate-type="pre" data-slate-object="block" 
data-key="1615"> <div class="se-b4578c6d se-7107b7d9"> <span></span> </div> <div class="se-3475afa0"> 
<div class="se-1a84b88e se-aba813b1" data-code-line-number="1"></div> </div> <div class="se-092cf12e 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1616"> <span data-slate-object="text" data-key="1617"><span data-slate-leaf="true" 
data-offset-key="1617:0" data-first-offset="true"><span data-slate-string="true">catalina run</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-090feb6c " data-slate-type="paragraph" data-slate-object="block" data-key="1618"> 
<span data-slate-object="text" data-key="1619"><span data-slate-leaf="true" data-offset-key="1619:0" 
data-first-offset="true"><span data-slate-string="true">打开 Chrome，点击菜单栏的“文件”“打开新的隐身窗口”，用这种方式以避免过去访问产生的 
Cookies 引发的干扰：</span></span></span> </div> <div class="se-d508359d" data-slate-type="image" 
data-slate-object="block" data-key="1620"> <img class="se-58a4f255" src="https://static001.geekbang.org/resource/image/e6/ae/e6106e6ecc91b40c411703ffa26455ae.jpg"> 
</div> <div class="se-4d52e37c " data-slate-type="paragraph" data-slate-object="block" data-key="1621"> 
<span data-slate-object="text" data-key="1622"><span data-slate-leaf="true" data-offset-key="1622:0" 
data-first-offset="true"><span data-slate-string="true">然后，打开开发者工具，并切换到 Network 标签：</span></span></span> 
</div> <div class="se-af89d607" data-slate-type="image" data-slate-object="block" data-key="1623"> 
<img class="se-5fc5069e" src="https://static001.geekbang.org/resource/image/bd/51/bda8761f9e6a30a0c12dac6524930b51.jpg"> 
</div> <div class="se-99b111e1 " data-slate-type="paragraph" data-slate-object="block" data-key="1624"> 
<span data-slate-object="text" data-key="1625"><span data-slate-leaf="true" data-offset-key="1625:0" 
data-first-offset="true"><span data-slate-string="true">接着，访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1626" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1627"><span data-slate-leaf="true" data-offset-key="1627:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=art</span></span></span></a><span 
data-slate-object="text" data-key="1628"><span data-slate-leaf="true" data-offset-key="1628:0" 
data-first-offset="true"><span data-slate-string="true">，你应该可以看到命令行打印了类似这样的日志：</span></span></span> 
</div> <div class="se-cf206332 se-ece82bdf" data-slate-type="pre" data-slate-object="block" 
data-key="1629" data-code-language="javascript"> <div class="se-eb50d517 se-f262da1c"> <span></span> 
</div> <div class="se-4fff468b"> <div class="se-20e92ba7 se-07e40ce1" data-code-line-number="1"></div> 
</div> <div class="se-b1b84b51 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1630"> <span data-slate-object="text" data-key="1631"><span 
data-slate-leaf="true" data-offset-key="1631:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5555864205" data-annotation-type="annotation"><span 
data-slate-string="true">09</span></span></span><span data-slate-leaf="true" data-offset-key="1631:1"><span 
data-slate-string="true">-Oct</span></span><span data-slate-leaf="true" data-offset-key="1631:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4458383747" 
data-annotation-type="annotation"><span data-slate-string="true">-2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1631:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2663124361" data-annotation-type="annotation"><span data-slate-string="true">22</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:5"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1631:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3665550750" data-annotation-type="annotation"><span data-slate-string="true">03</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1631:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4739045973" data-annotation-type="annotation"><span data-slate-string="true">07.161</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:9"><span data-slate-string="true"> INFO [http-nio</span></span><span 
data-slate-leaf="true" data-offset-key="1631:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5508983971" data-annotation-type="annotation"><span data-slate-string="true">-8080</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:11"><span data-slate-string="true">-exec</span></span><span 
data-slate-leaf="true" data-offset-key="1631:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6207080398" data-annotation-type="annotation"><span data-slate-string="true">-1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:13"><span data-slate-string="true">] BookServlet.doGet 
Last category name: </span></span><span data-slate-leaf="true" data-offset-key="1631:14"><span 
class=" gkhl-literal" data-slate-object="annotation" data-annotation-key="gkann_4874294197" 
data-annotation-type="annotation"><span data-slate-string="true">null</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 179px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f49a8a1b " data-slate-type="paragraph" data-slate-object="block" 
data-key="1632"> <span data-slate-object="text" data-key="1633"><span data-slate-leaf="true" 
data-offset-key="1633:0" data-first-offset="true"><span data-slate-string="true">这就是说，这次访问 
Session 里面的 lastCategoryName 是空。</span></span></span> </div> <div class="se-8092bb57 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1634"> <span data-slate-object="text" data-key="1635"><span 
data-slate-leaf="true" data-offset-key="1635:0" data-first-offset="true"><span data-slate-string="true">再来看看 
Chrome 开发者工具上的 Network 标签，请求被捕获，并可以看到这个请求的响应中，一个 Set-Cookie 的头，这说明服务器没有发现这个 Session，因此给这个浏览器用户创建了一个 
Session 对象，并且生成了一个标记用户身份的随机串（名为 JSESSIONID）传回：</span></span></span> </div> <div class="se-199aebb8" 
data-slate-type="image" data-slate-object="block" data-key="1636"> <img class="se-df8fa680" 
src="https://static001.geekbang.org/resource/image/c3/d1/c3f5d3e58c853b656d22d17c94909ed1.jpg"> 
</div> <div class="se-b1556946 " data-slate-type="paragraph" data-slate-object="block" data-key="1637"> 
<span data-slate-object="text" data-key="1638"><span data-slate-leaf="true" data-offset-key="1638:0" 
data-first-offset="true"><span data-slate-string="true">现在再访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1639" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1640"><span data-slate-leaf="true" data-offset-key="1640:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=life</span></span></span></a><span 
data-slate-object="text" data-key="1641"><span data-slate-leaf="true" data-offset-key="1641:0" 
data-first-offset="true"><span data-slate-string="true">，注意这时 URL 中的 category 参数变了。命令行打印：</span></span></span> 
</div> <div class="se-fa3ed14c se-1fab9ad6" data-slate-type="pre" data-slate-object="block" 
data-key="1642" data-code-language="python"> <div class="se-b2a11bd4 se-2b23c92c"> <span></span> 
</div> <div class="se-fe28cd3d"> <div class="se-cd4ef3d0 se-f06d7892" data-code-line-number="1"></div> 
</div> <div class="se-f0ca2496 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1643"> <span data-slate-object="text" data-key="1644"><span 
data-slate-leaf="true" data-offset-key="1644:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_8242992224" data-annotation-type="annotation"><span 
data-slate-string="true">09</span></span></span><span data-slate-leaf="true" data-offset-key="1644:1"><span 
data-slate-string="true">-Oct</span></span><span data-slate-leaf="true" data-offset-key="1644:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_8585397982" 
data-annotation-type="annotation"><span data-slate-string="true">-2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1644:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7028286017" data-annotation-type="annotation"><span data-slate-string="true">22</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:5"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1644:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6207421696" data-annotation-type="annotation"><span data-slate-string="true">04</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1644:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5077819923" data-annotation-type="annotation"><span data-slate-string="true">25.977</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:9"><span data-slate-string="true"> INFO [http-nio</span></span><span 
data-slate-leaf="true" data-offset-key="1644:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0121850814" data-annotation-type="annotation"><span data-slate-string="true">-8080</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:11"><span data-slate-string="true">-</span></span><span 
data-slate-leaf="true" data-offset-key="1644:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6184537211" data-annotation-type="annotation"><span data-slate-string="true">exec</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:13"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8616188436" data-annotation-type="annotation"><span data-slate-string="true">-4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:14"><span data-slate-string="true">] BookServlet.doGet 
Last category name: art</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; 
left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 181px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-b2f4e082 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1645"> <span data-slate-object="text" data-key="1646"><span 
data-slate-leaf="true" data-offset-key="1646:0" data-first-offset="true"><span data-slate-string="true">果然，我们把前一次存放的 
lastCategoryName 准确打印出来了。</span></span></span> </div> <div class="se-70fe0b02 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1647"> <span data-slate-object="text" data-key="1648"><span 
data-slate-leaf="true" data-offset-key="1648:0" data-first-offset="true"><span data-slate-string="true">我们还是回到开发者工具的 
Network 标签，这次可以看到，请求以 Cookie 头的形式，带上了这个服务器上次传回的 JSESSIONID，也就是因为它，服务器认出了这个“老用户”：</span></span></span> 
</div> <div class="se-f6bdddef" data-slate-type="image" data-slate-object="block" data-key="1649"> 
<img class="se-96935e93" src="https://static001.geekbang.org/resource/image/bf/c8/bf112247ae6dba84d351ee134c5dc8c8.jpg"> 
</div> <div class="se-4151693f " data-slate-type="paragraph" data-slate-object="block" data-key="1650"> 
<span data-slate-object="text" data-key="1651"><span data-slate-leaf="true" data-offset-key="1651:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们可以再访问几次这个 URL，在 Session 超时时间内，只有第一次的访问服务端会在响应的 
Set-Cookie 头部放置新生成的 JSESSIONID，而后续来自浏览器的所有请求，都会在 Cookie 头上带上这个 JSESSIONID 以证明自己的身份。</span></span></span> 
</div> <div class="se-226eb33f " data-slate-type="paragraph" data-slate-object="block" data-key="1652"> 
<span data-slate-object="text" data-key="1653"><span data-slate-leaf="true" data-offset-key="1653:0" 
data-first-offset="true"><span data-slate-string="true">用一张图来揭示这个过程吧：</span></span></span> 
</div> <div class="se-7224dbc3" data-slate-type="image" data-slate-object="block" data-key="1654"> 
<img class="se-f3111acd" src="https://static001.geekbang.org/resource/image/f2/1b/f2a27cf5c0259db3f47dc584ca007a1b.jpg"> 
</div> <div class="se-f99f28b2 " data-slate-type="paragraph" data-slate-object="block" data-key="1655"> 
<span data-slate-object="text" data-key="1656"><span data-slate-leaf="true" data-offset-key="1656:0" 
data-first-offset="true"><span data-slate-string="true">上图中，浏览器一开始携带的 JSESSIONID=123 已经在服务端过期，因此是一个无效的 
JSESSIONID，于是服务端通过 Set-Cookie 返回了一个新的 456。</span></span></span> </div> <div class="se-9f99add6 
" data-slate-type="paragraph" data-slate-object="block" data-key="1657"> <span data-slate-object="text" 
data-key="1658"><span data-slate-leaf="true" data-offset-key="1658:0" data-first-offset="true"><span 
data-slate-string="true">再联想到我们今天讲到负载分担，负载分担常常支持的一个重要特性被称为“Session Stickiness”，这指的就是，能够根据这个会话的随机串，将请求转发到相应的服务器上。这样，我们就能够保证在集群部署的环境下，来自于同一客户的的请求，可以落到同一服务器上，这实际上是许多业务能够正常进行的前提要求。</span></span></span> 
</div> <div class="se-8cf1ef9a " data-slate-type="paragraph" data-slate-object="block" data-key="1659"> 
<span data-slate-object="text" data-key="1660"><span data-slate-leaf="true" data-offset-key="1660:0" 
data-first-offset="true"><span class="se-50f8cb0e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Session Stickiness 其实是属于前面介绍的负载分担策略算法中的一部分，它是整个策略算法中的优先策略</span></span></span></span><span 
data-slate-object="text" data-key="1661"><span data-slate-leaf="true" data-offset-key="1661:0" 
data-first-offset="true"><span data-slate-string="true">，即在匹配 Cookie 能够匹配上的情况下，就使用这个策略来选择服务器；但是如果匹配不上，就意味着是一个新的用户，会按照前面介绍的一般策略算法来决定路由。另外，在一些特殊的项目中，我们可能会选择一些其它的优先策略，例如 
IP Stickiness，这就是说，使用源 IP 地址来作为优先策略选择服务器。</span></span></span> </div> <div class="se-bba8deaf 
" data-slate-type="paragraph" data-slate-object="block" data-key="1662"> <span data-slate-object="text" 
data-key="1663"><span data-slate-leaf="true" data-offset-key="1663:0" data-first-offset="true"><span 
data-slate-string="true">好，希望你已经完全理解了这套机制。</span></span></span> </div> <h2 class="se-8f632375" 
data-slate-type="heading" data-slate-object="block" data-key="1664"><span data-slate-object="text" 
data-key="1665"><span data-slate-leaf="true" data-offset-key="1665:0" data-first-offset="true"><span 
data-slate-string="true">扩展阅读</span></span></span></h2> <div class="se-351b1246" data-slate-type="list" 
data-slate-object="block" data-key="1666"> <div class="se-87a3c6d3 se-437a86a1" data-slate-type="list-line" 
data-slate-object="block" data-key="1667"> <span data-slate-object="text" data-key="1668"><span 
data-slate-leaf="true" data-offset-key="1668:0" data-first-offset="true"><span data-slate-string="true">【基础】如果你对于 
Cookie 还不太了解的话，建议你阅读 MDN </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1669" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1670"><span 
data-slate-leaf="true" data-offset-key="1670:0" data-first-offset="true"><span data-slate-string="true">HTTP 
cookies</span></span></span></a><span data-slate-object="text" data-key="1671"><span data-slate-leaf="true" 
data-offset-key="1671:0" data-first-offset="true"><span data-slate-string="true"> 这篇简短的教程。</span></span></span> 
</div> <div class="se-d3e3a51a se-3ce68ff6" data-slate-type="list-line" data-slate-object="block" 
data-key="1672"> <span data-slate-object="text" data-key="1673"><span data-slate-leaf="true" 
data-offset-key="1673:0" data-first-offset="true"><span data-slate-string="true">对于文中介绍的六种部署策略，欢迎阅读 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1674" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="1675"><span data-slate-leaf="true" data-offset-key="1675:0" 
data-first-offset="true"><span data-slate-string="true">Six Strategies for Application Deployment</span></span></span></a><span 
data-slate-object="text" data-key="1676"><span data-slate-leaf="true" data-offset-key="1676:0" 
data-first-offset="true"><span data-slate-string="true"> 这篇文章，它对于每一种策略都有详细解读，且带有动画图示。如果需要中文译文，你可以看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1677" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1678"><span data-slate-leaf="true" data-offset-key="1678:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1679"><span data-slate-leaf="true" data-offset-key="1679:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-f2841ad7" data-slate-type="image" 
data-slate-object="block" data-key="1680"> <img class="se-89196f3e" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 1 msec}
2020-11-19 11:10:23.779 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.779 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:23.784 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1385" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-bca7372b " data-slate-type="paragraph" data-slate-object="block" data-key="1386"> 
<span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-29e03091 " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">今天我们来谈谈 Ops 的三部曲之二，集群部署。毕竟一台物理机能够承载的请求数是十分有限的，同时，一台物理机还存在着单点故障（Single 
Point Failure）问题，因此我们通常需要把多台 Web 服务器组成集群，来提供服务。</span></span></span> </div> <h2 class="se-6578403e" 
data-slate-type="heading" data-slate-object="block" data-key="1390"><span data-slate-object="text" 
data-key="1391"><span data-slate-leaf="true" data-offset-key="1391:0" data-first-offset="true"><span 
data-slate-string="true">负载分担</span></span></span></h2> <div class="se-a3f52b1b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1392"> <span data-slate-object="text" data-key="1393"><span 
data-slate-leaf="true" data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1394" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true">[第 28 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1396"><span data-slate-leaf="true" data-offset-key="1396:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的反向代理吗？负载分担，又叫负载均衡，也就是 Load Balancer，就是反向代理设备中非常常见的一种，它可以高效地将访问请求按某种策略发送到内网相应的后端服务器上，但是对外却只暴露单一的一个地址。</span></span></span> 
</div> <div class="se-6ce980b8 " data-slate-type="paragraph" data-slate-object="block" data-key="1397"> 
<span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" data-offset-key="1398:0" 
data-first-offset="true"><span data-slate-string="true">除了作为名词特指设备，负载分担还可以作为动词指用来分配请求负载的行为，它可大可小，小可以到使用 
F5 等负载均衡的专用设备来将请求映射到几台服务器上，但也可以大到用 DNS 来实现广域网的路由。例如同样访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1399" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span 
data-slate-string="true">www.google.com</span></span></span></a><span data-slate-object="text" 
data-key="1401"><span data-slate-leaf="true" data-offset-key="1401:0" data-first-offset="true"><span 
data-slate-string="true">，DNS 会对于不同地区的人解析为不同且就近的 IP 地址，而每个 IP 地址，实际又是一个更小的负载分担的子网和服务器集群。</span></span></span> 
</div> <div class="se-91fb642e" data-slate-type="image" data-slate-object="block" data-key="1402"> 
<img class="se-92b71a4f" src="https://static001.geekbang.org/resource/image/9f/fe/9f13dc9a69ec0e78d515383f30721cfe.jpg"> 
</div> <div class="se-ffb24206 " data-slate-type="paragraph" data-slate-object="block" data-key="1403"> 
<span data-slate-object="text" data-key="1404"><span data-slate-leaf="true" data-offset-key="1404:0" 
data-first-offset="true"><span data-slate-string="true">上图演示了这样一个过程：</span></span></span> </div> 
<div class="se-e9b5e97b" data-slate-type="list" data-slate-object="block" data-key="1405"> 
<div class="se-b824ab4b se-de23ea70" data-slate-type="list-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true">用户 A 和用户 B 
都去 DNS 服务器查询 Google 的 IP 地址，但是他们在不同地区，不同的 DNS 服务器返回了不同的 IP 地址；</span></span></span> </div> 
<div class="se-50ca7ebc se-961ea754" data-slate-type="list-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true">以用户 B 为例，根据返回的地址发送了一个 
HTTP GET 请求，这个请求被负载均衡器转发给了服务器集群中的其中一台服务器 Web Server 2 处理并返回。这个城堡一样的结构图示就是负载均衡器，负责转发请求到实际的服务器。它可以由硬件实现，例如 
F5；也可以由软件实现，例如 Nginx。</span></span></span> </div> </div> <div class="se-5fc670b1 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1410"> <span data-slate-object="text" data-key="1411"><span 
data-slate-leaf="true" data-offset-key="1411:0" data-first-offset="true"><span data-slate-string="true">对于 
DNS 的记录查询，我们曾在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1412" 
class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" 
data-offset-key="1413:0" data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1414"><span data-slate-leaf="true" data-offset-key="1414:0" 
data-first-offset="true"><span data-slate-string="true"> 动手实践过，如果你忘记了可以回看。</span></span></span> 
</div> <h3 class="se-9b306957" data-slate-type="heading" data-slate-object="block" data-key="1415"><span 
data-slate-object="text" data-key="1416"><span data-slate-leaf="true" data-offset-key="1416:0" 
data-first-offset="true"><span data-slate-string="true">策略算法</span></span></span></h3> <div 
class="se-a82b3098 " data-slate-type="paragraph" data-slate-object="block" data-key="1417"> 
<span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" data-offset-key="1418:0" 
data-first-offset="true"><span data-slate-string="true">负载分担需要把请求发送到相应的服务器上，但是怎么选择那一台服务器，这里就涉及到策略算法了，这个算法可以很简单，也可以非常复杂。常见的包括这样几种：</span></span></span> 
</div> <div class="se-bb557a2e" data-slate-type="list" data-slate-object="block" data-key="1419"> 
<div class="se-d943d18d se-90003142" data-slate-type="list-line" data-slate-object="block" 
data-key="1420"> <span data-slate-object="text" data-key="1421"><span data-slate-leaf="true" 
data-offset-key="1421:0" data-first-offset="true"><span data-slate-string="true">随机选择：从服务器的池中随机选择一台，这是一种实现上最简单的方式。</span></span></span> 
</div> <div class="se-6b72ada9 se-abcf1d31" data-slate-type="list-line" data-slate-object="block" 
data-key="1422"> <span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" 
data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true">轮询（Round Robin）：按顺序一台一台地将请求转发，本质上它和随机选择一样，缺乏对任务较为合理的分配。</span></span></span> 
</div> <div class="se-a5aec116 se-6d252e7d" data-slate-type="list-line" data-slate-object="block" 
data-key="1424"> <span data-slate-object="text" data-key="1425"><span data-slate-leaf="true" 
data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true">最小连接：这种方式检测当前和负载均衡器连接的所有后端服务器中，连接数最小的一个。这是一种近似寻找“最小资源占用”的机器的方法。</span></span></span> 
</div> <div class="se-d7f2607f se-bf9c8d96" data-slate-type="list-line" data-slate-object="block" 
data-key="1426"> <span data-slate-object="text" data-key="1427"><span data-slate-leaf="true" 
data-offset-key="1427:0" data-first-offset="true"><span data-slate-string="true">其它寻找“最小资源占用的方法”，例如根据服务器报告上来的 
CPU 使用率等等来分配，但是对于统计信息的收集，会显著增加系统的复杂度。</span></span></span> </div> <div class="se-f038be13 se-4985a521" 
data-slate-type="list-line" data-slate-object="block" data-key="1428"> <span data-slate-object="text" 
data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" data-first-offset="true"><span 
data-slate-string="true">指定的哈希算法：例如我们曾在 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1430" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1431"><span 
data-slate-leaf="true" data-offset-key="1431:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="1432"><span data-slate-leaf="true" 
data-offset-key="1432:0" data-first-offset="true"><span data-slate-string="true"> 中介绍的一致性哈希，这种方式也非常常用，这种方式就不只是从访问压力分散的角度来考虑了，还起到了寻找数据的“路由”的作用，如果你忘记了，可以回看。</span></span></span> 
</div> </div> <h2 class="se-3b7ea43e" data-slate-type="heading" data-slate-object="block" data-key="1433"><span 
data-slate-object="text" data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" 
data-first-offset="true"><span data-slate-string="true">服务端 Session 和浏览器 Cookie</span></span></span></h2> 
<div class="se-6fa78af2 " data-slate-type="paragraph" data-slate-object="block" data-key="1435"> 
<span data-slate-object="text" data-key="1436"><span data-slate-leaf="true" data-offset-key="1436:0" 
data-first-offset="true"><span data-slate-string="true">从上面负载分担的策略算法可以看出，大部分的策略算法是适合服务器“无状态”的场景，换言之，来自于同一个浏览器的请求，很可能这一个被转发给了服务器 
1，紧接着的下一个就被转给服务器 2 了。在没有状态的情况下，这第二个请求被转给哪台服务器都无所谓。</span></span></span> </div> <h3 class="se-e8956d20" 
data-slate-type="heading" data-slate-object="block" data-key="1437"><span data-slate-object="text" 
data-key="1438"><span data-slate-leaf="true" data-offset-key="1438:0" data-first-offset="true"><span 
data-slate-string="true">服务端 Session</span></span></span></h3> <div class="se-6400b887 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1439"> <span data-slate-object="text" data-key="1440"><span 
data-slate-leaf="true" data-offset-key="1440:0" data-first-offset="true"><span data-slate-string="true">对于很多 
Web 业务来说，我们恰恰希望服务器是“有状态”的。比如说，登陆是一个消耗资源较为明显的行为，在登陆的过程中，服务器要进行鉴权，去数据库查询用户的权限，获取用户的信息等操作。那么用户在登陆以后，一定时间内活跃的访问，我们希望可以直接完成，而不需要再次进行重复的鉴权、权限查询和用户信息获取等操作。</span></span></span> 
</div> <div class="se-7741c3f2 " data-slate-type="paragraph" data-slate-object="block" data-key="1441"> 
<span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" data-offset-key="1442:0" 
data-first-offset="true"><span data-slate-string="true">这就需要服务端存储的“会话”（Session）对象来实现了。Web 服务器在内存中存放一个临时对象，这个对象就可以存放针对特定用户的具体信息，比如上面提到的用户信息和用户权限信息等等。这样，当用户再一次的请求访问到来的时候，就可以优先去会话对象中查看，如果用户已经登录，已经具备了这些信息，那么就不需要再执行这些重复的鉴权、信息获取等操作了，从而省下大量的资源。</span></span></span> 
</div> <div class="se-18c69106 " data-slate-type="paragraph" data-slate-object="block" data-key="1443"> 
<span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" data-offset-key="1444:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们也不知道用户什么时候就停止了对网站的使用，他可能会主动“登出”，这就要求我们</span></span></span><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span class="se-0482c1c1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">主动</span></span></span></span><span data-slate-object="text" data-key="1446"><span 
data-slate-leaf="true" data-offset-key="1446:0" data-first-offset="true"><span data-slate-string="true">将会话过期或销毁；他也可能默默地离开，这就需要一个会话管理的超时机制，在一定时间以后也要“</span></span></span><span 
data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span class="se-c3e29665" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">被动</span></span></span></span><span data-slate-object="text" data-key="1448"><span 
data-slate-leaf="true" data-offset-key="1448:0" data-first-offset="true"><span data-slate-string="true">”销毁这个会话，以避免会话信息无效的资源占用或潜在的安全隐患，这个时间就叫做会话超时时间。</span></span></span> 
</div> <h3 class="se-020a4089" data-slate-type="heading" data-slate-object="block" data-key="1449"><span 
data-slate-object="text" data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" 
data-first-offset="true"><span data-slate-string="true">浏览器 Cookie</span></span></span></h3> 
<div class="se-0b1037c0 " data-slate-type="paragraph" data-slate-object="block" data-key="1451"> 
<span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" data-offset-key="1452:0" 
data-first-offset="true"><span data-slate-string="true">说完了服务端 Session，我再来说说浏览器 Cookie。</span></span></span> 
</div> <div class="se-0afb357e " data-slate-type="paragraph" data-slate-object="block" data-key="1453"> 
<span data-slate-object="text" data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" 
data-first-offset="true"><span data-slate-string="true">浏览器可以以文本的形式在本地存放少量的信息。比如，在最近一次访问服务器、创建会话之后，服务器会生成一个标记用户身份的随机串，这样在这个用户下次访问同一个服务器的时候，就可以带上这个随机串，那么服务器就能够根据这个随机串得知，哦，是老用户到访，欢迎欢迎。</span></span></span> 
</div> <div class="se-2b20d914 " data-slate-type="paragraph" data-slate-object="block" data-key="1455"> 
<span data-slate-object="text" data-key="1456"><span data-slate-leaf="true" data-offset-key="1456:0" 
data-first-offset="true"><span data-slate-string="true">这个随机串，以文本的形式在浏览器端的存储，就被称为 Cookie。这个存储可以仅仅是在内存中的，因而浏览器退出就失效了；也可以存储在硬盘上，那么浏览器重新启动以后，请求发送依然可以携带这个信息。</span></span></span> 
</div> <div class="se-10f986ff " data-slate-type="paragraph" data-slate-object="block" data-key="1457"> 
<span data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">从这套机制中，你可能已经发现了，它们在努力做的其实就是一件事——给 HTTP 
通信填坑。</span></span></span> </div> <div class="se-c82cb358 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1459"> <span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" 
data-offset-key="1460:0" data-first-offset="true"><span data-slate-string="true">回想一下，我们已经介绍过 
HTTP 版本的天生缺陷。在 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1461" 
class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1462"><span data-slate-leaf="true" 
data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">[第 02 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1463"><span data-slate-leaf="true" data-offset-key="1463:0" 
data-first-offset="true"><span data-slate-string="true"> 我们介绍了，</span></span></span><span data-slate-object="text" 
data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" data-first-offset="true"><span 
class="se-9347d21c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">缺乏数据加密传输的安全性大坑</span></span></span></span><span 
data-slate-object="text" data-key="1465"><span data-slate-leaf="true" data-offset-key="1465:0" 
data-first-offset="true"><span data-slate-string="true">，被 HTTPS 给填了；在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1466" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true">[第 03 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1468"><span data-slate-leaf="true" data-offset-key="1468:0" 
data-first-offset="true"><span data-slate-string="true"> 我们学习了，</span></span></span><span data-slate-object="text" 
data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" data-first-offset="true"><span 
class="se-22a55a7f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">只能由客户端主动发起消息传递的交互模式上的坑</span></span></span></span><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true">，被服务端推送等多种技术给填了。</span></span></span> 
</div> <div class="se-fcb74dfd " data-slate-type="paragraph" data-slate-object="block" data-key="1471"> 
<span data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">现在，我们来填第三个坑——HTTP </span></span></span><span 
data-slate-object="text" data-key="1473"><span data-slate-leaf="true" data-offset-key="1473:0" 
data-first-offset="true"><span class="se-2785fef7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">协议本身无法保持状态的坑</span></span></span></span><span data-slate-object="text" 
data-key="1474"><span data-slate-leaf="true" data-offset-key="1474:0" data-first-offset="true"><span 
data-slate-string="true">。既然协议本身无法保持状态，那么协议的两头只好多做一点工作了，而客户端 Cookie 和服务端 Session 都能够保存一定的状态信息，这就让客户端和服务端连续的多次交互，可以建立在一定状态的基础上进行。</span></span></span> 
</div> <h2 class="se-da5c76ad" data-slate-type="heading" data-slate-object="block" data-key="1475"><span 
data-slate-object="text" data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" 
data-first-offset="true"><span data-slate-string="true">集群部署</span></span></span></h2> <div 
class="se-8a14b901 " data-slate-type="paragraph" data-slate-object="block" data-key="1477"> 
<span data-slate-object="text" data-key="1478"><span data-slate-leaf="true" data-offset-key="1478:0" 
data-first-offset="true"><span data-slate-string="true">集群带来了无单点故障的好处，因为无单点故障，是保证业务不中断的前提。但是，每当有 
bug 修复，或是新版本发布，我们就需要将新代码部署到线上环境中，在这种情况下，我们该怎样保证不间断地提供服务呢？</span></span></span> </div> <div 
class="se-c6dd0761 " data-slate-type="paragraph" data-slate-object="block" data-key="1479"> 
<span data-slate-object="text" data-key="1480"><span data-slate-leaf="true" data-offset-key="1480:0" 
data-first-offset="true"><span data-slate-string="true">在软件产品上线的实践活动中，有多种新版本的部署策略，它们包括：</span></span></span> 
</div> <div class="se-0020a0cb" data-slate-type="list" data-slate-object="block" data-key="1481"> 
<div class="se-32e8a87e se-a84ed201" data-slate-type="list-line" data-slate-object="block" 
data-key="1482"> <span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" 
data-offset-key="1483:0" data-first-offset="true"><span data-slate-string="true">重建（Recreate）部署：旧版本停止，新版本启动。</span></span></span> 
</div> <div class="se-2fe2e4c8 se-7eb97120" data-slate-type="list-line" data-slate-object="block" 
data-key="1484"> <span data-slate-object="text" data-key="1485"><span data-slate-leaf="true" 
data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true">滚动（Ramped）部署：旧版本缓慢地释出，并逐渐被新版本替代。这是最常见的内部服务的部署方式，我在下面会详述。</span></span></span> 
</div> <div class="se-a7d150a0 se-4a6d61a0" data-slate-type="list-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">蓝绿（Blue/Green）部署：在旧版本不停机的情况下，新版本先完成部署，再将流量从旧版本导过来。这也是非常常见的，这种部署的好处是，可以有充分的时间，对部署了但未上线的新版本做全量的测试，在线下确保没有问题了之后再切换线上流量。</span></span></span> 
</div> <div class="se-874c68ba se-16a240c6" data-slate-type="list-line" data-slate-object="block" 
data-key="1488"> <span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" 
data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">金丝雀（Canary）部署：先导入少量的用户访问新版本，在验证正常后再逐步扩展到所有机器。这种部署也较为常见，最大的优点是它非常“谨慎”，可以逐步地扩展影响用户的范围，对于一些用户量非常大的业务，这种方式相对比较稳妥，可以不断观察使用情况和流量数据，在部署环节的任意时间做出适当调整。</span></span></span> 
</div> <div class="se-37370e2e se-0eccd2ca" data-slate-type="list-line" data-slate-object="block" 
data-key="1490"> <span data-slate-object="text" data-key="1491"><span data-slate-leaf="true" 
data-offset-key="1491:0" data-first-offset="true"><span data-slate-string="true">A/B 测试（A/B 
Testing）部署：导入特定用户到新版本代码。</span></span></span> </div> <div class="se-93c3a0c9 se-8bc7c43b" data-slate-type="list-line" 
data-slate-object="block" data-key="1492"> <span data-slate-object="text" data-key="1493"><span 
data-slate-leaf="true" data-offset-key="1493:0" data-first-offset="true"><span data-slate-string="true">影子（Shadow）部署：新版本接收实际的发往老版本的源请求的拷贝，但是并不干预源请求的处理和响应本身。</span></span></span> 
</div> </div> <div class="se-35c924b5 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1494"> <span data-slate-object="text" data-key="1495"><span data-slate-leaf="true" 
data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true">既然使用集群，一大目的就是保证可用性，避免停机时间，而上面这六种中的第一种——重建部署，显然是存在停机时间的，因此很少采用。</span></span></span> 
</div> <h3 class="se-edc5f215" data-slate-type="heading" data-slate-object="block" data-key="1496"><span 
data-slate-object="text" data-key="1497"><span data-slate-leaf="true" data-offset-key="1497:0" 
data-first-offset="true"><span data-slate-string="true">滚动部署</span></span></span></h3> <div 
class="se-ab4b9d01 " data-slate-type="paragraph" data-slate-object="block" data-key="1498"> 
<span data-slate-object="text" data-key="1499"><span data-slate-leaf="true" data-offset-key="1499:0" 
data-first-offset="true"><span data-slate-string="true">在互联网大厂（包括我所经历的 Amazon 和 Oracle），对于一般的服务来说，绝大多数服务的部署，采用的都是滚动部署。为什么？我们来看一下其它几项的缺点，你就清楚了。</span></span></span> 
</div> <div class="se-ab6fe7d5" data-slate-type="list" data-slate-object="block" data-key="1500"> 
<div class="se-16a4afb2 se-3a244d48" data-slate-type="list-line" data-slate-object="block" 
data-key="1501"> <span data-slate-object="text" data-key="1502"><span data-slate-leaf="true" 
data-offset-key="1502:0" data-first-offset="true"><span data-slate-string="true">重建部署存在停机时间，不讨论。</span></span></span> 
</div> <div class="se-1fe2ae2d se-51f0716d" data-slate-type="list-line" data-slate-object="block" 
data-key="1503"> <span data-slate-object="text" data-key="1504"><span data-slate-leaf="true" 
data-offset-key="1504:0" data-first-offset="true"><span data-slate-string="true">蓝绿部署需要两倍的服务器资源，这个是一个局限性，而即便资源申请不是问题，这部署期间多出一倍的资源，机器需要进行初始化等各种准备，会有一定的时间和资源开销；再有一个是老版本代码的机器上可能有一些配置，而这个配置在完成部署后切换的时候会丢失。</span></span></span> 
</div> <div class="se-3fdc1e9a se-25cea67f" data-slate-type="list-line" data-slate-object="block" 
data-key="1505"> <span data-slate-object="text" data-key="1506"><span data-slate-leaf="true" 
data-offset-key="1506:0" data-first-offset="true"><span data-slate-string="true">剩下的三种部署相对更为“谨慎”，自然效率较低，即部署速度较慢，对于绝大多数服务的部署来说，有些得不偿失。当然，事物都有两面性，它们对于许多面向互联网用户等至关重要的业务来说，有时就可能是更佳的选择。</span></span></span> 
</div> </div> <div class="se-e2217825 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1507"> <span data-slate-object="text" data-key="1508"><span data-slate-leaf="true" 
data-offset-key="1508:0" data-first-offset="true"><span data-slate-string="true">那对于一般的系统，部署会按照 
50% - 50% 进行，即将部署分为两个阶段。第一个阶段，50% 的服务器保持不动，另 50% 的服务器部署新版本；完成后，在第二个阶段，将这 50% 的老版本给更新了，从而达成所有节点的新版本。对于流量比较大的服务，也有采取 
33% - 33% - 34% 这样三阶段进行的。</span></span></span> </div> <div class="se-298c3f3f " data-slate-type="paragraph" 
data-slate-object="block" data-key="1509"> <span data-slate-object="text" data-key="1510"><span 
data-slate-leaf="true" data-offset-key="1510:0" data-first-offset="true"><span data-slate-string="true">下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1511" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1512"><span data-slate-leaf="true" data-offset-key="1512:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1513"><span data-slate-leaf="true" data-offset-key="1513:0" data-first-offset="true"><span 
data-slate-string="true">文章，很好地展示了这个滚动部署渐进的过程：</span></span></span> </div> <div class="se-8899b54e" 
data-slate-type="image" data-slate-object="block" data-key="1514"> <img class="se-a22acbdb" 
src="https://static001.geekbang.org/resource/image/41/d1/4101aa91a1d7ba7347444f3deb5b51d1.gif"> 
</div> <h3 class="se-479d9f02" data-slate-type="heading" data-slate-object="block" data-key="1515"><span 
data-slate-object="text" data-key="1516"><span data-slate-leaf="true" data-offset-key="1516:0" 
data-first-offset="true"><span data-slate-string="true">数据和版本的兼容</span></span></span></h3> 
<div class="se-2a1bcb23 " data-slate-type="paragraph" data-slate-object="block" data-key="1517"> 
<span data-slate-object="text" data-key="1518"><span data-slate-leaf="true" data-offset-key="1518:0" 
data-first-offset="true"><span data-slate-string="true">在应用部署的实践过程中，程序员一般不会忽略对于程序异常引发服务中断的处理。比如说，新版本部署怎样进行 
Sanity Test（对于部署后的新版本代码，进行快速而基本的测试），确保其没有大的问题，在测试通过以后再让负载分担把流量引导过来；再比如说，如果新版本出现了较为严重的问题，服务无法支撑，就要“回滚”（Rollback），退回到原有的版本。</span></span></span> 
</div> <div class="se-b7078d8e " data-slate-type="paragraph" data-slate-object="block" data-key="1519"> 
<span data-slate-object="text" data-key="1520"><span data-slate-leaf="true" data-offset-key="1520:0" 
data-first-offset="true"><span data-slate-string="true">但是，我们</span></span></span><span data-slate-object="text" 
data-key="1521"><span data-slate-leaf="true" data-offset-key="1521:0" data-first-offset="true"><span 
class="se-0112415c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">除了要考虑程序，还要考虑数据，特别是数据和版本的兼容问题。数据造成的问题更大，单纯因为程序有问题还可能回滚，但若数据有问题却是连回滚的机会都没有的。</span></span></span></span><span 
data-slate-object="text" data-key="1522"><span data-slate-leaf="true" data-offset-key="1522:0" 
data-first-offset="true"><span data-slate-string="true">我来举个真实的例子。</span></span></span> </div> 
<div class="se-32c0add0 " data-slate-type="paragraph" data-slate-object="block" data-key="1523"> 
<span data-slate-object="text" data-key="1524"><span data-slate-leaf="true" data-offset-key="1524:0" 
data-first-offset="true"><span data-slate-string="true">某 Web 服务提供了数据的读写功能，现在在新版本的数据 schema 
中增加了新的属性“ratio”。于是，相应的，新版本代码也进行了修改，于是无论老数据还是新数据，无论数据的 schema 中有没有这个 ratio，都可以被正确处理。</span></span></span> 
</div> <div class="se-557ff4e1 " data-slate-type="paragraph" data-slate-object="block" data-key="1525"> 
<span data-slate-object="text" data-key="1526"><span data-slate-leaf="true" data-offset-key="1526:0" 
data-first-offset="true"><span data-slate-string="true">但是，老代码是无法顺利处理这个新数据加入的 ratio 属性的。在采用滚动部署的过程中，新、老版本的代码同时运行的时候，如果新代码写入了这个带有 
ratio 的数据，之后又被老版本代码读取到，就会引发错误。我用一张图来说明这个问题：</span></span></span> </div> <div class="se-7304bbda" 
data-slate-type="image" data-slate-object="block" data-key="1527"> <img class="se-98acca30" 
src="https://static001.geekbang.org/resource/image/aa/7b/aad1c4e5d962158e1b1dbb3aead1dd7b.jpg"> 
</div> <div class="se-d84b5434 " data-slate-type="paragraph" data-slate-object="block" data-key="1528"> 
<span data-slate-object="text" data-key="1529"><span data-slate-leaf="true" data-offset-key="1529:0" 
data-first-offset="true"><span data-slate-string="true">读到这里，你可能会说，那采用蓝绿部署等方式，一口气将旧代码切换到新代码不就行了吗？</span></span></span> 
</div> <div class="se-8964830e " data-slate-type="paragraph" data-slate-object="block" data-key="1530"> 
<span data-slate-object="text" data-key="1531"><span data-slate-leaf="true" data-offset-key="1531:0" 
data-first-offset="true"><span data-slate-string="true">没错，但是这是在没有异常发生的情况下。事实上，所有的部署都需要考虑异常情况，如果有异常情况，需要回滚代码，这突然变得不可能了——因为新数据已经写到了数据库中，一旦回滚到老代码，这些新数据就会导致程序错误。这依然会让负责部署任务的程序员陷入两难的境地。</span></span></span> 
</div> <div class="se-1aab6e64 " data-slate-type="paragraph" data-slate-object="block" data-key="1532"> 
<span data-slate-object="text" data-key="1533"><span data-slate-leaf="true" data-offset-key="1533:0" 
data-first-offset="true"><span data-slate-string="true">因此，从设计开始，我们要就考虑数据和版本的兼容问题：</span></span></span> 
</div> <div class="se-3fbb44f6" data-slate-type="list" data-slate-object="block" data-key="1534"> 
<div class="se-05253e8f se-30670fa4" data-slate-type="list-line" data-slate-object="block" 
data-key="1535"> <span data-slate-object="text" data-key="1536"><span data-slate-leaf="true" 
data-offset-key="1536:0" data-first-offset="true"><span class="se-17df03c2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">既要考虑新代码版本 + 老数据，这个是属于大多数情况，程序员一般不会忘记；</span></span></span></span> 
</div> <div class="se-28841362 se-338b9505" data-slate-type="list-line" data-slate-object="block" 
data-key="1537"> <span data-slate-object="text" data-key="1538"><span data-slate-leaf="true" 
data-offset-key="1538:0" data-first-offset="true"><span class="se-9e4ab4d3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">还要考虑老代码版本 + 新数据，这个很容易遗漏 ，出问题的往往是这个。</span></span></span></span> 
</div> </div> <div class="se-4ee32c71 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1539"> <span data-slate-object="text" data-key="1540"><span data-slate-leaf="true" 
data-offset-key="1540:0" data-first-offset="true"><span data-slate-string="true">那如果真是这样，有什么解决办法吗？</span></span></span> 
</div> <div class="se-2fd8ba5d " data-slate-type="paragraph" data-slate-object="block" data-key="1541"> 
<span data-slate-object="text" data-key="1542"><span data-slate-leaf="true" data-offset-key="1542:0" 
data-first-offset="true"><span data-slate-string="true">有的，虽然这会有一些麻烦。办法就是引入一个新版本 V2 和老版本 V1 
之间的中间版本 V1.5，先部署 V1.5，而这个 V1.5 的代码更新就做一件事，去兼容这个新的数据属性 ratio——代码 V1.5 可以同时兼容数据有 ratio 和无 ratio 
两种情况，请注意这时候实际的数据还没有 ratio，因此这时候如果出了异常需要回滚代码也是没有任何问题的。</span></span></span> </div> <div class="se-272df001 
" data-slate-type="paragraph" data-slate-object="block" data-key="1543"> <span data-slate-object="text" 
data-key="1544"><span data-slate-leaf="true" data-offset-key="1544:0" data-first-offset="true"><span 
data-slate-string="true">之后再来部署 V2，这样，如果有了异常，可以回滚到 V1.5，这就不会使我们陷入“两难”的境地了。但是，在这完成之后，项目组应该回过头来想一想，为什么 
V1 的设计如此僵硬，增加一个新的 ratio 属性就引起了如此之大的数据不兼容问题，后续是否有改进的空间。</span></span></span> </div> <h2 class="se-8ef8e55e" 
data-slate-type="heading" data-slate-object="block" data-key="1545"><span data-slate-object="text" 
data-key="1546"><span data-slate-leaf="true" data-offset-key="1546:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-4442ecfa " data-slate-type="paragraph" 
data-slate-object="block" data-key="1547"> <span data-slate-object="text" data-key="1548"><span 
data-slate-leaf="true" data-offset-key="1548:0" data-first-offset="true"><span data-slate-string="true">今天我详细介绍了负载分担下的集群和新代码部署的方式，也介绍了服务端 
Session 和客户端 Cookie 的原理，希望你能有所启发，有效避坑。</span></span></span> </div> <div class="se-226f1aaf 
" data-slate-type="paragraph" data-slate-object="block" data-key="1549"> <span data-slate-object="text" 
data-key="1550"><span data-slate-leaf="true" data-offset-key="1550:0" data-first-offset="true"><span 
data-slate-string="true">现在我来提两个问题：</span></span></span> </div> <div class="se-638fb292" data-slate-type="list" 
data-slate-object="block" data-key="1551"> <div class="se-34861533 se-14e3c423" data-slate-type="list-line" 
data-slate-object="block" data-key="1552"> <span data-slate-object="text" data-key="1553"><span 
data-slate-leaf="true" data-offset-key="1553:0" data-first-offset="true"><span data-slate-string="true">在你参与过的项目中，代码部署环节，采用的是上面介绍的六种策略中的哪一种呢，或者是第七种？</span></span></span> 
</div> <div class="se-1e2ca5ef se-d8c5d559" data-slate-type="list-line" data-slate-object="block" 
data-key="1554"> <span data-slate-object="text" data-key="1555"><span data-slate-leaf="true" 
data-offset-key="1555:0" data-first-offset="true"><span data-slate-string="true">文中我介绍了 Session 
和 Cookie 都可以存放一定的信息，现在试想一下，如果你来实现极客时间这个网站（包括注册、登陆和课程订阅功能），你觉得哪些信息应当存放在浏览器的 Cookie 内，哪些信息应当存放在服务端 
Session 中呢？</span></span></span> </div> </div> <div class="se-f2dcd530 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1556"> <span data-slate-object="text" data-key="1557"><span 
data-slate-leaf="true" data-offset-key="1557:0" data-first-offset="true"><span data-slate-string="true">最后，对于 
Session 和 Cookie 的部分，今天还有选修课堂，可以帮助你通过具体实践，理解原理，加深印象，希望你可以继续阅读。如果有体会，或者有问题，欢迎你在留言区留言，我们一起讨论。</span></span></span> 
</div> <h2 class="se-31f0017d" data-slate-type="heading" data-slate-object="block" data-key="1558"><span 
data-slate-object="text" data-key="1559"><span data-slate-leaf="true" data-offset-key="1559:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：动手实践并理解 Session 和 Cookie 的原理</span></span></span></h2> 
<div class="se-15005f45 " data-slate-type="paragraph" data-slate-object="block" data-key="1560"> 
<span data-slate-object="text" data-key="1561"><span data-slate-leaf="true" data-offset-key="1561:0" 
data-first-offset="true"><span data-slate-string="true">还记得 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1562" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1563"><span data-slate-leaf="true" data-offset-key="1563:0" data-first-offset="true"><span 
data-slate-string="true">[第 10 讲]</span></span></span></a><span data-slate-object="text" data-key="1564"><span 
data-slate-leaf="true" data-offset-key="1564:0" data-first-offset="true"><span data-slate-string="true"> 
的选修课堂吗？我们来对当时创建的 ${CATALINA_HOME}/webapps/ROOT/WEB-INF/BookServlet.java 稍作修改，在文件开头的地方引入 java.util.logging.Logger 
这个日志类，再在 BookServlet 中创建日志对象，最后在我们曾经实现的 doGet 方法中添加打印 Session 中我们存放的上一次访问的 categoryName 信息，完整代码如下：</span></span></span> 
</div> <div class="se-fed7418b se-f3bac9ef" data-slate-type="pre" data-slate-object="block" 
data-key="1565" data-code-language="java"> <div class="se-09bbf205 se-8fac6a17"> <span></span> 
</div> <div class="se-d2cf7c3d"> <div class="se-75f07380 se-75ef9780" data-code-line-number="1"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="2"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="3"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="4"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="5"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="6"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="7"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="8"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="9"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="10"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="11"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="12"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="13"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="14"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="15"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="16"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="17"></div> <div class="se-75f07380 
se-75ef9780" data-code-line-number="18"></div> <div class="se-75f07380 se-75ef9780" data-code-line-number="19"></div> 
<div class="se-75f07380 se-75ef9780" data-code-line-number="20"></div> </div> <div class="se-289b8074 
ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1566"> <span data-slate-object="text" data-key="1567"><span data-slate-leaf="true" 
data-offset-key="1567:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1624808494" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1567:1"><span data-slate-string="true"> java.util.logging.Logger;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1568"> <span data-slate-object="text" data-key="1569"><span data-slate-leaf="true" 
data-offset-key="1569:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6332941434" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1569:1"><span data-slate-string="true"> java.io.IOException;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1570"> <span data-slate-object="text" data-key="1571"><span data-slate-leaf="true" 
data-offset-key="1571:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8866350475" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1571:1"><span data-slate-string="true"> javax.servlet.ServletException;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1572"> <span data-slate-object="text" data-key="1573"><span data-slate-leaf="true" 
data-offset-key="1573:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1892454412" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1573:1"><span data-slate-string="true"> javax.servlet.http.HttpServlet;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1574"> <span data-slate-object="text" data-key="1575"><span data-slate-leaf="true" 
data-offset-key="1575:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3245917533" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1575:1"><span data-slate-string="true"> javax.servlet.http.HttpServletRequest;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1576"> <span data-slate-object="text" data-key="1577"><span data-slate-leaf="true" 
data-offset-key="1577:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0795042138" data-annotation-type="annotation"><span data-slate-string="true">import</span></span></span><span 
data-slate-leaf="true" data-offset-key="1577:1"><span data-slate-string="true"> javax.servlet.http.HttpServletResponse;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1578"> <span data-slate-object="text" data-key="1579"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1580"> <span data-slate-object="text" 
data-key="1581"><span data-slate-leaf="true" data-offset-key="1581:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_4472520857" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1581:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5304497072" data-annotation-type="annotation"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="1581:3"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1581:4"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_4412571682" data-annotation-type="annotation"><span 
data-slate-string="true">BookServlet</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1581:5"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:6"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1305405701" data-annotation-type="annotation"><span 
data-slate-string="true">extends</span></span></span></span><span data-slate-leaf="true" data-offset-key="1581:7"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="1581:8"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_4404331140" data-annotation-type="annotation"><span 
data-slate-string="true">HttpServlet</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="1581:9"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_6236070654" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="1581:10"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1582"> <span data-slate-object="text" data-key="1583"><span data-slate-leaf="true" 
data-offset-key="1583:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1583:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_8517655771" data-annotation-type="annotation"><span data-slate-string="true">private</span></span></span><span 
data-slate-leaf="true" data-offset-key="1583:2"><span data-slate-string="true"> Logger logger 
= Logger.getLogger(BookServlet.class.getName());</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1584"> <span data-slate-object="text" 
data-key="1585"><span data-slate-leaf="true" data-offset-key="1585:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1585:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1002261126" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true">protected</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:3"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7930643434" 
data-annotation-type="annotation"><span data-slate-string="true">void</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:5"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_4156509329" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3779312377" 
data-annotation-type="annotation"><span data-slate-string="true">doGet</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:6"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_7943554133" data-annotation-type="annotation"><span 
data-slate-string="true">(HttpServletRequest request, HttpServletResponse response)</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:7"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="1585:8"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2460031663" 
data-annotation-type="annotation"><span data-slate-string="true">throws</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1585:9"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3779312377" data-annotation-type="annotation"><span data-slate-string="true"> 
ServletException, IOException </span></span></span><span data-slate-leaf="true" data-offset-key="1585:10"><span 
data-slate-string="true">{</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="1586"> <span data-slate-object="text" 
data-key="1587"><span data-slate-leaf="true" data-offset-key="1587:0" data-first-offset="true"><span 
data-slate-string="true"> String category = request.getParameter(</span></span><span data-slate-leaf="true" 
data-offset-key="1587:1"><span class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_9788246711" 
data-annotation-type="annotation"><span data-slate-string="true">"category"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1587:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1588"> <span data-slate-object="text" data-key="1589"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1590"> <span data-slate-object="text" 
data-key="1591"><span data-slate-leaf="true" data-offset-key="1591:0" data-first-offset="true"><span 
data-slate-string="true"> String lastCategoryName = (String) request.getSession().getAttribute(</span></span><span 
data-slate-leaf="true" data-offset-key="1591:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3602862808" data-annotation-type="annotation"><span data-slate-string="true">"lastCategoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1591:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1592"> <span data-slate-object="text" data-key="1593"><span data-slate-leaf="true" 
data-offset-key="1593:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1593:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9438197264" data-annotation-type="annotation"><span data-slate-string="true">this</span></span></span><span 
data-slate-leaf="true" data-offset-key="1593:2"><span data-slate-string="true">.logger.info(</span></span><span 
data-slate-leaf="true" data-offset-key="1593:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0667187608" data-annotation-type="annotation"><span data-slate-string="true">"Last 
category name: "</span></span></span><span data-slate-leaf="true" data-offset-key="1593:4"><span 
data-slate-string="true"> + lastCategoryName);</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1594"> <span data-slate-object="text" 
data-key="1595"><span data-slate-leaf="true" data-offset-key="1595:0" data-first-offset="true"><span 
data-slate-string="true"> request.getSession().setAttribute(</span></span><span data-slate-leaf="true" 
data-offset-key="1595:1"><span class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_8810354179" 
data-annotation-type="annotation"><span data-slate-string="true">"lastCategoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1595:2"><span data-slate-string="true">, category);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1596"> <span data-slate-object="text" data-key="1597"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="1598"> <span data-slate-object="text" 
data-key="1599"><span data-slate-leaf="true" data-offset-key="1599:0" data-first-offset="true"><span 
data-slate-string="true"> request.setAttribute(</span></span><span data-slate-leaf="true" data-offset-key="1599:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_1586583172" 
data-annotation-type="annotation"><span data-slate-string="true">"categoryName"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1599:2"><span data-slate-string="true">, category);</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1600"> <span data-slate-object="text" data-key="1601"><span data-slate-leaf="true" 
data-offset-key="1601:0" data-first-offset="true"><span data-slate-string="true"> request.getRequestDispatcher(</span></span><span 
data-slate-leaf="true" data-offset-key="1601:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8908562175" data-annotation-type="annotation"><span data-slate-string="true">"/book.jsp"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1601:2"><span data-slate-string="true">).forward(request, 
response);</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1602"> <span data-slate-object="text" data-key="1603"><span 
data-slate-leaf="true" data-offset-key="1603:0" data-first-offset="true"><span data-slate-string="true"> 
}</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1604"> <span data-slate-object="text" data-key="1605"><span 
data-slate-leaf="true" data-offset-key="1605:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 141px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-78eb7d59 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1606"> <span data-slate-object="text" data-key="1607"><span data-slate-leaf="true" 
data-offset-key="1607:0" data-first-offset="true"><span data-slate-string="true">你看，这里新添加的逻辑主要是，尝试从 
Session 中获取 lastCategoryName 并打印，同时把这次请求携带的 category 存放到 Session 中去，以便下次获取。</span></span></span> 
</div> <div class="se-299d8eb1 " data-slate-type="paragraph" data-slate-object="block" data-key="1608"> 
<span data-slate-object="text" data-key="1609"><span data-slate-leaf="true" data-offset-key="1609:0" 
data-first-offset="true"><span data-slate-string="true">老规矩，编译一下：</span></span></span> </div> 
<div class="se-09138937 se-904fe58f" data-slate-type="pre" data-slate-object="block" data-key="1610" 
data-code-language="objectivec"> <div class="se-fa8c9397 se-4b26f52c"> <span></span> </div> 
<div class="se-96455073"> <div class="se-438efd88 se-a9985500" data-code-line-number="1"></div> 
</div> <div class="se-2671d9a3 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1611"> <span data-slate-object="text" data-key="1612"><span 
data-slate-leaf="true" data-offset-key="1612:0" data-first-offset="true"><span data-slate-string="true">javac 
BookServlet.java -classpath ${</span></span><span data-slate-leaf="true" data-offset-key="1612:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_3909922927" 
data-annotation-type="annotation"><span data-slate-string="true">CATALINA_HOME</span></span></span><span 
data-slate-leaf="true" data-offset-key="1612:2"><span data-slate-string="true">}/lib/servlet-api.jar</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 244px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-057ace93 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1613"> <span data-slate-object="text" data-key="1614"><span data-slate-leaf="true" 
data-offset-key="1614:0" data-first-offset="true"><span data-slate-string="true">现在启动 Tomcat：</span></span></span> 
</div> <div class="se-2ef12458 se-d66e0b55" data-slate-type="pre" data-slate-object="block" 
data-key="1615"> <div class="se-b4578c6d se-7107b7d9"> <span></span> </div> <div class="se-3475afa0"> 
<div class="se-1a84b88e se-aba813b1" data-code-line-number="1"></div> </div> <div class="se-092cf12e 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="1616"> <span data-slate-object="text" data-key="1617"><span data-slate-leaf="true" 
data-offset-key="1617:0" data-first-offset="true"><span data-slate-string="true">catalina run</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-090feb6c " data-slate-type="paragraph" data-slate-object="block" data-key="1618"> 
<span data-slate-object="text" data-key="1619"><span data-slate-leaf="true" data-offset-key="1619:0" 
data-first-offset="true"><span data-slate-string="true">打开 Chrome，点击菜单栏的“文件”“打开新的隐身窗口”，用这种方式以避免过去访问产生的 
Cookies 引发的干扰：</span></span></span> </div> <div class="se-d508359d" data-slate-type="image" 
data-slate-object="block" data-key="1620"> <img class="se-58a4f255" src="https://static001.geekbang.org/resource/image/e6/ae/e6106e6ecc91b40c411703ffa26455ae.jpg"> 
</div> <div class="se-4d52e37c " data-slate-type="paragraph" data-slate-object="block" data-key="1621"> 
<span data-slate-object="text" data-key="1622"><span data-slate-leaf="true" data-offset-key="1622:0" 
data-first-offset="true"><span data-slate-string="true">然后，打开开发者工具，并切换到 Network 标签：</span></span></span> 
</div> <div class="se-af89d607" data-slate-type="image" data-slate-object="block" data-key="1623"> 
<img class="se-5fc5069e" src="https://static001.geekbang.org/resource/image/bd/51/bda8761f9e6a30a0c12dac6524930b51.jpg"> 
</div> <div class="se-99b111e1 " data-slate-type="paragraph" data-slate-object="block" data-key="1624"> 
<span data-slate-object="text" data-key="1625"><span data-slate-leaf="true" data-offset-key="1625:0" 
data-first-offset="true"><span data-slate-string="true">接着，访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1626" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1627"><span data-slate-leaf="true" data-offset-key="1627:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=art</span></span></span></a><span 
data-slate-object="text" data-key="1628"><span data-slate-leaf="true" data-offset-key="1628:0" 
data-first-offset="true"><span data-slate-string="true">，你应该可以看到命令行打印了类似这样的日志：</span></span></span> 
</div> <div class="se-cf206332 se-ece82bdf" data-slate-type="pre" data-slate-object="block" 
data-key="1629" data-code-language="javascript"> <div class="se-eb50d517 se-f262da1c"> <span></span> 
</div> <div class="se-4fff468b"> <div class="se-20e92ba7 se-07e40ce1" data-code-line-number="1"></div> 
</div> <div class="se-b1b84b51 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1630"> <span data-slate-object="text" data-key="1631"><span 
data-slate-leaf="true" data-offset-key="1631:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_5555864205" data-annotation-type="annotation"><span 
data-slate-string="true">09</span></span></span><span data-slate-leaf="true" data-offset-key="1631:1"><span 
data-slate-string="true">-Oct</span></span><span data-slate-leaf="true" data-offset-key="1631:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4458383747" 
data-annotation-type="annotation"><span data-slate-string="true">-2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1631:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2663124361" data-annotation-type="annotation"><span data-slate-string="true">22</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:5"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1631:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_3665550750" data-annotation-type="annotation"><span data-slate-string="true">03</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1631:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4739045973" data-annotation-type="annotation"><span data-slate-string="true">07.161</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:9"><span data-slate-string="true"> INFO [http-nio</span></span><span 
data-slate-leaf="true" data-offset-key="1631:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5508983971" data-annotation-type="annotation"><span data-slate-string="true">-8080</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:11"><span data-slate-string="true">-exec</span></span><span 
data-slate-leaf="true" data-offset-key="1631:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6207080398" data-annotation-type="annotation"><span data-slate-string="true">-1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1631:13"><span data-slate-string="true">] BookServlet.doGet 
Last category name: </span></span><span data-slate-leaf="true" data-offset-key="1631:14"><span 
class=" gkhl-literal" data-slate-object="annotation" data-annotation-key="gkann_4874294197" 
data-annotation-type="annotation"><span data-slate-string="true">null</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 179px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-f49a8a1b " data-slate-type="paragraph" data-slate-object="block" 
data-key="1632"> <span data-slate-object="text" data-key="1633"><span data-slate-leaf="true" 
data-offset-key="1633:0" data-first-offset="true"><span data-slate-string="true">这就是说，这次访问 
Session 里面的 lastCategoryName 是空。</span></span></span> </div> <div class="se-8092bb57 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1634"> <span data-slate-object="text" data-key="1635"><span 
data-slate-leaf="true" data-offset-key="1635:0" data-first-offset="true"><span data-slate-string="true">再来看看 
Chrome 开发者工具上的 Network 标签，请求被捕获，并可以看到这个请求的响应中，一个 Set-Cookie 的头，这说明服务器没有发现这个 Session，因此给这个浏览器用户创建了一个 
Session 对象，并且生成了一个标记用户身份的随机串（名为 JSESSIONID）传回：</span></span></span> </div> <div class="se-199aebb8" 
data-slate-type="image" data-slate-object="block" data-key="1636"> <img class="se-df8fa680" 
src="https://static001.geekbang.org/resource/image/c3/d1/c3f5d3e58c853b656d22d17c94909ed1.jpg"> 
</div> <div class="se-b1556946 " data-slate-type="paragraph" data-slate-object="block" data-key="1637"> 
<span data-slate-object="text" data-key="1638"><span data-slate-leaf="true" data-offset-key="1638:0" 
data-first-offset="true"><span data-slate-string="true">现在再访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1639" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="1640"><span data-slate-leaf="true" data-offset-key="1640:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=life</span></span></span></a><span 
data-slate-object="text" data-key="1641"><span data-slate-leaf="true" data-offset-key="1641:0" 
data-first-offset="true"><span data-slate-string="true">，注意这时 URL 中的 category 参数变了。命令行打印：</span></span></span> 
</div> <div class="se-fa3ed14c se-1fab9ad6" data-slate-type="pre" data-slate-object="block" 
data-key="1642" data-code-language="python"> <div class="se-b2a11bd4 se-2b23c92c"> <span></span> 
</div> <div class="se-fe28cd3d"> <div class="se-cd4ef3d0 se-f06d7892" data-code-line-number="1"></div> 
</div> <div class="se-f0ca2496 ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="1643"> <span data-slate-object="text" data-key="1644"><span 
data-slate-leaf="true" data-offset-key="1644:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_8242992224" data-annotation-type="annotation"><span 
data-slate-string="true">09</span></span></span><span data-slate-leaf="true" data-offset-key="1644:1"><span 
data-slate-string="true">-Oct</span></span><span data-slate-leaf="true" data-offset-key="1644:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_8585397982" 
data-annotation-type="annotation"><span data-slate-string="true">-2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1644:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7028286017" data-annotation-type="annotation"><span data-slate-string="true">22</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:5"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1644:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6207421696" data-annotation-type="annotation"><span data-slate-string="true">04</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1644:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5077819923" data-annotation-type="annotation"><span data-slate-string="true">25.977</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:9"><span data-slate-string="true"> INFO [http-nio</span></span><span 
data-slate-leaf="true" data-offset-key="1644:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0121850814" data-annotation-type="annotation"><span data-slate-string="true">-8080</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:11"><span data-slate-string="true">-</span></span><span 
data-slate-leaf="true" data-offset-key="1644:12"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6184537211" data-annotation-type="annotation"><span data-slate-string="true">exec</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:13"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8616188436" data-annotation-type="annotation"><span data-slate-string="true">-4</span></span></span><span 
data-slate-leaf="true" data-offset-key="1644:14"><span data-slate-string="true">] BookServlet.doGet 
Last category name: art</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; 
left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 181px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-b2f4e082 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1645"> <span data-slate-object="text" data-key="1646"><span 
data-slate-leaf="true" data-offset-key="1646:0" data-first-offset="true"><span data-slate-string="true">果然，我们把前一次存放的 
lastCategoryName 准确打印出来了。</span></span></span> </div> <div class="se-70fe0b02 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1647"> <span data-slate-object="text" data-key="1648"><span 
data-slate-leaf="true" data-offset-key="1648:0" data-first-offset="true"><span data-slate-string="true">我们还是回到开发者工具的 
Network 标签，这次可以看到，请求以 Cookie 头的形式，带上了这个服务器上次传回的 JSESSIONID，也就是因为它，服务器认出了这个“老用户”：</span></span></span> 
</div> <div class="se-f6bdddef" data-slate-type="image" data-slate-object="block" data-key="1649"> 
<img class="se-96935e93" src="https://static001.geekbang.org/resource/image/bf/c8/bf112247ae6dba84d351ee134c5dc8c8.jpg"> 
</div> <div class="se-4151693f " data-slate-type="paragraph" data-slate-object="block" data-key="1650"> 
<span data-slate-object="text" data-key="1651"><span data-slate-leaf="true" data-offset-key="1651:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们可以再访问几次这个 URL，在 Session 超时时间内，只有第一次的访问服务端会在响应的 
Set-Cookie 头部放置新生成的 JSESSIONID，而后续来自浏览器的所有请求，都会在 Cookie 头上带上这个 JSESSIONID 以证明自己的身份。</span></span></span> 
</div> <div class="se-226eb33f " data-slate-type="paragraph" data-slate-object="block" data-key="1652"> 
<span data-slate-object="text" data-key="1653"><span data-slate-leaf="true" data-offset-key="1653:0" 
data-first-offset="true"><span data-slate-string="true">用一张图来揭示这个过程吧：</span></span></span> 
</div> <div class="se-7224dbc3" data-slate-type="image" data-slate-object="block" data-key="1654"> 
<img class="se-f3111acd" src="https://static001.geekbang.org/resource/image/f2/1b/f2a27cf5c0259db3f47dc584ca007a1b.jpg"> 
</div> <div class="se-f99f28b2 " data-slate-type="paragraph" data-slate-object="block" data-key="1655"> 
<span data-slate-object="text" data-key="1656"><span data-slate-leaf="true" data-offset-key="1656:0" 
data-first-offset="true"><span data-slate-string="true">上图中，浏览器一开始携带的 JSESSIONID=123 已经在服务端过期，因此是一个无效的 
JSESSIONID，于是服务端通过 Set-Cookie 返回了一个新的 456。</span></span></span> </div> <div class="se-9f99add6 
" data-slate-type="paragraph" data-slate-object="block" data-key="1657"> <span data-slate-object="text" 
data-key="1658"><span data-slate-leaf="true" data-offset-key="1658:0" data-first-offset="true"><span 
data-slate-string="true">再联想到我们今天讲到负载分担，负载分担常常支持的一个重要特性被称为“Session Stickiness”，这指的就是，能够根据这个会话的随机串，将请求转发到相应的服务器上。这样，我们就能够保证在集群部署的环境下，来自于同一客户的的请求，可以落到同一服务器上，这实际上是许多业务能够正常进行的前提要求。</span></span></span> 
</div> <div class="se-8cf1ef9a " data-slate-type="paragraph" data-slate-object="block" data-key="1659"> 
<span data-slate-object="text" data-key="1660"><span data-slate-leaf="true" data-offset-key="1660:0" 
data-first-offset="true"><span class="se-50f8cb0e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Session Stickiness 其实是属于前面介绍的负载分担策略算法中的一部分，它是整个策略算法中的优先策略</span></span></span></span><span 
data-slate-object="text" data-key="1661"><span data-slate-leaf="true" data-offset-key="1661:0" 
data-first-offset="true"><span data-slate-string="true">，即在匹配 Cookie 能够匹配上的情况下，就使用这个策略来选择服务器；但是如果匹配不上，就意味着是一个新的用户，会按照前面介绍的一般策略算法来决定路由。另外，在一些特殊的项目中，我们可能会选择一些其它的优先策略，例如 
IP Stickiness，这就是说，使用源 IP 地址来作为优先策略选择服务器。</span></span></span> </div> <div class="se-bba8deaf 
" data-slate-type="paragraph" data-slate-object="block" data-key="1662"> <span data-slate-object="text" 
data-key="1663"><span data-slate-leaf="true" data-offset-key="1663:0" data-first-offset="true"><span 
data-slate-string="true">好，希望你已经完全理解了这套机制。</span></span></span> </div> <h2 class="se-8f632375" 
data-slate-type="heading" data-slate-object="block" data-key="1664"><span data-slate-object="text" 
data-key="1665"><span data-slate-leaf="true" data-offset-key="1665:0" data-first-offset="true"><span 
data-slate-string="true">扩展阅读</span></span></span></h2> <div class="se-351b1246" data-slate-type="list" 
data-slate-object="block" data-key="1666"> <div class="se-87a3c6d3 se-437a86a1" data-slate-type="list-line" 
data-slate-object="block" data-key="1667"> <span data-slate-object="text" data-key="1668"><span 
data-slate-leaf="true" data-offset-key="1668:0" data-first-offset="true"><span data-slate-string="true">【基础】如果你对于 
Cookie 还不太了解的话，建议你阅读 MDN </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1669" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="1670"><span 
data-slate-leaf="true" data-offset-key="1670:0" data-first-offset="true"><span data-slate-string="true">HTTP 
cookies</span></span></span></a><span data-slate-object="text" data-key="1671"><span data-slate-leaf="true" 
data-offset-key="1671:0" data-first-offset="true"><span data-slate-string="true"> 这篇简短的教程。</span></span></span> 
</div> <div class="se-d3e3a51a se-3ce68ff6" data-slate-type="list-line" data-slate-object="block" 
data-key="1672"> <span data-slate-object="text" data-key="1673"><span data-slate-leaf="true" 
data-offset-key="1673:0" data-first-offset="true"><span data-slate-string="true">对于文中介绍的六种部署策略，欢迎阅读 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1674" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="1675"><span data-slate-leaf="true" data-offset-key="1675:0" 
data-first-offset="true"><span data-slate-string="true">Six Strategies for Application Deployment</span></span></span></a><span 
data-slate-object="text" data-key="1676"><span data-slate-leaf="true" data-offset-key="1676:0" 
data-first-offset="true"><span data-slate-string="true"> 这篇文章，它对于每一种策略都有详细解读，且带有动画图示。如果需要中文译文，你可以看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1677" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="1678"><span data-slate-leaf="true" data-offset-key="1678:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="1679"><span data-slate-leaf="true" data-offset-key="1679:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-f2841ad7" data-slate-type="image" 
data-slate-object="block" data-key="1680"> <img class="se-89196f3e" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 1 msec}
2020-11-19 11:10:23.788 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.789 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:23.789 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.790 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:10:23.791 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755423, 1605755423, 1, 'zh-hans', 0, 1, 1, 
0, '29丨Ops三部曲之二：集群部署', 1, 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.794 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=17 
 {executed in 0 msec}
2020-11-19 11:10:23.795 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:23.796 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755423, 1605755423, 1, 'zh-hans', 0, 
1, 1, 0, '29丨Ops三部曲之二：集群部署', 'book', 1, 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.800 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.800 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:23.801 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.801 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:23.803 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/09754f8636e5e7e21aefc4e895b46df1?bkt=en-29a7ad5d1913bc6f651eecbb06d66a7f16de9c54ef04678ce943354976d083f4195330d91f41a787&fid=3757516097-778750-1032267930815298&time=1605755422&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Z0QYTux536RrTCS3G1sU7FqMA3s%3D&to=92&size=15687804&sta_dx=15687804&sta_cs=3292&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074472&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15687804&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-99e32d8ec41dd2dbc04852b3a6898a1cc653c5d86ec4725ee0f2e7560da4ff7af2e29a39c16428f8&sl=76480590&expires=8h&rt=pr&r=594697649&mlogid=7502078979419166141&vbdid=2247232042&fin=29%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%BA%8C%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.m4a&bflag=92,34-92&rtype=1&dp-logid=7502078979419166141&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b22ca85d5d66ac041d5fca31a0ca80602&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=29%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%BA%8C%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.m4a', 
17, 17) 
 {executed in 1 msec}
2020-11-19 11:10:23.806 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.807 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:23.808 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/09754f8636e5e7e21aefc4e895b46df1?bkt=en-29a7ad5d1913bc6f651eecbb06d66a7f16de9c54ef04678ce943354976d083f4195330d91f41a787&fid=3757516097-778750-1032267930815298&time=1605755422&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-Z0QYTux536RrTCS3G1sU7FqMA3s%3D&to=92&size=15687804&sta_dx=15687804&sta_cs=3292&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074472&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15687804&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-99e32d8ec41dd2dbc04852b3a6898a1cc653c5d86ec4725ee0f2e7560da4ff7af2e29a39c16428f8&sl=76480590&expires=8h&rt=pr&r=594697649&mlogid=7502078979419166141&vbdid=2247232042&fin=29%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%BA%8C%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.m4a&bflag=92,34-92&rtype=1&dp-logid=7502078979419166141&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8b22ca85d5d66ac041d5fca31a0ca80602&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=29%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%BA%8C%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.m4a', 
17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.811 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=17 
 {executed in 1 msec}
2020-11-19 11:10:23.811 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:23.812 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.812 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:23.813 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-18 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 准备去看看&lt;六种部署策略&gt;，然后找寻合适的方式部署一套试试；通过实践检验学习的效果。 
</div> <!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.816 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.816 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:23.817 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-18 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 准备去看看&lt;六种部署策略&gt;，然后找寻合适的方式部署一套试试；通过实践检验学习的效果。 
</div> <!----> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.820 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.821 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:23.821 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.822 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:23.823 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 17, 'https://static001.geekbang.org/resource/image/a1/37/a17f7efcd77a23e6b74759abe96f4237.jpg', 
17) 
 {executed in 0 msec}
2020-11-19 11:10:23.825 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.825 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:23.826 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 17, 'https://static001.geekbang.org/resource/image/a1/37/a17f7efcd77a23e6b74759abe96f4237.jpg', 
17) 
 {executed in 0 msec}
2020-11-19 11:10:23.829 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.829 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:23.830 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:23.833 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=17 
 {executed in 0 msec}
2020-11-19 11:10:23.833 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:23.834 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 17, 17) 
 {executed in 0 msec}
2020-11-19 11:10:54.666 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='54018425455518' 
 {executed in 1 msec}
2020-11-19 11:10:54.667 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.669 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755454, 1) 
 {executed in 0 msec}
2020-11-19 11:10:54.670 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755454, 1) 
 {executed in 0 msec}
2020-11-19 11:10:54.671 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|18            |
|--------------|

2020-11-19 11:10:54.694 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'e9f182e0-760f-4b56-93e9-692f90c258bf', 
18) 
 {executed in 1 msec}
2020-11-19 11:10:54.694 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'e9f182e0-760f-4b56-93e9-692f90c258bf', 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.695 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|18            |
|--------------|

2020-11-19 11:10:54.701 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=18, revision_default=1, revision_timestamp=1605755454, 
revision_uid=1 where vid=18 
 {executed in 0 msec}
2020-11-19 11:10:54.708 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 11:10:54.708 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.710 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '54018425455518', 'zh-hans', 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.714 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.715 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.716 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '54018425455518', 'zh-hans', 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.721 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=18 
 {executed in 1 msec}
2020-11-19 11:10:54.721 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:54.722 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=18 
 {executed in 0 msec}
2020-11-19 11:10:54.722 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:54.724 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 12, 18, 0, 0, 12, 0, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.729 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.730 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.731 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.731 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.738 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="469" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-7c445dec " data-slate-type="paragraph" data-slate-object="block" 
data-key="470"> <span data-slate-object="text" data-key="471"><span data-slate-leaf="true" 
data-offset-key="471:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-f47234b6 " data-slate-type="paragraph" data-slate-object="block" data-key="472"> 
<span data-slate-object="text" data-key="473"><span data-slate-leaf="true" data-offset-key="473:0" 
data-first-offset="true"><span data-slate-string="true">欢迎进入第五章：寻找最佳实践。本章我们会讲到 Ops，由于 Ops 的范围实在太广了，因此从今天开始，接连三讲，我们会讨论 
Ops 的三个常见话题，今天要谈的就是其中的第一个——配置管理。</span></span></span> </div> <div class="se-751d8d7e " data-slate-type="paragraph" 
data-slate-object="block" data-key="474"> <span data-slate-object="text" data-key="475"><span 
data-slate-leaf="true" data-offset-key="475:0" data-first-offset="true"><span data-slate-string="true">我们总在谈论 
Ops，所谓 Ops，指的就是 Operations，如果你专门去搜索，你恐怕也很难找到一个准确的定义。在中文翻译上看，“运维”这个词用得比较多，但是我认为 Ops 的含义明显更为广泛。我的理解是，和实际的软件开发和质量保证相对应的，环境搭建、配置管理、自动化流程、部署发布，等等的实践活动，无论线上还是线下，无论它们是在开发测试环节还是产品发布环节，都可以算作 
Ops。</span></span></span> </div> <div class="se-c308d0bf " data-slate-type="paragraph" data-slate-object="block" 
data-key="476"> <span data-slate-object="text" data-key="477"><span data-slate-leaf="true" 
data-offset-key="477:0" data-first-offset="true"><span data-slate-string="true">当然，</span></span></span><span 
data-slate-object="text" data-key="478"><span data-slate-leaf="true" data-offset-key="478:0" 
data-first-offset="true"><span class="se-e90c6178" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们并不需要执着去找出 Ops 和开发、测试的分界线，它们实际是互有重叠的</span></span></span></span><span 
data-slate-object="text" data-key="479"><span data-slate-leaf="true" data-offset-key="479:0" 
data-first-offset="true"><span data-slate-string="true">，我觉得</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="480" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" data-first-offset="true"><span 
data-slate-string="true">维基百科</span></span></span></a><span data-slate-object="text" data-key="482"><span 
data-slate-leaf="true" data-offset-key="482:0" data-first-offset="true"><span data-slate-string="true">上的这张图就很好地展示了这一点。</span></span></span> 
</div> <div class="se-429a153d" data-slate-type="image" data-slate-object="block" data-key="483"> 
<img class="se-a2dffea2" src="https://static001.geekbang.org/resource/image/e0/46/e01e10d70ba403368ee9f9973d87f646.jpg"> 
</div> <div class="se-be60ef44 " data-slate-type="paragraph" data-slate-object="block" data-key="484"> 
<span data-slate-object="text" data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" 
data-first-offset="true"><span data-slate-string="true">我想很多程序员不喜欢 Ops，也不愿意谈 Ops，这都可以理解，毕竟，和开发本身比起来，它没有那么多的创造性，有时甚至属于“重要但无趣”的工作。但是，我必须要强调的是，不只对于全栈工程师而言，Ops 
能力对于每一个通常意义上的软件工程师来说，都是必须要锻炼的重要方面。</span></span></span> </div> <div class="se-d8dc43cb " data-slate-type="paragraph" 
data-slate-object="block" data-key="486"> <span data-slate-object="text" data-key="487"><span 
data-slate-leaf="true" data-offset-key="487:0" data-first-offset="true"><span data-slate-string="true">需要明确的是，我今天要讲的配置管理，我认为就是 
Ops 的一个重要部分，它关注的是软件代码以各种形式，在项目的各个阶段存在的配置。几乎每个做运维的人都要经常去修改大量的线上配置，无论是来自操作系统还是应用本身。这个话题很少有人谈及，但却存在于每个程序员的日常工作中。</span></span></span> 
</div> <h2 class="se-d739434d" data-slate-type="heading" data-slate-object="block" data-key="488"><span 
data-slate-object="text" data-key="489"><span data-slate-leaf="true" data-offset-key="489:0" 
data-first-offset="true"><span data-slate-string="true">常见的配置方式</span></span></span></h2> <div 
class="se-519d93c5 " data-slate-type="paragraph" data-slate-object="block" data-key="490"> 
<span data-slate-object="text" data-key="491"><span data-slate-leaf="true" data-offset-key="491:0" 
data-first-offset="true"><span data-slate-string="true">在实际的项目开发过程中，当我们讲到“配置”的时候，其实隐含了许多不同的方式，这些方式有时候看起来差不多，实际却有着最适合的场景。</span></span></span> 
</div> <h3 class="se-60106104" data-slate-type="heading" data-slate-object="block" data-key="492"><span 
data-slate-object="text" data-key="493"><span data-slate-leaf="true" data-offset-key="493:0" 
data-first-offset="true"><span data-slate-string="true">1. 源代码中的常量</span></span></span></h3> 
<div class="se-39266ad0 " data-slate-type="paragraph" data-slate-object="block" data-key="494"> 
<span data-slate-object="text" data-key="495"><span data-slate-leaf="true" data-offset-key="495:0" 
data-first-offset="true"><span data-slate-string="true">代码常量是一种最典型的配置方式，它的特点是定义和使用方便，且只对开发人员友好。每次变更的时候，都需要改动代码，经过一定的测试和 
Code Review，之后还要通过指定流程的部署，才能发布到产品线上。</span></span></span> </div> <div class="se-913cab61 " 
data-slate-type="paragraph" data-slate-object="block" data-key="496"> <span data-slate-object="text" 
data-key="497"><span data-slate-leaf="true" data-offset-key="497:0" data-first-offset="true"><span 
data-slate-string="true">通常来说，项目中常量类的定义有着明确的规约，比如这样的示例代码：</span></span></span> </div> <div 
class="se-9acc28e4 se-58673698" data-slate-type="pre" data-slate-object="block" data-key="498" 
data-code-language="java"> <div class="se-254cde80 se-82c4a47f"> <span></span> </div> <div 
class="se-b28eba73"> <div class="se-22bcf254 se-6d26bdd7" data-code-line-number="1"></div> 
<div class="se-22bcf254 se-6d26bdd7" data-code-line-number="2"></div> <div class="se-22bcf254 
se-6d26bdd7" data-code-line-number="3"></div> <div class="se-22bcf254 se-6d26bdd7" data-code-line-number="4"></div> 
<div class="se-22bcf254 se-6d26bdd7" data-code-line-number="5"></div> <div class="se-22bcf254 
se-6d26bdd7" data-code-line-number="6"></div> </div> <div class="se-c0e88030 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="499"> <span data-slate-object="text" 
data-key="500"><span data-slate-leaf="true" data-offset-key="500:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2100571104" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="500:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="500:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1009464841" data-annotation-type="annotation"><span data-slate-string="true">final</span></span></span><span 
data-slate-leaf="true" data-offset-key="500:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="500:4"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9530739186" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="500:5"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="500:6"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_2891316556" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span 
data-slate-string="true">ProductConstants</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="500:7"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="500:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="501"> <span data-slate-object="text" data-key="502"><span data-slate-leaf="true" 
data-offset-key="502:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="502:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4310905364" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span></span><span data-slate-leaf="true" data-offset-key="502:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2650010480" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="502:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_8423748270" data-annotation-type="annotation"><span 
data-slate-string="true">ProductConstants</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="502:4"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_3715107261" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="502:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="502:6"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="503"> <span data-slate-object="text" data-key="504"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="505"> <span data-slate-object="text" 
data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="506:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5452967867" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="506:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7071598006" data-annotation-type="annotation"><span data-slate-string="true">static</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="506:5"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7271421481" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:6"><span data-slate-string="true"> MAX_NUMBER = 
</span></span><span data-slate-leaf="true" data-offset-key="506:7"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_6793557729" data-annotation-type="annotation"><span 
data-slate-string="true">9999</span></span></span><span data-slate-leaf="true" data-offset-key="506:8"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="507"> <span data-slate-object="text" 
data-key="508"><span data-slate-leaf="true" data-offset-key="508:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="508:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8549005875" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="508:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="508:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9138265515" data-annotation-type="annotation"><span data-slate-string="true">static</span></span></span><span 
data-slate-leaf="true" data-offset-key="508:4"><span data-slate-string="true"> String DEFAULT_CODE 
= </span></span><span data-slate-leaf="true" data-offset-key="508:5"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_4050007556" data-annotation-type="annotation"><span 
data-slate-string="true">"123"</span></span></span><span data-slate-leaf="true" data-offset-key="508:6"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="509"> <span data-slate-object="text" 
data-key="510"><span data-slate-leaf="true" data-offset-key="510:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-fc4283f9 " data-slate-type="paragraph" 
data-slate-object="block" data-key="511"> <span data-slate-object="text" data-key="512"><span 
data-slate-leaf="true" data-offset-key="512:0" data-first-offset="true"><span data-slate-string="true">你看，上面的常量类包含的要点有：</span></span></span> 
</div> <div class="se-95b188cf" data-slate-type="list" data-slate-object="block" data-key="513"> 
<div class="se-c9008619 se-167efa30" data-slate-type="list-line" data-slate-object="block" 
data-key="514"> <span data-slate-object="text" data-key="515"><span data-slate-leaf="true" 
data-offset-key="515:0" data-first-offset="true"><span data-slate-string="true">类名直白且具体，这个 
Product 修饰很重要，避免了过于一般化的常量类定义，从而限制了它的职责范围；而这个 Constants 则说明了类的属性，一眼就知道它是干什么的。</span></span></span> 
</div> <div class="se-43fea91e se-2b8debe7" data-slate-type="list-line" data-slate-object="block" 
data-key="516"> <span data-slate-object="text" data-key="517"><span data-slate-leaf="true" 
data-offset-key="517:0" data-first-offset="true"><span data-slate-string="true">被定义为无法实例化的（即将构造器私有化），无法被继承的（即使用 
final 修饰）。</span></span></span> </div> <div class="se-fdf0e9cc se-b81e20aa" data-slate-type="list-line" 
data-slate-object="block" data-key="518"> <span data-slate-object="text" data-key="519"><span 
data-slate-leaf="true" data-offset-key="519:0" data-first-offset="true"><span data-slate-string="true">常量都使用 
public static 修饰，这样就可以直接访问，而不需要实例化这个类。</span></span></span> </div> </div> <div class="se-54f272b0 
" data-slate-type="paragraph" data-slate-object="block" data-key="520"> <span data-slate-object="text" 
data-key="521"><span data-slate-leaf="true" data-offset-key="521:0" data-first-offset="true"><span 
data-slate-string="true">值得一提的是，在我参与过的项目中，有的程序员为了强制编码的时候只能定义 static 属性来表示常量，会使用 interface 这样的方式，即使用接口来存放常量。效果自然是能达到的，但是这个方法有些投机取巧（毕竟和 
interface 关键字所应该表示的含义有明显偏差了），我认为这是一种反模式。</span></span></span> </div> <h3 class="se-d74a5e86" 
data-slate-type="heading" data-slate-object="block" data-key="522"><span data-slate-object="text" 
data-key="523"><span data-slate-leaf="true" data-offset-key="523:0" data-first-offset="true"><span 
data-slate-string="true">2. 代码中的配置文件</span></span></span></h3> <div class="se-06f53dc8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="524"> <span data-slate-object="text" data-key="525"><span 
data-slate-leaf="true" data-offset-key="525:0" data-first-offset="true"><span data-slate-string="true">代码中的配置文件也很常见，它们从 
Java、Python 这样的编程语言中脱离出来，但是依然作为源代码的一部分而存在。那为什么要这样做呢？</span></span></span> </div> <div class="se-6ebc3b76 
" data-slate-type="paragraph" data-slate-object="block" data-key="526"> <span data-slate-object="text" 
data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" data-first-offset="true"><span 
data-slate-string="true">简单来说，就是为了“解耦”。</span></span></span> </div> <div class="se-79eeb1ad 
" data-slate-type="paragraph" data-slate-object="block" data-key="528"> <span data-slate-object="text" 
data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" data-first-offset="true"><span 
data-slate-string="true">而就是这个“解耦”，带来了诸多好处。例如最小职责，单一职责，即配置文件做且只能做配置；再例如可以将同一类的资源放在更合适的地方统一管理了。</span></span></span> 
</div> <div class="se-8b368b84 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">举例来说：</span></span></span> </div> <div 
class="se-1aa3f69a se-204902aa" data-slate-type="pre" data-slate-object="block" data-key="532"> 
<div class="se-8ed26294 se-9cac819e"> <span></span> </div> <div class="se-25531df9"> <div class="se-a3a08d9b 
se-45ee6528" data-code-line-number="1"></div> <div class="se-a3a08d9b se-45ee6528" data-code-line-number="2"></div> 
<div class="se-a3a08d9b se-45ee6528" data-code-line-number="3"></div> </div> <div class="se-43c46b2d 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="533"> <span data-slate-object="text" data-key="534"><span data-slate-leaf="true" 
data-offset-key="534:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_en_US.properties</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="535"> <span data-slate-object="text" data-key="536"><span data-slate-leaf="true" 
data-offset-key="536:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_fr_CN.properties</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="537"> <span data-slate-object="text" data-key="538"><span data-slate-leaf="true" 
data-offset-key="538:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_de_DE.properties</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-2ca4f2df " data-slate-type="paragraph" data-slate-object="block" data-key="539"> 
<span data-slate-object="text" data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" 
data-first-offset="true"><span data-slate-string="true">你看，这样的 i18n（Internationalization）的特定语言的资源文件，就从编程语言的代码中独立出来了，更容易统一管理和维护。</span></span></span> 
</div> <div class="se-6fc1b6c4 " data-slate-type="paragraph" data-slate-object="block" data-key="541"> 
<span data-slate-object="text" data-key="542"><span data-slate-leaf="true" data-offset-key="542:0" 
data-first-offset="true"><span data-slate-string="true">这种把相关代码或配置单独拿出来的方式，不知道你能否联想到我们在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="543" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="544"><span data-slate-leaf="true" data-offset-key="544:0" 
data-first-offset="true"><span data-slate-string="true">[第 10 讲]</span></span></span></a><span 
data-slate-object="text" data-key="545"><span data-slate-leaf="true" data-offset-key="545:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的 MVC 控制器各个子功能的配置方式，当时不但讨论了横向和纵向两种实现形式，还讨论了各自的优劣，如果忘记了的话，你可以阅读回顾一下。比如 
URL 映射，既可以通过注解的方式，和实际的 Controller 代码放在一起；也可以通过 XML 配置的方式，从 Java 代码中拿出去。</span></span></span> 
</div> <h3 class="se-f61e1914" data-slate-type="heading" data-slate-object="block" data-key="546"><span 
data-slate-object="text" data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" 
data-first-offset="true"><span data-slate-string="true">3. 环境配置文件和环境变量</span></span></span></h3> 
<div class="se-2d9892c9 " data-slate-type="paragraph" data-slate-object="block" data-key="548"> 
<span data-slate-object="text" data-key="549"><span data-slate-leaf="true" data-offset-key="549:0" 
data-first-offset="true"><span data-slate-string="true">接着我们来讲讲环境下的配置。这里的“环境”（Environment），指的是代码部署的环境，可以是用于开发的笔记本电脑，也可以是生产线上的机器。对于不同的环境，虽说代码是同一份，但是可以通过不同的环境配置文件和环境变量，让代码执行不同的逻辑。</span></span></span> 
</div> <div class="se-fe515044 " data-slate-type="paragraph" data-slate-object="block" data-key="550"> 
<span data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">举一个环境配置文件的例子，例如环境下有这样一个文件，定义了这个环境所属的“地区”，而通过这个地区，可以从代码中寻找到相应正确的配置文件来读取配置：</span></span></span> 
</div> <div class="se-0f1aea82 se-23942d90" data-slate-type="pre" data-slate-object="block" 
data-key="552"> <div class="se-f6ebcd43 se-0cf71c87"> <span></span> </div> <div class="se-37c87ff7"> 
<div class="se-4441f34e se-11bb7924" data-code-line-number="1"></div> </div> <div class="se-7ad9b240 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="553"> <span data-slate-object="text" data-key="554"><span data-slate-leaf="true" 
data-offset-key="554:0" data-first-offset="true"><span data-slate-string="true">/etc/region</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d18b4a4a " data-slate-type="paragraph" data-slate-object="block" data-key="555"> 
<span data-slate-object="text" data-key="556"><span data-slate-leaf="true" data-offset-key="556:0" 
data-first-offset="true"><span data-slate-string="true">在某些系统中，这样的配置可以通过一个 web 工具指定，并通过一定的部署工具将其同步到目标环境中去。</span></span></span> 
</div> <div class="se-c59dd819 " data-slate-type="paragraph" data-slate-object="block" data-key="557"> 
<span data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">还有一种类似的方式是环境变量，环境变量和环境配置文件，有时允许同时存在，但是有一定的优先级顺序。比如说，如果环境变量使用 
REGION 也指定了上述文件中的 region，发生了冲突，这就要根据优先级的关系来决定使用哪一个配置，通常来说，环境变量比环境配置文件优先级更高。</span></span></span> 
</div> <div class="se-1c2e8992 " data-slate-type="paragraph" data-slate-object="block" data-key="559"> 
<span data-slate-object="text" data-key="560"><span data-slate-leaf="true" data-offset-key="560:0" 
data-first-offset="true"><span data-slate-string="true">那为什么要允许配置不同方式的覆写呢？这是为了给应用的部署赋予灵活性，举例来说，/etc/region 
已经确定了值为 EU（欧洲），那么如果需要在该物理机器上部署两份环境 ，第二份就可以通过环境变量 REGION 强制指定为 NA（北美）。</span></span></span> 
</div> <h3 class="se-003b06da" data-slate-type="heading" data-slate-object="block" data-key="561"><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span data-slate-string="true">4. 运行参数</span></span></span></h3> <div 
class="se-cc243266 " data-slate-type="paragraph" data-slate-object="block" data-key="563"> 
<span data-slate-object="text" data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" 
data-first-offset="true"><span data-slate-string="true">运行参数，可以说是最为具体的一种配置方式，真正做到了应用级别，即一个应用可以配置一个参数。这种情况其实对于开发人员来说非常熟悉，比如在项目中应用 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="565" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">log4j2</span></span></span></a><span 
data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true"> 这个日志工具时，启动应用的 java 命令上，增加如下参数：</span></span></span> 
</div> <div class="se-ec356164 se-019bff61" data-slate-type="pre" data-slate-object="block" 
data-key="568"> <div class="se-aee5b8ca se-6638c204"> <span></span> </div> <div class="se-f1531f9e"> 
<div class="se-cc879dbb se-5f0772ef" data-code-line-number="1"></div> </div> <div class="se-0814ca9b 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="569"> <span data-slate-object="text" data-key="570"><span data-slate-leaf="true" 
data-offset-key="570:0" data-first-offset="true"><span data-slate-string="true">-Dlog4j.configurationFile=xxx/log4j2.xml</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-554db12a " data-slate-type="paragraph" data-slate-object="block" data-key="571"> 
<span data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">通过这样的运行参数指定的方式，指定 log4j2 配置文件的位置。</span></span></span> 
</div> <div class="se-cda747a3 " data-slate-type="paragraph" data-slate-object="block" data-key="573"> 
<span data-slate-object="text" data-key="574"><span data-slate-leaf="true" data-offset-key="574:0" 
data-first-offset="true"><span data-slate-string="true">当然，也可以通过规约优于配置的方式，不显式指定位置，而在 classpath 
中放置一个名为 log4j2.component.properties 的文件，里面指定类似的配置，而 log4j2 在系统启动的时候可以自动加载。</span></span></span> 
</div> <h3 class="se-7866143e" data-slate-type="heading" data-slate-object="block" data-key="575"><span 
data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">5. 配置管理服务</span></span></span></h3> 
<div class="se-907323dd " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">常见的配置方式中，我们最后来讲一下配置管理服务。尤其对一个较大的系统来说，配置管理是从整个系统的层面上抽取并统一管理配置项的方式。通常来说，这样的配置管理系统会被包装成一个服务，当然，也有少数是单纯放到数据库的某张表里，不过这种数据库访问层面的耦合通常并不推荐。</span></span></span> 
</div> <div class="se-df32ab84 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">一旦配置管理成为了独立的服务，就说明这个系统已经复杂到一定程度了，通常也意味着这个服务的用户，不再只是开发人员了，往往还有运维人员，甚至是一些非技术的管理人员。</span></span></span> 
</div> <h2 class="se-fc9c1dbe" data-slate-type="heading" data-slate-object="block" data-key="581"><span 
data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span data-slate-string="true">配置的层级关系</span></span></span></h2> <div 
class="se-124e9d92 " data-slate-type="paragraph" data-slate-object="block" data-key="583"> 
<span data-slate-object="text" data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" 
data-first-offset="true"><span data-slate-string="true">资源文件，本质上也算是代码的一部分，</span></span></span><span 
data-slate-object="text" data-key="585"><span data-slate-leaf="true" data-offset-key="585:0" 
data-first-offset="true"><span class="se-93e4e3e8" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过合理的设计，可以让资源文件具备编程语言代码一般的继承关系。</span></span></span></span><span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
data-slate-string="true">比如这样的配置文件组织结构：</span></span></span> </div> <div class="se-62ce11e9 
se-4c297c3e" data-slate-type="pre" data-slate-object="block" data-key="587"> <div class="se-cc970ffb 
se-24c66ac8"> <span></span> </div> <div class="se-5c6ad1a8"> <div class="se-1217f3a2 se-154a44d1" 
data-code-line-number="1"></div> <div class="se-1217f3a2 se-154a44d1" data-code-line-number="2"></div> 
<div class="se-1217f3a2 se-154a44d1" data-code-line-number="3"></div> <div class="se-1217f3a2 
se-154a44d1" data-code-line-number="4"></div> </div> <div class="se-4c6fad39 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="588"> <span data-slate-object="text" 
data-key="589"><span data-slate-leaf="true" data-offset-key="589:0" data-first-offset="true"><span 
data-slate-string="true">conf/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="590"> <span data-slate-object="text" 
data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" data-first-offset="true"><span 
data-slate-string="true">conf/CN/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="592"> <span data-slate-object="text" 
data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span 
data-slate-string="true">conf/CN/Zhejiang/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="594"> <span data-slate-object="text" 
data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" data-first-offset="true"><span 
data-slate-string="true">conf/US/rules.conf</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-722fb238 
" data-slate-type="paragraph" data-slate-object="block" data-key="596"> <span data-slate-object="text" 
data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" data-first-offset="true"><span 
data-slate-string="true">conf 目录下，rules.conf 文件就像是基类，存放了默认的规则配置；下面的 CN 目录下的 rules.conf 则存放了中国区的增量配置，就像是子类，里面的配置项优先级高于“基类”的配置，起到一个有选择性地覆写的作用；而再下面的 
Zhejiang 目录下的 rulels.conf 则表示浙江省的规则配置，优先级更高。</span></span></span> </div> <div class="se-c933f5c2 
" data-slate-type="paragraph" data-slate-object="block" data-key="598"> <span data-slate-object="text" 
data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" data-first-offset="true"><span 
data-slate-string="true">在这种方式下，配置代码不但清晰易懂，而且减少了重复，易于维护。</span></span></span> </div> <h2 class="se-fcdee04c" 
data-slate-type="heading" data-slate-object="block" data-key="600"><span data-slate-object="text" 
data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" data-first-offset="true"><span 
data-slate-string="true">规约优于配置</span></span></span></h2> <div class="se-ab587da4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="602"> <span data-slate-object="text" data-key="603"><span 
data-slate-leaf="true" data-offset-key="603:0" data-first-offset="true"><span data-slate-string="true">不知道你是否还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="604" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">[第 10 讲]</span></span></span></a><span 
data-slate-object="text" data-key="606"><span data-slate-leaf="true" data-offset-key="606:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍过的“终极偷懒大法”——规约优于配置（CoC，Convention 
over Configuration）。在这种方式下，系统和配置的用户会建立“隐性的契约”，通过遵从一定的规则，比如命名规则，达到自动应用配置的目的。</span></span></span> 
</div> <div class="se-cd4147e5 " data-slate-type="paragraph" data-slate-object="block" data-key="607"> 
<span data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true">当时我们举了一个 Spring 的 ControllerClassNameHandlerMapping 
的例子来说明，现在我们来举另外一个 Grails 的例子。这里使用 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="609" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="610"><span 
data-slate-leaf="true" data-offset-key="610:0" data-first-offset="true"><span data-slate-string="true">Grails</span></span></span></a><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true"> 举例，是因为 Grails 是我接触过的应用 CoC 原则应用得最好的 
Web 应用框架了，使用它搭建起一个 Web 应用极其简洁。如果你使用过 Spring Boot 并对它印象还不错的话，你可以尝试这个将快速和简洁履行得更为彻底的 Grails。</span></span></span> 
</div> <div class="se-6147a3e0 se-afbb38eb" data-slate-type="pre" data-slate-object="block" 
data-key="612" data-code-language="cpp"> <div class="se-681b6150 se-ffb21ca3"> <span></span> 
</div> <div class="se-4f2ace7d"> <div class="se-b880931a se-ed9581be" data-code-line-number="1"></div> 
<div class="se-b880931a se-ed9581be" data-code-line-number="2"></div> <div class="se-b880931a 
se-ed9581be" data-code-line-number="3"></div> </div> <div class="se-6cdfc62a ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="613"> <span data-slate-object="text" 
data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9152504231" 
data-annotation-type="annotation"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="614:1"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="614:2"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6551447807" data-annotation-type="annotation"><span 
data-slate-string="true">BooksController</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="614:3"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5204220137" 
data-annotation-type="annotation"><span data-slate-string="true"> {</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="615"> <span data-slate-object="text" data-key="616"><span data-slate-leaf="true" 
data-offset-key="616:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="616:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8277164673" data-annotation-type="annotation"><span data-slate-string="true">def 
index() </span></span></span><span data-slate-leaf="true" data-offset-key="616:2"><span data-slate-string="true">{ 
... }</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="617"> <span data-slate-object="text" data-key="618"><span 
data-slate-leaf="true" data-offset-key="618:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-38472531 " data-slate-type="paragraph" data-slate-object="block" data-key="619"> 
<span data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span data-slate-string="true">你看，如此简单的控制器定义，就可以自动把路径为 /books 的请求映射到 
index 方法上，通过规约将 BooksController 映射到 /books 上，而 index 又代表了默认的 GET 方法的访问。</span></span></span> 
</div> <h2 class="se-ade9125b" data-slate-type="heading" data-slate-object="block" data-key="621"><span 
data-slate-object="text" data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" 
data-first-offset="true"><span data-slate-string="true">配置模板</span></span></span></h2> <div 
class="se-6aa0daac " data-slate-type="paragraph" data-slate-object="block" data-key="623"> 
<span data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">对于某些复杂或灵活的软件系统来说，配置会变成实际上的 DSL（Domain 
Specific Language），复杂程度可以不亚于一门编程语言写的代码。于是，有一种常见的帮助使用者理解和修改配置的方法就出现了，它就是创建配置模板，写好足量的配置默认值和配置说明，这样使用者就可以复制一份模板，并在其之上按需修改，比如 
Nginx 的配置模板。</span></span></span> </div> <div class="se-474c5833 " data-slate-type="paragraph" 
data-slate-object="block" data-key="625"> <span data-slate-object="text" data-key="626"><span 
data-slate-leaf="true" data-offset-key="626:0" data-first-offset="true"><span data-slate-string="true">Nginx 
是一个高性能的反向代理服务器，反向代理可以挡在 Web 服务器前面响应用户的请求，根据不同的规则来处理请求，比如认证、限流、映射到其它路径，访问特定的服务器等等，将这些复杂的访问逻辑和服务器节点都隐藏起来，给用户提供一个单一的 
IP 地址。</span></span></span> </div> <div class="se-1ece2eee " data-slate-type="paragraph" data-slate-object="block" 
data-key="627"> <span data-slate-object="text" data-key="628"><span data-slate-leaf="true" 
data-offset-key="628:0" data-first-offset="true"><span data-slate-string="true">下面我们来动动手，亲自配置一下 
Nginx 并让它工作起来。</span></span></span> </div> <div class="se-3c9444e8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="629"> <span data-slate-object="text" data-key="630"><span 
data-slate-leaf="true" data-offset-key="630:0" data-first-offset="true"><span data-slate-string="true">在 
Mac 上你可以使用 brew 来安装 Nginx，或者去官网上</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="631" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="632"><span 
data-slate-leaf="true" data-offset-key="632:0" data-first-offset="true"><span data-slate-string="true">找一个适合的版本</span></span></span></a><span 
data-slate-object="text" data-key="633"><span data-slate-leaf="true" data-offset-key="633:0" 
data-first-offset="true"><span data-slate-string="true">下载安装：</span></span></span> </div> <div 
class="se-2ef5a1a7 se-a64835a9" data-slate-type="pre" data-slate-object="block" data-key="634" 
data-code-language="sql"> <div class="se-97d80a8f se-8fd01a22"> <span></span> </div> <div class="se-5286fb4f"> 
<div class="se-ca44555a se-f35714ea" data-code-line-number="1"></div> </div> <div class="se-4de3b32c 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="635"> <span data-slate-object="text" data-key="636"><span data-slate-leaf="true" 
data-offset-key="636:0" data-first-offset="true"><span data-slate-string="true">brew </span></span><span 
data-slate-leaf="true" data-offset-key="636:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5026739347" data-annotation-type="annotation"><span data-slate-string="true">install</span></span></span><span 
data-slate-leaf="true" data-offset-key="636:2"><span data-slate-string="true"> nginx</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d4f797bc " data-slate-type="paragraph" data-slate-object="block" data-key="637"> 
<span data-slate-object="text" data-key="638"><span data-slate-leaf="true" data-offset-key="638:0" 
data-first-offset="true"><span data-slate-string="true">在安装成功以后，你应该能看到命令行输出了默认 Nginx 配置文件的位置，例如 
/usr/local/etc/nginx/nginx.conf。现在打开看一下，你会发现它本质上就是一个配置模板，有些配置选项为了便于程序员理解和使用，使用注释包围起来了。在同一路径下，还有一个 
nginx.conf.default 作为备份和参考。</span></span></span> </div> <div class="se-b451c878 " data-slate-type="paragraph" 
data-slate-object="block" data-key="639"> <span data-slate-object="text" data-key="640"><span 
data-slate-leaf="true" data-offset-key="640:0" data-first-offset="true"><span data-slate-string="true">还记得在我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="641" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="642"><span data-slate-leaf="true" data-offset-key="642:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true"> 中自己动手配置的过滤器吗？确认一下它还能正确运行：</span></span></span> 
</div> <div class="se-c0db9a68 se-b6a46483" data-slate-type="pre" data-slate-object="block" 
data-key="644"> <div class="se-4b8314bb se-c2957318"> <span></span> </div> <div class="se-e6ebb743"> 
<div class="se-ec228a2c se-4fd554f0" data-code-line-number="1"></div> </div> <div class="se-80c2fa69 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="645"> <span data-slate-object="text" data-key="646"><span data-slate-leaf="true" 
data-offset-key="646:0" data-first-offset="true"><span data-slate-string="true">catalina run</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0148ccaa " data-slate-type="paragraph" data-slate-object="block" data-key="647"> 
<span data-slate-object="text" data-key="648"><span data-slate-leaf="true" data-offset-key="648:0" 
data-first-offset="true"><span data-slate-string="true">接着访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="649" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="650"><span data-slate-leaf="true" data-offset-key="650:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=art</span></span></span></a><span 
data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">，你应该能看到类似如下的输出：</span></span></span> 
</div> <div class="se-117af19a se-ffbce3ca" data-slate-type="pre" data-slate-object="block" 
data-key="652"> <div class="se-c798ee41 se-f8ac18d1"> <span></span> </div> <div class="se-18fd841c"> 
<div class="se-94a9303a se-9429ebe1" data-code-line-number="1"></div> </div> <div class="se-8ecc6f6d 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">Category name: 
art, date: 2019-10-4 Count: 1</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-a001f79b " data-slate-type="paragraph" 
data-slate-object="block" data-key="655"> <span data-slate-object="text" data-key="656"><span 
data-slate-leaf="true" data-offset-key="656:0" data-first-offset="true"><span data-slate-string="true">好，如果能正确运行，我们继续往下；否则，请回头看看那一讲是怎样把这一个过滤器配置起来的。现在我们根据前面提示的 
Nginx 配置文件的路径来稍加修改，比如，把 http 部分的 #access_log 开始的一行修改为类似如下路径：</span></span></span> </div> <div 
class="se-17c522db se-be50c1e0" data-slate-type="pre" data-slate-object="block" data-key="657" 
data-code-language="cpp"> <div class="se-79ca689a se-2d0face5"> <span></span> </div> <div class="se-9fc59741"> 
<div class="se-bb1eb5ba se-65c42ea6" data-code-line-number="1"></div> </div> <div class="se-f0b7f8a8 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="658"> <span data-slate-object="text" data-key="659"><span data-slate-leaf="true" 
data-offset-key="659:0" data-first-offset="true"><span data-slate-string="true">access_log 
/logs/nginx_access.</span></span><span data-slate-leaf="true" data-offset-key="659:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_9302605090" 
data-annotation-type="annotation"><span data-slate-string="true">log</span></span></span><span 
data-slate-leaf="true" data-offset-key="659:2"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-a634accb " data-slate-type="paragraph" data-slate-object="block" data-key="660"> 
<span data-slate-object="text" data-key="661"><span data-slate-leaf="true" data-offset-key="661:0" 
data-first-offset="true"><span data-slate-string="true">接着打开一个新命令行窗口运行：</span></span></span> 
</div> <div class="se-4ffea46f se-47b33233" data-slate-type="pre" data-slate-object="block" 
data-key="662" data-code-language="cpp"> <div class="se-c68c3557 se-cd8ce71a"> <span></span> 
</div> <div class="se-e23928f6"> <div class="se-ff7a68ba se-ffa168b1" data-code-line-number="1"></div> 
</div> <div class="se-f52afd75 ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="663"> <span data-slate-object="text" data-key="664"><span 
data-slate-leaf="true" data-offset-key="664:0" data-first-offset="true"><span data-slate-string="true">tail 
-f /logs/nginx_access.</span></span><span data-slate-leaf="true" data-offset-key="664:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_2839758533" 
data-annotation-type="annotation"><span data-slate-string="true">log</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-bde8ef1f " data-slate-type="paragraph" data-slate-object="block" data-key="665"> 
<span data-slate-object="text" data-key="666"><span data-slate-leaf="true" data-offset-key="666:0" 
data-first-offset="true"><span data-slate-string="true">这样就可以监视 Nginx 的请求访问日志了。</span></span></span> 
</div> <div class="se-334c7cab " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">继续修改配置文件，在接下去的 server 部分，将开头部分的 listern、server_name 
修改为如下配置，表示同时捕获访问 localhost 的 80 端口和 9000 端口的请求：</span></span></span> </div> <div class="se-8a3f7ef9 
se-36a2fa8e" data-slate-type="pre" data-slate-object="block" data-key="669"> <div class="se-8962d29c 
se-82065b3d"> <span></span> </div> <div class="se-890859cf"> <div class="se-88381df3 se-fd2ae29f" 
data-code-line-number="1"></div> <div class="se-88381df3 se-fd2ae29f" data-code-line-number="2"></div> 
<div class="se-88381df3 se-fd2ae29f" data-code-line-number="3"></div> </div> <div class="se-414136a0 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="670"> <span data-slate-object="text" data-key="671"><span data-slate-leaf="true" 
data-offset-key="671:0" data-first-offset="true"><span data-slate-string="true">listen 80;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="672"> <span data-slate-object="text" data-key="673"><span data-slate-leaf="true" 
data-offset-key="673:0" data-first-offset="true"><span data-slate-string="true">listen 9000;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="674"> <span data-slate-object="text" data-key="675"><span data-slate-leaf="true" 
data-offset-key="675:0" data-first-offset="true"><span data-slate-string="true">server_name 
localhost;</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> 
<div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-0286138c " data-slate-type="paragraph" data-slate-object="block" 
data-key="676"> <span data-slate-object="text" data-key="677"><span data-slate-leaf="true" 
data-offset-key="677:0" data-first-offset="true"><span data-slate-string="true">紧接着，在它下方增加路径映射的配置：</span></span></span> 
</div> <div class="se-6da9c587 se-55c861af" data-slate-type="pre" data-slate-object="block" 
data-key="678" data-code-language="cpp"> <div class="se-5f2c9d3b se-4ec628a7"> <span></span> 
</div> <div class="se-f00fc569"> <div class="se-24f88335 se-0583f7d5" data-code-line-number="1"></div> 
<div class="se-24f88335 se-0583f7d5" data-code-line-number="2"></div> <div class="se-24f88335 
se-0583f7d5" data-code-line-number="3"></div> </div> <div class="se-ca88c210 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="679"> <span data-slate-object="text" 
data-key="680"><span data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span 
data-slate-string="true">location ~ /books.* {</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="681"> <span data-slate-object="text" 
data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" data-first-offset="true"><span 
data-slate-string="true"> proxy_pass http:</span></span><span data-slate-leaf="true" data-offset-key="682:1"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_2645605703" 
data-annotation-type="annotation"><span data-slate-string="true">//localhost:8080;</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="683"> <span data-slate-object="text" data-key="684"><span data-slate-leaf="true" 
data-offset-key="684:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5edff230 " data-slate-type="paragraph" data-slate-object="block" data-key="685"> 
<span data-slate-object="text" data-key="686"><span data-slate-leaf="true" data-offset-key="686:0" 
data-first-offset="true"><span data-slate-string="true">这表示如果 URI 是以 /books 开头，就映射到 8080 的端口上面去。</span></span></span> 
</div> <div class="se-2dcf9b40 " data-slate-type="paragraph" data-slate-object="block" data-key="687"> 
<span data-slate-object="text" data-key="688"><span data-slate-leaf="true" data-offset-key="688:0" 
data-first-offset="true"><span data-slate-string="true">好了，如果是第一遍启动 Nginx，你可以直接执行 sudo nginx，如果已经启动，但是修改了配置文件，你可以重新加载 
sudo nginx -s reload。</span></span></span> </div> <div class="se-c34a47ae " data-slate-type="paragraph" 
data-slate-object="block" data-key="689"> <span data-slate-object="text" data-key="690"><span 
data-slate-leaf="true" data-offset-key="690:0" data-first-offset="true"><span data-slate-string="true">现在，去访问如下两个链接，你都应该看到前面见到的那个熟悉的页面：</span></span></span> 
</div> <div class="se-6edbd8e0 se-0e124c52" data-slate-type="pre" data-slate-object="block" 
data-key="691" data-code-language="javascript"> <div class="se-6c0b42b1 se-0cc5e4bb"> <span></span> 
</div> <div class="se-fa967c76"> <div class="se-2e19a0ea se-d9aecf78" data-code-line-number="1"></div> 
<div class="se-2e19a0ea se-d9aecf78" data-code-line-number="2"></div> </div> <div class="se-30a5305a 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="692"> <span data-slate-object="text" data-key="693"><span data-slate-leaf="true" 
data-offset-key="693:0" data-first-offset="true"><span data-slate-string="true">http:</span></span><span 
data-slate-leaf="true" data-offset-key="693:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0540936047" data-annotation-type="annotation"><span data-slate-string="true">//localhost/books?category=art</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="694"> <span data-slate-object="text" data-key="695"><span data-slate-leaf="true" 
data-offset-key="695:0" data-first-offset="true"><span data-slate-string="true">http:</span></span><span 
data-slate-leaf="true" data-offset-key="695:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2801297282" data-annotation-type="annotation"><span data-slate-string="true">//localhost:9000/books?category=art</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-35a8f36c " data-slate-type="paragraph" data-slate-object="block" data-key="696"> 
<span data-slate-object="text" data-key="697"><span data-slate-leaf="true" data-offset-key="697:0" 
data-first-offset="true"><span data-slate-string="true">这证明端口映射成功了，并且，切换回访问日志的那个窗口，你应该可以看到类似这样的访问日志：</span></span></span> 
</div> <div class="se-26d472f3 se-2b9efde2" data-slate-type="pre" data-slate-object="block" 
data-key="698" data-code-language="javascript"> <div class="se-2d17a56f se-86d1b7c0"> <span></span> 
</div> <div class="se-605eb89e"> <div class="se-7a8ff8c5 se-1917b8e4" data-code-line-number="1"></div> 
</div> <div class="se-9357290d ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="699"> <span data-slate-object="text" data-key="700"><span 
data-slate-leaf="true" data-offset-key="700:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_0908475665" data-annotation-type="annotation"><span 
data-slate-string="true">127.0</span></span></span><span data-slate-leaf="true" data-offset-key="700:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0819928390" 
data-annotation-type="annotation"><span data-slate-string="true">.0</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0231620087" data-annotation-type="annotation"><span data-slate-string="true">.1</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:3"><span data-slate-string="true"> - - [</span></span><span 
data-slate-leaf="true" data-offset-key="700:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9268438910" data-annotation-type="annotation"><span data-slate-string="true">04</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:5"><span data-slate-string="true">/Oct/</span></span><span 
data-slate-leaf="true" data-offset-key="700:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5950786584" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1611655351" data-annotation-type="annotation"><span data-slate-string="true">20</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:9"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7370241972" data-annotation-type="annotation"><span data-slate-string="true">36</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:11"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0478228928" data-annotation-type="annotation"><span data-slate-string="true">43</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5665278272" data-annotation-type="annotation"><span data-slate-string="true">-0700</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:15"><span data-slate-string="true">] </span></span><span 
data-slate-leaf="true" data-offset-key="700:16"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6524603531" data-annotation-type="annotation"><span data-slate-string="true">"GET 
/books?category=art HTTP/1.1"</span></span></span><span data-slate-leaf="true" data-offset-key="700:17"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="700:18"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4587561934" 
data-annotation-type="annotation"><span data-slate-string="true">200</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7719807656" data-annotation-type="annotation"><span data-slate-string="true">46</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:21"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:22"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6468192551" data-annotation-type="annotation"><span data-slate-string="true">"-"</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:23"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:24"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_9777331221" data-annotation-type="annotation"><span data-slate-string="true">"Mozilla/5.0 
(Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 
Safari/537.36"</span></span></span></span> </div> <div class="ps__rail-x" style="width: 365px; 
left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 80px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <h2 class="se-68745424" data-slate-type="heading" 
data-slate-object="block" data-key="701"><span data-slate-object="text" data-key="702"><span 
data-slate-leaf="true" data-offset-key="702:0" data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> 
<div class="se-b718e2e5 " data-slate-type="paragraph" data-slate-object="block" data-key="703"> 
<span data-slate-object="text" data-key="704"><span data-slate-leaf="true" data-offset-key="704:0" 
data-first-offset="true"><span data-slate-string="true">今天我们介绍了 Ops 中配置管理的一些常见的方式，以及一些配置文件常见的组织形式。内容本身并不复杂，也没有介绍配置文件的格式（它在后面的文章中会有介绍），但是配置管理确实是程序员每天都在打交道的对象，自然全栈工程师也不例外，遵从好的实践可以养成良好的 
Ops 习惯。</span></span></span> </div> <div class="se-b227efc4 " data-slate-type="paragraph" data-slate-object="block" 
data-key="705"> <span data-slate-object="text" data-key="706"><span data-slate-leaf="true" 
data-offset-key="706:0" data-first-offset="true"><span data-slate-string="true">现在，提问时间又到了，我来提两个问题吧：</span></span></span> 
</div> <div class="se-26b02e60" data-slate-type="list" data-slate-object="block" data-key="707"> 
<div class="se-664c49d2 se-195455ec" data-slate-type="list-line" data-slate-object="block" 
data-key="708"> <span data-slate-object="text" data-key="709"><span data-slate-leaf="true" 
data-offset-key="709:0" data-first-offset="true"><span data-slate-string="true">我们今天比较了常见的配置方式，其中一个是使用源代码中的常量，另一个是使用 
Web 应用的运行参数，你觉得这两个各有什么优劣，各适合怎样的场景？</span></span></span> </div> <div class="se-478a4160 se-97029b31" 
data-slate-type="list-line" data-slate-object="block" data-key="710"> <span data-slate-object="text" 
data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" data-first-offset="true"><span 
data-slate-string="true">有程序员朋友认为，大型 Web 应用应该尽量少用代码层面的配置，而是把这些变化的部分放到独立的配置服务中，这样软件会比较灵活，修改简便，适合各式各样的场景。你觉得这个说法对吗？</span></span></span> 
</div> </div> <div class="se-acf065af " data-slate-type="paragraph" data-slate-object="block" 
data-key="712"> <span data-slate-object="text" data-key="713"><span data-slate-leaf="true" 
data-offset-key="713:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文内容就到这里，下面是选修课堂。今天的选修课堂我想继续顺着 
Ops 往下谈，来讲一讲程序员的“独立性”，而 Ops，恰好就是独立性的一大标志。</span></span></span> </div> <h2 class="se-41559241" 
data-slate-type="heading" data-slate-object="block" data-key="714"><span data-slate-object="text" 
data-key="715"><span data-slate-leaf="true" data-offset-key="715:0" data-first-offset="true"><span 
data-slate-string="true">选修课堂：程序员的“独立性”</span></span></span></h2> <div class="se-5984adf6 " 
data-slate-type="paragraph" data-slate-object="block" data-key="716"> <span data-slate-object="text" 
data-key="717"><span data-slate-leaf="true" data-offset-key="717:0" data-first-offset="true"><span 
data-slate-string="true">几乎所有的软件工程师，都会写代码，都会做测试，但是做项目的“独立性”是大相径庭的，这也是容易让人忽略的部分，但却是一个“程序员”向“工程师”蜕变的标志。“独立性”在一定程度上决定了软件工程师的单兵作战能力，而对于全栈工程师来说，尤其如此。我们在技术上精进的同时，也需要提升独立完成项目的能力。而今天我们开始接触的 
Ops，恰恰是程序员独立性提升的一个重要部分。我认为，软件工程的“独立性”可以分成这样几个阶段（再次强调一下这并不是从编程能力上来分的）。</span></span></span> 
</div> <h3 class="se-3233bd1e" data-slate-type="heading" data-slate-object="block" data-key="718"><span 
data-slate-object="text" data-key="719"><span data-slate-leaf="true" data-offset-key="719:0" 
data-first-offset="true"><span data-slate-string="true">第一阶段：编码工作者</span></span></span></h3> 
<div class="se-38d14785 " data-slate-type="paragraph" data-slate-object="block" data-key="720"> 
<span data-slate-object="text" data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" 
data-first-offset="true"><span data-slate-string="true">拿到详细的设计文档，上面连许多方法接口都定义好了。写一些实现，调用一些既定的 
API，然后根据设计文档来实现测试。这种情况很常见，比如在某些外包公司，就是如此。编码能力得到了一定的锻炼，但这扼杀了大部分的创造力，长此以往也许最终只能成为一个熟练工。我相信短期内这是一个可行的选择，但是从程序员成长的角度来看，这个阶段是一定要迈过去的。</span></span></span> 
</div> <h3 class="se-e826d4e3" data-slate-type="heading" data-slate-object="block" data-key="722"><span 
data-slate-object="text" data-key="723"><span data-slate-leaf="true" data-offset-key="723:0" 
data-first-offset="true"><span data-slate-string="true">第二阶段：需求的独立实现者</span></span></span></h3> 
<div class="se-349cc917 " data-slate-type="paragraph" data-slate-object="block" data-key="724"> 
<span data-slate-object="text" data-key="725"><span data-slate-leaf="true" data-offset-key="725:0" 
data-first-offset="true"><span data-slate-string="true">拿到了粗略的设计文档，需求和业务也已经大致描述清楚，接下去要做的就是发挥聪明才智把软件设计好，把代码写好，通过测试。在具备简单沟通的基础上，这项工作可以在安静和独立的环境中完成，因为项目经理、架构师和产品经理已经把那些复杂的技术或业务难题搞定了。这样的环境下，可以诞生许许多多代码设计优秀、实现逻辑清晰简洁的程序员，但是这始终只是在做一个“残缺”的项目而已。在大厂，无论国内外，很多程序员新手都是从这个阶段开始的。那从这个阶段开始，Ops 
的工作就显山露水了，每天大量的安装、配置、部署工作，无论是在开发还是测试环境。</span></span></span> </div> <h3 class="se-5b2e4e4d" 
data-slate-type="heading" data-slate-object="block" data-key="726"><span data-slate-object="text" 
data-key="727"><span data-slate-leaf="true" data-offset-key="727:0" data-first-offset="true"><span 
data-slate-string="true">第三阶段：项目沟通者和管控者</span></span></span></h3> <div class="se-0e68a642 " 
data-slate-type="paragraph" data-slate-object="block" data-key="728"> <span data-slate-object="text" 
data-key="729"><span data-slate-leaf="true" data-offset-key="729:0" data-first-offset="true"><span 
data-slate-string="true">程序员要和产品经理，甚至客户澄清需求；需要自行分析可行性，明确项目中的技术和业务难点；参与决定和管理迭代周期和计划表；组织和参与项目组内运作跟踪会议。编码以外的事情会占用相当多的时间，而且这些时间往往会用在各种沟通上。到了这个阶段的程序员，通常已经成为了团队中的顶梁柱。</span></span></span> 
</div> <h3 class="se-3faba04c" data-slate-type="heading" data-slate-object="block" data-key="730"><span 
data-slate-object="text" data-key="731"><span data-slate-leaf="true" data-offset-key="731:0" 
data-first-offset="true"><span data-slate-string="true">第四阶段：从做项目到做产品</span></span></span></h3> 
<div class="se-4651af56 " data-slate-type="paragraph" data-slate-object="block" data-key="732"> 
<span data-slate-object="text" data-key="733"><span data-slate-leaf="true" data-offset-key="733:0" 
data-first-offset="true"><span data-slate-string="true">从做项目到做产品，区别是什么？做项目只需要做好一次或者很少的几次交付就可以了，而产品，则是要倾注心血于它的整个生命周期。做项目需要更多倾听用户需求，但是做产品更注重思考，思考用户的痛点和产品的定位远重于倾听用户表述，要把更多的精力花在产品定义、设计，思考怎样把技术、业务落地到产品实现上。在发布以后，如果幸运的话，产品会有一个漫长的迭代和维护周期，Ops 
工作也很可能成为你的重心，你会把主要的时间都投入到这里。</span></span></span> </div> <h3 class="se-e68ef716" data-slate-type="heading" 
data-slate-object="block" data-key="734"><span data-slate-object="text" data-key="735"><span 
data-slate-leaf="true" data-offset-key="735:0" data-first-offset="true"><span data-slate-string="true">第五阶段：产品成长的见证人</span></span></span></h3> 
<div class="se-d8f6f545 " data-slate-type="paragraph" data-slate-object="block" data-key="736"> 
<span data-slate-object="text" data-key="737"><span data-slate-leaf="true" data-offset-key="737:0" 
data-first-offset="true"><span data-slate-string="true">也许很少人能够参与从零开始，经过创意、市场分析到产品设计的过程。在明确要做什么之前，程序员有大量的时间会花在产品探索性的工作上面。也许会做很多的产品原型，也许某些版本和功能在 
A/B 测试之后就被放弃了，更有些产品在流传开来以前就销声匿迹了，或者很快就死在了抄袭和山寨手里。产品的更迭和换代总是千辛万苦，而看得到的部分往往如此简单，但是谁又知道它的历史有多曲折呢？</span></span></span> 
</div> <div class="se-4ea78524 " data-slate-type="paragraph" data-slate-object="block" data-key="738"> 
<span data-slate-object="text" data-key="739"><span data-slate-leaf="true" data-offset-key="739:0" 
data-first-offset="true"><span data-slate-string="true">好，到这里，我想问一下，正在阅读的你，处于程序员“独立性”的哪个阶段呢？</span></span></span> 
</div> <h2 class="se-76e082f7" data-slate-type="heading" data-slate-object="block" data-key="740"><span 
data-slate-object="text" data-key="741"><span data-slate-leaf="true" data-offset-key="741:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-db8b1a6d" data-slate-type="list" data-slate-object="block" data-key="742"> <div class="se-c943921d 
se-808a3326" data-slate-type="list-line" data-slate-object="block" data-key="743"> <span data-slate-object="text" 
data-key="744"><span data-slate-leaf="true" data-offset-key="744:0" data-first-offset="true"><span 
data-slate-string="true">当 Operation 和 Development 相遇，DevOps 就是它们碰撞产生的火花。你可能已经听过 DevOps 无数次了，但是，如果你并不是很清楚它意味着什么的话，那么我推荐你阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="745" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="746"><span data-slate-leaf="true" data-offset-key="746:0" 
data-first-offset="true"><span data-slate-string="true">什么是 DevOps？</span></span></span></a><span 
data-slate-object="text" data-key="747"><span data-slate-leaf="true" data-offset-key="747:0" 
data-first-offset="true"><span data-slate-string="true">以及 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="748" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="749"><span data-slate-leaf="true" data-offset-key="749:0" data-first-offset="true"><span 
data-slate-string="true">DevOps: Breaking the Development-Operations barrier</span></span></span></a><span 
data-slate-object="text" data-key="750"><span data-slate-leaf="true" data-offset-key="750:0" 
data-first-offset="true"><span data-slate-string="true"> 这两篇文章。</span></span></span> </div> 
<div class="se-89446164 se-b72f3ca2" data-slate-type="list-line" data-slate-object="block" 
data-key="751"> <span data-slate-object="text" data-key="752"><span data-slate-leaf="true" 
data-offset-key="752:0" data-first-offset="true"><span data-slate-string="true">文中简单介绍了反向代理，而它是几乎每个基于 
Web 的全栈工程师都会接触的，维基百科的</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="753" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="754"><span 
data-slate-leaf="true" data-offset-key="754:0" data-first-offset="true"><span data-slate-string="true">页面</span></span></span></a><span 
data-slate-object="text" data-key="755"><span data-slate-leaf="true" data-offset-key="755:0" 
data-first-offset="true"><span data-slate-string="true">介绍了它常见的功能。</span></span></span> </div> 
<div class="se-a81c284a se-0bd4f758" data-slate-type="list-line" data-slate-object="block" 
data-key="756"> <span data-slate-object="text" data-key="757"><span data-slate-leaf="true" 
data-offset-key="757:0" data-first-offset="true"><span data-slate-string="true">关于 Nginx，对于它配置的具体含义，如果想了解的话，除了</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="758" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="759"><span data-slate-leaf="true" data-offset-key="759:0" 
data-first-offset="true"><span data-slate-string="true">官方的文档例子</span></span></span></a><span 
data-slate-object="text" data-key="760"><span data-slate-leaf="true" data-offset-key="760:0" 
data-first-offset="true"><span data-slate-string="true">以外，</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="761" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="762"><span data-slate-leaf="true" data-offset-key="762:0" data-first-offset="true"><span 
data-slate-string="true">nginxconfig.io</span></span></span></a><span data-slate-object="text" 
data-key="763"><span data-slate-leaf="true" data-offset-key="763:0" data-first-offset="true"><span 
data-slate-string="true"> 这个网站可以通过简单的配置，直观、清晰地生成和比较相应的配置文件。</span></span></span> </div> <div 
class="se-2a17606e se-1eee8d53" data-slate-type="list-line" data-slate-object="block" data-key="764"> 
<span data-slate-object="text" data-key="765"><span data-slate-leaf="true" data-offset-key="765:0" 
data-first-offset="true"><span data-slate-string="true">有一篇 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="766" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="767"><span data-slate-leaf="true" data-offset-key="767:0" data-first-offset="true"><span 
data-slate-string="true">Top 5 configuration management tools</span></span></span></a><span 
data-slate-object="text" data-key="768"><span data-slate-leaf="true" data-offset-key="768:0" 
data-first-offset="true"><span data-slate-string="true"> 文章介绍了 5 种常见的配置管理工具，推荐阅读，中文译文在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="769" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="770"><span data-slate-leaf="true" data-offset-key="770:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="771"><span data-slate-leaf="true" data-offset-key="771:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-011c58a2" data-slate-type="image" 
data-slate-object="block" data-key="772"> <img class="se-253c36c9" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 11:10:54.744 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 11:10:54.744 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.750 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="469" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-7c445dec " data-slate-type="paragraph" data-slate-object="block" data-key="470"> 
<span data-slate-object="text" data-key="471"><span data-slate-leaf="true" data-offset-key="471:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-f47234b6 " data-slate-type="paragraph" data-slate-object="block" data-key="472"> 
<span data-slate-object="text" data-key="473"><span data-slate-leaf="true" data-offset-key="473:0" 
data-first-offset="true"><span data-slate-string="true">欢迎进入第五章：寻找最佳实践。本章我们会讲到 Ops，由于 Ops 的范围实在太广了，因此从今天开始，接连三讲，我们会讨论 
Ops 的三个常见话题，今天要谈的就是其中的第一个——配置管理。</span></span></span> </div> <div class="se-751d8d7e " data-slate-type="paragraph" 
data-slate-object="block" data-key="474"> <span data-slate-object="text" data-key="475"><span 
data-slate-leaf="true" data-offset-key="475:0" data-first-offset="true"><span data-slate-string="true">我们总在谈论 
Ops，所谓 Ops，指的就是 Operations，如果你专门去搜索，你恐怕也很难找到一个准确的定义。在中文翻译上看，“运维”这个词用得比较多，但是我认为 Ops 的含义明显更为广泛。我的理解是，和实际的软件开发和质量保证相对应的，环境搭建、配置管理、自动化流程、部署发布，等等的实践活动，无论线上还是线下，无论它们是在开发测试环节还是产品发布环节，都可以算作 
Ops。</span></span></span> </div> <div class="se-c308d0bf " data-slate-type="paragraph" data-slate-object="block" 
data-key="476"> <span data-slate-object="text" data-key="477"><span data-slate-leaf="true" 
data-offset-key="477:0" data-first-offset="true"><span data-slate-string="true">当然，</span></span></span><span 
data-slate-object="text" data-key="478"><span data-slate-leaf="true" data-offset-key="478:0" 
data-first-offset="true"><span class="se-e90c6178" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们并不需要执着去找出 Ops 和开发、测试的分界线，它们实际是互有重叠的</span></span></span></span><span 
data-slate-object="text" data-key="479"><span data-slate-leaf="true" data-offset-key="479:0" 
data-first-offset="true"><span data-slate-string="true">，我觉得</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="480" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" data-first-offset="true"><span 
data-slate-string="true">维基百科</span></span></span></a><span data-slate-object="text" data-key="482"><span 
data-slate-leaf="true" data-offset-key="482:0" data-first-offset="true"><span data-slate-string="true">上的这张图就很好地展示了这一点。</span></span></span> 
</div> <div class="se-429a153d" data-slate-type="image" data-slate-object="block" data-key="483"> 
<img class="se-a2dffea2" src="https://static001.geekbang.org/resource/image/e0/46/e01e10d70ba403368ee9f9973d87f646.jpg"> 
</div> <div class="se-be60ef44 " data-slate-type="paragraph" data-slate-object="block" data-key="484"> 
<span data-slate-object="text" data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" 
data-first-offset="true"><span data-slate-string="true">我想很多程序员不喜欢 Ops，也不愿意谈 Ops，这都可以理解，毕竟，和开发本身比起来，它没有那么多的创造性，有时甚至属于“重要但无趣”的工作。但是，我必须要强调的是，不只对于全栈工程师而言，Ops 
能力对于每一个通常意义上的软件工程师来说，都是必须要锻炼的重要方面。</span></span></span> </div> <div class="se-d8dc43cb " data-slate-type="paragraph" 
data-slate-object="block" data-key="486"> <span data-slate-object="text" data-key="487"><span 
data-slate-leaf="true" data-offset-key="487:0" data-first-offset="true"><span data-slate-string="true">需要明确的是，我今天要讲的配置管理，我认为就是 
Ops 的一个重要部分，它关注的是软件代码以各种形式，在项目的各个阶段存在的配置。几乎每个做运维的人都要经常去修改大量的线上配置，无论是来自操作系统还是应用本身。这个话题很少有人谈及，但却存在于每个程序员的日常工作中。</span></span></span> 
</div> <h2 class="se-d739434d" data-slate-type="heading" data-slate-object="block" data-key="488"><span 
data-slate-object="text" data-key="489"><span data-slate-leaf="true" data-offset-key="489:0" 
data-first-offset="true"><span data-slate-string="true">常见的配置方式</span></span></span></h2> <div 
class="se-519d93c5 " data-slate-type="paragraph" data-slate-object="block" data-key="490"> 
<span data-slate-object="text" data-key="491"><span data-slate-leaf="true" data-offset-key="491:0" 
data-first-offset="true"><span data-slate-string="true">在实际的项目开发过程中，当我们讲到“配置”的时候，其实隐含了许多不同的方式，这些方式有时候看起来差不多，实际却有着最适合的场景。</span></span></span> 
</div> <h3 class="se-60106104" data-slate-type="heading" data-slate-object="block" data-key="492"><span 
data-slate-object="text" data-key="493"><span data-slate-leaf="true" data-offset-key="493:0" 
data-first-offset="true"><span data-slate-string="true">1. 源代码中的常量</span></span></span></h3> 
<div class="se-39266ad0 " data-slate-type="paragraph" data-slate-object="block" data-key="494"> 
<span data-slate-object="text" data-key="495"><span data-slate-leaf="true" data-offset-key="495:0" 
data-first-offset="true"><span data-slate-string="true">代码常量是一种最典型的配置方式，它的特点是定义和使用方便，且只对开发人员友好。每次变更的时候，都需要改动代码，经过一定的测试和 
Code Review，之后还要通过指定流程的部署，才能发布到产品线上。</span></span></span> </div> <div class="se-913cab61 " 
data-slate-type="paragraph" data-slate-object="block" data-key="496"> <span data-slate-object="text" 
data-key="497"><span data-slate-leaf="true" data-offset-key="497:0" data-first-offset="true"><span 
data-slate-string="true">通常来说，项目中常量类的定义有着明确的规约，比如这样的示例代码：</span></span></span> </div> <div 
class="se-9acc28e4 se-58673698" data-slate-type="pre" data-slate-object="block" data-key="498" 
data-code-language="java"> <div class="se-254cde80 se-82c4a47f"> <span></span> </div> <div 
class="se-b28eba73"> <div class="se-22bcf254 se-6d26bdd7" data-code-line-number="1"></div> 
<div class="se-22bcf254 se-6d26bdd7" data-code-line-number="2"></div> <div class="se-22bcf254 
se-6d26bdd7" data-code-line-number="3"></div> <div class="se-22bcf254 se-6d26bdd7" data-code-line-number="4"></div> 
<div class="se-22bcf254 se-6d26bdd7" data-code-line-number="5"></div> <div class="se-22bcf254 
se-6d26bdd7" data-code-line-number="6"></div> </div> <div class="se-c0e88030 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="499"> <span data-slate-object="text" 
data-key="500"><span data-slate-leaf="true" data-offset-key="500:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2100571104" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="500:1"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="500:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1009464841" data-annotation-type="annotation"><span data-slate-string="true">final</span></span></span><span 
data-slate-leaf="true" data-offset-key="500:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="500:4"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_9530739186" data-annotation-type="annotation"><span 
data-slate-string="true">class</span></span></span></span><span data-slate-leaf="true" data-offset-key="500:5"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span 
data-slate-string="true"> </span></span></span><span data-slate-leaf="true" data-offset-key="500:6"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_2891316556" data-annotation-type="annotation"><span 
class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" data-annotation-type="annotation"><span 
data-slate-string="true">ProductConstants</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="500:7"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5470864051" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="500:8"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="501"> <span data-slate-object="text" data-key="502"><span data-slate-leaf="true" 
data-offset-key="502:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="502:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4310905364" data-annotation-type="annotation"><span 
data-slate-string="true">private</span></span></span></span><span data-slate-leaf="true" data-offset-key="502:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2650010480" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="502:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_8423748270" data-annotation-type="annotation"><span 
data-slate-string="true">ProductConstants</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="502:4"><span class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_3715107261" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="502:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2650010480" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="502:6"><span data-slate-string="true">{}</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="503"> <span data-slate-object="text" data-key="504"></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="505"> <span data-slate-object="text" 
data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="506:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5452967867" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="506:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7071598006" data-annotation-type="annotation"><span data-slate-string="true">static</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="506:5"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7271421481" data-annotation-type="annotation"><span data-slate-string="true">int</span></span></span><span 
data-slate-leaf="true" data-offset-key="506:6"><span data-slate-string="true"> MAX_NUMBER = 
</span></span><span data-slate-leaf="true" data-offset-key="506:7"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_6793557729" data-annotation-type="annotation"><span 
data-slate-string="true">9999</span></span></span><span data-slate-leaf="true" data-offset-key="506:8"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="507"> <span data-slate-object="text" 
data-key="508"><span data-slate-leaf="true" data-offset-key="508:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="508:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8549005875" 
data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="508:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="508:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9138265515" data-annotation-type="annotation"><span data-slate-string="true">static</span></span></span><span 
data-slate-leaf="true" data-offset-key="508:4"><span data-slate-string="true"> String DEFAULT_CODE 
= </span></span><span data-slate-leaf="true" data-offset-key="508:5"><span class=" gkhl-string" 
data-slate-object="annotation" data-annotation-key="gkann_4050007556" data-annotation-type="annotation"><span 
data-slate-string="true">"123"</span></span></span><span data-slate-leaf="true" data-offset-key="508:6"><span 
data-slate-string="true">;</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" 
data-slate-type="code-line" data-slate-object="block" data-key="509"> <span data-slate-object="text" 
data-key="510"><span data-slate-leaf="true" data-offset-key="510:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-fc4283f9 " data-slate-type="paragraph" 
data-slate-object="block" data-key="511"> <span data-slate-object="text" data-key="512"><span 
data-slate-leaf="true" data-offset-key="512:0" data-first-offset="true"><span data-slate-string="true">你看，上面的常量类包含的要点有：</span></span></span> 
</div> <div class="se-95b188cf" data-slate-type="list" data-slate-object="block" data-key="513"> 
<div class="se-c9008619 se-167efa30" data-slate-type="list-line" data-slate-object="block" 
data-key="514"> <span data-slate-object="text" data-key="515"><span data-slate-leaf="true" 
data-offset-key="515:0" data-first-offset="true"><span data-slate-string="true">类名直白且具体，这个 
Product 修饰很重要，避免了过于一般化的常量类定义，从而限制了它的职责范围；而这个 Constants 则说明了类的属性，一眼就知道它是干什么的。</span></span></span> 
</div> <div class="se-43fea91e se-2b8debe7" data-slate-type="list-line" data-slate-object="block" 
data-key="516"> <span data-slate-object="text" data-key="517"><span data-slate-leaf="true" 
data-offset-key="517:0" data-first-offset="true"><span data-slate-string="true">被定义为无法实例化的（即将构造器私有化），无法被继承的（即使用 
final 修饰）。</span></span></span> </div> <div class="se-fdf0e9cc se-b81e20aa" data-slate-type="list-line" 
data-slate-object="block" data-key="518"> <span data-slate-object="text" data-key="519"><span 
data-slate-leaf="true" data-offset-key="519:0" data-first-offset="true"><span data-slate-string="true">常量都使用 
public static 修饰，这样就可以直接访问，而不需要实例化这个类。</span></span></span> </div> </div> <div class="se-54f272b0 
" data-slate-type="paragraph" data-slate-object="block" data-key="520"> <span data-slate-object="text" 
data-key="521"><span data-slate-leaf="true" data-offset-key="521:0" data-first-offset="true"><span 
data-slate-string="true">值得一提的是，在我参与过的项目中，有的程序员为了强制编码的时候只能定义 static 属性来表示常量，会使用 interface 这样的方式，即使用接口来存放常量。效果自然是能达到的，但是这个方法有些投机取巧（毕竟和 
interface 关键字所应该表示的含义有明显偏差了），我认为这是一种反模式。</span></span></span> </div> <h3 class="se-d74a5e86" 
data-slate-type="heading" data-slate-object="block" data-key="522"><span data-slate-object="text" 
data-key="523"><span data-slate-leaf="true" data-offset-key="523:0" data-first-offset="true"><span 
data-slate-string="true">2. 代码中的配置文件</span></span></span></h3> <div class="se-06f53dc8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="524"> <span data-slate-object="text" data-key="525"><span 
data-slate-leaf="true" data-offset-key="525:0" data-first-offset="true"><span data-slate-string="true">代码中的配置文件也很常见，它们从 
Java、Python 这样的编程语言中脱离出来，但是依然作为源代码的一部分而存在。那为什么要这样做呢？</span></span></span> </div> <div class="se-6ebc3b76 
" data-slate-type="paragraph" data-slate-object="block" data-key="526"> <span data-slate-object="text" 
data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" data-first-offset="true"><span 
data-slate-string="true">简单来说，就是为了“解耦”。</span></span></span> </div> <div class="se-79eeb1ad 
" data-slate-type="paragraph" data-slate-object="block" data-key="528"> <span data-slate-object="text" 
data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" data-first-offset="true"><span 
data-slate-string="true">而就是这个“解耦”，带来了诸多好处。例如最小职责，单一职责，即配置文件做且只能做配置；再例如可以将同一类的资源放在更合适的地方统一管理了。</span></span></span> 
</div> <div class="se-8b368b84 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">举例来说：</span></span></span> </div> <div 
class="se-1aa3f69a se-204902aa" data-slate-type="pre" data-slate-object="block" data-key="532"> 
<div class="se-8ed26294 se-9cac819e"> <span></span> </div> <div class="se-25531df9"> <div class="se-a3a08d9b 
se-45ee6528" data-code-line-number="1"></div> <div class="se-a3a08d9b se-45ee6528" data-code-line-number="2"></div> 
<div class="se-a3a08d9b se-45ee6528" data-code-line-number="3"></div> </div> <div class="se-43c46b2d 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="533"> <span data-slate-object="text" data-key="534"><span data-slate-leaf="true" 
data-offset-key="534:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_en_US.properties</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="535"> <span data-slate-object="text" data-key="536"><span data-slate-leaf="true" 
data-offset-key="536:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_fr_CN.properties</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="537"> <span data-slate-object="text" data-key="538"><span data-slate-leaf="true" 
data-offset-key="538:0" data-first-offset="true"><span data-slate-string="true">MessagesBundle_de_DE.properties</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-2ca4f2df " data-slate-type="paragraph" data-slate-object="block" data-key="539"> 
<span data-slate-object="text" data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" 
data-first-offset="true"><span data-slate-string="true">你看，这样的 i18n（Internationalization）的特定语言的资源文件，就从编程语言的代码中独立出来了，更容易统一管理和维护。</span></span></span> 
</div> <div class="se-6fc1b6c4 " data-slate-type="paragraph" data-slate-object="block" data-key="541"> 
<span data-slate-object="text" data-key="542"><span data-slate-leaf="true" data-offset-key="542:0" 
data-first-offset="true"><span data-slate-string="true">这种把相关代码或配置单独拿出来的方式，不知道你能否联想到我们在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="543" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="544"><span data-slate-leaf="true" data-offset-key="544:0" 
data-first-offset="true"><span data-slate-string="true">[第 10 讲]</span></span></span></a><span 
data-slate-object="text" data-key="545"><span data-slate-leaf="true" data-offset-key="545:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的 MVC 控制器各个子功能的配置方式，当时不但讨论了横向和纵向两种实现形式，还讨论了各自的优劣，如果忘记了的话，你可以阅读回顾一下。比如 
URL 映射，既可以通过注解的方式，和实际的 Controller 代码放在一起；也可以通过 XML 配置的方式，从 Java 代码中拿出去。</span></span></span> 
</div> <h3 class="se-f61e1914" data-slate-type="heading" data-slate-object="block" data-key="546"><span 
data-slate-object="text" data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" 
data-first-offset="true"><span data-slate-string="true">3. 环境配置文件和环境变量</span></span></span></h3> 
<div class="se-2d9892c9 " data-slate-type="paragraph" data-slate-object="block" data-key="548"> 
<span data-slate-object="text" data-key="549"><span data-slate-leaf="true" data-offset-key="549:0" 
data-first-offset="true"><span data-slate-string="true">接着我们来讲讲环境下的配置。这里的“环境”（Environment），指的是代码部署的环境，可以是用于开发的笔记本电脑，也可以是生产线上的机器。对于不同的环境，虽说代码是同一份，但是可以通过不同的环境配置文件和环境变量，让代码执行不同的逻辑。</span></span></span> 
</div> <div class="se-fe515044 " data-slate-type="paragraph" data-slate-object="block" data-key="550"> 
<span data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">举一个环境配置文件的例子，例如环境下有这样一个文件，定义了这个环境所属的“地区”，而通过这个地区，可以从代码中寻找到相应正确的配置文件来读取配置：</span></span></span> 
</div> <div class="se-0f1aea82 se-23942d90" data-slate-type="pre" data-slate-object="block" 
data-key="552"> <div class="se-f6ebcd43 se-0cf71c87"> <span></span> </div> <div class="se-37c87ff7"> 
<div class="se-4441f34e se-11bb7924" data-code-line-number="1"></div> </div> <div class="se-7ad9b240 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="553"> <span data-slate-object="text" data-key="554"><span data-slate-leaf="true" 
data-offset-key="554:0" data-first-offset="true"><span data-slate-string="true">/etc/region</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d18b4a4a " data-slate-type="paragraph" data-slate-object="block" data-key="555"> 
<span data-slate-object="text" data-key="556"><span data-slate-leaf="true" data-offset-key="556:0" 
data-first-offset="true"><span data-slate-string="true">在某些系统中，这样的配置可以通过一个 web 工具指定，并通过一定的部署工具将其同步到目标环境中去。</span></span></span> 
</div> <div class="se-c59dd819 " data-slate-type="paragraph" data-slate-object="block" data-key="557"> 
<span data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">还有一种类似的方式是环境变量，环境变量和环境配置文件，有时允许同时存在，但是有一定的优先级顺序。比如说，如果环境变量使用 
REGION 也指定了上述文件中的 region，发生了冲突，这就要根据优先级的关系来决定使用哪一个配置，通常来说，环境变量比环境配置文件优先级更高。</span></span></span> 
</div> <div class="se-1c2e8992 " data-slate-type="paragraph" data-slate-object="block" data-key="559"> 
<span data-slate-object="text" data-key="560"><span data-slate-leaf="true" data-offset-key="560:0" 
data-first-offset="true"><span data-slate-string="true">那为什么要允许配置不同方式的覆写呢？这是为了给应用的部署赋予灵活性，举例来说，/etc/region 
已经确定了值为 EU（欧洲），那么如果需要在该物理机器上部署两份环境 ，第二份就可以通过环境变量 REGION 强制指定为 NA（北美）。</span></span></span> 
</div> <h3 class="se-003b06da" data-slate-type="heading" data-slate-object="block" data-key="561"><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span data-slate-string="true">4. 运行参数</span></span></span></h3> <div 
class="se-cc243266 " data-slate-type="paragraph" data-slate-object="block" data-key="563"> 
<span data-slate-object="text" data-key="564"><span data-slate-leaf="true" data-offset-key="564:0" 
data-first-offset="true"><span data-slate-string="true">运行参数，可以说是最为具体的一种配置方式，真正做到了应用级别，即一个应用可以配置一个参数。这种情况其实对于开发人员来说非常熟悉，比如在项目中应用 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="565" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="566"><span data-slate-leaf="true" data-offset-key="566:0" 
data-first-offset="true"><span data-slate-string="true">log4j2</span></span></span></a><span 
data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true"> 这个日志工具时，启动应用的 java 命令上，增加如下参数：</span></span></span> 
</div> <div class="se-ec356164 se-019bff61" data-slate-type="pre" data-slate-object="block" 
data-key="568"> <div class="se-aee5b8ca se-6638c204"> <span></span> </div> <div class="se-f1531f9e"> 
<div class="se-cc879dbb se-5f0772ef" data-code-line-number="1"></div> </div> <div class="se-0814ca9b 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="569"> <span data-slate-object="text" data-key="570"><span data-slate-leaf="true" 
data-offset-key="570:0" data-first-offset="true"><span data-slate-string="true">-Dlog4j.configurationFile=xxx/log4j2.xml</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-554db12a " data-slate-type="paragraph" data-slate-object="block" data-key="571"> 
<span data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">通过这样的运行参数指定的方式，指定 log4j2 配置文件的位置。</span></span></span> 
</div> <div class="se-cda747a3 " data-slate-type="paragraph" data-slate-object="block" data-key="573"> 
<span data-slate-object="text" data-key="574"><span data-slate-leaf="true" data-offset-key="574:0" 
data-first-offset="true"><span data-slate-string="true">当然，也可以通过规约优于配置的方式，不显式指定位置，而在 classpath 
中放置一个名为 log4j2.component.properties 的文件，里面指定类似的配置，而 log4j2 在系统启动的时候可以自动加载。</span></span></span> 
</div> <h3 class="se-7866143e" data-slate-type="heading" data-slate-object="block" data-key="575"><span 
data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">5. 配置管理服务</span></span></span></h3> 
<div class="se-907323dd " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">常见的配置方式中，我们最后来讲一下配置管理服务。尤其对一个较大的系统来说，配置管理是从整个系统的层面上抽取并统一管理配置项的方式。通常来说，这样的配置管理系统会被包装成一个服务，当然，也有少数是单纯放到数据库的某张表里，不过这种数据库访问层面的耦合通常并不推荐。</span></span></span> 
</div> <div class="se-df32ab84 " data-slate-type="paragraph" data-slate-object="block" data-key="579"> 
<span data-slate-object="text" data-key="580"><span data-slate-leaf="true" data-offset-key="580:0" 
data-first-offset="true"><span data-slate-string="true">一旦配置管理成为了独立的服务，就说明这个系统已经复杂到一定程度了，通常也意味着这个服务的用户，不再只是开发人员了，往往还有运维人员，甚至是一些非技术的管理人员。</span></span></span> 
</div> <h2 class="se-fc9c1dbe" data-slate-type="heading" data-slate-object="block" data-key="581"><span 
data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span data-slate-string="true">配置的层级关系</span></span></span></h2> <div 
class="se-124e9d92 " data-slate-type="paragraph" data-slate-object="block" data-key="583"> 
<span data-slate-object="text" data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" 
data-first-offset="true"><span data-slate-string="true">资源文件，本质上也算是代码的一部分，</span></span></span><span 
data-slate-object="text" data-key="585"><span data-slate-leaf="true" data-offset-key="585:0" 
data-first-offset="true"><span class="se-93e4e3e8" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过合理的设计，可以让资源文件具备编程语言代码一般的继承关系。</span></span></span></span><span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
data-slate-string="true">比如这样的配置文件组织结构：</span></span></span> </div> <div class="se-62ce11e9 
se-4c297c3e" data-slate-type="pre" data-slate-object="block" data-key="587"> <div class="se-cc970ffb 
se-24c66ac8"> <span></span> </div> <div class="se-5c6ad1a8"> <div class="se-1217f3a2 se-154a44d1" 
data-code-line-number="1"></div> <div class="se-1217f3a2 se-154a44d1" data-code-line-number="2"></div> 
<div class="se-1217f3a2 se-154a44d1" data-code-line-number="3"></div> <div class="se-1217f3a2 
se-154a44d1" data-code-line-number="4"></div> </div> <div class="se-4c6fad39 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="588"> <span data-slate-object="text" 
data-key="589"><span data-slate-leaf="true" data-offset-key="589:0" data-first-offset="true"><span 
data-slate-string="true">conf/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="590"> <span data-slate-object="text" 
data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" data-first-offset="true"><span 
data-slate-string="true">conf/CN/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="592"> <span data-slate-object="text" 
data-key="593"><span data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span 
data-slate-string="true">conf/CN/Zhejiang/rules.conf</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="594"> <span data-slate-object="text" 
data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" data-first-offset="true"><span 
data-slate-string="true">conf/US/rules.conf</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-722fb238 
" data-slate-type="paragraph" data-slate-object="block" data-key="596"> <span data-slate-object="text" 
data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" data-first-offset="true"><span 
data-slate-string="true">conf 目录下，rules.conf 文件就像是基类，存放了默认的规则配置；下面的 CN 目录下的 rules.conf 则存放了中国区的增量配置，就像是子类，里面的配置项优先级高于“基类”的配置，起到一个有选择性地覆写的作用；而再下面的 
Zhejiang 目录下的 rulels.conf 则表示浙江省的规则配置，优先级更高。</span></span></span> </div> <div class="se-c933f5c2 
" data-slate-type="paragraph" data-slate-object="block" data-key="598"> <span data-slate-object="text" 
data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" data-first-offset="true"><span 
data-slate-string="true">在这种方式下，配置代码不但清晰易懂，而且减少了重复，易于维护。</span></span></span> </div> <h2 class="se-fcdee04c" 
data-slate-type="heading" data-slate-object="block" data-key="600"><span data-slate-object="text" 
data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" data-first-offset="true"><span 
data-slate-string="true">规约优于配置</span></span></span></h2> <div class="se-ab587da4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="602"> <span data-slate-object="text" data-key="603"><span 
data-slate-leaf="true" data-offset-key="603:0" data-first-offset="true"><span data-slate-string="true">不知道你是否还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="604" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">[第 10 讲]</span></span></span></a><span 
data-slate-object="text" data-key="606"><span data-slate-leaf="true" data-offset-key="606:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍过的“终极偷懒大法”——规约优于配置（CoC，Convention 
over Configuration）。在这种方式下，系统和配置的用户会建立“隐性的契约”，通过遵从一定的规则，比如命名规则，达到自动应用配置的目的。</span></span></span> 
</div> <div class="se-cd4147e5 " data-slate-type="paragraph" data-slate-object="block" data-key="607"> 
<span data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true">当时我们举了一个 Spring 的 ControllerClassNameHandlerMapping 
的例子来说明，现在我们来举另外一个 Grails 的例子。这里使用 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="609" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="610"><span 
data-slate-leaf="true" data-offset-key="610:0" data-first-offset="true"><span data-slate-string="true">Grails</span></span></span></a><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true"> 举例，是因为 Grails 是我接触过的应用 CoC 原则应用得最好的 
Web 应用框架了，使用它搭建起一个 Web 应用极其简洁。如果你使用过 Spring Boot 并对它印象还不错的话，你可以尝试这个将快速和简洁履行得更为彻底的 Grails。</span></span></span> 
</div> <div class="se-6147a3e0 se-afbb38eb" data-slate-type="pre" data-slate-object="block" 
data-key="612" data-code-language="cpp"> <div class="se-681b6150 se-ffb21ca3"> <span></span> 
</div> <div class="se-4f2ace7d"> <div class="se-b880931a se-ed9581be" data-code-line-number="1"></div> 
<div class="se-b880931a se-ed9581be" data-code-line-number="2"></div> <div class="se-b880931a 
se-ed9581be" data-code-line-number="3"></div> </div> <div class="se-6cdfc62a ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="613"> <span data-slate-object="text" 
data-key="614"><span data-slate-leaf="true" data-offset-key="614:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9152504231" 
data-annotation-type="annotation"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span data-slate-string="true">class</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="614:1"><span class=" gkhl-class" data-slate-object="annotation" 
data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span data-slate-string="true"> 
</span></span></span><span data-slate-leaf="true" data-offset-key="614:2"><span class=" gkhl-class" 
data-slate-object="annotation" data-annotation-key="gkann_5204220137" data-annotation-type="annotation"><span 
class=" gkhl-title" data-slate-object="annotation" data-annotation-key="gkann_6551447807" data-annotation-type="annotation"><span 
data-slate-string="true">BooksController</span></span></span></span><span data-slate-leaf="true" 
data-offset-key="614:3"><span class=" gkhl-class" data-slate-object="annotation" data-annotation-key="gkann_5204220137" 
data-annotation-type="annotation"><span data-slate-string="true"> {</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="615"> <span data-slate-object="text" data-key="616"><span data-slate-leaf="true" 
data-offset-key="616:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="616:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8277164673" data-annotation-type="annotation"><span data-slate-string="true">def 
index() </span></span></span><span data-slate-leaf="true" data-offset-key="616:2"><span data-slate-string="true">{ 
... }</span></span></span> </div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="617"> <span data-slate-object="text" data-key="618"><span 
data-slate-leaf="true" data-offset-key="618:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-38472531 " data-slate-type="paragraph" data-slate-object="block" data-key="619"> 
<span data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span data-slate-string="true">你看，如此简单的控制器定义，就可以自动把路径为 /books 的请求映射到 
index 方法上，通过规约将 BooksController 映射到 /books 上，而 index 又代表了默认的 GET 方法的访问。</span></span></span> 
</div> <h2 class="se-ade9125b" data-slate-type="heading" data-slate-object="block" data-key="621"><span 
data-slate-object="text" data-key="622"><span data-slate-leaf="true" data-offset-key="622:0" 
data-first-offset="true"><span data-slate-string="true">配置模板</span></span></span></h2> <div 
class="se-6aa0daac " data-slate-type="paragraph" data-slate-object="block" data-key="623"> 
<span data-slate-object="text" data-key="624"><span data-slate-leaf="true" data-offset-key="624:0" 
data-first-offset="true"><span data-slate-string="true">对于某些复杂或灵活的软件系统来说，配置会变成实际上的 DSL（Domain 
Specific Language），复杂程度可以不亚于一门编程语言写的代码。于是，有一种常见的帮助使用者理解和修改配置的方法就出现了，它就是创建配置模板，写好足量的配置默认值和配置说明，这样使用者就可以复制一份模板，并在其之上按需修改，比如 
Nginx 的配置模板。</span></span></span> </div> <div class="se-474c5833 " data-slate-type="paragraph" 
data-slate-object="block" data-key="625"> <span data-slate-object="text" data-key="626"><span 
data-slate-leaf="true" data-offset-key="626:0" data-first-offset="true"><span data-slate-string="true">Nginx 
是一个高性能的反向代理服务器，反向代理可以挡在 Web 服务器前面响应用户的请求，根据不同的规则来处理请求，比如认证、限流、映射到其它路径，访问特定的服务器等等，将这些复杂的访问逻辑和服务器节点都隐藏起来，给用户提供一个单一的 
IP 地址。</span></span></span> </div> <div class="se-1ece2eee " data-slate-type="paragraph" data-slate-object="block" 
data-key="627"> <span data-slate-object="text" data-key="628"><span data-slate-leaf="true" 
data-offset-key="628:0" data-first-offset="true"><span data-slate-string="true">下面我们来动动手，亲自配置一下 
Nginx 并让它工作起来。</span></span></span> </div> <div class="se-3c9444e8 " data-slate-type="paragraph" 
data-slate-object="block" data-key="629"> <span data-slate-object="text" data-key="630"><span 
data-slate-leaf="true" data-offset-key="630:0" data-first-offset="true"><span data-slate-string="true">在 
Mac 上你可以使用 brew 来安装 Nginx，或者去官网上</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="631" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="632"><span 
data-slate-leaf="true" data-offset-key="632:0" data-first-offset="true"><span data-slate-string="true">找一个适合的版本</span></span></span></a><span 
data-slate-object="text" data-key="633"><span data-slate-leaf="true" data-offset-key="633:0" 
data-first-offset="true"><span data-slate-string="true">下载安装：</span></span></span> </div> <div 
class="se-2ef5a1a7 se-a64835a9" data-slate-type="pre" data-slate-object="block" data-key="634" 
data-code-language="sql"> <div class="se-97d80a8f se-8fd01a22"> <span></span> </div> <div class="se-5286fb4f"> 
<div class="se-ca44555a se-f35714ea" data-code-line-number="1"></div> </div> <div class="se-4de3b32c 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="635"> <span data-slate-object="text" data-key="636"><span data-slate-leaf="true" 
data-offset-key="636:0" data-first-offset="true"><span data-slate-string="true">brew </span></span><span 
data-slate-leaf="true" data-offset-key="636:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5026739347" data-annotation-type="annotation"><span data-slate-string="true">install</span></span></span><span 
data-slate-leaf="true" data-offset-key="636:2"><span data-slate-string="true"> nginx</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d4f797bc " data-slate-type="paragraph" data-slate-object="block" data-key="637"> 
<span data-slate-object="text" data-key="638"><span data-slate-leaf="true" data-offset-key="638:0" 
data-first-offset="true"><span data-slate-string="true">在安装成功以后，你应该能看到命令行输出了默认 Nginx 配置文件的位置，例如 
/usr/local/etc/nginx/nginx.conf。现在打开看一下，你会发现它本质上就是一个配置模板，有些配置选项为了便于程序员理解和使用，使用注释包围起来了。在同一路径下，还有一个 
nginx.conf.default 作为备份和参考。</span></span></span> </div> <div class="se-b451c878 " data-slate-type="paragraph" 
data-slate-object="block" data-key="639"> <span data-slate-object="text" data-key="640"><span 
data-slate-leaf="true" data-offset-key="640:0" data-first-offset="true"><span data-slate-string="true">还记得在我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="641" class="se-bd151211 
se-8ce28dd5"><span data-slate-object="text" data-key="642"><span data-slate-leaf="true" data-offset-key="642:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true"> 中自己动手配置的过滤器吗？确认一下它还能正确运行：</span></span></span> 
</div> <div class="se-c0db9a68 se-b6a46483" data-slate-type="pre" data-slate-object="block" 
data-key="644"> <div class="se-4b8314bb se-c2957318"> <span></span> </div> <div class="se-e6ebb743"> 
<div class="se-ec228a2c se-4fd554f0" data-code-line-number="1"></div> </div> <div class="se-80c2fa69 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="645"> <span data-slate-object="text" data-key="646"><span data-slate-leaf="true" 
data-offset-key="646:0" data-first-offset="true"><span data-slate-string="true">catalina run</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-0148ccaa " data-slate-type="paragraph" data-slate-object="block" data-key="647"> 
<span data-slate-object="text" data-key="648"><span data-slate-leaf="true" data-offset-key="648:0" 
data-first-offset="true"><span data-slate-string="true">接着访问 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="649" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="650"><span data-slate-leaf="true" data-offset-key="650:0" data-first-offset="true"><span 
data-slate-string="true">http://localhost:8080/books?category=art</span></span></span></a><span 
data-slate-object="text" data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" 
data-first-offset="true"><span data-slate-string="true">，你应该能看到类似如下的输出：</span></span></span> 
</div> <div class="se-117af19a se-ffbce3ca" data-slate-type="pre" data-slate-object="block" 
data-key="652"> <div class="se-c798ee41 se-f8ac18d1"> <span></span> </div> <div class="se-18fd841c"> 
<div class="se-94a9303a se-9429ebe1" data-code-line-number="1"></div> </div> <div class="se-8ecc6f6d 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">Category name: 
art, date: 2019-10-4 Count: 1</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-a001f79b " data-slate-type="paragraph" 
data-slate-object="block" data-key="655"> <span data-slate-object="text" data-key="656"><span 
data-slate-leaf="true" data-offset-key="656:0" data-first-offset="true"><span data-slate-string="true">好，如果能正确运行，我们继续往下；否则，请回头看看那一讲是怎样把这一个过滤器配置起来的。现在我们根据前面提示的 
Nginx 配置文件的路径来稍加修改，比如，把 http 部分的 #access_log 开始的一行修改为类似如下路径：</span></span></span> </div> <div 
class="se-17c522db se-be50c1e0" data-slate-type="pre" data-slate-object="block" data-key="657" 
data-code-language="cpp"> <div class="se-79ca689a se-2d0face5"> <span></span> </div> <div class="se-9fc59741"> 
<div class="se-bb1eb5ba se-65c42ea6" data-code-line-number="1"></div> </div> <div class="se-f0b7f8a8 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="658"> <span data-slate-object="text" data-key="659"><span data-slate-leaf="true" 
data-offset-key="659:0" data-first-offset="true"><span data-slate-string="true">access_log 
/logs/nginx_access.</span></span><span data-slate-leaf="true" data-offset-key="659:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_9302605090" 
data-annotation-type="annotation"><span data-slate-string="true">log</span></span></span><span 
data-slate-leaf="true" data-offset-key="659:2"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-a634accb " data-slate-type="paragraph" data-slate-object="block" data-key="660"> 
<span data-slate-object="text" data-key="661"><span data-slate-leaf="true" data-offset-key="661:0" 
data-first-offset="true"><span data-slate-string="true">接着打开一个新命令行窗口运行：</span></span></span> 
</div> <div class="se-4ffea46f se-47b33233" data-slate-type="pre" data-slate-object="block" 
data-key="662" data-code-language="cpp"> <div class="se-c68c3557 se-cd8ce71a"> <span></span> 
</div> <div class="se-e23928f6"> <div class="se-ff7a68ba se-ffa168b1" data-code-line-number="1"></div> 
</div> <div class="se-f52afd75 ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="663"> <span data-slate-object="text" data-key="664"><span 
data-slate-leaf="true" data-offset-key="664:0" data-first-offset="true"><span data-slate-string="true">tail 
-f /logs/nginx_access.</span></span><span data-slate-leaf="true" data-offset-key="664:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_2839758533" 
data-annotation-type="annotation"><span data-slate-string="true">log</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-bde8ef1f " data-slate-type="paragraph" data-slate-object="block" data-key="665"> 
<span data-slate-object="text" data-key="666"><span data-slate-leaf="true" data-offset-key="666:0" 
data-first-offset="true"><span data-slate-string="true">这样就可以监视 Nginx 的请求访问日志了。</span></span></span> 
</div> <div class="se-334c7cab " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">继续修改配置文件，在接下去的 server 部分，将开头部分的 listern、server_name 
修改为如下配置，表示同时捕获访问 localhost 的 80 端口和 9000 端口的请求：</span></span></span> </div> <div class="se-8a3f7ef9 
se-36a2fa8e" data-slate-type="pre" data-slate-object="block" data-key="669"> <div class="se-8962d29c 
se-82065b3d"> <span></span> </div> <div class="se-890859cf"> <div class="se-88381df3 se-fd2ae29f" 
data-code-line-number="1"></div> <div class="se-88381df3 se-fd2ae29f" data-code-line-number="2"></div> 
<div class="se-88381df3 se-fd2ae29f" data-code-line-number="3"></div> </div> <div class="se-414136a0 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="670"> <span data-slate-object="text" data-key="671"><span data-slate-leaf="true" 
data-offset-key="671:0" data-first-offset="true"><span data-slate-string="true">listen 80;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="672"> <span data-slate-object="text" data-key="673"><span data-slate-leaf="true" 
data-offset-key="673:0" data-first-offset="true"><span data-slate-string="true">listen 9000;</span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="674"> <span data-slate-object="text" data-key="675"><span data-slate-leaf="true" 
data-offset-key="675:0" data-first-offset="true"><span data-slate-string="true">server_name 
localhost;</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> 
<div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-0286138c " data-slate-type="paragraph" data-slate-object="block" 
data-key="676"> <span data-slate-object="text" data-key="677"><span data-slate-leaf="true" 
data-offset-key="677:0" data-first-offset="true"><span data-slate-string="true">紧接着，在它下方增加路径映射的配置：</span></span></span> 
</div> <div class="se-6da9c587 se-55c861af" data-slate-type="pre" data-slate-object="block" 
data-key="678" data-code-language="cpp"> <div class="se-5f2c9d3b se-4ec628a7"> <span></span> 
</div> <div class="se-f00fc569"> <div class="se-24f88335 se-0583f7d5" data-code-line-number="1"></div> 
<div class="se-24f88335 se-0583f7d5" data-code-line-number="2"></div> <div class="se-24f88335 
se-0583f7d5" data-code-line-number="3"></div> </div> <div class="se-ca88c210 ps"> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="679"> <span data-slate-object="text" 
data-key="680"><span data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span 
data-slate-string="true">location ~ /books.* {</span></span></span> </div> <div class="se-223dd83d 
se-628ab1c5" data-slate-type="code-line" data-slate-object="block" data-key="681"> <span data-slate-object="text" 
data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" data-first-offset="true"><span 
data-slate-string="true"> proxy_pass http:</span></span><span data-slate-leaf="true" data-offset-key="682:1"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_2645605703" 
data-annotation-type="annotation"><span data-slate-string="true">//localhost:8080;</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="683"> <span data-slate-object="text" data-key="684"><span data-slate-leaf="true" 
data-offset-key="684:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-5edff230 " data-slate-type="paragraph" data-slate-object="block" data-key="685"> 
<span data-slate-object="text" data-key="686"><span data-slate-leaf="true" data-offset-key="686:0" 
data-first-offset="true"><span data-slate-string="true">这表示如果 URI 是以 /books 开头，就映射到 8080 的端口上面去。</span></span></span> 
</div> <div class="se-2dcf9b40 " data-slate-type="paragraph" data-slate-object="block" data-key="687"> 
<span data-slate-object="text" data-key="688"><span data-slate-leaf="true" data-offset-key="688:0" 
data-first-offset="true"><span data-slate-string="true">好了，如果是第一遍启动 Nginx，你可以直接执行 sudo nginx，如果已经启动，但是修改了配置文件，你可以重新加载 
sudo nginx -s reload。</span></span></span> </div> <div class="se-c34a47ae " data-slate-type="paragraph" 
data-slate-object="block" data-key="689"> <span data-slate-object="text" data-key="690"><span 
data-slate-leaf="true" data-offset-key="690:0" data-first-offset="true"><span data-slate-string="true">现在，去访问如下两个链接，你都应该看到前面见到的那个熟悉的页面：</span></span></span> 
</div> <div class="se-6edbd8e0 se-0e124c52" data-slate-type="pre" data-slate-object="block" 
data-key="691" data-code-language="javascript"> <div class="se-6c0b42b1 se-0cc5e4bb"> <span></span> 
</div> <div class="se-fa967c76"> <div class="se-2e19a0ea se-d9aecf78" data-code-line-number="1"></div> 
<div class="se-2e19a0ea se-d9aecf78" data-code-line-number="2"></div> </div> <div class="se-30a5305a 
ps"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="692"> <span data-slate-object="text" data-key="693"><span data-slate-leaf="true" 
data-offset-key="693:0" data-first-offset="true"><span data-slate-string="true">http:</span></span><span 
data-slate-leaf="true" data-offset-key="693:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_0540936047" data-annotation-type="annotation"><span data-slate-string="true">//localhost/books?category=art</span></span></span></span> 
</div> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" data-slate-object="block" 
data-key="694"> <span data-slate-object="text" data-key="695"><span data-slate-leaf="true" 
data-offset-key="695:0" data-first-offset="true"><span data-slate-string="true">http:</span></span><span 
data-slate-leaf="true" data-offset-key="695:1"><span class=" gkhl-comment" data-slate-object="annotation" 
data-annotation-key="gkann_2801297282" data-annotation-type="annotation"><span data-slate-string="true">//localhost:9000/books?category=art</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-35a8f36c " data-slate-type="paragraph" data-slate-object="block" data-key="696"> 
<span data-slate-object="text" data-key="697"><span data-slate-leaf="true" data-offset-key="697:0" 
data-first-offset="true"><span data-slate-string="true">这证明端口映射成功了，并且，切换回访问日志的那个窗口，你应该可以看到类似这样的访问日志：</span></span></span> 
</div> <div class="se-26d472f3 se-2b9efde2" data-slate-type="pre" data-slate-object="block" 
data-key="698" data-code-language="javascript"> <div class="se-2d17a56f se-86d1b7c0"> <span></span> 
</div> <div class="se-605eb89e"> <div class="se-7a8ff8c5 se-1917b8e4" data-code-line-number="1"></div> 
</div> <div class="se-9357290d ps ps--active-x"> <div class="se-223dd83d se-628ab1c5" data-slate-type="code-line" 
data-slate-object="block" data-key="699"> <span data-slate-object="text" data-key="700"><span 
data-slate-leaf="true" data-offset-key="700:0" data-first-offset="true"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_0908475665" data-annotation-type="annotation"><span 
data-slate-string="true">127.0</span></span></span><span data-slate-leaf="true" data-offset-key="700:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0819928390" 
data-annotation-type="annotation"><span data-slate-string="true">.0</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0231620087" data-annotation-type="annotation"><span data-slate-string="true">.1</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:3"><span data-slate-string="true"> - - [</span></span><span 
data-slate-leaf="true" data-offset-key="700:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9268438910" data-annotation-type="annotation"><span data-slate-string="true">04</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:5"><span data-slate-string="true">/Oct/</span></span><span 
data-slate-leaf="true" data-offset-key="700:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5950786584" data-annotation-type="annotation"><span data-slate-string="true">2019</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:7"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1611655351" data-annotation-type="annotation"><span data-slate-string="true">20</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:9"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:10"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7370241972" data-annotation-type="annotation"><span data-slate-string="true">36</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:11"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="700:12"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0478228928" data-annotation-type="annotation"><span data-slate-string="true">43</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:13"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:14"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5665278272" data-annotation-type="annotation"><span data-slate-string="true">-0700</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:15"><span data-slate-string="true">] </span></span><span 
data-slate-leaf="true" data-offset-key="700:16"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6524603531" data-annotation-type="annotation"><span data-slate-string="true">"GET 
/books?category=art HTTP/1.1"</span></span></span><span data-slate-leaf="true" data-offset-key="700:17"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="700:18"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4587561934" 
data-annotation-type="annotation"><span data-slate-string="true">200</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:19"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:20"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7719807656" data-annotation-type="annotation"><span data-slate-string="true">46</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:21"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:22"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_6468192551" data-annotation-type="annotation"><span data-slate-string="true">"-"</span></span></span><span 
data-slate-leaf="true" data-offset-key="700:23"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="700:24"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_9777331221" data-annotation-type="annotation"><span data-slate-string="true">"Mozilla/5.0 
(Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 
Safari/537.36"</span></span></span></span> </div> <div class="ps__rail-x" style="width: 365px; 
left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 80px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <h2 class="se-68745424" data-slate-type="heading" 
data-slate-object="block" data-key="701"><span data-slate-object="text" data-key="702"><span 
data-slate-leaf="true" data-offset-key="702:0" data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> 
<div class="se-b718e2e5 " data-slate-type="paragraph" data-slate-object="block" data-key="703"> 
<span data-slate-object="text" data-key="704"><span data-slate-leaf="true" data-offset-key="704:0" 
data-first-offset="true"><span data-slate-string="true">今天我们介绍了 Ops 中配置管理的一些常见的方式，以及一些配置文件常见的组织形式。内容本身并不复杂，也没有介绍配置文件的格式（它在后面的文章中会有介绍），但是配置管理确实是程序员每天都在打交道的对象，自然全栈工程师也不例外，遵从好的实践可以养成良好的 
Ops 习惯。</span></span></span> </div> <div class="se-b227efc4 " data-slate-type="paragraph" data-slate-object="block" 
data-key="705"> <span data-slate-object="text" data-key="706"><span data-slate-leaf="true" 
data-offset-key="706:0" data-first-offset="true"><span data-slate-string="true">现在，提问时间又到了，我来提两个问题吧：</span></span></span> 
</div> <div class="se-26b02e60" data-slate-type="list" data-slate-object="block" data-key="707"> 
<div class="se-664c49d2 se-195455ec" data-slate-type="list-line" data-slate-object="block" 
data-key="708"> <span data-slate-object="text" data-key="709"><span data-slate-leaf="true" 
data-offset-key="709:0" data-first-offset="true"><span data-slate-string="true">我们今天比较了常见的配置方式，其中一个是使用源代码中的常量，另一个是使用 
Web 应用的运行参数，你觉得这两个各有什么优劣，各适合怎样的场景？</span></span></span> </div> <div class="se-478a4160 se-97029b31" 
data-slate-type="list-line" data-slate-object="block" data-key="710"> <span data-slate-object="text" 
data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" data-first-offset="true"><span 
data-slate-string="true">有程序员朋友认为，大型 Web 应用应该尽量少用代码层面的配置，而是把这些变化的部分放到独立的配置服务中，这样软件会比较灵活，修改简便，适合各式各样的场景。你觉得这个说法对吗？</span></span></span> 
</div> </div> <div class="se-acf065af " data-slate-type="paragraph" data-slate-object="block" 
data-key="712"> <span data-slate-object="text" data-key="713"><span data-slate-leaf="true" 
data-offset-key="713:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文内容就到这里，下面是选修课堂。今天的选修课堂我想继续顺着 
Ops 往下谈，来讲一讲程序员的“独立性”，而 Ops，恰好就是独立性的一大标志。</span></span></span> </div> <h2 class="se-41559241" 
data-slate-type="heading" data-slate-object="block" data-key="714"><span data-slate-object="text" 
data-key="715"><span data-slate-leaf="true" data-offset-key="715:0" data-first-offset="true"><span 
data-slate-string="true">选修课堂：程序员的“独立性”</span></span></span></h2> <div class="se-5984adf6 " 
data-slate-type="paragraph" data-slate-object="block" data-key="716"> <span data-slate-object="text" 
data-key="717"><span data-slate-leaf="true" data-offset-key="717:0" data-first-offset="true"><span 
data-slate-string="true">几乎所有的软件工程师，都会写代码，都会做测试，但是做项目的“独立性”是大相径庭的，这也是容易让人忽略的部分，但却是一个“程序员”向“工程师”蜕变的标志。“独立性”在一定程度上决定了软件工程师的单兵作战能力，而对于全栈工程师来说，尤其如此。我们在技术上精进的同时，也需要提升独立完成项目的能力。而今天我们开始接触的 
Ops，恰恰是程序员独立性提升的一个重要部分。我认为，软件工程的“独立性”可以分成这样几个阶段（再次强调一下这并不是从编程能力上来分的）。</span></span></span> 
</div> <h3 class="se-3233bd1e" data-slate-type="heading" data-slate-object="block" data-key="718"><span 
data-slate-object="text" data-key="719"><span data-slate-leaf="true" data-offset-key="719:0" 
data-first-offset="true"><span data-slate-string="true">第一阶段：编码工作者</span></span></span></h3> 
<div class="se-38d14785 " data-slate-type="paragraph" data-slate-object="block" data-key="720"> 
<span data-slate-object="text" data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" 
data-first-offset="true"><span data-slate-string="true">拿到详细的设计文档，上面连许多方法接口都定义好了。写一些实现，调用一些既定的 
API，然后根据设计文档来实现测试。这种情况很常见，比如在某些外包公司，就是如此。编码能力得到了一定的锻炼，但这扼杀了大部分的创造力，长此以往也许最终只能成为一个熟练工。我相信短期内这是一个可行的选择，但是从程序员成长的角度来看，这个阶段是一定要迈过去的。</span></span></span> 
</div> <h3 class="se-e826d4e3" data-slate-type="heading" data-slate-object="block" data-key="722"><span 
data-slate-object="text" data-key="723"><span data-slate-leaf="true" data-offset-key="723:0" 
data-first-offset="true"><span data-slate-string="true">第二阶段：需求的独立实现者</span></span></span></h3> 
<div class="se-349cc917 " data-slate-type="paragraph" data-slate-object="block" data-key="724"> 
<span data-slate-object="text" data-key="725"><span data-slate-leaf="true" data-offset-key="725:0" 
data-first-offset="true"><span data-slate-string="true">拿到了粗略的设计文档，需求和业务也已经大致描述清楚，接下去要做的就是发挥聪明才智把软件设计好，把代码写好，通过测试。在具备简单沟通的基础上，这项工作可以在安静和独立的环境中完成，因为项目经理、架构师和产品经理已经把那些复杂的技术或业务难题搞定了。这样的环境下，可以诞生许许多多代码设计优秀、实现逻辑清晰简洁的程序员，但是这始终只是在做一个“残缺”的项目而已。在大厂，无论国内外，很多程序员新手都是从这个阶段开始的。那从这个阶段开始，Ops 
的工作就显山露水了，每天大量的安装、配置、部署工作，无论是在开发还是测试环境。</span></span></span> </div> <h3 class="se-5b2e4e4d" 
data-slate-type="heading" data-slate-object="block" data-key="726"><span data-slate-object="text" 
data-key="727"><span data-slate-leaf="true" data-offset-key="727:0" data-first-offset="true"><span 
data-slate-string="true">第三阶段：项目沟通者和管控者</span></span></span></h3> <div class="se-0e68a642 " 
data-slate-type="paragraph" data-slate-object="block" data-key="728"> <span data-slate-object="text" 
data-key="729"><span data-slate-leaf="true" data-offset-key="729:0" data-first-offset="true"><span 
data-slate-string="true">程序员要和产品经理，甚至客户澄清需求；需要自行分析可行性，明确项目中的技术和业务难点；参与决定和管理迭代周期和计划表；组织和参与项目组内运作跟踪会议。编码以外的事情会占用相当多的时间，而且这些时间往往会用在各种沟通上。到了这个阶段的程序员，通常已经成为了团队中的顶梁柱。</span></span></span> 
</div> <h3 class="se-3faba04c" data-slate-type="heading" data-slate-object="block" data-key="730"><span 
data-slate-object="text" data-key="731"><span data-slate-leaf="true" data-offset-key="731:0" 
data-first-offset="true"><span data-slate-string="true">第四阶段：从做项目到做产品</span></span></span></h3> 
<div class="se-4651af56 " data-slate-type="paragraph" data-slate-object="block" data-key="732"> 
<span data-slate-object="text" data-key="733"><span data-slate-leaf="true" data-offset-key="733:0" 
data-first-offset="true"><span data-slate-string="true">从做项目到做产品，区别是什么？做项目只需要做好一次或者很少的几次交付就可以了，而产品，则是要倾注心血于它的整个生命周期。做项目需要更多倾听用户需求，但是做产品更注重思考，思考用户的痛点和产品的定位远重于倾听用户表述，要把更多的精力花在产品定义、设计，思考怎样把技术、业务落地到产品实现上。在发布以后，如果幸运的话，产品会有一个漫长的迭代和维护周期，Ops 
工作也很可能成为你的重心，你会把主要的时间都投入到这里。</span></span></span> </div> <h3 class="se-e68ef716" data-slate-type="heading" 
data-slate-object="block" data-key="734"><span data-slate-object="text" data-key="735"><span 
data-slate-leaf="true" data-offset-key="735:0" data-first-offset="true"><span data-slate-string="true">第五阶段：产品成长的见证人</span></span></span></h3> 
<div class="se-d8f6f545 " data-slate-type="paragraph" data-slate-object="block" data-key="736"> 
<span data-slate-object="text" data-key="737"><span data-slate-leaf="true" data-offset-key="737:0" 
data-first-offset="true"><span data-slate-string="true">也许很少人能够参与从零开始，经过创意、市场分析到产品设计的过程。在明确要做什么之前，程序员有大量的时间会花在产品探索性的工作上面。也许会做很多的产品原型，也许某些版本和功能在 
A/B 测试之后就被放弃了，更有些产品在流传开来以前就销声匿迹了，或者很快就死在了抄袭和山寨手里。产品的更迭和换代总是千辛万苦，而看得到的部分往往如此简单，但是谁又知道它的历史有多曲折呢？</span></span></span> 
</div> <div class="se-4ea78524 " data-slate-type="paragraph" data-slate-object="block" data-key="738"> 
<span data-slate-object="text" data-key="739"><span data-slate-leaf="true" data-offset-key="739:0" 
data-first-offset="true"><span data-slate-string="true">好，到这里，我想问一下，正在阅读的你，处于程序员“独立性”的哪个阶段呢？</span></span></span> 
</div> <h2 class="se-76e082f7" data-slate-type="heading" data-slate-object="block" data-key="740"><span 
data-slate-object="text" data-key="741"><span data-slate-leaf="true" data-offset-key="741:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-db8b1a6d" data-slate-type="list" data-slate-object="block" data-key="742"> <div class="se-c943921d 
se-808a3326" data-slate-type="list-line" data-slate-object="block" data-key="743"> <span data-slate-object="text" 
data-key="744"><span data-slate-leaf="true" data-offset-key="744:0" data-first-offset="true"><span 
data-slate-string="true">当 Operation 和 Development 相遇，DevOps 就是它们碰撞产生的火花。你可能已经听过 DevOps 无数次了，但是，如果你并不是很清楚它意味着什么的话，那么我推荐你阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="745" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="746"><span data-slate-leaf="true" data-offset-key="746:0" 
data-first-offset="true"><span data-slate-string="true">什么是 DevOps？</span></span></span></a><span 
data-slate-object="text" data-key="747"><span data-slate-leaf="true" data-offset-key="747:0" 
data-first-offset="true"><span data-slate-string="true">以及 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="748" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="749"><span data-slate-leaf="true" data-offset-key="749:0" data-first-offset="true"><span 
data-slate-string="true">DevOps: Breaking the Development-Operations barrier</span></span></span></a><span 
data-slate-object="text" data-key="750"><span data-slate-leaf="true" data-offset-key="750:0" 
data-first-offset="true"><span data-slate-string="true"> 这两篇文章。</span></span></span> </div> 
<div class="se-89446164 se-b72f3ca2" data-slate-type="list-line" data-slate-object="block" 
data-key="751"> <span data-slate-object="text" data-key="752"><span data-slate-leaf="true" 
data-offset-key="752:0" data-first-offset="true"><span data-slate-string="true">文中简单介绍了反向代理，而它是几乎每个基于 
Web 的全栈工程师都会接触的，维基百科的</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="753" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" data-key="754"><span 
data-slate-leaf="true" data-offset-key="754:0" data-first-offset="true"><span data-slate-string="true">页面</span></span></span></a><span 
data-slate-object="text" data-key="755"><span data-slate-leaf="true" data-offset-key="755:0" 
data-first-offset="true"><span data-slate-string="true">介绍了它常见的功能。</span></span></span> </div> 
<div class="se-a81c284a se-0bd4f758" data-slate-type="list-line" data-slate-object="block" 
data-key="756"> <span data-slate-object="text" data-key="757"><span data-slate-leaf="true" 
data-offset-key="757:0" data-first-offset="true"><span data-slate-string="true">关于 Nginx，对于它配置的具体含义，如果想了解的话，除了</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="758" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="759"><span data-slate-leaf="true" data-offset-key="759:0" 
data-first-offset="true"><span data-slate-string="true">官方的文档例子</span></span></span></a><span 
data-slate-object="text" data-key="760"><span data-slate-leaf="true" data-offset-key="760:0" 
data-first-offset="true"><span data-slate-string="true">以外，</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="761" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="762"><span data-slate-leaf="true" data-offset-key="762:0" data-first-offset="true"><span 
data-slate-string="true">nginxconfig.io</span></span></span></a><span data-slate-object="text" 
data-key="763"><span data-slate-leaf="true" data-offset-key="763:0" data-first-offset="true"><span 
data-slate-string="true"> 这个网站可以通过简单的配置，直观、清晰地生成和比较相应的配置文件。</span></span></span> </div> <div 
class="se-2a17606e se-1eee8d53" data-slate-type="list-line" data-slate-object="block" data-key="764"> 
<span data-slate-object="text" data-key="765"><span data-slate-leaf="true" data-offset-key="765:0" 
data-first-offset="true"><span data-slate-string="true">有一篇 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="766" class="se-bd151211 se-8ce28dd5"><span data-slate-object="text" 
data-key="767"><span data-slate-leaf="true" data-offset-key="767:0" data-first-offset="true"><span 
data-slate-string="true">Top 5 configuration management tools</span></span></span></a><span 
data-slate-object="text" data-key="768"><span data-slate-leaf="true" data-offset-key="768:0" 
data-first-offset="true"><span data-slate-string="true"> 文章介绍了 5 种常见的配置管理工具，推荐阅读，中文译文在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="769" class="se-bd151211 se-8ce28dd5"><span 
data-slate-object="text" data-key="770"><span data-slate-leaf="true" data-offset-key="770:0" 
data-first-offset="true"><span data-slate-string="true">这里</span></span></span></a><span data-slate-object="text" 
data-key="771"><span data-slate-leaf="true" data-offset-key="771:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> </div> <div class="se-011c58a2" data-slate-type="image" 
data-slate-object="block" data-key="772"> <img class="se-253c36c9" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 2 msec}
2020-11-19 11:10:54.756 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=18 
 {executed in 0 msec}
2020-11-19 11:10:54.757 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:54.758 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=18 
 {executed in 1 msec}
2020-11-19 11:10:54.758 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:10:54.759 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755454, 1605755454, 1, 'zh-hans', 0, 1, 1, 
0, '28丨Ops三部曲之一：配置管理', 1, 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.762 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=18 
 {executed in 0 msec}
2020-11-19 11:10:54.763 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:54.764 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755454, 1605755454, 1, 'zh-hans', 0, 
1, 1, 0, '28丨Ops三部曲之一：配置管理', 'book', 1, 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.767 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 11:10:54.767 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.768 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.768 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.769 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/55eca4c8af437379e2a22b23718482c6?bkt=en-82d2bca2fdceac3f9e2ca937f93834a320f7708122de744e086323d36a73a913fdeceeb30da36c31&fid=3757516097-778750-390748120639381&time=1605755453&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-h%2FOxHbpm3wBA4bs%2FeeqVComkVfI%3D&to=92&size=15377035&sta_dx=15377035&sta_cs=3296&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074433&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15377035&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ded070496cc6a1df8df64e462d43ecd25701c3c997673311b30b02e5c04e6179c7e78fb8c9abc550&sl=76480590&expires=8h&rt=pr&r=120671741&mlogid=7502087302540145500&vbdid=2247232042&fin=28%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%80%EF%BC%9A%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.m4a&bflag=92,34-92&rtype=1&dp-logid=7502087302540145500&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b067f3365502e664e42d7dc28bc7b5907&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=28%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%80%EF%BC%9A%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.m4a', 
18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.773 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.774 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.775 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/55eca4c8af437379e2a22b23718482c6?bkt=en-82d2bca2fdceac3f9e2ca937f93834a320f7708122de744e086323d36a73a913fdeceeb30da36c31&fid=3757516097-778750-390748120639381&time=1605755453&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-h%2FOxHbpm3wBA4bs%2FeeqVComkVfI%3D&to=92&size=15377035&sta_dx=15377035&sta_cs=3296&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1574074433&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15377035&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ded070496cc6a1df8df64e462d43ecd25701c3c997673311b30b02e5c04e6179c7e78fb8c9abc550&sl=76480590&expires=8h&rt=pr&r=120671741&mlogid=7502087302540145500&vbdid=2247232042&fin=28%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%80%EF%BC%9A%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.m4a&bflag=92,34-92&rtype=1&dp-logid=7502087302540145500&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=50dc2888c529211b067f3365502e664e42d7dc28bc7b5907&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=28%E4%B8%A8Ops%E4%B8%89%E9%83%A8%E6%9B%B2%E4%B9%8B%E4%B8%80%EF%BC%9A%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.m4a', 
18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.780 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.781 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.781 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.782 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.783 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 自己处在独立性的哪个阶段？ <br> <br>在银行的省级分行工作，因为人手不多，所以五个阶段哪个都干过。 <br> 
<br>第四个阶段回忆一下，应该是从16年发端的。项目诞生之初，出发点很简单。但是随着业务和监管的变化，功能不断增多。加上最初设计结构（不能叫架构，因为一开始的目的很单一，虽然涉及到的模块很多）带来的约束和当初对扩展性的考虑，在新增功能时，这个系统就像小说里的人物一样，开始有了自己的性格，按照诞生时被注入的逻辑不断生长。业务最终有一天会涨到需要被重构的时候。 
<br> <br>第五个阶段是从去年开始的，因为直接和一般用户而非银行特定用户打交到，在设计上有了很多实验和探索，基于分行的现状和特点对系统提出了很多定位。同时也产生了更多的想法和思考，希望它可以更好的长大。 
<br> <br>也正是这个项目，让自己有了全栈的需要。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.789 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.790 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.791 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-13 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 自己处在独立性的哪个阶段？ <br> <br>在银行的省级分行工作，因为人手不多，所以五个阶段哪个都干过。 <br> 
<br>第四个阶段回忆一下，应该是从16年发端的。项目诞生之初，出发点很简单。但是随着业务和监管的变化，功能不断增多。加上最初设计结构（不能叫架构，因为一开始的目的很单一，虽然涉及到的模块很多）带来的约束和当初对扩展性的考虑，在新增功能时，这个系统就像小说里的人物一样，开始有了自己的性格，按照诞生时被注入的逻辑不断生长。业务最终有一天会涨到需要被重构的时候。 
<br> <br>第五个阶段是从去年开始的，因为直接和一般用户而非银行特定用户打交到，在设计上有了很多实验和探索，基于分行的现状和特点对系统提出了很多定位。同时也产生了更多的想法和思考，希望它可以更好的长大。 
<br> <br>也正是这个项目，让自己有了全栈的需要。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.795 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.795 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.796 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.796 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.797 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 18, 'https://static001.geekbang.org/resource/image/8b/40/8b9b89d09859242982e8c7535785e040.jpg', 
18) 
 {executed in 0 msec}
2020-11-19 11:10:54.803 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=18 
 {executed in 0 msec}
2020-11-19 11:10:54.803 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.804 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 18, 'https://static001.geekbang.org/resource/image/8b/40/8b9b89d09859242982e8c7535785e040.jpg', 
18) 
 {executed in 0 msec}
2020-11-19 11:10:54.809 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 11:10:54.809 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:54.811 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 18, 18) 
 {executed in 1 msec}
2020-11-19 11:10:54.815 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=18 
 {executed in 1 msec}
2020-11-19 11:10:54.815 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:54.816 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 18, 18) 
 {executed in 0 msec}
2020-11-19 11:10:54.820 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='558147237664480' 
 {executed in 0 msec}
2020-11-19 11:10:54.821 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.821 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755454, 1) 
 {executed in 0 msec}
2020-11-19 11:10:54.821 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755454, 1) 
 {executed in 0 msec}
2020-11-19 11:10:54.822 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|19            |
|--------------|

2020-11-19 11:10:54.826 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '20c2bad6-83d0-4a26-ad3f-71c160d22e43', 
19) 
 {executed in 0 msec}
2020-11-19 11:10:54.826 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '20c2bad6-83d0-4a26-ad3f-71c160d22e43', 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.826 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|19            |
|--------------|

2020-11-19 11:10:54.831 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=19, revision_default=1, revision_timestamp=1605755454, 
revision_uid=1 where vid=19 
 {executed in 0 msec}
2020-11-19 11:10:54.835 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.835 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.836 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '558147237664480', 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.840 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.840 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:10:54.841 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '558147237664480', 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.844 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=19 
 {executed in 0 msec}
2020-11-19 11:10:54.844 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:54.845 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=19 
 {executed in 0 msec}
2020-11-19 11:10:54.845 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:10:54.846 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 19, 0, 0, 0, 1, 0, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.849 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 11:10:54.849 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.850 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.850 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.852 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 11:10:54.854 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.855 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:10:54.856 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.859 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=19 
 {executed in 1 msec}
2020-11-19 11:10:54.859 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:54.860 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=19 
 {executed in 0 msec}
2020-11-19 11:10:54.860 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:10:54.861 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755454, 1605755454, 1, 'zh-hans', 0, 1, 1, 
0, '04丨第四章 数据持久化 (7讲)', 1, 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.866 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=19 
 {executed in 1 msec}
2020-11-19 11:10:54.866 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:10:54.868 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755454, 1605755454, 1, 'zh-hans', 0, 
1, 1, 0, '04丨第四章 数据持久化 (7讲)', 'book', 1, 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.872 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.873 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.873 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.874 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.875 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.878 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=19 
 {executed in 1 msec}
2020-11-19 11:10:54.878 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:10:54.880 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.883 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.884 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.884 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.885 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.886 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 11:10:54.888 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.889 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:10:54.890 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.893 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.893 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.894 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.894 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.896 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 19, '', 19) 
 {executed in 1 msec}
2020-11-19 11:10:54.898 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.899 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:10:54.900 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 19, '', 19) 
 {executed in 0 msec}
2020-11-19 11:10:54.907 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.907 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:54.909 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 19, 19) 
 {executed in 1 msec}
2020-11-19 11:10:54.912 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=19 
 {executed in 0 msec}
2020-11-19 11:10:54.913 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:10:54.914 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 19, 19) 
 {executed in 0 msec}
2020-11-19 11:11:32.668 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='743501003639090' 
 {executed in 0 msec}
2020-11-19 11:11:32.669 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:11:32.671 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755492, 1) 
 {executed in 0 msec}
2020-11-19 11:11:32.672 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755492, 1) 
 {executed in 0 msec}
2020-11-19 11:11:32.672 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|20            |
|--------------|

2020-11-19 11:11:32.680 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '6d399125-d5bb-4182-b971-580c7810a103', 
20) 
 {executed in 0 msec}
2020-11-19 11:11:32.680 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '6d399125-d5bb-4182-b971-580c7810a103', 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.681 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|20            |
|--------------|

2020-11-19 11:11:32.684 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=20, revision_default=1, revision_timestamp=1605755492, 
revision_uid=1 where vid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.689 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.689 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:11:32.690 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '743501003639090', 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.693 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.693 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:11:32.694 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '743501003639090', 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.697 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.697 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:11:32.698 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.698 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:11:32.699 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 20, 0, 0, 19, 0, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.702 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.702 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:11:32.703 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.703 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:11:32.706 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1948" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-d7531076 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1949"> <span data-slate-object="text" data-key="1950"><span data-slate-leaf="true" 
data-offset-key="1950:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-f34c857d " data-slate-type="paragraph" data-slate-object="block" data-key="1951"> 
<span data-slate-object="text" data-key="1952"><span data-slate-leaf="true" data-offset-key="1952:0" 
data-first-offset="true"><span data-slate-string="true">又到了特别放送时间，今天我想聊一聊代码审查（Code Review）。在软件工程师日常的开发工作中，</span></span></span><span 
data-slate-object="text" data-key="1953"><span data-slate-leaf="true" data-offset-key="1953:0" 
data-first-offset="true"><span class="se-a3686360" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果要挑出一项极其重要，却又很容易被忽视的工作，在我看来代码审查几乎是无可争议的第一。</span></span></span></span> 
</div> <div class="se-f4127856 " data-slate-type="paragraph" data-slate-object="block" data-key="1954"> 
<span data-slate-object="text" data-key="1955"><span data-slate-leaf="true" data-offset-key="1955:0" 
data-first-offset="true"><span data-slate-string="true">代码审查是一个低投入、高产出的开发活动，就我个人而言，我从其中学到的习惯、方法和知识，让我获益匪浅。但是，我也在微博、微信上看到程序员朋友们争论代码审查的必要性，甚至包括很多大厂的程序员，还有一些有着许多年经验的程序员。</span></span></span> 
</div> <div class="se-e1ab63cf " data-slate-type="paragraph" data-slate-object="block" data-key="1956"> 
<span data-slate-object="text" data-key="1957"><span data-slate-leaf="true" data-offset-key="1957:0" 
data-first-offset="true"><span data-slate-string="true">一开始我觉得有些不可思议，和代价相比，代码审查的好处实在太多了，这有必要费那么大心思去讨论这个必要性吗？后来我意识到，</span></span></span><span 
data-slate-object="text" data-key="1958"><span data-slate-leaf="true" data-offset-key="1958:0" 
data-first-offset="true"><span class="se-1f58401f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">造成这个争论的原因，既包括缺乏对于代码审查好处的认识，也包括一些因果逻辑上的混淆。</span></span></span></span><span 
data-slate-object="text" data-key="1959"><span data-slate-leaf="true" data-offset-key="1959:0" 
data-first-offset="true"><span data-slate-string="true">我想，今天的特别放送，我就来把代码审查这个事儿聊清楚，希望它能成为你日常开发工作当中认真对待的必选项。</span></span></span> 
</div> <div class="se-3cd07a10 " data-slate-type="paragraph" data-slate-object="block" data-key="1960"> 
<span data-slate-object="text" data-key="1961"><span data-slate-leaf="true" data-offset-key="1961:0" 
data-first-offset="true"><span data-slate-string="true">那值得一提的是，对于全栈工程师而言，代码审查又有一点特殊性。因为我们经常要写多个层面的代码，包括前端代码 
HTML、CSS、JavaScript，后端逻辑，比如 Java 或者 Python，还很可能写很多的脚本代码，比如 Shell，做各种各样的配置，像是和基于 XML、JSON 的配置文件打交道，还很可能使用 
SQL 写持久层的逻辑。这些代码中，既包括命令式的代码，也包括声明式的代码。由于涉及到的代码类型比较广泛，代码审查者就自然会和不同的团队或项目中的角色打交道，也需要在不同的思维模式之间来回切换。</span></span></span> 
</div> <h2 class="se-b251eef3" data-slate-type="heading" data-slate-object="block" data-key="1962"><span 
data-slate-object="text" data-key="1963"><span data-slate-leaf="true" data-offset-key="1963:0" 
data-first-offset="true"><span data-slate-string="true">代码审查的流程</span></span></span></h2> <div 
class="se-fbab5116 " data-slate-type="paragraph" data-slate-object="block" data-key="1964"> 
<span data-slate-object="text" data-key="1965"><span data-slate-leaf="true" data-offset-key="1965:0" 
data-first-offset="true"><span data-slate-string="true">先来简单介绍一下常见的代码审查的流程。为了开发某个新特性，或者修复某个特定问题，负责的程序员会从代码库的主分支（master 
branch）上面建立并 check out 一个新的分支，将工作分为一次到若干次的“代码变更”来提交。这每一次的代码变更，都可以组成一次代码审查的单元，有的公司把它叫做 CR（Code 
Change），有的叫做 PR（Pull Request），还有的叫做 CL（Change List），但无论叫做什么，它一般至少包含这么几项内容：</span></span></span> 
</div> <div class="se-43eddf05" data-slate-type="list" data-slate-object="block" data-key="1966"> 
<div class="se-3e93b622 se-3537de32" data-slate-type="list-line" data-slate-object="block" 
data-key="1967"> <span data-slate-object="text" data-key="1968"><span data-slate-leaf="true" 
data-offset-key="1968:0" data-first-offset="true"><span class="se-a76cb9a1" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">帮助理解代码的描述</span></span></span></span><span 
data-slate-object="text" data-key="1969"><span data-slate-leaf="true" data-offset-key="1969:0" 
data-first-offset="true"><span data-slate-string="true">，如果有问题单（任务）来跟踪，需要包括相关的问题单号或者问题单链接；</span></span></span> 
</div> <div class="se-d4ce3b48 se-ebde9687" data-slate-type="list-line" data-slate-object="block" 
data-key="1970"> <span data-slate-object="text" data-key="1971"><span data-slate-leaf="true" 
data-offset-key="1971:0" data-first-offset="true"><span class="se-7de684f3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">实际的代码变更主体</span></span></span></span><span 
data-slate-object="text" data-key="1972"><span data-slate-leaf="true" data-offset-key="1972:0" 
data-first-offset="true"><span data-slate-string="true">，包括实际的代码和配置；</span></span></span> </div> 
<div class="se-fab01463 se-b86f553a" data-slate-type="list-line" data-slate-object="block" 
data-key="1973"> <span data-slate-object="text" data-key="1974"><span data-slate-leaf="true" 
data-offset-key="1974:0" data-first-offset="true"><span class="se-bdf6b18b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">测试和结果</span></span></span></span><span 
data-slate-object="text" data-key="1975"><span data-slate-leaf="true" data-offset-key="1975:0" 
data-first-offset="true"><span data-slate-string="true">，根据项目的情况，它可以具备不同形式，比如单元测试代码，以及手工测试等其它测试执行的结果说明。</span></span></span> 
</div> </div> <div class="se-77873632 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1976"> <span data-slate-object="text" data-key="1977"><span data-slate-leaf="true" 
data-offset-key="1977:0" data-first-offset="true"><span data-slate-string="true">多数情况下，以上这三项都不可或缺，缺少任何一项都会让代码变更失去一定可审查的价值。</span></span></span> 
</div> <div class="se-0a1adfa7 " data-slate-type="paragraph" data-slate-object="block" data-key="1978"> 
<span data-slate-object="text" data-key="1979"><span data-slate-leaf="true" data-offset-key="1979:0" 
data-first-offset="true"><span data-slate-string="true">进行审查的，一般是一起工作的，对代码涉及变更熟悉的其他程序员。这个“熟悉”，既包括业务，也包括技术，二者当中，有一项不具备，就很难做好审查工作，给出有建设性的审查意见。</span></span></span> 
</div> <div class="se-7e6dae67 " data-slate-type="paragraph" data-slate-object="block" data-key="1980"> 
<span data-slate-object="text" data-key="1981"><span data-slate-leaf="true" data-offset-key="1981:0" 
data-first-offset="true"><span data-slate-string="true">接下去的交互就在这个代码变更上面了，审查者会提出其问题和建议，变更的作者会选择性采纳并改进变更的描述、代码主体以及测试。</span></span></span><span 
data-slate-object="text" data-key="1982"><span data-slate-leaf="true" data-offset-key="1982:0" 
data-first-offset="true"><span class="se-a04fd442" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">双方思考、争辩，以及妥协，目的都是寻求一个切合实际且可以改进代码质量的平衡。</span></span></span></span> 
</div> <div class="se-cf790bc3 " data-slate-type="paragraph" data-slate-object="block" data-key="1983"> 
<span data-slate-object="text" data-key="1984"><span data-slate-leaf="true" data-offset-key="1984:0" 
data-first-offset="true"><span data-slate-string="true">如果审查的程序员觉得代码没有太多问题，就会盖上一个“Approved”或者“Shipped”戳，表示认可和通过。这根据项目而定，一般代码变更最少要得到 
1~3 个这样的认可，才可以将代码变更合并（merge）到主分支。而主分支的代码，会随着 CI/CD 的流程进入自动化的测试程序，并部署上线（关于这部分你可以参阅 [第 30 讲]）。</span></span></span> 
</div> <h2 class="se-a49ee0e8" data-slate-type="heading" data-slate-object="block" data-key="1985"><span 
data-slate-object="text" data-key="1986"><span data-slate-leaf="true" data-offset-key="1986:0" 
data-first-offset="true"><span data-slate-string="true">常见的争议</span></span></span></h2> <div 
class="se-df5ebb62 " data-slate-type="paragraph" data-slate-object="block" data-key="1987"> 
<span data-slate-object="text" data-key="1988"><span data-slate-leaf="true" data-offset-key="1988:0" 
data-first-offset="true"><span data-slate-string="true">在介绍代码审查的好处之前，我想先来谈谈争议。因为我观察到</span></span></span><span 
data-slate-object="text" data-key="1989"><span data-slate-leaf="true" data-offset-key="1989:0" 
data-first-offset="true"><span class="se-37694582" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">大多数的争议，都不是在否认代码审查的好处，而是聚焦在不进行代码审查的那些“原因”</span></span></span></span><span 
data-slate-object="text" data-key="1990"><span data-slate-leaf="true" data-offset-key="1990:0" 
data-first-offset="true"><span data-slate-string="true"> 或者 “借口”上，而有些讽刺的是，我认为</span></span></span><span 
data-slate-object="text" data-key="1991"><span data-slate-leaf="true" data-offset-key="1991:0" 
data-first-offset="true"><span class="se-008340cc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这里面大部分的“原因”，所代表着的因果关系并不成立</span></span></span></span><span data-slate-object="text" 
data-key="1992"><span data-slate-leaf="true" data-offset-key="1992:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-7d5c946b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1993"> <span data-slate-object="text" data-key="1994"><span 
data-slate-leaf="true" data-offset-key="1994:0" data-first-offset="true"><span class="se-26baca3f" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 加班要累死了，完成项目都来不及，还做什么代码审查？</span></span></span></span> 
</div> <div class="se-4bf5f240 " data-slate-type="paragraph" data-slate-object="block" data-key="1995"> 
<span data-slate-object="text" data-key="1996"><span data-slate-leaf="true" data-offset-key="1996:0" 
data-first-offset="true"><span data-slate-string="true">类似的问题还有，“代码审查拖慢了进度”，“代码审查不利于快速上线”。这是最常见的不做代码审查，或者草草进行代码审查的理由了，但是稍稍一细想，就会发现这里的因果逻辑完全不对。</span></span></span> 
</div> <div class="se-b65f0295 " data-slate-type="paragraph" data-slate-object="block" data-key="1997"> 
<span data-slate-object="text" data-key="1998"><span data-slate-leaf="true" data-offset-key="1998:0" 
data-first-offset="true"><span data-slate-string="true">这就像以前国内大兴“敏捷”的时候，有好多程序员，甚至项目经理，觉得因为项目时间紧才要实施敏捷，因为可以少写文档，少做测试，随意变更需求，可这里的因为所以根本是牛头不对马嘴。我记得知乎上有句流行的话叫做，“先问是不是，再问为什么”，这里也可以用，因为项目压力大就让“不做代码审查”来承担后果，这实在是过于牵强了。</span></span></span> 
</div> <div class="se-0e642ade " data-slate-type="paragraph" data-slate-object="block" data-key="1999"> 
<span data-slate-object="text" data-key="2000"><span data-slate-leaf="true" data-offset-key="2000:0" 
data-first-offset="true"><span data-slate-string="true">项目压力大，时间紧，可以草草做分析，不做设计，直接编码，不做重构、不做测试、不做审查，直接上线，快及一时，可是造成的损失，最后总是要有谁来背锅的。这个锅很可能，就是上线后无尽的问题，就是恶性循环加班加点地改问题，就是代码一个版本比一个版本烂。当这些问题都焦头烂额，就更不要说团队和程序员的成长了。</span></span></span> 
</div> <div class="se-b3abb2a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2001"> 
<span data-slate-object="text" data-key="2002"><span data-slate-leaf="true" data-offset-key="2002:0" 
data-first-offset="true"><span class="se-5d386501" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 代码审查太费时间，改来改去无非是一些格式、注释、命名之类不痛不痒的问题。</span></span></span></span> 
</div> <div class="se-a7e4767a " data-slate-type="paragraph" data-slate-object="block" data-key="2003"> 
<span data-slate-object="text" data-key="2004"><span data-slate-leaf="true" data-offset-key="2004:0" 
data-first-offset="true"><span data-slate-string="true">这也是个逻辑不通的论述，虽然这个还比前面那个稍微好一点。只能提出这些“次要问题”，很可能是代码审查的能力不够，而并非代码审查没有价值；或者是代码审查的力度不够，只能提出一些浅表的问题，这个现象其实更为普遍。</span></span></span> 
</div> <div class="se-0ed12fc6 " data-slate-type="paragraph" data-slate-object="block" data-key="2005"> 
<span data-slate-object="text" data-key="2006"><span data-slate-leaf="true" data-offset-key="2006:0" 
data-first-offset="true"><span data-slate-string="true">前面已经介绍过了，</span></span></span><span 
data-slate-object="text" data-key="2007"><span data-slate-leaf="true" data-offset-key="2007:0" 
data-first-offset="true"><span class="se-bedbeb33" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">一是技术，二是业务，二者缺一都无法做出比较好的审查。</span></span></span></span><span data-slate-object="text" 
data-key="2008"><span data-slate-leaf="true" data-offset-key="2008:0" data-first-offset="true"><span 
data-slate-string="true">在某些特殊情况下，有时候确实不具备完备的代码审查条件，我们现在来分业务、技术欠缺的情况进行讨论。</span></span></span> 
</div> <div class="se-3b5188e7 " data-slate-type="paragraph" data-slate-object="block" data-key="2009"> 
<span data-slate-object="text" data-key="2010"><span data-slate-leaf="true" data-offset-key="2010:0" 
data-first-offset="true"><span data-slate-string="true">如果团队中有业务达人，但是技术能力不足。比如说，新版本使用的是 Scala 
来实现的，但是团队中没有精通 Scala 的程序员，这个时候可以寻找其它团队有 Scala 经验的程序员来重点进行技术层面的代码审查，而自己团队则主要关注于业务逻辑层面。当然，既然是自己团队的代码，所用到的技术要慢慢补起来。</span></span></span> 
</div> <div class="se-44e74fb2 " data-slate-type="paragraph" data-slate-object="block" data-key="2011"> 
<span data-slate-object="text" data-key="2012"><span data-slate-leaf="true" data-offset-key="2012:0" 
data-first-offset="true"><span data-slate-string="true">如果团队的成员具备技术能力，但是业务不了解。这种情况也可以进行将业务和技术分开审查这样的类似处理，但是如果业务相对复杂，可以先开一个预审查会，就着代码或者设计文档，简单地将业务逻辑介绍和讨论清楚，再进行审查。</span></span></span> 
</div> <div class="se-79df13c4 " data-slate-type="paragraph" data-slate-object="block" data-key="2013"> 
<span data-slate-object="text" data-key="2014"><span data-slate-leaf="true" data-offset-key="2014:0" 
data-first-offset="true"><span class="se-7649458d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 团队的习惯和流程就是不做代码审查，大家都是这么过来的。</span></span></span></span> </div> 
<div class="se-25d11d0b " data-slate-type="paragraph" data-slate-object="block" data-key="2015"> 
<span data-slate-object="text" data-key="2016"><span data-slate-leaf="true" data-offset-key="2016:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这也不是一个论述不应该做代码审查的正当理由，类似的还有“绩效考评又不提代码审查”，以及“我上班、码代码、下班、拿钱，审查代码干什么”。大家都不做，并不代表不做就是正确的，如果你赞同代码审查的好处和必要性，那么你的思考会告诉你，应该做这件事情，大家不做并不是一个理由。</span></span></span> 
</div> <div class="se-ba3f6627 " data-slate-type="paragraph" data-slate-object="block" data-key="2017"> 
<span data-slate-object="text" data-key="2018"><span data-slate-leaf="true" data-offset-key="2018:0" 
data-first-offset="true"><span data-slate-string="true">如果你发现这件事很难推动，你可以尝试去和你的项目经理聊一聊，或者结合自己的项目以及下面会讲到的代码审查的好处论一论，看看是不是能说服那些没有意识到代码审查好处的程序员和项目经理。当然，这是另外和人沟通以及表达自己观点的事情，如果大家都是朴素的干活拿钱的观点，没有对于代码质量和个人发展更高的追求，或者价值观和你相距十万八千里，改变很困难，你就应该好好思考是不是应该选择更好的团队了。</span></span></span> 
</div> <div class="se-d639e4fa " data-slate-type="paragraph" data-slate-object="block" data-key="2019"> 
<span data-slate-object="text" data-key="2020"><span data-slate-leaf="true" data-offset-key="2020:0" 
data-first-offset="true"><span class="se-8a3a2dab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">4. 代码审查不利于团建，因为经常有程序员因为观点不同在代码审查的时候吵起来。</span></span></span></span> 
</div> <div class="se-73bd485f " data-slate-type="paragraph" data-slate-object="block" data-key="2021"> 
<span data-slate-object="text" data-key="2022"><span data-slate-leaf="true" data-offset-key="2022:0" 
data-first-offset="true"><span data-slate-string="true">这依然不是一个正当理由，这就好像说“因为开车容易出交通事故，所以平时不允许开车”这样荒谬的逻辑一样。</span></span></span> 
</div> <div class="se-787e0000 " data-slate-type="paragraph" data-slate-object="block" data-key="2023"> 
<span data-slate-object="text" data-key="2024"><span data-slate-leaf="true" data-offset-key="2024:0" 
data-first-offset="true"><span data-slate-string="true">首先，如果有偏执的不愿意合作的程序员，那么不只是代码审查，任何需要沟通和协作的活动都可以把争吵的干柴点燃。对于这样的程序员的管理，或者如何和这样的程序员合作，是另外的一个话题，但这并不能否认代码审查的必要性。当然，在下文讲到实践的部分我会介绍一些小的技巧，帮助你在代码审查中心平气和地说服对方。</span></span></span> 
</div> <div class="se-fa85a8d1 " data-slate-type="paragraph" data-slate-object="block" data-key="2025"> 
<span data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span data-slate-string="true">其次，有控制的一定强度内的争执，未必是坏事。有句话叫做“理越辩越明”，除了能做出尽可能合理的决定以外，在争论的过程中，你还会得到分析、思考、权衡、归纳、表达，乃至心理这些综合能力的锻炼，本来它们就不是很容易得到的机会，我们为什么还要放过呢？</span></span></span> 
</div> <h2 class="se-01a2229a" data-slate-type="heading" data-slate-object="block" data-key="2027"><span 
data-slate-object="text" data-key="2028"><span data-slate-leaf="true" data-offset-key="2028:0" 
data-first-offset="true"><span data-slate-string="true">代码审查的好处</span></span></span></h2> <div 
class="se-79f58971 " data-slate-type="paragraph" data-slate-object="block" data-key="2029"> 
<span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" data-offset-key="2030:0" 
data-first-offset="true"><span data-slate-string="true">下面我们来谈谈代码审查的好处。你可能会想，这有什么可谈的，这好处难道不是发现软件 
bug，提高代码质量吗？</span></span></span> </div> <div class="se-800ca3f4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2031"> <span data-slate-object="text" data-key="2032"><span 
data-slate-leaf="true" data-offset-key="2032:0" data-first-offset="true"><span data-slate-string="true">别急，代码审查的好处可远远不止这一个，我觉得它还至少包括下面这些好处。</span></span></span> 
</div> <div class="se-862ff335 " data-slate-type="paragraph" data-slate-object="block" data-key="2033"> 
<span data-slate-object="text" data-key="2034"><span data-slate-leaf="true" data-offset-key="2034:0" 
data-first-offset="true"><span class="se-0a8762fc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 代码审查是个人和团队提升的最佳途径之一。</span></span></span></span> </div> <div class="se-ab6e69fc 
" data-slate-type="paragraph" data-slate-object="block" data-key="2035"> <span data-slate-object="text" 
data-key="2036"><span data-slate-leaf="true" data-offset-key="2036:0" data-first-offset="true"><span 
data-slate-string="true">这里的学习，既包括技术学习，也包括业务学习。和英语学习一样，如果只听 BBC 或者 VOA 的纯正口音，没有任何语法错误，英文反而不容易学好，学英文就要接触生活英语，各种口音，各种不合标准的习惯用法。阅读代码也一样，要学习不同的代码风格和实现。</span></span></span> 
</div> <div class="se-f3ed3298 " data-slate-type="paragraph" data-slate-object="block" data-key="2037"> 
<span data-slate-object="text" data-key="2038"><span data-slate-leaf="true" data-offset-key="2038:0" 
data-first-offset="true"><span data-slate-string="true">在做代码审查的时候，如果不理解代码，是无法给出最佳审查的。因此自己会被迫去仔细阅读代码，弄懂每一行每一个变量，而不是给一个 
LGTM（“Looks Good To Me”）了事。</span></span></span> </div> <div class="se-1f838fec " data-slate-type="paragraph" 
data-slate-object="block" data-key="2039"> <span data-slate-object="text" data-key="2040"><span 
data-slate-leaf="true" data-offset-key="2040:0" data-first-offset="true"><span class="se-5eff7d87" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">2. 代码审查是团队关系建设和扩大双方影响力的有效方式。</span></span></span></span> 
</div> <div class="se-69b631ea " data-slate-type="paragraph" data-slate-object="block" data-key="2041"> 
<span data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true">争论是这个过程中必不可少的一环，争论除了能加深对于问题和解决方法的理解，在不断的反驳和妥协中，也能树立影响力，建立良好的关系。另外值得一提的是，</span></span></span><span 
data-slate-object="text" data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" 
data-first-offset="true"><span class="se-084680cf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">代码审查可不是说非得给别人挑刺儿，对于做得特别漂亮的地方，要赞扬，这也是建立良好关系的一种途径。</span></span></span></span><span 
data-slate-object="text" data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" 
data-first-offset="true"><span data-slate-string="true">从团队合作和交流的角度来说，程序员往往缺乏沟通，每个人不能只专注于自己的那一份代码默默耕耘，而是需要建立自己的影响力的，代码审查过程中的交互，就是一个不可多得的方式。</span></span></span> 
</div> <div class="se-18b6558b " data-slate-type="paragraph" data-slate-object="block" data-key="2045"> 
<span data-slate-object="text" data-key="2046"><span data-slate-leaf="true" data-offset-key="2046:0" 
data-first-offset="true"><span class="se-11b1824e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 识别出设计的缺陷，找到安全、性能、依赖和兼容性等测试不易发现的问题。</span></span></span></span> 
</div> <div class="se-3345010f " data-slate-type="paragraph" data-slate-object="block" data-key="2047"> 
<span data-slate-object="text" data-key="2048"><span data-slate-leaf="true" data-offset-key="2048:0" 
data-first-offset="true"><span data-slate-string="true">代码审查在整个软件工程流程中还算早、中期，尽早发现问题就能够尽可能地减少修复问题的成本。而且，代码审查能够发现的问题，往往是其它途径不易发现的。因此，从这个角度来讲，代码审查要有方向性，比如主流程和某些重要用例，在审查的时候可以要求代码变更的程序员提供单元测试，或者是手工覆盖的测试结果，这样就可以认定这些分支覆盖到的逻辑是正确的，不需要在审查时额外关注。</span></span></span> 
</div> <div class="se-3d0d1eb7 " data-slate-type="paragraph" data-slate-object="block" data-key="2049"> 
<span data-slate-object="text" data-key="2050"><span data-slate-leaf="true" data-offset-key="2050:0" 
data-first-offset="true"><span class="se-8014675d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">4. 设立团队质量标杆的最佳实践方式。</span></span></span></span> </div> <div class="se-331635c6 
" data-slate-type="paragraph" data-slate-object="block" data-key="2051"> <span data-slate-object="text" 
data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" data-first-offset="true"><span 
data-slate-string="true">在我经历的团队中，基本上代码审查做得好的，代码质量都高。这不见得是程序员的能力特别出色，而是通过代码审查把这个质量的 bar 顶起来了。你可以想象，一个对别人的代码颇为“挑剔”的人，他会对自己的代码截然相反地糊弄了事，睁一只眼闭一只眼吗？特别对于刚踏入职场的程序员来说，这点尤为重要，要知道一个人刚工作的两三年，对性格、习惯这些关乎职业生涯因素的影响是巨大的，一个好的标杆比任何口号都有效。</span></span></span> 
</div> <h2 class="se-84a3f606" data-slate-type="heading" data-slate-object="block" data-key="2053"><span 
data-slate-object="text" data-key="2054"><span data-slate-leaf="true" data-offset-key="2054:0" 
data-first-offset="true"><span data-slate-string="true">一些小技巧</span></span></span></h2> <div 
class="se-ff4288ca " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span data-slate-string="true">最后我们来谈一些小技巧，来帮助这个代码审查的过程顺利进行。</span></span></span> 
</div> <div class="se-edb3274f " data-slate-type="paragraph" data-slate-object="block" data-key="2057"> 
<span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" data-offset-key="2058:0" 
data-first-offset="true"><span class="se-f67f2503" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 每次变更所包含的代码量一定要小。</span></span></span></span> </div> <div class="se-c4d7610d 
" data-slate-type="paragraph" data-slate-object="block" data-key="2059"> <span data-slate-object="text" 
data-key="2060"><span data-slate-leaf="true" data-offset-key="2060:0" data-first-offset="true"><span 
data-slate-string="true">这一点很重要，代码变更是要给人看的，因此确保变更足够小，能够让它容易理解，审查代码的人，也不会觉得疲劳和有压力。代码清楚了，审查也就可以有效地进行，也更容易得到通过和认可。如果预计代码量大怎么办？可以尝试将其分解成若干个小的变更，一个一个提交。</span></span></span> 
</div> <div class="se-d225bbbd " data-slate-type="paragraph" data-slate-object="block" data-key="2061"> 
<span data-slate-object="text" data-key="2062"><span data-slate-leaf="true" data-offset-key="2062:0" 
data-first-offset="true"><span class="se-0c7035de" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 让团队中的“牛人”在代码审查中发挥作用。</span></span></span></span> </div> <div class="se-1b30efe5 
" data-slate-type="paragraph" data-slate-object="block" data-key="2063"> <span data-slate-object="text" 
data-key="2064"><span data-slate-leaf="true" data-offset-key="2064:0" data-first-offset="true"><span 
data-slate-string="true">团队中的核心成员，可以相对来说少做一点实现，多在设计上做一点参与和决策，多把握代码审查这一环节。以前我在某一个团队中，总代码超过了六十万行，我们实施过这样一种管理方式，将代码划分为几个大的模块，每一模块都指定一个技术责任人，他会对该层代码全面负责，所有的代码变更都要经过他的审查。</span></span></span> 
</div> <div class="se-565ba037 " data-slate-type="paragraph" data-slate-object="block" data-key="2065"> 
<span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" data-offset-key="2066:0" 
data-first-offset="true"><span class="se-6da4f0ab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 变更代码的质量要超过当前代码库的平均水准。</span></span></span></span> </div> <div class="se-b58a689b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2067"> <span data-slate-object="text" 
data-key="2068"><span data-slate-leaf="true" data-offset-key="2068:0" data-first-offset="true"><span 
data-slate-string="true">代码的审查意见有“建设性意见”和“次要意见”之分，那么那些“次要意见”，例如格式、注释、命名，到底做到什么层次，就会成为一个争论的话题，要求低了代码质量接受不了，而要求高了又会拖慢开发进度。我觉得，这种情况下，可以遵循这样的判断标准：看</span></span></span><span 
data-slate-object="text" data-key="2069"><span data-slate-leaf="true" data-offset-key="2069:0" 
data-first-offset="true"><span class="se-80c32077" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">新提交的代码会让当前的代码库代码质量更高了，还是更低了</span></span></span></span><span data-slate-object="text" 
data-key="2070"><span data-slate-leaf="true" data-offset-key="2070:0" data-first-offset="true"><span 
data-slate-string="true">，只有高于当前项目平均质量的代码才能合并入主分支。</span></span></span> </div> <div class="se-8e7f171f 
" data-slate-type="paragraph" data-slate-object="block" data-key="2071"> <span data-slate-object="text" 
data-key="2072"><span data-slate-leaf="true" data-offset-key="2072:0" data-first-offset="true"><span 
class="se-f3079596" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
新员工代码，骨架代码的代码审查要更为严格。</span></span></span></span> </div> <div class="se-5dc1880f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2073"> <span data-slate-object="text" data-key="2074"><span 
data-slate-leaf="true" data-offset-key="2074:0" data-first-offset="true"><span data-slate-string="true">对于新员工的代码审查可以稍微严格一些，这有助于培养良好的质量意识和习惯，前面已经提到了，这对于职业生涯都是有益的。“骨架代码”指的是那些与项目业务无关的架构代码，这部分代码从技术的层面来说更加重要，往往也很考验代码功底，代码审查可以更严格一些。</span></span></span> 
</div> <div class="se-28283f04 " data-slate-type="paragraph" data-slate-object="block" data-key="2075"> 
<span data-slate-object="text" data-key="2076"><span data-slate-leaf="true" data-offset-key="2076:0" 
data-first-offset="true"><span class="se-af7dfc4e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">5. 及时表达肯定，委婉表达意见。</span></span></span></span> </div> <div class="se-8f6d880b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2077"> <span data-slate-object="text" 
data-key="2078"><span data-slate-leaf="true" data-offset-key="2078:0" data-first-offset="true"><span 
data-slate-string="true">只针对代码，不针对人。这听起来很简单，都知道对事不对人的重要性，但是要非常小心不能违背。审查并不是只提反面意见的，在遇到好的实现，不错的想法的时候，可以表示肯定，当然这个数量不宜多，要不然适得其反。至于表达意见方面，我来举几个例子：</span></span></span> 
</div> <div class="se-bd9fa8f7" data-slate-type="list" data-slate-object="block" data-key="2079"> 
<div class="se-42096a19 se-65181e18" data-slate-type="list-line" data-slate-object="block" 
data-key="2080"> <span data-slate-object="text" data-key="2081"><span data-slate-leaf="true" 
data-offset-key="2081:0" data-first-offset="true"><span data-slate-string="true">对于一些次要问题，我都会标注这个问题是一个 
picky 或者 nit 的问题（“挑剔的问题”）。这样的好处在于，明确告知对方，</span></span></span><span data-slate-object="text" 
data-key="2082"><span data-slate-leaf="true" data-offset-key="2082:0" data-first-offset="true"><span 
class="se-a42f65f5" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我虽然提出了这个问题，但是它没有什么大不了的，如果你坚持不改，我也不打算说服你。</span></span></span></span><span 
data-slate-object="text" data-key="2083"><span data-slate-leaf="true" data-offset-key="2083:0" 
data-first-offset="true"><span data-slate-string="true">或者说，我对这个问题持有不同的看法，但是我也并不坚信我的提议更好。</span></span></span> 
</div> <div class="se-bd8a03ba se-7ebf213b" data-slate-type="list-line" data-slate-object="block" 
data-key="2084"> <span data-slate-object="text" data-key="2085"><span data-slate-leaf="true" 
data-offset-key="2085:0" data-first-offset="true"><span data-slate-string="true">使用也许、或许、可能、似乎这样表示不确定的语气词（英文中有时可以使用虚拟语气）。这样的好处是，缓和自己表达观点的语气。比如说：“这个地方重构一下，去掉这个循环，也许会更好。”</span></span></span> 
</div> <div class="se-bdaf6e59 se-04e974ce" data-slate-type="list-line" data-slate-object="block" 
data-key="2086"> <span data-slate-object="text" data-key="2087"><span data-slate-leaf="true" 
data-offset-key="2087:0" data-first-offset="true"><span data-slate-string="true">间接地表达否定。比如说，你看到对方配置了周期为 
60 秒，但是你觉得不对，但又不很确定，你可以这样说：“我有一个疑问，为什么这里要使用 60 秒而不是其他值呢？” 对方可能会反应过来这个值选取得不够恰当。你看，这个方式就是使用疑问，而非直接的否定，这就委婉得多。</span></span></span> 
</div> <div class="se-442b3897 se-fcfbfa0d" data-slate-type="list-line" data-slate-object="block" 
data-key="2088"> <span data-slate-object="text" data-key="2089"><span data-slate-leaf="true" 
data-offset-key="2089:0" data-first-offset="true"><span data-slate-string="true">放上例子、讨论的链接，以及其它一些辅助材料证明自己的观点，但是不要直接表述观点，让对方来确认这个观点。比如说：“下面的讨论是关于这个逻辑的另一种实现方式，不知你觉得如何？”</span></span></span> 
</div> <div class="se-17eaa537 se-3de1dff1" data-slate-type="list-line" data-slate-object="block" 
data-key="2090"> <span data-slate-object="text" data-key="2091"><span data-slate-leaf="true" 
data-offset-key="2091:0" data-first-offset="true"><span data-slate-string="true">先肯定，再否定。这个我想很多人一直都在用，先摆事实诚恳地说一些同意和正面的话，然后用“不过”、“但是”和“然而”之类的将话锋一转，说出相反的情况，这样也就在言论中比较了优劣，意味着这是经过权衡得出的结论。</span></span></span> 
</div> </div> <div class="se-03e277aa " data-slate-type="paragraph" data-slate-object="block" 
data-key="2092"> <span data-slate-object="text" data-key="2093"><span data-slate-leaf="true" 
data-offset-key="2093:0" data-first-offset="true"><span class="se-62c18638" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">6. 审查时，代码要过两遍，第一遍抓主要问题，第二遍看次要问题。</span></span></span></span> 
</div> <div class="se-2609c04c " data-slate-type="paragraph" data-slate-object="block" data-key="2094"> 
<span data-slate-object="text" data-key="2095"><span data-slate-leaf="true" data-offset-key="2095:0" 
data-first-offset="true"><span data-slate-string="true">代码过两遍的好处在于，可以把代码中的问题有层次地提出来。第一遍的时候，搞清楚代码大致的机制、原理、结构，这样有大的建设性问题可以提出来，等待修复或达成一致。根据第一遍的情况来决定需不需要过第二遍，如果没有大的分歧，可以过第二遍。这第二遍就可以非常仔细了，包括可以提出一些细节问题，也包括格式和命名之类的次要问题。总结一下就是，这种方式的最大好处就在于可以让大的问题被单独提出来，优先解决，让问题的讨论和解决有了层次。</span></span></span> 
</div> <h2 class="se-6042f161" data-slate-type="heading" data-slate-object="block" data-key="2096"><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-307ded98 " data-slate-type="paragraph" data-slate-object="block" data-key="2098"> 
<span data-slate-object="text" data-key="2099"><span data-slate-leaf="true" data-offset-key="2099:0" 
data-first-offset="true"><span data-slate-string="true">今天的特别放送就到这里，在今天的内容中，我结合自己的经历，向你介绍了代码审查的方方面面，主要涉及了“为什么要做代码审查”以及“怎么样做代码审查”这两个方面。</span></span></span> 
</div> <div class="se-11978136 " data-slate-type="paragraph" data-slate-object="block" data-key="2100"> 
<span data-slate-object="text" data-key="2101"><span data-slate-leaf="true" data-offset-key="2101:0" 
data-first-offset="true"><span data-slate-string="true">最后留一个小问题吧，欢迎在留言区一起讨论。</span></span></span> 
</div> <div class="se-4dd5b40e " data-slate-type="paragraph" data-slate-object="block" data-key="2102"> 
<span data-slate-object="text" data-key="2103"><span data-slate-leaf="true" data-offset-key="2103:0" 
data-first-offset="true"><span data-slate-string="true">你所在的技术团队代码审查是怎么做的，你有没有什么代码审查上的小技巧愿意分享一下呢？</span></span></span> 
</div> <div class="se-41c6a425" data-slate-type="image" data-slate-object="block" data-key="2104"> 
<img class="se-77042dfa" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.710 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.711 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:11:32.713 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1948" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-d7531076 " data-slate-type="paragraph" data-slate-object="block" data-key="1949"> 
<span data-slate-object="text" data-key="1950"><span data-slate-leaf="true" data-offset-key="1950:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-f34c857d " data-slate-type="paragraph" data-slate-object="block" data-key="1951"> 
<span data-slate-object="text" data-key="1952"><span data-slate-leaf="true" data-offset-key="1952:0" 
data-first-offset="true"><span data-slate-string="true">又到了特别放送时间，今天我想聊一聊代码审查（Code Review）。在软件工程师日常的开发工作中，</span></span></span><span 
data-slate-object="text" data-key="1953"><span data-slate-leaf="true" data-offset-key="1953:0" 
data-first-offset="true"><span class="se-a3686360" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果要挑出一项极其重要，却又很容易被忽视的工作，在我看来代码审查几乎是无可争议的第一。</span></span></span></span> 
</div> <div class="se-f4127856 " data-slate-type="paragraph" data-slate-object="block" data-key="1954"> 
<span data-slate-object="text" data-key="1955"><span data-slate-leaf="true" data-offset-key="1955:0" 
data-first-offset="true"><span data-slate-string="true">代码审查是一个低投入、高产出的开发活动，就我个人而言，我从其中学到的习惯、方法和知识，让我获益匪浅。但是，我也在微博、微信上看到程序员朋友们争论代码审查的必要性，甚至包括很多大厂的程序员，还有一些有着许多年经验的程序员。</span></span></span> 
</div> <div class="se-e1ab63cf " data-slate-type="paragraph" data-slate-object="block" data-key="1956"> 
<span data-slate-object="text" data-key="1957"><span data-slate-leaf="true" data-offset-key="1957:0" 
data-first-offset="true"><span data-slate-string="true">一开始我觉得有些不可思议，和代价相比，代码审查的好处实在太多了，这有必要费那么大心思去讨论这个必要性吗？后来我意识到，</span></span></span><span 
data-slate-object="text" data-key="1958"><span data-slate-leaf="true" data-offset-key="1958:0" 
data-first-offset="true"><span class="se-1f58401f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">造成这个争论的原因，既包括缺乏对于代码审查好处的认识，也包括一些因果逻辑上的混淆。</span></span></span></span><span 
data-slate-object="text" data-key="1959"><span data-slate-leaf="true" data-offset-key="1959:0" 
data-first-offset="true"><span data-slate-string="true">我想，今天的特别放送，我就来把代码审查这个事儿聊清楚，希望它能成为你日常开发工作当中认真对待的必选项。</span></span></span> 
</div> <div class="se-3cd07a10 " data-slate-type="paragraph" data-slate-object="block" data-key="1960"> 
<span data-slate-object="text" data-key="1961"><span data-slate-leaf="true" data-offset-key="1961:0" 
data-first-offset="true"><span data-slate-string="true">那值得一提的是，对于全栈工程师而言，代码审查又有一点特殊性。因为我们经常要写多个层面的代码，包括前端代码 
HTML、CSS、JavaScript，后端逻辑，比如 Java 或者 Python，还很可能写很多的脚本代码，比如 Shell，做各种各样的配置，像是和基于 XML、JSON 的配置文件打交道，还很可能使用 
SQL 写持久层的逻辑。这些代码中，既包括命令式的代码，也包括声明式的代码。由于涉及到的代码类型比较广泛，代码审查者就自然会和不同的团队或项目中的角色打交道，也需要在不同的思维模式之间来回切换。</span></span></span> 
</div> <h2 class="se-b251eef3" data-slate-type="heading" data-slate-object="block" data-key="1962"><span 
data-slate-object="text" data-key="1963"><span data-slate-leaf="true" data-offset-key="1963:0" 
data-first-offset="true"><span data-slate-string="true">代码审查的流程</span></span></span></h2> <div 
class="se-fbab5116 " data-slate-type="paragraph" data-slate-object="block" data-key="1964"> 
<span data-slate-object="text" data-key="1965"><span data-slate-leaf="true" data-offset-key="1965:0" 
data-first-offset="true"><span data-slate-string="true">先来简单介绍一下常见的代码审查的流程。为了开发某个新特性，或者修复某个特定问题，负责的程序员会从代码库的主分支（master 
branch）上面建立并 check out 一个新的分支，将工作分为一次到若干次的“代码变更”来提交。这每一次的代码变更，都可以组成一次代码审查的单元，有的公司把它叫做 CR（Code 
Change），有的叫做 PR（Pull Request），还有的叫做 CL（Change List），但无论叫做什么，它一般至少包含这么几项内容：</span></span></span> 
</div> <div class="se-43eddf05" data-slate-type="list" data-slate-object="block" data-key="1966"> 
<div class="se-3e93b622 se-3537de32" data-slate-type="list-line" data-slate-object="block" 
data-key="1967"> <span data-slate-object="text" data-key="1968"><span data-slate-leaf="true" 
data-offset-key="1968:0" data-first-offset="true"><span class="se-a76cb9a1" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">帮助理解代码的描述</span></span></span></span><span 
data-slate-object="text" data-key="1969"><span data-slate-leaf="true" data-offset-key="1969:0" 
data-first-offset="true"><span data-slate-string="true">，如果有问题单（任务）来跟踪，需要包括相关的问题单号或者问题单链接；</span></span></span> 
</div> <div class="se-d4ce3b48 se-ebde9687" data-slate-type="list-line" data-slate-object="block" 
data-key="1970"> <span data-slate-object="text" data-key="1971"><span data-slate-leaf="true" 
data-offset-key="1971:0" data-first-offset="true"><span class="se-7de684f3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">实际的代码变更主体</span></span></span></span><span 
data-slate-object="text" data-key="1972"><span data-slate-leaf="true" data-offset-key="1972:0" 
data-first-offset="true"><span data-slate-string="true">，包括实际的代码和配置；</span></span></span> </div> 
<div class="se-fab01463 se-b86f553a" data-slate-type="list-line" data-slate-object="block" 
data-key="1973"> <span data-slate-object="text" data-key="1974"><span data-slate-leaf="true" 
data-offset-key="1974:0" data-first-offset="true"><span class="se-bdf6b18b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">测试和结果</span></span></span></span><span 
data-slate-object="text" data-key="1975"><span data-slate-leaf="true" data-offset-key="1975:0" 
data-first-offset="true"><span data-slate-string="true">，根据项目的情况，它可以具备不同形式，比如单元测试代码，以及手工测试等其它测试执行的结果说明。</span></span></span> 
</div> </div> <div class="se-77873632 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1976"> <span data-slate-object="text" data-key="1977"><span data-slate-leaf="true" 
data-offset-key="1977:0" data-first-offset="true"><span data-slate-string="true">多数情况下，以上这三项都不可或缺，缺少任何一项都会让代码变更失去一定可审查的价值。</span></span></span> 
</div> <div class="se-0a1adfa7 " data-slate-type="paragraph" data-slate-object="block" data-key="1978"> 
<span data-slate-object="text" data-key="1979"><span data-slate-leaf="true" data-offset-key="1979:0" 
data-first-offset="true"><span data-slate-string="true">进行审查的，一般是一起工作的，对代码涉及变更熟悉的其他程序员。这个“熟悉”，既包括业务，也包括技术，二者当中，有一项不具备，就很难做好审查工作，给出有建设性的审查意见。</span></span></span> 
</div> <div class="se-7e6dae67 " data-slate-type="paragraph" data-slate-object="block" data-key="1980"> 
<span data-slate-object="text" data-key="1981"><span data-slate-leaf="true" data-offset-key="1981:0" 
data-first-offset="true"><span data-slate-string="true">接下去的交互就在这个代码变更上面了，审查者会提出其问题和建议，变更的作者会选择性采纳并改进变更的描述、代码主体以及测试。</span></span></span><span 
data-slate-object="text" data-key="1982"><span data-slate-leaf="true" data-offset-key="1982:0" 
data-first-offset="true"><span class="se-a04fd442" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">双方思考、争辩，以及妥协，目的都是寻求一个切合实际且可以改进代码质量的平衡。</span></span></span></span> 
</div> <div class="se-cf790bc3 " data-slate-type="paragraph" data-slate-object="block" data-key="1983"> 
<span data-slate-object="text" data-key="1984"><span data-slate-leaf="true" data-offset-key="1984:0" 
data-first-offset="true"><span data-slate-string="true">如果审查的程序员觉得代码没有太多问题，就会盖上一个“Approved”或者“Shipped”戳，表示认可和通过。这根据项目而定，一般代码变更最少要得到 
1~3 个这样的认可，才可以将代码变更合并（merge）到主分支。而主分支的代码，会随着 CI/CD 的流程进入自动化的测试程序，并部署上线（关于这部分你可以参阅 [第 30 讲]）。</span></span></span> 
</div> <h2 class="se-a49ee0e8" data-slate-type="heading" data-slate-object="block" data-key="1985"><span 
data-slate-object="text" data-key="1986"><span data-slate-leaf="true" data-offset-key="1986:0" 
data-first-offset="true"><span data-slate-string="true">常见的争议</span></span></span></h2> <div 
class="se-df5ebb62 " data-slate-type="paragraph" data-slate-object="block" data-key="1987"> 
<span data-slate-object="text" data-key="1988"><span data-slate-leaf="true" data-offset-key="1988:0" 
data-first-offset="true"><span data-slate-string="true">在介绍代码审查的好处之前，我想先来谈谈争议。因为我观察到</span></span></span><span 
data-slate-object="text" data-key="1989"><span data-slate-leaf="true" data-offset-key="1989:0" 
data-first-offset="true"><span class="se-37694582" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">大多数的争议，都不是在否认代码审查的好处，而是聚焦在不进行代码审查的那些“原因”</span></span></span></span><span 
data-slate-object="text" data-key="1990"><span data-slate-leaf="true" data-offset-key="1990:0" 
data-first-offset="true"><span data-slate-string="true"> 或者 “借口”上，而有些讽刺的是，我认为</span></span></span><span 
data-slate-object="text" data-key="1991"><span data-slate-leaf="true" data-offset-key="1991:0" 
data-first-offset="true"><span class="se-008340cc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这里面大部分的“原因”，所代表着的因果关系并不成立</span></span></span></span><span data-slate-object="text" 
data-key="1992"><span data-slate-leaf="true" data-offset-key="1992:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-7d5c946b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1993"> <span data-slate-object="text" data-key="1994"><span 
data-slate-leaf="true" data-offset-key="1994:0" data-first-offset="true"><span class="se-26baca3f" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">1. 加班要累死了，完成项目都来不及，还做什么代码审查？</span></span></span></span> 
</div> <div class="se-4bf5f240 " data-slate-type="paragraph" data-slate-object="block" data-key="1995"> 
<span data-slate-object="text" data-key="1996"><span data-slate-leaf="true" data-offset-key="1996:0" 
data-first-offset="true"><span data-slate-string="true">类似的问题还有，“代码审查拖慢了进度”，“代码审查不利于快速上线”。这是最常见的不做代码审查，或者草草进行代码审查的理由了，但是稍稍一细想，就会发现这里的因果逻辑完全不对。</span></span></span> 
</div> <div class="se-b65f0295 " data-slate-type="paragraph" data-slate-object="block" data-key="1997"> 
<span data-slate-object="text" data-key="1998"><span data-slate-leaf="true" data-offset-key="1998:0" 
data-first-offset="true"><span data-slate-string="true">这就像以前国内大兴“敏捷”的时候，有好多程序员，甚至项目经理，觉得因为项目时间紧才要实施敏捷，因为可以少写文档，少做测试，随意变更需求，可这里的因为所以根本是牛头不对马嘴。我记得知乎上有句流行的话叫做，“先问是不是，再问为什么”，这里也可以用，因为项目压力大就让“不做代码审查”来承担后果，这实在是过于牵强了。</span></span></span> 
</div> <div class="se-0e642ade " data-slate-type="paragraph" data-slate-object="block" data-key="1999"> 
<span data-slate-object="text" data-key="2000"><span data-slate-leaf="true" data-offset-key="2000:0" 
data-first-offset="true"><span data-slate-string="true">项目压力大，时间紧，可以草草做分析，不做设计，直接编码，不做重构、不做测试、不做审查，直接上线，快及一时，可是造成的损失，最后总是要有谁来背锅的。这个锅很可能，就是上线后无尽的问题，就是恶性循环加班加点地改问题，就是代码一个版本比一个版本烂。当这些问题都焦头烂额，就更不要说团队和程序员的成长了。</span></span></span> 
</div> <div class="se-b3abb2a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2001"> 
<span data-slate-object="text" data-key="2002"><span data-slate-leaf="true" data-offset-key="2002:0" 
data-first-offset="true"><span class="se-5d386501" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 代码审查太费时间，改来改去无非是一些格式、注释、命名之类不痛不痒的问题。</span></span></span></span> 
</div> <div class="se-a7e4767a " data-slate-type="paragraph" data-slate-object="block" data-key="2003"> 
<span data-slate-object="text" data-key="2004"><span data-slate-leaf="true" data-offset-key="2004:0" 
data-first-offset="true"><span data-slate-string="true">这也是个逻辑不通的论述，虽然这个还比前面那个稍微好一点。只能提出这些“次要问题”，很可能是代码审查的能力不够，而并非代码审查没有价值；或者是代码审查的力度不够，只能提出一些浅表的问题，这个现象其实更为普遍。</span></span></span> 
</div> <div class="se-0ed12fc6 " data-slate-type="paragraph" data-slate-object="block" data-key="2005"> 
<span data-slate-object="text" data-key="2006"><span data-slate-leaf="true" data-offset-key="2006:0" 
data-first-offset="true"><span data-slate-string="true">前面已经介绍过了，</span></span></span><span 
data-slate-object="text" data-key="2007"><span data-slate-leaf="true" data-offset-key="2007:0" 
data-first-offset="true"><span class="se-bedbeb33" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">一是技术，二是业务，二者缺一都无法做出比较好的审查。</span></span></span></span><span data-slate-object="text" 
data-key="2008"><span data-slate-leaf="true" data-offset-key="2008:0" data-first-offset="true"><span 
data-slate-string="true">在某些特殊情况下，有时候确实不具备完备的代码审查条件，我们现在来分业务、技术欠缺的情况进行讨论。</span></span></span> 
</div> <div class="se-3b5188e7 " data-slate-type="paragraph" data-slate-object="block" data-key="2009"> 
<span data-slate-object="text" data-key="2010"><span data-slate-leaf="true" data-offset-key="2010:0" 
data-first-offset="true"><span data-slate-string="true">如果团队中有业务达人，但是技术能力不足。比如说，新版本使用的是 Scala 
来实现的，但是团队中没有精通 Scala 的程序员，这个时候可以寻找其它团队有 Scala 经验的程序员来重点进行技术层面的代码审查，而自己团队则主要关注于业务逻辑层面。当然，既然是自己团队的代码，所用到的技术要慢慢补起来。</span></span></span> 
</div> <div class="se-44e74fb2 " data-slate-type="paragraph" data-slate-object="block" data-key="2011"> 
<span data-slate-object="text" data-key="2012"><span data-slate-leaf="true" data-offset-key="2012:0" 
data-first-offset="true"><span data-slate-string="true">如果团队的成员具备技术能力，但是业务不了解。这种情况也可以进行将业务和技术分开审查这样的类似处理，但是如果业务相对复杂，可以先开一个预审查会，就着代码或者设计文档，简单地将业务逻辑介绍和讨论清楚，再进行审查。</span></span></span> 
</div> <div class="se-79df13c4 " data-slate-type="paragraph" data-slate-object="block" data-key="2013"> 
<span data-slate-object="text" data-key="2014"><span data-slate-leaf="true" data-offset-key="2014:0" 
data-first-offset="true"><span class="se-7649458d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 团队的习惯和流程就是不做代码审查，大家都是这么过来的。</span></span></span></span> </div> 
<div class="se-25d11d0b " data-slate-type="paragraph" data-slate-object="block" data-key="2015"> 
<span data-slate-object="text" data-key="2016"><span data-slate-leaf="true" data-offset-key="2016:0" 
data-first-offset="true"><span data-slate-string="true">我觉得这也不是一个论述不应该做代码审查的正当理由，类似的还有“绩效考评又不提代码审查”，以及“我上班、码代码、下班、拿钱，审查代码干什么”。大家都不做，并不代表不做就是正确的，如果你赞同代码审查的好处和必要性，那么你的思考会告诉你，应该做这件事情，大家不做并不是一个理由。</span></span></span> 
</div> <div class="se-ba3f6627 " data-slate-type="paragraph" data-slate-object="block" data-key="2017"> 
<span data-slate-object="text" data-key="2018"><span data-slate-leaf="true" data-offset-key="2018:0" 
data-first-offset="true"><span data-slate-string="true">如果你发现这件事很难推动，你可以尝试去和你的项目经理聊一聊，或者结合自己的项目以及下面会讲到的代码审查的好处论一论，看看是不是能说服那些没有意识到代码审查好处的程序员和项目经理。当然，这是另外和人沟通以及表达自己观点的事情，如果大家都是朴素的干活拿钱的观点，没有对于代码质量和个人发展更高的追求，或者价值观和你相距十万八千里，改变很困难，你就应该好好思考是不是应该选择更好的团队了。</span></span></span> 
</div> <div class="se-d639e4fa " data-slate-type="paragraph" data-slate-object="block" data-key="2019"> 
<span data-slate-object="text" data-key="2020"><span data-slate-leaf="true" data-offset-key="2020:0" 
data-first-offset="true"><span class="se-8a3a2dab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">4. 代码审查不利于团建，因为经常有程序员因为观点不同在代码审查的时候吵起来。</span></span></span></span> 
</div> <div class="se-73bd485f " data-slate-type="paragraph" data-slate-object="block" data-key="2021"> 
<span data-slate-object="text" data-key="2022"><span data-slate-leaf="true" data-offset-key="2022:0" 
data-first-offset="true"><span data-slate-string="true">这依然不是一个正当理由，这就好像说“因为开车容易出交通事故，所以平时不允许开车”这样荒谬的逻辑一样。</span></span></span> 
</div> <div class="se-787e0000 " data-slate-type="paragraph" data-slate-object="block" data-key="2023"> 
<span data-slate-object="text" data-key="2024"><span data-slate-leaf="true" data-offset-key="2024:0" 
data-first-offset="true"><span data-slate-string="true">首先，如果有偏执的不愿意合作的程序员，那么不只是代码审查，任何需要沟通和协作的活动都可以把争吵的干柴点燃。对于这样的程序员的管理，或者如何和这样的程序员合作，是另外的一个话题，但这并不能否认代码审查的必要性。当然，在下文讲到实践的部分我会介绍一些小的技巧，帮助你在代码审查中心平气和地说服对方。</span></span></span> 
</div> <div class="se-fa85a8d1 " data-slate-type="paragraph" data-slate-object="block" data-key="2025"> 
<span data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span data-slate-string="true">其次，有控制的一定强度内的争执，未必是坏事。有句话叫做“理越辩越明”，除了能做出尽可能合理的决定以外，在争论的过程中，你还会得到分析、思考、权衡、归纳、表达，乃至心理这些综合能力的锻炼，本来它们就不是很容易得到的机会，我们为什么还要放过呢？</span></span></span> 
</div> <h2 class="se-01a2229a" data-slate-type="heading" data-slate-object="block" data-key="2027"><span 
data-slate-object="text" data-key="2028"><span data-slate-leaf="true" data-offset-key="2028:0" 
data-first-offset="true"><span data-slate-string="true">代码审查的好处</span></span></span></h2> <div 
class="se-79f58971 " data-slate-type="paragraph" data-slate-object="block" data-key="2029"> 
<span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" data-offset-key="2030:0" 
data-first-offset="true"><span data-slate-string="true">下面我们来谈谈代码审查的好处。你可能会想，这有什么可谈的，这好处难道不是发现软件 
bug，提高代码质量吗？</span></span></span> </div> <div class="se-800ca3f4 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2031"> <span data-slate-object="text" data-key="2032"><span 
data-slate-leaf="true" data-offset-key="2032:0" data-first-offset="true"><span data-slate-string="true">别急，代码审查的好处可远远不止这一个，我觉得它还至少包括下面这些好处。</span></span></span> 
</div> <div class="se-862ff335 " data-slate-type="paragraph" data-slate-object="block" data-key="2033"> 
<span data-slate-object="text" data-key="2034"><span data-slate-leaf="true" data-offset-key="2034:0" 
data-first-offset="true"><span class="se-0a8762fc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 代码审查是个人和团队提升的最佳途径之一。</span></span></span></span> </div> <div class="se-ab6e69fc 
" data-slate-type="paragraph" data-slate-object="block" data-key="2035"> <span data-slate-object="text" 
data-key="2036"><span data-slate-leaf="true" data-offset-key="2036:0" data-first-offset="true"><span 
data-slate-string="true">这里的学习，既包括技术学习，也包括业务学习。和英语学习一样，如果只听 BBC 或者 VOA 的纯正口音，没有任何语法错误，英文反而不容易学好，学英文就要接触生活英语，各种口音，各种不合标准的习惯用法。阅读代码也一样，要学习不同的代码风格和实现。</span></span></span> 
</div> <div class="se-f3ed3298 " data-slate-type="paragraph" data-slate-object="block" data-key="2037"> 
<span data-slate-object="text" data-key="2038"><span data-slate-leaf="true" data-offset-key="2038:0" 
data-first-offset="true"><span data-slate-string="true">在做代码审查的时候，如果不理解代码，是无法给出最佳审查的。因此自己会被迫去仔细阅读代码，弄懂每一行每一个变量，而不是给一个 
LGTM（“Looks Good To Me”）了事。</span></span></span> </div> <div class="se-1f838fec " data-slate-type="paragraph" 
data-slate-object="block" data-key="2039"> <span data-slate-object="text" data-key="2040"><span 
data-slate-leaf="true" data-offset-key="2040:0" data-first-offset="true"><span class="se-5eff7d87" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">2. 代码审查是团队关系建设和扩大双方影响力的有效方式。</span></span></span></span> 
</div> <div class="se-69b631ea " data-slate-type="paragraph" data-slate-object="block" data-key="2041"> 
<span data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true">争论是这个过程中必不可少的一环，争论除了能加深对于问题和解决方法的理解，在不断的反驳和妥协中，也能树立影响力，建立良好的关系。另外值得一提的是，</span></span></span><span 
data-slate-object="text" data-key="2043"><span data-slate-leaf="true" data-offset-key="2043:0" 
data-first-offset="true"><span class="se-084680cf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">代码审查可不是说非得给别人挑刺儿，对于做得特别漂亮的地方，要赞扬，这也是建立良好关系的一种途径。</span></span></span></span><span 
data-slate-object="text" data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" 
data-first-offset="true"><span data-slate-string="true">从团队合作和交流的角度来说，程序员往往缺乏沟通，每个人不能只专注于自己的那一份代码默默耕耘，而是需要建立自己的影响力的，代码审查过程中的交互，就是一个不可多得的方式。</span></span></span> 
</div> <div class="se-18b6558b " data-slate-type="paragraph" data-slate-object="block" data-key="2045"> 
<span data-slate-object="text" data-key="2046"><span data-slate-leaf="true" data-offset-key="2046:0" 
data-first-offset="true"><span class="se-11b1824e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 识别出设计的缺陷，找到安全、性能、依赖和兼容性等测试不易发现的问题。</span></span></span></span> 
</div> <div class="se-3345010f " data-slate-type="paragraph" data-slate-object="block" data-key="2047"> 
<span data-slate-object="text" data-key="2048"><span data-slate-leaf="true" data-offset-key="2048:0" 
data-first-offset="true"><span data-slate-string="true">代码审查在整个软件工程流程中还算早、中期，尽早发现问题就能够尽可能地减少修复问题的成本。而且，代码审查能够发现的问题，往往是其它途径不易发现的。因此，从这个角度来讲，代码审查要有方向性，比如主流程和某些重要用例，在审查的时候可以要求代码变更的程序员提供单元测试，或者是手工覆盖的测试结果，这样就可以认定这些分支覆盖到的逻辑是正确的，不需要在审查时额外关注。</span></span></span> 
</div> <div class="se-3d0d1eb7 " data-slate-type="paragraph" data-slate-object="block" data-key="2049"> 
<span data-slate-object="text" data-key="2050"><span data-slate-leaf="true" data-offset-key="2050:0" 
data-first-offset="true"><span class="se-8014675d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">4. 设立团队质量标杆的最佳实践方式。</span></span></span></span> </div> <div class="se-331635c6 
" data-slate-type="paragraph" data-slate-object="block" data-key="2051"> <span data-slate-object="text" 
data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" data-first-offset="true"><span 
data-slate-string="true">在我经历的团队中，基本上代码审查做得好的，代码质量都高。这不见得是程序员的能力特别出色，而是通过代码审查把这个质量的 bar 顶起来了。你可以想象，一个对别人的代码颇为“挑剔”的人，他会对自己的代码截然相反地糊弄了事，睁一只眼闭一只眼吗？特别对于刚踏入职场的程序员来说，这点尤为重要，要知道一个人刚工作的两三年，对性格、习惯这些关乎职业生涯因素的影响是巨大的，一个好的标杆比任何口号都有效。</span></span></span> 
</div> <h2 class="se-84a3f606" data-slate-type="heading" data-slate-object="block" data-key="2053"><span 
data-slate-object="text" data-key="2054"><span data-slate-leaf="true" data-offset-key="2054:0" 
data-first-offset="true"><span data-slate-string="true">一些小技巧</span></span></span></h2> <div 
class="se-ff4288ca " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span data-slate-string="true">最后我们来谈一些小技巧，来帮助这个代码审查的过程顺利进行。</span></span></span> 
</div> <div class="se-edb3274f " data-slate-type="paragraph" data-slate-object="block" data-key="2057"> 
<span data-slate-object="text" data-key="2058"><span data-slate-leaf="true" data-offset-key="2058:0" 
data-first-offset="true"><span class="se-f67f2503" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 每次变更所包含的代码量一定要小。</span></span></span></span> </div> <div class="se-c4d7610d 
" data-slate-type="paragraph" data-slate-object="block" data-key="2059"> <span data-slate-object="text" 
data-key="2060"><span data-slate-leaf="true" data-offset-key="2060:0" data-first-offset="true"><span 
data-slate-string="true">这一点很重要，代码变更是要给人看的，因此确保变更足够小，能够让它容易理解，审查代码的人，也不会觉得疲劳和有压力。代码清楚了，审查也就可以有效地进行，也更容易得到通过和认可。如果预计代码量大怎么办？可以尝试将其分解成若干个小的变更，一个一个提交。</span></span></span> 
</div> <div class="se-d225bbbd " data-slate-type="paragraph" data-slate-object="block" data-key="2061"> 
<span data-slate-object="text" data-key="2062"><span data-slate-leaf="true" data-offset-key="2062:0" 
data-first-offset="true"><span class="se-0c7035de" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 让团队中的“牛人”在代码审查中发挥作用。</span></span></span></span> </div> <div class="se-1b30efe5 
" data-slate-type="paragraph" data-slate-object="block" data-key="2063"> <span data-slate-object="text" 
data-key="2064"><span data-slate-leaf="true" data-offset-key="2064:0" data-first-offset="true"><span 
data-slate-string="true">团队中的核心成员，可以相对来说少做一点实现，多在设计上做一点参与和决策，多把握代码审查这一环节。以前我在某一个团队中，总代码超过了六十万行，我们实施过这样一种管理方式，将代码划分为几个大的模块，每一模块都指定一个技术责任人，他会对该层代码全面负责，所有的代码变更都要经过他的审查。</span></span></span> 
</div> <div class="se-565ba037 " data-slate-type="paragraph" data-slate-object="block" data-key="2065"> 
<span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" data-offset-key="2066:0" 
data-first-offset="true"><span class="se-6da4f0ab" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 变更代码的质量要超过当前代码库的平均水准。</span></span></span></span> </div> <div class="se-b58a689b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2067"> <span data-slate-object="text" 
data-key="2068"><span data-slate-leaf="true" data-offset-key="2068:0" data-first-offset="true"><span 
data-slate-string="true">代码的审查意见有“建设性意见”和“次要意见”之分，那么那些“次要意见”，例如格式、注释、命名，到底做到什么层次，就会成为一个争论的话题，要求低了代码质量接受不了，而要求高了又会拖慢开发进度。我觉得，这种情况下，可以遵循这样的判断标准：看</span></span></span><span 
data-slate-object="text" data-key="2069"><span data-slate-leaf="true" data-offset-key="2069:0" 
data-first-offset="true"><span class="se-80c32077" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">新提交的代码会让当前的代码库代码质量更高了，还是更低了</span></span></span></span><span data-slate-object="text" 
data-key="2070"><span data-slate-leaf="true" data-offset-key="2070:0" data-first-offset="true"><span 
data-slate-string="true">，只有高于当前项目平均质量的代码才能合并入主分支。</span></span></span> </div> <div class="se-8e7f171f 
" data-slate-type="paragraph" data-slate-object="block" data-key="2071"> <span data-slate-object="text" 
data-key="2072"><span data-slate-leaf="true" data-offset-key="2072:0" data-first-offset="true"><span 
class="se-f3079596" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
新员工代码，骨架代码的代码审查要更为严格。</span></span></span></span> </div> <div class="se-5dc1880f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2073"> <span data-slate-object="text" data-key="2074"><span 
data-slate-leaf="true" data-offset-key="2074:0" data-first-offset="true"><span data-slate-string="true">对于新员工的代码审查可以稍微严格一些，这有助于培养良好的质量意识和习惯，前面已经提到了，这对于职业生涯都是有益的。“骨架代码”指的是那些与项目业务无关的架构代码，这部分代码从技术的层面来说更加重要，往往也很考验代码功底，代码审查可以更严格一些。</span></span></span> 
</div> <div class="se-28283f04 " data-slate-type="paragraph" data-slate-object="block" data-key="2075"> 
<span data-slate-object="text" data-key="2076"><span data-slate-leaf="true" data-offset-key="2076:0" 
data-first-offset="true"><span class="se-af7dfc4e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">5. 及时表达肯定，委婉表达意见。</span></span></span></span> </div> <div class="se-8f6d880b 
" data-slate-type="paragraph" data-slate-object="block" data-key="2077"> <span data-slate-object="text" 
data-key="2078"><span data-slate-leaf="true" data-offset-key="2078:0" data-first-offset="true"><span 
data-slate-string="true">只针对代码，不针对人。这听起来很简单，都知道对事不对人的重要性，但是要非常小心不能违背。审查并不是只提反面意见的，在遇到好的实现，不错的想法的时候，可以表示肯定，当然这个数量不宜多，要不然适得其反。至于表达意见方面，我来举几个例子：</span></span></span> 
</div> <div class="se-bd9fa8f7" data-slate-type="list" data-slate-object="block" data-key="2079"> 
<div class="se-42096a19 se-65181e18" data-slate-type="list-line" data-slate-object="block" 
data-key="2080"> <span data-slate-object="text" data-key="2081"><span data-slate-leaf="true" 
data-offset-key="2081:0" data-first-offset="true"><span data-slate-string="true">对于一些次要问题，我都会标注这个问题是一个 
picky 或者 nit 的问题（“挑剔的问题”）。这样的好处在于，明确告知对方，</span></span></span><span data-slate-object="text" 
data-key="2082"><span data-slate-leaf="true" data-offset-key="2082:0" data-first-offset="true"><span 
class="se-a42f65f5" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我虽然提出了这个问题，但是它没有什么大不了的，如果你坚持不改，我也不打算说服你。</span></span></span></span><span 
data-slate-object="text" data-key="2083"><span data-slate-leaf="true" data-offset-key="2083:0" 
data-first-offset="true"><span data-slate-string="true">或者说，我对这个问题持有不同的看法，但是我也并不坚信我的提议更好。</span></span></span> 
</div> <div class="se-bd8a03ba se-7ebf213b" data-slate-type="list-line" data-slate-object="block" 
data-key="2084"> <span data-slate-object="text" data-key="2085"><span data-slate-leaf="true" 
data-offset-key="2085:0" data-first-offset="true"><span data-slate-string="true">使用也许、或许、可能、似乎这样表示不确定的语气词（英文中有时可以使用虚拟语气）。这样的好处是，缓和自己表达观点的语气。比如说：“这个地方重构一下，去掉这个循环，也许会更好。”</span></span></span> 
</div> <div class="se-bdaf6e59 se-04e974ce" data-slate-type="list-line" data-slate-object="block" 
data-key="2086"> <span data-slate-object="text" data-key="2087"><span data-slate-leaf="true" 
data-offset-key="2087:0" data-first-offset="true"><span data-slate-string="true">间接地表达否定。比如说，你看到对方配置了周期为 
60 秒，但是你觉得不对，但又不很确定，你可以这样说：“我有一个疑问，为什么这里要使用 60 秒而不是其他值呢？” 对方可能会反应过来这个值选取得不够恰当。你看，这个方式就是使用疑问，而非直接的否定，这就委婉得多。</span></span></span> 
</div> <div class="se-442b3897 se-fcfbfa0d" data-slate-type="list-line" data-slate-object="block" 
data-key="2088"> <span data-slate-object="text" data-key="2089"><span data-slate-leaf="true" 
data-offset-key="2089:0" data-first-offset="true"><span data-slate-string="true">放上例子、讨论的链接，以及其它一些辅助材料证明自己的观点，但是不要直接表述观点，让对方来确认这个观点。比如说：“下面的讨论是关于这个逻辑的另一种实现方式，不知你觉得如何？”</span></span></span> 
</div> <div class="se-17eaa537 se-3de1dff1" data-slate-type="list-line" data-slate-object="block" 
data-key="2090"> <span data-slate-object="text" data-key="2091"><span data-slate-leaf="true" 
data-offset-key="2091:0" data-first-offset="true"><span data-slate-string="true">先肯定，再否定。这个我想很多人一直都在用，先摆事实诚恳地说一些同意和正面的话，然后用“不过”、“但是”和“然而”之类的将话锋一转，说出相反的情况，这样也就在言论中比较了优劣，意味着这是经过权衡得出的结论。</span></span></span> 
</div> </div> <div class="se-03e277aa " data-slate-type="paragraph" data-slate-object="block" 
data-key="2092"> <span data-slate-object="text" data-key="2093"><span data-slate-leaf="true" 
data-offset-key="2093:0" data-first-offset="true"><span class="se-62c18638" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">6. 审查时，代码要过两遍，第一遍抓主要问题，第二遍看次要问题。</span></span></span></span> 
</div> <div class="se-2609c04c " data-slate-type="paragraph" data-slate-object="block" data-key="2094"> 
<span data-slate-object="text" data-key="2095"><span data-slate-leaf="true" data-offset-key="2095:0" 
data-first-offset="true"><span data-slate-string="true">代码过两遍的好处在于，可以把代码中的问题有层次地提出来。第一遍的时候，搞清楚代码大致的机制、原理、结构，这样有大的建设性问题可以提出来，等待修复或达成一致。根据第一遍的情况来决定需不需要过第二遍，如果没有大的分歧，可以过第二遍。这第二遍就可以非常仔细了，包括可以提出一些细节问题，也包括格式和命名之类的次要问题。总结一下就是，这种方式的最大好处就在于可以让大的问题被单独提出来，优先解决，让问题的讨论和解决有了层次。</span></span></span> 
</div> <h2 class="se-6042f161" data-slate-type="heading" data-slate-object="block" data-key="2096"><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-307ded98 " data-slate-type="paragraph" data-slate-object="block" data-key="2098"> 
<span data-slate-object="text" data-key="2099"><span data-slate-leaf="true" data-offset-key="2099:0" 
data-first-offset="true"><span data-slate-string="true">今天的特别放送就到这里，在今天的内容中，我结合自己的经历，向你介绍了代码审查的方方面面，主要涉及了“为什么要做代码审查”以及“怎么样做代码审查”这两个方面。</span></span></span> 
</div> <div class="se-11978136 " data-slate-type="paragraph" data-slate-object="block" data-key="2100"> 
<span data-slate-object="text" data-key="2101"><span data-slate-leaf="true" data-offset-key="2101:0" 
data-first-offset="true"><span data-slate-string="true">最后留一个小问题吧，欢迎在留言区一起讨论。</span></span></span> 
</div> <div class="se-4dd5b40e " data-slate-type="paragraph" data-slate-object="block" data-key="2102"> 
<span data-slate-object="text" data-key="2103"><span data-slate-leaf="true" data-offset-key="2103:0" 
data-first-offset="true"><span data-slate-string="true">你所在的技术团队代码审查是怎么做的，你有没有什么代码审查上的小技巧愿意分享一下呢？</span></span></span> 
</div> <div class="se-41c6a425" data-slate-type="image" data-slate-object="block" data-key="2104"> 
<img class="se-77042dfa" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 1 msec}
2020-11-19 11:11:32.717 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.718 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:11:32.718 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.718 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:11:32.720 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755492, 1605755492, 1, 'zh-hans', 0, 1, 1, 
0, '27丨特别放送：聊一聊代码审查', 1, 20, 20) 
 {executed in 1 msec}
2020-11-19 11:11:32.723 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=20 
 {executed in 0 msec}
2020-11-19 11:11:32.724 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:11:32.725 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755492, 1605755492, 1, 'zh-hans', 0, 
1, 1, 0, '27丨特别放送：聊一聊代码审查', 'book', 1, 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.729 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.729 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:11:32.730 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.730 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:11:32.735 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/f0f60b2f3120a31ba31ee49b7ef48b05?bkt=en-038bee77e919b76a52bf15b298797e1df23fbf578db88e256e200918bebcc3e2b81186e9da9a2d66&fid=3757516097-778750-844850042973714&time=1605755491&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bMlvzBsQhJXezCIkqe2lCo8goyQ%3D&to=92&size=14507245&sta_dx=14507245&sta_cs=3364&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482221&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14507245&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-a19054dcbee80fc696e3474f56b0d3774ecac5cb572e2a7d8403c2ffae7950f578df45db65e7f53f&sl=76480590&expires=8h&rt=pr&r=293286897&mlogid=7502097466067658602&vbdid=2247232042&fin=27%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.m4a&bflag=92,34-92&rtype=1&dp-logid=7502097466067658602&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8bac002b6151d5e854aae3d1de2046b66f&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=27%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.m4a', 
20, 20) 
 {executed in 3 msec}
2020-11-19 11:11:32.737 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.738 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:11:32.742 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/f0f60b2f3120a31ba31ee49b7ef48b05?bkt=en-038bee77e919b76a52bf15b298797e1df23fbf578db88e256e200918bebcc3e2b81186e9da9a2d66&fid=3757516097-778750-844850042973714&time=1605755491&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bMlvzBsQhJXezCIkqe2lCo8goyQ%3D&to=92&size=14507245&sta_dx=14507245&sta_cs=3364&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482221&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14507245&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-a19054dcbee80fc696e3474f56b0d3774ecac5cb572e2a7d8403c2ffae7950f578df45db65e7f53f&sl=76480590&expires=8h&rt=pr&r=293286897&mlogid=7502097466067658602&vbdid=2247232042&fin=27%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.m4a&bflag=92,34-92&rtype=1&dp-logid=7502097466067658602&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8bac002b6151d5e854aae3d1de2046b66f&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=27%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E8%81%8A%E4%B8%80%E8%81%8A%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.m4a', 
20, 20) 
 {executed in 3 msec}
2020-11-19 11:11:32.746 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.746 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:11:32.747 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.747 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:11:32.748 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 提出点个人的理解吧:记得池老师的专利第一季有篇文章&lt;技术leader是否应该写代码&gt;，其实目前技术经理大概有3成的时间在做Code 
Review。这块曾经和一些同行聊过：就像老师课中所说的，不做基本上上线可能就挂了。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前Code Review应当有两张方式吧: 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种是强行做规则-违反规则就不让上线，提交不通过，这块可以用工具去实现； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种就是人为的对比工具和审核，毕竟人写代码的人看不到自己的问题的，除非是公司或者部门这块的把关的，例如：sql代码基本上有DBA审核，DBA自己写的就只能自己反复测，自己挖了坑的话还是要自己填的，这个会做的异常谨慎。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人觉得Code Review不仅仅重要，不做code review就是挖地雷;自己亲身经历过几次这种事情，这也是为何陈皓老师在他的专栏会去强调这块。好的code 
review会减少大量的不确定的坑：这个就像我们日常出门上班会确定门是否关好一样。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说个案例吧：从大公司到中小公司做DBA；CTO和我说数据库慢你优化一下，通过索引解决了出现的典型问题。生产上线前我说我把代码检查一遍，PM说我们的代码都测过没问题，我坚持检查一下-为此双休日没休息加班检查；周一我就扔出了不少所谓的慢且没问题的coding，CTO直接全部门发飙-先解决问题再上线。虽历史问题无力解决，不过常规问题减少了不少。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故而觉得不做code review基本山就是背着炸药包前进：什么时候炸了都不知道；只不过这块目前都是技术经理或者公司真正的专业人士在做而已。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/19/5b/08/3c1e650b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>丁丁历险记</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 笔记 <br>争议项 <br>1 加班累死，代码审查脱慢进度。 <br>2 代码审查做的事无聊。 （改改注释） <br>3 
习惯如此。 <br> <br>价值观差距太大时，换团队。 <br>合适的争论 理越辩越明。 <br>1 个人提升最好途径。 <br>2 团队关系建设，扩大双方影响力。 <br>3 识别设计的缺陷，找到测试不易发现的问题。 
<br>4 设立质量标杆。性格习惯。 <br> <br> <br>小技巧 <br>量小 <br>牛人 <br>高于平均 <br>新员工严格 <br>适当委婉 <br>过两遍。 <br> 
<br> <br>思考题 个人小技巧 <br>&nbsp;1 直接截图，贴上框架代码（为表达意图，往往删掉异常处理）或其它类似实现代码 <br> <br>&nbsp;&nbsp;2 
个人习惯，我对一些违背开发原则的事，是和开发同学不断探讨的， <br>简单如 dry 好判断的，一定让开发把实现抽取出来。 <br>srp dip 这些往往具体问题具体分析，毕竟不能创个变量就上工厂吧，场景是否适合，克制那颗过度封装的心，改为逐步迭代。 
<br>&nbsp;3 改完后，会引一些文章。（我一般选开发接受并修改后，一是此刻他心态更平和，二是刚折腾完，手热。这时候方便适当展开。 <br> <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.752 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.752 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:11:32.754 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 提出点个人的理解吧:记得池老师的专利第一季有篇文章&lt;技术leader是否应该写代码&gt;，其实目前技术经理大概有3成的时间在做Code 
Review。这块曾经和一些同行聊过：就像老师课中所说的，不做基本上上线可能就挂了。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前Code Review应当有两张方式吧: 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种是强行做规则-违反规则就不让上线，提交不通过，这块可以用工具去实现； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种就是人为的对比工具和审核，毕竟人写代码的人看不到自己的问题的，除非是公司或者部门这块的把关的，例如：sql代码基本上有DBA审核，DBA自己写的就只能自己反复测，自己挖了坑的话还是要自己填的，这个会做的异常谨慎。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;个人觉得Code Review不仅仅重要，不做code review就是挖地雷;自己亲身经历过几次这种事情，这也是为何陈皓老师在他的专栏会去强调这块。好的code 
review会减少大量的不确定的坑：这个就像我们日常出门上班会确定门是否关好一样。 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说个案例吧：从大公司到中小公司做DBA；CTO和我说数据库慢你优化一下，通过索引解决了出现的典型问题。生产上线前我说我把代码检查一遍，PM说我们的代码都测过没问题，我坚持检查一下-为此双休日没休息加班检查；周一我就扔出了不少所谓的慢且没问题的coding，CTO直接全部门发飙-先解决问题再上线。虽历史问题无力解决，不过常规问题减少了不少。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故而觉得不做code review基本山就是背着炸药包前进：什么时候炸了都不知道；只不过这块目前都是技术经理或者公司真正的专业人士在做而已。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/19/5b/08/3c1e650b.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>丁丁历险记</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-11 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 笔记 <br>争议项 <br>1 加班累死，代码审查脱慢进度。 <br>2 代码审查做的事无聊。 （改改注释） <br>3 
习惯如此。 <br> <br>价值观差距太大时，换团队。 <br>合适的争论 理越辩越明。 <br>1 个人提升最好途径。 <br>2 团队关系建设，扩大双方影响力。 <br>3 识别设计的缺陷，找到测试不易发现的问题。 
<br>4 设立质量标杆。性格习惯。 <br> <br> <br>小技巧 <br>量小 <br>牛人 <br>高于平均 <br>新员工严格 <br>适当委婉 <br>过两遍。 <br> 
<br> <br>思考题 个人小技巧 <br>&nbsp;1 直接截图，贴上框架代码（为表达意图，往往删掉异常处理）或其它类似实现代码 <br> <br>&nbsp;&nbsp;2 
个人习惯，我对一些违背开发原则的事，是和开发同学不断探讨的， <br>简单如 dry 好判断的，一定让开发把实现抽取出来。 <br>srp dip 这些往往具体问题具体分析，毕竟不能创个变量就上工厂吧，场景是否适合，克制那颗过度封装的心，改为逐步迭代。 
<br>&nbsp;3 改完后，会引一些文章。（我一般选开发接受并修改后，一是此刻他心态更平和，二是刚折腾完，手热。这时候方便适当展开。 <br> <br> </div> <div 
class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 20, 20) 
 {executed in 1 msec}
2020-11-19 11:11:32.758 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.758 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:11:32.758 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.759 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:11:32.760 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 20, 'https://static001.geekbang.org/resource/image/bb/34/bb9aec2f59604409cf2c447ab9d1f134.jpg', 
20) 
 {executed in 0 msec}
2020-11-19 11:11:32.763 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.764 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:11:32.765 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 20, 'https://static001.geekbang.org/resource/image/bb/34/bb9aec2f59604409cf2c447ab9d1f134.jpg', 
20) 
 {executed in 0 msec}
2020-11-19 11:11:32.768 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.769 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:11:32.770 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:11:32.774 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=20 
 {executed in 0 msec}
2020-11-19 11:11:32.774 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:11:32.775 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 20, 20) 
 {executed in 0 msec}
2020-11-19 11:12:16.153 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='949542636783946' 
 {executed in 1 msec}
2020-11-19 11:12:16.153 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:12:16.154 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755536, 1) 
 {executed in 0 msec}
2020-11-19 11:12:16.154 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755536, 1) 
 {executed in 0 msec}
2020-11-19 11:12:16.154 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|21            |
|--------------|

2020-11-19 11:12:16.163 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'd6ba0515-69e5-4256-9914-7073eb727ccd', 
21) 
 {executed in 1 msec}
2020-11-19 11:12:16.163 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'd6ba0515-69e5-4256-9914-7073eb727ccd', 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.163 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|21            |
|--------------|

2020-11-19 11:12:16.174 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=21, revision_default=1, revision_timestamp=1605755536, 
revision_uid=1 where vid=21 
 {executed in 0 msec}
2020-11-19 11:12:16.180 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.180 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:12:16.181 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '949542636783946', 'zh-hans', 21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.186 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 11:12:16.186 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:12:16.187 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '949542636783946', 'zh-hans', 21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.191 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=21 
 {executed in 0 msec}
2020-11-19 11:12:16.192 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:12:16.192 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=21 
 {executed in 0 msec}
2020-11-19 11:12:16.193 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:12:16.194 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 21, 0, 0, 19, 0, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.197 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 11:12:16.197 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:12:16.198 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.198 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:12:16.202 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1203" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-52e0d071 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1204"> <span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" 
data-offset-key="1205:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-5da297c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1206"> 
<span data-slate-object="text" data-key="1207"><span data-slate-leaf="true" data-offset-key="1207:0" 
data-first-offset="true"><span data-slate-string="true">本章我们已经学习了不少持久化，特别是有关存储的技术。那在实际业务中，复杂的问题是一个接着一个的，面对这些琳琅满目的具体技术，我们该怎样运用自己所掌握的知识，做出合理的选择呢？今天我们就来接触一些典型的系统，看看对于它们来说，该做出怎样的持久化设计和技术选型。我相信我们实际接触的系统也有相当程度的类比性，可以带来应用的参考意义。</span></span></span> 
</div> <h2 class="se-8f31d6bd" data-slate-type="heading" data-slate-object="block" data-key="1208"><span 
data-slate-object="text" data-key="1209"><span data-slate-leaf="true" data-offset-key="1209:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎</span></span></span></h2> <div 
class="se-9dfa1127 " data-slate-type="paragraph" data-slate-object="block" data-key="1210"> 
<span data-slate-object="text" data-key="1211"><span data-slate-leaf="true" data-offset-key="1211:0" 
data-first-offset="true"><span data-slate-string="true">小到 BBS 网站的帖子搜索，大到互联网数据搜索引擎，搜索引擎可以说是我们日常接触的几大系统之一。可是，搜索数据的存储该怎么设计呢？</span></span></span> 
</div> <div class="se-77377082 " data-slate-type="paragraph" data-slate-object="block" data-key="1212"> 
<span data-slate-object="text" data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" 
data-first-offset="true"><span data-slate-string="true">有一些反应迅速的程序员朋友，也许会设想这样的存储结构，利用关系数据库，创建这样一个存储文本（文章）的关系数据库表 
ARTICLES：</span></span></span> </div> <div class="se-45ec6ad7" data-slate-type="image" data-slate-object="block" 
data-key="1214"> <img class="se-cb1a1007" src="https://static001.geekbang.org/resource/image/45/04/4568eea6b14c67c379e840b2918ee404.jpg"> 
</div> <div class="se-60c0a33f " data-slate-type="paragraph" data-slate-object="block" data-key="1215"> 
<span data-slate-object="text" data-key="1216"><span data-slate-leaf="true" data-offset-key="1216:0" 
data-first-offset="true"><span data-slate-string="true">那么，假如现在的搜索关键字是“存储”，我们就可以利用字符串匹配的方式来对 
CONTENT 列进行匹配查询：</span></span></span> </div> <div class="se-aa180433 se-1676b1e4" data-slate-type="pre" 
data-slate-object="block" data-key="1217" data-code-language="sql"> <div class="se-eb65ed62 
se-bbe16f6a"> <span></span> </div> <div class="se-c63b3623"> <div class="se-ea27c756 se-782f781d" 
data-code-line-number="1"></div> </div> <div class="se-57bd0d92 ps ps--active-x"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1218"> <span data-slate-object="text" 
data-key="1219"><span data-slate-leaf="true" data-offset-key="1219:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8383620888" 
data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1219:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6627615917" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:3"><span data-slate-string="true"> ARTICLES </span></span><span 
data-slate-leaf="true" data-offset-key="1219:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4550830848" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5965950239" data-annotation-type="annotation"><span data-slate-string="true">CONTENT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5317078084" data-annotation-type="annotation"><span data-slate-string="true">like</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:10"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8390786565" data-annotation-type="annotation"><span data-slate-string="true">''% 
存储 %''</span></span></span><span data-slate-leaf="true" data-offset-key="1219:11"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 326px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-a9ae5959 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1220"> <span data-slate-object="text" data-key="1221"><span data-slate-leaf="true" 
data-offset-key="1221:0" data-first-offset="true"><span data-slate-string="true">这很容易就实现了搜索功能。但是，这样的方式有着明显的问题，即使用 
% 来进行字符串匹配是非常低效的，因此这样的查询需要遍历整个表（全表扫描）。几篇、几十篇文章的时候，还不是什么问题，但是如果有几十万、几百万的文章，这种方式是完全不可行的。且不说单独的关系数据库表就不能容纳那么大的数据了，就是能够容纳，要扫描一遍，这里的时间代价是难以想象的，就算我们的系统愿意做，用户可都不愿意等啊。</span></span></span> 
</div> <div class="se-7abca630 " data-slate-type="paragraph" data-slate-object="block" data-key="1222"> 
<span data-slate-object="text" data-key="1223"><span data-slate-leaf="true" data-offset-key="1223:0" 
data-first-offset="true"><span data-slate-string="true">于是，我们就要引入</span></span></span><span 
data-slate-object="text" data-key="1224"><span data-slate-leaf="true" data-offset-key="1224:0" 
data-first-offset="true"><span class="se-3a73ed2a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">“倒排索引”（Inverted Index）</span></span></span></span><span data-slate-object="text" 
data-key="1225"><span data-slate-leaf="true" data-offset-key="1225:0" data-first-offset="true"><span 
data-slate-string="true">的技术了。在前面所述的场景下，我们可以把这个概念拆分为两个部分来解释：</span></span></span> </div> <div 
class="se-b6f648e1" data-slate-type="list" data-slate-object="block" data-key="1226"> <div 
class="se-b5bbb40b se-19f0ce4c" data-slate-type="list-line" data-slate-object="block" data-key="1227"> 
<span data-slate-object="text" data-key="1228"><span data-slate-leaf="true" data-offset-key="1228:0" 
data-first-offset="true"><span data-slate-string="true">“倒排”，指的是存储的结构不再是先定位到文章，再去文章的内容中找寻关键字了；而是反过来，先定位到关键字，再去看关键字属于哪些文章。</span></span></span> 
</div> <div class="se-a754c520 se-99a4f6de" data-slate-type="list-line" data-slate-object="block" 
data-key="1229"> <span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" 
data-offset-key="1230:0" data-first-offset="true"><span data-slate-string="true">“索引”，指的是关键字，是被索引起来的，因此查询的速度会比较快。</span></span></span> 
</div> </div> <div class="se-bcf701e5 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1231"> <span data-slate-object="text" data-key="1232"><span data-slate-leaf="true" 
data-offset-key="1232:0" data-first-offset="true"><span data-slate-string="true">好，那上面的 ARTICLES 
表依然存在，但现在需要添加一个关键字表 KEYWORDS，并且，KEYWORD 列需要添加索引，因此这条关键字的记录可以被迅速找到：</span></span></span> </div> 
<div class="se-8bdc0855" data-slate-type="image" data-slate-object="block" data-key="1233"> 
<img class="se-6c13fd39" src="https://static001.geekbang.org/resource/image/c9/11/c9868489ed7415cdad3f760e0ea5d411.jpg"> 
</div> <div class="se-c147cc5f " data-slate-type="paragraph" data-slate-object="block" data-key="1234"> 
<span data-slate-object="text" data-key="1235"><span data-slate-leaf="true" data-offset-key="1235:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们还需要一个关联关系表把 KEYWORDS 表和 ARTICLES 
表结合起来，KEYWORD_ID 和 ARTICLE_ID 作为联合主键：</span></span></span> </div> <div class="se-2bb60fa5" 
data-slate-type="image" data-slate-object="block" data-key="1236"> <img class="se-5ea40cbd" 
src="https://static001.geekbang.org/resource/image/ba/9b/ba5a26f2d882314e7d0d1f60c23d979b.jpg"> 
</div> <div class="se-9319a8c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1237"> 
<span data-slate-object="text" data-key="1238"><span data-slate-leaf="true" data-offset-key="1238:0" 
data-first-offset="true"><span data-slate-string="true">你看，这其实是一个多对多的关系，即同一个关键字可以出现在多篇文章中，而一篇文章可以包含多个不同的关键字。这样，我们可以先根据被索引了的关键字，从 
KEYWARDS 表中找到相应的 KEYWORD_ID，进而根据它在上面的关联关系表找到 ARTICLE_ID，再根据它去 ARTICLES 表中找到对应的文章。</span></span></span> 
</div> <div class="se-4b982a60 " data-slate-type="paragraph" data-slate-object="block" data-key="1239"> 
<span data-slate-object="text" data-key="1240"><span data-slate-leaf="true" data-offset-key="1240:0" 
data-first-offset="true"><span data-slate-string="true">这看起来是三次查找，但是因为每次都走索引，就免去了全表扫描，在数据量较小的时候速度并不慢，并且，在使用 
SQL 实现的时候，这个过程完全可以放到一个 SQL 语句中。在数据量较小的时候，上面的方法已经足够好用了。</span></span></span> </div> <div class="se-48a44247 
" data-slate-type="paragraph" data-slate-object="block" data-key="1241"> <span data-slate-object="text" 
data-key="1242"><span data-slate-leaf="true" data-offset-key="1242:0" data-first-offset="true"><span 
data-slate-string="true">但是，这个方法只解决了全表扫描和字符串 % 匹配查询造成的性能问题，并且，在数据量较大时，并没有解决数据量本身在单机模式下造成的性能问题。</span></span></span> 
</div> <div class="se-103de2b9 " data-slate-type="paragraph" data-slate-object="block" data-key="1243"> 
<span data-slate-object="text" data-key="1244"><span data-slate-leaf="true" data-offset-key="1244:0" 
data-first-offset="true"><span data-slate-string="true">于是，我们可以考虑搭建和使用 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1245" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1246"><span data-slate-leaf="true" data-offset-key="1246:0" 
data-first-offset="true"><span data-slate-string="true">Elasticsearch</span></span></span></a><span 
data-slate-object="text" data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" 
data-first-offset="true"><span data-slate-string="true">，或者干脆使用云上的版本。Elasticsearch 将关键字使用哈希算法分散到多个不同的被称为“Shard”的虚拟节点，并且把它们部署到不同的机器节点上，且每一个 
shard 具备指定数量的冗余副本（Replica），这些副本要求被放置到不同的物理机器节点上。通过这样的方式，我们就可以保证每台机器都只管理稳定且可控的数据量，并且保证了搜索服务数据的可用性。</span></span></span> 
</div> <div class="se-5195f29f" data-slate-type="image" data-slate-object="block" data-key="1248"> 
<img class="se-cd873cd2" src="https://static001.geekbang.org/resource/image/8c/09/8c4e956ca12bccc88ea9fd5d8f461a09.jpg"> 
</div> <div class="se-9cdf3fd8 " data-slate-type="paragraph" data-slate-object="block" data-key="1249"> 
<span data-slate-object="text" data-key="1250"><span data-slate-leaf="true" data-offset-key="1250:0" 
data-first-offset="true"><span data-slate-string="true">对于每一个关键字，都可以配置指向文章和文章中位置的映射。比如有这样两篇文章：</span></span></span> 
</div> <div class="se-1c5eab38" data-slate-type="block-quote" data-slate-object="block" data-key="1251"> 
<div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="1252"> 
<span data-slate-object="text" data-key="1253"><span data-slate-leaf="true" data-offset-key="1253:0" 
data-first-offset="true"><span data-slate-string="true">文章 1 的正文是：今天介绍存储技术。</span></span></span> 
</div> <div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="1254"> 
<span data-slate-object="text" data-key="1255"><span data-slate-leaf="true" data-offset-key="1255:0" 
data-first-offset="true"><span data-slate-string="true">文章 2 的正文是：存储技术有多种分类。</span></span></span> 
</div> </div> <div class="se-9b2927f0 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1256"> <span data-slate-object="text" data-key="1257"><span data-slate-leaf="true" 
data-offset-key="1257:0" data-first-offset="true"><span data-slate-string="true">那么，就有如下映射关系（下表仅用于表示在 
Shard 中的数据映射，并非关系数据库表）：</span></span></span> </div> <div class="se-c127bc8b" data-slate-type="image" 
data-slate-object="block" data-key="1258"> <img class="se-3e7825f1" src="https://static001.geekbang.org/resource/image/77/68/779702fd2a29ff418711928789bd3b68.jpg"> 
</div> <div class="se-e3ff29ac " data-slate-type="paragraph" data-slate-object="block" data-key="1259"> 
<span data-slate-object="text" data-key="1260"><span data-slate-leaf="true" data-offset-key="1260:0" 
data-first-offset="true"><span data-slate-string="true">你看，DOCUMENT 这一部分，每一行都可以存放若干个“文章 id 
: 文中关键字的位置”的组合。</span></span></span> </div> <h2 class="se-b3a2a24f" data-slate-type="heading" 
data-slate-object="block" data-key="1261"><span data-slate-object="text" data-key="1262"><span 
data-slate-leaf="true" data-offset-key="1262:0" data-first-offset="true"><span data-slate-string="true">地理信息系统</span></span></span></h2> 
<div class="se-5dd44887 " data-slate-type="paragraph" data-slate-object="block" data-key="1263"> 
<span data-slate-object="text" data-key="1264"><span data-slate-leaf="true" data-offset-key="1264:0" 
data-first-offset="true"><span data-slate-string="true">有这样一款订餐软件，上面有这样一个功能，在地图上可以列出距离当前用户最近的签约饭馆，并且随着用户缩放地图，还可以控制这个距离的大小。每个饭馆的位置可以简单考虑为经度和纬度组合的坐标（下图来自 
Google 地图，仅示意用）。</span></span></span> </div> <div class="se-49eddde1" data-slate-type="image" 
data-slate-object="block" data-key="1265"> <img class="se-5c9ab7e5" src="https://static001.geekbang.org/resource/image/50/9a/500b7bc8394a1b63c7fb89ee4c18cb9a.jpg"> 
</div> <div class="se-3d802770 " data-slate-type="paragraph" data-slate-object="block" data-key="1266"> 
<span data-slate-object="text" data-key="1267"><span data-slate-leaf="true" data-offset-key="1267:0" 
data-first-offset="true"><span data-slate-string="true">简言之，这个功能就是“显示一定范围内的目标集合”，可它该怎样实现呢？</span></span></span> 
</div> <div class="se-cda00e26 " data-slate-type="paragraph" data-slate-object="block" data-key="1268"> 
<span data-slate-object="text" data-key="1269"><span data-slate-leaf="true" data-offset-key="1269:0" 
data-first-offset="true"><span data-slate-string="true">在考虑这个功能以前，我们可以类比地想一想，它其实是一个相当常见且通用的功能，常常应用于订餐、导航软件、旅游网站等等这类 
LBS（Location-Based Service，基于位置的服务）应用中，因此这个问题是具有一定典型意义的。</span></span></span> </div> <div class="se-add40cf8 
" data-slate-type="paragraph" data-slate-object="block" data-key="1270"> <span data-slate-object="text" 
data-key="1271"><span data-slate-leaf="true" data-offset-key="1271:0" data-first-offset="true"><span 
data-slate-string="true">这个背后的数据结构以及存储又是怎样的呢？我们顺着这个“经纬度”的思路往下想，那么，如果就把这样的地理信息，放到一张 LOCATIONS 
表上，就会是这样：</span></span></span> </div> <div class="se-9d899f83" data-slate-type="image" data-slate-object="block" 
data-key="1272"> <img class="se-2e0b3f72" src="https://static001.geekbang.org/resource/image/bb/43/bb027beec790f8ee207b051b4a5ca943.jpg"> 
</div> <div class="se-aa18af61 " data-slate-type="paragraph" data-slate-object="block" data-key="1273"> 
<span data-slate-object="text" data-key="1274"><span data-slate-leaf="true" data-offset-key="1274:0" 
data-first-offset="true"><span data-slate-string="true">当然了，还有一张 RESTAURANTS 表：</span></span></span> 
</div> <div class="se-c3390074" data-slate-type="image" data-slate-object="block" data-key="1275"> 
<img class="se-f588c18e" src="https://static001.geekbang.org/resource/image/ba/02/bafddb5244287066ec676b6c30054c02.jpg"> 
</div> <div class="se-ff260739 " data-slate-type="paragraph" data-slate-object="block" data-key="1276"> 
<span data-slate-object="text" data-key="1277"><span data-slate-leaf="true" data-offset-key="1277:0" 
data-first-offset="true"><span data-slate-string="true">于是，要查出范围内的饭馆，我们就可以写这样的 SQL：</span></span></span> 
</div> <div class="se-12ad3a34 se-c5b873b5" data-slate-type="pre" data-slate-object="block" 
data-key="1278" data-code-language="sql"> <div class="se-64f59a01 se-c97d7e52"> <span></span> 
</div> <div class="se-149a68ea"> <div class="se-157e5abc se-1bcf8bb3" data-code-line-number="1"></div> 
<div class="se-157e5abc se-1bcf8bb3" data-code-line-number="2"></div> <div class="se-157e5abc 
se-1bcf8bb3" data-code-line-number="3"></div> <div class="se-157e5abc se-1bcf8bb3" data-code-line-number="4"></div> 
<div class="se-157e5abc se-1bcf8bb3" data-code-line-number="5"></div> <div class="se-157e5abc 
se-1bcf8bb3" data-code-line-number="6"></div> </div> <div class="se-2dba92b4 ps"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1279"> <span data-slate-object="text" 
data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9182086135" 
data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1280:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1280:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9950164498" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1280:3"><span data-slate-string="true"> LOCATIONS l, 
RESTAURANTS r </span></span><span data-slate-leaf="true" data-offset-key="1280:4"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6578944204" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1281"> <span data-slate-object="text" 
data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" data-first-offset="true"><span 
data-slate-string="true"> l.RESTAURANT_ID = r.RESTAURANT_ID </span></span><span data-slate-leaf="true" 
data-offset-key="1282:1"><span class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8006659042" 
data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span></span> 
</div> <div class="se-3ea883e4 se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" 
data-key="1283"> <span data-slate-object="text" data-key="1284"><span data-slate-leaf="true" 
data-offset-key="1284:0" data-first-offset="true"><span data-slate-string="true"> l.LONGITUDE 
&gt;= 经度下界 </span></span><span data-slate-leaf="true" data-offset-key="1284:1"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1539765598" data-annotation-type="annotation"><span 
data-slate-string="true">and</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1285"> <span data-slate-object="text" 
data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" data-first-offset="true"><span 
data-slate-string="true"> l.LONGITUDE &lt;= 经度上界 </span></span><span data-slate-leaf="true" 
data-offset-key="1286:1"><span class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8496362576" 
data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span></span> 
</div> <div class="se-3ea883e4 se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" 
data-key="1287"> <span data-slate-object="text" data-key="1288"><span data-slate-leaf="true" 
data-offset-key="1288:0" data-first-offset="true"><span data-slate-string="true"> l.LATITUDE 
&gt;= 纬度下界 </span></span><span data-slate-leaf="true" data-offset-key="1288:1"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1730678695" data-annotation-type="annotation"><span 
data-slate-string="true">and</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1289"> <span data-slate-object="text" 
data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" data-first-offset="true"><span 
data-slate-string="true"> l.LATITUDE &lt;= 纬度上界 ;</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-443d2ad4 
" data-slate-type="paragraph" data-slate-object="block" data-key="1291"> <span data-slate-object="text" 
data-key="1292"><span data-slate-leaf="true" data-offset-key="1292:0" data-first-offset="true"><span 
data-slate-string="true">其中，这个经度、纬度的上下界，是根据用户所在位置，以及地图缩放程度折算出来的。显然，这需要一个全表扫描，加一个笛卡尔积，复杂度偏高，能否优化一下它呢？在往下阅读前，你可以先想一想。</span></span></span> 
</div> <div class="se-09fbb4ec " data-slate-type="paragraph" data-slate-object="block" data-key="1293"> 
<span data-slate-object="text" data-key="1294"><span data-slate-leaf="true" data-offset-key="1294:0" 
data-first-offset="true"><span class="se-419117bb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">思路 1：给单一维度加索引</span></span></span></span> </div> <div class="se-08753f00 
" data-slate-type="paragraph" data-slate-object="block" data-key="1295"> <span data-slate-object="text" 
data-key="1296"><span data-slate-leaf="true" data-offset-key="1296:0" data-first-offset="true"><span 
data-slate-string="true">嗯，如果经纬度可以分开处理，是不是就可以搞定？比方说，只考虑经度的话，给经度一列建立索引，所有饭馆按照从小到大的顺序排好。这样的话，当给定范围的时候，我们就可以快速找到经度范围内所有满足经度条件的饭馆。从时间复杂度的角度来考虑，在不做额外优化的情况下，以在有序经度列上的二分查找为例，这个复杂度是 
log(n)。</span></span></span> </div> <div class="se-998a42ef " data-slate-type="paragraph" data-slate-object="block" 
data-key="1297"> <span data-slate-object="text" data-key="1298"><span data-slate-leaf="true" 
data-offset-key="1298:0" data-first-offset="true"><span data-slate-string="true">当再考虑纬度的时候，假如有 
m 家满足经度条件的饭馆，接下去我们就只能挨个去检查这 m 家饭馆，找出它们中满足纬度条件的了，也就是说，总的时间复杂度是 m*log(n)。这种方法比较简单，在数据量不太大的情况下也没有太大问题，因此这已经是很好的方法了。但是，在某些场景下这个 
m 还有可能比较大，那么，有进一步优化的办法吗？</span></span></span> </div> <div class="se-21662fd6 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1299"> <span data-slate-object="text" data-key="1300"><span 
data-slate-leaf="true" data-offset-key="1300:0" data-first-offset="true"><span class="se-dc0dd7c8" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">思路 2：GeoHash</span></span></span></span> 
</div> <div class="se-f2f592b1 " data-slate-type="paragraph" data-slate-object="block" data-key="1301"> 
<span data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true">其实，经度和纬度的大致思路可以，但是在框选饭馆的时候，不能把经度和纬度分别框选，而应该结合起来框选，并且把复杂度依然控制在 
log(n) 的级别。</span></span></span> </div> <div class="se-8fec5785 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1303"> <span data-slate-object="text" data-key="1304"><span 
data-slate-leaf="true" data-offset-key="1304:0" data-first-offset="true"><span data-slate-string="true">其中一个办法就是 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1305" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" data-offset-key="1306:0" 
data-first-offset="true"><span data-slate-string="true">GeoHash</span></span></span></a><span 
data-slate-object="text" data-key="1307"><span data-slate-leaf="true" data-offset-key="1307:0" 
data-first-offset="true"><span data-slate-string="true">，它的大致思路就是降维。即把一个经度和纬度的二维坐标用一个一维的数来表示。具体实现上，有一种常见的办法就是把经度和纬度用一个长位数的数来表示，比如：</span></span></span> 
</div> <div class="se-0b76b89e se-69479d11" data-slate-type="pre" data-slate-object="block" 
data-key="1308"> <div class="se-938d8933 se-34705256"> <span></span> </div> <div class="se-b3e75833"> 
<div class="se-c74c99dd se-2e1661fb" data-code-line-number="1"></div> <div class="se-c74c99dd 
se-2e1661fb" data-code-line-number="2"></div> </div> <div class="se-91ab267e ps"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1309"> <span data-slate-object="text" 
data-key="1310"><span data-slate-leaf="true" data-offset-key="1310:0" data-first-offset="true"><span 
data-slate-string="true">经度：101010……</span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1311"> <span data-slate-object="text" 
data-key="1312"><span data-slate-leaf="true" data-offset-key="1312:0" data-first-offset="true"><span 
data-slate-string="true">纬度：100110……</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-e691db67 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1313"> <span data-slate-object="text" data-key="1314"><span 
data-slate-leaf="true" data-offset-key="1314:0" data-first-offset="true"><span data-slate-string="true">接着把二者从左到右挨个位拼接，黑色字符来自经度，蓝色字符来自纬度：</span></span></span> 
</div> <div class="se-7a1eefab" data-slate-type="image" data-slate-object="block" data-key="1315"> 
<img class="se-6ad67326" src="https://static001.geekbang.org/resource/image/11/af/1142aa596e19561794080a5896667aaf.jpg"> 
</div> <div class="se-2ba5c56a " data-slate-type="paragraph" data-slate-object="block" data-key="1316"> 
<span data-slate-object="text" data-key="1317"><span data-slate-leaf="true" data-offset-key="1317:0" 
data-first-offset="true"><span data-slate-string="true">在这种方式下，从结果的左边最高位开始，取任意长度截断所得到的前缀，可以用来匹配距离目标位置一定距离范围的所有饭馆。当用户选取的地图范围越大，前缀长度就越长，这个匹配精度也就越高，匹配到的饭馆数量也就越少。通过这种方式，区域不断用前缀的方式来细分，相当于给每个子区域一个标记号码。</span></span></span> 
</div> <div class="se-dc2940df " data-slate-type="paragraph" data-slate-object="block" data-key="1318"> 
<span data-slate-object="text" data-key="1319"><span data-slate-leaf="true" data-offset-key="1319:0" 
data-first-offset="true"><span data-slate-string="true">那么，我们数据库表中的经度和纬度就可以合并为一列，再令这一列为主键，或者做索引，就能够进行单列的范围查询了。</span></span></span> 
</div> <div class="se-09c23d09" data-slate-type="image" data-slate-object="block" data-key="1320"> 
<img class="se-a5587edb" src="https://static001.geekbang.org/resource/image/a7/fa/a703d1d17e273fcc4d1150e9105071fa.jpg"> 
</div> <div class="se-212284de " data-slate-type="paragraph" data-slate-object="block" data-key="1321"> 
<span data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">最后，我们已经走到这一步了，接下来该怎么把这个表落实到数据库中呢？这就有多种方式可供选择了。比如我们可以使用关系数据库（例如 
MySQL），也可以使用 NoSQL 中的键值数据库（例如 Redis 等）。这方面可以根据其它业务需求，以及实际开发的限制来选择，具体选择的策略，请继续阅读下文。</span></span></span> 
</div> <h2 class="se-5aaa4c5e" data-slate-type="heading" data-slate-object="block" data-key="1323"><span 
data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">SQL or NoSQL？</span></span></span></h2> 
<div class="se-11e1519b " data-slate-type="paragraph" data-slate-object="block" data-key="1325"> 
<span data-slate-object="text" data-key="1326"><span data-slate-leaf="true" data-offset-key="1326:0" 
data-first-offset="true"><span data-slate-string="true">我们在实际的存储系统选择时，经常会涉及到 SQL 数据库和 NoSQL 
数据库的选择，也就是关系数据库和非关系数据库的选择。举个例子，如果是电子商务网站（这可能是我们平时听到的最多的例子之一了），应该选择 SQL 还是 NoSQL？</span></span></span> 
</div> <h3 class="se-b4c94c19" data-slate-type="heading" data-slate-object="block" data-key="1327"><span 
data-slate-object="text" data-key="1328"><span data-slate-leaf="true" data-offset-key="1328:0" 
data-first-offset="true"><span data-slate-string="true">两个前提角度</span></span></span></h3> <div 
class="se-9600f53a " data-slate-type="paragraph" data-slate-object="block" data-key="1329"> 
<span data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">设计和选型方面，有很多问题都不是黑白分明的，而是要拆分开来一块一块分析。我听到过很多“一刀切”的答案，比如有的人说用 
MySQL，有的说用 Redis，我认为这样的结论都是不妥的。那么怎样来选择呢？下面我就来介绍一些 SQL 和 NoSQL 选择的原则。但是在讲原则以前，我觉得需要从两个“前提角度”去厘清我们的问题。</span></span></span> 
</div> <div class="se-dd3fb78d " data-slate-type="paragraph" data-slate-object="block" data-key="1331"> 
<span data-slate-object="text" data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" 
data-first-offset="true"><span data-slate-string="true">以电商网站的设计为例，这两个角度就是这样的。</span></span></span> 
</div> <div class="se-bd59005a " data-slate-type="paragraph" data-slate-object="block" data-key="1333"> 
<span data-slate-object="text" data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" 
data-first-offset="true"><span class="se-21027aac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 数据分类</span></span></span></span> </div> <div class="se-829a4bbd 
" data-slate-type="paragraph" data-slate-object="block" data-key="1335"> <span data-slate-object="text" 
data-key="1336"><span data-slate-leaf="true" data-offset-key="1336:0" data-first-offset="true"><span 
data-slate-string="true">电子商务网站，这个概念所意味着的数据类型太多了。简单举几个例子：</span></span></span> </div> <div 
class="se-bdfb8392" data-slate-type="list" data-slate-object="block" data-key="1337"> <div 
class="se-dd6c1d8d se-f9852c91" data-slate-type="list-line" data-slate-object="block" data-key="1338"> 
<span data-slate-object="text" data-key="1339"><span data-slate-leaf="true" data-offset-key="1339:0" 
data-first-offset="true"><span data-slate-string="true">商品元数据，即商品的描述、厂家等等信息；</span></span></span> 
</div> <div class="se-de6b1014 se-648a146a" data-slate-type="list-line" data-slate-object="block" 
data-key="1340"> <span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" 
data-offset-key="1341:0" data-first-offset="true"><span data-slate-string="true">媒体数据，比如图片和视频；</span></span></span> 
</div> <div class="se-6d656e05 se-2928e737" data-slate-type="list-line" data-slate-object="block" 
data-key="1342"> <span data-slate-object="text" data-key="1343"><span data-slate-leaf="true" 
data-offset-key="1343:0" data-first-offset="true"><span data-slate-string="true">库存数据，包括在某个地点的库房某商品还有多少件库存；</span></span></span> 
</div> <div class="se-2461622e se-c88a9c2f" data-slate-type="list-line" data-slate-object="block" 
data-key="1344"> <span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" 
data-offset-key="1345:0" data-first-offset="true"><span data-slate-string="true">交易信息，比如订单、支付、余额管理；</span></span></span> 
</div> <div class="se-8b504dc5 se-3136e84d" data-slate-type="list-line" data-slate-object="block" 
data-key="1346"> <span data-slate-object="text" data-key="1347"><span data-slate-leaf="true" 
data-offset-key="1347:0" data-first-offset="true"><span data-slate-string="true">用户信息，涉及的功能包括登陆、注册和用户设置。</span></span></span> 
</div> </div> <div class="se-4dafeebc " data-slate-type="paragraph" data-slate-object="block" 
data-key="1348"> <span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" 
data-offset-key="1349:0" data-first-offset="true"><span data-slate-string="true">因此，在讨论什么存储适合数据和访问的时候，我们最好明确，到底具体是哪一种类型的数据。毕竟，看起来上面的业务场景将有着巨大差别。</span></span></span> 
</div> <div class="se-6512e940 " data-slate-type="paragraph" data-slate-object="block" data-key="1350"> 
<span data-slate-object="text" data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" 
data-first-offset="true"><span class="se-aae2a506" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 数据规模</span></span></span></span> </div> <div class="se-61e78ea8 
" data-slate-type="paragraph" data-slate-object="block" data-key="1352"> <span data-slate-object="text" 
data-key="1353"><span data-slate-leaf="true" data-offset-key="1353:0" data-first-offset="true"><span 
data-slate-string="true">电子商务网站有大有小，可别一想到电商网站，脑海里就是淘宝和京东，商品可以上千万，甚至上亿。但其实，我们大多数接触的系统，都不会有那么大的规模，电商网站完全可以小到一个提供在线购物业务的私人体育用品专营店，商品数量可以只有几十到几百。</span></span></span> 
</div> <div class="se-a2e7206c " data-slate-type="paragraph" data-slate-object="block" data-key="1354"> 
<span data-slate-object="text" data-key="1355"><span data-slate-leaf="true" data-offset-key="1355:0" 
data-first-offset="true"><span data-slate-string="true">只有把问题做如上的展开并明确以后，我们再去思考和讨论数据结构、一致性、可用性等等这些我们“熟悉”的方面，才准确。因此，从上面的例子来看，</span></span></span><span 
data-slate-object="text" data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" 
data-first-offset="true"><span class="se-4dbc55ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们在选择技术的时候，很可能要针对每一类数据选择“一组”技术，而不是笼统地选择“一项”技术了。</span></span></span></span> 
</div> <h3 class="se-f89eede4" data-slate-type="heading" data-slate-object="block" data-key="1357"><span 
data-slate-object="text" data-key="1358"><span data-slate-leaf="true" data-offset-key="1358:0" 
data-first-offset="true"><span data-slate-string="true">选择的思路</span></span></span></h3> <div 
class="se-bdd2adc7 " data-slate-type="paragraph" data-slate-object="block" data-key="1359"> 
<span data-slate-object="text" data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" 
data-first-offset="true"><span data-slate-string="true">那么下一步，我们该怎样来选择 SQL 或是 NoSQL 数据库呢？这部分可以说，不同的人有着颇为不同的看法。下面我想根据我的认识，谈谈一个大致的选择思路，请注意这只是一个粗略的基于经验的分类，具体的技术选择还要具体问题具体分析和细化。</span></span></span> 
</div> <div class="se-572447cc " data-slate-type="paragraph" data-slate-object="block" data-key="1361"> 
<span data-slate-object="text" data-key="1362"><span data-slate-leaf="true" data-offset-key="1362:0" 
data-first-offset="true"><span class="se-e087d359" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 对于中小型系统，在数据量不大且没有特殊的吞吐量、可用性等要求的情况下，或者在多种关系和非关系数据库都满足业务要求的情况下，优先考虑关系数据库。</span></span></span></span> 
</div> <div class="se-ff3acd25 " data-slate-type="paragraph" data-slate-object="block" data-key="1363"> 
<span data-slate-object="text" data-key="1364"><span data-slate-leaf="true" data-offset-key="1364:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库提供了成熟且强大的功能，包括强 schema 定义、关系查询、事务支持等等。关系数据库能够带来较强的扩展能力，未来在业务发展的时候，通过增加索引、增加表、增加列、增加关系查询，就可以迅速解决问题。</span></span></span> 
</div> <div class="se-e50f571c " data-slate-type="paragraph" data-slate-object="block" data-key="1365"> 
<span data-slate-object="text" data-key="1366"><span data-slate-leaf="true" data-offset-key="1366:0" 
data-first-offset="true"><span data-slate-string="true">在从内存模型到实际存储数据的 ORM 转换的时候，有非常成熟的且支持程度各异的框架，有的把 
ORM 完全自动化，让程序员可以关注在核心业务模型上面；有的则是把 ORM 定义让出来，提供足够的灵活性（这部分可以参见 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1367" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1368"><span data-slate-leaf="true" data-offset-key="1368:0" data-first-offset="true"><span 
data-slate-string="true">[第 12 讲]</span></span></span></a><span data-slate-object="text" data-key="1369"><span 
data-slate-leaf="true" data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> 
的加餐部分）。</span></span></span> </div> <div class="se-6dbf9d3f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true">值得注意的是，</span></span></span><span 
data-slate-object="text" data-key="1372"><span data-slate-leaf="true" data-offset-key="1372:0" 
data-first-offset="true"><span class="se-1b4ceec3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">不要觉得 NoSQL 是大数据量的一个必然选择。</span></span></span></span><span data-slate-object="text" 
data-key="1373"><span data-slate-leaf="true" data-offset-key="1373:0" data-first-offset="true"><span 
data-slate-string="true">事实上，即便数据量增大，关系数据库有时也依然是一个选择。当然需要明确的是，通常单表在数据量增大时，会产生性能方面的问题，但是可以使用 
Sharding 和 Partitioning 技术来缓和（扩展阅读中有这方面技术的介绍）；而数据可用性的问题，也可以使用集群加冗余技术来解决，当然，有得必有失，这种情况下，通常会牺牲一定程度的一致性。</span></span></span> 
</div> <div class="se-e24adf9c " data-slate-type="paragraph" data-slate-object="block" data-key="1374"> 
<span data-slate-object="text" data-key="1375"><span data-slate-leaf="true" data-offset-key="1375:0" 
data-first-offset="true"><span data-slate-string="true">那么，这个数据量多大算大到关系数据库无法承担了呢？我可以给你一个事实，即微博和 
Twitter 都是使用 MySQL 作为主要推文存储的（你可以参看扩展阅读中的文章），因此你可以看到在实际应用中，关系数据库对于特大数据量的支持也是有成功实践的。</span></span></span> 
</div> <div class="se-07301092 " data-slate-type="paragraph" data-slate-object="block" data-key="1376"> 
<span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" data-offset-key="1377:0" 
data-first-offset="true"><span class="se-45e04d74" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 是否具备明确的 schema 定义，是否需要支持关系查询和事务？如果有一项回答“是”，优先考虑关系数据库。</span></span></span></span> 
</div> <div class="se-3e96d933 " data-slate-type="paragraph" data-slate-object="block" data-key="1378"> 
<span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" data-offset-key="1379:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库，首当其冲的特点就是“关系”。因此，可能会有朋友说，不对，电商网站的“商品”其实 
schema 是不确定的啊——例如，服装一类商品，都有“尺寸”信息；而电器类呢，都有“功率”信息，这样特定类型的属性决定了商品很难被抽象成某一个统一的表啊。</span></span></span> 
</div> <div class="se-b1d0a958 " data-slate-type="paragraph" data-slate-object="block" data-key="1380"> 
<span data-slate-object="text" data-key="1381"><span data-slate-leaf="true" data-offset-key="1381:0" 
data-first-offset="true"><span data-slate-string="true">没错，但是为什么要做到如此牵强的“统一”？通用的商品属性，例如厂家、商品唯一编号当然可以放到“统一”的商品表里面，但余下的信息还是可以根据商品类型放到各自类型的特定表里面，这就好像基类和派生类一样，抽象和统一只能做到某一个层次，层次太高反而不利于理解和维护。</span></span></span> 
</div> <div class="se-bc84130b " data-slate-type="paragraph" data-slate-object="block" data-key="1382"> 
<span data-slate-object="text" data-key="1383"><span data-slate-leaf="true" data-offset-key="1383:0" 
data-first-offset="true"><span data-slate-string="true">对于一些需要事务的需求，例如订购，往往需要关系数据库的支持。当然，这只是多数情况，NoSQL 
也有例外，即允许选择 CAP 中的 CP，具备强一致性且支持事务机制的，例如 DynamoDB。</span></span></span> </div> <div class="se-a59cd0fe 
" data-slate-type="paragraph" data-slate-object="block" data-key="1384"> <span data-slate-object="text" 
data-key="1385"><span data-slate-leaf="true" data-offset-key="1385:0" data-first-offset="true"><span 
data-slate-string="true">而有一些系统和数据，则变化很大。比如用户数据，在多数情况下，schema 往往是比较明确的，而且数量上也没有订单等数据一般有特别大的伸缩性要求，因此往往也放到关系数据库里面；但是，在另外一些系统中，用户信息的组成不确定，或者说，schema 
不确定，用户信息会放到 JSON 等松散结构的文本中，这种情况下文档数据库也是一个常见的选择；但是在搜索等某些相关功能的实现上，可能又会使用搜索引擎等不同于上面任一者的其它方式。</span></span></span> 
</div> <div class="se-e296f663 " data-slate-type="paragraph" data-slate-object="block" data-key="1386"> 
<span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" 
data-first-offset="true"><span class="se-9b44d3b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 如果符合结构不定（包括半结构化和无结构化）、高伸缩性、最终一致性、高性能（高吞吐量、高可用性、低时延等）的特点和要求，可以考虑非关系数据库。</span></span></span></span> 
</div> <div class="se-60bc4e4c " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">简单来说，这时的具体技术选择，可以按照这样两个步骤来落地：</span></span></span> 
</div> <div class="se-8569bf8c" data-slate-type="list" data-slate-object="block" data-key="1390"> 
<div class="se-c15eff32 se-4ecbcce5" data-slate-type="list-line" data-slate-object="block" 
data-key="1391"> <span data-slate-object="text" data-key="1392"><span data-slate-leaf="true" 
data-offset-key="1392:0" data-first-offset="true"><span data-slate-string="true">如果你还记得 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1393" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" 
data-first-offset="true"><span data-slate-string="true">[第 24 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的那个 NoSQL 三角，根据一致性、可用性的要求，我们可以选择这个三角中的某一条边；</span></span></span> 
</div> <div class="se-33ffd660 se-65c57959" data-slate-type="list-line" data-slate-object="block" 
data-key="1396"> <span data-slate-object="text" data-key="1397"><span data-slate-leaf="true" 
data-offset-key="1397:0" data-first-offset="true"><span data-slate-string="true">而在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1398" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1399"><span data-slate-leaf="true" data-offset-key="1399:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" 
data-first-offset="true"><span data-slate-string="true"> 中则介绍了具体的 NoSQL 技术的分类和适用的问题类型，可以依其做进一步选择，比如根据数据结构化的程度，在那条边上，来进一步选择某一类 
NoSQL 的存储技术。</span></span></span> </div> </div> <div class="se-b962dfeb " data-slate-type="paragraph" 
data-slate-object="block" data-key="1401"> <span data-slate-object="text" data-key="1402"><span 
data-slate-leaf="true" data-offset-key="1402:0" data-first-offset="true"><span data-slate-string="true">比如说，这个电商问题中提到的媒体数据，即图片和视频，通常来说可用性更为重要，而这一类的大文件，没有内部的 
schema，可以考虑使用擅长存放无结构大对象的文档型数据库。当然，也可以直接存放为文件，利用 CDN 的特性同步到离用户更近的节点去，特别对于视频来说，要提供好的用户体验，砸钱到 
CDN 服务几乎是必选。</span></span></span> </div> <div class="se-b2d8a78e " data-slate-type="paragraph" 
data-slate-object="block" data-key="1403"> <span data-slate-object="text" data-key="1404"><span 
data-slate-leaf="true" data-offset-key="1404:0" data-first-offset="true"><span data-slate-string="true">再比如，商品页在很大程度上都是可以缓存的，而缓存基本上都是为了保证可用性而会牺牲一定的一致性。除了上面介绍的 
CDN 实现了对媒体内容的缓存以外，商品页本身，或是大部分区域的信息，都是可以利用 Memcached 等缓存服务缓存起来的。</span></span></span> </div> 
<h2 class="se-e66a8174" data-slate-type="heading" data-slate-object="block" data-key="1405"><span 
data-slate-object="text" data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-d0e99c76 " data-slate-type="paragraph" data-slate-object="block" data-key="1407"> 
<span data-slate-object="text" data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" 
data-first-offset="true"><span data-slate-string="true">到这一章末尾，我们对于数据持久层的介绍就完结了。不妨来回顾一下，设计持久层，都有哪些需要考虑的方面呢？</span></span></span> 
</div> <div class="se-cb86d7ac " data-slate-type="paragraph" data-slate-object="block" data-key="1409"> 
<span data-slate-object="text" data-key="1410"><span data-slate-leaf="true" data-offset-key="1410:0" 
data-first-offset="true"><span data-slate-string="true">首先，是代码层面的设计：</span></span></span> </div> 
<div class="se-512a1610" data-slate-type="list" data-slate-object="block" data-key="1411"> 
<div class="se-0e1a6e24 se-bd4f6812" data-slate-type="list-line" data-slate-object="block" 
data-key="1412"> <span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" 
data-offset-key="1413:0" data-first-offset="true"><span data-slate-string="true">提供数据服务的设计，即 
MVC 中模型层的设计，你可以阅读 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1414" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1415"><span 
data-slate-leaf="true" data-offset-key="1415:0" data-first-offset="true"><span data-slate-string="true">[第 
08 讲]</span></span></span></a><span data-slate-object="text" data-key="1416"><span data-slate-leaf="true" 
data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true"> 来复习回顾；</span></span></span> 
</div> <div class="se-9e7582b9 se-b39ca092" data-slate-type="list-line" data-slate-object="block" 
data-key="1417"> <span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" 
data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true">对于模型到关系数据库的映射（ORM）和技术选择，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1419" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" data-offset-key="1420:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1421"><span data-slate-leaf="true" data-offset-key="1421:0" 
data-first-offset="true"><span data-slate-string="true"> 的加餐部分有所介绍；</span></span></span> </div> 
</div> <div class="se-db1f59b8 " data-slate-type="paragraph" data-slate-object="block" data-key="1422"> 
<span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" data-offset-key="1423:0" 
data-first-offset="true"><span data-slate-string="true">其次，是系统层面的设计：</span></span></span> </div> 
<div class="se-0f86c164" data-slate-type="list" data-slate-object="block" data-key="1424"> 
<div class="se-a39d972b se-354f906f" data-slate-type="list-line" data-slate-object="block" 
data-key="1425"> <span data-slate-object="text" data-key="1426"><span data-slate-leaf="true" 
data-offset-key="1426:0" data-first-offset="true"><span data-slate-string="true">持久层内部或者持久层之上的缓存技术，请参阅 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1427" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" data-offset-key="1428:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1430" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1431"><span data-slate-leaf="true" data-offset-key="1431:0" data-first-offset="true"><span 
data-slate-string="true">[第 22 讲]</span></span></span></a><span data-slate-object="text" data-key="1432"><span 
data-slate-leaf="true" data-offset-key="1432:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-44902d44 se-8993cd20" data-slate-type="list-line" data-slate-object="block" 
data-key="1433"> <span data-slate-object="text" data-key="1434"><span data-slate-leaf="true" 
data-offset-key="1434:0" data-first-offset="true"><span data-slate-string="true">对于持久化的核心关注点之一 
——一致性，包括存储系统扩容的基础技术一致性哈希，请参阅 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1435" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1436"><span 
data-slate-leaf="true" data-offset-key="1436:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="1437"><span data-slate-leaf="true" 
data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-d5040a73 se-1e71a857" data-slate-type="list-line" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span data-slate-string="true">关于分布式数据存储涉及到的 
CAP 理论和应用，以及相关的 ACID、BASE 原则，请参阅 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1440" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1441"><span 
data-slate-leaf="true" data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">[第 
24 讲]</span></span></span></a><span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" 
data-offset-key="1442:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-734debb1 se-f413bb1e" data-slate-type="list-line" data-slate-object="block" 
data-key="1443"> <span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" 
data-offset-key="1444:0" data-first-offset="true"><span data-slate-string="true">持久层存储技术的选择，你可以阅读 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1445" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1446"><span data-slate-leaf="true" data-offset-key="1446:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true"> 来回顾，更进一步地，今天这一讲提供了一些具体问题实例和技术选择的思路。</span></span></span> 
</div> </div> <div class="se-ecb750dc " data-slate-type="paragraph" data-slate-object="block" 
data-key="1448"> <span data-slate-object="text" data-key="1449"><span data-slate-leaf="true" 
data-offset-key="1449:0" data-first-offset="true"><span data-slate-string="true">希望通过这些内容的学习，你的持久层部分的知识，可以形成体系，而非零零散散的一个个孤岛。</span></span></span> 
</div> <div class="se-c4e9094e " data-slate-type="paragraph" data-slate-object="block" data-key="1450"> 
<span data-slate-object="text" data-key="1451"><span data-slate-leaf="true" data-offset-key="1451:0" 
data-first-offset="true"><span class="se-de40cc0a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最后，在这里我留一下今天的作业，这是一个开放性的思考题：</span></span></span></span> </div> <div 
class="se-a1174733 " data-slate-type="paragraph" data-slate-object="block" data-key="1452"> 
<span data-slate-object="text" data-key="1453"><span data-slate-leaf="true" data-offset-key="1453:0" 
data-first-offset="true"><span data-slate-string="true">假如说，你要实现一个简化了的微信聊天功能，用户可以一对一聊天，也可以加好友，那么，你该怎么选择技术，并怎样设计持久层呢？</span></span></span> 
</div> <div class="se-df107d4f " data-slate-type="paragraph" data-slate-object="block" data-key="1454"> 
<span data-slate-object="text" data-key="1455"><span data-slate-leaf="true" data-offset-key="1455:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里，希望你在阅读后能有所收获。关于本章的内容，如果有想法，欢迎和我讨论。</span></span></span> 
</div> <h2 class="se-662c4477" data-slate-type="heading" data-slate-object="block" data-key="1456"><span 
data-slate-object="text" data-key="1457"><span data-slate-leaf="true" data-offset-key="1457:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-52cb61f5" data-slate-type="list" data-slate-object="block" data-key="1458"> <div 
class="se-e4a7dd32 se-0e0c4d0d" data-slate-type="list-line" data-slate-object="block" data-key="1459"> 
<span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" data-offset-key="1460:0" 
data-first-offset="true"><span data-slate-string="true">文中介绍了倒排索引，感兴趣的话你可以进一步阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1461" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1462"><span data-slate-leaf="true" data-offset-key="1462:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎是如何设计倒排索引的？</span></span></span></a> 
</div> <div class="se-9663a5f7 se-99b195ec" data-slate-type="list-line" data-slate-object="block" 
data-key="1463"> <span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" 
data-offset-key="1464:0" data-first-offset="true"><span data-slate-string="true">文中介绍了 GeoHash，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">geohash.org</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true"> 的网站上，可以通过给出经纬度坐标，在地图上找到这个实际位置。感兴趣的话，还可以进一步了解：本质上，类似这种二维到一维的降维方式，都属于</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1468" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">空间填充曲线</span></span></span></a><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true"> ，比如说最有名的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1471" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" data-first-offset="true"><span 
data-slate-string="true">希尔伯特曲线</span></span></span></a><span data-slate-object="text" data-key="1473"><span 
data-slate-leaf="true" data-offset-key="1473:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-02e74671 se-38ea89df" data-slate-type="list-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">Sharding 和 
Partitioning 是在数据库中常见的“拆分”方式，文中也提到了，但是这两个概念经常被混用，具体含义你可以参考维基百科 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1476" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1477"><span data-slate-leaf="true" data-offset-key="1477:0" data-first-offset="true"><span 
data-slate-string="true">Shard</span></span></span></a><span data-slate-object="text" data-key="1478"><span 
data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span data-slate-string="true"> 
和 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1479" 
class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1480"><span data-slate-leaf="true" 
data-offset-key="1480:0" data-first-offset="true"><span data-slate-string="true">Partition</span></span></span></a><span 
data-slate-object="text" data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-e8a3342d se-bceb1beb" data-slate-type="list-line" data-slate-object="block" data-key="1482"> 
<span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" data-offset-key="1483:0" 
data-first-offset="true"><span data-slate-string="true">有一篇介绍 Twitter 怎样应用推、拉模式，处理和存储消息，应对高访问量的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1484" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1485"><span data-slate-leaf="true" data-offset-key="1485:0" 
data-first-offset="true"><span data-slate-string="true">文章</span></span></span></a><span data-slate-object="text" 
data-key="1486"><span data-slate-leaf="true" data-offset-key="1486:0" data-first-offset="true"><span 
data-slate-string="true">，相应的，微博的技术专家也写了一篇文章来介绍微博的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1487" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1488"><span data-slate-leaf="true" data-offset-key="1488:0" data-first-offset="true"><span 
data-slate-string="true">处理方式</span></span></span></a><span data-slate-object="text" data-key="1489"><span 
data-slate-leaf="true" data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">，你可以比较阅读。</span></span></span> 
</div> </div> <div class="se-4239c344" data-slate-type="image" data-slate-object="block" data-key="1490"> 
<img class="se-83bd74b6" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 21, 21) 
 {executed in 1 msec}
2020-11-19 11:12:16.206 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.206 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:12:16.210 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1203" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-52e0d071 " data-slate-type="paragraph" data-slate-object="block" data-key="1204"> 
<span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" data-offset-key="1205:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-5da297c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1206"> 
<span data-slate-object="text" data-key="1207"><span data-slate-leaf="true" data-offset-key="1207:0" 
data-first-offset="true"><span data-slate-string="true">本章我们已经学习了不少持久化，特别是有关存储的技术。那在实际业务中，复杂的问题是一个接着一个的，面对这些琳琅满目的具体技术，我们该怎样运用自己所掌握的知识，做出合理的选择呢？今天我们就来接触一些典型的系统，看看对于它们来说，该做出怎样的持久化设计和技术选型。我相信我们实际接触的系统也有相当程度的类比性，可以带来应用的参考意义。</span></span></span> 
</div> <h2 class="se-8f31d6bd" data-slate-type="heading" data-slate-object="block" data-key="1208"><span 
data-slate-object="text" data-key="1209"><span data-slate-leaf="true" data-offset-key="1209:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎</span></span></span></h2> <div 
class="se-9dfa1127 " data-slate-type="paragraph" data-slate-object="block" data-key="1210"> 
<span data-slate-object="text" data-key="1211"><span data-slate-leaf="true" data-offset-key="1211:0" 
data-first-offset="true"><span data-slate-string="true">小到 BBS 网站的帖子搜索，大到互联网数据搜索引擎，搜索引擎可以说是我们日常接触的几大系统之一。可是，搜索数据的存储该怎么设计呢？</span></span></span> 
</div> <div class="se-77377082 " data-slate-type="paragraph" data-slate-object="block" data-key="1212"> 
<span data-slate-object="text" data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" 
data-first-offset="true"><span data-slate-string="true">有一些反应迅速的程序员朋友，也许会设想这样的存储结构，利用关系数据库，创建这样一个存储文本（文章）的关系数据库表 
ARTICLES：</span></span></span> </div> <div class="se-45ec6ad7" data-slate-type="image" data-slate-object="block" 
data-key="1214"> <img class="se-cb1a1007" src="https://static001.geekbang.org/resource/image/45/04/4568eea6b14c67c379e840b2918ee404.jpg"> 
</div> <div class="se-60c0a33f " data-slate-type="paragraph" data-slate-object="block" data-key="1215"> 
<span data-slate-object="text" data-key="1216"><span data-slate-leaf="true" data-offset-key="1216:0" 
data-first-offset="true"><span data-slate-string="true">那么，假如现在的搜索关键字是“存储”，我们就可以利用字符串匹配的方式来对 
CONTENT 列进行匹配查询：</span></span></span> </div> <div class="se-aa180433 se-1676b1e4" data-slate-type="pre" 
data-slate-object="block" data-key="1217" data-code-language="sql"> <div class="se-eb65ed62 
se-bbe16f6a"> <span></span> </div> <div class="se-c63b3623"> <div class="se-ea27c756 se-782f781d" 
data-code-line-number="1"></div> </div> <div class="se-57bd0d92 ps ps--active-x"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1218"> <span data-slate-object="text" 
data-key="1219"><span data-slate-leaf="true" data-offset-key="1219:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8383620888" 
data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1219:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6627615917" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:3"><span data-slate-string="true"> ARTICLES </span></span><span 
data-slate-leaf="true" data-offset-key="1219:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4550830848" data-annotation-type="annotation"><span data-slate-string="true">where</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:6"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5965950239" data-annotation-type="annotation"><span data-slate-string="true">CONTENT</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:7"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:8"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5317078084" data-annotation-type="annotation"><span data-slate-string="true">like</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:9"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1219:10"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_8390786565" data-annotation-type="annotation"><span data-slate-string="true">''% 
存储 %''</span></span></span><span data-slate-leaf="true" data-offset-key="1219:11"><span data-slate-string="true">;</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 326px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-a9ae5959 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1220"> <span data-slate-object="text" data-key="1221"><span data-slate-leaf="true" 
data-offset-key="1221:0" data-first-offset="true"><span data-slate-string="true">这很容易就实现了搜索功能。但是，这样的方式有着明显的问题，即使用 
% 来进行字符串匹配是非常低效的，因此这样的查询需要遍历整个表（全表扫描）。几篇、几十篇文章的时候，还不是什么问题，但是如果有几十万、几百万的文章，这种方式是完全不可行的。且不说单独的关系数据库表就不能容纳那么大的数据了，就是能够容纳，要扫描一遍，这里的时间代价是难以想象的，就算我们的系统愿意做，用户可都不愿意等啊。</span></span></span> 
</div> <div class="se-7abca630 " data-slate-type="paragraph" data-slate-object="block" data-key="1222"> 
<span data-slate-object="text" data-key="1223"><span data-slate-leaf="true" data-offset-key="1223:0" 
data-first-offset="true"><span data-slate-string="true">于是，我们就要引入</span></span></span><span 
data-slate-object="text" data-key="1224"><span data-slate-leaf="true" data-offset-key="1224:0" 
data-first-offset="true"><span class="se-3a73ed2a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">“倒排索引”（Inverted Index）</span></span></span></span><span data-slate-object="text" 
data-key="1225"><span data-slate-leaf="true" data-offset-key="1225:0" data-first-offset="true"><span 
data-slate-string="true">的技术了。在前面所述的场景下，我们可以把这个概念拆分为两个部分来解释：</span></span></span> </div> <div 
class="se-b6f648e1" data-slate-type="list" data-slate-object="block" data-key="1226"> <div 
class="se-b5bbb40b se-19f0ce4c" data-slate-type="list-line" data-slate-object="block" data-key="1227"> 
<span data-slate-object="text" data-key="1228"><span data-slate-leaf="true" data-offset-key="1228:0" 
data-first-offset="true"><span data-slate-string="true">“倒排”，指的是存储的结构不再是先定位到文章，再去文章的内容中找寻关键字了；而是反过来，先定位到关键字，再去看关键字属于哪些文章。</span></span></span> 
</div> <div class="se-a754c520 se-99a4f6de" data-slate-type="list-line" data-slate-object="block" 
data-key="1229"> <span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" 
data-offset-key="1230:0" data-first-offset="true"><span data-slate-string="true">“索引”，指的是关键字，是被索引起来的，因此查询的速度会比较快。</span></span></span> 
</div> </div> <div class="se-bcf701e5 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1231"> <span data-slate-object="text" data-key="1232"><span data-slate-leaf="true" 
data-offset-key="1232:0" data-first-offset="true"><span data-slate-string="true">好，那上面的 ARTICLES 
表依然存在，但现在需要添加一个关键字表 KEYWORDS，并且，KEYWORD 列需要添加索引，因此这条关键字的记录可以被迅速找到：</span></span></span> </div> 
<div class="se-8bdc0855" data-slate-type="image" data-slate-object="block" data-key="1233"> 
<img class="se-6c13fd39" src="https://static001.geekbang.org/resource/image/c9/11/c9868489ed7415cdad3f760e0ea5d411.jpg"> 
</div> <div class="se-c147cc5f " data-slate-type="paragraph" data-slate-object="block" data-key="1234"> 
<span data-slate-object="text" data-key="1235"><span data-slate-leaf="true" data-offset-key="1235:0" 
data-first-offset="true"><span data-slate-string="true">当然，我们还需要一个关联关系表把 KEYWORDS 表和 ARTICLES 
表结合起来，KEYWORD_ID 和 ARTICLE_ID 作为联合主键：</span></span></span> </div> <div class="se-2bb60fa5" 
data-slate-type="image" data-slate-object="block" data-key="1236"> <img class="se-5ea40cbd" 
src="https://static001.geekbang.org/resource/image/ba/9b/ba5a26f2d882314e7d0d1f60c23d979b.jpg"> 
</div> <div class="se-9319a8c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1237"> 
<span data-slate-object="text" data-key="1238"><span data-slate-leaf="true" data-offset-key="1238:0" 
data-first-offset="true"><span data-slate-string="true">你看，这其实是一个多对多的关系，即同一个关键字可以出现在多篇文章中，而一篇文章可以包含多个不同的关键字。这样，我们可以先根据被索引了的关键字，从 
KEYWARDS 表中找到相应的 KEYWORD_ID，进而根据它在上面的关联关系表找到 ARTICLE_ID，再根据它去 ARTICLES 表中找到对应的文章。</span></span></span> 
</div> <div class="se-4b982a60 " data-slate-type="paragraph" data-slate-object="block" data-key="1239"> 
<span data-slate-object="text" data-key="1240"><span data-slate-leaf="true" data-offset-key="1240:0" 
data-first-offset="true"><span data-slate-string="true">这看起来是三次查找，但是因为每次都走索引，就免去了全表扫描，在数据量较小的时候速度并不慢，并且，在使用 
SQL 实现的时候，这个过程完全可以放到一个 SQL 语句中。在数据量较小的时候，上面的方法已经足够好用了。</span></span></span> </div> <div class="se-48a44247 
" data-slate-type="paragraph" data-slate-object="block" data-key="1241"> <span data-slate-object="text" 
data-key="1242"><span data-slate-leaf="true" data-offset-key="1242:0" data-first-offset="true"><span 
data-slate-string="true">但是，这个方法只解决了全表扫描和字符串 % 匹配查询造成的性能问题，并且，在数据量较大时，并没有解决数据量本身在单机模式下造成的性能问题。</span></span></span> 
</div> <div class="se-103de2b9 " data-slate-type="paragraph" data-slate-object="block" data-key="1243"> 
<span data-slate-object="text" data-key="1244"><span data-slate-leaf="true" data-offset-key="1244:0" 
data-first-offset="true"><span data-slate-string="true">于是，我们可以考虑搭建和使用 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1245" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1246"><span data-slate-leaf="true" data-offset-key="1246:0" 
data-first-offset="true"><span data-slate-string="true">Elasticsearch</span></span></span></a><span 
data-slate-object="text" data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" 
data-first-offset="true"><span data-slate-string="true">，或者干脆使用云上的版本。Elasticsearch 将关键字使用哈希算法分散到多个不同的被称为“Shard”的虚拟节点，并且把它们部署到不同的机器节点上，且每一个 
shard 具备指定数量的冗余副本（Replica），这些副本要求被放置到不同的物理机器节点上。通过这样的方式，我们就可以保证每台机器都只管理稳定且可控的数据量，并且保证了搜索服务数据的可用性。</span></span></span> 
</div> <div class="se-5195f29f" data-slate-type="image" data-slate-object="block" data-key="1248"> 
<img class="se-cd873cd2" src="https://static001.geekbang.org/resource/image/8c/09/8c4e956ca12bccc88ea9fd5d8f461a09.jpg"> 
</div> <div class="se-9cdf3fd8 " data-slate-type="paragraph" data-slate-object="block" data-key="1249"> 
<span data-slate-object="text" data-key="1250"><span data-slate-leaf="true" data-offset-key="1250:0" 
data-first-offset="true"><span data-slate-string="true">对于每一个关键字，都可以配置指向文章和文章中位置的映射。比如有这样两篇文章：</span></span></span> 
</div> <div class="se-1c5eab38" data-slate-type="block-quote" data-slate-object="block" data-key="1251"> 
<div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="1252"> 
<span data-slate-object="text" data-key="1253"><span data-slate-leaf="true" data-offset-key="1253:0" 
data-first-offset="true"><span data-slate-string="true">文章 1 的正文是：今天介绍存储技术。</span></span></span> 
</div> <div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="1254"> 
<span data-slate-object="text" data-key="1255"><span data-slate-leaf="true" data-offset-key="1255:0" 
data-first-offset="true"><span data-slate-string="true">文章 2 的正文是：存储技术有多种分类。</span></span></span> 
</div> </div> <div class="se-9b2927f0 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1256"> <span data-slate-object="text" data-key="1257"><span data-slate-leaf="true" 
data-offset-key="1257:0" data-first-offset="true"><span data-slate-string="true">那么，就有如下映射关系（下表仅用于表示在 
Shard 中的数据映射，并非关系数据库表）：</span></span></span> </div> <div class="se-c127bc8b" data-slate-type="image" 
data-slate-object="block" data-key="1258"> <img class="se-3e7825f1" src="https://static001.geekbang.org/resource/image/77/68/779702fd2a29ff418711928789bd3b68.jpg"> 
</div> <div class="se-e3ff29ac " data-slate-type="paragraph" data-slate-object="block" data-key="1259"> 
<span data-slate-object="text" data-key="1260"><span data-slate-leaf="true" data-offset-key="1260:0" 
data-first-offset="true"><span data-slate-string="true">你看，DOCUMENT 这一部分，每一行都可以存放若干个“文章 id 
: 文中关键字的位置”的组合。</span></span></span> </div> <h2 class="se-b3a2a24f" data-slate-type="heading" 
data-slate-object="block" data-key="1261"><span data-slate-object="text" data-key="1262"><span 
data-slate-leaf="true" data-offset-key="1262:0" data-first-offset="true"><span data-slate-string="true">地理信息系统</span></span></span></h2> 
<div class="se-5dd44887 " data-slate-type="paragraph" data-slate-object="block" data-key="1263"> 
<span data-slate-object="text" data-key="1264"><span data-slate-leaf="true" data-offset-key="1264:0" 
data-first-offset="true"><span data-slate-string="true">有这样一款订餐软件，上面有这样一个功能，在地图上可以列出距离当前用户最近的签约饭馆，并且随着用户缩放地图，还可以控制这个距离的大小。每个饭馆的位置可以简单考虑为经度和纬度组合的坐标（下图来自 
Google 地图，仅示意用）。</span></span></span> </div> <div class="se-49eddde1" data-slate-type="image" 
data-slate-object="block" data-key="1265"> <img class="se-5c9ab7e5" src="https://static001.geekbang.org/resource/image/50/9a/500b7bc8394a1b63c7fb89ee4c18cb9a.jpg"> 
</div> <div class="se-3d802770 " data-slate-type="paragraph" data-slate-object="block" data-key="1266"> 
<span data-slate-object="text" data-key="1267"><span data-slate-leaf="true" data-offset-key="1267:0" 
data-first-offset="true"><span data-slate-string="true">简言之，这个功能就是“显示一定范围内的目标集合”，可它该怎样实现呢？</span></span></span> 
</div> <div class="se-cda00e26 " data-slate-type="paragraph" data-slate-object="block" data-key="1268"> 
<span data-slate-object="text" data-key="1269"><span data-slate-leaf="true" data-offset-key="1269:0" 
data-first-offset="true"><span data-slate-string="true">在考虑这个功能以前，我们可以类比地想一想，它其实是一个相当常见且通用的功能，常常应用于订餐、导航软件、旅游网站等等这类 
LBS（Location-Based Service，基于位置的服务）应用中，因此这个问题是具有一定典型意义的。</span></span></span> </div> <div class="se-add40cf8 
" data-slate-type="paragraph" data-slate-object="block" data-key="1270"> <span data-slate-object="text" 
data-key="1271"><span data-slate-leaf="true" data-offset-key="1271:0" data-first-offset="true"><span 
data-slate-string="true">这个背后的数据结构以及存储又是怎样的呢？我们顺着这个“经纬度”的思路往下想，那么，如果就把这样的地理信息，放到一张 LOCATIONS 
表上，就会是这样：</span></span></span> </div> <div class="se-9d899f83" data-slate-type="image" data-slate-object="block" 
data-key="1272"> <img class="se-2e0b3f72" src="https://static001.geekbang.org/resource/image/bb/43/bb027beec790f8ee207b051b4a5ca943.jpg"> 
</div> <div class="se-aa18af61 " data-slate-type="paragraph" data-slate-object="block" data-key="1273"> 
<span data-slate-object="text" data-key="1274"><span data-slate-leaf="true" data-offset-key="1274:0" 
data-first-offset="true"><span data-slate-string="true">当然了，还有一张 RESTAURANTS 表：</span></span></span> 
</div> <div class="se-c3390074" data-slate-type="image" data-slate-object="block" data-key="1275"> 
<img class="se-f588c18e" src="https://static001.geekbang.org/resource/image/ba/02/bafddb5244287066ec676b6c30054c02.jpg"> 
</div> <div class="se-ff260739 " data-slate-type="paragraph" data-slate-object="block" data-key="1276"> 
<span data-slate-object="text" data-key="1277"><span data-slate-leaf="true" data-offset-key="1277:0" 
data-first-offset="true"><span data-slate-string="true">于是，要查出范围内的饭馆，我们就可以写这样的 SQL：</span></span></span> 
</div> <div class="se-12ad3a34 se-c5b873b5" data-slate-type="pre" data-slate-object="block" 
data-key="1278" data-code-language="sql"> <div class="se-64f59a01 se-c97d7e52"> <span></span> 
</div> <div class="se-149a68ea"> <div class="se-157e5abc se-1bcf8bb3" data-code-line-number="1"></div> 
<div class="se-157e5abc se-1bcf8bb3" data-code-line-number="2"></div> <div class="se-157e5abc 
se-1bcf8bb3" data-code-line-number="3"></div> <div class="se-157e5abc se-1bcf8bb3" data-code-line-number="4"></div> 
<div class="se-157e5abc se-1bcf8bb3" data-code-line-number="5"></div> <div class="se-157e5abc 
se-1bcf8bb3" data-code-line-number="6"></div> </div> <div class="se-2dba92b4 ps"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1279"> <span data-slate-object="text" 
data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_9182086135" 
data-annotation-type="annotation"><span data-slate-string="true">select</span></span></span><span 
data-slate-leaf="true" data-offset-key="1280:1"><span data-slate-string="true"> * </span></span><span 
data-slate-leaf="true" data-offset-key="1280:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9950164498" data-annotation-type="annotation"><span data-slate-string="true">from</span></span></span><span 
data-slate-leaf="true" data-offset-key="1280:3"><span data-slate-string="true"> LOCATIONS l, 
RESTAURANTS r </span></span><span data-slate-leaf="true" data-offset-key="1280:4"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6578944204" data-annotation-type="annotation"><span 
data-slate-string="true">where</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1281"> <span data-slate-object="text" 
data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" data-first-offset="true"><span 
data-slate-string="true"> l.RESTAURANT_ID = r.RESTAURANT_ID </span></span><span data-slate-leaf="true" 
data-offset-key="1282:1"><span class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8006659042" 
data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span></span> 
</div> <div class="se-3ea883e4 se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" 
data-key="1283"> <span data-slate-object="text" data-key="1284"><span data-slate-leaf="true" 
data-offset-key="1284:0" data-first-offset="true"><span data-slate-string="true"> l.LONGITUDE 
&gt;= 经度下界 </span></span><span data-slate-leaf="true" data-offset-key="1284:1"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1539765598" data-annotation-type="annotation"><span 
data-slate-string="true">and</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1285"> <span data-slate-object="text" 
data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" data-first-offset="true"><span 
data-slate-string="true"> l.LONGITUDE &lt;= 经度上界 </span></span><span data-slate-leaf="true" 
data-offset-key="1286:1"><span class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_8496362576" 
data-annotation-type="annotation"><span data-slate-string="true">and</span></span></span></span> 
</div> <div class="se-3ea883e4 se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" 
data-key="1287"> <span data-slate-object="text" data-key="1288"><span data-slate-leaf="true" 
data-offset-key="1288:0" data-first-offset="true"><span data-slate-string="true"> l.LATITUDE 
&gt;= 纬度下界 </span></span><span data-slate-leaf="true" data-offset-key="1288:1"><span class=" 
gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1730678695" data-annotation-type="annotation"><span 
data-slate-string="true">and</span></span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1289"> <span data-slate-object="text" 
data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" data-first-offset="true"><span 
data-slate-string="true"> l.LATITUDE &lt;= 纬度上界 ;</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-443d2ad4 
" data-slate-type="paragraph" data-slate-object="block" data-key="1291"> <span data-slate-object="text" 
data-key="1292"><span data-slate-leaf="true" data-offset-key="1292:0" data-first-offset="true"><span 
data-slate-string="true">其中，这个经度、纬度的上下界，是根据用户所在位置，以及地图缩放程度折算出来的。显然，这需要一个全表扫描，加一个笛卡尔积，复杂度偏高，能否优化一下它呢？在往下阅读前，你可以先想一想。</span></span></span> 
</div> <div class="se-09fbb4ec " data-slate-type="paragraph" data-slate-object="block" data-key="1293"> 
<span data-slate-object="text" data-key="1294"><span data-slate-leaf="true" data-offset-key="1294:0" 
data-first-offset="true"><span class="se-419117bb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">思路 1：给单一维度加索引</span></span></span></span> </div> <div class="se-08753f00 
" data-slate-type="paragraph" data-slate-object="block" data-key="1295"> <span data-slate-object="text" 
data-key="1296"><span data-slate-leaf="true" data-offset-key="1296:0" data-first-offset="true"><span 
data-slate-string="true">嗯，如果经纬度可以分开处理，是不是就可以搞定？比方说，只考虑经度的话，给经度一列建立索引，所有饭馆按照从小到大的顺序排好。这样的话，当给定范围的时候，我们就可以快速找到经度范围内所有满足经度条件的饭馆。从时间复杂度的角度来考虑，在不做额外优化的情况下，以在有序经度列上的二分查找为例，这个复杂度是 
log(n)。</span></span></span> </div> <div class="se-998a42ef " data-slate-type="paragraph" data-slate-object="block" 
data-key="1297"> <span data-slate-object="text" data-key="1298"><span data-slate-leaf="true" 
data-offset-key="1298:0" data-first-offset="true"><span data-slate-string="true">当再考虑纬度的时候，假如有 
m 家满足经度条件的饭馆，接下去我们就只能挨个去检查这 m 家饭馆，找出它们中满足纬度条件的了，也就是说，总的时间复杂度是 m*log(n)。这种方法比较简单，在数据量不太大的情况下也没有太大问题，因此这已经是很好的方法了。但是，在某些场景下这个 
m 还有可能比较大，那么，有进一步优化的办法吗？</span></span></span> </div> <div class="se-21662fd6 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1299"> <span data-slate-object="text" data-key="1300"><span 
data-slate-leaf="true" data-offset-key="1300:0" data-first-offset="true"><span class="se-dc0dd7c8" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">思路 2：GeoHash</span></span></span></span> 
</div> <div class="se-f2f592b1 " data-slate-type="paragraph" data-slate-object="block" data-key="1301"> 
<span data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true">其实，经度和纬度的大致思路可以，但是在框选饭馆的时候，不能把经度和纬度分别框选，而应该结合起来框选，并且把复杂度依然控制在 
log(n) 的级别。</span></span></span> </div> <div class="se-8fec5785 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1303"> <span data-slate-object="text" data-key="1304"><span 
data-slate-leaf="true" data-offset-key="1304:0" data-first-offset="true"><span data-slate-string="true">其中一个办法就是 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1305" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" data-offset-key="1306:0" 
data-first-offset="true"><span data-slate-string="true">GeoHash</span></span></span></a><span 
data-slate-object="text" data-key="1307"><span data-slate-leaf="true" data-offset-key="1307:0" 
data-first-offset="true"><span data-slate-string="true">，它的大致思路就是降维。即把一个经度和纬度的二维坐标用一个一维的数来表示。具体实现上，有一种常见的办法就是把经度和纬度用一个长位数的数来表示，比如：</span></span></span> 
</div> <div class="se-0b76b89e se-69479d11" data-slate-type="pre" data-slate-object="block" 
data-key="1308"> <div class="se-938d8933 se-34705256"> <span></span> </div> <div class="se-b3e75833"> 
<div class="se-c74c99dd se-2e1661fb" data-code-line-number="1"></div> <div class="se-c74c99dd 
se-2e1661fb" data-code-line-number="2"></div> </div> <div class="se-91ab267e ps"> <div class="se-3ea883e4 
se-5ac6ef5c" data-slate-type="code-line" data-slate-object="block" data-key="1309"> <span data-slate-object="text" 
data-key="1310"><span data-slate-leaf="true" data-offset-key="1310:0" data-first-offset="true"><span 
data-slate-string="true">经度：101010……</span></span></span> </div> <div class="se-3ea883e4 se-5ac6ef5c" 
data-slate-type="code-line" data-slate-object="block" data-key="1311"> <span data-slate-object="text" 
data-key="1312"><span data-slate-leaf="true" data-offset-key="1312:0" data-first-offset="true"><span 
data-slate-string="true">纬度：100110……</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-e691db67 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1313"> <span data-slate-object="text" data-key="1314"><span 
data-slate-leaf="true" data-offset-key="1314:0" data-first-offset="true"><span data-slate-string="true">接着把二者从左到右挨个位拼接，黑色字符来自经度，蓝色字符来自纬度：</span></span></span> 
</div> <div class="se-7a1eefab" data-slate-type="image" data-slate-object="block" data-key="1315"> 
<img class="se-6ad67326" src="https://static001.geekbang.org/resource/image/11/af/1142aa596e19561794080a5896667aaf.jpg"> 
</div> <div class="se-2ba5c56a " data-slate-type="paragraph" data-slate-object="block" data-key="1316"> 
<span data-slate-object="text" data-key="1317"><span data-slate-leaf="true" data-offset-key="1317:0" 
data-first-offset="true"><span data-slate-string="true">在这种方式下，从结果的左边最高位开始，取任意长度截断所得到的前缀，可以用来匹配距离目标位置一定距离范围的所有饭馆。当用户选取的地图范围越大，前缀长度就越长，这个匹配精度也就越高，匹配到的饭馆数量也就越少。通过这种方式，区域不断用前缀的方式来细分，相当于给每个子区域一个标记号码。</span></span></span> 
</div> <div class="se-dc2940df " data-slate-type="paragraph" data-slate-object="block" data-key="1318"> 
<span data-slate-object="text" data-key="1319"><span data-slate-leaf="true" data-offset-key="1319:0" 
data-first-offset="true"><span data-slate-string="true">那么，我们数据库表中的经度和纬度就可以合并为一列，再令这一列为主键，或者做索引，就能够进行单列的范围查询了。</span></span></span> 
</div> <div class="se-09c23d09" data-slate-type="image" data-slate-object="block" data-key="1320"> 
<img class="se-a5587edb" src="https://static001.geekbang.org/resource/image/a7/fa/a703d1d17e273fcc4d1150e9105071fa.jpg"> 
</div> <div class="se-212284de " data-slate-type="paragraph" data-slate-object="block" data-key="1321"> 
<span data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">最后，我们已经走到这一步了，接下来该怎么把这个表落实到数据库中呢？这就有多种方式可供选择了。比如我们可以使用关系数据库（例如 
MySQL），也可以使用 NoSQL 中的键值数据库（例如 Redis 等）。这方面可以根据其它业务需求，以及实际开发的限制来选择，具体选择的策略，请继续阅读下文。</span></span></span> 
</div> <h2 class="se-5aaa4c5e" data-slate-type="heading" data-slate-object="block" data-key="1323"><span 
data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">SQL or NoSQL？</span></span></span></h2> 
<div class="se-11e1519b " data-slate-type="paragraph" data-slate-object="block" data-key="1325"> 
<span data-slate-object="text" data-key="1326"><span data-slate-leaf="true" data-offset-key="1326:0" 
data-first-offset="true"><span data-slate-string="true">我们在实际的存储系统选择时，经常会涉及到 SQL 数据库和 NoSQL 
数据库的选择，也就是关系数据库和非关系数据库的选择。举个例子，如果是电子商务网站（这可能是我们平时听到的最多的例子之一了），应该选择 SQL 还是 NoSQL？</span></span></span> 
</div> <h3 class="se-b4c94c19" data-slate-type="heading" data-slate-object="block" data-key="1327"><span 
data-slate-object="text" data-key="1328"><span data-slate-leaf="true" data-offset-key="1328:0" 
data-first-offset="true"><span data-slate-string="true">两个前提角度</span></span></span></h3> <div 
class="se-9600f53a " data-slate-type="paragraph" data-slate-object="block" data-key="1329"> 
<span data-slate-object="text" data-key="1330"><span data-slate-leaf="true" data-offset-key="1330:0" 
data-first-offset="true"><span data-slate-string="true">设计和选型方面，有很多问题都不是黑白分明的，而是要拆分开来一块一块分析。我听到过很多“一刀切”的答案，比如有的人说用 
MySQL，有的说用 Redis，我认为这样的结论都是不妥的。那么怎样来选择呢？下面我就来介绍一些 SQL 和 NoSQL 选择的原则。但是在讲原则以前，我觉得需要从两个“前提角度”去厘清我们的问题。</span></span></span> 
</div> <div class="se-dd3fb78d " data-slate-type="paragraph" data-slate-object="block" data-key="1331"> 
<span data-slate-object="text" data-key="1332"><span data-slate-leaf="true" data-offset-key="1332:0" 
data-first-offset="true"><span data-slate-string="true">以电商网站的设计为例，这两个角度就是这样的。</span></span></span> 
</div> <div class="se-bd59005a " data-slate-type="paragraph" data-slate-object="block" data-key="1333"> 
<span data-slate-object="text" data-key="1334"><span data-slate-leaf="true" data-offset-key="1334:0" 
data-first-offset="true"><span class="se-21027aac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 数据分类</span></span></span></span> </div> <div class="se-829a4bbd 
" data-slate-type="paragraph" data-slate-object="block" data-key="1335"> <span data-slate-object="text" 
data-key="1336"><span data-slate-leaf="true" data-offset-key="1336:0" data-first-offset="true"><span 
data-slate-string="true">电子商务网站，这个概念所意味着的数据类型太多了。简单举几个例子：</span></span></span> </div> <div 
class="se-bdfb8392" data-slate-type="list" data-slate-object="block" data-key="1337"> <div 
class="se-dd6c1d8d se-f9852c91" data-slate-type="list-line" data-slate-object="block" data-key="1338"> 
<span data-slate-object="text" data-key="1339"><span data-slate-leaf="true" data-offset-key="1339:0" 
data-first-offset="true"><span data-slate-string="true">商品元数据，即商品的描述、厂家等等信息；</span></span></span> 
</div> <div class="se-de6b1014 se-648a146a" data-slate-type="list-line" data-slate-object="block" 
data-key="1340"> <span data-slate-object="text" data-key="1341"><span data-slate-leaf="true" 
data-offset-key="1341:0" data-first-offset="true"><span data-slate-string="true">媒体数据，比如图片和视频；</span></span></span> 
</div> <div class="se-6d656e05 se-2928e737" data-slate-type="list-line" data-slate-object="block" 
data-key="1342"> <span data-slate-object="text" data-key="1343"><span data-slate-leaf="true" 
data-offset-key="1343:0" data-first-offset="true"><span data-slate-string="true">库存数据，包括在某个地点的库房某商品还有多少件库存；</span></span></span> 
</div> <div class="se-2461622e se-c88a9c2f" data-slate-type="list-line" data-slate-object="block" 
data-key="1344"> <span data-slate-object="text" data-key="1345"><span data-slate-leaf="true" 
data-offset-key="1345:0" data-first-offset="true"><span data-slate-string="true">交易信息，比如订单、支付、余额管理；</span></span></span> 
</div> <div class="se-8b504dc5 se-3136e84d" data-slate-type="list-line" data-slate-object="block" 
data-key="1346"> <span data-slate-object="text" data-key="1347"><span data-slate-leaf="true" 
data-offset-key="1347:0" data-first-offset="true"><span data-slate-string="true">用户信息，涉及的功能包括登陆、注册和用户设置。</span></span></span> 
</div> </div> <div class="se-4dafeebc " data-slate-type="paragraph" data-slate-object="block" 
data-key="1348"> <span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" 
data-offset-key="1349:0" data-first-offset="true"><span data-slate-string="true">因此，在讨论什么存储适合数据和访问的时候，我们最好明确，到底具体是哪一种类型的数据。毕竟，看起来上面的业务场景将有着巨大差别。</span></span></span> 
</div> <div class="se-6512e940 " data-slate-type="paragraph" data-slate-object="block" data-key="1350"> 
<span data-slate-object="text" data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" 
data-first-offset="true"><span class="se-aae2a506" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 数据规模</span></span></span></span> </div> <div class="se-61e78ea8 
" data-slate-type="paragraph" data-slate-object="block" data-key="1352"> <span data-slate-object="text" 
data-key="1353"><span data-slate-leaf="true" data-offset-key="1353:0" data-first-offset="true"><span 
data-slate-string="true">电子商务网站有大有小，可别一想到电商网站，脑海里就是淘宝和京东，商品可以上千万，甚至上亿。但其实，我们大多数接触的系统，都不会有那么大的规模，电商网站完全可以小到一个提供在线购物业务的私人体育用品专营店，商品数量可以只有几十到几百。</span></span></span> 
</div> <div class="se-a2e7206c " data-slate-type="paragraph" data-slate-object="block" data-key="1354"> 
<span data-slate-object="text" data-key="1355"><span data-slate-leaf="true" data-offset-key="1355:0" 
data-first-offset="true"><span data-slate-string="true">只有把问题做如上的展开并明确以后，我们再去思考和讨论数据结构、一致性、可用性等等这些我们“熟悉”的方面，才准确。因此，从上面的例子来看，</span></span></span><span 
data-slate-object="text" data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" 
data-first-offset="true"><span class="se-4dbc55ea" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们在选择技术的时候，很可能要针对每一类数据选择“一组”技术，而不是笼统地选择“一项”技术了。</span></span></span></span> 
</div> <h3 class="se-f89eede4" data-slate-type="heading" data-slate-object="block" data-key="1357"><span 
data-slate-object="text" data-key="1358"><span data-slate-leaf="true" data-offset-key="1358:0" 
data-first-offset="true"><span data-slate-string="true">选择的思路</span></span></span></h3> <div 
class="se-bdd2adc7 " data-slate-type="paragraph" data-slate-object="block" data-key="1359"> 
<span data-slate-object="text" data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" 
data-first-offset="true"><span data-slate-string="true">那么下一步，我们该怎样来选择 SQL 或是 NoSQL 数据库呢？这部分可以说，不同的人有着颇为不同的看法。下面我想根据我的认识，谈谈一个大致的选择思路，请注意这只是一个粗略的基于经验的分类，具体的技术选择还要具体问题具体分析和细化。</span></span></span> 
</div> <div class="se-572447cc " data-slate-type="paragraph" data-slate-object="block" data-key="1361"> 
<span data-slate-object="text" data-key="1362"><span data-slate-leaf="true" data-offset-key="1362:0" 
data-first-offset="true"><span class="se-e087d359" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 对于中小型系统，在数据量不大且没有特殊的吞吐量、可用性等要求的情况下，或者在多种关系和非关系数据库都满足业务要求的情况下，优先考虑关系数据库。</span></span></span></span> 
</div> <div class="se-ff3acd25 " data-slate-type="paragraph" data-slate-object="block" data-key="1363"> 
<span data-slate-object="text" data-key="1364"><span data-slate-leaf="true" data-offset-key="1364:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库提供了成熟且强大的功能，包括强 schema 定义、关系查询、事务支持等等。关系数据库能够带来较强的扩展能力，未来在业务发展的时候，通过增加索引、增加表、增加列、增加关系查询，就可以迅速解决问题。</span></span></span> 
</div> <div class="se-e50f571c " data-slate-type="paragraph" data-slate-object="block" data-key="1365"> 
<span data-slate-object="text" data-key="1366"><span data-slate-leaf="true" data-offset-key="1366:0" 
data-first-offset="true"><span data-slate-string="true">在从内存模型到实际存储数据的 ORM 转换的时候，有非常成熟的且支持程度各异的框架，有的把 
ORM 完全自动化，让程序员可以关注在核心业务模型上面；有的则是把 ORM 定义让出来，提供足够的灵活性（这部分可以参见 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1367" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1368"><span data-slate-leaf="true" data-offset-key="1368:0" data-first-offset="true"><span 
data-slate-string="true">[第 12 讲]</span></span></span></a><span data-slate-object="text" data-key="1369"><span 
data-slate-leaf="true" data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> 
的加餐部分）。</span></span></span> </div> <div class="se-6dbf9d3f " data-slate-type="paragraph" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true">值得注意的是，</span></span></span><span 
data-slate-object="text" data-key="1372"><span data-slate-leaf="true" data-offset-key="1372:0" 
data-first-offset="true"><span class="se-1b4ceec3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">不要觉得 NoSQL 是大数据量的一个必然选择。</span></span></span></span><span data-slate-object="text" 
data-key="1373"><span data-slate-leaf="true" data-offset-key="1373:0" data-first-offset="true"><span 
data-slate-string="true">事实上，即便数据量增大，关系数据库有时也依然是一个选择。当然需要明确的是，通常单表在数据量增大时，会产生性能方面的问题，但是可以使用 
Sharding 和 Partitioning 技术来缓和（扩展阅读中有这方面技术的介绍）；而数据可用性的问题，也可以使用集群加冗余技术来解决，当然，有得必有失，这种情况下，通常会牺牲一定程度的一致性。</span></span></span> 
</div> <div class="se-e24adf9c " data-slate-type="paragraph" data-slate-object="block" data-key="1374"> 
<span data-slate-object="text" data-key="1375"><span data-slate-leaf="true" data-offset-key="1375:0" 
data-first-offset="true"><span data-slate-string="true">那么，这个数据量多大算大到关系数据库无法承担了呢？我可以给你一个事实，即微博和 
Twitter 都是使用 MySQL 作为主要推文存储的（你可以参看扩展阅读中的文章），因此你可以看到在实际应用中，关系数据库对于特大数据量的支持也是有成功实践的。</span></span></span> 
</div> <div class="se-07301092 " data-slate-type="paragraph" data-slate-object="block" data-key="1376"> 
<span data-slate-object="text" data-key="1377"><span data-slate-leaf="true" data-offset-key="1377:0" 
data-first-offset="true"><span class="se-45e04d74" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 是否具备明确的 schema 定义，是否需要支持关系查询和事务？如果有一项回答“是”，优先考虑关系数据库。</span></span></span></span> 
</div> <div class="se-3e96d933 " data-slate-type="paragraph" data-slate-object="block" data-key="1378"> 
<span data-slate-object="text" data-key="1379"><span data-slate-leaf="true" data-offset-key="1379:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库，首当其冲的特点就是“关系”。因此，可能会有朋友说，不对，电商网站的“商品”其实 
schema 是不确定的啊——例如，服装一类商品，都有“尺寸”信息；而电器类呢，都有“功率”信息，这样特定类型的属性决定了商品很难被抽象成某一个统一的表啊。</span></span></span> 
</div> <div class="se-b1d0a958 " data-slate-type="paragraph" data-slate-object="block" data-key="1380"> 
<span data-slate-object="text" data-key="1381"><span data-slate-leaf="true" data-offset-key="1381:0" 
data-first-offset="true"><span data-slate-string="true">没错，但是为什么要做到如此牵强的“统一”？通用的商品属性，例如厂家、商品唯一编号当然可以放到“统一”的商品表里面，但余下的信息还是可以根据商品类型放到各自类型的特定表里面，这就好像基类和派生类一样，抽象和统一只能做到某一个层次，层次太高反而不利于理解和维护。</span></span></span> 
</div> <div class="se-bc84130b " data-slate-type="paragraph" data-slate-object="block" data-key="1382"> 
<span data-slate-object="text" data-key="1383"><span data-slate-leaf="true" data-offset-key="1383:0" 
data-first-offset="true"><span data-slate-string="true">对于一些需要事务的需求，例如订购，往往需要关系数据库的支持。当然，这只是多数情况，NoSQL 
也有例外，即允许选择 CAP 中的 CP，具备强一致性且支持事务机制的，例如 DynamoDB。</span></span></span> </div> <div class="se-a59cd0fe 
" data-slate-type="paragraph" data-slate-object="block" data-key="1384"> <span data-slate-object="text" 
data-key="1385"><span data-slate-leaf="true" data-offset-key="1385:0" data-first-offset="true"><span 
data-slate-string="true">而有一些系统和数据，则变化很大。比如用户数据，在多数情况下，schema 往往是比较明确的，而且数量上也没有订单等数据一般有特别大的伸缩性要求，因此往往也放到关系数据库里面；但是，在另外一些系统中，用户信息的组成不确定，或者说，schema 
不确定，用户信息会放到 JSON 等松散结构的文本中，这种情况下文档数据库也是一个常见的选择；但是在搜索等某些相关功能的实现上，可能又会使用搜索引擎等不同于上面任一者的其它方式。</span></span></span> 
</div> <div class="se-e296f663 " data-slate-type="paragraph" data-slate-object="block" data-key="1386"> 
<span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" 
data-first-offset="true"><span class="se-9b44d3b4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 如果符合结构不定（包括半结构化和无结构化）、高伸缩性、最终一致性、高性能（高吞吐量、高可用性、低时延等）的特点和要求，可以考虑非关系数据库。</span></span></span></span> 
</div> <div class="se-60bc4e4c " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">简单来说，这时的具体技术选择，可以按照这样两个步骤来落地：</span></span></span> 
</div> <div class="se-8569bf8c" data-slate-type="list" data-slate-object="block" data-key="1390"> 
<div class="se-c15eff32 se-4ecbcce5" data-slate-type="list-line" data-slate-object="block" 
data-key="1391"> <span data-slate-object="text" data-key="1392"><span data-slate-leaf="true" 
data-offset-key="1392:0" data-first-offset="true"><span data-slate-string="true">如果你还记得 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1393" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" 
data-first-offset="true"><span data-slate-string="true">[第 24 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1395"><span data-slate-leaf="true" data-offset-key="1395:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍的那个 NoSQL 三角，根据一致性、可用性的要求，我们可以选择这个三角中的某一条边；</span></span></span> 
</div> <div class="se-33ffd660 se-65c57959" data-slate-type="list-line" data-slate-object="block" 
data-key="1396"> <span data-slate-object="text" data-key="1397"><span data-slate-leaf="true" 
data-offset-key="1397:0" data-first-offset="true"><span data-slate-string="true">而在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1398" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1399"><span data-slate-leaf="true" data-offset-key="1399:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" 
data-first-offset="true"><span data-slate-string="true"> 中则介绍了具体的 NoSQL 技术的分类和适用的问题类型，可以依其做进一步选择，比如根据数据结构化的程度，在那条边上，来进一步选择某一类 
NoSQL 的存储技术。</span></span></span> </div> </div> <div class="se-b962dfeb " data-slate-type="paragraph" 
data-slate-object="block" data-key="1401"> <span data-slate-object="text" data-key="1402"><span 
data-slate-leaf="true" data-offset-key="1402:0" data-first-offset="true"><span data-slate-string="true">比如说，这个电商问题中提到的媒体数据，即图片和视频，通常来说可用性更为重要，而这一类的大文件，没有内部的 
schema，可以考虑使用擅长存放无结构大对象的文档型数据库。当然，也可以直接存放为文件，利用 CDN 的特性同步到离用户更近的节点去，特别对于视频来说，要提供好的用户体验，砸钱到 
CDN 服务几乎是必选。</span></span></span> </div> <div class="se-b2d8a78e " data-slate-type="paragraph" 
data-slate-object="block" data-key="1403"> <span data-slate-object="text" data-key="1404"><span 
data-slate-leaf="true" data-offset-key="1404:0" data-first-offset="true"><span data-slate-string="true">再比如，商品页在很大程度上都是可以缓存的，而缓存基本上都是为了保证可用性而会牺牲一定的一致性。除了上面介绍的 
CDN 实现了对媒体内容的缓存以外，商品页本身，或是大部分区域的信息，都是可以利用 Memcached 等缓存服务缓存起来的。</span></span></span> </div> 
<h2 class="se-e66a8174" data-slate-type="heading" data-slate-object="block" data-key="1405"><span 
data-slate-object="text" data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-d0e99c76 " data-slate-type="paragraph" data-slate-object="block" data-key="1407"> 
<span data-slate-object="text" data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" 
data-first-offset="true"><span data-slate-string="true">到这一章末尾，我们对于数据持久层的介绍就完结了。不妨来回顾一下，设计持久层，都有哪些需要考虑的方面呢？</span></span></span> 
</div> <div class="se-cb86d7ac " data-slate-type="paragraph" data-slate-object="block" data-key="1409"> 
<span data-slate-object="text" data-key="1410"><span data-slate-leaf="true" data-offset-key="1410:0" 
data-first-offset="true"><span data-slate-string="true">首先，是代码层面的设计：</span></span></span> </div> 
<div class="se-512a1610" data-slate-type="list" data-slate-object="block" data-key="1411"> 
<div class="se-0e1a6e24 se-bd4f6812" data-slate-type="list-line" data-slate-object="block" 
data-key="1412"> <span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" 
data-offset-key="1413:0" data-first-offset="true"><span data-slate-string="true">提供数据服务的设计，即 
MVC 中模型层的设计，你可以阅读 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1414" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1415"><span 
data-slate-leaf="true" data-offset-key="1415:0" data-first-offset="true"><span data-slate-string="true">[第 
08 讲]</span></span></span></a><span data-slate-object="text" data-key="1416"><span data-slate-leaf="true" 
data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true"> 来复习回顾；</span></span></span> 
</div> <div class="se-9e7582b9 se-b39ca092" data-slate-type="list-line" data-slate-object="block" 
data-key="1417"> <span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" 
data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true">对于模型到关系数据库的映射（ORM）和技术选择，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1419" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" data-offset-key="1420:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1421"><span data-slate-leaf="true" data-offset-key="1421:0" 
data-first-offset="true"><span data-slate-string="true"> 的加餐部分有所介绍；</span></span></span> </div> 
</div> <div class="se-db1f59b8 " data-slate-type="paragraph" data-slate-object="block" data-key="1422"> 
<span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" data-offset-key="1423:0" 
data-first-offset="true"><span data-slate-string="true">其次，是系统层面的设计：</span></span></span> </div> 
<div class="se-0f86c164" data-slate-type="list" data-slate-object="block" data-key="1424"> 
<div class="se-a39d972b se-354f906f" data-slate-type="list-line" data-slate-object="block" 
data-key="1425"> <span data-slate-object="text" data-key="1426"><span data-slate-leaf="true" 
data-offset-key="1426:0" data-first-offset="true"><span data-slate-string="true">持久层内部或者持久层之上的缓存技术，请参阅 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1427" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" data-offset-key="1428:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" 
data-first-offset="true"><span data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1430" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1431"><span data-slate-leaf="true" data-offset-key="1431:0" data-first-offset="true"><span 
data-slate-string="true">[第 22 讲]</span></span></span></a><span data-slate-object="text" data-key="1432"><span 
data-slate-leaf="true" data-offset-key="1432:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-44902d44 se-8993cd20" data-slate-type="list-line" data-slate-object="block" 
data-key="1433"> <span data-slate-object="text" data-key="1434"><span data-slate-leaf="true" 
data-offset-key="1434:0" data-first-offset="true"><span data-slate-string="true">对于持久化的核心关注点之一 
——一致性，包括存储系统扩容的基础技术一致性哈希，请参阅 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1435" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1436"><span 
data-slate-leaf="true" data-offset-key="1436:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="1437"><span data-slate-leaf="true" 
data-offset-key="1437:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-d5040a73 se-1e71a857" data-slate-type="list-line" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span data-slate-string="true">关于分布式数据存储涉及到的 
CAP 理论和应用，以及相关的 ACID、BASE 原则，请参阅 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1440" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1441"><span 
data-slate-leaf="true" data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">[第 
24 讲]</span></span></span></a><span data-slate-object="text" data-key="1442"><span data-slate-leaf="true" 
data-offset-key="1442:0" data-first-offset="true"><span data-slate-string="true">；</span></span></span> 
</div> <div class="se-734debb1 se-f413bb1e" data-slate-type="list-line" data-slate-object="block" 
data-key="1443"> <span data-slate-object="text" data-key="1444"><span data-slate-leaf="true" 
data-offset-key="1444:0" data-first-offset="true"><span data-slate-string="true">持久层存储技术的选择，你可以阅读 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1445" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1446"><span data-slate-leaf="true" data-offset-key="1446:0" 
data-first-offset="true"><span data-slate-string="true">[第 25 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true"> 来回顾，更进一步地，今天这一讲提供了一些具体问题实例和技术选择的思路。</span></span></span> 
</div> </div> <div class="se-ecb750dc " data-slate-type="paragraph" data-slate-object="block" 
data-key="1448"> <span data-slate-object="text" data-key="1449"><span data-slate-leaf="true" 
data-offset-key="1449:0" data-first-offset="true"><span data-slate-string="true">希望通过这些内容的学习，你的持久层部分的知识，可以形成体系，而非零零散散的一个个孤岛。</span></span></span> 
</div> <div class="se-c4e9094e " data-slate-type="paragraph" data-slate-object="block" data-key="1450"> 
<span data-slate-object="text" data-key="1451"><span data-slate-leaf="true" data-offset-key="1451:0" 
data-first-offset="true"><span class="se-de40cc0a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最后，在这里我留一下今天的作业，这是一个开放性的思考题：</span></span></span></span> </div> <div 
class="se-a1174733 " data-slate-type="paragraph" data-slate-object="block" data-key="1452"> 
<span data-slate-object="text" data-key="1453"><span data-slate-leaf="true" data-offset-key="1453:0" 
data-first-offset="true"><span data-slate-string="true">假如说，你要实现一个简化了的微信聊天功能，用户可以一对一聊天，也可以加好友，那么，你该怎么选择技术，并怎样设计持久层呢？</span></span></span> 
</div> <div class="se-df107d4f " data-slate-type="paragraph" data-slate-object="block" data-key="1454"> 
<span data-slate-object="text" data-key="1455"><span data-slate-leaf="true" data-offset-key="1455:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里，希望你在阅读后能有所收获。关于本章的内容，如果有想法，欢迎和我讨论。</span></span></span> 
</div> <h2 class="se-662c4477" data-slate-type="heading" data-slate-object="block" data-key="1456"><span 
data-slate-object="text" data-key="1457"><span data-slate-leaf="true" data-offset-key="1457:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-52cb61f5" data-slate-type="list" data-slate-object="block" data-key="1458"> <div 
class="se-e4a7dd32 se-0e0c4d0d" data-slate-type="list-line" data-slate-object="block" data-key="1459"> 
<span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" data-offset-key="1460:0" 
data-first-offset="true"><span data-slate-string="true">文中介绍了倒排索引，感兴趣的话你可以进一步阅读</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1461" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1462"><span data-slate-leaf="true" data-offset-key="1462:0" 
data-first-offset="true"><span data-slate-string="true">搜索引擎是如何设计倒排索引的？</span></span></span></a> 
</div> <div class="se-9663a5f7 se-99b195ec" data-slate-type="list-line" data-slate-object="block" 
data-key="1463"> <span data-slate-object="text" data-key="1464"><span data-slate-leaf="true" 
data-offset-key="1464:0" data-first-offset="true"><span data-slate-string="true">文中介绍了 GeoHash，在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">geohash.org</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true"> 的网站上，可以通过给出经纬度坐标，在地图上找到这个实际位置。感兴趣的话，还可以进一步了解：本质上，类似这种二维到一维的降维方式，都属于</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1468" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">空间填充曲线</span></span></span></a><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true"> ，比如说最有名的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1471" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" data-first-offset="true"><span 
data-slate-string="true">希尔伯特曲线</span></span></span></a><span data-slate-object="text" data-key="1473"><span 
data-slate-leaf="true" data-offset-key="1473:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-02e74671 se-38ea89df" data-slate-type="list-line" data-slate-object="block" 
data-key="1474"> <span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" 
data-offset-key="1475:0" data-first-offset="true"><span data-slate-string="true">Sharding 和 
Partitioning 是在数据库中常见的“拆分”方式，文中也提到了，但是这两个概念经常被混用，具体含义你可以参考维基百科 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1476" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1477"><span data-slate-leaf="true" data-offset-key="1477:0" data-first-offset="true"><span 
data-slate-string="true">Shard</span></span></span></a><span data-slate-object="text" data-key="1478"><span 
data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span data-slate-string="true"> 
和 </span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1479" 
class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="1480"><span data-slate-leaf="true" 
data-offset-key="1480:0" data-first-offset="true"><span data-slate-string="true">Partition</span></span></span></a><span 
data-slate-object="text" data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-e8a3342d se-bceb1beb" data-slate-type="list-line" data-slate-object="block" data-key="1482"> 
<span data-slate-object="text" data-key="1483"><span data-slate-leaf="true" data-offset-key="1483:0" 
data-first-offset="true"><span data-slate-string="true">有一篇介绍 Twitter 怎样应用推、拉模式，处理和存储消息，应对高访问量的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1484" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="1485"><span data-slate-leaf="true" data-offset-key="1485:0" 
data-first-offset="true"><span data-slate-string="true">文章</span></span></span></a><span data-slate-object="text" 
data-key="1486"><span data-slate-leaf="true" data-offset-key="1486:0" data-first-offset="true"><span 
data-slate-string="true">，相应的，微博的技术专家也写了一篇文章来介绍微博的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1487" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="1488"><span data-slate-leaf="true" data-offset-key="1488:0" data-first-offset="true"><span 
data-slate-string="true">处理方式</span></span></span></a><span data-slate-object="text" data-key="1489"><span 
data-slate-leaf="true" data-offset-key="1489:0" data-first-offset="true"><span data-slate-string="true">，你可以比较阅读。</span></span></span> 
</div> </div> <div class="se-4239c344" data-slate-type="image" data-slate-object="block" data-key="1490"> 
<img class="se-83bd74b6" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 21, 21) 
 {executed in 1 msec}
2020-11-19 11:12:16.214 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=21 
 {executed in 1 msec}
2020-11-19 11:12:16.214 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:12:16.215 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=21 
 {executed in 0 msec}
2020-11-19 11:12:16.215 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:12:16.216 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755536, 1605755536, 1, 'zh-hans', 0, 1, 1, 
0, '26丨设计数据持久层（下）：案例介绍', 1, 21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.219 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=21 
 {executed in 0 msec}
2020-11-19 11:12:16.219 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:12:16.220 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755536, 1605755536, 1, 'zh-hans', 0, 
1, 1, 0, '26丨设计数据持久层（下）：案例介绍', 'book', 1, 21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.223 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.224 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:12:16.224 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.225 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:12:16.226 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/69831b6ffd61a77bbf8928aeb000e6ab?bkt=en-e031c0692dcd5a217b3dbdf932e2c981a54940cf40121a2082791018387bbb0c2cada7fdba81ea12&fid=3757516097-778750-51115534142328&time=1605755534&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-zVGpVtjq9o2VIZm5bC1VMExmnpI%3D&to=92&size=16747028&sta_dx=16747028&sta_cs=3360&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482234&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16747028&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6f1d6e25542ebceb28f486fba5b6b268039114e57ac3075ca4c68a1997fff52def8d6c39aab6c654&sl=76480590&expires=8h&rt=pr&r=650360059&mlogid=7502109159607608419&vbdid=2247232042&fin=26%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.m4a&bflag=92,34-92&rtype=1&dp-logid=7502109159607608419&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=f042c2604f2a31c54a1db07bd0e257e8c1ad0963b01caba7&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=26%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.m4a', 
21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.230 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.230 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:12:16.231 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/69831b6ffd61a77bbf8928aeb000e6ab?bkt=en-e031c0692dcd5a217b3dbdf932e2c981a54940cf40121a2082791018387bbb0c2cada7fdba81ea12&fid=3757516097-778750-51115534142328&time=1605755534&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-zVGpVtjq9o2VIZm5bC1VMExmnpI%3D&to=92&size=16747028&sta_dx=16747028&sta_cs=3360&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482234&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16747028&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6f1d6e25542ebceb28f486fba5b6b268039114e57ac3075ca4c68a1997fff52def8d6c39aab6c654&sl=76480590&expires=8h&rt=pr&r=650360059&mlogid=7502109159607608419&vbdid=2247232042&fin=26%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.m4a&bflag=92,34-92&rtype=1&dp-logid=7502109159607608419&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=f042c2604f2a31c54a1db07bd0e257e8c1ad0963b01caba7&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=26%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.m4a', 
21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.235 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.235 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:12:16.236 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.236 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:12:16.237 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-08 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 其实类似微信的通讯工具，他会在你本地有个类似NoSQL的东西，搜个关键字什么的都支持，但是你发现你要找更久的，他会弹出一个框，你可以设置日期其实这个最后要走的关系型数据库去查询。毕竟大家都把NoSQL作为自己的中间件，提高响应缓冲服务器压力之类的，到最后数据还是要乖乖的存在MySQL这些关系型数据库。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-08 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 关于老师今天的题目给出两种答案： <br>一种是文档型数据库mongodb。虽然是NOSQL阵营，但是其支持类SQL且用的是JSON，而现在mysql5.7开始的版本用sql，但是支持JSON；主要是文档型数据库适合这种场景； 
<br>另外一种方式就是redis+MySQL：其原因不言而喻了，太多类似方式了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.241 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.241 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:12:16.243 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>靠人品去赢</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-08 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 其实类似微信的通讯工具，他会在你本地有个类似NoSQL的东西，搜个关键字什么的都支持，但是你发现你要找更久的，他会弹出一个框，你可以设置日期其实这个最后要走的关系型数据库去查询。毕竟大家都把NoSQL作为自己的中间件，提高响应缓冲服务器压力之类的，到最后数据还是要乖乖的存在MySQL这些关系型数据库。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-08 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 关于老师今天的题目给出两种答案： <br>一种是文档型数据库mongodb。虽然是NOSQL阵营，但是其支持类SQL且用的是JSON，而现在mysql5.7开始的版本用sql，但是支持JSON；主要是文档型数据库适合这种场景； 
<br>另外一种方式就是redis+MySQL：其原因不言而喻了，太多类似方式了 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i 
class="iconfont"></i> </div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li>', 0, 'full_html', 'zh-hans', 
21, 21) 
 {executed in 1 msec}
2020-11-19 11:12:16.247 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.247 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:12:16.248 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.248 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:12:16.249 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 21, 'https://static001.geekbang.org/resource/image/00/83/00c71b7e18e2ce331b1554c56b761e83.jpg', 
21) 
 {executed in 0 msec}
2020-11-19 11:12:16.253 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.253 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:12:16.254 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 21, 'https://static001.geekbang.org/resource/image/00/83/00c71b7e18e2ce331b1554c56b761e83.jpg', 
21) 
 {executed in 0 msec}
2020-11-19 11:12:16.258 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=21 
 {executed in 0 msec}
2020-11-19 11:12:16.259 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:12:16.260 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 21, 21) 
 {executed in 0 msec}
2020-11-19 11:12:16.264 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=21 
 {executed in 1 msec}
2020-11-19 11:12:16.264 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:12:16.265 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 21, 21) 
 {executed in 0 msec}
2020-11-19 11:13:06.408 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='621380814168731' 
 {executed in 0 msec}
2020-11-19 11:13:06.409 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:06.409 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755586, 1) 
 {executed in 0 msec}
2020-11-19 11:13:06.410 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755586, 1) 
 {executed in 0 msec}
2020-11-19 11:13:06.410 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|22            |
|--------------|

2020-11-19 11:13:06.418 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '60eba5ed-5ae9-457c-ba43-ac163987e306', 
22) 
 {executed in 0 msec}
2020-11-19 11:13:06.419 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '60eba5ed-5ae9-457c-ba43-ac163987e306', 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.419 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|22            |
|--------------|

2020-11-19 11:13:06.423 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=22, revision_default=1, revision_timestamp=1605755586, 
revision_uid=1 where vid=22 
 {executed in 1 msec}
2020-11-19 11:13:06.427 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.427 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:06.428 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '621380814168731', 'zh-hans', 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.431 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.432 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:06.433 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '621380814168731', 'zh-hans', 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.435 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=22 
 {executed in 0 msec}
2020-11-19 11:13:06.436 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:13:06.436 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=22 
 {executed in 0 msec}
2020-11-19 11:13:06.437 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:13:06.438 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 22, 0, 0, 19, 0, 22) 
 {executed in 1 msec}
2020-11-19 11:13:06.442 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.442 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:06.443 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.444 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:06.447 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="467" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-4c683b7a " data-slate-type="paragraph" data-slate-object="block" 
data-key="468"> <span data-slate-object="text" data-key="469"><span data-slate-leaf="true" 
data-offset-key="469:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-4699f57b " data-slate-type="paragraph" data-slate-object="block" data-key="470"> 
<span data-slate-object="text" data-key="471"><span data-slate-leaf="true" data-offset-key="471:0" 
data-first-offset="true"><span data-slate-string="true">在基于 Web 的全栈技术下，每一层的设计都有共同点，当然，也有各自的特殊之处。你可以回想一下，我们曾经在第一章谈到的客户端和服务端交互以及 
Web API 的设计，在第三章谈到的前端的设计，在第二章谈到的服务端 MVC 各层的设计，从前到后。那么，本章余下的内容，我们就来让整个设计层面上的体系变得完整，讲一讲最后面一层的数据持久层怎样设计。</span></span></span> 
</div> <div class="se-20d6ea08 " data-slate-type="paragraph" data-slate-object="block" data-key="472"> 
<span data-slate-object="text" data-key="473"><span data-slate-leaf="true" data-offset-key="473:0" 
data-first-offset="true"><span data-slate-string="true">持久层的设计包括持久化框架选择、持久层代码设计，以及存储技术选型等等，考虑到这其中有部分内容我们在第二章谈论 
MVC 模型层的时候已经讲到过了，那么在这一讲和下一讲中，我就会先偏重于持久层的数据存储技术本身，再结合实际的设计案例来介绍怎样选择合适的技术来解决那些经典的实际问题。</span></span></span> 
</div> <h2 class="se-3e0c1df4" data-slate-type="heading" data-slate-object="block" data-key="474"><span 
data-slate-object="text" data-key="475"><span data-slate-leaf="true" data-offset-key="475:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库</span></span></span></h2> <div 
class="se-459be200 " data-slate-type="paragraph" data-slate-object="block" data-key="476"> 
<span data-slate-object="text" data-key="477"><span data-slate-leaf="true" data-offset-key="477:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库就是以“关系模型”为基础而建立的数据库，这里的关系模型说的是数据可以通过数学上的关系表示和关联起来，也就是说，关系模型最终可以通过二维表格的结构来表达。关系数据库除了带来了明确的 
schema 和关系以外，还带来了对事务的支持，也就是对于强一致性的支持。</span></span></span> </div> <h3 class="se-a0b0804c" data-slate-type="heading" 
data-slate-object="block" data-key="478"><span data-slate-object="text" data-key="479"><span 
data-slate-leaf="true" data-offset-key="479:0" data-first-offset="true"><span data-slate-string="true">数据库范式</span></span></span></h3> 
<div class="se-13ead61a " data-slate-type="paragraph" data-slate-object="block" data-key="480"> 
<span data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">数据库的表设计，可以说是全栈工程师经常需要面对的问题。而这部分，其实是有“套路”可循的，其中一些常见的规范要求，就被总结为不同的“范式”（Normal 
Form）。它可以说是数据库表设计的基础，对于数据库表设计很有实际的指导意义。我注意到有很多程序员朋友都不太清楚不同范式的实际含义，那么今天，就请让我通过一个尽可能简单的图书管理系统的例子，来把它讲清楚。</span></span></span> 
</div> <div class="se-0010ca9f " data-slate-type="paragraph" data-slate-object="block" data-key="482"> 
<span data-slate-object="text" data-key="483"><span data-slate-leaf="true" data-offset-key="483:0" 
data-first-offset="true"><span class="se-6cf15ec5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 第一范式（1 NF）</span></span></span></span> </div> <div class="se-63f48f2a 
" data-slate-type="paragraph" data-slate-object="block" data-key="484"> <span data-slate-object="text" 
data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" data-first-offset="true"><span 
class="se-400eb895" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第一范式要求每个属性值都是不可再分的。</span></span></span></span><span 
data-slate-object="text" data-key="486"><span data-slate-leaf="true" data-offset-key="486:0" 
data-first-offset="true"><span data-slate-string="true">满足 1NF 的关系被称为规范化的关系，1NF 也是关系模式应具备的最起码的条件。比如下面这样的 
Books 表：</span></span></span> </div> <div class="se-4a73075a" data-slate-type="image" data-slate-object="block" 
data-key="487"> <img class="se-92583f1c" src="https://static001.geekbang.org/resource/image/c3/e0/c3e7821cd54c491b0aff7e12026573e0.jpg"> 
</div> <div class="se-732158d6 " data-slate-type="paragraph" data-slate-object="block" data-key="488"> 
<span data-slate-object="text" data-key="489"><span data-slate-leaf="true" data-offset-key="489:0" 
data-first-offset="true"><span data-slate-string="true">你看，在上面这张表中，有两本书重名了，都叫“Life”，但是国际标准书号 
ISBN 是不同的。放在了同一个属性 ISBN 中，并非不可再分，这显然违反了第一范式。那解决这个问题的办法就是拆分：</span></span></span> </div> <div 
class="se-031d56f2" data-slate-type="image" data-slate-object="block" data-key="490"> <img 
class="se-2815cafa" src="https://static001.geekbang.org/resource/image/60/9a/60bb114c4dfe64f3341c34cc4b0b859a.jpg"> 
</div> <div class="se-d7072796 " data-slate-type="paragraph" data-slate-object="block" data-key="491"> 
<span data-slate-object="text" data-key="492"><span data-slate-leaf="true" data-offset-key="492:0" 
data-first-offset="true"><span class="se-471d924a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 第二范式（2 NF）</span></span></span></span> </div> <div class="se-73b52486 
" data-slate-type="paragraph" data-slate-object="block" data-key="493"> <span data-slate-object="text" 
data-key="494"><span data-slate-leaf="true" data-offset-key="494:0" data-first-offset="true"><span 
class="se-84a10c1c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第二范式要求去除局部依赖。</span></span></span></span><span 
data-slate-object="text" data-key="495"><span data-slate-leaf="true" data-offset-key="495:0" 
data-first-offset="true"><span data-slate-string="true">也就是说，表中的属性完全依赖于全部主键，而不是部分主键。</span></span></span> 
</div> <div class="se-19443d70" data-slate-type="image" data-slate-object="block" data-key="496"> 
<img class="se-ca8b0007" src="https://static001.geekbang.org/resource/image/80/fe/803754244fa279d784a6af203d74fdfe.jpg"> 
</div> <div class="se-ba84dac4 " data-slate-type="paragraph" data-slate-object="block" data-key="497"> 
<span data-slate-object="text" data-key="498"><span data-slate-leaf="true" data-offset-key="498:0" 
data-first-offset="true"><span data-slate-string="true">你看，在上面这张表中，原本的设计是想让 BOOK_ID 和 AUTHOR_ID 
组成联合主键，但是，BOOK_NAME 仅仅依赖于部分主键 BOOK_ID，而 AUTHOR_NAME 也仅仅依赖于部分主键 AUTHOR_ID，违背了第二范式 。解决的办法依然是拆分，把这个可以独立被依赖的部分主键拿出去，上面的表可以拆成下面这样两张表：</span></span></span> 
</div> <div class="se-91ed7888" data-slate-type="image" data-slate-object="block" data-key="499"> 
<img class="se-fea73ba2" src="https://static001.geekbang.org/resource/image/9d/cb/9d6f9f22b2b5feab01cd6ea1de9582cb.jpg"> 
</div> <div class="se-0753e8df" data-slate-type="image" data-slate-object="block" data-key="500"> 
<img class="se-f104e218" src="https://static001.geekbang.org/resource/image/98/c3/9874e9af23ebd64c5278654a78cfacc3.jpg"> 
</div> <div class="se-99ac8501 " data-slate-type="paragraph" data-slate-object="block" data-key="501"> 
<span data-slate-object="text" data-key="502"><span data-slate-leaf="true" data-offset-key="502:0" 
data-first-offset="true"><span data-slate-string="true">从这个拆分中我们也可以看到，原表被拆成了 N 对 1 关系的两个表，而被不合范式依赖的那个“部分主键”，变成了“1”这头的主键。</span></span></span> 
</div> <div class="se-1530cf40 " data-slate-type="paragraph" data-slate-object="block" data-key="503"> 
<span data-slate-object="text" data-key="504"><span data-slate-leaf="true" data-offset-key="504:0" 
data-first-offset="true"><span class="se-161efc41" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 第三范式（3 NF）</span></span></span></span> </div> <div class="se-31b179f4 
" data-slate-type="paragraph" data-slate-object="block" data-key="505"> <span data-slate-object="text" 
data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" data-first-offset="true"><span 
class="se-a3a9814f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第三范式要求去除非主属性的传递依赖。</span></span></span></span><span 
data-slate-object="text" data-key="507"><span data-slate-leaf="true" data-offset-key="507:0" 
data-first-offset="true"><span data-slate-string="true">即在第二范式的基础上，非主属性必须直接依赖于主键，而不能传递依赖于主键。</span></span></span> 
</div> <div class="se-2ad5ef85" data-slate-type="image" data-slate-object="block" data-key="508"> 
<img class="se-5df8d228" src="https://static001.geekbang.org/resource/image/88/29/889a89fd92fab3a818aae622f3655e29.jpg"> 
</div> <div class="se-b75bf620 " data-slate-type="paragraph" data-slate-object="block" data-key="509"> 
<span data-slate-object="text" data-key="510"><span data-slate-leaf="true" data-offset-key="510:0" 
data-first-offset="true"><span data-slate-string="true">你看上面这张表，主键是 BOOK_ID，而 CATEGORY_ID 是非关键字段，并非直接依赖于主键，而是通过这样的传递依赖：</span></span></span> 
</div> <div class="se-abef622b" data-slate-type="block-quote" data-slate-object="block" data-key="511"> 
<div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="512"> 
<span data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">CATEGORY_NAME → CATEGORY_ID → BOOK_ID</span></span></span> 
</div> </div> <div class="se-591fbfd7 " data-slate-type="paragraph" data-slate-object="block" 
data-key="514"> <span data-slate-object="text" data-key="515"><span data-slate-leaf="true" 
data-offset-key="515:0" data-first-offset="true"><span data-slate-string="true">因此，为了消除这个传递依赖，我们还是拆表，让这个传递链中间的非关键字段自立门户：</span></span></span> 
</div> <div class="se-34354de5" data-slate-type="image" data-slate-object="block" data-key="516"> 
<img class="se-cd6306d9" src="https://static001.geekbang.org/resource/image/ec/4f/ec8cb2f6b80835e76d0631dcd1fe764f.jpg"> 
</div> <div class="se-193ae5bc" data-slate-type="image" data-slate-object="block" data-key="517"> 
<img class="se-c85a8824" src="https://static001.geekbang.org/resource/image/73/51/73c47a542f083d6b372056588dc10551.jpg"> 
</div> <div class="se-e35cee36 " data-slate-type="paragraph" data-slate-object="block" data-key="518"> 
<span data-slate-object="text" data-key="519"><span data-slate-leaf="true" data-offset-key="519:0" 
data-first-offset="true"><span data-slate-string="true">一般我们在设计中分析到第三范式就打住了，很少有情况会考虑更为严格的范式。例如，BC 
范式和第三范式就很像，但是，第三范式只是消除了非主属性对主属性的传递依赖，而 BC 范式更进一步，要求消除主属性对主属性的传递依赖，从而，消除所有属性对主属性的传递依赖。</span></span></span> 
</div> <div class="se-ba489f11 " data-slate-type="paragraph" data-slate-object="block" data-key="520"> 
<span data-slate-object="text" data-key="521"><span data-slate-leaf="true" data-offset-key="521:0" 
data-first-offset="true"><span data-slate-string="true">当然，还有第四、第五范式等等，要求更加严格，解耦更加彻底，但却不太常用了，如果你想进一步了解，可以参阅维基百科的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="522" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="523"><span data-slate-leaf="true" data-offset-key="523:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-45d68fc3 " data-slate-type="paragraph" 
data-slate-object="block" data-key="525"> <span data-slate-object="text" data-key="526"><span 
data-slate-leaf="true" data-offset-key="526:0" data-first-offset="true"><span data-slate-string="true">范式的程度更高，冗余度便更低。但正如同我们在第二章介绍的“拆分”大法一样，每一次范式的升级都意味着一个拆表的过程，一旦过度解耦，拆分出太多零散的表，对于程序员的理解，脑海中数据模型的建立，甚至包括联表操作的 
I/O 性能，都是不利的。因此我们需要“权衡”，掌握好这个度，</span></span></span><span data-slate-object="text" data-key="527"><span 
data-slate-leaf="true" data-offset-key="527:0" data-first-offset="true"><span class="se-a9197cbc" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这一原则，和我们介绍过的分层设计是一致的。</span></span></span></span> 
</div> <h2 class="se-c21a1d6a" data-slate-type="heading" data-slate-object="block" data-key="528"><span 
data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL</span></span></span></h2> <div 
class="se-86fbcce6 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中，我已经介绍了 NoSQL 的概念。在 NoSQL 出现以前，设计大型网站等 
Web 应用的时候，全栈工程师的武器库里可供使用的选择，要局限得多。尤其是对一些量大且非结构化的数据，缺乏特别理想的解决方法，工程师有时不得不采用一些非常规的特殊方案，而更多时候我们只能在传统关系数据库的基础上，使用数据库的 
Sharding 和 Partition 这样的操作。</span></span></span> </div> <div class="se-a372041d " data-slate-type="paragraph" 
data-slate-object="block" data-key="532"> <span data-slate-object="text" data-key="533"><span 
data-slate-leaf="true" data-offset-key="533:0" data-first-offset="true"><span data-slate-string="true">虽然那时候在数据规模上面临的挑战远没有现在大，可那个时候 
DBA（Database Administrator）在市场上可以说是炙手可热，一旦出了问题，有时甚至还得请专门的数据库厂商的专家，这其中的费用极其高昂，是以分钟计算的。</span></span></span> 
</div> <div class="se-202d657f " data-slate-type="paragraph" data-slate-object="block" data-key="534"> 
<span data-slate-object="text" data-key="535"><span data-slate-leaf="true" data-offset-key="535:0" 
data-first-offset="true"><span data-slate-string="true">如今，你可能听说过许多互联网企业去 IOE 的故事（IOE 指的是 IBM 
的小型机、Oracle 数据库、EMC 存储设备这三者），其中阿里巴巴的版本听起来还颇为传奇。事实上，这可不只是只有国内的阿里巴巴曾经努力做的事情，还是全球许多大型互联网企业都曾经或正在做的事情，也包括 
Amazon。我曾经在 Amazon 的销量预测团队中工作，当时我们团队可以说就在整个亚马逊最大的传统（非云上）关系数据库上工作，里面存放了全部商品库存、销量等有关的信息。</span></span></span> 
</div> <div class="se-24eea97f " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">Web 2.0 时代的到来，为互联网应用带来了深远的影响，</span></span></span><span 
data-slate-object="text" data-key="538"><span data-slate-leaf="true" data-offset-key="538:0" 
data-first-offset="true"><span class="se-3edd519e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">用户代替传统媒体，成为了 Web 2.0 时代主要的数据制造者。海量、不定结构、弱关联关系、高可用性和低一致性要求的数据特点，让关系数据库力不从心；而 
NoSQL 则具有更好的横向扩展性、海量数据支持、易维护和廉价等等优势，犹如一剂特效药，成为了市场上这个数据难题的大杀器。</span></span></span></span> </div> 
<div class="se-3de9d264 " data-slate-type="paragraph" data-slate-object="block" data-key="539"> 
<span data-slate-object="text" data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" 
data-first-offset="true"><span data-slate-string="true">当然，现实中依然存在大量需要强一致性和关系查询的业务场景，因此关系数据库依然是我们倚赖的重要工具。可是，</span></span></span><span 
data-slate-object="text" data-key="541"><span data-slate-leaf="true" data-offset-key="541:0" 
data-first-offset="true"><span class="se-72b7de94" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">依然使用关系数据库并不代表依然靠互联网企业自己亲力亲为地做繁重的数据库管理工作</span></span></span></span><span 
data-slate-object="text" data-key="542"><span data-slate-leaf="true" data-offset-key="542:0" 
data-first-offset="true"><span data-slate-string="true">，关系数据库云服务的崛起将传统的数据库管理工作自动化，于是普通的软件工程师也可以完成以往 
DBA 才能完成的工作了。从这里也能看出，DBA 也确实是一个技术变更影响技术人才市场需求的典型例子。</span></span></span> </div> <div class="se-3fb47d43 
" data-slate-type="paragraph" data-slate-object="block" data-key="543"> <span data-slate-object="text" 
data-key="544"><span data-slate-leaf="true" data-offset-key="544:0" data-first-offset="true"><span 
data-slate-string="true">综上，这个数据的问题就有了两个层次的解决方案：</span></span></span> </div> <div class="se-0f6e180b" 
data-slate-type="list" data-slate-object="block" data-key="545"> <div class="se-eed21a15 se-351625cf" 
data-slate-type="list-line" data-slate-object="block" data-key="546"> <span data-slate-object="text" 
data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" data-first-offset="true"><span 
data-slate-string="true">出现了更适合业务的非关系数据库服务，也就是 NoSQL；</span></span></span> </div> <div class="se-84132874 
se-55764645" data-slate-type="list-line" data-slate-object="block" data-key="548"> <span data-slate-object="text" 
data-key="549"><span data-slate-leaf="true" data-offset-key="549:0" data-first-offset="true"><span 
data-slate-string="true">把关系数据库搬到云上，从而让互联网企业从繁重的数据库管理工作中解脱出来，例如 RDS。</span></span></span> </div> 
</div> <h3 class="se-77a017c4" data-slate-type="heading" data-slate-object="block" data-key="550"><span 
data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL 数据库的分类</span></span></span></h3> 
<div class="se-aa8e2306 " data-slate-type="paragraph" data-slate-object="block" data-key="552"> 
<span data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span data-slate-string="true">别看 NoSQL 的数据库那么多，它们大致可以被分为这样几类，每一类也都有自己的优势和劣势。在介绍每一类的时候，我会以我比较熟悉的 
AWS 上的实现来具体介绍，当然，很可能你见过的是其它的例子（比如非云上的本地版本，再比如不同的云服务厂商都会提供自己的实现），但在原理层面都是类似的。</span></span></span> 
</div> <div class="se-421ee8bf " data-slate-type="paragraph" data-slate-object="block" data-key="554"> 
<span data-slate-object="text" data-key="555"><span data-slate-leaf="true" data-offset-key="555:0" 
data-first-offset="true"><span class="se-31c1284b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 键值（Key-value）数据库</span></span></span></span> </div> <div class="se-e9c7a7f4 
" data-slate-type="paragraph" data-slate-object="block" data-key="556"> <span data-slate-object="text" 
data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" data-first-offset="true"><span 
data-slate-string="true">这一类 NoSQL 的数据库，采用的是 key-value 这样的访问模型，也就是说，可以根据一个唯一的 key 来获取所需要的值，这个 
key 被称为主键，而这个根据 key 来获取 value 的访问的过程是通过 Hash 算法来实现的。本地的 Redis 或者云上的 DynamoDB 都属于这一类。</span></span></span> 
</div> <div class="se-2a36e0a1 " data-slate-type="paragraph" data-slate-object="block" data-key="558"> 
<span data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span data-slate-string="true">以 DynamoDB 为例，它的 key 由 Partition Key 
和 Sort Key 两级组成，即前者用来找到数据存在哪一个存储单元（Storage Unit），而后者用来找到 value 在存储单元上的具体位置。通常来说，这个二级 Hash 的过程时间开销并不会随着数据量的增大而增大，下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="560" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="561"><span data-slate-leaf="true" data-offset-key="561:0" 
data-first-offset="true"><span data-slate-string="true">官方的 Blog</span></span></span></a><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-dd1fb50f" data-slate-type="image" data-slate-object="block" data-key="563"> <img 
class="se-cc46a08c" src="https://static001.geekbang.org/resource/image/6e/b3/6e087df74ef924619966e74fdcd0f5b3.jpg"> 
</div> <div class="se-25f12bab " data-slate-type="paragraph" data-slate-object="block" data-key="564"> 
<span data-slate-object="text" data-key="565"><span data-slate-leaf="true" data-offset-key="565:0" 
data-first-offset="true"><span data-slate-string="true">DynamoDB 表结构看起来和传统的关系数据库有些像，并且每一行的 
schema 可以完全不同，即“列”可以是任意的。每张表的数据支持有限的范围查询，包括主键的范围查询，以及索引列的范围查询。其中，索引的数量是有着明确限制的，一种是全局的（相当于 Partition 
Key + Sort Key），每张表上限 20 个；一种是本地的（相当于 Partition Key 已经确定，只通过 Sort Key 索引），每张表上限 5 个。</span></span></span> 
</div> <div class="se-ec5b7687 " data-slate-type="paragraph" data-slate-object="block" data-key="566"> 
<span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span class="se-34c1e2fc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 列式（Columnar）数据库</span></span></span></span> </div> <div class="se-9a4e72eb 
" data-slate-type="paragraph" data-slate-object="block" data-key="568"> <span data-slate-object="text" 
data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span 
data-slate-string="true">经典的数据库是面向行的，即数据在存储的时候，每一行的数据是放在一起的，这样数据库在读取磁盘上连续数据的时候，实际每次可以一气读取若干行。如果需要完整地查询出特定某些行的数据，行数据库是高效的。且看下面的示例，来自 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="570" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="571"><span data-slate-leaf="true" data-offset-key="571:0" 
data-first-offset="true"><span data-slate-string="true">Redshift 官方文档</span></span></span></a><span 
data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-9616fb84" data-slate-type="image" data-slate-object="block" data-key="573"> <img 
class="se-6ff49b22" src="https://static001.geekbang.org/resource/image/b1/1b/b1a304f40d3d8f006a3a1e79f663af1b.jpg"> 
</div> <div class="se-92252cc5 " data-slate-type="paragraph" data-slate-object="block" data-key="574"> 
<span data-slate-object="text" data-key="575"><span data-slate-leaf="true" data-offset-key="575:0" 
data-first-offset="true"><span data-slate-string="true">但是列式数据库不一样，它是将每一列的数据放在一起。这样的话，如果我们的处理逻辑是要求取出所有数据中的特定列，那么列数据库就是更好的选择：</span></span></span> 
</div> <div class="se-3b801bbd" data-slate-type="image" data-slate-object="block" data-key="576"> 
<img class="se-98bf94ad" src="https://static001.geekbang.org/resource/image/68/0a/6827c62314d7a7dc40053a8d1ea7aa0a.jpg"> 
</div> <div class="se-7735f5f9 " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">事实上，对于数据库来说，磁盘的读、写本身，往往还不是最慢的，最慢的是寻址操作。因此，无论是行数据库还是列数据库，如果根据实际需要，我们的实际访问能够从随机访问变成顺序访问，那么就可以极大地提高效率。在大数据处理中经常使用的 
HBase 和云上的 Redshift 都属于这一类。</span></span></span> </div> <div class="se-e50a9e7b " data-slate-type="paragraph" 
data-slate-object="block" data-key="579"> <span data-slate-object="text" data-key="580"><span 
data-slate-leaf="true" data-offset-key="580:0" data-first-offset="true"><span data-slate-string="true">和行数据库相比，列数据库还有一些其它的好处。比如说，对于很多数据来说，某一个特定列都是满足某种特定的格式的，那么列数据库就可以根据这种格式来执行特定的压缩操作。</span></span></span> 
</div> <div class="se-3e89d77d " data-slate-type="paragraph" data-slate-object="block" data-key="581"> 
<span data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span class="se-9a05d129" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 文档（Document）数据库</span></span></span></span> </div> <div class="se-752a59f9 
" data-slate-type="paragraph" data-slate-object="block" data-key="583"> <span data-slate-object="text" 
data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" data-first-offset="true"><span 
data-slate-string="true">文档数据库是前面提到的键值数据库的演化版，值是以某一种特定的文档格式来存储的，比如 JSON、XML 等等。也就是说，文档携带的数据，是已经指定了既定的编码、格式等等信息的。某一些文档数据库针对文档的特点，提供了对于文档内容查询的功能，这是比原始的键值数据库功能上强大的地方。本地的 
MongoDB 和 AWS 上的 DocumentDB 都属于这个类型。</span></span></span> </div> <div class="se-8ef37fd3 " 
data-slate-type="paragraph" data-slate-object="block" data-key="585"> <span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
class="se-040c6cd9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
对象（Object）数据库</span></span></span></span> </div> <div class="se-b3c59eb0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="587"> <span data-slate-object="text" data-key="588"><span 
data-slate-leaf="true" data-offset-key="588:0" data-first-offset="true"><span data-slate-string="true">和上面介绍的文档数据库类似，当 
value 变成一个可序列化的对象，特别是一个大对象的时候，它就被归类为对象数据库了。AWS 上最常用的 NoSQL 存储，除了前面介绍过的 DynamoDB，就是 S3 了，它相对成本更为低廉，耐久性（durability，数据不丢失的级别）非常高（达到了 
11 个 9），并且存储对象可以很大，因此用户经常把它当做一个“文件系统”来存放各种类型的文件，而把 key 设计成操作系统文件路径这样一级一级的形式，S3 也就被称为“文件系统”。但是，实际上 
S3 的“文件”还是和我们所熟悉的操作系统的文件系统有着很大的区别。</span></span></span> </div> <div class="se-0ccbabbf " data-slate-type="paragraph" 
data-slate-object="block" data-key="589"> <span data-slate-object="text" data-key="590"><span 
data-slate-leaf="true" data-offset-key="590:0" data-first-offset="true"><span data-slate-string="true">当然，还有一些其它的类型，包括图形（Graph）数据库、搜索（Search）数据库等等，我就不一一列举了。</span></span></span> 
</div> <h2 class="se-6c4fb3c0" data-slate-type="heading" data-slate-object="block" data-key="591"><span 
data-slate-object="text" data-key="592"><span data-slate-leaf="true" data-offset-key="592:0" 
data-first-offset="true"><span data-slate-string="true">演进趋势</span></span></span></h2> <div 
class="se-23780c79 " data-slate-type="paragraph" data-slate-object="block" data-key="593"> 
<span data-slate-object="text" data-key="594"><span data-slate-leaf="true" data-offset-key="594:0" 
data-first-offset="true"><span data-slate-string="true">我们在这一章已经从一致性、可用性等方面了解了关系数据库和非关系数据库各自的优势，我想，对这两方面，你应该已经有了自己的认识。现在，我想再补充两个角度，让比较更为全面，分别是扩展性和数据的结构性，我们一起来看看持久层的存储技术的演进趋势。</span></span></span> 
</div> <h3 class="se-addbc312" data-slate-type="heading" data-slate-object="block" data-key="595"><span 
data-slate-object="text" data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" 
data-first-offset="true"><span data-slate-string="true">1. 从 Scale Up 到 Scale Out</span></span></span></h3> 
<div class="se-4c9105fc " data-slate-type="paragraph" data-slate-object="block" data-key="597"> 
<span data-slate-object="text" data-key="598"><span data-slate-leaf="true" data-offset-key="598:0" 
data-first-offset="true"><span data-slate-string="true">先回顾一下“扩展性”（Scalability，也有翻译为“伸缩性”的）这个概念。</span></span></span> 
</div> <div class="se-3b7f4385 " data-slate-type="paragraph" data-slate-object="block" data-key="599"> 
<span data-slate-object="text" data-key="600"><span data-slate-leaf="true" data-offset-key="600:0" 
data-first-offset="true"><span data-slate-string="true">按理说，扩展性是包括“纵向（垂直）扩展”和“横向（水平）扩展”的。当然，如今使用这个词的时候，我们往往特指的是“Scale 
Out”，也就是横向扩展，说白了，就是通过在同一层上增加硬件资源的方式来增加扩展性，从而提高系统的吞吐量或容量。比如说，增加机器。NoSQL 技术往往具备很强的横向扩展能力，至于其中的一个典型原理，你可以回顾一下 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="601" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="602"><span data-slate-leaf="true" data-offset-key="602:0" 
data-first-offset="true"><span data-slate-string="true">[第 23 讲]</span></span></span></a><span 
data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true"> 的选修课堂“一致性哈希”，你就会明白，为什么 NoSQL 技术可以很方便地在同一层增加硬件资源了。</span></span></span> 
</div> <div class="se-fd8b8955 " data-slate-type="paragraph" data-slate-object="block" data-key="604"> 
<span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">可是，你知道吗，在很早以前，人们谈“扩展性”的时候，默认指的却是“Scale 
Up”。它指的是在硬件设施数量不变的基础上，通过增加单个硬件设施的性能和容量来达到同样的“扩展”目的。比如说，把同一台机器的 CPU 换成更好的，把内存升级，把磁盘换成容量更大的，等等。毕竟，在那时候，程序员对于很多问题的思考都还普遍停留在“单机”的层面上。</span></span></span> 
</div> <div class="se-6d8bad39 " data-slate-type="paragraph" data-slate-object="block" data-key="606"> 
<span data-slate-object="text" data-key="607"><span data-slate-leaf="true" data-offset-key="607:0" 
data-first-offset="true"><span data-slate-string="true">为什么横向扩展如此重要，以至于成为了“扩展性”的默认指代？</span></span></span> 
</div> <div class="se-0b92dd20 " data-slate-type="paragraph" data-slate-object="block" data-key="608"> 
<span data-slate-object="text" data-key="609"><span data-slate-leaf="true" data-offset-key="609:0" 
data-first-offset="true"><span data-slate-string="true">原因很简单，单个硬件设施的性能提升是非常有限的，而且极其昂贵。我记得我刚工作那会儿，去国内某电信运营商开局，众所周知他们“不差钱”，为了提升性能，我们做了很多 
Scale Up 的工作，包括把 CPU 升级成了 96 核的。可是你看看现在的互联网公司，哪个会这么玩？因此在现实中，多数情况下，扩容这件事情上，Scale Out 是唯一的选择。</span></span></span> 
</div> <h3 class="se-fd8b403e" data-slate-type="heading" data-slate-object="block" data-key="610"><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">2. 从结构化数据到非结构化数据</span></span></span></h3> 
<div class="se-b01a5ffa " data-slate-type="paragraph" data-slate-object="block" data-key="612"> 
<span data-slate-object="text" data-key="613"><span data-slate-leaf="true" data-offset-key="613:0" 
data-first-offset="true"><span data-slate-string="true">我们使用关系数据库的时候，每一行数据都是严格符合表结构的定义，有多少列，每一列的类型是什么，等等，我们把这类数据叫做“结构化”（structured）数据，而这个确定的“结构”，就是 
schema。结构化的数据具备最佳的查询、校验和关联能力。</span></span></span> </div> <div class="se-95489a06 " data-slate-type="paragraph" 
data-slate-object="block" data-key="614"> <span data-slate-object="text" data-key="615"><span 
data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span data-slate-string="true">但是当我们使用 
DynamoDB 这样的 NoSQL 数据库的时候，我们发现，每一行数据依然可以分成一列一列的，但是有多少列，或者每一列的类型，或者表示的具体含义，却变得不再固定了。这时候我们说，这样的结构依然存在，但是共通的部分明显比结构化数据少多了，于是我们把它们叫做“半结构化”（semi-structured）的数据。</span></span></span> 
</div> <div class="se-7ef3952a " data-slate-type="paragraph" data-slate-object="block" data-key="616"> 
<span data-slate-object="text" data-key="617"><span data-slate-leaf="true" data-offset-key="617:0" 
data-first-offset="true"><span data-slate-string="true">再一般化，就是“非结构化”（non-structured）数据了，上面说的 
S3 就是一个很好的例子。即便 S3 上存储的文件是符合某种结构的（比如 JSON），我们也无法利用这个存储服务来完成依据结构而进行的查询等等操作了。</span></span></span> 
</div> <div class="se-3f523c6d " data-slate-type="paragraph" data-slate-object="block" data-key="618"> 
<span data-slate-object="text" data-key="619"><span data-slate-leaf="true" data-offset-key="619:0" 
data-first-offset="true"><span data-slate-string="true">无论是同步还是异步的数据处理，我们总是希望数据的结构性越强越好，因为“结构”本质上意味着“规则”，越强的结构，就越容易使用简单直白的代码逻辑去处理。可是，恰恰相反的是，</span></span></span><span 
data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span class="se-28c9c7a4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们在现实中遇到的绝大多数的数据，都是非结构化的</span></span></span></span><span data-slate-object="text" 
data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" data-first-offset="true"><span 
data-slate-string="true">，或者说，很难用某一种特定的规则去套。</span></span></span> </div> <h2 class="se-1cd0b8d2" 
data-slate-type="heading" data-slate-object="block" data-key="622"><span data-slate-object="text" 
data-key="623"><span data-slate-leaf="true" data-offset-key="623:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-be664b45 " data-slate-type="paragraph" 
data-slate-object="block" data-key="624"> <span data-slate-object="text" data-key="625"><span 
data-slate-leaf="true" data-offset-key="625:0" data-first-offset="true"><span data-slate-string="true">今天我们从不同角度学习了关系数据库和非关系数据库，掌握了一些存储设计的原理和技巧，希望你可以将内容慢慢消化。</span></span></span> 
</div> <div class="se-e5a431b2 " data-slate-type="paragraph" data-slate-object="block" data-key="626"> 
<span data-slate-object="text" data-key="627"><span data-slate-leaf="true" data-offset-key="627:0" 
data-first-offset="true"><span data-slate-string="true">下面是今天的提问环节了，我想换个形式。</span></span></span> 
</div> <div class="se-84de571d " data-slate-type="paragraph" data-slate-object="block" data-key="628"> 
<span data-slate-object="text" data-key="629"><span data-slate-leaf="true" data-offset-key="629:0" 
data-first-offset="true"><span data-slate-string="true">我们已经学习了几种常见的数据库范式，下面这张图书馆用户表的数据库表的设计是不合理的，你觉得它满足了第几范式呢？并且，你能不能通过学到的拆分方法，分析一下它的问题，把它进一步优化，消除冗余呢？</span></span></span> 
</div> <div class="se-30048552" data-slate-type="image" data-slate-object="block" data-key="630"> 
<img class="se-69cd6a0b" src="https://static001.geekbang.org/resource/image/7a/27/7a609fd55a0882a88a95a1dc43fc9c27.jpg"> 
</div> <div class="se-eb54cec2 " data-slate-type="paragraph" data-slate-object="block" data-key="631"> 
<span data-slate-object="text" data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里。如果有思考、有问题，欢迎在留言区发言，我们一起讨论。</span></span></span> 
</div> <h2 class="se-e52599c0" data-slate-type="heading" data-slate-object="block" data-key="633"><span 
data-slate-object="text" data-key="634"><span data-slate-leaf="true" data-offset-key="634:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-ac4c6aff" data-slate-type="list" data-slate-object="block" data-key="635"> <div class="se-0749ff05 
se-38c26b52" data-slate-type="list-line" data-slate-object="block" data-key="636"> <span data-slate-object="text" 
data-key="637"><span data-slate-leaf="true" data-offset-key="637:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了 Web 2.0 的概念，我推荐你阅读 Web 2.0 的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="638" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" data-first-offset="true"><span 
data-slate-string="true">维基百科词条</span></span></span></a><span data-slate-object="text" data-key="640"><span 
data-slate-leaf="true" data-offset-key="640:0" data-first-offset="true"><span data-slate-string="true">，以及 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="641" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="642"><span data-slate-leaf="true" data-offset-key="642:0" 
data-first-offset="true"><span data-slate-string="true">Web 2.0 网站的九个特点</span></span></span></a><span 
data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章，以对它有一个明确的认识。</span></span></span> 
</div> <div class="se-9e189aa0 se-3f8e64d4" data-slate-type="list-line" data-slate-object="block" 
data-key="644"> <span data-slate-object="text" data-key="645"><span data-slate-leaf="true" 
data-offset-key="645:0" data-first-offset="true"><span data-slate-string="true">对于 NoSQL 的一些特定的术语，以及数据库的分类和比较，推荐你阅读这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="646" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">什么是 NoSQL？</span></span></span></a> 
</div> <div class="se-c89c117b se-dbef1a4e" data-slate-type="list-line" data-slate-object="block" 
data-key="648"> <span data-slate-object="text" data-key="649"><span data-slate-leaf="true" 
data-offset-key="649:0" data-first-offset="true"><span data-slate-string="true">文中介绍了去 IOE 
的事儿，正好 Amazon 最近宣称他们正式完成了从 Oracle 关系数据库迁移离开的工作，感兴趣的话可以</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="650" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" data-first-offset="true"><span 
data-slate-string="true">看一看</span></span></span></a><span data-slate-object="text" data-key="652"><span 
data-slate-leaf="true" data-offset-key="652:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-134e68ec se-eca9ebf2" data-slate-type="list-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">对于分布式存储感兴趣，并且阅读能力还可以的话，有一些经典论文可以是进一步学习的对象，但请注意它们不是我们这个阶段或当前学习周期内需要学习的内容。比如 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="655" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">Dynamo: Amazon’s Highly Available Key-value 
Store</span></span></span></a><span data-slate-object="text" data-key="657"><span data-slate-leaf="true" 
data-offset-key="657:0" data-first-offset="true"><span data-slate-string="true"> 这篇，中文译文可以</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="658" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="659"><span data-slate-leaf="true" data-offset-key="659:0" 
data-first-offset="true"><span data-slate-string="true">参考这篇</span></span></span></a><span 
data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span data-slate-string="true">，它影响了后来很多分布式系统的设计和发展，我几年前也学习并写了一些</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="661" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" 
data-first-offset="true"><span data-slate-string="true">自己的理解</span></span></span></a><span 
data-slate-object="text" data-key="663"><span data-slate-leaf="true" data-offset-key="663:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-c5065b2e se-aa0fb418" data-slate-type="list-line" data-slate-object="block" data-key="664"> 
<span data-slate-object="text" data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" 
data-first-offset="true"><span data-slate-string="true">再就是 Google 著名的“三驾马车”了，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="666" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="667"><span data-slate-leaf="true" data-offset-key="667:0" 
data-first-offset="true"><span data-slate-string="true">GFS</span></span></span></a><span data-slate-object="text" 
data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" data-first-offset="true"><span 
data-slate-string="true">（</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="669" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="670"><span 
data-slate-leaf="true" data-offset-key="670:0" data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">），</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="672" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" data-first-offset="true"><span 
data-slate-string="true">MapReduce</span></span></span></a><span data-slate-object="text" data-key="674"><span 
data-slate-leaf="true" data-offset-key="674:0" data-first-offset="true"><span data-slate-string="true">（</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="675" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="677"><span data-slate-leaf="true" data-offset-key="677:0" 
data-first-offset="true"><span data-slate-string="true">） 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="678" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="679"><span data-slate-leaf="true" data-offset-key="679:0" data-first-offset="true"><span 
data-slate-string="true">BigTable</span></span></span></a><span data-slate-object="text" data-key="680"><span 
data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span data-slate-string="true">（</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="681" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">）。我仅仅把它们放在这里，只是供感兴趣且有一定论文阅读能力的程序员朋友参考，而对于本专栏全栈的学习来说，不接触它们是完全没问题的。</span></span></span> 
</div> </div> <div class="se-08281a2d" data-slate-type="image" data-slate-object="block" data-key="684"> 
<img class="se-135dc37d" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 11:13:06.451 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.452 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:06.454 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="467" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-4c683b7a " data-slate-type="paragraph" data-slate-object="block" data-key="468"> 
<span data-slate-object="text" data-key="469"><span data-slate-leaf="true" data-offset-key="469:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-4699f57b " data-slate-type="paragraph" data-slate-object="block" data-key="470"> 
<span data-slate-object="text" data-key="471"><span data-slate-leaf="true" data-offset-key="471:0" 
data-first-offset="true"><span data-slate-string="true">在基于 Web 的全栈技术下，每一层的设计都有共同点，当然，也有各自的特殊之处。你可以回想一下，我们曾经在第一章谈到的客户端和服务端交互以及 
Web API 的设计，在第三章谈到的前端的设计，在第二章谈到的服务端 MVC 各层的设计，从前到后。那么，本章余下的内容，我们就来让整个设计层面上的体系变得完整，讲一讲最后面一层的数据持久层怎样设计。</span></span></span> 
</div> <div class="se-20d6ea08 " data-slate-type="paragraph" data-slate-object="block" data-key="472"> 
<span data-slate-object="text" data-key="473"><span data-slate-leaf="true" data-offset-key="473:0" 
data-first-offset="true"><span data-slate-string="true">持久层的设计包括持久化框架选择、持久层代码设计，以及存储技术选型等等，考虑到这其中有部分内容我们在第二章谈论 
MVC 模型层的时候已经讲到过了，那么在这一讲和下一讲中，我就会先偏重于持久层的数据存储技术本身，再结合实际的设计案例来介绍怎样选择合适的技术来解决那些经典的实际问题。</span></span></span> 
</div> <h2 class="se-3e0c1df4" data-slate-type="heading" data-slate-object="block" data-key="474"><span 
data-slate-object="text" data-key="475"><span data-slate-leaf="true" data-offset-key="475:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库</span></span></span></h2> <div 
class="se-459be200 " data-slate-type="paragraph" data-slate-object="block" data-key="476"> 
<span data-slate-object="text" data-key="477"><span data-slate-leaf="true" data-offset-key="477:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库就是以“关系模型”为基础而建立的数据库，这里的关系模型说的是数据可以通过数学上的关系表示和关联起来，也就是说，关系模型最终可以通过二维表格的结构来表达。关系数据库除了带来了明确的 
schema 和关系以外，还带来了对事务的支持，也就是对于强一致性的支持。</span></span></span> </div> <h3 class="se-a0b0804c" data-slate-type="heading" 
data-slate-object="block" data-key="478"><span data-slate-object="text" data-key="479"><span 
data-slate-leaf="true" data-offset-key="479:0" data-first-offset="true"><span data-slate-string="true">数据库范式</span></span></span></h3> 
<div class="se-13ead61a " data-slate-type="paragraph" data-slate-object="block" data-key="480"> 
<span data-slate-object="text" data-key="481"><span data-slate-leaf="true" data-offset-key="481:0" 
data-first-offset="true"><span data-slate-string="true">数据库的表设计，可以说是全栈工程师经常需要面对的问题。而这部分，其实是有“套路”可循的，其中一些常见的规范要求，就被总结为不同的“范式”（Normal 
Form）。它可以说是数据库表设计的基础，对于数据库表设计很有实际的指导意义。我注意到有很多程序员朋友都不太清楚不同范式的实际含义，那么今天，就请让我通过一个尽可能简单的图书管理系统的例子，来把它讲清楚。</span></span></span> 
</div> <div class="se-0010ca9f " data-slate-type="paragraph" data-slate-object="block" data-key="482"> 
<span data-slate-object="text" data-key="483"><span data-slate-leaf="true" data-offset-key="483:0" 
data-first-offset="true"><span class="se-6cf15ec5" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 第一范式（1 NF）</span></span></span></span> </div> <div class="se-63f48f2a 
" data-slate-type="paragraph" data-slate-object="block" data-key="484"> <span data-slate-object="text" 
data-key="485"><span data-slate-leaf="true" data-offset-key="485:0" data-first-offset="true"><span 
class="se-400eb895" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第一范式要求每个属性值都是不可再分的。</span></span></span></span><span 
data-slate-object="text" data-key="486"><span data-slate-leaf="true" data-offset-key="486:0" 
data-first-offset="true"><span data-slate-string="true">满足 1NF 的关系被称为规范化的关系，1NF 也是关系模式应具备的最起码的条件。比如下面这样的 
Books 表：</span></span></span> </div> <div class="se-4a73075a" data-slate-type="image" data-slate-object="block" 
data-key="487"> <img class="se-92583f1c" src="https://static001.geekbang.org/resource/image/c3/e0/c3e7821cd54c491b0aff7e12026573e0.jpg"> 
</div> <div class="se-732158d6 " data-slate-type="paragraph" data-slate-object="block" data-key="488"> 
<span data-slate-object="text" data-key="489"><span data-slate-leaf="true" data-offset-key="489:0" 
data-first-offset="true"><span data-slate-string="true">你看，在上面这张表中，有两本书重名了，都叫“Life”，但是国际标准书号 
ISBN 是不同的。放在了同一个属性 ISBN 中，并非不可再分，这显然违反了第一范式。那解决这个问题的办法就是拆分：</span></span></span> </div> <div 
class="se-031d56f2" data-slate-type="image" data-slate-object="block" data-key="490"> <img 
class="se-2815cafa" src="https://static001.geekbang.org/resource/image/60/9a/60bb114c4dfe64f3341c34cc4b0b859a.jpg"> 
</div> <div class="se-d7072796 " data-slate-type="paragraph" data-slate-object="block" data-key="491"> 
<span data-slate-object="text" data-key="492"><span data-slate-leaf="true" data-offset-key="492:0" 
data-first-offset="true"><span class="se-471d924a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 第二范式（2 NF）</span></span></span></span> </div> <div class="se-73b52486 
" data-slate-type="paragraph" data-slate-object="block" data-key="493"> <span data-slate-object="text" 
data-key="494"><span data-slate-leaf="true" data-offset-key="494:0" data-first-offset="true"><span 
class="se-84a10c1c" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第二范式要求去除局部依赖。</span></span></span></span><span 
data-slate-object="text" data-key="495"><span data-slate-leaf="true" data-offset-key="495:0" 
data-first-offset="true"><span data-slate-string="true">也就是说，表中的属性完全依赖于全部主键，而不是部分主键。</span></span></span> 
</div> <div class="se-19443d70" data-slate-type="image" data-slate-object="block" data-key="496"> 
<img class="se-ca8b0007" src="https://static001.geekbang.org/resource/image/80/fe/803754244fa279d784a6af203d74fdfe.jpg"> 
</div> <div class="se-ba84dac4 " data-slate-type="paragraph" data-slate-object="block" data-key="497"> 
<span data-slate-object="text" data-key="498"><span data-slate-leaf="true" data-offset-key="498:0" 
data-first-offset="true"><span data-slate-string="true">你看，在上面这张表中，原本的设计是想让 BOOK_ID 和 AUTHOR_ID 
组成联合主键，但是，BOOK_NAME 仅仅依赖于部分主键 BOOK_ID，而 AUTHOR_NAME 也仅仅依赖于部分主键 AUTHOR_ID，违背了第二范式 。解决的办法依然是拆分，把这个可以独立被依赖的部分主键拿出去，上面的表可以拆成下面这样两张表：</span></span></span> 
</div> <div class="se-91ed7888" data-slate-type="image" data-slate-object="block" data-key="499"> 
<img class="se-fea73ba2" src="https://static001.geekbang.org/resource/image/9d/cb/9d6f9f22b2b5feab01cd6ea1de9582cb.jpg"> 
</div> <div class="se-0753e8df" data-slate-type="image" data-slate-object="block" data-key="500"> 
<img class="se-f104e218" src="https://static001.geekbang.org/resource/image/98/c3/9874e9af23ebd64c5278654a78cfacc3.jpg"> 
</div> <div class="se-99ac8501 " data-slate-type="paragraph" data-slate-object="block" data-key="501"> 
<span data-slate-object="text" data-key="502"><span data-slate-leaf="true" data-offset-key="502:0" 
data-first-offset="true"><span data-slate-string="true">从这个拆分中我们也可以看到，原表被拆成了 N 对 1 关系的两个表，而被不合范式依赖的那个“部分主键”，变成了“1”这头的主键。</span></span></span> 
</div> <div class="se-1530cf40 " data-slate-type="paragraph" data-slate-object="block" data-key="503"> 
<span data-slate-object="text" data-key="504"><span data-slate-leaf="true" data-offset-key="504:0" 
data-first-offset="true"><span class="se-161efc41" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 第三范式（3 NF）</span></span></span></span> </div> <div class="se-31b179f4 
" data-slate-type="paragraph" data-slate-object="block" data-key="505"> <span data-slate-object="text" 
data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" data-first-offset="true"><span 
class="se-a3a9814f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">第三范式要求去除非主属性的传递依赖。</span></span></span></span><span 
data-slate-object="text" data-key="507"><span data-slate-leaf="true" data-offset-key="507:0" 
data-first-offset="true"><span data-slate-string="true">即在第二范式的基础上，非主属性必须直接依赖于主键，而不能传递依赖于主键。</span></span></span> 
</div> <div class="se-2ad5ef85" data-slate-type="image" data-slate-object="block" data-key="508"> 
<img class="se-5df8d228" src="https://static001.geekbang.org/resource/image/88/29/889a89fd92fab3a818aae622f3655e29.jpg"> 
</div> <div class="se-b75bf620 " data-slate-type="paragraph" data-slate-object="block" data-key="509"> 
<span data-slate-object="text" data-key="510"><span data-slate-leaf="true" data-offset-key="510:0" 
data-first-offset="true"><span data-slate-string="true">你看上面这张表，主键是 BOOK_ID，而 CATEGORY_ID 是非关键字段，并非直接依赖于主键，而是通过这样的传递依赖：</span></span></span> 
</div> <div class="se-abef622b" data-slate-type="block-quote" data-slate-object="block" data-key="511"> 
<div class="se-62ca44c0" data-slate-type="quote-line" data-slate-object="block" data-key="512"> 
<span data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">CATEGORY_NAME → CATEGORY_ID → BOOK_ID</span></span></span> 
</div> </div> <div class="se-591fbfd7 " data-slate-type="paragraph" data-slate-object="block" 
data-key="514"> <span data-slate-object="text" data-key="515"><span data-slate-leaf="true" 
data-offset-key="515:0" data-first-offset="true"><span data-slate-string="true">因此，为了消除这个传递依赖，我们还是拆表，让这个传递链中间的非关键字段自立门户：</span></span></span> 
</div> <div class="se-34354de5" data-slate-type="image" data-slate-object="block" data-key="516"> 
<img class="se-cd6306d9" src="https://static001.geekbang.org/resource/image/ec/4f/ec8cb2f6b80835e76d0631dcd1fe764f.jpg"> 
</div> <div class="se-193ae5bc" data-slate-type="image" data-slate-object="block" data-key="517"> 
<img class="se-c85a8824" src="https://static001.geekbang.org/resource/image/73/51/73c47a542f083d6b372056588dc10551.jpg"> 
</div> <div class="se-e35cee36 " data-slate-type="paragraph" data-slate-object="block" data-key="518"> 
<span data-slate-object="text" data-key="519"><span data-slate-leaf="true" data-offset-key="519:0" 
data-first-offset="true"><span data-slate-string="true">一般我们在设计中分析到第三范式就打住了，很少有情况会考虑更为严格的范式。例如，BC 
范式和第三范式就很像，但是，第三范式只是消除了非主属性对主属性的传递依赖，而 BC 范式更进一步，要求消除主属性对主属性的传递依赖，从而，消除所有属性对主属性的传递依赖。</span></span></span> 
</div> <div class="se-ba489f11 " data-slate-type="paragraph" data-slate-object="block" data-key="520"> 
<span data-slate-object="text" data-key="521"><span data-slate-leaf="true" data-offset-key="521:0" 
data-first-offset="true"><span data-slate-string="true">当然，还有第四、第五范式等等，要求更加严格，解耦更加彻底，但却不太常用了，如果你想进一步了解，可以参阅维基百科的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="522" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="523"><span data-slate-leaf="true" data-offset-key="523:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="524"><span data-slate-leaf="true" data-offset-key="524:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-45d68fc3 " data-slate-type="paragraph" 
data-slate-object="block" data-key="525"> <span data-slate-object="text" data-key="526"><span 
data-slate-leaf="true" data-offset-key="526:0" data-first-offset="true"><span data-slate-string="true">范式的程度更高，冗余度便更低。但正如同我们在第二章介绍的“拆分”大法一样，每一次范式的升级都意味着一个拆表的过程，一旦过度解耦，拆分出太多零散的表，对于程序员的理解，脑海中数据模型的建立，甚至包括联表操作的 
I/O 性能，都是不利的。因此我们需要“权衡”，掌握好这个度，</span></span></span><span data-slate-object="text" data-key="527"><span 
data-slate-leaf="true" data-offset-key="527:0" data-first-offset="true"><span class="se-a9197cbc" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这一原则，和我们介绍过的分层设计是一致的。</span></span></span></span> 
</div> <h2 class="se-c21a1d6a" data-slate-type="heading" data-slate-object="block" data-key="528"><span 
data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL</span></span></span></h2> <div 
class="se-86fbcce6 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中，我已经介绍了 NoSQL 的概念。在 NoSQL 出现以前，设计大型网站等 
Web 应用的时候，全栈工程师的武器库里可供使用的选择，要局限得多。尤其是对一些量大且非结构化的数据，缺乏特别理想的解决方法，工程师有时不得不采用一些非常规的特殊方案，而更多时候我们只能在传统关系数据库的基础上，使用数据库的 
Sharding 和 Partition 这样的操作。</span></span></span> </div> <div class="se-a372041d " data-slate-type="paragraph" 
data-slate-object="block" data-key="532"> <span data-slate-object="text" data-key="533"><span 
data-slate-leaf="true" data-offset-key="533:0" data-first-offset="true"><span data-slate-string="true">虽然那时候在数据规模上面临的挑战远没有现在大，可那个时候 
DBA（Database Administrator）在市场上可以说是炙手可热，一旦出了问题，有时甚至还得请专门的数据库厂商的专家，这其中的费用极其高昂，是以分钟计算的。</span></span></span> 
</div> <div class="se-202d657f " data-slate-type="paragraph" data-slate-object="block" data-key="534"> 
<span data-slate-object="text" data-key="535"><span data-slate-leaf="true" data-offset-key="535:0" 
data-first-offset="true"><span data-slate-string="true">如今，你可能听说过许多互联网企业去 IOE 的故事（IOE 指的是 IBM 
的小型机、Oracle 数据库、EMC 存储设备这三者），其中阿里巴巴的版本听起来还颇为传奇。事实上，这可不只是只有国内的阿里巴巴曾经努力做的事情，还是全球许多大型互联网企业都曾经或正在做的事情，也包括 
Amazon。我曾经在 Amazon 的销量预测团队中工作，当时我们团队可以说就在整个亚马逊最大的传统（非云上）关系数据库上工作，里面存放了全部商品库存、销量等有关的信息。</span></span></span> 
</div> <div class="se-24eea97f " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">Web 2.0 时代的到来，为互联网应用带来了深远的影响，</span></span></span><span 
data-slate-object="text" data-key="538"><span data-slate-leaf="true" data-offset-key="538:0" 
data-first-offset="true"><span class="se-3edd519e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">用户代替传统媒体，成为了 Web 2.0 时代主要的数据制造者。海量、不定结构、弱关联关系、高可用性和低一致性要求的数据特点，让关系数据库力不从心；而 
NoSQL 则具有更好的横向扩展性、海量数据支持、易维护和廉价等等优势，犹如一剂特效药，成为了市场上这个数据难题的大杀器。</span></span></span></span> </div> 
<div class="se-3de9d264 " data-slate-type="paragraph" data-slate-object="block" data-key="539"> 
<span data-slate-object="text" data-key="540"><span data-slate-leaf="true" data-offset-key="540:0" 
data-first-offset="true"><span data-slate-string="true">当然，现实中依然存在大量需要强一致性和关系查询的业务场景，因此关系数据库依然是我们倚赖的重要工具。可是，</span></span></span><span 
data-slate-object="text" data-key="541"><span data-slate-leaf="true" data-offset-key="541:0" 
data-first-offset="true"><span class="se-72b7de94" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">依然使用关系数据库并不代表依然靠互联网企业自己亲力亲为地做繁重的数据库管理工作</span></span></span></span><span 
data-slate-object="text" data-key="542"><span data-slate-leaf="true" data-offset-key="542:0" 
data-first-offset="true"><span data-slate-string="true">，关系数据库云服务的崛起将传统的数据库管理工作自动化，于是普通的软件工程师也可以完成以往 
DBA 才能完成的工作了。从这里也能看出，DBA 也确实是一个技术变更影响技术人才市场需求的典型例子。</span></span></span> </div> <div class="se-3fb47d43 
" data-slate-type="paragraph" data-slate-object="block" data-key="543"> <span data-slate-object="text" 
data-key="544"><span data-slate-leaf="true" data-offset-key="544:0" data-first-offset="true"><span 
data-slate-string="true">综上，这个数据的问题就有了两个层次的解决方案：</span></span></span> </div> <div class="se-0f6e180b" 
data-slate-type="list" data-slate-object="block" data-key="545"> <div class="se-eed21a15 se-351625cf" 
data-slate-type="list-line" data-slate-object="block" data-key="546"> <span data-slate-object="text" 
data-key="547"><span data-slate-leaf="true" data-offset-key="547:0" data-first-offset="true"><span 
data-slate-string="true">出现了更适合业务的非关系数据库服务，也就是 NoSQL；</span></span></span> </div> <div class="se-84132874 
se-55764645" data-slate-type="list-line" data-slate-object="block" data-key="548"> <span data-slate-object="text" 
data-key="549"><span data-slate-leaf="true" data-offset-key="549:0" data-first-offset="true"><span 
data-slate-string="true">把关系数据库搬到云上，从而让互联网企业从繁重的数据库管理工作中解脱出来，例如 RDS。</span></span></span> </div> 
</div> <h3 class="se-77a017c4" data-slate-type="heading" data-slate-object="block" data-key="550"><span 
data-slate-object="text" data-key="551"><span data-slate-leaf="true" data-offset-key="551:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL 数据库的分类</span></span></span></h3> 
<div class="se-aa8e2306 " data-slate-type="paragraph" data-slate-object="block" data-key="552"> 
<span data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span data-slate-string="true">别看 NoSQL 的数据库那么多，它们大致可以被分为这样几类，每一类也都有自己的优势和劣势。在介绍每一类的时候，我会以我比较熟悉的 
AWS 上的实现来具体介绍，当然，很可能你见过的是其它的例子（比如非云上的本地版本，再比如不同的云服务厂商都会提供自己的实现），但在原理层面都是类似的。</span></span></span> 
</div> <div class="se-421ee8bf " data-slate-type="paragraph" data-slate-object="block" data-key="554"> 
<span data-slate-object="text" data-key="555"><span data-slate-leaf="true" data-offset-key="555:0" 
data-first-offset="true"><span class="se-31c1284b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">1. 键值（Key-value）数据库</span></span></span></span> </div> <div class="se-e9c7a7f4 
" data-slate-type="paragraph" data-slate-object="block" data-key="556"> <span data-slate-object="text" 
data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" data-first-offset="true"><span 
data-slate-string="true">这一类 NoSQL 的数据库，采用的是 key-value 这样的访问模型，也就是说，可以根据一个唯一的 key 来获取所需要的值，这个 
key 被称为主键，而这个根据 key 来获取 value 的访问的过程是通过 Hash 算法来实现的。本地的 Redis 或者云上的 DynamoDB 都属于这一类。</span></span></span> 
</div> <div class="se-2a36e0a1 " data-slate-type="paragraph" data-slate-object="block" data-key="558"> 
<span data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span data-slate-string="true">以 DynamoDB 为例，它的 key 由 Partition Key 
和 Sort Key 两级组成，即前者用来找到数据存在哪一个存储单元（Storage Unit），而后者用来找到 value 在存储单元上的具体位置。通常来说，这个二级 Hash 的过程时间开销并不会随着数据量的增大而增大，下图来自</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="560" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="561"><span data-slate-leaf="true" data-offset-key="561:0" 
data-first-offset="true"><span data-slate-string="true">官方的 Blog</span></span></span></a><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-dd1fb50f" data-slate-type="image" data-slate-object="block" data-key="563"> <img 
class="se-cc46a08c" src="https://static001.geekbang.org/resource/image/6e/b3/6e087df74ef924619966e74fdcd0f5b3.jpg"> 
</div> <div class="se-25f12bab " data-slate-type="paragraph" data-slate-object="block" data-key="564"> 
<span data-slate-object="text" data-key="565"><span data-slate-leaf="true" data-offset-key="565:0" 
data-first-offset="true"><span data-slate-string="true">DynamoDB 表结构看起来和传统的关系数据库有些像，并且每一行的 
schema 可以完全不同，即“列”可以是任意的。每张表的数据支持有限的范围查询，包括主键的范围查询，以及索引列的范围查询。其中，索引的数量是有着明确限制的，一种是全局的（相当于 Partition 
Key + Sort Key），每张表上限 20 个；一种是本地的（相当于 Partition Key 已经确定，只通过 Sort Key 索引），每张表上限 5 个。</span></span></span> 
</div> <div class="se-ec5b7687 " data-slate-type="paragraph" data-slate-object="block" data-key="566"> 
<span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span class="se-34c1e2fc" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">2. 列式（Columnar）数据库</span></span></span></span> </div> <div class="se-9a4e72eb 
" data-slate-type="paragraph" data-slate-object="block" data-key="568"> <span data-slate-object="text" 
data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span 
data-slate-string="true">经典的数据库是面向行的，即数据在存储的时候，每一行的数据是放在一起的，这样数据库在读取磁盘上连续数据的时候，实际每次可以一气读取若干行。如果需要完整地查询出特定某些行的数据，行数据库是高效的。且看下面的示例，来自 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="570" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="571"><span data-slate-leaf="true" data-offset-key="571:0" 
data-first-offset="true"><span data-slate-string="true">Redshift 官方文档</span></span></span></a><span 
data-slate-object="text" data-key="572"><span data-slate-leaf="true" data-offset-key="572:0" 
data-first-offset="true"><span data-slate-string="true">：</span></span></span> </div> <div 
class="se-9616fb84" data-slate-type="image" data-slate-object="block" data-key="573"> <img 
class="se-6ff49b22" src="https://static001.geekbang.org/resource/image/b1/1b/b1a304f40d3d8f006a3a1e79f663af1b.jpg"> 
</div> <div class="se-92252cc5 " data-slate-type="paragraph" data-slate-object="block" data-key="574"> 
<span data-slate-object="text" data-key="575"><span data-slate-leaf="true" data-offset-key="575:0" 
data-first-offset="true"><span data-slate-string="true">但是列式数据库不一样，它是将每一列的数据放在一起。这样的话，如果我们的处理逻辑是要求取出所有数据中的特定列，那么列数据库就是更好的选择：</span></span></span> 
</div> <div class="se-3b801bbd" data-slate-type="image" data-slate-object="block" data-key="576"> 
<img class="se-98bf94ad" src="https://static001.geekbang.org/resource/image/68/0a/6827c62314d7a7dc40053a8d1ea7aa0a.jpg"> 
</div> <div class="se-7735f5f9 " data-slate-type="paragraph" data-slate-object="block" data-key="577"> 
<span data-slate-object="text" data-key="578"><span data-slate-leaf="true" data-offset-key="578:0" 
data-first-offset="true"><span data-slate-string="true">事实上，对于数据库来说，磁盘的读、写本身，往往还不是最慢的，最慢的是寻址操作。因此，无论是行数据库还是列数据库，如果根据实际需要，我们的实际访问能够从随机访问变成顺序访问，那么就可以极大地提高效率。在大数据处理中经常使用的 
HBase 和云上的 Redshift 都属于这一类。</span></span></span> </div> <div class="se-e50a9e7b " data-slate-type="paragraph" 
data-slate-object="block" data-key="579"> <span data-slate-object="text" data-key="580"><span 
data-slate-leaf="true" data-offset-key="580:0" data-first-offset="true"><span data-slate-string="true">和行数据库相比，列数据库还有一些其它的好处。比如说，对于很多数据来说，某一个特定列都是满足某种特定的格式的，那么列数据库就可以根据这种格式来执行特定的压缩操作。</span></span></span> 
</div> <div class="se-3e89d77d " data-slate-type="paragraph" data-slate-object="block" data-key="581"> 
<span data-slate-object="text" data-key="582"><span data-slate-leaf="true" data-offset-key="582:0" 
data-first-offset="true"><span class="se-9a05d129" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">3. 文档（Document）数据库</span></span></span></span> </div> <div class="se-752a59f9 
" data-slate-type="paragraph" data-slate-object="block" data-key="583"> <span data-slate-object="text" 
data-key="584"><span data-slate-leaf="true" data-offset-key="584:0" data-first-offset="true"><span 
data-slate-string="true">文档数据库是前面提到的键值数据库的演化版，值是以某一种特定的文档格式来存储的，比如 JSON、XML 等等。也就是说，文档携带的数据，是已经指定了既定的编码、格式等等信息的。某一些文档数据库针对文档的特点，提供了对于文档内容查询的功能，这是比原始的键值数据库功能上强大的地方。本地的 
MongoDB 和 AWS 上的 DocumentDB 都属于这个类型。</span></span></span> </div> <div class="se-8ef37fd3 " 
data-slate-type="paragraph" data-slate-object="block" data-key="585"> <span data-slate-object="text" 
data-key="586"><span data-slate-leaf="true" data-offset-key="586:0" data-first-offset="true"><span 
class="se-040c6cd9" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">4. 
对象（Object）数据库</span></span></span></span> </div> <div class="se-b3c59eb0 " data-slate-type="paragraph" 
data-slate-object="block" data-key="587"> <span data-slate-object="text" data-key="588"><span 
data-slate-leaf="true" data-offset-key="588:0" data-first-offset="true"><span data-slate-string="true">和上面介绍的文档数据库类似，当 
value 变成一个可序列化的对象，特别是一个大对象的时候，它就被归类为对象数据库了。AWS 上最常用的 NoSQL 存储，除了前面介绍过的 DynamoDB，就是 S3 了，它相对成本更为低廉，耐久性（durability，数据不丢失的级别）非常高（达到了 
11 个 9），并且存储对象可以很大，因此用户经常把它当做一个“文件系统”来存放各种类型的文件，而把 key 设计成操作系统文件路径这样一级一级的形式，S3 也就被称为“文件系统”。但是，实际上 
S3 的“文件”还是和我们所熟悉的操作系统的文件系统有着很大的区别。</span></span></span> </div> <div class="se-0ccbabbf " data-slate-type="paragraph" 
data-slate-object="block" data-key="589"> <span data-slate-object="text" data-key="590"><span 
data-slate-leaf="true" data-offset-key="590:0" data-first-offset="true"><span data-slate-string="true">当然，还有一些其它的类型，包括图形（Graph）数据库、搜索（Search）数据库等等，我就不一一列举了。</span></span></span> 
</div> <h2 class="se-6c4fb3c0" data-slate-type="heading" data-slate-object="block" data-key="591"><span 
data-slate-object="text" data-key="592"><span data-slate-leaf="true" data-offset-key="592:0" 
data-first-offset="true"><span data-slate-string="true">演进趋势</span></span></span></h2> <div 
class="se-23780c79 " data-slate-type="paragraph" data-slate-object="block" data-key="593"> 
<span data-slate-object="text" data-key="594"><span data-slate-leaf="true" data-offset-key="594:0" 
data-first-offset="true"><span data-slate-string="true">我们在这一章已经从一致性、可用性等方面了解了关系数据库和非关系数据库各自的优势，我想，对这两方面，你应该已经有了自己的认识。现在，我想再补充两个角度，让比较更为全面，分别是扩展性和数据的结构性，我们一起来看看持久层的存储技术的演进趋势。</span></span></span> 
</div> <h3 class="se-addbc312" data-slate-type="heading" data-slate-object="block" data-key="595"><span 
data-slate-object="text" data-key="596"><span data-slate-leaf="true" data-offset-key="596:0" 
data-first-offset="true"><span data-slate-string="true">1. 从 Scale Up 到 Scale Out</span></span></span></h3> 
<div class="se-4c9105fc " data-slate-type="paragraph" data-slate-object="block" data-key="597"> 
<span data-slate-object="text" data-key="598"><span data-slate-leaf="true" data-offset-key="598:0" 
data-first-offset="true"><span data-slate-string="true">先回顾一下“扩展性”（Scalability，也有翻译为“伸缩性”的）这个概念。</span></span></span> 
</div> <div class="se-3b7f4385 " data-slate-type="paragraph" data-slate-object="block" data-key="599"> 
<span data-slate-object="text" data-key="600"><span data-slate-leaf="true" data-offset-key="600:0" 
data-first-offset="true"><span data-slate-string="true">按理说，扩展性是包括“纵向（垂直）扩展”和“横向（水平）扩展”的。当然，如今使用这个词的时候，我们往往特指的是“Scale 
Out”，也就是横向扩展，说白了，就是通过在同一层上增加硬件资源的方式来增加扩展性，从而提高系统的吞吐量或容量。比如说，增加机器。NoSQL 技术往往具备很强的横向扩展能力，至于其中的一个典型原理，你可以回顾一下 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="601" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="602"><span data-slate-leaf="true" data-offset-key="602:0" 
data-first-offset="true"><span data-slate-string="true">[第 23 讲]</span></span></span></a><span 
data-slate-object="text" data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" 
data-first-offset="true"><span data-slate-string="true"> 的选修课堂“一致性哈希”，你就会明白，为什么 NoSQL 技术可以很方便地在同一层增加硬件资源了。</span></span></span> 
</div> <div class="se-fd8b8955 " data-slate-type="paragraph" data-slate-object="block" data-key="604"> 
<span data-slate-object="text" data-key="605"><span data-slate-leaf="true" data-offset-key="605:0" 
data-first-offset="true"><span data-slate-string="true">可是，你知道吗，在很早以前，人们谈“扩展性”的时候，默认指的却是“Scale 
Up”。它指的是在硬件设施数量不变的基础上，通过增加单个硬件设施的性能和容量来达到同样的“扩展”目的。比如说，把同一台机器的 CPU 换成更好的，把内存升级，把磁盘换成容量更大的，等等。毕竟，在那时候，程序员对于很多问题的思考都还普遍停留在“单机”的层面上。</span></span></span> 
</div> <div class="se-6d8bad39 " data-slate-type="paragraph" data-slate-object="block" data-key="606"> 
<span data-slate-object="text" data-key="607"><span data-slate-leaf="true" data-offset-key="607:0" 
data-first-offset="true"><span data-slate-string="true">为什么横向扩展如此重要，以至于成为了“扩展性”的默认指代？</span></span></span> 
</div> <div class="se-0b92dd20 " data-slate-type="paragraph" data-slate-object="block" data-key="608"> 
<span data-slate-object="text" data-key="609"><span data-slate-leaf="true" data-offset-key="609:0" 
data-first-offset="true"><span data-slate-string="true">原因很简单，单个硬件设施的性能提升是非常有限的，而且极其昂贵。我记得我刚工作那会儿，去国内某电信运营商开局，众所周知他们“不差钱”，为了提升性能，我们做了很多 
Scale Up 的工作，包括把 CPU 升级成了 96 核的。可是你看看现在的互联网公司，哪个会这么玩？因此在现实中，多数情况下，扩容这件事情上，Scale Out 是唯一的选择。</span></span></span> 
</div> <h3 class="se-fd8b403e" data-slate-type="heading" data-slate-object="block" data-key="610"><span 
data-slate-object="text" data-key="611"><span data-slate-leaf="true" data-offset-key="611:0" 
data-first-offset="true"><span data-slate-string="true">2. 从结构化数据到非结构化数据</span></span></span></h3> 
<div class="se-b01a5ffa " data-slate-type="paragraph" data-slate-object="block" data-key="612"> 
<span data-slate-object="text" data-key="613"><span data-slate-leaf="true" data-offset-key="613:0" 
data-first-offset="true"><span data-slate-string="true">我们使用关系数据库的时候，每一行数据都是严格符合表结构的定义，有多少列，每一列的类型是什么，等等，我们把这类数据叫做“结构化”（structured）数据，而这个确定的“结构”，就是 
schema。结构化的数据具备最佳的查询、校验和关联能力。</span></span></span> </div> <div class="se-95489a06 " data-slate-type="paragraph" 
data-slate-object="block" data-key="614"> <span data-slate-object="text" data-key="615"><span 
data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span data-slate-string="true">但是当我们使用 
DynamoDB 这样的 NoSQL 数据库的时候，我们发现，每一行数据依然可以分成一列一列的，但是有多少列，或者每一列的类型，或者表示的具体含义，却变得不再固定了。这时候我们说，这样的结构依然存在，但是共通的部分明显比结构化数据少多了，于是我们把它们叫做“半结构化”（semi-structured）的数据。</span></span></span> 
</div> <div class="se-7ef3952a " data-slate-type="paragraph" data-slate-object="block" data-key="616"> 
<span data-slate-object="text" data-key="617"><span data-slate-leaf="true" data-offset-key="617:0" 
data-first-offset="true"><span data-slate-string="true">再一般化，就是“非结构化”（non-structured）数据了，上面说的 
S3 就是一个很好的例子。即便 S3 上存储的文件是符合某种结构的（比如 JSON），我们也无法利用这个存储服务来完成依据结构而进行的查询等等操作了。</span></span></span> 
</div> <div class="se-3f523c6d " data-slate-type="paragraph" data-slate-object="block" data-key="618"> 
<span data-slate-object="text" data-key="619"><span data-slate-leaf="true" data-offset-key="619:0" 
data-first-offset="true"><span data-slate-string="true">无论是同步还是异步的数据处理，我们总是希望数据的结构性越强越好，因为“结构”本质上意味着“规则”，越强的结构，就越容易使用简单直白的代码逻辑去处理。可是，恰恰相反的是，</span></span></span><span 
data-slate-object="text" data-key="620"><span data-slate-leaf="true" data-offset-key="620:0" 
data-first-offset="true"><span class="se-28c9c7a4" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">我们在现实中遇到的绝大多数的数据，都是非结构化的</span></span></span></span><span data-slate-object="text" 
data-key="621"><span data-slate-leaf="true" data-offset-key="621:0" data-first-offset="true"><span 
data-slate-string="true">，或者说，很难用某一种特定的规则去套。</span></span></span> </div> <h2 class="se-1cd0b8d2" 
data-slate-type="heading" data-slate-object="block" data-key="622"><span data-slate-object="text" 
data-key="623"><span data-slate-leaf="true" data-offset-key="623:0" data-first-offset="true"><span 
data-slate-string="true">总结思考</span></span></span></h2> <div class="se-be664b45 " data-slate-type="paragraph" 
data-slate-object="block" data-key="624"> <span data-slate-object="text" data-key="625"><span 
data-slate-leaf="true" data-offset-key="625:0" data-first-offset="true"><span data-slate-string="true">今天我们从不同角度学习了关系数据库和非关系数据库，掌握了一些存储设计的原理和技巧，希望你可以将内容慢慢消化。</span></span></span> 
</div> <div class="se-e5a431b2 " data-slate-type="paragraph" data-slate-object="block" data-key="626"> 
<span data-slate-object="text" data-key="627"><span data-slate-leaf="true" data-offset-key="627:0" 
data-first-offset="true"><span data-slate-string="true">下面是今天的提问环节了，我想换个形式。</span></span></span> 
</div> <div class="se-84de571d " data-slate-type="paragraph" data-slate-object="block" data-key="628"> 
<span data-slate-object="text" data-key="629"><span data-slate-leaf="true" data-offset-key="629:0" 
data-first-offset="true"><span data-slate-string="true">我们已经学习了几种常见的数据库范式，下面这张图书馆用户表的数据库表的设计是不合理的，你觉得它满足了第几范式呢？并且，你能不能通过学到的拆分方法，分析一下它的问题，把它进一步优化，消除冗余呢？</span></span></span> 
</div> <div class="se-30048552" data-slate-type="image" data-slate-object="block" data-key="630"> 
<img class="se-69cd6a0b" src="https://static001.geekbang.org/resource/image/7a/27/7a609fd55a0882a88a95a1dc43fc9c27.jpg"> 
</div> <div class="se-eb54cec2 " data-slate-type="paragraph" data-slate-object="block" data-key="631"> 
<span data-slate-object="text" data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" 
data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里。如果有思考、有问题，欢迎在留言区发言，我们一起讨论。</span></span></span> 
</div> <h2 class="se-e52599c0" data-slate-type="heading" data-slate-object="block" data-key="633"><span 
data-slate-object="text" data-key="634"><span data-slate-leaf="true" data-offset-key="634:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-ac4c6aff" data-slate-type="list" data-slate-object="block" data-key="635"> <div class="se-0749ff05 
se-38c26b52" data-slate-type="list-line" data-slate-object="block" data-key="636"> <span data-slate-object="text" 
data-key="637"><span data-slate-leaf="true" data-offset-key="637:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了 Web 2.0 的概念，我推荐你阅读 Web 2.0 的</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="638" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="639"><span data-slate-leaf="true" data-offset-key="639:0" data-first-offset="true"><span 
data-slate-string="true">维基百科词条</span></span></span></a><span data-slate-object="text" data-key="640"><span 
data-slate-leaf="true" data-offset-key="640:0" data-first-offset="true"><span data-slate-string="true">，以及 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="641" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="642"><span data-slate-leaf="true" data-offset-key="642:0" 
data-first-offset="true"><span data-slate-string="true">Web 2.0 网站的九个特点</span></span></span></a><span 
data-slate-object="text" data-key="643"><span data-slate-leaf="true" data-offset-key="643:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章，以对它有一个明确的认识。</span></span></span> 
</div> <div class="se-9e189aa0 se-3f8e64d4" data-slate-type="list-line" data-slate-object="block" 
data-key="644"> <span data-slate-object="text" data-key="645"><span data-slate-leaf="true" 
data-offset-key="645:0" data-first-offset="true"><span data-slate-string="true">对于 NoSQL 的一些特定的术语，以及数据库的分类和比较，推荐你阅读这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="646" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">什么是 NoSQL？</span></span></span></a> 
</div> <div class="se-c89c117b se-dbef1a4e" data-slate-type="list-line" data-slate-object="block" 
data-key="648"> <span data-slate-object="text" data-key="649"><span data-slate-leaf="true" 
data-offset-key="649:0" data-first-offset="true"><span data-slate-string="true">文中介绍了去 IOE 
的事儿，正好 Amazon 最近宣称他们正式完成了从 Oracle 关系数据库迁移离开的工作，感兴趣的话可以</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="650" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="651"><span data-slate-leaf="true" data-offset-key="651:0" data-first-offset="true"><span 
data-slate-string="true">看一看</span></span></span></a><span data-slate-object="text" data-key="652"><span 
data-slate-leaf="true" data-offset-key="652:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-134e68ec se-eca9ebf2" data-slate-type="list-line" data-slate-object="block" 
data-key="653"> <span data-slate-object="text" data-key="654"><span data-slate-leaf="true" 
data-offset-key="654:0" data-first-offset="true"><span data-slate-string="true">对于分布式存储感兴趣，并且阅读能力还可以的话，有一些经典论文可以是进一步学习的对象，但请注意它们不是我们这个阶段或当前学习周期内需要学习的内容。比如 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="655" class="se-6b9cf0a6 
se-ecf2599b"><span data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">Dynamo: Amazon’s Highly Available Key-value 
Store</span></span></span></a><span data-slate-object="text" data-key="657"><span data-slate-leaf="true" 
data-offset-key="657:0" data-first-offset="true"><span data-slate-string="true"> 这篇，中文译文可以</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="658" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="659"><span data-slate-leaf="true" data-offset-key="659:0" 
data-first-offset="true"><span data-slate-string="true">参考这篇</span></span></span></a><span 
data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span data-slate-string="true">，它影响了后来很多分布式系统的设计和发展，我几年前也学习并写了一些</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="661" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" 
data-first-offset="true"><span data-slate-string="true">自己的理解</span></span></span></a><span 
data-slate-object="text" data-key="663"><span data-slate-leaf="true" data-offset-key="663:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-c5065b2e se-aa0fb418" data-slate-type="list-line" data-slate-object="block" data-key="664"> 
<span data-slate-object="text" data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" 
data-first-offset="true"><span data-slate-string="true">再就是 Google 著名的“三驾马车”了，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="666" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="667"><span data-slate-leaf="true" data-offset-key="667:0" 
data-first-offset="true"><span data-slate-string="true">GFS</span></span></span></a><span data-slate-object="text" 
data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" data-first-offset="true"><span 
data-slate-string="true">（</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="669" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" data-key="670"><span 
data-slate-leaf="true" data-offset-key="670:0" data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" 
data-first-offset="true"><span data-slate-string="true">），</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="672" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" data-first-offset="true"><span 
data-slate-string="true">MapReduce</span></span></span></a><span data-slate-object="text" data-key="674"><span 
data-slate-leaf="true" data-offset-key="674:0" data-first-offset="true"><span data-slate-string="true">（</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="675" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="676"><span data-slate-leaf="true" data-offset-key="676:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="677"><span data-slate-leaf="true" data-offset-key="677:0" 
data-first-offset="true"><span data-slate-string="true">） 和 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="678" class="se-6b9cf0a6 se-ecf2599b"><span data-slate-object="text" 
data-key="679"><span data-slate-leaf="true" data-offset-key="679:0" data-first-offset="true"><span 
data-slate-string="true">BigTable</span></span></span></a><span data-slate-object="text" data-key="680"><span 
data-slate-leaf="true" data-offset-key="680:0" data-first-offset="true"><span data-slate-string="true">（</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="681" class="se-6b9cf0a6 se-ecf2599b"><span 
data-slate-object="text" data-key="682"><span data-slate-leaf="true" data-offset-key="682:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">）。我仅仅把它们放在这里，只是供感兴趣且有一定论文阅读能力的程序员朋友参考，而对于本专栏全栈的学习来说，不接触它们是完全没问题的。</span></span></span> 
</div> </div> <div class="se-08281a2d" data-slate-type="image" data-slate-object="block" data-key="684"> 
<img class="se-135dc37d" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 1 msec}
2020-11-19 11:13:06.460 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=22 
 {executed in 0 msec}
2020-11-19 11:13:06.461 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:13:06.462 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=22 
 {executed in 0 msec}
2020-11-19 11:13:06.462 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:13:06.463 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755586, 1605755586, 1, 'zh-hans', 0, 1, 1, 
0, '25丨设计数据持久层（上）：理论分析', 1, 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.467 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=22 
 {executed in 0 msec}
2020-11-19 11:13:06.468 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:13:06.469 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755586, 1605755586, 1, 'zh-hans', 0, 
1, 1, 0, '25丨设计数据持久层（上）：理论分析', 'book', 1, 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.472 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.473 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:06.473 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.474 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:06.475 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/fbab08d74cc6169a57381ff4259c74bf?bkt=en-06f5c65000af0ed616ce60e50ed3f9062db5915337bac64871a94498f4e0d80f09738bd10e6f9f3d&fid=3757516097-778750-895344502640512&time=1605755585&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-qAj%2F%2FFWg%2BOuRdfF8WeQGIcfm3PA%3D&to=92&size=15689341&sta_dx=15689341&sta_cs=3365&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482219&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15689341&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6ac6e7505f6f224eb450b795cdcd62bef110b77f49969dcf26b067fb0f2048eb50b666e8ee84c8f0&sl=76480590&expires=8h&rt=pr&r=137199328&mlogid=7502122666148805039&vbdid=2247232042&fin=25%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90.m4a&bflag=92,34-92&rtype=1&dp-logid=7502122666148805039&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=39965399e74cce845ee535e0c17f5077e432c6bc4c65cd14&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=25%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90.m4a', 
22, 22) 
 {executed in 1 msec}
2020-11-19 11:13:06.481 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.482 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:06.483 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/fbab08d74cc6169a57381ff4259c74bf?bkt=en-06f5c65000af0ed616ce60e50ed3f9062db5915337bac64871a94498f4e0d80f09738bd10e6f9f3d&fid=3757516097-778750-895344502640512&time=1605755585&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-qAj%2F%2FFWg%2BOuRdfF8WeQGIcfm3PA%3D&to=92&size=15689341&sta_dx=15689341&sta_cs=3365&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1573482219&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=15689341&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6ac6e7505f6f224eb450b795cdcd62bef110b77f49969dcf26b067fb0f2048eb50b666e8ee84c8f0&sl=76480590&expires=8h&rt=pr&r=137199328&mlogid=7502122666148805039&vbdid=2247232042&fin=25%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90.m4a&bflag=92,34-92&rtype=1&dp-logid=7502122666148805039&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=39965399e74cce845ee535e0c17f5077e432c6bc4c65cd14&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=25%E4%B8%A8%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90.m4a', 
22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.487 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 11:13:06.487 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:06.488 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.488 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:06.492 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>Middleware</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-07 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 如果设计的话，可能差分成四张表 <br>1：用户表（用户id、用户名） <br>2：图书表（图片编号、图书名称） 
<br>3：借阅表（图书编号、用户编号、借阅时间） <br>4：归还表（图书编号、用户编号、归还时间） <br>当然实际情况字段可能不止这些 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
👍，如果没有特殊原因，借阅表和归还表可以合并。</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span>1</span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-06 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 老师的扩展阅读确实不错：强化和补充了不少知识，对于进一步学习和提升以及真正掌握知识的这块还是蛮有用的；希望老师能在这个环节更好的分享一些东西，谢谢。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来回答今天的问题：其实问题非常典型-两张表的东西放在了一张表里。另外指出老师在提供表时所疏漏的一点，字段名没有注释，实际工作中字段名没有注释一律不让通过-生产系统想都不要想上；DBA会明确告诉开发，注释写好了再发过来。开发手上其实都是DBA给的相关要求，不达要求不要发过来，合规了才给上。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据字段名只能大致猜测：应当拆分成用户表和用户使用表。具体做法如下： <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）user_id、user_name作为用户基本信息表，当然这张表可能还会有一些其他的基本信息；如：phone 
手机号码 address 用户住址之类的等等信息； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）book_id,book_name,brrow_date,return_date作为用户借书表，这张表追加一个userid与用户基本信息表关联。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个应当是正确的设计方式：至于范式这块我就不解释了；正确的拆分我是给出了。范式的概念不光在表的设计有，索引的设计同样有；实践中修正久了就成习惯了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实键值数据库和文档数据库其中不少思想还是借鉴了关系型数据库，不然不会出现大量的no sql数据库支持类sql。基于sql 
的一些缺乏灵活性上的改变而已。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 👍，不过关于其中的 2) 拆分得不完整：把 borrow_date、return_date 
可以拆到另外一张借书关系表里面去，因为对于同一本书，book_name 这样的信息不应该出现超过一次：<br><br>图书信息表：<br>book_id / book_name<br><br>借书关系表：<br>book_id 
/ borrower_id / borrow_date / return_date</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> 
<div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class=""></span> </div> <!----> </div> </div> </div></li>', 
0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 3 msec}
2020-11-19 11:13:06.499 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.500 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:06.504 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>Middleware</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-07 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 如果设计的话，可能差分成四张表 <br>1：用户表（用户id、用户名） <br>2：图书表（图片编号、图书名称） 
<br>3：借阅表（图书编号、用户编号、借阅时间） <br>4：归还表（图书编号、用户编号、归还时间） <br>当然实际情况字段可能不止这些 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
👍，如果没有特殊原因，借阅表和归还表可以合并。</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span>1</span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>leslie</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-06 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 老师的扩展阅读确实不错：强化和补充了不少知识，对于进一步学习和提升以及真正掌握知识的这块还是蛮有用的；希望老师能在这个环节更好的分享一些东西，谢谢。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来回答今天的问题：其实问题非常典型-两张表的东西放在了一张表里。另外指出老师在提供表时所疏漏的一点，字段名没有注释，实际工作中字段名没有注释一律不让通过-生产系统想都不要想上；DBA会明确告诉开发，注释写好了再发过来。开发手上其实都是DBA给的相关要求，不达要求不要发过来，合规了才给上。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据字段名只能大致猜测：应当拆分成用户表和用户使用表。具体做法如下： <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）user_id、user_name作为用户基本信息表，当然这张表可能还会有一些其他的基本信息；如：phone 
手机号码 address 用户住址之类的等等信息； <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）book_id,book_name,brrow_date,return_date作为用户借书表，这张表追加一个userid与用户基本信息表关联。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个应当是正确的设计方式：至于范式这块我就不解释了；正确的拆分我是给出了。范式的概念不光在表的设计有，索引的设计同样有；实践中修正久了就成习惯了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实键值数据库和文档数据库其中不少思想还是借鉴了关系型数据库，不然不会出现大量的no sql数据库支持类sql。基于sql 
的一些缺乏灵活性上的改变而已。 </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> 
<div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 👍，不过关于其中的 2) 拆分得不完整：把 borrow_date、return_date 
可以拆到另外一张借书关系表里面去，因为对于同一本书，book_name 这样的信息不应该出现超过一次：<br><br>图书信息表：<br>book_id / book_name<br><br>借书关系表：<br>book_id 
/ borrower_id / borrow_date / return_date</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> 
<div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> 
<i class="iconfont"></i> <span class=""></span> </div> <!----> </div> </div> </div></li>', 
0, 'full_html', 'zh-hans', 22, 22) 
 {executed in 3 msec}
2020-11-19 11:13:06.511 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.512 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:06.513 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.513 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:06.514 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 22, 'https://static001.geekbang.org/resource/image/6b/ce/6b363fd4e755b2daa218b5f24341a2ce.jpg', 
22) 
 {executed in 0 msec}
2020-11-19 11:13:06.520 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=22 
 {executed in 1 msec}
2020-11-19 11:13:06.520 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:06.521 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 22, 'https://static001.geekbang.org/resource/image/6b/ce/6b363fd4e755b2daa218b5f24341a2ce.jpg', 
22) 
 {executed in 0 msec}
2020-11-19 11:13:06.524 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.525 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:13:06.526 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:06.529 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=22 
 {executed in 0 msec}
2020-11-19 11:13:06.530 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:13:06.531 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 22, 22) 
 {executed in 0 msec}
2020-11-19 11:13:56.387 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='11297792373936' 
 {executed in 4 msec}
2020-11-19 11:13:56.388 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:56.390 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755636, 1) 
 {executed in 1 msec}
2020-11-19 11:13:56.390 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755636, 1) 
 {executed in 0 msec}
2020-11-19 11:13:56.390 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|23            |
|--------------|

2020-11-19 11:13:56.396 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '09253b52-8bd8-4338-b876-e267745a7f56', 
23) 
 {executed in 1 msec}
2020-11-19 11:13:56.396 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '09253b52-8bd8-4338-b876-e267745a7f56', 23) 
 {executed in 0 msec}
2020-11-19 11:13:56.397 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|23            |
|--------------|

2020-11-19 11:13:56.402 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=23, revision_default=1, revision_timestamp=1605755636, 
revision_uid=1 where vid=23 
 {executed in 0 msec}
2020-11-19 11:13:56.404 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.405 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:56.407 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '11297792373936', 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 11:13:56.410 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.411 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:13:56.412 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '11297792373936', 'zh-hans', 23, 23) 
 {executed in 0 msec}
2020-11-19 11:13:56.416 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=23 
 {executed in 1 msec}
2020-11-19 11:13:56.416 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:13:56.417 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=23 
 {executed in 0 msec}
2020-11-19 11:13:56.418 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:13:56.420 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 23, 0, 0, 19, 0, 23) 
 {executed in 1 msec}
2020-11-19 11:13:56.423 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 11:13:56.423 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:56.424 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.425 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:56.429 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2016" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-8ffcd355 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2017"> <span data-slate-object="text" data-key="2018"><span data-slate-leaf="true" 
data-offset-key="2018:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-bb715cee " data-slate-type="paragraph" data-slate-object="block" data-key="2019"> 
<span data-slate-object="text" data-key="2020"><span data-slate-leaf="true" data-offset-key="2020:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中我们着重讲了持久层的一致性，其实，它是分布式系统的一个基础理论。你可能会问，学习基于 
Web 的全栈技能，也需要学习一些分布式系统的技术吗？是的！特别是我们在学习其持久层的时候，我们还真得学习一些分布式系统的基础理论，从而正确理解和使用我们熟悉的这些持久层技术。</span></span></span> 
</div> <div class="se-c0276940 " data-slate-type="paragraph" data-slate-object="block" data-key="2021"> 
<span data-slate-object="text" data-key="2022"><span data-slate-leaf="true" data-offset-key="2022:0" 
data-first-offset="true"><span data-slate-string="true">CAP 理论就是分布式系统技术中一个必须要掌握的内容，也是在项目早期和设计阶段实实在在地影响我们技术选型、技术决策的内容。</span></span></span> 
</div> <h2 class="se-7d5b3d8c" data-slate-type="heading" data-slate-object="block" data-key="2023"><span 
data-slate-object="text" data-key="2024"><span data-slate-leaf="true" data-offset-key="2024:0" 
data-first-offset="true"><span data-slate-string="true">理解概念</span></span></span></h2> <div 
class="se-a4e47f45 " data-slate-type="paragraph" data-slate-object="block" data-key="2025"> 
<span data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span data-slate-string="true">我想，你已经很熟悉一致性了。今天，在一致性之后，我们也要涉及到 CAP 
的另外的两个方面——可用性和分区容忍性。</span></span></span> </div> <h3 class="se-f3673ae0" data-slate-type="heading" 
data-slate-object="block" data-key="2027"><span data-slate-object="text" data-key="2028"><span 
data-slate-leaf="true" data-offset-key="2028:0" data-first-offset="true"><span data-slate-string="true">1. 
CAP 的概念</span></span></span></h3> <div class="se-dc510a12 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2029"> <span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" 
data-offset-key="2030:0" data-first-offset="true"><span data-slate-string="true">CAP 理论，又叫做布鲁尔理论（Brewer’s 
Theorem），指的是在一个共享数据的分布式存储系统中，下面三者最多只能同时保证二者，对这三者简单描述如下：</span></span></span> </div> <div class="se-3291d248" 
data-slate-type="list" data-slate-object="block" data-key="2031"> <div class="se-874f7571 se-3fdf6096" 
data-slate-type="list-line" data-slate-object="block" data-key="2032"> <span data-slate-object="text" 
data-key="2033"><span data-slate-leaf="true" data-offset-key="2033:0" data-first-offset="true"><span 
data-slate-string="true">一致性（Consistency）：读操作得到最近一次写入的数据（其实就是上一讲我们讲的强一致性）；</span></span></span> 
</div> <div class="se-07ffcc41 se-0c7151b7" data-slate-type="list-line" data-slate-object="block" 
data-key="2034"> <span data-slate-object="text" data-key="2035"><span data-slate-leaf="true" 
data-offset-key="2035:0" data-first-offset="true"><span data-slate-string="true">可用性（Availability）：请求在限定时间内从非失败的节点得到非失败的响应；</span></span></span> 
</div> <div class="se-22f37ad2 se-0b4acec8" data-slate-type="list-line" data-slate-object="block" 
data-key="2036"> <span data-slate-object="text" data-key="2037"><span data-slate-leaf="true" 
data-offset-key="2037:0" data-first-offset="true"><span data-slate-string="true">分区容忍性（Partition 
Tolerance）：系统允许节点间网络消息的丢失或延迟（出现分区）。</span></span></span> </div> </div> <div class="se-3899434c 
" data-slate-type="paragraph" data-slate-object="block" data-key="2038"> <span data-slate-object="text" 
data-key="2039"><span data-slate-leaf="true" data-offset-key="2039:0" data-first-offset="true"><span 
data-slate-string="true">下面，请让我进一步说明，从而帮助你理解。</span></span></span> </div> <div class="se-02d777bb 
" data-slate-type="paragraph" data-slate-object="block" data-key="2040"> <span data-slate-object="text" 
data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" data-first-offset="true"><span 
class="se-48ae1582" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一致性，这里体现了这个存储系统对统一数据提供的读写操作是线性化的。</span></span></span></span><span 
data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true">如果客户端写入数据，并且写操作返回成功给客户端，那么在下一次读取的时候（下一次写入以前），如果系统返回了“非失败”的响应，就一定是读出了完整、正确（最新）的那份数据，而不会读取到过期数据，也不会读取到中间数据。</span></span></span> 
</div> <div class="se-bc22c3ea " data-slate-type="paragraph" data-slate-object="block" data-key="2043"> 
<span data-slate-object="text" data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" 
data-first-offset="true"><span class="se-006edf28" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">可用性，体现的是存储系统持续提供服务的能力</span></span></span></span><span data-slate-object="text" 
data-key="2045"><span data-slate-leaf="true" data-offset-key="2045:0" data-first-offset="true"><span 
data-slate-string="true">，这里表现在两个方面：</span></span></span> </div> <div class="se-588dc21c" data-slate-type="list" 
data-slate-object="block" data-key="2046"> <div class="se-d907c046 se-294ce592" data-slate-type="list-line" 
data-slate-object="block" data-key="2047"> <span data-slate-object="text" data-key="2048"><span 
data-slate-leaf="true" data-offset-key="2048:0" data-first-offset="true"><span class="se-f20542f5" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">返回“非失败”的响应</span></span></span></span><span 
data-slate-object="text" data-key="2049"><span data-slate-leaf="true" data-offset-key="2049:0" 
data-first-offset="true"><span data-slate-string="true">，就是说，不是光有响应就可以了，系统得是在实实在在地提供服务，而不是在报错；</span></span></span> 
</div> <div class="se-ed137b01 se-89a18af0" data-slate-type="list-line" data-slate-object="block" 
data-key="2050"> <span data-slate-object="text" data-key="2051"><span data-slate-leaf="true" 
data-offset-key="2051:0" data-first-offset="true"><span class="se-269de1b2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">在限定时间内返回</span></span></span></span><span 
data-slate-object="text" data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" 
data-first-offset="true"><span data-slate-string="true">，就是说，这个响应是预期时间内返回的，而不出现请求超时。</span></span></span> 
</div> </div> <div class="se-0e207b76 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2053"> <span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" 
data-offset-key="2054:0" data-first-offset="true"><span data-slate-string="true">请注意，这里说的是“非失败”响应，而并没有说“正确”的响应。也就是说，返回了数据，但可以是过期的，可以是中间数据，因为数据是否“正确”并非由可用性来保证，而是由一致性来保证的。系统的单个节点可能会在任意时间内故障、出错，但是系统总能够靠处于非失败（non-failing）状态的其它节点来继续提供服务，保证可用性。</span></span></span> 
</div> <div class="se-44d57f4a " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span class="se-c80c446a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">分区容忍性，体现了系统是否能够接纳基于数据的网络分区。</span></span></span></span><span data-slate-object="text" 
data-key="2057"><span data-slate-leaf="true" data-offset-key="2057:0" data-first-offset="true"><span 
data-slate-string="true">只要出现了网络故障，无论什么原因导致某个节点和系统的其它节点失去了联系，节点间的数据同步操作无法被“及时”完成，那么，即便它依然可以对外（客户端）提供服务，网络分区也已经出现了。</span></span></span> 
</div> <div class="se-4a345791 " data-slate-type="paragraph" data-slate-object="block" data-key="2058"> 
<span data-slate-object="text" data-key="2059"><span data-slate-leaf="true" data-offset-key="2059:0" 
data-first-offset="true"><span data-slate-string="true">当然，如果数据只有一份，不存在其它节点保存的副本，或不需要跨节点的数据共享，那么，这就不存在“分区”，这样的分布式存储系统也就不是 
CAP 关心的对象。</span></span></span> </div> <h3 class="se-870c1392" data-slate-type="heading" data-slate-object="block" 
data-key="2060"><span data-slate-object="text" data-key="2061"><span data-slate-leaf="true" 
data-offset-key="2061:0" data-first-offset="true"><span data-slate-string="true">2. 进一步理解</span></span></span></h3> 
<div class="se-c9e4a0d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2062"> 
<span data-slate-object="text" data-key="2063"><span data-slate-leaf="true" data-offset-key="2063:0" 
data-first-offset="true"><span data-slate-string="true">如果你觉得模糊，没关系，让我使用一个简单的图示来帮你理解。</span></span></span> 
</div> <div class="se-68a3a2a6" data-slate-type="image" data-slate-object="block" data-key="2064"> 
<img class="se-b7c09a95" src="https://static001.geekbang.org/resource/image/9a/4b/9a552d641a142f77650b5fd07988174b.jpg"> 
</div> <div class="se-51d96ebc " data-slate-type="paragraph" data-slate-object="block" data-key="2065"> 
<span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" data-offset-key="2066:0" 
data-first-offset="true"><span data-slate-string="true">有这样一个存储系统，存在两个节点 A 和 B，各自存放一份数据拷贝。那么在正常情况下，客户端无论写数据到 
A 还是 B，都需要将数据同步到另一个节点，再返回成功。比如图示中带序号的四个箭头：</span></span></span> </div> <div class="se-ca1a7bb3" 
data-slate-type="list" data-slate-object="block" data-key="2067"> <div class="se-87de0c2a se-ac73d95f" 
data-slate-type="list-line" data-slate-object="block" data-key="2068"> <span data-slate-object="text" 
data-key="2069"><span data-slate-leaf="true" data-offset-key="2069:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ①，客户端写数据到节点 A；</span></span></span> </div> <div class="se-4b74bb03 
se-efae570b" data-slate-type="list-line" data-slate-object="block" data-key="2070"> <span data-slate-object="text" 
data-key="2071"><span data-slate-leaf="true" data-offset-key="2071:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ②，节点 A 同步数据变更到节点 B；</span></span></span> </div> <div class="se-a389c569 
se-90ee5f77" data-slate-type="list-line" data-slate-object="block" data-key="2072"> <span data-slate-object="text" 
data-key="2073"><span data-slate-leaf="true" data-offset-key="2073:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ③，节点 B 返回成功响应到节点 A；</span></span></span> </div> <div class="se-4f2d7c1a 
se-a796ce92" data-slate-type="list-line" data-slate-object="block" data-key="2074"> <span data-slate-object="text" 
data-key="2075"><span data-slate-leaf="true" data-offset-key="2075:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ④，节点 A 返回成功响应给客户端。</span></span></span> </div> </div> <div class="se-dd3297dd 
" data-slate-type="paragraph" data-slate-object="block" data-key="2076"> <span data-slate-object="text" 
data-key="2077"><span data-slate-leaf="true" data-offset-key="2077:0" data-first-offset="true"><span 
data-slate-string="true">不知道你有没有回想起 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2078" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="2079"><span 
data-slate-leaf="true" data-offset-key="2079:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="2080"><span data-slate-leaf="true" 
data-offset-key="2080:0" data-first-offset="true"><span data-slate-string="true"> 中的 Multi-Master 
架构，对，但唯一需要特别指出的不同是，节点间数据拷贝是同步进行的，需要完成拷贝以后再返回响应，因为我们需要保证一致性。</span></span></span> </div> <div 
class="se-e2bf571b " data-slate-type="paragraph" data-slate-object="block" data-key="2081"> 
<span data-slate-object="text" data-key="2082"><span data-slate-leaf="true" data-offset-key="2082:0" 
data-first-offset="true"><span data-slate-string="true">之后，客户端尝试读取刚写入的数据，无论是从节点 A 还是 B，都可以得到准确的数据：</span></span></span> 
</div> <div class="se-c0a79c67" data-slate-type="image" data-slate-object="block" data-key="2083"> 
<img class="se-d45e07ab" src="https://static001.geekbang.org/resource/image/8f/8a/8fe1b2a21d18314edd93fc7d0aa9998a.jpg"> 
</div> <div class="se-cebdcaa7 " data-slate-type="paragraph" data-slate-object="block" data-key="2084"> 
<span data-slate-object="text" data-key="2085"><span data-slate-leaf="true" data-offset-key="2085:0" 
data-first-offset="true"><span data-slate-string="true">好，这种情况下数据在 A、B 上都是一致的，并且系统也是可用的。</span></span></span> 
</div> <div class="se-b94f1bb9 " data-slate-type="paragraph" data-slate-object="block" data-key="2086"> 
<span data-slate-object="text" data-key="2087"><span data-slate-leaf="true" data-offset-key="2087:0" 
data-first-offset="true"><span data-slate-string="true">但是，现在网络突然出现故障，A 和 B 之间的数据拷贝通道被打断了，也就是说，分区发生了。这时候客户端再写入 
A 就会出现以下情况：</span></span></span> </div> <div class="se-5ac50258" data-slate-type="image" data-slate-object="block" 
data-key="2088"> <img class="se-5f8614f1" src="https://static001.geekbang.org/resource/image/9e/88/9e08dd2874a9bc6810d7813057dcef88.jpg"> 
</div> <div class="se-5df71744 " data-slate-type="paragraph" data-slate-object="block" data-key="2089"> 
<span data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">你看，这时候节点 A 已经无法将数据“及时”同步到节点 B 了， 那么，节点 
A 是否应该将数据写入自己，并返回“成功”给客户端呢？它陷入了两难：</span></span></span> </div> <div class="se-39f40e3f" data-slate-type="list" 
data-slate-object="block" data-key="2091"> <div class="se-9995d047 se-eb522c0c" data-slate-type="list-line" 
data-slate-object="block" data-key="2092"> <span data-slate-object="text" data-key="2093"><span 
data-slate-leaf="true" data-offset-key="2093:0" data-first-offset="true"><span class="se-8083af52" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">如果写入并返回成功，满足系统的可用性，就意味着丢失了数据一致性。</span></span></span></span><span 
data-slate-object="text" data-key="2094"><span data-slate-leaf="true" data-offset-key="2094:0" 
data-first-offset="true"><span data-slate-string="true">因为节点 A 的数据是最新的，而节点 B 的数据是过期的。</span></span></span> 
</div> <div class="se-3f6f2048 se-5e6a0007" data-slate-type="list-line" data-slate-object="block" 
data-key="2095"> <span data-slate-object="text" data-key="2096"><span data-slate-leaf="true" 
data-offset-key="2096:0" data-first-offset="true"><span class="se-5f58ba2b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">如果不写入数据，而直接返回失败</span></span></span></span><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">，即节点 A 拒绝写操作，那么 A 和 B 节点上的</span></span></span><span 
data-slate-object="text" data-key="2098"><span data-slate-leaf="true" data-offset-key="2098:0" 
data-first-offset="true"><span class="se-7abf6b1d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据依然满足一致性（写入失败，但依然都是相互一致的老数据），但是整个系统失去了可用性。</span></span></span></span> 
</div> </div> <div class="se-25aa2e69 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2099"> <span data-slate-object="text" data-key="2100"><span data-slate-leaf="true" 
data-offset-key="2100:0" data-first-offset="true"><span data-slate-string="true">你看，我们怎么也无法同时保证一致性、可用性和分区容忍性这三者。</span></span></span> 
</div> <h3 class="se-bb63dd42" data-slate-type="heading" data-slate-object="block" data-key="2101"><span 
data-slate-object="text" data-key="2102"><span data-slate-leaf="true" data-offset-key="2102:0" 
data-first-offset="true"><span data-slate-string="true">3. 三选二 ？</span></span></span></h3> 
<div class="se-2d89d578 " data-slate-type="paragraph" data-slate-object="block" data-key="2103"> 
<span data-slate-object="text" data-key="2104"><span data-slate-leaf="true" data-offset-key="2104:0" 
data-first-offset="true"><span data-slate-string="true">紧接着我要谈一谈对于 CAP 理论一个很大的误解——三选二。从上面对于 
CAP 的描述来看， CAP 的应用似乎就是一个三选二的选择题，但事实上，完全不是这样的。</span></span></span> </div> <div class="se-dbf6c945 
" data-slate-type="paragraph" data-slate-object="block" data-key="2105"> <span data-slate-object="text" 
data-key="2106"><span data-slate-leaf="true" data-offset-key="2106:0" data-first-offset="true"><span 
data-slate-string="true">开门见山地说，</span></span></span><span data-slate-object="text" data-key="2107"><span 
data-slate-leaf="true" data-offset-key="2107:0" data-first-offset="true"><span class="se-bed370e5" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">在讨论 CAP 定理的时候，P，也就是分区容忍性，是必选项。</span></span></span></span><span 
data-slate-object="text" data-key="2108"><span data-slate-leaf="true" data-offset-key="2108:0" 
data-first-offset="true"><span data-slate-string="true">具体来说，跨区域的系统，分区容忍性往往是不可以拿掉的，因为无论是硬件损坏、机房断电，还是地震海啸，都是无法预料、无法避免的，任何时间都可能出现网络故障而发生分区，因此工程师能做的，就是从 
CP 和 AP 中选择合适的那一个。</span></span></span> </div> <div class="se-a3a09fde " data-slate-type="paragraph" 
data-slate-object="block" data-key="2109"> <span data-slate-object="text" data-key="2110"><span 
data-slate-leaf="true" data-offset-key="2110:0" data-first-offset="true"><span data-slate-string="true">你可以想想上面我拿图示举的那个例子，在分区发生的时候，最多只能保证一致性和可用性一个。也就是说，CAP 
理论不是三选二的，而是二选一，当然，具体选哪个，我们需要“权衡”。</span></span></span> </div> <div class="se-2e93da40 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2111"> <span data-slate-object="text" data-key="2112"><span 
data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span data-slate-string="true">需要特别说明的是，</span></span></span><span 
data-slate-object="text" data-key="2113"><span data-slate-leaf="true" data-offset-key="2113:0" 
data-first-offset="true"><span class="se-2a2445b1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这里说的是只能“保证”一致性和可用性二者之一，而不是说，在系统正常运行时，二者不可能“同时满足”。</span></span></span></span><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">在系统运行正常的时候，网络分区没有出现，那么技术上我们是可能同时满足一致性和可用性两者的。</span></span></span> 
</div> <div class="se-4d0eb7c1 " data-slate-type="paragraph" data-slate-object="block" data-key="2115"> 
<span data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">这时你可能会问，难道没有 CA，即同时“保证”一致性和可用性，而牺牲掉分区容忍性的系统吗？</span></span></span> 
</div> <div class="se-50ad8753 " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">有！</span></span></span><span data-slate-object="text" 
data-key="2119"><span data-slate-leaf="true" data-offset-key="2119:0" data-first-offset="true"><span 
class="se-83e76ecc" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">但请注意，那其实已经不是 
CAP 理论关心的对象了，因为 CAP 要求的是节点间的数据交换和数据共享。</span></span></span></span><span data-slate-object="text" 
data-key="2120"><span data-slate-leaf="true" data-offset-key="2120:0" data-first-offset="true"><span 
data-slate-string="true">任何时候都不会有分区发生，这种系统基本上有这样两种形式：</span></span></span> </div> <div class="se-efda4e6f" 
data-slate-type="list" data-slate-object="block" data-key="2121"> <div class="se-e5693294 se-3c56f0bb" 
data-slate-type="list-line" data-slate-object="block" data-key="2122"> <span data-slate-object="text" 
data-key="2123"><span data-slate-leaf="true" data-offset-key="2123:0" data-first-offset="true"><span 
class="se-5b6b373f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">单节点系统</span></span></span></span><span 
data-slate-object="text" data-key="2124"><span data-slate-leaf="true" data-offset-key="2124:0" 
data-first-offset="true"><span data-slate-string="true">，这很好理解，没有节点间数据的交换，那么无论网络出不出故障，系统始终只包含一个节点。比方说，传统的关系型数据库，像 
MySQL 或者 OracleDB，在单节点的配置下。</span></span></span> </div> <div class="se-a7fd697d se-b587a492" 
data-slate-type="list-line" data-slate-object="block" data-key="2125"> <span data-slate-object="text" 
data-key="2126"><span data-slate-leaf="true" data-offset-key="2126:0" data-first-offset="true"><span 
class="se-742e61f2" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">虽然是多节点，但是节点间没有数据共享和数据交换</span></span></span></span><span 
data-slate-object="text" data-key="2127"><span data-slate-leaf="true" data-offset-key="2127:0" 
data-first-offset="true"><span data-slate-string="true">——即节点上的数据不需要拷贝到其它节点上。比方说，无数据副本（Replica）配置的集群 
Elasticsearch 或 Memcached，在经过 hash 以后，每个节点都存放着单份不同的数据。这种情况看起来也算分布式存储，但是节点之间是互相独立的。</span></span></span> 
</div> </div> <h2 class="se-fe58bddb" data-slate-type="heading" data-slate-object="block" data-key="2128"><span 
data-slate-object="text" data-key="2129"><span data-slate-leaf="true" data-offset-key="2129:0" 
data-first-offset="true"><span data-slate-string="true">存储技术的选择：NoSQL 三角形</span></span></span></h2> 
<div class="se-71017131 " data-slate-type="paragraph" data-slate-object="block" data-key="2130"> 
<span data-slate-object="text" data-key="2131"><span data-slate-leaf="true" data-offset-key="2131:0" 
data-first-offset="true"><span data-slate-string="true">在谈到根据 CAP 来选择技术的时候，我想先来介绍一下 NoSQL，你将会看到它们大量地分布在下面“NoSQL 
三角形”的 CP 和 AP 两条边上。</span></span></span> </div> <div class="se-507b2583 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2132"> <span data-slate-object="text" data-key="2133"><span 
data-slate-leaf="true" data-offset-key="2133:0" data-first-offset="true"><span data-slate-string="true">那么，到底什么是 
NoSQL 呢？我们可以简单地认为，NoSQL 是“非关系数据库”，和它相对应的是传统的“关系数据库”。它被设计出来的目的，并非要取代关系数据库，而是成为关系数据库的补充，即“Not 
Only SQL”。</span></span></span> </div> <div class="se-ee3972a9 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2134"> <span data-slate-object="text" data-key="2135"><span 
data-slate-leaf="true" data-offset-key="2135:0" data-first-offset="true"><span data-slate-string="true">也就是说，它放弃了对于“关系”的支持，</span></span></span><span 
data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span class="se-5e295b79" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">损失了强结构定义和关系查询等能力，但是它往往可以具备比关系数据库高得多的性能和横向扩展性（scalability）等优势。</span></span></span></span><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span data-slate-string="true">这在 Web 2.0 时代对于一些关系数据库不擅长的场景，例如数据量巨大，数据之间的关联关系较弱，数据结构（schema）多变，强可用性要求和低一致性要求等等，NoSQL 
可以发挥其最大的价值。</span></span></span> </div> <div class="se-5abfb6df " data-slate-type="paragraph" 
data-slate-object="block" data-key="2138"> <span data-slate-object="text" data-key="2139"><span 
data-slate-leaf="true" data-offset-key="2139:0" data-first-offset="true"><span data-slate-string="true">在实际业务中，我们可以利用 
CAP 定理来权衡和帮助选择合适的存储技术，且看下面这张 NoSQL 系统的 CAP 三角形（来自 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2140" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="2141"><span data-slate-leaf="true" data-offset-key="2141:0" data-first-offset="true"><span 
data-slate-string="true">Visual Guide to NoSQL Systems</span></span></span></a><span data-slate-object="text" 
data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" data-first-offset="true"><span 
data-slate-string="true">）。尺有所短，寸有所长，我们可以从 CAP 的角度来理解这些技术的优劣。</span></span></span> </div> <div 
class="se-9f073759" data-slate-type="image" data-slate-object="block" data-key="2143"> <img 
class="se-3c0938fe" src="https://static001.geekbang.org/resource/image/90/52/90a6c7ddb6556fa206f95a80a7a6c652.jpg"> 
</div> <div class="se-8e792848 " data-slate-type="paragraph" data-slate-object="block" data-key="2144"> 
<span data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span data-slate-string="true">从图中可以发现，关系数据几乎都落在了 CA 一侧，但是请注意，技术也在不断更新，许多关系数据库如今也可以通过配置而形成其它节点的数据冗余；有时，我们则是在其上方自己实现数据冗余，比如配置数据库的数据同步到备份数据库。</span></span></span> 
</div> <div class="se-6f4b7603 " data-slate-type="paragraph" data-slate-object="block" data-key="2146"> 
<span data-slate-object="text" data-key="2147"><span data-slate-leaf="true" data-offset-key="2147:0" 
data-first-offset="true"><span data-slate-string="true">无论哪一种方法，一旦其它节点用于数据冗余的数据副本出现，这个存储系统就落到上述三角形的另外两边去了。</span></span></span> 
</div> <div class="se-afbcd395 " data-slate-type="paragraph" data-slate-object="block" data-key="2148"> 
<span data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span data-slate-string="true">云上的 NoSQL 存储服务，多数落在了 AP 一侧，这也和 NoSQL 
运动可用性优先保证而降级一致性的主题符合。比如 Amazon 的 DynamoDB，但是这个也是可以通过不同的设置选项来改变的，比如 DynamoDB 默认采用最终一致性，但也允许配置为强一致性，那时它就落到了 
CP 上面。</span></span></span> </div> <h3 class="se-9ff094d2" data-slate-type="heading" data-slate-object="block" 
data-key="2150"><span data-slate-object="text" data-key="2151"><span data-slate-leaf="true" 
data-offset-key="2151:0" data-first-offset="true"><span data-slate-string="true">实际场景</span></span></span></h3> 
<div class="se-db7c32a4 " data-slate-type="paragraph" data-slate-object="block" data-key="2152"> 
<span data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">接着我们考虑几个实际应用场景，看看该采用哪一条边的技术呢？既然是基于 
Web 的全栈工程师的技术学习，我就来举两个基于网站应用的例子。</span></span></span> </div> <div class="se-1d05b047 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2154"> <span data-slate-object="text" data-key="2155"><span 
data-slate-leaf="true" data-offset-key="2155:0" data-first-offset="true"><span data-slate-string="true">还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2156" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2157"><span data-slate-leaf="true" data-offset-key="2157:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" 
data-first-offset="true"><span data-slate-string="true"> 中谈到的页面聚合吗？对于门户网站来说，无论是显示的数据，还是图片、样式等等静态资源，通过 
CDN 的方式，都可以把副本存放在离用户较近的节点，这样它们的获取可以减少延迟，提高用户体验。因此，这些系统联合起来，就形成了一个可以使用 CAP 讨论的分布式系统。</span></span></span> 
</div> <div class="se-a019917c " data-slate-type="paragraph" data-slate-object="block" data-key="2159"> 
<span data-slate-object="text" data-key="2160"><span data-slate-leaf="true" data-offset-key="2160:0" 
data-first-offset="true"><span data-slate-string="true">那么，很容易理解的是，且不用说网络故障而发生分区的情况，即便在正常情况下，这些信息并不需要具备那么严格的“即时性”，新闻早显示、晚显示几秒钟，乃至几分钟，都不是什么问题，上海的读者比北京的读者晚看到一会儿，也不是什么问题。但是，大型网站页面打不开，就是一个问题了，这显然会影响用户的体验。因此，从这个角度说，我们可以牺牲一致性，但需要尽量保证可用性，因此这是一个选择 
AP 的例子。</span></span></span> </div> <div class="se-a6a7aa03 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2161"> <span data-slate-object="text" data-key="2162"><span data-slate-leaf="true" 
data-offset-key="2162:0" data-first-offset="true"><span data-slate-string="true">事实上，对于大型的系统而言，我们往往不需要严格的一致性，但是我们希望保证可用性，因此在大多数情况下我们都会选择 
AP。但是，有时情况却未必如此。</span></span></span> </div> <div class="se-23bb7246 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2163"> <span data-slate-object="text" data-key="2164"><span 
data-slate-leaf="true" data-offset-key="2164:0" data-first-offset="true"><span data-slate-string="true">再举一个例子，航空公司卖机票，在不考虑超售的情况下，一座一票，航空公司的网站当然可以采用上面类似的做法；有时，甚至在正常的情况下，余票的显示都可以不是非常准确的（比如显示“有票”可以避免显示这个具体数字）。但是，当客户真正在选座售票的时候，即扣款和出票的时候就不是这样的了，一致性必须优先保证。因为如果可用性保证不了，即有时候订票失败，用户最多也就是牢骚几句，这还可以接受，但要是出现一致性问题，即两个人订了同一个座位的票，那就是很严重的问题了。</span></span></span> 
</div> <div class="se-324952e7 " data-slate-type="paragraph" data-slate-object="block" data-key="2165"> 
<span data-slate-object="text" data-key="2166"><span data-slate-leaf="true" data-offset-key="2166:0" 
data-first-offset="true"><span data-slate-string="true">最后，我想说的是，这里的选择是一个带有灰度的过程，并非只有 0 和 1 
这两个绝对的答案，我们还是需要具体问题具体分析，不要一刀切。</span></span></span> </div> <div class="se-7ba58467 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2167"> <span data-slate-object="text" data-key="2168"><span 
data-slate-leaf="true" data-offset-key="2168:0" data-first-offset="true"><span class="se-f5d113ac" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">从特性上说，甚至可以部分特性做到 
CP，部分做到 AP，这都是有可能的。</span></span></span></span><span data-slate-object="text" data-key="2169"><span 
data-slate-leaf="true" data-offset-key="2169:0" data-first-offset="true"><span data-slate-string="true">比如说，涉及钱的问题一定是 
CP 吗？不一定，ATM 机就是一个很经典的例子，在网络故障发生时，ATM 会处于 stand-alone 模式，在这种模式下，用户依然可以执行查询余额等操作（很可能数额不准确），甚至还可以取款，但是这时的取款会有所限制，例如限制一个额度（银行承担风险），或者是限制只能给某些银行的卡取款，毕竟可用性和一致性的丢失会带来不同的风险和后果，两害相权取其轻。</span></span></span> 
</div> <h2 class="se-dad141d9" data-slate-type="heading" data-slate-object="block" data-key="2170"><span 
data-slate-object="text" data-key="2171"><span data-slate-leaf="true" data-offset-key="2171:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-f6980603 " data-slate-type="paragraph" data-slate-object="block" data-key="2172"> 
<span data-slate-object="text" data-key="2173"><span data-slate-leaf="true" data-offset-key="2173:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习和理解了 CAP 理论，并且了解了一些实际应用的例子。希望你能够通过今天的内容，彻底掌握其原理，并能够逐渐在设计中应用起来，特别是在技术选型做“权衡”的时候。</span></span></span> 
</div> <div class="se-0f94c6da " data-slate-type="paragraph" data-slate-object="block" data-key="2174"> 
<span data-slate-object="text" data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" 
data-first-offset="true"><span data-slate-string="true">现在，我们来看一下今天的思考题吧：</span></span></span> 
</div> <div class="se-d6d16b00" data-slate-type="list" data-slate-object="block" data-key="2176"> 
<div class="se-98bc4e3a se-870a2a93" data-slate-type="list-line" data-slate-object="block" 
data-key="2177"> <span data-slate-object="text" data-key="2178"><span data-slate-leaf="true" 
data-offset-key="2178:0" data-first-offset="true"><span data-slate-string="true">你是否了解或是接触过分布式系统，特别是分布式存储系统，它是否能归类到 
NoSQL 三角形中的某一条边上呢？</span></span></span> </div> <div class="se-9af0b8ac se-01407cf6" data-slate-type="list-line" 
data-slate-object="block" data-key="2179"> <span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">互联网上的绝大多数系统都是可以牺牲一致性，而优先保证可用性的，但也有一些例外。你能举出几个即便牺牲可用性，也要保证数据一致性的例子来吗？</span></span></span> 
</div> </div> <div class="se-8205a713 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2181"> <span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" 
data-offset-key="2182:0" data-first-offset="true"><span data-slate-string="true">今天的主要内容就到这里，欢迎你在留言区进行讨论，也欢迎你继续学习下面的选修课堂。</span></span></span> 
</div> <h2 class="se-b64d87b3" data-slate-type="heading" data-slate-object="block" data-key="2183"><span 
data-slate-object="text" data-key="2184"><span data-slate-leaf="true" data-offset-key="2184:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：从 ACID 到 BASE</span></span></span></h2> 
<div class="se-cdde2f74 " data-slate-type="paragraph" data-slate-object="block" data-key="2185"> 
<span data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">ACID 和 BASE，正好是英文里“酸”和“碱”的意思。有意思的是，关系数据库和非关系数据库，它们各自的重要特性，也恰恰可以用酸和碱来体现。下面我来简单做个比较，你可以从中感受一下二者的差异和对立性，为我们后两讲介绍技术选型打下基础。</span></span></span> 
</div> <div class="se-d17428e2 " data-slate-type="paragraph" data-slate-object="block" data-key="2187"> 
<span data-slate-object="text" data-key="2188"><span data-slate-leaf="true" data-offset-key="2188:0" 
data-first-offset="true"><span data-slate-string="true">先说说 ACID。</span></span></span> </div> 
<div class="se-0072424a " data-slate-type="paragraph" data-slate-object="block" data-key="2189"> 
<span data-slate-object="text" data-key="2190"><span data-slate-leaf="true" data-offset-key="2190:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库的一大优势，就是可以通过事务的支持来实现强一致性，而事务，通常可以包含这样几个特性。</span></span></span> 
</div> <div class="se-f0994de6" data-slate-type="list" data-slate-object="block" data-key="2191"> 
<div class="se-8598c06e se-bd528b47" data-slate-type="list-line" data-slate-object="block" 
data-key="2192"> <span data-slate-object="text" data-key="2193"><span data-slate-leaf="true" 
data-offset-key="2193:0" data-first-offset="true"><span data-slate-string="true">Atomicity：原子性，指的是无论事务执行的过程有多么复杂，要么提交成功改变状态，要么提交失败回滚到提交前的状态，这些过程是原子化的，不存在第三种状态。</span></span></span> 
</div> <div class="se-a66158ce se-3119a3ff" data-slate-type="list-line" data-slate-object="block" 
data-key="2194"> <span data-slate-object="text" data-key="2195"><span data-slate-leaf="true" 
data-offset-key="2195:0" data-first-offset="true"><span data-slate-string="true">Consistency：一致性，这里的一致性和我们前面介绍的一致性含义略有不同，它指的是事务开始前、结束后，数据库的完整性都没有被破坏，所有键、数据类型、检查、触发器等等都依然有效。</span></span></span> 
</div> <div class="se-65d94ceb se-e83b6ab1" data-slate-type="list-line" data-slate-object="block" 
data-key="2196"> <span data-slate-object="text" data-key="2197"><span data-slate-leaf="true" 
data-offset-key="2197:0" data-first-offset="true"><span data-slate-string="true">Isolation：隔离性，指的是多个并发事务同一时间对于数据进行读写的能力，同时执行，互不影响。事务隔离分为四大级别，不同的数据库默认实现在不同的级别，我在扩展阅读中放置了一些学习材料，感兴趣的话可以进一步学习。</span></span></span> 
</div> <div class="se-0cada005 se-27005c01" data-slate-type="list-line" data-slate-object="block" 
data-key="2198"> <span data-slate-object="text" data-key="2199"><span data-slate-leaf="true" 
data-offset-key="2199:0" data-first-offset="true"><span data-slate-string="true">Durability：持久性，一旦事务成功提交，那么改变是永久性的。</span></span></span> 
</div> </div> <div class="se-a41e323b " data-slate-type="paragraph" data-slate-object="block" 
data-key="2200"> <span data-slate-object="text" data-key="2201"><span data-slate-leaf="true" 
data-offset-key="2201:0" data-first-offset="true"><span data-slate-string="true">接着说说 BASE。</span></span></span> 
</div> <div class="se-645c784f " data-slate-type="paragraph" data-slate-object="block" data-key="2202"> 
<span data-slate-object="text" data-key="2203"><span data-slate-leaf="true" data-offset-key="2203:0" 
data-first-offset="true"><span data-slate-string="true">前面已经谈到了 NoSQL，CAP、最终一致性，再加上 BASE，被称作 
NoSQL 的三大基石。而 BASE，是基于 CAP 衍生出来，对于其牺牲一致性和保证可用性的这一分支，落实到具体实践中的经验总结，在大规模互联网分布式系统的设计中具有指导意义。</span></span></span> 
</div> <div class="se-963520ab" data-slate-type="list" data-slate-object="block" data-key="2204"> 
<div class="se-e5e455d8 se-0402bf3e" data-slate-type="list-line" data-slate-object="block" 
data-key="2205"> <span data-slate-object="text" data-key="2206"><span data-slate-leaf="true" 
data-offset-key="2206:0" data-first-offset="true"><span data-slate-string="true">BA：基本可用，即 
Basically Available。这就是说，为了保障核心特性的“基本可用”，无论是次要特性的功能上，还是性能上，都可以牺牲。严格说来，这都是在“可用性”方面做的妥协。例如电商网站在双十一等访问压力较大的期间，可以关闭某一些次要特性，将购物支付等核心特性保证起来。如果你还记得 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2207" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2208"><span data-slate-leaf="true" data-offset-key="2208:0" 
data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2209"><span data-slate-leaf="true" data-offset-key="2209:0" 
data-first-offset="true"><span data-slate-string="true"> 中的“优雅降级”，那么你应该知道，这里说的就是优雅降级中一个常见的应用场景。</span></span></span> 
</div> <div class="se-3d994dca se-d053043f" data-slate-type="list-line" data-slate-object="block" 
data-key="2210"> <span data-slate-object="text" data-key="2211"><span data-slate-leaf="true" 
data-offset-key="2211:0" data-first-offset="true"><span data-slate-string="true">S：软状态，即 Soft 
State。说的是允许系统中的数据存在中间状态，这也一样，为了可用性，而牺牲了一致性。</span></span></span> </div> <div class="se-3c09f5dc 
se-2401c1b5" data-slate-type="list-line" data-slate-object="block" data-key="2212"> <span data-slate-object="text" 
data-key="2213"><span data-slate-leaf="true" data-offset-key="2213:0" data-first-offset="true"><span 
data-slate-string="true">E：最终一致性，即 Eventually Consistent。S 和 E 两点其实说的是一个事情，一致性的牺牲是可行且有限度的，某个数据变更后的时间窗口内出现了不一致的情况，但是之后数据会恢复到一致的状态。举例来说，上文提到过的 
CDN 系统便是如此，再比如社交媒体发布后的互动，像点赞、评论等功能，这些数据可以延迟一会儿显示，但是超过了一定的时间窗口还不同步到就会是问题。</span></span></span> 
</div> </div> <h2 class="se-8f9a40ac" data-slate-type="heading" data-slate-object="block" data-key="2214"><span 
data-slate-object="text" data-key="2215"><span data-slate-leaf="true" data-offset-key="2215:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-d02f5f8f" data-slate-type="list" data-slate-object="block" data-key="2216"> <div 
class="se-79729d5f se-e77e8c16" data-slate-type="list-line" data-slate-object="block" data-key="2217"> 
<a data-slate-type="link" data-slate-object="inline" data-key="2218" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" 
data-first-offset="true"><span data-slate-string="true">Towards Robust Distributed Systems</span></span></span></a><span 
data-slate-object="text" data-key="2220"><span data-slate-leaf="true" data-offset-key="2220:0" 
data-first-offset="true"><span data-slate-string="true">，这是一个胶片，来自 Eric Brewer 最早谈及 CAP 理论的一个分享；而 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2221" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2222"><span data-slate-leaf="true" data-offset-key="2222:0" 
data-first-offset="true"><span data-slate-string="true">Brewer’s CAP Theorem</span></span></span></a><span 
data-slate-object="text" data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" 
data-first-offset="true"><span data-slate-string="true">，这一篇是对 CAP 理论证明的论文，想看中文的话可以看看这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2224" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="2226"><span data-slate-leaf="true" data-offset-key="2226:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-306dd2b7 se-b3b30d3f" data-slate-type="list-line" data-slate-object="block" data-key="2227"> 
<span data-slate-object="text" data-key="2228"><span data-slate-leaf="true" data-offset-key="2228:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 NoSQL 的概念，CAP 的三角形一图中也有一些实现的例子，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2229" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2230"><span data-slate-leaf="true" data-offset-key="2230:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL Databases</span></span></span></a><span 
data-slate-object="text" data-key="2231"><span data-slate-leaf="true" data-offset-key="2231:0" 
data-first-offset="true"><span data-slate-string="true"> 这个网站列出了比较全面的 NoSQL 数据库列表，可供查询。</span></span></span> 
</div> <div class="se-8cbc431a se-4c4b2103" data-slate-type="list-line" data-slate-object="block" 
data-key="2232"> <span data-slate-object="text" data-key="2233"><span data-slate-leaf="true" 
data-offset-key="2233:0" data-first-offset="true"><span data-slate-string="true">文中提到了某些存储服务能够通过配置在 
CAP 的三角形上切换。比如 DynamoDB，它是一个 NoSQL 的键 / 值文档数据库，就可以配置为 CP，也可以配置为 AP，官方的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2234" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2235"><span data-slate-leaf="true" data-offset-key="2235:0" 
data-first-offset="true"><span data-slate-string="true">读取一致性</span></span></span></a><span 
data-slate-object="text" data-key="2236"><span data-slate-leaf="true" data-offset-key="2236:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章做了简要说明；再比如 S3，它是一个云上的对象存储服务，它的一致性根据对象创建和对象修改而有所不同，你可以看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2237" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2238"><span data-slate-leaf="true" data-offset-key="2238:0" 
data-first-offset="true"><span data-slate-string="true">官方的这个说明</span></span></span></a><span 
data-slate-object="text" data-key="2239"><span data-slate-leaf="true" data-offset-key="2239:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-7df1841c se-802e4653" data-slate-type="list-line" data-slate-object="block" data-key="2240"> 
<span data-slate-object="text" data-key="2241"><span data-slate-leaf="true" data-offset-key="2241:0" 
data-first-offset="true"><span data-slate-string="true">如果对 BASE 感兴趣，你可以看看这篇最原始的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2242" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2243"><span data-slate-leaf="true" data-offset-key="2243:0" 
data-first-offset="true"><span data-slate-string="true">Base: An Acid Alternative</span></span></span></a><span 
data-slate-object="text" data-key="2244"><span data-slate-leaf="true" data-offset-key="2244:0" 
data-first-offset="true"><span data-slate-string="true">，想看中文译文的话可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2245" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2246"><span data-slate-leaf="true" data-offset-key="2246:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2247"><span data-slate-leaf="true" data-offset-key="2247:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-66d76c24 se-17239546" 
data-slate-type="list-line" data-slate-object="block" data-key="2248"> <span data-slate-object="text" 
data-key="2249"><span data-slate-leaf="true" data-offset-key="2249:0" data-first-offset="true"><span 
data-slate-string="true">对于文中提到的事务隔离，感兴趣可以进一步参见</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2250" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="2251"><span data-slate-leaf="true" data-offset-key="2251:0" data-first-offset="true"><span 
data-slate-string="true">维基百科</span></span></span></a><span data-slate-object="text" data-key="2252"><span 
data-slate-leaf="true" data-offset-key="2252:0" data-first-offset="true"><span data-slate-string="true">，还有一篇美团技术团队写的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2253" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2254"><span data-slate-leaf="true" data-offset-key="2254:0" 
data-first-offset="true"><span data-slate-string="true">Innodb 中的事务隔离级别和锁的关系</span></span></span></a><span 
data-slate-object="text" data-key="2255"><span data-slate-leaf="true" data-offset-key="2255:0" 
data-first-offset="true"><span data-slate-string="true">，也是很好的针对事务隔离的学习材料。</span></span></span> 
</div> </div> <div class="se-e269788d" data-slate-type="image" data-slate-object="block" data-key="2256"> 
<img class="se-8066cd69" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 3 msec}
2020-11-19 11:13:56.434 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 11:13:56.434 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:13:56.438 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2016" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-8ffcd355 " data-slate-type="paragraph" data-slate-object="block" data-key="2017"> 
<span data-slate-object="text" data-key="2018"><span data-slate-leaf="true" data-offset-key="2018:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-bb715cee " data-slate-type="paragraph" data-slate-object="block" data-key="2019"> 
<span data-slate-object="text" data-key="2020"><span data-slate-leaf="true" data-offset-key="2020:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中我们着重讲了持久层的一致性，其实，它是分布式系统的一个基础理论。你可能会问，学习基于 
Web 的全栈技能，也需要学习一些分布式系统的技术吗？是的！特别是我们在学习其持久层的时候，我们还真得学习一些分布式系统的基础理论，从而正确理解和使用我们熟悉的这些持久层技术。</span></span></span> 
</div> <div class="se-c0276940 " data-slate-type="paragraph" data-slate-object="block" data-key="2021"> 
<span data-slate-object="text" data-key="2022"><span data-slate-leaf="true" data-offset-key="2022:0" 
data-first-offset="true"><span data-slate-string="true">CAP 理论就是分布式系统技术中一个必须要掌握的内容，也是在项目早期和设计阶段实实在在地影响我们技术选型、技术决策的内容。</span></span></span> 
</div> <h2 class="se-7d5b3d8c" data-slate-type="heading" data-slate-object="block" data-key="2023"><span 
data-slate-object="text" data-key="2024"><span data-slate-leaf="true" data-offset-key="2024:0" 
data-first-offset="true"><span data-slate-string="true">理解概念</span></span></span></h2> <div 
class="se-a4e47f45 " data-slate-type="paragraph" data-slate-object="block" data-key="2025"> 
<span data-slate-object="text" data-key="2026"><span data-slate-leaf="true" data-offset-key="2026:0" 
data-first-offset="true"><span data-slate-string="true">我想，你已经很熟悉一致性了。今天，在一致性之后，我们也要涉及到 CAP 
的另外的两个方面——可用性和分区容忍性。</span></span></span> </div> <h3 class="se-f3673ae0" data-slate-type="heading" 
data-slate-object="block" data-key="2027"><span data-slate-object="text" data-key="2028"><span 
data-slate-leaf="true" data-offset-key="2028:0" data-first-offset="true"><span data-slate-string="true">1. 
CAP 的概念</span></span></span></h3> <div class="se-dc510a12 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2029"> <span data-slate-object="text" data-key="2030"><span data-slate-leaf="true" 
data-offset-key="2030:0" data-first-offset="true"><span data-slate-string="true">CAP 理论，又叫做布鲁尔理论（Brewer’s 
Theorem），指的是在一个共享数据的分布式存储系统中，下面三者最多只能同时保证二者，对这三者简单描述如下：</span></span></span> </div> <div class="se-3291d248" 
data-slate-type="list" data-slate-object="block" data-key="2031"> <div class="se-874f7571 se-3fdf6096" 
data-slate-type="list-line" data-slate-object="block" data-key="2032"> <span data-slate-object="text" 
data-key="2033"><span data-slate-leaf="true" data-offset-key="2033:0" data-first-offset="true"><span 
data-slate-string="true">一致性（Consistency）：读操作得到最近一次写入的数据（其实就是上一讲我们讲的强一致性）；</span></span></span> 
</div> <div class="se-07ffcc41 se-0c7151b7" data-slate-type="list-line" data-slate-object="block" 
data-key="2034"> <span data-slate-object="text" data-key="2035"><span data-slate-leaf="true" 
data-offset-key="2035:0" data-first-offset="true"><span data-slate-string="true">可用性（Availability）：请求在限定时间内从非失败的节点得到非失败的响应；</span></span></span> 
</div> <div class="se-22f37ad2 se-0b4acec8" data-slate-type="list-line" data-slate-object="block" 
data-key="2036"> <span data-slate-object="text" data-key="2037"><span data-slate-leaf="true" 
data-offset-key="2037:0" data-first-offset="true"><span data-slate-string="true">分区容忍性（Partition 
Tolerance）：系统允许节点间网络消息的丢失或延迟（出现分区）。</span></span></span> </div> </div> <div class="se-3899434c 
" data-slate-type="paragraph" data-slate-object="block" data-key="2038"> <span data-slate-object="text" 
data-key="2039"><span data-slate-leaf="true" data-offset-key="2039:0" data-first-offset="true"><span 
data-slate-string="true">下面，请让我进一步说明，从而帮助你理解。</span></span></span> </div> <div class="se-02d777bb 
" data-slate-type="paragraph" data-slate-object="block" data-key="2040"> <span data-slate-object="text" 
data-key="2041"><span data-slate-leaf="true" data-offset-key="2041:0" data-first-offset="true"><span 
class="se-48ae1582" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一致性，这里体现了这个存储系统对统一数据提供的读写操作是线性化的。</span></span></span></span><span 
data-slate-object="text" data-key="2042"><span data-slate-leaf="true" data-offset-key="2042:0" 
data-first-offset="true"><span data-slate-string="true">如果客户端写入数据，并且写操作返回成功给客户端，那么在下一次读取的时候（下一次写入以前），如果系统返回了“非失败”的响应，就一定是读出了完整、正确（最新）的那份数据，而不会读取到过期数据，也不会读取到中间数据。</span></span></span> 
</div> <div class="se-bc22c3ea " data-slate-type="paragraph" data-slate-object="block" data-key="2043"> 
<span data-slate-object="text" data-key="2044"><span data-slate-leaf="true" data-offset-key="2044:0" 
data-first-offset="true"><span class="se-006edf28" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">可用性，体现的是存储系统持续提供服务的能力</span></span></span></span><span data-slate-object="text" 
data-key="2045"><span data-slate-leaf="true" data-offset-key="2045:0" data-first-offset="true"><span 
data-slate-string="true">，这里表现在两个方面：</span></span></span> </div> <div class="se-588dc21c" data-slate-type="list" 
data-slate-object="block" data-key="2046"> <div class="se-d907c046 se-294ce592" data-slate-type="list-line" 
data-slate-object="block" data-key="2047"> <span data-slate-object="text" data-key="2048"><span 
data-slate-leaf="true" data-offset-key="2048:0" data-first-offset="true"><span class="se-f20542f5" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">返回“非失败”的响应</span></span></span></span><span 
data-slate-object="text" data-key="2049"><span data-slate-leaf="true" data-offset-key="2049:0" 
data-first-offset="true"><span data-slate-string="true">，就是说，不是光有响应就可以了，系统得是在实实在在地提供服务，而不是在报错；</span></span></span> 
</div> <div class="se-ed137b01 se-89a18af0" data-slate-type="list-line" data-slate-object="block" 
data-key="2050"> <span data-slate-object="text" data-key="2051"><span data-slate-leaf="true" 
data-offset-key="2051:0" data-first-offset="true"><span class="se-269de1b2" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">在限定时间内返回</span></span></span></span><span 
data-slate-object="text" data-key="2052"><span data-slate-leaf="true" data-offset-key="2052:0" 
data-first-offset="true"><span data-slate-string="true">，就是说，这个响应是预期时间内返回的，而不出现请求超时。</span></span></span> 
</div> </div> <div class="se-0e207b76 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2053"> <span data-slate-object="text" data-key="2054"><span data-slate-leaf="true" 
data-offset-key="2054:0" data-first-offset="true"><span data-slate-string="true">请注意，这里说的是“非失败”响应，而并没有说“正确”的响应。也就是说，返回了数据，但可以是过期的，可以是中间数据，因为数据是否“正确”并非由可用性来保证，而是由一致性来保证的。系统的单个节点可能会在任意时间内故障、出错，但是系统总能够靠处于非失败（non-failing）状态的其它节点来继续提供服务，保证可用性。</span></span></span> 
</div> <div class="se-44d57f4a " data-slate-type="paragraph" data-slate-object="block" data-key="2055"> 
<span data-slate-object="text" data-key="2056"><span data-slate-leaf="true" data-offset-key="2056:0" 
data-first-offset="true"><span class="se-c80c446a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">分区容忍性，体现了系统是否能够接纳基于数据的网络分区。</span></span></span></span><span data-slate-object="text" 
data-key="2057"><span data-slate-leaf="true" data-offset-key="2057:0" data-first-offset="true"><span 
data-slate-string="true">只要出现了网络故障，无论什么原因导致某个节点和系统的其它节点失去了联系，节点间的数据同步操作无法被“及时”完成，那么，即便它依然可以对外（客户端）提供服务，网络分区也已经出现了。</span></span></span> 
</div> <div class="se-4a345791 " data-slate-type="paragraph" data-slate-object="block" data-key="2058"> 
<span data-slate-object="text" data-key="2059"><span data-slate-leaf="true" data-offset-key="2059:0" 
data-first-offset="true"><span data-slate-string="true">当然，如果数据只有一份，不存在其它节点保存的副本，或不需要跨节点的数据共享，那么，这就不存在“分区”，这样的分布式存储系统也就不是 
CAP 关心的对象。</span></span></span> </div> <h3 class="se-870c1392" data-slate-type="heading" data-slate-object="block" 
data-key="2060"><span data-slate-object="text" data-key="2061"><span data-slate-leaf="true" 
data-offset-key="2061:0" data-first-offset="true"><span data-slate-string="true">2. 进一步理解</span></span></span></h3> 
<div class="se-c9e4a0d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2062"> 
<span data-slate-object="text" data-key="2063"><span data-slate-leaf="true" data-offset-key="2063:0" 
data-first-offset="true"><span data-slate-string="true">如果你觉得模糊，没关系，让我使用一个简单的图示来帮你理解。</span></span></span> 
</div> <div class="se-68a3a2a6" data-slate-type="image" data-slate-object="block" data-key="2064"> 
<img class="se-b7c09a95" src="https://static001.geekbang.org/resource/image/9a/4b/9a552d641a142f77650b5fd07988174b.jpg"> 
</div> <div class="se-51d96ebc " data-slate-type="paragraph" data-slate-object="block" data-key="2065"> 
<span data-slate-object="text" data-key="2066"><span data-slate-leaf="true" data-offset-key="2066:0" 
data-first-offset="true"><span data-slate-string="true">有这样一个存储系统，存在两个节点 A 和 B，各自存放一份数据拷贝。那么在正常情况下，客户端无论写数据到 
A 还是 B，都需要将数据同步到另一个节点，再返回成功。比如图示中带序号的四个箭头：</span></span></span> </div> <div class="se-ca1a7bb3" 
data-slate-type="list" data-slate-object="block" data-key="2067"> <div class="se-87de0c2a se-ac73d95f" 
data-slate-type="list-line" data-slate-object="block" data-key="2068"> <span data-slate-object="text" 
data-key="2069"><span data-slate-leaf="true" data-offset-key="2069:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ①，客户端写数据到节点 A；</span></span></span> </div> <div class="se-4b74bb03 
se-efae570b" data-slate-type="list-line" data-slate-object="block" data-key="2070"> <span data-slate-object="text" 
data-key="2071"><span data-slate-leaf="true" data-offset-key="2071:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ②，节点 A 同步数据变更到节点 B；</span></span></span> </div> <div class="se-a389c569 
se-90ee5f77" data-slate-type="list-line" data-slate-object="block" data-key="2072"> <span data-slate-object="text" 
data-key="2073"><span data-slate-leaf="true" data-offset-key="2073:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ③，节点 B 返回成功响应到节点 A；</span></span></span> </div> <div class="se-4f2d7c1a 
se-a796ce92" data-slate-type="list-line" data-slate-object="block" data-key="2074"> <span data-slate-object="text" 
data-key="2075"><span data-slate-leaf="true" data-offset-key="2075:0" data-first-offset="true"><span 
data-slate-string="true">箭头 ④，节点 A 返回成功响应给客户端。</span></span></span> </div> </div> <div class="se-dd3297dd 
" data-slate-type="paragraph" data-slate-object="block" data-key="2076"> <span data-slate-object="text" 
data-key="2077"><span data-slate-leaf="true" data-offset-key="2077:0" data-first-offset="true"><span 
data-slate-string="true">不知道你有没有回想起 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2078" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="2079"><span 
data-slate-leaf="true" data-offset-key="2079:0" data-first-offset="true"><span data-slate-string="true">[第 
23 讲]</span></span></span></a><span data-slate-object="text" data-key="2080"><span data-slate-leaf="true" 
data-offset-key="2080:0" data-first-offset="true"><span data-slate-string="true"> 中的 Multi-Master 
架构，对，但唯一需要特别指出的不同是，节点间数据拷贝是同步进行的，需要完成拷贝以后再返回响应，因为我们需要保证一致性。</span></span></span> </div> <div 
class="se-e2bf571b " data-slate-type="paragraph" data-slate-object="block" data-key="2081"> 
<span data-slate-object="text" data-key="2082"><span data-slate-leaf="true" data-offset-key="2082:0" 
data-first-offset="true"><span data-slate-string="true">之后，客户端尝试读取刚写入的数据，无论是从节点 A 还是 B，都可以得到准确的数据：</span></span></span> 
</div> <div class="se-c0a79c67" data-slate-type="image" data-slate-object="block" data-key="2083"> 
<img class="se-d45e07ab" src="https://static001.geekbang.org/resource/image/8f/8a/8fe1b2a21d18314edd93fc7d0aa9998a.jpg"> 
</div> <div class="se-cebdcaa7 " data-slate-type="paragraph" data-slate-object="block" data-key="2084"> 
<span data-slate-object="text" data-key="2085"><span data-slate-leaf="true" data-offset-key="2085:0" 
data-first-offset="true"><span data-slate-string="true">好，这种情况下数据在 A、B 上都是一致的，并且系统也是可用的。</span></span></span> 
</div> <div class="se-b94f1bb9 " data-slate-type="paragraph" data-slate-object="block" data-key="2086"> 
<span data-slate-object="text" data-key="2087"><span data-slate-leaf="true" data-offset-key="2087:0" 
data-first-offset="true"><span data-slate-string="true">但是，现在网络突然出现故障，A 和 B 之间的数据拷贝通道被打断了，也就是说，分区发生了。这时候客户端再写入 
A 就会出现以下情况：</span></span></span> </div> <div class="se-5ac50258" data-slate-type="image" data-slate-object="block" 
data-key="2088"> <img class="se-5f8614f1" src="https://static001.geekbang.org/resource/image/9e/88/9e08dd2874a9bc6810d7813057dcef88.jpg"> 
</div> <div class="se-5df71744 " data-slate-type="paragraph" data-slate-object="block" data-key="2089"> 
<span data-slate-object="text" data-key="2090"><span data-slate-leaf="true" data-offset-key="2090:0" 
data-first-offset="true"><span data-slate-string="true">你看，这时候节点 A 已经无法将数据“及时”同步到节点 B 了， 那么，节点 
A 是否应该将数据写入自己，并返回“成功”给客户端呢？它陷入了两难：</span></span></span> </div> <div class="se-39f40e3f" data-slate-type="list" 
data-slate-object="block" data-key="2091"> <div class="se-9995d047 se-eb522c0c" data-slate-type="list-line" 
data-slate-object="block" data-key="2092"> <span data-slate-object="text" data-key="2093"><span 
data-slate-leaf="true" data-offset-key="2093:0" data-first-offset="true"><span class="se-8083af52" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">如果写入并返回成功，满足系统的可用性，就意味着丢失了数据一致性。</span></span></span></span><span 
data-slate-object="text" data-key="2094"><span data-slate-leaf="true" data-offset-key="2094:0" 
data-first-offset="true"><span data-slate-string="true">因为节点 A 的数据是最新的，而节点 B 的数据是过期的。</span></span></span> 
</div> <div class="se-3f6f2048 se-5e6a0007" data-slate-type="list-line" data-slate-object="block" 
data-key="2095"> <span data-slate-object="text" data-key="2096"><span data-slate-leaf="true" 
data-offset-key="2096:0" data-first-offset="true"><span class="se-5f58ba2b" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">如果不写入数据，而直接返回失败</span></span></span></span><span 
data-slate-object="text" data-key="2097"><span data-slate-leaf="true" data-offset-key="2097:0" 
data-first-offset="true"><span data-slate-string="true">，即节点 A 拒绝写操作，那么 A 和 B 节点上的</span></span></span><span 
data-slate-object="text" data-key="2098"><span data-slate-leaf="true" data-offset-key="2098:0" 
data-first-offset="true"><span class="se-7abf6b1d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据依然满足一致性（写入失败，但依然都是相互一致的老数据），但是整个系统失去了可用性。</span></span></span></span> 
</div> </div> <div class="se-25aa2e69 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2099"> <span data-slate-object="text" data-key="2100"><span data-slate-leaf="true" 
data-offset-key="2100:0" data-first-offset="true"><span data-slate-string="true">你看，我们怎么也无法同时保证一致性、可用性和分区容忍性这三者。</span></span></span> 
</div> <h3 class="se-bb63dd42" data-slate-type="heading" data-slate-object="block" data-key="2101"><span 
data-slate-object="text" data-key="2102"><span data-slate-leaf="true" data-offset-key="2102:0" 
data-first-offset="true"><span data-slate-string="true">3. 三选二 ？</span></span></span></h3> 
<div class="se-2d89d578 " data-slate-type="paragraph" data-slate-object="block" data-key="2103"> 
<span data-slate-object="text" data-key="2104"><span data-slate-leaf="true" data-offset-key="2104:0" 
data-first-offset="true"><span data-slate-string="true">紧接着我要谈一谈对于 CAP 理论一个很大的误解——三选二。从上面对于 
CAP 的描述来看， CAP 的应用似乎就是一个三选二的选择题，但事实上，完全不是这样的。</span></span></span> </div> <div class="se-dbf6c945 
" data-slate-type="paragraph" data-slate-object="block" data-key="2105"> <span data-slate-object="text" 
data-key="2106"><span data-slate-leaf="true" data-offset-key="2106:0" data-first-offset="true"><span 
data-slate-string="true">开门见山地说，</span></span></span><span data-slate-object="text" data-key="2107"><span 
data-slate-leaf="true" data-offset-key="2107:0" data-first-offset="true"><span class="se-bed370e5" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">在讨论 CAP 定理的时候，P，也就是分区容忍性，是必选项。</span></span></span></span><span 
data-slate-object="text" data-key="2108"><span data-slate-leaf="true" data-offset-key="2108:0" 
data-first-offset="true"><span data-slate-string="true">具体来说，跨区域的系统，分区容忍性往往是不可以拿掉的，因为无论是硬件损坏、机房断电，还是地震海啸，都是无法预料、无法避免的，任何时间都可能出现网络故障而发生分区，因此工程师能做的，就是从 
CP 和 AP 中选择合适的那一个。</span></span></span> </div> <div class="se-a3a09fde " data-slate-type="paragraph" 
data-slate-object="block" data-key="2109"> <span data-slate-object="text" data-key="2110"><span 
data-slate-leaf="true" data-offset-key="2110:0" data-first-offset="true"><span data-slate-string="true">你可以想想上面我拿图示举的那个例子，在分区发生的时候，最多只能保证一致性和可用性一个。也就是说，CAP 
理论不是三选二的，而是二选一，当然，具体选哪个，我们需要“权衡”。</span></span></span> </div> <div class="se-2e93da40 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2111"> <span data-slate-object="text" data-key="2112"><span 
data-slate-leaf="true" data-offset-key="2112:0" data-first-offset="true"><span data-slate-string="true">需要特别说明的是，</span></span></span><span 
data-slate-object="text" data-key="2113"><span data-slate-leaf="true" data-offset-key="2113:0" 
data-first-offset="true"><span class="se-2a2445b1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这里说的是只能“保证”一致性和可用性二者之一，而不是说，在系统正常运行时，二者不可能“同时满足”。</span></span></span></span><span 
data-slate-object="text" data-key="2114"><span data-slate-leaf="true" data-offset-key="2114:0" 
data-first-offset="true"><span data-slate-string="true">在系统运行正常的时候，网络分区没有出现，那么技术上我们是可能同时满足一致性和可用性两者的。</span></span></span> 
</div> <div class="se-4d0eb7c1 " data-slate-type="paragraph" data-slate-object="block" data-key="2115"> 
<span data-slate-object="text" data-key="2116"><span data-slate-leaf="true" data-offset-key="2116:0" 
data-first-offset="true"><span data-slate-string="true">这时你可能会问，难道没有 CA，即同时“保证”一致性和可用性，而牺牲掉分区容忍性的系统吗？</span></span></span> 
</div> <div class="se-50ad8753 " data-slate-type="paragraph" data-slate-object="block" data-key="2117"> 
<span data-slate-object="text" data-key="2118"><span data-slate-leaf="true" data-offset-key="2118:0" 
data-first-offset="true"><span data-slate-string="true">有！</span></span></span><span data-slate-object="text" 
data-key="2119"><span data-slate-leaf="true" data-offset-key="2119:0" data-first-offset="true"><span 
class="se-83e76ecc" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">但请注意，那其实已经不是 
CAP 理论关心的对象了，因为 CAP 要求的是节点间的数据交换和数据共享。</span></span></span></span><span data-slate-object="text" 
data-key="2120"><span data-slate-leaf="true" data-offset-key="2120:0" data-first-offset="true"><span 
data-slate-string="true">任何时候都不会有分区发生，这种系统基本上有这样两种形式：</span></span></span> </div> <div class="se-efda4e6f" 
data-slate-type="list" data-slate-object="block" data-key="2121"> <div class="se-e5693294 se-3c56f0bb" 
data-slate-type="list-line" data-slate-object="block" data-key="2122"> <span data-slate-object="text" 
data-key="2123"><span data-slate-leaf="true" data-offset-key="2123:0" data-first-offset="true"><span 
class="se-5b6b373f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">单节点系统</span></span></span></span><span 
data-slate-object="text" data-key="2124"><span data-slate-leaf="true" data-offset-key="2124:0" 
data-first-offset="true"><span data-slate-string="true">，这很好理解，没有节点间数据的交换，那么无论网络出不出故障，系统始终只包含一个节点。比方说，传统的关系型数据库，像 
MySQL 或者 OracleDB，在单节点的配置下。</span></span></span> </div> <div class="se-a7fd697d se-b587a492" 
data-slate-type="list-line" data-slate-object="block" data-key="2125"> <span data-slate-object="text" 
data-key="2126"><span data-slate-leaf="true" data-offset-key="2126:0" data-first-offset="true"><span 
class="se-742e61f2" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">虽然是多节点，但是节点间没有数据共享和数据交换</span></span></span></span><span 
data-slate-object="text" data-key="2127"><span data-slate-leaf="true" data-offset-key="2127:0" 
data-first-offset="true"><span data-slate-string="true">——即节点上的数据不需要拷贝到其它节点上。比方说，无数据副本（Replica）配置的集群 
Elasticsearch 或 Memcached，在经过 hash 以后，每个节点都存放着单份不同的数据。这种情况看起来也算分布式存储，但是节点之间是互相独立的。</span></span></span> 
</div> </div> <h2 class="se-fe58bddb" data-slate-type="heading" data-slate-object="block" data-key="2128"><span 
data-slate-object="text" data-key="2129"><span data-slate-leaf="true" data-offset-key="2129:0" 
data-first-offset="true"><span data-slate-string="true">存储技术的选择：NoSQL 三角形</span></span></span></h2> 
<div class="se-71017131 " data-slate-type="paragraph" data-slate-object="block" data-key="2130"> 
<span data-slate-object="text" data-key="2131"><span data-slate-leaf="true" data-offset-key="2131:0" 
data-first-offset="true"><span data-slate-string="true">在谈到根据 CAP 来选择技术的时候，我想先来介绍一下 NoSQL，你将会看到它们大量地分布在下面“NoSQL 
三角形”的 CP 和 AP 两条边上。</span></span></span> </div> <div class="se-507b2583 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2132"> <span data-slate-object="text" data-key="2133"><span 
data-slate-leaf="true" data-offset-key="2133:0" data-first-offset="true"><span data-slate-string="true">那么，到底什么是 
NoSQL 呢？我们可以简单地认为，NoSQL 是“非关系数据库”，和它相对应的是传统的“关系数据库”。它被设计出来的目的，并非要取代关系数据库，而是成为关系数据库的补充，即“Not 
Only SQL”。</span></span></span> </div> <div class="se-ee3972a9 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2134"> <span data-slate-object="text" data-key="2135"><span 
data-slate-leaf="true" data-offset-key="2135:0" data-first-offset="true"><span data-slate-string="true">也就是说，它放弃了对于“关系”的支持，</span></span></span><span 
data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span class="se-5e295b79" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">损失了强结构定义和关系查询等能力，但是它往往可以具备比关系数据库高得多的性能和横向扩展性（scalability）等优势。</span></span></span></span><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span data-slate-string="true">这在 Web 2.0 时代对于一些关系数据库不擅长的场景，例如数据量巨大，数据之间的关联关系较弱，数据结构（schema）多变，强可用性要求和低一致性要求等等，NoSQL 
可以发挥其最大的价值。</span></span></span> </div> <div class="se-5abfb6df " data-slate-type="paragraph" 
data-slate-object="block" data-key="2138"> <span data-slate-object="text" data-key="2139"><span 
data-slate-leaf="true" data-offset-key="2139:0" data-first-offset="true"><span data-slate-string="true">在实际业务中，我们可以利用 
CAP 定理来权衡和帮助选择合适的存储技术，且看下面这张 NoSQL 系统的 CAP 三角形（来自 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2140" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="2141"><span data-slate-leaf="true" data-offset-key="2141:0" data-first-offset="true"><span 
data-slate-string="true">Visual Guide to NoSQL Systems</span></span></span></a><span data-slate-object="text" 
data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" data-first-offset="true"><span 
data-slate-string="true">）。尺有所短，寸有所长，我们可以从 CAP 的角度来理解这些技术的优劣。</span></span></span> </div> <div 
class="se-9f073759" data-slate-type="image" data-slate-object="block" data-key="2143"> <img 
class="se-3c0938fe" src="https://static001.geekbang.org/resource/image/90/52/90a6c7ddb6556fa206f95a80a7a6c652.jpg"> 
</div> <div class="se-8e792848 " data-slate-type="paragraph" data-slate-object="block" data-key="2144"> 
<span data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span data-slate-string="true">从图中可以发现，关系数据几乎都落在了 CA 一侧，但是请注意，技术也在不断更新，许多关系数据库如今也可以通过配置而形成其它节点的数据冗余；有时，我们则是在其上方自己实现数据冗余，比如配置数据库的数据同步到备份数据库。</span></span></span> 
</div> <div class="se-6f4b7603 " data-slate-type="paragraph" data-slate-object="block" data-key="2146"> 
<span data-slate-object="text" data-key="2147"><span data-slate-leaf="true" data-offset-key="2147:0" 
data-first-offset="true"><span data-slate-string="true">无论哪一种方法，一旦其它节点用于数据冗余的数据副本出现，这个存储系统就落到上述三角形的另外两边去了。</span></span></span> 
</div> <div class="se-afbcd395 " data-slate-type="paragraph" data-slate-object="block" data-key="2148"> 
<span data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span data-slate-string="true">云上的 NoSQL 存储服务，多数落在了 AP 一侧，这也和 NoSQL 
运动可用性优先保证而降级一致性的主题符合。比如 Amazon 的 DynamoDB，但是这个也是可以通过不同的设置选项来改变的，比如 DynamoDB 默认采用最终一致性，但也允许配置为强一致性，那时它就落到了 
CP 上面。</span></span></span> </div> <h3 class="se-9ff094d2" data-slate-type="heading" data-slate-object="block" 
data-key="2150"><span data-slate-object="text" data-key="2151"><span data-slate-leaf="true" 
data-offset-key="2151:0" data-first-offset="true"><span data-slate-string="true">实际场景</span></span></span></h3> 
<div class="se-db7c32a4 " data-slate-type="paragraph" data-slate-object="block" data-key="2152"> 
<span data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">接着我们考虑几个实际应用场景，看看该采用哪一条边的技术呢？既然是基于 
Web 的全栈工程师的技术学习，我就来举两个基于网站应用的例子。</span></span></span> </div> <div class="se-1d05b047 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2154"> <span data-slate-object="text" data-key="2155"><span 
data-slate-leaf="true" data-offset-key="2155:0" data-first-offset="true"><span data-slate-string="true">还记得我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2156" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2157"><span data-slate-leaf="true" data-offset-key="2157:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2158"><span data-slate-leaf="true" data-offset-key="2158:0" 
data-first-offset="true"><span data-slate-string="true"> 中谈到的页面聚合吗？对于门户网站来说，无论是显示的数据，还是图片、样式等等静态资源，通过 
CDN 的方式，都可以把副本存放在离用户较近的节点，这样它们的获取可以减少延迟，提高用户体验。因此，这些系统联合起来，就形成了一个可以使用 CAP 讨论的分布式系统。</span></span></span> 
</div> <div class="se-a019917c " data-slate-type="paragraph" data-slate-object="block" data-key="2159"> 
<span data-slate-object="text" data-key="2160"><span data-slate-leaf="true" data-offset-key="2160:0" 
data-first-offset="true"><span data-slate-string="true">那么，很容易理解的是，且不用说网络故障而发生分区的情况，即便在正常情况下，这些信息并不需要具备那么严格的“即时性”，新闻早显示、晚显示几秒钟，乃至几分钟，都不是什么问题，上海的读者比北京的读者晚看到一会儿，也不是什么问题。但是，大型网站页面打不开，就是一个问题了，这显然会影响用户的体验。因此，从这个角度说，我们可以牺牲一致性，但需要尽量保证可用性，因此这是一个选择 
AP 的例子。</span></span></span> </div> <div class="se-a6a7aa03 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2161"> <span data-slate-object="text" data-key="2162"><span data-slate-leaf="true" 
data-offset-key="2162:0" data-first-offset="true"><span data-slate-string="true">事实上，对于大型的系统而言，我们往往不需要严格的一致性，但是我们希望保证可用性，因此在大多数情况下我们都会选择 
AP。但是，有时情况却未必如此。</span></span></span> </div> <div class="se-23bb7246 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2163"> <span data-slate-object="text" data-key="2164"><span 
data-slate-leaf="true" data-offset-key="2164:0" data-first-offset="true"><span data-slate-string="true">再举一个例子，航空公司卖机票，在不考虑超售的情况下，一座一票，航空公司的网站当然可以采用上面类似的做法；有时，甚至在正常的情况下，余票的显示都可以不是非常准确的（比如显示“有票”可以避免显示这个具体数字）。但是，当客户真正在选座售票的时候，即扣款和出票的时候就不是这样的了，一致性必须优先保证。因为如果可用性保证不了，即有时候订票失败，用户最多也就是牢骚几句，这还可以接受，但要是出现一致性问题，即两个人订了同一个座位的票，那就是很严重的问题了。</span></span></span> 
</div> <div class="se-324952e7 " data-slate-type="paragraph" data-slate-object="block" data-key="2165"> 
<span data-slate-object="text" data-key="2166"><span data-slate-leaf="true" data-offset-key="2166:0" 
data-first-offset="true"><span data-slate-string="true">最后，我想说的是，这里的选择是一个带有灰度的过程，并非只有 0 和 1 
这两个绝对的答案，我们还是需要具体问题具体分析，不要一刀切。</span></span></span> </div> <div class="se-7ba58467 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2167"> <span data-slate-object="text" data-key="2168"><span 
data-slate-leaf="true" data-offset-key="2168:0" data-first-offset="true"><span class="se-f5d113ac" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">从特性上说，甚至可以部分特性做到 
CP，部分做到 AP，这都是有可能的。</span></span></span></span><span data-slate-object="text" data-key="2169"><span 
data-slate-leaf="true" data-offset-key="2169:0" data-first-offset="true"><span data-slate-string="true">比如说，涉及钱的问题一定是 
CP 吗？不一定，ATM 机就是一个很经典的例子，在网络故障发生时，ATM 会处于 stand-alone 模式，在这种模式下，用户依然可以执行查询余额等操作（很可能数额不准确），甚至还可以取款，但是这时的取款会有所限制，例如限制一个额度（银行承担风险），或者是限制只能给某些银行的卡取款，毕竟可用性和一致性的丢失会带来不同的风险和后果，两害相权取其轻。</span></span></span> 
</div> <h2 class="se-dad141d9" data-slate-type="heading" data-slate-object="block" data-key="2170"><span 
data-slate-object="text" data-key="2171"><span data-slate-leaf="true" data-offset-key="2171:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-f6980603 " data-slate-type="paragraph" data-slate-object="block" data-key="2172"> 
<span data-slate-object="text" data-key="2173"><span data-slate-leaf="true" data-offset-key="2173:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习和理解了 CAP 理论，并且了解了一些实际应用的例子。希望你能够通过今天的内容，彻底掌握其原理，并能够逐渐在设计中应用起来，特别是在技术选型做“权衡”的时候。</span></span></span> 
</div> <div class="se-0f94c6da " data-slate-type="paragraph" data-slate-object="block" data-key="2174"> 
<span data-slate-object="text" data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" 
data-first-offset="true"><span data-slate-string="true">现在，我们来看一下今天的思考题吧：</span></span></span> 
</div> <div class="se-d6d16b00" data-slate-type="list" data-slate-object="block" data-key="2176"> 
<div class="se-98bc4e3a se-870a2a93" data-slate-type="list-line" data-slate-object="block" 
data-key="2177"> <span data-slate-object="text" data-key="2178"><span data-slate-leaf="true" 
data-offset-key="2178:0" data-first-offset="true"><span data-slate-string="true">你是否了解或是接触过分布式系统，特别是分布式存储系统，它是否能归类到 
NoSQL 三角形中的某一条边上呢？</span></span></span> </div> <div class="se-9af0b8ac se-01407cf6" data-slate-type="list-line" 
data-slate-object="block" data-key="2179"> <span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">互联网上的绝大多数系统都是可以牺牲一致性，而优先保证可用性的，但也有一些例外。你能举出几个即便牺牲可用性，也要保证数据一致性的例子来吗？</span></span></span> 
</div> </div> <div class="se-8205a713 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2181"> <span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" 
data-offset-key="2182:0" data-first-offset="true"><span data-slate-string="true">今天的主要内容就到这里，欢迎你在留言区进行讨论，也欢迎你继续学习下面的选修课堂。</span></span></span> 
</div> <h2 class="se-b64d87b3" data-slate-type="heading" data-slate-object="block" data-key="2183"><span 
data-slate-object="text" data-key="2184"><span data-slate-leaf="true" data-offset-key="2184:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：从 ACID 到 BASE</span></span></span></h2> 
<div class="se-cdde2f74 " data-slate-type="paragraph" data-slate-object="block" data-key="2185"> 
<span data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">ACID 和 BASE，正好是英文里“酸”和“碱”的意思。有意思的是，关系数据库和非关系数据库，它们各自的重要特性，也恰恰可以用酸和碱来体现。下面我来简单做个比较，你可以从中感受一下二者的差异和对立性，为我们后两讲介绍技术选型打下基础。</span></span></span> 
</div> <div class="se-d17428e2 " data-slate-type="paragraph" data-slate-object="block" data-key="2187"> 
<span data-slate-object="text" data-key="2188"><span data-slate-leaf="true" data-offset-key="2188:0" 
data-first-offset="true"><span data-slate-string="true">先说说 ACID。</span></span></span> </div> 
<div class="se-0072424a " data-slate-type="paragraph" data-slate-object="block" data-key="2189"> 
<span data-slate-object="text" data-key="2190"><span data-slate-leaf="true" data-offset-key="2190:0" 
data-first-offset="true"><span data-slate-string="true">关系数据库的一大优势，就是可以通过事务的支持来实现强一致性，而事务，通常可以包含这样几个特性。</span></span></span> 
</div> <div class="se-f0994de6" data-slate-type="list" data-slate-object="block" data-key="2191"> 
<div class="se-8598c06e se-bd528b47" data-slate-type="list-line" data-slate-object="block" 
data-key="2192"> <span data-slate-object="text" data-key="2193"><span data-slate-leaf="true" 
data-offset-key="2193:0" data-first-offset="true"><span data-slate-string="true">Atomicity：原子性，指的是无论事务执行的过程有多么复杂，要么提交成功改变状态，要么提交失败回滚到提交前的状态，这些过程是原子化的，不存在第三种状态。</span></span></span> 
</div> <div class="se-a66158ce se-3119a3ff" data-slate-type="list-line" data-slate-object="block" 
data-key="2194"> <span data-slate-object="text" data-key="2195"><span data-slate-leaf="true" 
data-offset-key="2195:0" data-first-offset="true"><span data-slate-string="true">Consistency：一致性，这里的一致性和我们前面介绍的一致性含义略有不同，它指的是事务开始前、结束后，数据库的完整性都没有被破坏，所有键、数据类型、检查、触发器等等都依然有效。</span></span></span> 
</div> <div class="se-65d94ceb se-e83b6ab1" data-slate-type="list-line" data-slate-object="block" 
data-key="2196"> <span data-slate-object="text" data-key="2197"><span data-slate-leaf="true" 
data-offset-key="2197:0" data-first-offset="true"><span data-slate-string="true">Isolation：隔离性，指的是多个并发事务同一时间对于数据进行读写的能力，同时执行，互不影响。事务隔离分为四大级别，不同的数据库默认实现在不同的级别，我在扩展阅读中放置了一些学习材料，感兴趣的话可以进一步学习。</span></span></span> 
</div> <div class="se-0cada005 se-27005c01" data-slate-type="list-line" data-slate-object="block" 
data-key="2198"> <span data-slate-object="text" data-key="2199"><span data-slate-leaf="true" 
data-offset-key="2199:0" data-first-offset="true"><span data-slate-string="true">Durability：持久性，一旦事务成功提交，那么改变是永久性的。</span></span></span> 
</div> </div> <div class="se-a41e323b " data-slate-type="paragraph" data-slate-object="block" 
data-key="2200"> <span data-slate-object="text" data-key="2201"><span data-slate-leaf="true" 
data-offset-key="2201:0" data-first-offset="true"><span data-slate-string="true">接着说说 BASE。</span></span></span> 
</div> <div class="se-645c784f " data-slate-type="paragraph" data-slate-object="block" data-key="2202"> 
<span data-slate-object="text" data-key="2203"><span data-slate-leaf="true" data-offset-key="2203:0" 
data-first-offset="true"><span data-slate-string="true">前面已经谈到了 NoSQL，CAP、最终一致性，再加上 BASE，被称作 
NoSQL 的三大基石。而 BASE，是基于 CAP 衍生出来，对于其牺牲一致性和保证可用性的这一分支，落实到具体实践中的经验总结，在大规模互联网分布式系统的设计中具有指导意义。</span></span></span> 
</div> <div class="se-963520ab" data-slate-type="list" data-slate-object="block" data-key="2204"> 
<div class="se-e5e455d8 se-0402bf3e" data-slate-type="list-line" data-slate-object="block" 
data-key="2205"> <span data-slate-object="text" data-key="2206"><span data-slate-leaf="true" 
data-offset-key="2206:0" data-first-offset="true"><span data-slate-string="true">BA：基本可用，即 
Basically Available。这就是说，为了保障核心特性的“基本可用”，无论是次要特性的功能上，还是性能上，都可以牺牲。严格说来，这都是在“可用性”方面做的妥协。例如电商网站在双十一等访问压力较大的期间，可以关闭某一些次要特性，将购物支付等核心特性保证起来。如果你还记得 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2207" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2208"><span data-slate-leaf="true" data-offset-key="2208:0" 
data-first-offset="true"><span data-slate-string="true">[第 17 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2209"><span data-slate-leaf="true" data-offset-key="2209:0" 
data-first-offset="true"><span data-slate-string="true"> 中的“优雅降级”，那么你应该知道，这里说的就是优雅降级中一个常见的应用场景。</span></span></span> 
</div> <div class="se-3d994dca se-d053043f" data-slate-type="list-line" data-slate-object="block" 
data-key="2210"> <span data-slate-object="text" data-key="2211"><span data-slate-leaf="true" 
data-offset-key="2211:0" data-first-offset="true"><span data-slate-string="true">S：软状态，即 Soft 
State。说的是允许系统中的数据存在中间状态，这也一样，为了可用性，而牺牲了一致性。</span></span></span> </div> <div class="se-3c09f5dc 
se-2401c1b5" data-slate-type="list-line" data-slate-object="block" data-key="2212"> <span data-slate-object="text" 
data-key="2213"><span data-slate-leaf="true" data-offset-key="2213:0" data-first-offset="true"><span 
data-slate-string="true">E：最终一致性，即 Eventually Consistent。S 和 E 两点其实说的是一个事情，一致性的牺牲是可行且有限度的，某个数据变更后的时间窗口内出现了不一致的情况，但是之后数据会恢复到一致的状态。举例来说，上文提到过的 
CDN 系统便是如此，再比如社交媒体发布后的互动，像点赞、评论等功能，这些数据可以延迟一会儿显示，但是超过了一定的时间窗口还不同步到就会是问题。</span></span></span> 
</div> </div> <h2 class="se-8f9a40ac" data-slate-type="heading" data-slate-object="block" data-key="2214"><span 
data-slate-object="text" data-key="2215"><span data-slate-leaf="true" data-offset-key="2215:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-d02f5f8f" data-slate-type="list" data-slate-object="block" data-key="2216"> <div 
class="se-79729d5f se-e77e8c16" data-slate-type="list-line" data-slate-object="block" data-key="2217"> 
<a data-slate-type="link" data-slate-object="inline" data-key="2218" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" 
data-first-offset="true"><span data-slate-string="true">Towards Robust Distributed Systems</span></span></span></a><span 
data-slate-object="text" data-key="2220"><span data-slate-leaf="true" data-offset-key="2220:0" 
data-first-offset="true"><span data-slate-string="true">，这是一个胶片，来自 Eric Brewer 最早谈及 CAP 理论的一个分享；而 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2221" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="2222"><span data-slate-leaf="true" data-offset-key="2222:0" 
data-first-offset="true"><span data-slate-string="true">Brewer’s CAP Theorem</span></span></span></a><span 
data-slate-object="text" data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" 
data-first-offset="true"><span data-slate-string="true">，这一篇是对 CAP 理论证明的论文，想看中文的话可以看看这篇</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2224" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">中文译文</span></span></span></a><span 
data-slate-object="text" data-key="2226"><span data-slate-leaf="true" data-offset-key="2226:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-306dd2b7 se-b3b30d3f" data-slate-type="list-line" data-slate-object="block" data-key="2227"> 
<span data-slate-object="text" data-key="2228"><span data-slate-leaf="true" data-offset-key="2228:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 NoSQL 的概念，CAP 的三角形一图中也有一些实现的例子，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2229" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2230"><span data-slate-leaf="true" data-offset-key="2230:0" 
data-first-offset="true"><span data-slate-string="true">NoSQL Databases</span></span></span></a><span 
data-slate-object="text" data-key="2231"><span data-slate-leaf="true" data-offset-key="2231:0" 
data-first-offset="true"><span data-slate-string="true"> 这个网站列出了比较全面的 NoSQL 数据库列表，可供查询。</span></span></span> 
</div> <div class="se-8cbc431a se-4c4b2103" data-slate-type="list-line" data-slate-object="block" 
data-key="2232"> <span data-slate-object="text" data-key="2233"><span data-slate-leaf="true" 
data-offset-key="2233:0" data-first-offset="true"><span data-slate-string="true">文中提到了某些存储服务能够通过配置在 
CAP 的三角形上切换。比如 DynamoDB，它是一个 NoSQL 的键 / 值文档数据库，就可以配置为 CP，也可以配置为 AP，官方的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2234" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2235"><span data-slate-leaf="true" data-offset-key="2235:0" 
data-first-offset="true"><span data-slate-string="true">读取一致性</span></span></span></a><span 
data-slate-object="text" data-key="2236"><span data-slate-leaf="true" data-offset-key="2236:0" 
data-first-offset="true"><span data-slate-string="true">这篇文章做了简要说明；再比如 S3，它是一个云上的对象存储服务，它的一致性根据对象创建和对象修改而有所不同，你可以看一下</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2237" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2238"><span data-slate-leaf="true" data-offset-key="2238:0" 
data-first-offset="true"><span data-slate-string="true">官方的这个说明</span></span></span></a><span 
data-slate-object="text" data-key="2239"><span data-slate-leaf="true" data-offset-key="2239:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-7df1841c se-802e4653" data-slate-type="list-line" data-slate-object="block" data-key="2240"> 
<span data-slate-object="text" data-key="2241"><span data-slate-leaf="true" data-offset-key="2241:0" 
data-first-offset="true"><span data-slate-string="true">如果对 BASE 感兴趣，你可以看看这篇最原始的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2242" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2243"><span data-slate-leaf="true" data-offset-key="2243:0" 
data-first-offset="true"><span data-slate-string="true">Base: An Acid Alternative</span></span></span></a><span 
data-slate-object="text" data-key="2244"><span data-slate-leaf="true" data-offset-key="2244:0" 
data-first-offset="true"><span data-slate-string="true">，想看中文译文的话可以看看</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2245" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2246"><span data-slate-leaf="true" data-offset-key="2246:0" 
data-first-offset="true"><span data-slate-string="true">这篇</span></span></span></a><span data-slate-object="text" 
data-key="2247"><span data-slate-leaf="true" data-offset-key="2247:0" data-first-offset="true"><span 
data-slate-string="true">。</span></span></span> </div> <div class="se-66d76c24 se-17239546" 
data-slate-type="list-line" data-slate-object="block" data-key="2248"> <span data-slate-object="text" 
data-key="2249"><span data-slate-leaf="true" data-offset-key="2249:0" data-first-offset="true"><span 
data-slate-string="true">对于文中提到的事务隔离，感兴趣可以进一步参见</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="2250" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="2251"><span data-slate-leaf="true" data-offset-key="2251:0" data-first-offset="true"><span 
data-slate-string="true">维基百科</span></span></span></a><span data-slate-object="text" data-key="2252"><span 
data-slate-leaf="true" data-offset-key="2252:0" data-first-offset="true"><span data-slate-string="true">，还有一篇美团技术团队写的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2253" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="2254"><span data-slate-leaf="true" data-offset-key="2254:0" 
data-first-offset="true"><span data-slate-string="true">Innodb 中的事务隔离级别和锁的关系</span></span></span></a><span 
data-slate-object="text" data-key="2255"><span data-slate-leaf="true" data-offset-key="2255:0" 
data-first-offset="true"><span data-slate-string="true">，也是很好的针对事务隔离的学习材料。</span></span></span> 
</div> </div> <div class="se-e269788d" data-slate-type="image" data-slate-object="block" data-key="2256"> 
<img class="se-8066cd69" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 2 msec}
2020-11-19 11:13:56.442 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=23 
 {executed in 0 msec}
2020-11-19 11:13:56.442 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:13:56.444 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=23 
 {executed in 1 msec}
2020-11-19 11:13:56.444 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:13:56.446 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755636, 1605755636, 1, 'zh-hans', 0, 1, 1, 
0, '24丨尺有所短，寸有所长：CAP和数据存储技术选择', 1, 23, 23) 
 {executed in 1 msec}
2020-11-19 11:13:56.450 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=23 
 {executed in 0 msec}
2020-11-19 11:13:56.450 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:13:56.453 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755636, 1605755636, 1, 'zh-hans', 0, 
1, 1, 0, '24丨尺有所短，寸有所长：CAP和数据存储技术选择', 'book', 1, 23, 23) 
 {executed in 2 msec}
2020-11-19 11:13:56.456 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.457 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:56.457 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.457 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:56.460 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/56b7abb74b991bfc01d8daa6a201cedf?bkt=en-06f5c65000af0ed6cf391d9987ff1c7d49b268d0e2d7238ddc4f49b993c4dbbe6acc327878ad5eb2&fid=3757516097-778750-342183480050886&time=1605755635&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-FbD2e9d7wLhRMb1x49fmMJVs2l0%3D&to=92&size=16098707&sta_dx=16098707&sta_cs=3426&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854462&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16098707&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-db2acf3e28c7865ebeddfaff4daed586f37be3fcb28d2f00c3aa86809321853841170dd8a08d2c70&sl=76480590&expires=8h&rt=pr&r=781993201&mlogid=7502136082562330854&vbdid=2247232042&fin=24%E4%B8%A8%E5%B0%BA%E6%9C%89%E6%89%80%E7%9F%AD%EF%BC%8C%E5%AF%B8%E6%9C%89%E6%89%80%E9%95%BF%EF%BC%9ACAP%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.m4a&bflag=92,34-92&rtype=1&dp-logid=7502136082562330854&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b12cf09d202f93a41add58274f97593415&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=24%E4%B8%A8%E5%B0%BA%E6%9C%89%E6%89%80%E7%9F%AD%EF%BC%8C%E5%AF%B8%E6%9C%89%E6%89%80%E9%95%BF%EF%BC%9ACAP%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.m4a', 
23, 23) 
 {executed in 2 msec}
2020-11-19 11:13:56.464 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 11:13:56.464 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:13:56.465 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/56b7abb74b991bfc01d8daa6a201cedf?bkt=en-06f5c65000af0ed6cf391d9987ff1c7d49b268d0e2d7238ddc4f49b993c4dbbe6acc327878ad5eb2&fid=3757516097-778750-342183480050886&time=1605755635&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-FbD2e9d7wLhRMb1x49fmMJVs2l0%3D&to=92&size=16098707&sta_dx=16098707&sta_cs=3426&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854462&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16098707&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-db2acf3e28c7865ebeddfaff4daed586f37be3fcb28d2f00c3aa86809321853841170dd8a08d2c70&sl=76480590&expires=8h&rt=pr&r=781993201&mlogid=7502136082562330854&vbdid=2247232042&fin=24%E4%B8%A8%E5%B0%BA%E6%9C%89%E6%89%80%E7%9F%AD%EF%BC%8C%E5%AF%B8%E6%9C%89%E6%89%80%E9%95%BF%EF%BC%9ACAP%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.m4a&bflag=92,34-92&rtype=1&dp-logid=7502136082562330854&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=8525e99dbc6685b12cf09d202f93a41add58274f97593415&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=24%E4%B8%A8%E5%B0%BA%E6%9C%89%E6%89%80%E7%9F%AD%EF%BC%8C%E5%AF%B8%E6%9C%89%E6%89%80%E9%95%BF%EF%BC%9ACAP%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.m4a', 
23, 23) 
 {executed in 0 msec}
2020-11-19 11:13:56.468 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.469 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:56.469 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.469 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:56.471 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-04 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 我在某银行的省级分行工作。大体上，账务核心是全国集中的，标准银行业务从粗力度上看直接与核心发生交互，而对于分省的特色业务，是通过分行接入核心进行账务交易，分行系统与三方商户进行交互和资金清算。分行会记录金融交易的状态，商户也会记录状态。 
<br>从记录金融交易状态这一点来看，总行核心、分行交易系统、商户IT系统算是构成了一个分布式的存储吧。 <br> <br>其实这不是第一次听到CAP这个理论，但今天在听到老师的问题时，突然觉得日常交易配置中的种种风格都可以用CAP或者BASE理论来解释。(ACID在上述某个节点如分行系统内部运行，这里不讨论了)。 
<br> <br>比如，发生账务交易时，是先在总行账务核心进行还是先去商户进行业务处理等。 <br> <br>分区容忍性对应到我的业务场景，就是交易未明，这时分行会进行冲正（先冲正核心或者先冲正商户系统）或者先查询再冲正，如果此时网络恢复，则强一致性得到了满足。但如果经过一定次数的重试后仍然未明，就只能依赖于第二天的对账来进行了，此时业务柜员会进行手工处理。 
<br> <br>所以，从这个角度上来说，上面三个节点系统保障的是最终一致性，适用于BASE。而银行核心的内部节点间适用于CAP的CP。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
说得很好 :) 感谢。<br><br>即便如银行，在一些出现网络分区的场景下依然优先保证可用性，而可以牺牲一致性。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 11:13:56.474 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.475 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:13:56.477 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>tt</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-11-04 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 我在某银行的省级分行工作。大体上，账务核心是全国集中的，标准银行业务从粗力度上看直接与核心发生交互，而对于分省的特色业务，是通过分行接入核心进行账务交易，分行系统与三方商户进行交互和资金清算。分行会记录金融交易的状态，商户也会记录状态。 
<br>从记录金融交易状态这一点来看，总行核心、分行交易系统、商户IT系统算是构成了一个分布式的存储吧。 <br> <br>其实这不是第一次听到CAP这个理论，但今天在听到老师的问题时，突然觉得日常交易配置中的种种风格都可以用CAP或者BASE理论来解释。(ACID在上述某个节点如分行系统内部运行，这里不讨论了)。 
<br> <br>比如，发生账务交易时，是先在总行账务核心进行还是先去商户进行业务处理等。 <br> <br>分区容忍性对应到我的业务场景，就是交易未明，这时分行会进行冲正（先冲正核心或者先冲正商户系统）或者先查询再冲正，如果此时网络恢复，则强一致性得到了满足。但如果经过一定次数的重试后仍然未明，就只能依赖于第二天的对账来进行了，此时业务柜员会进行手工处理。 
<br> <br>所以，从这个角度上来说，上面三个节点系统保障的是最终一致性，适用于BASE。而银行核心的内部节点间适用于CAP的CP。 </div> <div class="_2r3UB1GX_0"> 
<span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 
说得很好 :) 感谢。<br><br>即便如银行，在一些出现网络分区的场景下依然优先保证可用性，而可以牺牲一致性。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 23, 23) 
 {executed in 0 msec}
2020-11-19 11:13:56.480 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 11:13:56.480 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:56.481 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=23 
 {executed in 0 msec}
2020-11-19 11:13:56.481 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:56.483 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 23, 'https://static001.geekbang.org/resource/image/d1/26/d1c13a9e40f253baa7113195782cc726.jpg', 
23) 
 {executed in 1 msec}
2020-11-19 11:13:56.487 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=23 
 {executed in 1 msec}
2020-11-19 11:13:56.487 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:13:56.489 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 23, 'https://static001.geekbang.org/resource/image/d1/26/d1c13a9e40f253baa7113195782cc726.jpg', 
23) 
 {executed in 1 msec}
2020-11-19 11:13:56.498 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=23 
 {executed in 3 msec}
2020-11-19 11:13:56.498 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:13:56.500 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 11:13:56.509 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=23 
 {executed in 3 msec}
2020-11-19 11:13:56.509 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:13:56.511 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 23, 23) 
 {executed in 1 msec}
2020-11-19 11:14:53.308 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='911224506662888' 
 {executed in 0 msec}
2020-11-19 11:14:53.309 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:14:53.310 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755693, 1) 
 {executed in 1 msec}
2020-11-19 11:14:53.310 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755693, 1) 
 {executed in 0 msec}
2020-11-19 11:14:53.310 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|24            |
|--------------|

2020-11-19 11:14:53.315 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '223d5216-f654-4ebe-9ead-3dddb8188af5', 
24) 
 {executed in 1 msec}
2020-11-19 11:14:53.315 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '223d5216-f654-4ebe-9ead-3dddb8188af5', 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.315 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|24            |
|--------------|

2020-11-19 11:14:53.321 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=24, revision_default=1, revision_timestamp=1605755693, 
revision_uid=1 where vid=24 
 {executed in 0 msec}
2020-11-19 11:14:53.327 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.328 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:14:53.329 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '911224506662888', 'zh-hans', 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.333 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.334 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:14:53.335 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '911224506662888', 'zh-hans', 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.338 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=24 
 {executed in 0 msec}
2020-11-19 11:14:53.339 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:14:53.339 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=24 
 {executed in 0 msec}
2020-11-19 11:14:53.340 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:14:53.341 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 24, 0, 0, 19, 0, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.344 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.345 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:14:53.345 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.346 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:14:53.349 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="1237" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-6e3a0b9a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1238"> <span data-slate-object="text" data-key="1239"><span data-slate-leaf="true" 
data-offset-key="1239:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-d0683b7f " data-slate-type="paragraph" data-slate-object="block" data-key="1240"> 
<span data-slate-object="text" data-key="1241"><span data-slate-leaf="true" data-offset-key="1241:0" 
data-first-offset="true"><span data-slate-string="true">我想你很可能已经使用过许多存储层的技术了，例如缓存、文件、关系数据库，甚至一些云上 
key-value 的存储服务，但就如同我之前提到的那样，某项具体技术总是相对好学，可对于全栈知识系统地学习，也包括持久层的学习，是一定要立足于技术的基础、原理和本质的。今天，我们要讲的就是其中之一 
—— 一致性（Consistency）。</span></span></span> </div> <div class="se-e74ddb98 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1242"> <span data-slate-object="text" data-key="1243"><span 
data-slate-leaf="true" data-offset-key="1243:0" data-first-offset="true"><span data-slate-string="true">数据的可用性和一致性是很多工程师几乎每天都会挂在嘴边的概念，在存储系统的技术选型上面，一致性将会是我们一个重要的衡量因素，而在持久层架构设计上面，它也将是最重要的思考维度。</span></span></span> 
</div> <div class="se-d7b6a63a " data-slate-type="paragraph" data-slate-object="block" data-key="1244"> 
<span data-slate-object="text" data-key="1245"><span data-slate-leaf="true" data-offset-key="1245:0" 
data-first-offset="true"><span data-slate-string="true">数据的一致性不但是数据持久化的一个核心内容，也是学习的一个难点，希望我们一起努力，从原理上去彻底理解它，并学习一些常见的应用模式，做到“知其然，知其所以然”，我们一起把这个难啃的骨头给啃下来。</span></span></span> 
</div> <h2 class="se-772520ac" data-slate-type="heading" data-slate-object="block" data-key="1246"><span 
data-slate-object="text" data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" 
data-first-offset="true"><span data-slate-string="true">概念和背景</span></span></span></h2> <div 
class="se-0b63aa5a " data-slate-type="paragraph" data-slate-object="block" data-key="1248"> 
<span data-slate-object="text" data-key="1249"><span data-slate-leaf="true" data-offset-key="1249:0" 
data-first-offset="true"><span data-slate-string="true">数据持久化，本质上就是把内存中的数据给转换并写入指定的存储系统中，这个过程是保证数据不丢失的基本方式，而这个存储系统可以具备很多种形式，可以是网络、硬盘文件，也可以是数据库，还可以是前面两讲提到的某种形式的缓存。</span></span></span> 
</div> <div class="se-4237e450 " data-slate-type="paragraph" data-slate-object="block" data-key="1250"> 
<span data-slate-object="text" data-key="1251"><span data-slate-leaf="true" data-offset-key="1251:0" 
data-first-offset="true"><span data-slate-string="true">你也许听说过对于一致性的不同解释，而我们在谈论数据持久化的时候讲到的一致性，我认为简单来说，指的就是在存储系统中，客户端对数据的读写行为都是可以预期、符合一定规则的。这里有两个值得注意的方面：</span></span></span> 
</div> <div class="se-008ca755" data-slate-type="list" data-slate-object="block" data-key="1252"> 
<div class="se-c8760f42 se-b2a29774" data-slate-type="list-line" data-slate-object="block" 
data-key="1253"> <span data-slate-object="text" data-key="1254"><span data-slate-leaf="true" 
data-offset-key="1254:0" data-first-offset="true"><span class="se-9bb15cbf" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">可以预期和符合规则，而不是说读到的数据是“一致的”“准确的”或是“最新的”</span></span></span></span><span 
data-slate-object="text" data-key="1255"><span data-slate-leaf="true" data-offset-key="1255:0" 
data-first-offset="true"><span data-slate-string="true">，是因为存在不同的一致性模型，数据对一致性遵从的程度和规则都不同，下文我会讲到。</span></span></span> 
</div> <div class="se-1125b4fd se-0f65f661" data-slate-type="list-line" data-slate-object="block" 
data-key="1256"> <span data-slate-object="text" data-key="1257"><span data-slate-leaf="true" 
data-offset-key="1257:0" data-first-offset="true"><span data-slate-string="true">一致性判断的视角要从客户端来看，也就是说，</span></span></span><span 
data-slate-object="text" data-key="1258"><span data-slate-leaf="true" data-offset-key="1258:0" 
data-first-offset="true"><span class="se-c1b22d2e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">存储系统实际存储的数据可以在某些时候不遵从我们所要求的一致性，而只需要保证存储系统的客户端能读取到一致的数据就可以了。</span></span></span></span><span 
data-slate-object="text" data-key="1259"><span data-slate-leaf="true" data-offset-key="1259:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，某一个数据更新的过程中，对于存储系统来说，新数据其实已经写入，但由于事务还未提交，这时客户端读到的还是老数据。</span></span></span> 
</div> </div> <div class="se-2dacc5cb " data-slate-type="paragraph" data-slate-object="block" 
data-key="1260"> <span data-slate-object="text" data-key="1261"><span data-slate-leaf="true" 
data-offset-key="1261:0" data-first-offset="true"><span data-slate-string="true">我想这个概念并没有什么特殊之处，但是，这里面隐含了一个事情，就是说，为什么要有数据备份呢？</span></span></span> 
</div> <div class="se-5ccce30b " data-slate-type="paragraph" data-slate-object="block" data-key="1262"> 
<span data-slate-object="text" data-key="1263"><span data-slate-leaf="true" data-offset-key="1263:0" 
data-first-offset="true"><span data-slate-string="true">为了可用性（Availability）。</span></span></span> 
</div> <div class="se-3a78c1a0 " data-slate-type="paragraph" data-slate-object="block" data-key="1264"> 
<span data-slate-object="text" data-key="1265"><span data-slate-leaf="true" data-offset-key="1265:0" 
data-first-offset="true"><span class="se-b493fb7e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">服务为了高可用，就要部署多个节点；数据为了高可用，就要存放多个备份。</span></span></span></span><span 
data-slate-object="text" data-key="1266"><span data-slate-leaf="true" data-offset-key="1266:0" 
data-first-offset="true"><span data-slate-string="true">这里的数据，既包括数据本身，又包括数据的读写服务，这是因为：</span></span></span> 
</div> <div class="se-0d7e98d1" data-slate-type="list" data-slate-object="block" data-key="1267"> 
<div class="se-efeae001 se-b7bdc555" data-slate-type="list-line" data-slate-object="block" 
data-key="1268"> <span data-slate-object="text" data-key="1269"><span data-slate-leaf="true" 
data-offset-key="1269:0" data-first-offset="true"><span data-slate-string="true">要让数据不丢失，冗余几乎是唯一的办法，因为再好的存储介质也架不住设备老化和各种原因的破坏；</span></span></span> 
</div> <div class="se-c89f5590 se-ce1c8aeb" data-slate-type="list-line" data-slate-object="block" 
data-key="1270"> <span data-slate-object="text" data-key="1271"><span data-slate-leaf="true" 
data-offset-key="1271:0" data-first-offset="true"><span data-slate-string="true">同理，为了数据访问服务能保持可用，包括保证足够的性能，必须要提供多个节点的读写操作服务，于是，我们不得不创建多个数据副本。</span></span></span> 
</div> </div> <div class="se-e0051987 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1272"> <span data-slate-object="text" data-key="1273"><span data-slate-leaf="true" 
data-offset-key="1273:0" data-first-offset="true"><span data-slate-string="true">那么一环扣一环，如果只有一份数据，是不存在一致性问题的，因为数据自己也只有一份，没法存在不一致，但有了数据副本，一致性就成为了课题。</span></span></span> 
</div> <h2 class="se-1227a2af" data-slate-type="heading" data-slate-object="block" data-key="1274"><span 
data-slate-object="text" data-key="1275"><span data-slate-leaf="true" data-offset-key="1275:0" 
data-first-offset="true"><span data-slate-string="true">一致性模型</span></span></span></h2> <div 
class="se-25833989 " data-slate-type="paragraph" data-slate-object="block" data-key="1276"> 
<span data-slate-object="text" data-key="1277"><span data-slate-leaf="true" data-offset-key="1277:0" 
data-first-offset="true"><span data-slate-string="true">你很可能已经听说过这三种一致性模型，下面我们来分别了解一下。</span></span></span> 
</div> <div class="se-17a7f1a6 " data-slate-type="paragraph" data-slate-object="block" data-key="1278"> 
<span data-slate-object="text" data-key="1279"><span data-slate-leaf="true" data-offset-key="1279:0" 
data-first-offset="true"><span class="se-1fa8a7f0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">强一致性（Strong Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" data-first-offset="true"><span 
data-slate-string="true">强一致性要求任意时间下，读操作总是能取得最近一次写操作写入的数据。</span></span></span> </div> <div 
class="se-60a5e3d4 " data-slate-type="paragraph" data-slate-object="block" data-key="1281"> 
<span data-slate-object="text" data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" 
data-first-offset="true"><span data-slate-string="true">注意，这里依然是从存储系统客户端的角度来描述的，</span></span></span><span 
data-slate-object="text" data-key="1283"><span data-slate-leaf="true" data-offset-key="1283:0" 
data-first-offset="true"><span class="se-4f1b77e9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">即便如强一致性的限制，也只要求在读取的时候能读到“最新”的数据就可以了，至于这个在上次写操作之后、这次读操作之前，对存储系统内部的数据是否是“最新”的并无要求。</span></span></span></span><span 
data-slate-object="text" data-key="1284"><span data-slate-leaf="true" data-offset-key="1284:0" 
data-first-offset="true"><span data-slate-string="true">我们经常使用的传统关系型数据库，比如 Oracle、MySQL，它们都是符合强一致性的。</span></span></span> 
</div> <div class="se-a4fe5bc1 " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span class="se-dbe999f3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">弱一致性（Weak Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1287"><span data-slate-leaf="true" data-offset-key="1287:0" data-first-offset="true"><span 
class="se-959c01e7" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">弱一致性和强一致性相反，读操作</span></span></span></span><span 
data-slate-object="text" data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" 
data-first-offset="true"><span class="se-d4a2b323" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">并不能保证</span></span></span></span><span data-slate-object="text" data-key="1289"><span 
data-slate-leaf="true" data-offset-key="1289:0" data-first-offset="true"><span data-slate-string="true">可以取得最新一次写操作写入的数据，也就是说，客户端可能读到最新的数据，也可能读不到最新的数据。</span></span></span> 
</div> <div class="se-531d52cb " data-slate-type="paragraph" data-slate-object="block" data-key="1290"> 
<span data-slate-object="text" data-key="1291"><span data-slate-leaf="true" data-offset-key="1291:0" 
data-first-offset="true"><span data-slate-string="true">这个“并不能保证”就有点“搞笑”了——都不确定能不能读到最新值，那它有什么用？其实它的应用也挺广泛的，最常见的例子就是缓存，比如一个静态资源被浏览器缓存起来，那么这之后只要是从缓存内取得的数据，使用者其实根本不知道这个数据是不是最新的，因为即便它实际有了更新，服务端也不会通知你。</span></span></span> 
</div> <div class="se-93cc4b13 " data-slate-type="paragraph" data-slate-object="block" data-key="1292"> 
<span data-slate-object="text" data-key="1293"><span data-slate-leaf="true" data-offset-key="1293:0" 
data-first-offset="true"><span class="se-03eeaee8" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最终一致性（Eventual Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1294"><span data-slate-leaf="true" data-offset-key="1294:0" data-first-offset="true"><span 
data-slate-string="true">最终一致性介于强一致性和弱一致性之间，写操作之后立即进行读操作，可能无法读到更新后的值，但是如果经过了一个指定的时间窗口，就能保证可以读到那个更新后的值。</span></span></span> 
</div> <div class="se-d92ab5c5 " data-slate-type="paragraph" data-slate-object="block" data-key="1295"> 
<span data-slate-object="text" data-key="1296"><span data-slate-leaf="true" data-offset-key="1296:0" 
data-first-offset="true"><span data-slate-string="true">最终一致性可能是我们日常生活中最常见的一致性模型了。比如搜索引擎，搜索引擎的爬虫会定期爬取数据，并更新搜索数据，因此如果你的网站只是刚刚更新，可能还无法搜到这个更新内容，但只要是过了一定的时间窗口，它就会出现在搜索结果中了。</span></span></span> 
</div> <h2 class="se-b7a48732" data-slate-type="heading" data-slate-object="block" data-key="1297"><span 
data-slate-object="text" data-key="1298"><span data-slate-leaf="true" data-offset-key="1298:0" 
data-first-offset="true"><span data-slate-string="true">数据高可用的架构技术</span></span></span></h2> 
<div class="se-e1222b64 " data-slate-type="paragraph" data-slate-object="block" data-key="1299"> 
<span data-slate-object="text" data-key="1300"><span data-slate-leaf="true" data-offset-key="1300:0" 
data-first-offset="true"><span data-slate-string="true">接下来，我们探讨互联网应用中最常见的几种架构技术，它们都是用以解决数据可用性的问题，就如同我们在上文中所提到的那样，既包括数据本身的可用性，又包括数据读写服务的可用性。</span></span></span> 
</div> <h3 class="se-119601fe" data-slate-type="heading" data-slate-object="block" data-key="1301"><span 
data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true">1. 简单备份</span></span></span></h3> <div 
class="se-a2a11c4e " data-slate-type="paragraph" data-slate-object="block" data-key="1303"> 
<span data-slate-object="text" data-key="1304"><span data-slate-leaf="true" data-offset-key="1304:0" 
data-first-offset="true"><span data-slate-string="true">简单备份（Backup）指的就是定期或按需对存储系统中的数据全量或增量进行复制，并保存为副本，从而降低数据丢失风险的一种方式。</span></span></span> 
</div> <div class="se-c957c305" data-slate-type="image" data-slate-object="block" data-key="1305"> 
<img class="se-61b1b487" src="https://static001.geekbang.org/resource/image/53/4f/53c3e61aca5906962a78446cbdb5fa4f.png"> 
</div> <div class="se-b51603d8 " data-slate-type="paragraph" data-slate-object="block" data-key="1306"> 
<span data-slate-object="text" data-key="1307"><span data-slate-leaf="true" data-offset-key="1307:0" 
data-first-offset="true"><span data-slate-string="true">这是一种实现上最简单的技术，在个人电脑上极其常见，但即便在工业界，依然有大量的应用场景。比方说 
Amazon RDS（将关系数据库搬到云上）的 Snapshot 技术，可以定期将所有数据导出为一份副本。在 CPU 和 I/O 等资源不成为瓶颈的情况下，因为是异步进行的，简单备份往往对存储系统读写操作的影响很小。</span></span></span> 
</div> <div class="se-71eb63e8 " data-slate-type="paragraph" data-slate-object="block" data-key="1308"> 
<span data-slate-object="text" data-key="1309"><span data-slate-leaf="true" data-offset-key="1309:0" 
data-first-offset="true"><span data-slate-string="true">但是，这种方式存在存储系统的单点故障问题，一旦存储系统挂掉了，服务也就中断了，因此基本没法谈可用性。</span></span></span> 
</div> <div class="se-252ff97d " data-slate-type="paragraph" data-slate-object="block" data-key="1310"> 
<span data-slate-object="text" data-key="1311"><span data-slate-leaf="true" data-offset-key="1311:0" 
data-first-offset="true"><span data-slate-string="true">你可能会说，可用性的话，可以给访问存储的 Web 服务器做双机备份啊。没错，但那解决的是 
Web 服务器可用性的问题，并不是我们这里最关心的数据可用性的问题，数据存储依然是单点的。同时，如果什么时候存储系统挂掉了，那么只能恢复到最近一次的备份点，因此可能丢失大量的数据。</span></span></span> 
</div> <h3 class="se-a6a67ff9" data-slate-type="heading" data-slate-object="block" data-key="1312"><span 
data-slate-object="text" data-key="1313"><span data-slate-leaf="true" data-offset-key="1313:0" 
data-first-offset="true"><span data-slate-string="true">2. Multi-Master</span></span></span></h3> 
<div class="se-be7810c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1314"> 
<span data-slate-object="text" data-key="1315"><span data-slate-leaf="true" data-offset-key="1315:0" 
data-first-offset="true"><span data-slate-string="true">Multi-Master 架构是指存在多个 Master（主）节点，各自都提供完整的读写服务，数据备份之间的互相拷贝为了不影响读写请求的性能，通常是异步进行的。</span></span></span> 
</div> <div class="se-a1183064" data-slate-type="image" data-slate-object="block" data-key="1316"> 
<img class="se-fa157b70" src="https://static001.geekbang.org/resource/image/b9/cc/b9153efbb171d6381a08cfa577bc02cc.jpg"> 
</div> <div class="se-643be13e " data-slate-type="paragraph" data-slate-object="block" data-key="1317"> 
<span data-slate-object="text" data-key="1318"><span data-slate-leaf="true" data-offset-key="1318:0" 
data-first-offset="true"><span data-slate-string="true">从图中，你可以看到，如果某一主节点对应的存储服务挂掉了，那么还有另一个主节点可以提供对应服务，因此，这种方式是可以提供高可用服务的。图中只放了两个主节点，但是其实是可以放置多个的。</span></span></span> 
</div> <div class="se-2f2af078 " data-slate-type="paragraph" data-slate-object="block" data-key="1319"> 
<span data-slate-object="text" data-key="1320"><span data-slate-leaf="true" data-offset-key="1320:0" 
data-first-offset="true"><span data-slate-string="true">关于一致性，通常情况下节点之间的数据互拷贝是异步进行的，因此是最终一致性。需要说明的是，这个数据互拷贝理论上也是可以做到同步进行的，即将数据拷贝到所有其它的主节点以后再将响应返回给用户，而且那种情况下就可以做到强一致性，不过实际却很少有这样做的，这是为什么呢？</span></span></span> 
</div> <div class="se-fbfeac27 " data-slate-type="paragraph" data-slate-object="block" data-key="1321"> 
<span data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">第一个原因，显而易见，同步的数据拷贝会导致整体请求响应的时延增加。</span></span></span> 
</div> <div class="se-2534079e " data-slate-type="paragraph" data-slate-object="block" data-key="1323"> 
<span data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">第二个，也是更重要的原因，如果有节点异常，这个拷贝操作就可能会超时或失败，这种情况下，你觉得存储系统应该怎样对待这个错误？显然，存储系统会陷入两难的境地。</span></span></span> 
</div> <div class="se-ec15f918" data-slate-type="list" data-slate-object="block" data-key="1325"> 
<div class="se-aceabca4 se-8e299a4c" data-slate-type="list-line" data-slate-object="block" 
data-key="1326"> <span data-slate-object="text" data-key="1327"><span data-slate-leaf="true" 
data-offset-key="1327:0" data-first-offset="true"><span data-slate-string="true">如果系统容许错误发生，不返回错误给用户，那么强一致性就无法保证，既然无法保证，那么这个拷贝过程就完全可以设计成异步的，因为既然无论如何也无法保证强一致性，这个同步除了增加时延以外，并未带来任何明显的好处。</span></span></span> 
</div> <div class="se-d2c750e0 se-22b2bc95" data-slate-type="list-line" data-slate-object="block" 
data-key="1328"> <span data-slate-object="text" data-key="1329"><span data-slate-leaf="true" 
data-offset-key="1329:0" data-first-offset="true"><span data-slate-string="true">如果系统不容许错误发生，即返回错误给用户，一致性就被严格保证了，但是这样的话，整个存储系统就不再是高可用了，因为任何一个主节点的不可用，就会导致其它任意主节点向其拷贝数据的失败，进而导致整个系统都变得不可用。我们使用多个主节点的目的就是要提高可用性，而现在这样的设计和高可用性的目的就自相矛盾了。</span></span></span> 
</div> </div> <div class="se-7656f08d " data-slate-type="paragraph" data-slate-object="block" 
data-key="1330"> <span data-slate-object="text" data-key="1331"><span data-slate-leaf="true" 
data-offset-key="1331:0" data-first-offset="true"><span data-slate-string="true">其实，对待这个节点间的数据拷贝错误，还有第三种方式，它结合了上述二者的优点。我先卖个关子，我们在下面 
Master-Slave 的部分会谈到。</span></span></span> </div> <div class="se-39175672 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1332"> <span data-slate-object="text" data-key="1333"><span 
data-slate-leaf="true" data-offset-key="1333:0" data-first-offset="true"><span data-slate-string="true">再来说说 
Multi-Master 的缺陷。</span></span></span><span data-slate-object="text" data-key="1334"><span 
data-slate-leaf="true" data-offset-key="1334:0" data-first-offset="true"><span class="se-c8c593d9" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">它最大的缺陷是关于事务处理的，本地事务（即单个存储节点）可以提交成功，但是全局事务（所有存储节点）却可能失败。</span></span></span></span><span 
data-slate-object="text" data-key="1335"><span data-slate-leaf="true" data-offset-key="1335:0" 
data-first-offset="true"><span data-slate-string="true">它包含这样两种典型的产生问题的场景：</span></span></span> 
</div> <div class="se-5ce9d582" data-slate-type="list" data-slate-object="block" data-key="1336"> 
<div class="se-4650c8dc se-bbec9ea1" data-slate-type="list-line" data-slate-object="block" 
data-key="1337"> <span data-slate-object="text" data-key="1338"><span data-slate-leaf="true" 
data-offset-key="1338:0" data-first-offset="true"><span data-slate-string="true">由于是最终一致性，那么数据丢失也是可能发生的，即在写操作成功而节点间数据拷贝还没完成的时刻，如果主节点挂掉了，那么数据丢失也就发生了，只不过丢失的数据可能相对较少，但是全局事务的完整性就无从谈起了。</span></span></span> 
</div> <div class="se-253ae670 se-b4e67ffa" data-slate-type="list-line" data-slate-object="block" 
data-key="1339"> <span data-slate-object="text" data-key="1340"><span data-slate-leaf="true" 
data-offset-key="1340:0" data-first-offset="true"><span data-slate-string="true">如果没有节点异常，主节点 
A 的事务提交成功，主节点 B 的事务也提交成功，它们是做到了对本地数据库中事务操作的原子性。可是当进行节点间数据互拷贝时，一旦这两个提交的事务发生冲突（例如修改同一条记录），它们就傻眼了，到底应该以 
A 还是以 B 的事务为准？这种冲突的解决会比较复杂，而且由于发生在异步的拷贝环节，这时候用户的请求都已经返回响应了，就没法告知用户事务冲突了。</span></span></span> 
</div> </div> <div class="se-f1486780 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1341"> <span data-slate-object="text" data-key="1342"><span data-slate-leaf="true" 
data-offset-key="1342:0" data-first-offset="true"><span data-slate-string="true">因此，当我们要实现全局事务的时候，Multi-Master 
往往不是一个好的选择。</span></span></span> </div> <h3 class="se-9e439169" data-slate-type="heading" data-slate-object="block" 
data-key="1343"><span data-slate-object="text" data-key="1344"><span data-slate-leaf="true" 
data-offset-key="1344:0" data-first-offset="true"><span data-slate-string="true">3. Master-Slave</span></span></span></h3> 
<div class="se-96b99cb1 " data-slate-type="paragraph" data-slate-object="block" data-key="1345"> 
<span data-slate-object="text" data-key="1346"><span data-slate-leaf="true" data-offset-key="1346:0" 
data-first-offset="true"><span data-slate-string="true">Master-Slave 架构是指存在一个可读可写（或者只写）的 Master 
节点，而存在多个只读的 Slave 节点，每当有通过 Master 的更新出现，数据会以异步的方式单向拷贝到所有的 Slave 节点上去。</span></span></span> 
</div> <div class="se-55e94565" data-slate-type="image" data-slate-object="block" data-key="1347"> 
<img class="se-af37bae5" src="https://static001.geekbang.org/resource/image/d2/46/d2ee6e41dd28830a49d736f6e5168a46.jpg"> 
</div> <div class="se-53d8b9d7 " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span data-slate-string="true">这种方式和 Multi-Master 比起来，将可写的节点数减少为了一个，而允许有多个只读的节点（图中只画了一个，但实际可以有多个），这种方式比较适用互联网较常见的业务，即读远大于写的场景，而且读的可扩展性（Scalability）较强（即增加一个 
Slave 节点的代价较小），而且不存在 Multi-Master 的事务冲突问题。</span></span></span> </div> <div class="se-aa10c240 
" data-slate-type="paragraph" data-slate-object="block" data-key="1350"> <span data-slate-object="text" 
data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" data-first-offset="true"><span 
data-slate-string="true">当然了，</span></span></span><span data-slate-object="text" data-key="1352"><span 
data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span class="se-a136429c" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Master-Slave 
的缺点也很明显</span></span></span></span><span data-slate-object="text" data-key="1353"><span data-slate-leaf="true" 
data-offset-key="1353:0" data-first-offset="true"><span data-slate-string="true">。既然</span></span></span><span 
data-slate-object="text" data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" 
data-first-offset="true"><span class="se-bfcea6d3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只有一个可写的节点</span></span></span></span><span data-slate-object="text" 
data-key="1355"><span data-slate-leaf="true" data-offset-key="1355:0" data-first-offset="true"><span 
data-slate-string="true">，那么写的可扩展性就很差了；而且和 Multi-Master 一样，数据从 Master 到 Slave 的拷贝是异步进行的，因此数据存在丢失的可能。</span></span></span> 
</div> <div class="se-f49fe67d " data-slate-type="paragraph" data-slate-object="block" data-key="1356"> 
<span data-slate-object="text" data-key="1357"><span data-slate-leaf="true" data-offset-key="1357:0" 
data-first-offset="true"><span data-slate-string="true">和 Multi-Master 一样，我们当然也可以让数据拷贝变成同步进行的，但是这又存在着上文讨论过的同样的缺陷。但是，有一种介于全同步和全异步之间的缓解这个问题的方法，即“最小副本数量”，比如可能存在 
5 个 Slave 节点，但是从 Master 到 Slave 的数据拷贝一旦在 2 个节点成功了，就不用等另外 3 个返回，直接返回用户操作成功。即便那 3 个中存在失败，系统也可以标记失败节点，并按照既定策略自动处理掉，而不影响用户感知。</span></span></span> 
</div> <div class="se-e0991e39 " data-slate-type="paragraph" data-slate-object="block" data-key="1358"> 
<span data-slate-object="text" data-key="1359"><span data-slate-leaf="true" data-offset-key="1359:0" 
data-first-offset="true"><span data-slate-string="true">因此，</span></span></span><span data-slate-object="text" 
data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" data-first-offset="true"><span 
class="se-34e656a0" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我们可以说这种数据拷贝的方法是“部分同步”“部分异步”的，既降低了数据丢失的可能，又避免了因为某个 
Slave 问题而导致 Master“死等”的情况发生。</span></span></span></span> </div> <div class="se-f5b04869 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1361"> <span data-slate-object="text" data-key="1362"><span 
data-slate-leaf="true" data-offset-key="1362:0" data-first-offset="true"><span data-slate-string="true">最后，值得注意的是，写现在变成单点的了，为了避免单点故障引起的服务中断，一种方式是在 
Master 挂掉的时候，Slave 可以挺身而出，变为 Master 顶上去提供写的服务。但是这件事情说说容易，实际要让它自动发生却有大量的工作要做，比如，谁顶上去，以及顶上去了之后，原来以为挂掉的 
Master 又活过来了怎么办，等等。</span></span></span> </div> <h3 class="se-a724e84a" data-slate-type="heading" 
data-slate-object="block" data-key="1363"><span data-slate-object="text" data-key="1364"><span 
data-slate-leaf="true" data-offset-key="1364:0" data-first-offset="true"><span data-slate-string="true">4. 
其它</span></span></span></h3> <div class="se-92365620 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1365"> <span data-slate-object="text" data-key="1366"><span data-slate-leaf="true" 
data-offset-key="1366:0" data-first-offset="true"><span data-slate-string="true">还有其它更为复杂的方法，一种是 
2PC 或 3PC，即两阶段提交或三阶段提交，甚至采用高容错的分布式的共识算法 Paxos。这些方法能够保证强一致性，但是在实现上都要复杂许多，我在今天的扩展阅读中会介绍它们。</span></span></span> 
</div> <div class="se-3495ee20 " data-slate-type="paragraph" data-slate-object="block" data-key="1367"> 
<span data-slate-object="text" data-key="1368"><span data-slate-leaf="true" data-offset-key="1368:0" 
data-first-offset="true"><span data-slate-string="true">下面这张比较的表格来自 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1369" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="1370"><span data-slate-leaf="true" data-offset-key="1370:0" 
data-first-offset="true"><span data-slate-string="true">Transactions Across Datacenters</span></span></span></a><span 
data-slate-object="text" data-key="1371"><span data-slate-leaf="true" data-offset-key="1371:0" 
data-first-offset="true"><span data-slate-string="true"> 这个著名的演讲，这张图在互联网上流传很广。</span></span></span> 
</div> <div class="se-243783b6" data-slate-type="image" data-slate-object="block" data-key="1372"> 
<img class="se-f2caf4f8" src="https://static001.geekbang.org/resource/image/31/c2/31ba31142c4854ae042ad29e627ee7c2.jpg"> 
</div> <div class="se-829eef9b " data-slate-type="paragraph" data-slate-object="block" data-key="1373"> 
<span data-slate-object="text" data-key="1374"><span data-slate-leaf="true" data-offset-key="1374:0" 
data-first-offset="true"><span data-slate-string="true">简单说明一下，从上到下每行的含义依次为：一致性、事务支持、延迟、吞吐量、数据丢失和故障转移（指的是节点出现故障以后，其它节点可以自动顶替上来的能力）。</span></span></span> 
</div> <div class="se-d05504e3 " data-slate-type="paragraph" data-slate-object="block" data-key="1375"> 
<span data-slate-object="text" data-key="1376"><span data-slate-leaf="true" data-offset-key="1376:0" 
data-first-offset="true"><span data-slate-string="true">从中我们可以看到，没有一列能够做到全绿色，这正如我们所知道的那样，软件工程上的问题都“没有银弹”。特别是，Backups、M/S 
和 MM 得益于异步的副本拷贝，能够做到低延迟，这就无法做到强一致性；而 2PC 和 Paxos 通过同步操作可以做到强一致性，却带来了高延迟。</span></span></span> 
</div> <h2 class="se-51267e48" data-slate-type="heading" data-slate-object="block" data-key="1377"><span 
data-slate-object="text" data-key="1378"><span data-slate-leaf="true" data-offset-key="1378:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-7a9b18c1 " data-slate-type="paragraph" data-slate-object="block" data-key="1379"> 
<span data-slate-object="text" data-key="1380"><span data-slate-leaf="true" data-offset-key="1380:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习和理解了数据持久化中一致性的相关概念和实现技术，希望通过今天的学习，你能做到“知其然，知其所以然”。</span></span></span> 
</div> <div class="se-77ba4c3e " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提一个问题，检验一下你的学习成果。请将下列存储系统按照“强一致性”“弱一致性”和“最终一致性”进行归类：</span></span></span> 
</div> <div class="se-6b401cd8" data-slate-type="list" data-slate-object="block" data-key="1383"> 
<div class="se-4e9eca18 se-9590fe21" data-slate-type="list-line" data-slate-object="block" 
data-key="1384"> <span data-slate-object="text" data-key="1385"><span data-slate-leaf="true" 
data-offset-key="1385:0" data-first-offset="true"><span data-slate-string="true">关系数据库</span></span></span> 
</div> <div class="se-e6609b83 se-ecb71f35" data-slate-type="list-line" data-slate-object="block" 
data-key="1386"> <span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" 
data-offset-key="1387:0" data-first-offset="true"><span data-slate-string="true">本地文件</span></span></span> 
</div> <div class="se-05719620 se-9fafac54" data-slate-type="list-line" data-slate-object="block" 
data-key="1388"> <span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" 
data-offset-key="1389:0" data-first-offset="true"><span data-slate-string="true">浏览器缓存</span></span></span> 
</div> <div class="se-79eb9cd8 se-0735b773" data-slate-type="list-line" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">网盘数据</span></span></span> 
</div> <div class="se-cebe8fa1 se-c01f7131" data-slate-type="list-line" data-slate-object="block" 
data-key="1392"> <span data-slate-object="text" data-key="1393"><span data-slate-leaf="true" 
data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">CDN 节点上的静态资源</span></span></span> 
</div> <div class="se-c475542c se-0a8e8282" data-slate-type="list-line" data-slate-object="block" 
data-key="1394"> <span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" 
data-offset-key="1395:0" data-first-offset="true"><span data-slate-string="true">搜索引擎爬虫爬到的数据</span></span></span> 
</div> </div> <div class="se-0934fa4a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1396"> <span data-slate-object="text" data-key="1397"><span data-slate-leaf="true" 
data-offset-key="1397:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文内容就到这里。如果你对一致性哈希原理了解不够透彻的话，我强烈推荐你继续学习今天的选修课堂。</span></span></span> 
</div> <h2 class="se-6f7bca50" data-slate-type="heading" data-slate-object="block" data-key="1398"><span 
data-slate-object="text" data-key="1399"><span data-slate-leaf="true" data-offset-key="1399:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：一致性哈希</span></span></span></h2> 
<div class="se-b71f65d4 " data-slate-type="paragraph" data-slate-object="block" data-key="1400"> 
<span data-slate-object="text" data-key="1401"><span data-slate-leaf="true" data-offset-key="1401:0" 
data-first-offset="true"><span data-slate-string="true">在今天的选修课堂中，我们来学习一种特殊的哈希算法——一致性哈希（Consistent 
Hashing）。</span></span></span> </div> <div class="se-ea554d4b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1402"> <span data-slate-object="text" data-key="1403"><span 
data-slate-leaf="true" data-offset-key="1403:0" data-first-offset="true"><span data-slate-string="true">首先，你可以在脑海里回忆一下，什么是哈希算法。哈希算法，又被称为散列算法，就是通过某种确定的键值函数，将源数据映射成为一个简短的新数据串，这个串叫做哈希值。</span></span></span><span 
data-slate-object="text" data-key="1404"><span data-slate-leaf="true" data-offset-key="1404:0" 
data-first-offset="true"><span class="se-15a396da" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果两个源数据的 hash 值不同，那么它们一定不相同；如果两个源数据的 hash 值相同，那么这两个源数据可能相同，也可能不相同。</span></span></span></span> 
</div> <div class="se-36e76263 " data-slate-type="paragraph" data-slate-object="block" data-key="1405"> 
<span data-slate-object="text" data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" 
data-first-offset="true"><span data-slate-string="true">我们在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1407" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" data-first-offset="true"><span 
data-slate-string="true">[第 02 讲]</span></span></span></a><span data-slate-object="text" data-key="1409"><span 
data-slate-leaf="true" data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true"> 
中谈到的数字签名，就是通过一个哈希算法，得到证书的哈希值，也就是它的“指纹”，是经过加密以后得到的。哈希是很常用的算法和技术，在后面的全栈内容中我们还会遇到。</span></span></span> 
</div> <div class="se-56ab5678 " data-slate-type="paragraph" data-slate-object="block" data-key="1410"> 
<span data-slate-object="text" data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" 
data-first-offset="true"><span data-slate-string="true">我们有时候会使用一个特殊的哈希算法，来将每项数据都映射到某一个“位置”，从而将大量的数据分散存储到不同的位置中。哈希算法在数据量大，且单个节点（单台机器）无法处理的时候尤为有用。比如说，我们要将从 
0 到 9999 这 10000 个连续自然数分散到 5 个数据存储的节点上，那我就可以设计一个基于取余数的哈希算法，做到均匀分布：</span></span></span> </div> 
<div class="se-4178fa03 se-34e422ee" data-slate-type="pre" data-slate-object="block" data-key="1412"> 
<div class="se-4a6bde3b se-d3b747f0"> <span></span> </div> <div class="se-f12e84f3"> <div class="se-43133065 
se-a982e19b" data-code-line-number="1"></div> </div> <div class="se-1faa2e56 ps"> <div class="se-7a1105a5 
se-fe18eba5" data-slate-type="code-line" data-slate-object="block" data-key="1413"> <span data-slate-object="text" 
data-key="1414"><span data-slate-leaf="true" data-offset-key="1414:0" data-first-offset="true"><span 
data-slate-string="true">f(x) = x % 5</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-50a49f32 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true">我们可以看到，这个函数的结果，也就是哈希值，只有 
0、1、2、3、4 这 5 个，对应这 5 个节点，那么我可以根据其结果把这个 x 放到相应的节点上去。这样，每个节点就只需要存储 2000 个数。</span></span></span> 
</div> <div class="se-951a5fda " data-slate-type="paragraph" data-slate-object="block" data-key="1417"> 
<span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" data-offset-key="1418:0" 
data-first-offset="true"><span data-slate-string="true">好，这看起来是个挺好的解决办法，但是现在问题来了，由于业务的扩张，我们现在需要处理从 
0 到 11999 这 12000 个数了，也就是说，多了 2000 个数。可是，节点承载的数据量已经基本到达了极限，没法再加入那么多数据了。</span></span></span> 
</div> <div class="se-394dfb90 " data-slate-type="paragraph" data-slate-object="block" data-key="1419"> 
<span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" data-offset-key="1420:0" 
data-first-offset="true"><span data-slate-string="true">没问题，我们加机器吧，现在有 6 个节点了，我们就得修改这个算法：</span></span></span> 
</div> <div class="se-215a545c se-fdc82bcb" data-slate-type="pre" data-slate-object="block" 
data-key="1421"> <div class="se-b283ed93 se-ca044d93"> <span></span> </div> <div class="se-a6fddf0a"> 
<div class="se-31c68534 se-1efdcbfc" data-code-line-number="1"></div> </div> <div class="se-6aaebcff 
ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="1422"> <span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" 
data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true">f(x) = x % 
6</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div 
class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-ac2b823e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1424"> <span data-slate-object="text" data-key="1425"><span data-slate-leaf="true" 
data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true">嗯，这样数据还是能均匀分布。</span></span></span> 
</div> <div class="se-36a13c67 " data-slate-type="paragraph" data-slate-object="block" data-key="1426"> 
<span data-slate-object="text" data-key="1427"><span data-slate-leaf="true" data-offset-key="1427:0" 
data-first-offset="true"><span data-slate-string="true">原理上没错，可是这又带来了一个问题，就是这些已经在节点上的数据，必须要调整位置了，毕竟算法变了嘛，因此这些数所在的节点可能要改变，这个过程叫做 
</span></span></span><span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span class="se-1eddec9d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">Rehashing</span></span></span></span><span 
data-slate-object="text" data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" 
data-first-offset="true"><span data-slate-string="true">。这一调整，就傻眼了，只有同为 5 和 6 的倍数的数（即只有为 30 
倍数的数），不用调整位置，其它全部都要调整。也就是说，就因为加了这一台机器，29/30 = 96.7% 的数据全部都要调整位置！</span></span></span> </div> 
<div class="se-f5f4d34c " data-slate-type="paragraph" data-slate-object="block" data-key="1430"> 
<span data-slate-object="text" data-key="1431"><span data-slate-leaf="true" data-offset-key="1431:0" 
data-first-offset="true"><span data-slate-string="true">这个代价显然是接受不了的，那有没有办法可以优化它呢？</span></span></span> 
</div> <div class="se-a9b63c36 " data-slate-type="paragraph" data-slate-object="block" data-key="1432"> 
<span data-slate-object="text" data-key="1433"><span data-slate-leaf="true" data-offset-key="1433:0" 
data-first-offset="true"><span data-slate-string="true">当然！</span></span></span><span data-slate-object="text" 
data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" data-first-offset="true"><span 
class="se-a16a7b7e" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一致性哈希，就是一种尽可能减少 
Rehashing 过程中进行数据迁移的算法。</span></span></span></span><span data-slate-object="text" data-key="1435"><span 
data-slate-leaf="true" data-offset-key="1435:0" data-first-offset="true"><span data-slate-string="true">且看下面这张图：</span></span></span> 
</div> <div class="se-18afc8cd" data-slate-type="image" data-slate-object="block" data-key="1436"> 
<img class="se-84e7f2a0" src="https://static001.geekbang.org/resource/image/dd/39/dd1f0fd322a16176c72395b79422cf39.jpg"> 
</div> <div class="se-2a24f3ce " data-slate-type="paragraph" data-slate-object="block" data-key="1437"> 
<span data-slate-object="text" data-key="1438"><span data-slate-leaf="true" data-offset-key="1438:0" 
data-first-offset="true"><span data-slate-string="true">请你</span></span></span><span data-slate-object="text" 
data-key="1439"><span data-slate-leaf="true" data-offset-key="1439:0" data-first-offset="true"><span 
class="se-5327c6f1" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">把上面的圆盘想象成一个时钟</span></span></span></span><span 
data-slate-object="text" data-key="1440"><span data-slate-leaf="true" data-offset-key="1440:0" 
data-first-offset="true"><span data-slate-string="true">，总共有 12 格（0 点到 12 点），假如说我们通过上面类似的哈希算法，把数据映射到时钟的每个格子上。因为是时钟，我们这次取 
12 的余数：</span></span></span> </div> <div class="se-d6c9514b se-a8f81f75" data-slate-type="pre" 
data-slate-object="block" data-key="1441"> <div class="se-416502f4 se-6805988c"> <span></span> 
</div> <div class="se-ddf483cc"> <div class="se-51fa73c7 se-64247e85" data-code-line-number="1"></div> 
</div> <div class="se-191633f5 ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="1442"> <span data-slate-object="text" data-key="1443"><span 
data-slate-leaf="true" data-offset-key="1443:0" data-first-offset="true"><span data-slate-string="true">f(x) 
= x % 12</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> 
<div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-13e65dbf " data-slate-type="paragraph" data-slate-object="block" 
data-key="1444"> <span data-slate-object="text" data-key="1445"><span data-slate-leaf="true" 
data-offset-key="1445:0" data-first-offset="true"><span data-slate-string="true">同时，系统中总共有三台服务器，那么每台服务器就可以负责管理其中的“4 
个小时”的数据。比如哈希值是 1~4 的数据（范围 B）存储在右下角的节点，5~8 的数据（范围 C）存储在左下角的节点，而 9~12 的数据（范围 A）存储到正上方的节点。</span></span></span> 
</div> <div class="se-7f8d2b85 " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">用这种方式来打散数据看起来似乎没有什么特别的对不对，别急，当我们添加新硬件，有一个新节点加入的时候，情况就不同了，请看下图：</span></span></span> 
</div> <div class="se-1ed47c44" data-slate-type="image" data-slate-object="block" data-key="1448"> 
<img class="se-329926d5" src="https://static001.geekbang.org/resource/image/55/50/550fd7dc68feb27eb729d9b915d3da50.jpg"> 
</div> <div class="se-5e8c4e6a " data-slate-type="paragraph" data-slate-object="block" data-key="1449"> 
<span data-slate-object="text" data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" 
data-first-offset="true"><span data-slate-string="true">在这种情况下，正下方有一台机器被加入，原本 5~8 点的数据被分成两部分，7~8 
点的数据（C2）依然存储在左下角的原节点，而 5~6 点的数据（C1）则需要迁移到新的，也就是正下方的节点上。</span></span></span> </div> <div class="se-e028be15 
" data-slate-type="paragraph" data-slate-object="block" data-key="1451"> <span data-slate-object="text" 
data-key="1452"><span data-slate-leaf="true" data-offset-key="1452:0" data-first-offset="true"><span 
data-slate-string="true">你看，这种情况下，添加一个节点，只需要移动其中的一部分数据，也就是 2/12 = 1/6 的数据就行，是不是对整个系统影响就小了很多？</span></span></span> 
</div> <div class="se-0562dbac " data-slate-type="paragraph" data-slate-object="block" data-key="1453"> 
<span data-slate-object="text" data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" 
data-first-offset="true"><span data-slate-string="true">等等！你可能会说，这样添加了一台服务器，如果原始数据哈希计算后的分布是均匀的，</span></span></span><span 
data-slate-object="text" data-key="1455"><span data-slate-leaf="true" data-offset-key="1455:0" 
data-first-offset="true"><span class="se-885045bf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">经过 了添加机器的操作，节点上承载数据分布却是不均匀的</span></span></span></span><span data-slate-object="text" 
data-key="1456"><span data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span 
data-slate-string="true">——正上方、右下角的服务器分别承载了总共 1/3 的数据，而左下角、正下方的服务器却各自只需要承载 1/6 的数据。</span></span></span> 
</div> <div class="se-a5e9e9c4 " data-slate-type="paragraph" data-slate-object="block" data-key="1457"> 
<span data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">那么，这个问题，怎么解决？如果你能想到这个问题，那非常好。</span></span></span> 
</div> <div class="se-9930e26b " data-slate-type="paragraph" data-slate-object="block" data-key="1459"> 
<span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" data-offset-key="1460:0" 
data-first-offset="true"><span data-slate-string="true">解决方法就是引入“</span></span></span><span 
data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span class="se-73f891eb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">虚拟节点</span></span></span></span><span data-slate-object="text" data-key="1462"><span 
data-slate-leaf="true" data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">”，我们根据时钟的 
12 个数字，把它均匀分成 12 个区域，分别由 12 个虚拟节点负责，并且顺时针按照 Ax-Bx-Cx 这样命名。这样，在添加机器以前，每台机器需要负责 4 块数据（例如某台机器 
A 需要承载 A1、A2、A3 和 A4 的数据），并且它们均匀地散布在圆环上：</span></span></span> </div> <div class="se-0e56c1af" 
data-slate-type="image" data-slate-object="block" data-key="1463"> <img class="se-227aa300" 
src="https://static001.geekbang.org/resource/image/75/b0/75a9aa4ba97bae18fbff18698601ceb0.jpg"> 
</div> <div class="se-48d4fc10 " data-slate-type="paragraph" data-slate-object="block" data-key="1464"> 
<span data-slate-object="text" data-key="1465"><span data-slate-leaf="true" data-offset-key="1465:0" 
data-first-offset="true"><span data-slate-string="true">好，现在添加新机器，我们只需要把 A1、B2、C3 这三个虚拟节点的数据，搬迁到新机器 
D 上：</span></span></span> </div> <div class="se-6b174060" data-slate-type="image" data-slate-object="block" 
data-key="1466"> <img class="se-859b7210" src="https://static001.geekbang.org/resource/image/a0/6c/a0d26ef488f14ed18e6056960ab7d46c.jpg"> 
</div> <div class="se-f0124a47 " data-slate-type="paragraph" data-slate-object="block" data-key="1467"> 
<span data-slate-object="text" data-key="1468"><span data-slate-leaf="true" data-offset-key="1468:0" 
data-first-offset="true"><span data-slate-string="true">你看，同样搬迁了最少量的数据，且元盘上的数据还是均匀分布的，只是从均匀分布在 
3 台机器，变成了均匀分布到 4 台机器上。当然，作为示意，我这里是把圆环分成了 12 份，实际可以分成更多的 2^n 份。</span></span></span> </div> 
<h2 class="se-83c4436e" data-slate-type="heading" data-slate-object="block" data-key="1469"><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-db7abec6" data-slate-type="list" data-slate-object="block" data-key="1471"> <div 
class="se-8bc339cd se-cecc77d6" data-slate-type="list-line" data-slate-object="block" data-key="1472"> 
<span data-slate-object="text" data-key="1473"><span data-slate-leaf="true" data-offset-key="1473:0" 
data-first-offset="true"><span data-slate-string="true">关于 2PC 和 3PC，如果你感兴趣的话，可以阅读维基百科的词条，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1474" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="1475"><span data-slate-leaf="true" data-offset-key="1475:0" 
data-first-offset="true"><span data-slate-string="true">2PC</span></span></span></a><span data-slate-object="text" 
data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" data-first-offset="true"><span 
data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1477" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1478"><span 
data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span data-slate-string="true">3PC</span></span></span></a><span 
data-slate-object="text" data-key="1479"><span data-slate-leaf="true" data-offset-key="1479:0" 
data-first-offset="true"><span data-slate-string="true">，或者是直接阅读 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1480" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" data-first-offset="true"><span 
data-slate-string="true">The Two-Phase Commit Protocol</span></span></span></a><span data-slate-object="text" 
data-key="1482"><span data-slate-leaf="true" data-offset-key="1482:0" data-first-offset="true"><span 
data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1483" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1484"><span 
data-slate-leaf="true" data-offset-key="1484:0" data-first-offset="true"><span data-slate-string="true">Three-Phase 
Commit Protocol</span></span></span></a><span data-slate-object="text" data-key="1485"><span 
data-slate-leaf="true" data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-ba7bb619 se-bb69bd82" data-slate-type="list-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">关于 Paxos，算法本身比较难，如果你很感兴趣，我找了一些中文材料，我觉得 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1488" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" data-offset-key="1489:0" 
data-first-offset="true"><span data-slate-string="true">Paxos 算法详解</span></span></span></a><span 
data-slate-object="text" data-key="1490"><span data-slate-leaf="true" data-offset-key="1490:0" 
data-first-offset="true"><span data-slate-string="true">这篇是相对讲得比较清楚的。</span></span></span> 
</div> <div class="se-d1df168e se-2b33f761" data-slate-type="list-line" data-slate-object="block" 
data-key="1491"> <span data-slate-object="text" data-key="1492"><span data-slate-leaf="true" 
data-offset-key="1492:0" data-first-offset="true"><span data-slate-string="true">文中那个表格最早是来自于 
Google I/O 2009 的 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1493" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1494"><span 
data-slate-leaf="true" data-offset-key="1494:0" data-first-offset="true"><span data-slate-string="true">Transactions 
Across Datacenters</span></span></span></a><span data-slate-object="text" data-key="1495"><span 
data-slate-leaf="true" data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true"> 
这个分享，后来有人</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1496" 
class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1497"><span data-slate-leaf="true" 
data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true">上传到了 Bilibili 
上</span></span></span></a><span data-slate-object="text" data-key="1498"><span data-slate-leaf="true" 
data-offset-key="1498:0" data-first-offset="true"><span data-slate-string="true">，我推荐你听一下这个分享。</span></span></span> 
</div> </div> <div class="se-7a360a05" data-slate-type="image" data-slate-object="block" data-key="1499"> 
<img class="se-d9ee1813" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 11:14:53.354 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:14:53.365 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="1237" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-6e3a0b9a " data-slate-type="paragraph" data-slate-object="block" data-key="1238"> 
<span data-slate-object="text" data-key="1239"><span data-slate-leaf="true" data-offset-key="1239:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-d0683b7f " data-slate-type="paragraph" data-slate-object="block" data-key="1240"> 
<span data-slate-object="text" data-key="1241"><span data-slate-leaf="true" data-offset-key="1241:0" 
data-first-offset="true"><span data-slate-string="true">我想你很可能已经使用过许多存储层的技术了，例如缓存、文件、关系数据库，甚至一些云上 
key-value 的存储服务，但就如同我之前提到的那样，某项具体技术总是相对好学，可对于全栈知识系统地学习，也包括持久层的学习，是一定要立足于技术的基础、原理和本质的。今天，我们要讲的就是其中之一 
—— 一致性（Consistency）。</span></span></span> </div> <div class="se-e74ddb98 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1242"> <span data-slate-object="text" data-key="1243"><span 
data-slate-leaf="true" data-offset-key="1243:0" data-first-offset="true"><span data-slate-string="true">数据的可用性和一致性是很多工程师几乎每天都会挂在嘴边的概念，在存储系统的技术选型上面，一致性将会是我们一个重要的衡量因素，而在持久层架构设计上面，它也将是最重要的思考维度。</span></span></span> 
</div> <div class="se-d7b6a63a " data-slate-type="paragraph" data-slate-object="block" data-key="1244"> 
<span data-slate-object="text" data-key="1245"><span data-slate-leaf="true" data-offset-key="1245:0" 
data-first-offset="true"><span data-slate-string="true">数据的一致性不但是数据持久化的一个核心内容，也是学习的一个难点，希望我们一起努力，从原理上去彻底理解它，并学习一些常见的应用模式，做到“知其然，知其所以然”，我们一起把这个难啃的骨头给啃下来。</span></span></span> 
</div> <h2 class="se-772520ac" data-slate-type="heading" data-slate-object="block" data-key="1246"><span 
data-slate-object="text" data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" 
data-first-offset="true"><span data-slate-string="true">概念和背景</span></span></span></h2> <div 
class="se-0b63aa5a " data-slate-type="paragraph" data-slate-object="block" data-key="1248"> 
<span data-slate-object="text" data-key="1249"><span data-slate-leaf="true" data-offset-key="1249:0" 
data-first-offset="true"><span data-slate-string="true">数据持久化，本质上就是把内存中的数据给转换并写入指定的存储系统中，这个过程是保证数据不丢失的基本方式，而这个存储系统可以具备很多种形式，可以是网络、硬盘文件，也可以是数据库，还可以是前面两讲提到的某种形式的缓存。</span></span></span> 
</div> <div class="se-4237e450 " data-slate-type="paragraph" data-slate-object="block" data-key="1250"> 
<span data-slate-object="text" data-key="1251"><span data-slate-leaf="true" data-offset-key="1251:0" 
data-first-offset="true"><span data-slate-string="true">你也许听说过对于一致性的不同解释，而我们在谈论数据持久化的时候讲到的一致性，我认为简单来说，指的就是在存储系统中，客户端对数据的读写行为都是可以预期、符合一定规则的。这里有两个值得注意的方面：</span></span></span> 
</div> <div class="se-008ca755" data-slate-type="list" data-slate-object="block" data-key="1252"> 
<div class="se-c8760f42 se-b2a29774" data-slate-type="list-line" data-slate-object="block" 
data-key="1253"> <span data-slate-object="text" data-key="1254"><span data-slate-leaf="true" 
data-offset-key="1254:0" data-first-offset="true"><span class="se-9bb15cbf" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">可以预期和符合规则，而不是说读到的数据是“一致的”“准确的”或是“最新的”</span></span></span></span><span 
data-slate-object="text" data-key="1255"><span data-slate-leaf="true" data-offset-key="1255:0" 
data-first-offset="true"><span data-slate-string="true">，是因为存在不同的一致性模型，数据对一致性遵从的程度和规则都不同，下文我会讲到。</span></span></span> 
</div> <div class="se-1125b4fd se-0f65f661" data-slate-type="list-line" data-slate-object="block" 
data-key="1256"> <span data-slate-object="text" data-key="1257"><span data-slate-leaf="true" 
data-offset-key="1257:0" data-first-offset="true"><span data-slate-string="true">一致性判断的视角要从客户端来看，也就是说，</span></span></span><span 
data-slate-object="text" data-key="1258"><span data-slate-leaf="true" data-offset-key="1258:0" 
data-first-offset="true"><span class="se-c1b22d2e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">存储系统实际存储的数据可以在某些时候不遵从我们所要求的一致性，而只需要保证存储系统的客户端能读取到一致的数据就可以了。</span></span></span></span><span 
data-slate-object="text" data-key="1259"><span data-slate-leaf="true" data-offset-key="1259:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，某一个数据更新的过程中，对于存储系统来说，新数据其实已经写入，但由于事务还未提交，这时客户端读到的还是老数据。</span></span></span> 
</div> </div> <div class="se-2dacc5cb " data-slate-type="paragraph" data-slate-object="block" 
data-key="1260"> <span data-slate-object="text" data-key="1261"><span data-slate-leaf="true" 
data-offset-key="1261:0" data-first-offset="true"><span data-slate-string="true">我想这个概念并没有什么特殊之处，但是，这里面隐含了一个事情，就是说，为什么要有数据备份呢？</span></span></span> 
</div> <div class="se-5ccce30b " data-slate-type="paragraph" data-slate-object="block" data-key="1262"> 
<span data-slate-object="text" data-key="1263"><span data-slate-leaf="true" data-offset-key="1263:0" 
data-first-offset="true"><span data-slate-string="true">为了可用性（Availability）。</span></span></span> 
</div> <div class="se-3a78c1a0 " data-slate-type="paragraph" data-slate-object="block" data-key="1264"> 
<span data-slate-object="text" data-key="1265"><span data-slate-leaf="true" data-offset-key="1265:0" 
data-first-offset="true"><span class="se-b493fb7e" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">服务为了高可用，就要部署多个节点；数据为了高可用，就要存放多个备份。</span></span></span></span><span 
data-slate-object="text" data-key="1266"><span data-slate-leaf="true" data-offset-key="1266:0" 
data-first-offset="true"><span data-slate-string="true">这里的数据，既包括数据本身，又包括数据的读写服务，这是因为：</span></span></span> 
</div> <div class="se-0d7e98d1" data-slate-type="list" data-slate-object="block" data-key="1267"> 
<div class="se-efeae001 se-b7bdc555" data-slate-type="list-line" data-slate-object="block" 
data-key="1268"> <span data-slate-object="text" data-key="1269"><span data-slate-leaf="true" 
data-offset-key="1269:0" data-first-offset="true"><span data-slate-string="true">要让数据不丢失，冗余几乎是唯一的办法，因为再好的存储介质也架不住设备老化和各种原因的破坏；</span></span></span> 
</div> <div class="se-c89f5590 se-ce1c8aeb" data-slate-type="list-line" data-slate-object="block" 
data-key="1270"> <span data-slate-object="text" data-key="1271"><span data-slate-leaf="true" 
data-offset-key="1271:0" data-first-offset="true"><span data-slate-string="true">同理，为了数据访问服务能保持可用，包括保证足够的性能，必须要提供多个节点的读写操作服务，于是，我们不得不创建多个数据副本。</span></span></span> 
</div> </div> <div class="se-e0051987 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1272"> <span data-slate-object="text" data-key="1273"><span data-slate-leaf="true" 
data-offset-key="1273:0" data-first-offset="true"><span data-slate-string="true">那么一环扣一环，如果只有一份数据，是不存在一致性问题的，因为数据自己也只有一份，没法存在不一致，但有了数据副本，一致性就成为了课题。</span></span></span> 
</div> <h2 class="se-1227a2af" data-slate-type="heading" data-slate-object="block" data-key="1274"><span 
data-slate-object="text" data-key="1275"><span data-slate-leaf="true" data-offset-key="1275:0" 
data-first-offset="true"><span data-slate-string="true">一致性模型</span></span></span></h2> <div 
class="se-25833989 " data-slate-type="paragraph" data-slate-object="block" data-key="1276"> 
<span data-slate-object="text" data-key="1277"><span data-slate-leaf="true" data-offset-key="1277:0" 
data-first-offset="true"><span data-slate-string="true">你很可能已经听说过这三种一致性模型，下面我们来分别了解一下。</span></span></span> 
</div> <div class="se-17a7f1a6 " data-slate-type="paragraph" data-slate-object="block" data-key="1278"> 
<span data-slate-object="text" data-key="1279"><span data-slate-leaf="true" data-offset-key="1279:0" 
data-first-offset="true"><span class="se-1fa8a7f0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">强一致性（Strong Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1280"><span data-slate-leaf="true" data-offset-key="1280:0" data-first-offset="true"><span 
data-slate-string="true">强一致性要求任意时间下，读操作总是能取得最近一次写操作写入的数据。</span></span></span> </div> <div 
class="se-60a5e3d4 " data-slate-type="paragraph" data-slate-object="block" data-key="1281"> 
<span data-slate-object="text" data-key="1282"><span data-slate-leaf="true" data-offset-key="1282:0" 
data-first-offset="true"><span data-slate-string="true">注意，这里依然是从存储系统客户端的角度来描述的，</span></span></span><span 
data-slate-object="text" data-key="1283"><span data-slate-leaf="true" data-offset-key="1283:0" 
data-first-offset="true"><span class="se-4f1b77e9" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">即便如强一致性的限制，也只要求在读取的时候能读到“最新”的数据就可以了，至于这个在上次写操作之后、这次读操作之前，对存储系统内部的数据是否是“最新”的并无要求。</span></span></span></span><span 
data-slate-object="text" data-key="1284"><span data-slate-leaf="true" data-offset-key="1284:0" 
data-first-offset="true"><span data-slate-string="true">我们经常使用的传统关系型数据库，比如 Oracle、MySQL，它们都是符合强一致性的。</span></span></span> 
</div> <div class="se-a4fe5bc1 " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span class="se-dbe999f3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">弱一致性（Weak Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1287"><span data-slate-leaf="true" data-offset-key="1287:0" data-first-offset="true"><span 
class="se-959c01e7" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">弱一致性和强一致性相反，读操作</span></span></span></span><span 
data-slate-object="text" data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" 
data-first-offset="true"><span class="se-d4a2b323" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">并不能保证</span></span></span></span><span data-slate-object="text" data-key="1289"><span 
data-slate-leaf="true" data-offset-key="1289:0" data-first-offset="true"><span data-slate-string="true">可以取得最新一次写操作写入的数据，也就是说，客户端可能读到最新的数据，也可能读不到最新的数据。</span></span></span> 
</div> <div class="se-531d52cb " data-slate-type="paragraph" data-slate-object="block" data-key="1290"> 
<span data-slate-object="text" data-key="1291"><span data-slate-leaf="true" data-offset-key="1291:0" 
data-first-offset="true"><span data-slate-string="true">这个“并不能保证”就有点“搞笑”了——都不确定能不能读到最新值，那它有什么用？其实它的应用也挺广泛的，最常见的例子就是缓存，比如一个静态资源被浏览器缓存起来，那么这之后只要是从缓存内取得的数据，使用者其实根本不知道这个数据是不是最新的，因为即便它实际有了更新，服务端也不会通知你。</span></span></span> 
</div> <div class="se-93cc4b13 " data-slate-type="paragraph" data-slate-object="block" data-key="1292"> 
<span data-slate-object="text" data-key="1293"><span data-slate-leaf="true" data-offset-key="1293:0" 
data-first-offset="true"><span class="se-03eeaee8" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">最终一致性（Eventual Consistency）：</span></span></span></span><span data-slate-object="text" 
data-key="1294"><span data-slate-leaf="true" data-offset-key="1294:0" data-first-offset="true"><span 
data-slate-string="true">最终一致性介于强一致性和弱一致性之间，写操作之后立即进行读操作，可能无法读到更新后的值，但是如果经过了一个指定的时间窗口，就能保证可以读到那个更新后的值。</span></span></span> 
</div> <div class="se-d92ab5c5 " data-slate-type="paragraph" data-slate-object="block" data-key="1295"> 
<span data-slate-object="text" data-key="1296"><span data-slate-leaf="true" data-offset-key="1296:0" 
data-first-offset="true"><span data-slate-string="true">最终一致性可能是我们日常生活中最常见的一致性模型了。比如搜索引擎，搜索引擎的爬虫会定期爬取数据，并更新搜索数据，因此如果你的网站只是刚刚更新，可能还无法搜到这个更新内容，但只要是过了一定的时间窗口，它就会出现在搜索结果中了。</span></span></span> 
</div> <h2 class="se-b7a48732" data-slate-type="heading" data-slate-object="block" data-key="1297"><span 
data-slate-object="text" data-key="1298"><span data-slate-leaf="true" data-offset-key="1298:0" 
data-first-offset="true"><span data-slate-string="true">数据高可用的架构技术</span></span></span></h2> 
<div class="se-e1222b64 " data-slate-type="paragraph" data-slate-object="block" data-key="1299"> 
<span data-slate-object="text" data-key="1300"><span data-slate-leaf="true" data-offset-key="1300:0" 
data-first-offset="true"><span data-slate-string="true">接下来，我们探讨互联网应用中最常见的几种架构技术，它们都是用以解决数据可用性的问题，就如同我们在上文中所提到的那样，既包括数据本身的可用性，又包括数据读写服务的可用性。</span></span></span> 
</div> <h3 class="se-119601fe" data-slate-type="heading" data-slate-object="block" data-key="1301"><span 
data-slate-object="text" data-key="1302"><span data-slate-leaf="true" data-offset-key="1302:0" 
data-first-offset="true"><span data-slate-string="true">1. 简单备份</span></span></span></h3> <div 
class="se-a2a11c4e " data-slate-type="paragraph" data-slate-object="block" data-key="1303"> 
<span data-slate-object="text" data-key="1304"><span data-slate-leaf="true" data-offset-key="1304:0" 
data-first-offset="true"><span data-slate-string="true">简单备份（Backup）指的就是定期或按需对存储系统中的数据全量或增量进行复制，并保存为副本，从而降低数据丢失风险的一种方式。</span></span></span> 
</div> <div class="se-c957c305" data-slate-type="image" data-slate-object="block" data-key="1305"> 
<img class="se-61b1b487" src="https://static001.geekbang.org/resource/image/53/4f/53c3e61aca5906962a78446cbdb5fa4f.png"> 
</div> <div class="se-b51603d8 " data-slate-type="paragraph" data-slate-object="block" data-key="1306"> 
<span data-slate-object="text" data-key="1307"><span data-slate-leaf="true" data-offset-key="1307:0" 
data-first-offset="true"><span data-slate-string="true">这是一种实现上最简单的技术，在个人电脑上极其常见，但即便在工业界，依然有大量的应用场景。比方说 
Amazon RDS（将关系数据库搬到云上）的 Snapshot 技术，可以定期将所有数据导出为一份副本。在 CPU 和 I/O 等资源不成为瓶颈的情况下，因为是异步进行的，简单备份往往对存储系统读写操作的影响很小。</span></span></span> 
</div> <div class="se-71eb63e8 " data-slate-type="paragraph" data-slate-object="block" data-key="1308"> 
<span data-slate-object="text" data-key="1309"><span data-slate-leaf="true" data-offset-key="1309:0" 
data-first-offset="true"><span data-slate-string="true">但是，这种方式存在存储系统的单点故障问题，一旦存储系统挂掉了，服务也就中断了，因此基本没法谈可用性。</span></span></span> 
</div> <div class="se-252ff97d " data-slate-type="paragraph" data-slate-object="block" data-key="1310"> 
<span data-slate-object="text" data-key="1311"><span data-slate-leaf="true" data-offset-key="1311:0" 
data-first-offset="true"><span data-slate-string="true">你可能会说，可用性的话，可以给访问存储的 Web 服务器做双机备份啊。没错，但那解决的是 
Web 服务器可用性的问题，并不是我们这里最关心的数据可用性的问题，数据存储依然是单点的。同时，如果什么时候存储系统挂掉了，那么只能恢复到最近一次的备份点，因此可能丢失大量的数据。</span></span></span> 
</div> <h3 class="se-a6a67ff9" data-slate-type="heading" data-slate-object="block" data-key="1312"><span 
data-slate-object="text" data-key="1313"><span data-slate-leaf="true" data-offset-key="1313:0" 
data-first-offset="true"><span data-slate-string="true">2. Multi-Master</span></span></span></h3> 
<div class="se-be7810c3 " data-slate-type="paragraph" data-slate-object="block" data-key="1314"> 
<span data-slate-object="text" data-key="1315"><span data-slate-leaf="true" data-offset-key="1315:0" 
data-first-offset="true"><span data-slate-string="true">Multi-Master 架构是指存在多个 Master（主）节点，各自都提供完整的读写服务，数据备份之间的互相拷贝为了不影响读写请求的性能，通常是异步进行的。</span></span></span> 
</div> <div class="se-a1183064" data-slate-type="image" data-slate-object="block" data-key="1316"> 
<img class="se-fa157b70" src="https://static001.geekbang.org/resource/image/b9/cc/b9153efbb171d6381a08cfa577bc02cc.jpg"> 
</div> <div class="se-643be13e " data-slate-type="paragraph" data-slate-object="block" data-key="1317"> 
<span data-slate-object="text" data-key="1318"><span data-slate-leaf="true" data-offset-key="1318:0" 
data-first-offset="true"><span data-slate-string="true">从图中，你可以看到，如果某一主节点对应的存储服务挂掉了，那么还有另一个主节点可以提供对应服务，因此，这种方式是可以提供高可用服务的。图中只放了两个主节点，但是其实是可以放置多个的。</span></span></span> 
</div> <div class="se-2f2af078 " data-slate-type="paragraph" data-slate-object="block" data-key="1319"> 
<span data-slate-object="text" data-key="1320"><span data-slate-leaf="true" data-offset-key="1320:0" 
data-first-offset="true"><span data-slate-string="true">关于一致性，通常情况下节点之间的数据互拷贝是异步进行的，因此是最终一致性。需要说明的是，这个数据互拷贝理论上也是可以做到同步进行的，即将数据拷贝到所有其它的主节点以后再将响应返回给用户，而且那种情况下就可以做到强一致性，不过实际却很少有这样做的，这是为什么呢？</span></span></span> 
</div> <div class="se-fbfeac27 " data-slate-type="paragraph" data-slate-object="block" data-key="1321"> 
<span data-slate-object="text" data-key="1322"><span data-slate-leaf="true" data-offset-key="1322:0" 
data-first-offset="true"><span data-slate-string="true">第一个原因，显而易见，同步的数据拷贝会导致整体请求响应的时延增加。</span></span></span> 
</div> <div class="se-2534079e " data-slate-type="paragraph" data-slate-object="block" data-key="1323"> 
<span data-slate-object="text" data-key="1324"><span data-slate-leaf="true" data-offset-key="1324:0" 
data-first-offset="true"><span data-slate-string="true">第二个，也是更重要的原因，如果有节点异常，这个拷贝操作就可能会超时或失败，这种情况下，你觉得存储系统应该怎样对待这个错误？显然，存储系统会陷入两难的境地。</span></span></span> 
</div> <div class="se-ec15f918" data-slate-type="list" data-slate-object="block" data-key="1325"> 
<div class="se-aceabca4 se-8e299a4c" data-slate-type="list-line" data-slate-object="block" 
data-key="1326"> <span data-slate-object="text" data-key="1327"><span data-slate-leaf="true" 
data-offset-key="1327:0" data-first-offset="true"><span data-slate-string="true">如果系统容许错误发生，不返回错误给用户，那么强一致性就无法保证，既然无法保证，那么这个拷贝过程就完全可以设计成异步的，因为既然无论如何也无法保证强一致性，这个同步除了增加时延以外，并未带来任何明显的好处。</span></span></span> 
</div> <div class="se-d2c750e0 se-22b2bc95" data-slate-type="list-line" data-slate-object="block" 
data-key="1328"> <span data-slate-object="text" data-key="1329"><span data-slate-leaf="true" 
data-offset-key="1329:0" data-first-offset="true"><span data-slate-string="true">如果系统不容许错误发生，即返回错误给用户，一致性就被严格保证了，但是这样的话，整个存储系统就不再是高可用了，因为任何一个主节点的不可用，就会导致其它任意主节点向其拷贝数据的失败，进而导致整个系统都变得不可用。我们使用多个主节点的目的就是要提高可用性，而现在这样的设计和高可用性的目的就自相矛盾了。</span></span></span> 
</div> </div> <div class="se-7656f08d " data-slate-type="paragraph" data-slate-object="block" 
data-key="1330"> <span data-slate-object="text" data-key="1331"><span data-slate-leaf="true" 
data-offset-key="1331:0" data-first-offset="true"><span data-slate-string="true">其实，对待这个节点间的数据拷贝错误，还有第三种方式，它结合了上述二者的优点。我先卖个关子，我们在下面 
Master-Slave 的部分会谈到。</span></span></span> </div> <div class="se-39175672 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1332"> <span data-slate-object="text" data-key="1333"><span 
data-slate-leaf="true" data-offset-key="1333:0" data-first-offset="true"><span data-slate-string="true">再来说说 
Multi-Master 的缺陷。</span></span></span><span data-slate-object="text" data-key="1334"><span 
data-slate-leaf="true" data-offset-key="1334:0" data-first-offset="true"><span class="se-c8c593d9" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">它最大的缺陷是关于事务处理的，本地事务（即单个存储节点）可以提交成功，但是全局事务（所有存储节点）却可能失败。</span></span></span></span><span 
data-slate-object="text" data-key="1335"><span data-slate-leaf="true" data-offset-key="1335:0" 
data-first-offset="true"><span data-slate-string="true">它包含这样两种典型的产生问题的场景：</span></span></span> 
</div> <div class="se-5ce9d582" data-slate-type="list" data-slate-object="block" data-key="1336"> 
<div class="se-4650c8dc se-bbec9ea1" data-slate-type="list-line" data-slate-object="block" 
data-key="1337"> <span data-slate-object="text" data-key="1338"><span data-slate-leaf="true" 
data-offset-key="1338:0" data-first-offset="true"><span data-slate-string="true">由于是最终一致性，那么数据丢失也是可能发生的，即在写操作成功而节点间数据拷贝还没完成的时刻，如果主节点挂掉了，那么数据丢失也就发生了，只不过丢失的数据可能相对较少，但是全局事务的完整性就无从谈起了。</span></span></span> 
</div> <div class="se-253ae670 se-b4e67ffa" data-slate-type="list-line" data-slate-object="block" 
data-key="1339"> <span data-slate-object="text" data-key="1340"><span data-slate-leaf="true" 
data-offset-key="1340:0" data-first-offset="true"><span data-slate-string="true">如果没有节点异常，主节点 
A 的事务提交成功，主节点 B 的事务也提交成功，它们是做到了对本地数据库中事务操作的原子性。可是当进行节点间数据互拷贝时，一旦这两个提交的事务发生冲突（例如修改同一条记录），它们就傻眼了，到底应该以 
A 还是以 B 的事务为准？这种冲突的解决会比较复杂，而且由于发生在异步的拷贝环节，这时候用户的请求都已经返回响应了，就没法告知用户事务冲突了。</span></span></span> 
</div> </div> <div class="se-f1486780 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1341"> <span data-slate-object="text" data-key="1342"><span data-slate-leaf="true" 
data-offset-key="1342:0" data-first-offset="true"><span data-slate-string="true">因此，当我们要实现全局事务的时候，Multi-Master 
往往不是一个好的选择。</span></span></span> </div> <h3 class="se-9e439169" data-slate-type="heading" data-slate-object="block" 
data-key="1343"><span data-slate-object="text" data-key="1344"><span data-slate-leaf="true" 
data-offset-key="1344:0" data-first-offset="true"><span data-slate-string="true">3. Master-Slave</span></span></span></h3> 
<div class="se-96b99cb1 " data-slate-type="paragraph" data-slate-object="block" data-key="1345"> 
<span data-slate-object="text" data-key="1346"><span data-slate-leaf="true" data-offset-key="1346:0" 
data-first-offset="true"><span data-slate-string="true">Master-Slave 架构是指存在一个可读可写（或者只写）的 Master 
节点，而存在多个只读的 Slave 节点，每当有通过 Master 的更新出现，数据会以异步的方式单向拷贝到所有的 Slave 节点上去。</span></span></span> 
</div> <div class="se-55e94565" data-slate-type="image" data-slate-object="block" data-key="1347"> 
<img class="se-af37bae5" src="https://static001.geekbang.org/resource/image/d2/46/d2ee6e41dd28830a49d736f6e5168a46.jpg"> 
</div> <div class="se-53d8b9d7 " data-slate-type="paragraph" data-slate-object="block" data-key="1348"> 
<span data-slate-object="text" data-key="1349"><span data-slate-leaf="true" data-offset-key="1349:0" 
data-first-offset="true"><span data-slate-string="true">这种方式和 Multi-Master 比起来，将可写的节点数减少为了一个，而允许有多个只读的节点（图中只画了一个，但实际可以有多个），这种方式比较适用互联网较常见的业务，即读远大于写的场景，而且读的可扩展性（Scalability）较强（即增加一个 
Slave 节点的代价较小），而且不存在 Multi-Master 的事务冲突问题。</span></span></span> </div> <div class="se-aa10c240 
" data-slate-type="paragraph" data-slate-object="block" data-key="1350"> <span data-slate-object="text" 
data-key="1351"><span data-slate-leaf="true" data-offset-key="1351:0" data-first-offset="true"><span 
data-slate-string="true">当然了，</span></span></span><span data-slate-object="text" data-key="1352"><span 
data-slate-leaf="true" data-offset-key="1352:0" data-first-offset="true"><span class="se-a136429c" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Master-Slave 
的缺点也很明显</span></span></span></span><span data-slate-object="text" data-key="1353"><span data-slate-leaf="true" 
data-offset-key="1353:0" data-first-offset="true"><span data-slate-string="true">。既然</span></span></span><span 
data-slate-object="text" data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" 
data-first-offset="true"><span class="se-bfcea6d3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">只有一个可写的节点</span></span></span></span><span data-slate-object="text" 
data-key="1355"><span data-slate-leaf="true" data-offset-key="1355:0" data-first-offset="true"><span 
data-slate-string="true">，那么写的可扩展性就很差了；而且和 Multi-Master 一样，数据从 Master 到 Slave 的拷贝是异步进行的，因此数据存在丢失的可能。</span></span></span> 
</div> <div class="se-f49fe67d " data-slate-type="paragraph" data-slate-object="block" data-key="1356"> 
<span data-slate-object="text" data-key="1357"><span data-slate-leaf="true" data-offset-key="1357:0" 
data-first-offset="true"><span data-slate-string="true">和 Multi-Master 一样，我们当然也可以让数据拷贝变成同步进行的，但是这又存在着上文讨论过的同样的缺陷。但是，有一种介于全同步和全异步之间的缓解这个问题的方法，即“最小副本数量”，比如可能存在 
5 个 Slave 节点，但是从 Master 到 Slave 的数据拷贝一旦在 2 个节点成功了，就不用等另外 3 个返回，直接返回用户操作成功。即便那 3 个中存在失败，系统也可以标记失败节点，并按照既定策略自动处理掉，而不影响用户感知。</span></span></span> 
</div> <div class="se-e0991e39 " data-slate-type="paragraph" data-slate-object="block" data-key="1358"> 
<span data-slate-object="text" data-key="1359"><span data-slate-leaf="true" data-offset-key="1359:0" 
data-first-offset="true"><span data-slate-string="true">因此，</span></span></span><span data-slate-object="text" 
data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" data-first-offset="true"><span 
class="se-34e656a0" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">我们可以说这种数据拷贝的方法是“部分同步”“部分异步”的，既降低了数据丢失的可能，又避免了因为某个 
Slave 问题而导致 Master“死等”的情况发生。</span></span></span></span> </div> <div class="se-f5b04869 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1361"> <span data-slate-object="text" data-key="1362"><span 
data-slate-leaf="true" data-offset-key="1362:0" data-first-offset="true"><span data-slate-string="true">最后，值得注意的是，写现在变成单点的了，为了避免单点故障引起的服务中断，一种方式是在 
Master 挂掉的时候，Slave 可以挺身而出，变为 Master 顶上去提供写的服务。但是这件事情说说容易，实际要让它自动发生却有大量的工作要做，比如，谁顶上去，以及顶上去了之后，原来以为挂掉的 
Master 又活过来了怎么办，等等。</span></span></span> </div> <h3 class="se-a724e84a" data-slate-type="heading" 
data-slate-object="block" data-key="1363"><span data-slate-object="text" data-key="1364"><span 
data-slate-leaf="true" data-offset-key="1364:0" data-first-offset="true"><span data-slate-string="true">4. 
其它</span></span></span></h3> <div class="se-92365620 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1365"> <span data-slate-object="text" data-key="1366"><span data-slate-leaf="true" 
data-offset-key="1366:0" data-first-offset="true"><span data-slate-string="true">还有其它更为复杂的方法，一种是 
2PC 或 3PC，即两阶段提交或三阶段提交，甚至采用高容错的分布式的共识算法 Paxos。这些方法能够保证强一致性，但是在实现上都要复杂许多，我在今天的扩展阅读中会介绍它们。</span></span></span> 
</div> <div class="se-3495ee20 " data-slate-type="paragraph" data-slate-object="block" data-key="1367"> 
<span data-slate-object="text" data-key="1368"><span data-slate-leaf="true" data-offset-key="1368:0" 
data-first-offset="true"><span data-slate-string="true">下面这张比较的表格来自 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1369" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="1370"><span data-slate-leaf="true" data-offset-key="1370:0" 
data-first-offset="true"><span data-slate-string="true">Transactions Across Datacenters</span></span></span></a><span 
data-slate-object="text" data-key="1371"><span data-slate-leaf="true" data-offset-key="1371:0" 
data-first-offset="true"><span data-slate-string="true"> 这个著名的演讲，这张图在互联网上流传很广。</span></span></span> 
</div> <div class="se-243783b6" data-slate-type="image" data-slate-object="block" data-key="1372"> 
<img class="se-f2caf4f8" src="https://static001.geekbang.org/resource/image/31/c2/31ba31142c4854ae042ad29e627ee7c2.jpg"> 
</div> <div class="se-829eef9b " data-slate-type="paragraph" data-slate-object="block" data-key="1373"> 
<span data-slate-object="text" data-key="1374"><span data-slate-leaf="true" data-offset-key="1374:0" 
data-first-offset="true"><span data-slate-string="true">简单说明一下，从上到下每行的含义依次为：一致性、事务支持、延迟、吞吐量、数据丢失和故障转移（指的是节点出现故障以后，其它节点可以自动顶替上来的能力）。</span></span></span> 
</div> <div class="se-d05504e3 " data-slate-type="paragraph" data-slate-object="block" data-key="1375"> 
<span data-slate-object="text" data-key="1376"><span data-slate-leaf="true" data-offset-key="1376:0" 
data-first-offset="true"><span data-slate-string="true">从中我们可以看到，没有一列能够做到全绿色，这正如我们所知道的那样，软件工程上的问题都“没有银弹”。特别是，Backups、M/S 
和 MM 得益于异步的副本拷贝，能够做到低延迟，这就无法做到强一致性；而 2PC 和 Paxos 通过同步操作可以做到强一致性，却带来了高延迟。</span></span></span> 
</div> <h2 class="se-51267e48" data-slate-type="heading" data-slate-object="block" data-key="1377"><span 
data-slate-object="text" data-key="1378"><span data-slate-leaf="true" data-offset-key="1378:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-7a9b18c1 " data-slate-type="paragraph" data-slate-object="block" data-key="1379"> 
<span data-slate-object="text" data-key="1380"><span data-slate-leaf="true" data-offset-key="1380:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习和理解了数据持久化中一致性的相关概念和实现技术，希望通过今天的学习，你能做到“知其然，知其所以然”。</span></span></span> 
</div> <div class="se-77ba4c3e " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提一个问题，检验一下你的学习成果。请将下列存储系统按照“强一致性”“弱一致性”和“最终一致性”进行归类：</span></span></span> 
</div> <div class="se-6b401cd8" data-slate-type="list" data-slate-object="block" data-key="1383"> 
<div class="se-4e9eca18 se-9590fe21" data-slate-type="list-line" data-slate-object="block" 
data-key="1384"> <span data-slate-object="text" data-key="1385"><span data-slate-leaf="true" 
data-offset-key="1385:0" data-first-offset="true"><span data-slate-string="true">关系数据库</span></span></span> 
</div> <div class="se-e6609b83 se-ecb71f35" data-slate-type="list-line" data-slate-object="block" 
data-key="1386"> <span data-slate-object="text" data-key="1387"><span data-slate-leaf="true" 
data-offset-key="1387:0" data-first-offset="true"><span data-slate-string="true">本地文件</span></span></span> 
</div> <div class="se-05719620 se-9fafac54" data-slate-type="list-line" data-slate-object="block" 
data-key="1388"> <span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" 
data-offset-key="1389:0" data-first-offset="true"><span data-slate-string="true">浏览器缓存</span></span></span> 
</div> <div class="se-79eb9cd8 se-0735b773" data-slate-type="list-line" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">网盘数据</span></span></span> 
</div> <div class="se-cebe8fa1 se-c01f7131" data-slate-type="list-line" data-slate-object="block" 
data-key="1392"> <span data-slate-object="text" data-key="1393"><span data-slate-leaf="true" 
data-offset-key="1393:0" data-first-offset="true"><span data-slate-string="true">CDN 节点上的静态资源</span></span></span> 
</div> <div class="se-c475542c se-0a8e8282" data-slate-type="list-line" data-slate-object="block" 
data-key="1394"> <span data-slate-object="text" data-key="1395"><span data-slate-leaf="true" 
data-offset-key="1395:0" data-first-offset="true"><span data-slate-string="true">搜索引擎爬虫爬到的数据</span></span></span> 
</div> </div> <div class="se-0934fa4a " data-slate-type="paragraph" data-slate-object="block" 
data-key="1396"> <span data-slate-object="text" data-key="1397"><span data-slate-leaf="true" 
data-offset-key="1397:0" data-first-offset="true"><span data-slate-string="true">好，今天的正文内容就到这里。如果你对一致性哈希原理了解不够透彻的话，我强烈推荐你继续学习今天的选修课堂。</span></span></span> 
</div> <h2 class="se-6f7bca50" data-slate-type="heading" data-slate-object="block" data-key="1398"><span 
data-slate-object="text" data-key="1399"><span data-slate-leaf="true" data-offset-key="1399:0" 
data-first-offset="true"><span data-slate-string="true">选修课堂：一致性哈希</span></span></span></h2> 
<div class="se-b71f65d4 " data-slate-type="paragraph" data-slate-object="block" data-key="1400"> 
<span data-slate-object="text" data-key="1401"><span data-slate-leaf="true" data-offset-key="1401:0" 
data-first-offset="true"><span data-slate-string="true">在今天的选修课堂中，我们来学习一种特殊的哈希算法——一致性哈希（Consistent 
Hashing）。</span></span></span> </div> <div class="se-ea554d4b " data-slate-type="paragraph" 
data-slate-object="block" data-key="1402"> <span data-slate-object="text" data-key="1403"><span 
data-slate-leaf="true" data-offset-key="1403:0" data-first-offset="true"><span data-slate-string="true">首先，你可以在脑海里回忆一下，什么是哈希算法。哈希算法，又被称为散列算法，就是通过某种确定的键值函数，将源数据映射成为一个简短的新数据串，这个串叫做哈希值。</span></span></span><span 
data-slate-object="text" data-key="1404"><span data-slate-leaf="true" data-offset-key="1404:0" 
data-first-offset="true"><span class="se-15a396da" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">如果两个源数据的 hash 值不同，那么它们一定不相同；如果两个源数据的 hash 值相同，那么这两个源数据可能相同，也可能不相同。</span></span></span></span> 
</div> <div class="se-36e76263 " data-slate-type="paragraph" data-slate-object="block" data-key="1405"> 
<span data-slate-object="text" data-key="1406"><span data-slate-leaf="true" data-offset-key="1406:0" 
data-first-offset="true"><span data-slate-string="true">我们在 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1407" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="1408"><span data-slate-leaf="true" data-offset-key="1408:0" data-first-offset="true"><span 
data-slate-string="true">[第 02 讲]</span></span></span></a><span data-slate-object="text" data-key="1409"><span 
data-slate-leaf="true" data-offset-key="1409:0" data-first-offset="true"><span data-slate-string="true"> 
中谈到的数字签名，就是通过一个哈希算法，得到证书的哈希值，也就是它的“指纹”，是经过加密以后得到的。哈希是很常用的算法和技术，在后面的全栈内容中我们还会遇到。</span></span></span> 
</div> <div class="se-56ab5678 " data-slate-type="paragraph" data-slate-object="block" data-key="1410"> 
<span data-slate-object="text" data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" 
data-first-offset="true"><span data-slate-string="true">我们有时候会使用一个特殊的哈希算法，来将每项数据都映射到某一个“位置”，从而将大量的数据分散存储到不同的位置中。哈希算法在数据量大，且单个节点（单台机器）无法处理的时候尤为有用。比如说，我们要将从 
0 到 9999 这 10000 个连续自然数分散到 5 个数据存储的节点上，那我就可以设计一个基于取余数的哈希算法，做到均匀分布：</span></span></span> </div> 
<div class="se-4178fa03 se-34e422ee" data-slate-type="pre" data-slate-object="block" data-key="1412"> 
<div class="se-4a6bde3b se-d3b747f0"> <span></span> </div> <div class="se-f12e84f3"> <div class="se-43133065 
se-a982e19b" data-code-line-number="1"></div> </div> <div class="se-1faa2e56 ps"> <div class="se-7a1105a5 
se-fe18eba5" data-slate-type="code-line" data-slate-object="block" data-key="1413"> <span data-slate-object="text" 
data-key="1414"><span data-slate-leaf="true" data-offset-key="1414:0" data-first-offset="true"><span 
data-slate-string="true">f(x) = x % 5</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-50a49f32 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span data-slate-string="true">我们可以看到，这个函数的结果，也就是哈希值，只有 
0、1、2、3、4 这 5 个，对应这 5 个节点，那么我可以根据其结果把这个 x 放到相应的节点上去。这样，每个节点就只需要存储 2000 个数。</span></span></span> 
</div> <div class="se-951a5fda " data-slate-type="paragraph" data-slate-object="block" data-key="1417"> 
<span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" data-offset-key="1418:0" 
data-first-offset="true"><span data-slate-string="true">好，这看起来是个挺好的解决办法，但是现在问题来了，由于业务的扩张，我们现在需要处理从 
0 到 11999 这 12000 个数了，也就是说，多了 2000 个数。可是，节点承载的数据量已经基本到达了极限，没法再加入那么多数据了。</span></span></span> 
</div> <div class="se-394dfb90 " data-slate-type="paragraph" data-slate-object="block" data-key="1419"> 
<span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" data-offset-key="1420:0" 
data-first-offset="true"><span data-slate-string="true">没问题，我们加机器吧，现在有 6 个节点了，我们就得修改这个算法：</span></span></span> 
</div> <div class="se-215a545c se-fdc82bcb" data-slate-type="pre" data-slate-object="block" 
data-key="1421"> <div class="se-b283ed93 se-ca044d93"> <span></span> </div> <div class="se-a6fddf0a"> 
<div class="se-31c68534 se-1efdcbfc" data-code-line-number="1"></div> </div> <div class="se-6aaebcff 
ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="1422"> <span data-slate-object="text" data-key="1423"><span data-slate-leaf="true" 
data-offset-key="1423:0" data-first-offset="true"><span data-slate-string="true">f(x) = x % 
6</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div 
class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-ac2b823e " data-slate-type="paragraph" data-slate-object="block" 
data-key="1424"> <span data-slate-object="text" data-key="1425"><span data-slate-leaf="true" 
data-offset-key="1425:0" data-first-offset="true"><span data-slate-string="true">嗯，这样数据还是能均匀分布。</span></span></span> 
</div> <div class="se-36a13c67 " data-slate-type="paragraph" data-slate-object="block" data-key="1426"> 
<span data-slate-object="text" data-key="1427"><span data-slate-leaf="true" data-offset-key="1427:0" 
data-first-offset="true"><span data-slate-string="true">原理上没错，可是这又带来了一个问题，就是这些已经在节点上的数据，必须要调整位置了，毕竟算法变了嘛，因此这些数所在的节点可能要改变，这个过程叫做 
</span></span></span><span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span class="se-1eddec9d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">Rehashing</span></span></span></span><span 
data-slate-object="text" data-key="1429"><span data-slate-leaf="true" data-offset-key="1429:0" 
data-first-offset="true"><span data-slate-string="true">。这一调整，就傻眼了，只有同为 5 和 6 的倍数的数（即只有为 30 
倍数的数），不用调整位置，其它全部都要调整。也就是说，就因为加了这一台机器，29/30 = 96.7% 的数据全部都要调整位置！</span></span></span> </div> 
<div class="se-f5f4d34c " data-slate-type="paragraph" data-slate-object="block" data-key="1430"> 
<span data-slate-object="text" data-key="1431"><span data-slate-leaf="true" data-offset-key="1431:0" 
data-first-offset="true"><span data-slate-string="true">这个代价显然是接受不了的，那有没有办法可以优化它呢？</span></span></span> 
</div> <div class="se-a9b63c36 " data-slate-type="paragraph" data-slate-object="block" data-key="1432"> 
<span data-slate-object="text" data-key="1433"><span data-slate-leaf="true" data-offset-key="1433:0" 
data-first-offset="true"><span data-slate-string="true">当然！</span></span></span><span data-slate-object="text" 
data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" data-first-offset="true"><span 
class="se-a16a7b7e" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">一致性哈希，就是一种尽可能减少 
Rehashing 过程中进行数据迁移的算法。</span></span></span></span><span data-slate-object="text" data-key="1435"><span 
data-slate-leaf="true" data-offset-key="1435:0" data-first-offset="true"><span data-slate-string="true">且看下面这张图：</span></span></span> 
</div> <div class="se-18afc8cd" data-slate-type="image" data-slate-object="block" data-key="1436"> 
<img class="se-84e7f2a0" src="https://static001.geekbang.org/resource/image/dd/39/dd1f0fd322a16176c72395b79422cf39.jpg"> 
</div> <div class="se-2a24f3ce " data-slate-type="paragraph" data-slate-object="block" data-key="1437"> 
<span data-slate-object="text" data-key="1438"><span data-slate-leaf="true" data-offset-key="1438:0" 
data-first-offset="true"><span data-slate-string="true">请你</span></span></span><span data-slate-object="text" 
data-key="1439"><span data-slate-leaf="true" data-offset-key="1439:0" data-first-offset="true"><span 
class="se-5327c6f1" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">把上面的圆盘想象成一个时钟</span></span></span></span><span 
data-slate-object="text" data-key="1440"><span data-slate-leaf="true" data-offset-key="1440:0" 
data-first-offset="true"><span data-slate-string="true">，总共有 12 格（0 点到 12 点），假如说我们通过上面类似的哈希算法，把数据映射到时钟的每个格子上。因为是时钟，我们这次取 
12 的余数：</span></span></span> </div> <div class="se-d6c9514b se-a8f81f75" data-slate-type="pre" 
data-slate-object="block" data-key="1441"> <div class="se-416502f4 se-6805988c"> <span></span> 
</div> <div class="se-ddf483cc"> <div class="se-51fa73c7 se-64247e85" data-code-line-number="1"></div> 
</div> <div class="se-191633f5 ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="1442"> <span data-slate-object="text" data-key="1443"><span 
data-slate-leaf="true" data-offset-key="1443:0" data-first-offset="true"><span data-slate-string="true">f(x) 
= x % 12</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> 
<div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" 
style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 
0px;"></div> </div> </div> </div> <div class="se-13e65dbf " data-slate-type="paragraph" data-slate-object="block" 
data-key="1444"> <span data-slate-object="text" data-key="1445"><span data-slate-leaf="true" 
data-offset-key="1445:0" data-first-offset="true"><span data-slate-string="true">同时，系统中总共有三台服务器，那么每台服务器就可以负责管理其中的“4 
个小时”的数据。比如哈希值是 1~4 的数据（范围 B）存储在右下角的节点，5~8 的数据（范围 C）存储在左下角的节点，而 9~12 的数据（范围 A）存储到正上方的节点。</span></span></span> 
</div> <div class="se-7f8d2b85 " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">用这种方式来打散数据看起来似乎没有什么特别的对不对，别急，当我们添加新硬件，有一个新节点加入的时候，情况就不同了，请看下图：</span></span></span> 
</div> <div class="se-1ed47c44" data-slate-type="image" data-slate-object="block" data-key="1448"> 
<img class="se-329926d5" src="https://static001.geekbang.org/resource/image/55/50/550fd7dc68feb27eb729d9b915d3da50.jpg"> 
</div> <div class="se-5e8c4e6a " data-slate-type="paragraph" data-slate-object="block" data-key="1449"> 
<span data-slate-object="text" data-key="1450"><span data-slate-leaf="true" data-offset-key="1450:0" 
data-first-offset="true"><span data-slate-string="true">在这种情况下，正下方有一台机器被加入，原本 5~8 点的数据被分成两部分，7~8 
点的数据（C2）依然存储在左下角的原节点，而 5~6 点的数据（C1）则需要迁移到新的，也就是正下方的节点上。</span></span></span> </div> <div class="se-e028be15 
" data-slate-type="paragraph" data-slate-object="block" data-key="1451"> <span data-slate-object="text" 
data-key="1452"><span data-slate-leaf="true" data-offset-key="1452:0" data-first-offset="true"><span 
data-slate-string="true">你看，这种情况下，添加一个节点，只需要移动其中的一部分数据，也就是 2/12 = 1/6 的数据就行，是不是对整个系统影响就小了很多？</span></span></span> 
</div> <div class="se-0562dbac " data-slate-type="paragraph" data-slate-object="block" data-key="1453"> 
<span data-slate-object="text" data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" 
data-first-offset="true"><span data-slate-string="true">等等！你可能会说，这样添加了一台服务器，如果原始数据哈希计算后的分布是均匀的，</span></span></span><span 
data-slate-object="text" data-key="1455"><span data-slate-leaf="true" data-offset-key="1455:0" 
data-first-offset="true"><span class="se-885045bf" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">经过 了添加机器的操作，节点上承载数据分布却是不均匀的</span></span></span></span><span data-slate-object="text" 
data-key="1456"><span data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span 
data-slate-string="true">——正上方、右下角的服务器分别承载了总共 1/3 的数据，而左下角、正下方的服务器却各自只需要承载 1/6 的数据。</span></span></span> 
</div> <div class="se-a5e9e9c4 " data-slate-type="paragraph" data-slate-object="block" data-key="1457"> 
<span data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">那么，这个问题，怎么解决？如果你能想到这个问题，那非常好。</span></span></span> 
</div> <div class="se-9930e26b " data-slate-type="paragraph" data-slate-object="block" data-key="1459"> 
<span data-slate-object="text" data-key="1460"><span data-slate-leaf="true" data-offset-key="1460:0" 
data-first-offset="true"><span data-slate-string="true">解决方法就是引入“</span></span></span><span 
data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span class="se-73f891eb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">虚拟节点</span></span></span></span><span data-slate-object="text" data-key="1462"><span 
data-slate-leaf="true" data-offset-key="1462:0" data-first-offset="true"><span data-slate-string="true">”，我们根据时钟的 
12 个数字，把它均匀分成 12 个区域，分别由 12 个虚拟节点负责，并且顺时针按照 Ax-Bx-Cx 这样命名。这样，在添加机器以前，每台机器需要负责 4 块数据（例如某台机器 
A 需要承载 A1、A2、A3 和 A4 的数据），并且它们均匀地散布在圆环上：</span></span></span> </div> <div class="se-0e56c1af" 
data-slate-type="image" data-slate-object="block" data-key="1463"> <img class="se-227aa300" 
src="https://static001.geekbang.org/resource/image/75/b0/75a9aa4ba97bae18fbff18698601ceb0.jpg"> 
</div> <div class="se-48d4fc10 " data-slate-type="paragraph" data-slate-object="block" data-key="1464"> 
<span data-slate-object="text" data-key="1465"><span data-slate-leaf="true" data-offset-key="1465:0" 
data-first-offset="true"><span data-slate-string="true">好，现在添加新机器，我们只需要把 A1、B2、C3 这三个虚拟节点的数据，搬迁到新机器 
D 上：</span></span></span> </div> <div class="se-6b174060" data-slate-type="image" data-slate-object="block" 
data-key="1466"> <img class="se-859b7210" src="https://static001.geekbang.org/resource/image/a0/6c/a0d26ef488f14ed18e6056960ab7d46c.jpg"> 
</div> <div class="se-f0124a47 " data-slate-type="paragraph" data-slate-object="block" data-key="1467"> 
<span data-slate-object="text" data-key="1468"><span data-slate-leaf="true" data-offset-key="1468:0" 
data-first-offset="true"><span data-slate-string="true">你看，同样搬迁了最少量的数据，且元盘上的数据还是均匀分布的，只是从均匀分布在 
3 台机器，变成了均匀分布到 4 台机器上。当然，作为示意，我这里是把圆环分成了 12 份，实际可以分成更多的 2^n 份。</span></span></span> </div> 
<h2 class="se-83c4436e" data-slate-type="heading" data-slate-object="block" data-key="1469"><span 
data-slate-object="text" data-key="1470"><span data-slate-leaf="true" data-offset-key="1470:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-db7abec6" data-slate-type="list" data-slate-object="block" data-key="1471"> <div 
class="se-8bc339cd se-cecc77d6" data-slate-type="list-line" data-slate-object="block" data-key="1472"> 
<span data-slate-object="text" data-key="1473"><span data-slate-leaf="true" data-offset-key="1473:0" 
data-first-offset="true"><span data-slate-string="true">关于 2PC 和 3PC，如果你感兴趣的话，可以阅读维基百科的词条，</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1474" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="1475"><span data-slate-leaf="true" data-offset-key="1475:0" 
data-first-offset="true"><span data-slate-string="true">2PC</span></span></span></a><span data-slate-object="text" 
data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" data-first-offset="true"><span 
data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1477" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1478"><span 
data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span data-slate-string="true">3PC</span></span></span></a><span 
data-slate-object="text" data-key="1479"><span data-slate-leaf="true" data-offset-key="1479:0" 
data-first-offset="true"><span data-slate-string="true">，或者是直接阅读 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1480" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="1481"><span data-slate-leaf="true" data-offset-key="1481:0" data-first-offset="true"><span 
data-slate-string="true">The Two-Phase Commit Protocol</span></span></span></a><span data-slate-object="text" 
data-key="1482"><span data-slate-leaf="true" data-offset-key="1482:0" data-first-offset="true"><span 
data-slate-string="true"> 和 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1483" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1484"><span 
data-slate-leaf="true" data-offset-key="1484:0" data-first-offset="true"><span data-slate-string="true">Three-Phase 
Commit Protocol</span></span></span></a><span data-slate-object="text" data-key="1485"><span 
data-slate-leaf="true" data-offset-key="1485:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> <div class="se-ba7bb619 se-bb69bd82" data-slate-type="list-line" data-slate-object="block" 
data-key="1486"> <span data-slate-object="text" data-key="1487"><span data-slate-leaf="true" 
data-offset-key="1487:0" data-first-offset="true"><span data-slate-string="true">关于 Paxos，算法本身比较难，如果你很感兴趣，我找了一些中文材料，我觉得 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1488" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="1489"><span data-slate-leaf="true" data-offset-key="1489:0" 
data-first-offset="true"><span data-slate-string="true">Paxos 算法详解</span></span></span></a><span 
data-slate-object="text" data-key="1490"><span data-slate-leaf="true" data-offset-key="1490:0" 
data-first-offset="true"><span data-slate-string="true">这篇是相对讲得比较清楚的。</span></span></span> 
</div> <div class="se-d1df168e se-2b33f761" data-slate-type="list-line" data-slate-object="block" 
data-key="1491"> <span data-slate-object="text" data-key="1492"><span data-slate-leaf="true" 
data-offset-key="1492:0" data-first-offset="true"><span data-slate-string="true">文中那个表格最早是来自于 
Google I/O 2009 的 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="1493" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1494"><span 
data-slate-leaf="true" data-offset-key="1494:0" data-first-offset="true"><span data-slate-string="true">Transactions 
Across Datacenters</span></span></span></a><span data-slate-object="text" data-key="1495"><span 
data-slate-leaf="true" data-offset-key="1495:0" data-first-offset="true"><span data-slate-string="true"> 
这个分享，后来有人</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1496" 
class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="1497"><span data-slate-leaf="true" 
data-offset-key="1497:0" data-first-offset="true"><span data-slate-string="true">上传到了 Bilibili 
上</span></span></span></a><span data-slate-object="text" data-key="1498"><span data-slate-leaf="true" 
data-offset-key="1498:0" data-first-offset="true"><span data-slate-string="true">，我推荐你听一下这个分享。</span></span></span> 
</div> </div> <div class="se-7a360a05" data-slate-type="image" data-slate-object="block" data-key="1499"> 
<img class="se-d9ee1813" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 11:14:53.371 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=24 
 {executed in 1 msec}
2020-11-19 11:14:53.371 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:14:53.372 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=24 
 {executed in 0 msec}
2020-11-19 11:14:53.372 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:14:53.373 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755693, 1605755693, 1, 'zh-hans', 0, 1, 1, 
0, '23丨知其然，知其所以然：数据的持久化和一致性', 1, 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.376 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=24 
 {executed in 0 msec}
2020-11-19 11:14:53.377 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:14:53.378 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755693, 1605755693, 1, 'zh-hans', 0, 
1, 1, 0, '23丨知其然，知其所以然：数据的持久化和一致性', 'book', 1, 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.381 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=24 
 {executed in 1 msec}
2020-11-19 11:14:53.381 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:14:53.382 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.382 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:14:53.384 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/35e33e5df8597ed1dbbccbf143f2282b?bkt=en-24c643f198a62f8885b27fd491e885b0758adecf2dd4c9864ba967260b581caf47984af393e7e92a&fid=3757516097-778750-486651086529706&time=1605755691&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-tSgez7zmkmjvuWsmKzhMt7rBBK4%3D&to=92&size=16835556&sta_dx=16835556&sta_cs=3418&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854463&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16835556&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6789708150cb975e8741f4146a96b1ad318d49d1393503e42ed7f476f45ac7195599b97580441ac3&sl=76480590&expires=8h&rt=pr&r=928201972&mlogid=7502151356821155175&vbdid=2247232042&fin=23%E4%B8%A8%E7%9F%A5%E5%85%B6%E7%84%B6%EF%BC%8C%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7.m4a&bflag=92,34-92&rtype=1&dp-logid=7502151356821155175&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=548236dbf16cf8fa0924cd4251731d2f773be1e65470bf82&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=23%E4%B8%A8%E7%9F%A5%E5%85%B6%E7%84%B6%EF%BC%8C%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7.m4a', 
24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.387 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.387 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:14:53.389 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/35e33e5df8597ed1dbbccbf143f2282b?bkt=en-24c643f198a62f8885b27fd491e885b0758adecf2dd4c9864ba967260b581caf47984af393e7e92a&fid=3757516097-778750-486651086529706&time=1605755691&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-tSgez7zmkmjvuWsmKzhMt7rBBK4%3D&to=92&size=16835556&sta_dx=16835556&sta_cs=3418&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854463&mtime=1605754779&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16835556&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-6789708150cb975e8741f4146a96b1ad318d49d1393503e42ed7f476f45ac7195599b97580441ac3&sl=76480590&expires=8h&rt=pr&r=928201972&mlogid=7502151356821155175&vbdid=2247232042&fin=23%E4%B8%A8%E7%9F%A5%E5%85%B6%E7%84%B6%EF%BC%8C%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7.m4a&bflag=92,34-92&rtype=1&dp-logid=7502151356821155175&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=548236dbf16cf8fa0924cd4251731d2f773be1e65470bf82&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=23%E4%B8%A8%E7%9F%A5%E5%85%B6%E7%84%B6%EF%BC%8C%E7%9F%A5%E5%85%B6%E6%89%80%E4%BB%A5%E7%84%B6%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7.m4a', 
24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.391 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.391 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:14:53.392 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.392 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:14:53.394 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 11:14:53.396 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.397 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:14:53.398 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.401 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.401 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:14:53.402 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.402 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:14:53.404 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 24, 'https://static001.geekbang.org/resource/image/28/0a/28c390ad1e06e33797046a1bd8465f0a.jpg', 
24) 
 {executed in 1 msec}
2020-11-19 11:14:53.406 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.407 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:14:53.408 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 24, 'https://static001.geekbang.org/resource/image/28/0a/28c390ad1e06e33797046a1bd8465f0a.jpg', 
24) 
 {executed in 0 msec}
2020-11-19 11:14:53.410 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.411 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:14:53.412 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 24, 24) 
 {executed in 0 msec}
2020-11-19 11:14:53.415 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=24 
 {executed in 0 msec}
2020-11-19 11:14:53.415 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:14:53.417 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 24, 24) 
 {executed in 1 msec}
2020-11-19 11:15:29.026 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='593672642943068' 
 {executed in 0 msec}
2020-11-19 11:15:29.027 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:15:29.029 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755729, 1) 
 {executed in 1 msec}
2020-11-19 11:15:29.029 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755729, 1) 
 {executed in 0 msec}
2020-11-19 11:15:29.030 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|25            |
|--------------|

2020-11-19 11:15:29.033 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'df8e4cc0-0b16-45a6-af01-86fb32a91747', 
25) 
 {executed in 0 msec}
2020-11-19 11:15:29.034 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'df8e4cc0-0b16-45a6-af01-86fb32a91747', 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.034 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|25            |
|--------------|

2020-11-19 11:15:29.038 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=25, revision_default=1, revision_timestamp=1605755729, 
revision_uid=1 where vid=25 
 {executed in 0 msec}
2020-11-19 11:15:29.041 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.042 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:15:29.043 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '593672642943068', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.046 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.046 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:15:29.047 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '593672642943068', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.052 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=25 
 {executed in 1 msec}
2020-11-19 11:15:29.052 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:15:29.053 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=25 
 {executed in 0 msec}
2020-11-19 11:15:29.053 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:15:29.054 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 25, 0, 0, 19, 0, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.057 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.057 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:15:29.058 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 11:15:29.058 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:15:29.061 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="496" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-4e6b6fbd " data-slate-type="paragraph" data-slate-object="block" 
data-key="497"> <span data-slate-object="text" data-key="498"><span data-slate-leaf="true" 
data-offset-key="498:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-197cd812 " data-slate-type="paragraph" data-slate-object="block" data-key="499"> 
<span data-slate-object="text" data-key="500"><span data-slate-leaf="true" data-offset-key="500:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中，我们介绍了缓存的本质和应用模式。今天我们继续讨论缓存，这一讲会结合一些实际项目，谈一谈缓存的使用会有哪些问题，以及缓存框架的一些通用性的东西。</span></span></span> 
</div> <h2 class="se-55507434" data-slate-type="heading" data-slate-object="block" data-key="501"><span 
data-slate-object="text" data-key="502"><span data-slate-leaf="true" data-offset-key="502:0" 
data-first-offset="true"><span data-slate-string="true">缓存使用的问题</span></span></span></h2> <div 
class="se-d68753c3 " data-slate-type="paragraph" data-slate-object="block" data-key="503"> 
<span data-slate-object="text" data-key="504"><span data-slate-leaf="true" data-offset-key="504:0" 
data-first-offset="true"><span data-slate-string="true">既然说缓存是“双刃剑”，那我们就必须要谈论它的另一刃——缓存使用可能带来的问题。</span></span></span> 
</div> <h3 class="se-ade78fde" data-slate-type="heading" data-slate-object="block" data-key="505"><span 
data-slate-object="text" data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" 
data-first-offset="true"><span data-slate-string="true">1. 缓存穿透</span></span></span></h3> <div 
class="se-8b50adbd " data-slate-type="paragraph" data-slate-object="block" data-key="507"> 
<span data-slate-object="text" data-key="508"><span data-slate-leaf="true" data-offset-key="508:0" 
data-first-offset="true"><span class="se-dbf10812" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">缓存穿透，指的是在某些情况下，大量对于同一个数据的访问，经过了缓存屏障，但是缓存却未能起到应有的保护作用。</span></span></span></span><span 
data-slate-object="text" data-key="509"><span data-slate-leaf="true" data-offset-key="509:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，对某一个 key 的查询，如果数据库里没有这个数据，那么缓存中也没有数据的存放，每次请求到来都会去查询数据库，缓存根本起不到应有的作用。</span></span></span> 
</div> <div class="se-7dacca59 " data-slate-type="paragraph" data-slate-object="block" data-key="510"> 
<span data-slate-object="text" data-key="511"><span data-slate-leaf="true" data-offset-key="511:0" 
data-first-offset="true"><span data-slate-string="true">当然，这个问题也不难解决，比方说我们可以在缓存中对这个 key 存放一个空结果，毕竟“没有结果”也是结果，也是需要缓存起来的。还有一种缓解方法是使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="512" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">布隆过滤器</span></span></span></a><span 
data-slate-object="text" data-key="514"><span data-slate-leaf="true" data-offset-key="514:0" 
data-first-offset="true"><span data-slate-string="true">等数据结构，在数据库查询之前，预先过滤掉某些不存在的结果。</span></span></span> 
</div> <div class="se-fd119fbb " data-slate-type="paragraph" data-slate-object="block" data-key="515"> 
<span data-slate-object="text" data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" 
data-first-offset="true"><span data-slate-string="true">还有一种特殊情况也会造成缓存穿透的严重后果。一般的缓存策略下，往往需要先发生一次缓存命中失败，接着从实际存储（比如数据库）中得到结果，再回填到内存缓存中。但是，如果这个数据库查询过程比较慢，大量同一数据的请求像雨点一样几乎同时到来，就会全部穿透缓存，一并落到了数据库上，而那个时候最早的那个请求引发的缓存回填甚至都还没有发生，在这种情况下数据库直接就挂掉了，虽然缓存的机制本身看起来并没有任何问题。</span></span></span> 
</div> <div class="se-c313c166 " data-slate-type="paragraph" data-slate-object="block" data-key="517"> 
<span data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">这种问题在某些时间窗口敏感的高并发系统中可能出现，解决方法有这样两种。</span></span></span> 
</div> <div class="se-3bf0a790" data-slate-type="list" data-slate-object="block" data-key="519"> 
<div class="se-821b09ab se-c79147b9" data-slate-type="list-line" data-slate-object="block" 
data-key="520"> <span data-slate-object="text" data-key="521"><span data-slate-leaf="true" 
data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">一种是以流量控制的方式，限制对于同一数据的访问，必须等到前一个完成以后，下一个才能进行，即如果缓存失效而引发的数据库查询正在进行，其它请求就得老老实实地等着。这种方法通用性好，但这个等待机制可能较为复杂，且有可能影响用户体验。</span></span></span> 
</div> <div class="se-ad2caf74 se-cfa83d24" data-slate-type="list-line" data-slate-object="block" 
data-key="522"> <span data-slate-object="text" data-key="523"><span data-slate-leaf="true" 
data-offset-key="523:0" data-first-offset="true"><span data-slate-string="true">另一种方法是缓存预热，在大批量请求到来以前，先主动将该缓存填充好。这种方法操作简单高效，但局限性是需要提前知道哪些数据可能引发缓存穿透的问题。</span></span></span> 
</div> </div> <h3 class="se-17f5898c" data-slate-type="heading" data-slate-object="block" data-key="524"><span 
data-slate-object="text" data-key="525"><span data-slate-leaf="true" data-offset-key="525:0" 
data-first-offset="true"><span data-slate-string="true">2. 缓存雪崩</span></span></span></h3> <div 
class="se-9fed5e40 " data-slate-type="paragraph" data-slate-object="block" data-key="526"> 
<span data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span class="se-6205568c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">原本起屏障作用的缓存，如果在一定的时间段内，对于大量的请求访问失效，即失去了屏障作用，造成它后方的系统压力过大，引起系统过载、宕机等问题，就叫做缓存雪崩。</span></span></span></span> 
</div> <div class="se-c0f9f410 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">我以前在 Amazon 工作的时候，有个著名的内部分享，介绍了 Amazon 
曾经发生的“六大灾难”，其中一大就是缓存雪崩。这个问题发生的时间已经是好多年前了，具体是这样的：有一次 Amazon 机房突然断电，在恢复的时候把网页服务器都通上了电，这时候缓存服务几乎还没有缓存数据，缓存命中率几乎为零，于是大量的请求冲向数据库，直接把数据库冲垮了。外在的表现就是，断电导致网站无法提供服务，短期内访问恢复，随后又丧失服务能力。</span></span></span> 
</div> <div class="se-0bf4fe26 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">事实上，我们也总能看到很多技术报告里面写：平均的缓存命中率能够达到百分之九十多，可以飙到多少多少的 
TPS，为此可以节约多少多少硬件成本。初看这样的设计真不错，但是很容易忽视的一点是：这样的数据是建立在足够长的时间以及足够多的统计数据的基础之上的，但是在单个时间段内，由于缓存雪崩效应，缓存命中率可以低到难以承受的地步，导致底层的数据服务直接被冲垮。</span></span></span> 
</div> <div class="se-d4143444 " data-slate-type="paragraph" data-slate-object="block" data-key="532"> 
<span data-slate-object="text" data-key="533"><span data-slate-leaf="true" data-offset-key="533:0" 
data-first-offset="true"><span data-slate-string="true">对于</span></span></span><span data-slate-object="text" 
data-key="534"><span data-slate-leaf="true" data-offset-key="534:0" data-first-offset="true"><span 
class="se-c100d04f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这种类型的雪崩，最常见的解决方法无非还是限流、预热两种：</span></span></span></span><span 
data-slate-object="text" data-key="535"><span data-slate-leaf="true" data-offset-key="535:0" 
data-first-offset="true"><span data-slate-string="true">前者保证了请求大量落到数据库的时候，系统只接纳能够承载的数量；而后者则在请求访问前，先主动地往内存中加载一定的热点数据，这样请求到来的时候，缓存不是空的，已经具有一定的保护能力了。</span></span></span> 
</div> <div class="se-91a806ef " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">好，我们再回到 Amazon 那个问题，当时的解决方法就是我们刚刚讲的第一种——限流。当时整个系统对于单台机器的限流已经做得比较好了，后来工程师一台一台逐步启动，每启动一台机器，就等一会，等到缓存数据填充并稳定以后，再启动下一台，这样最多也就是单台机器的所有请求全部发生了穿透，这个数量就小得多了，数据库也是可以正常负载的。</span></span></span> 
</div> <div class="se-76fbeca7 " data-slate-type="paragraph" data-slate-object="block" data-key="538"> 
<span data-slate-object="text" data-key="539"><span data-slate-leaf="true" data-offset-key="539:0" 
data-first-offset="true"><span data-slate-string="true">另外一个常见的缓存雪崩场景是：缓存数据通常都有过期时间的，如果缓存加载的时间比较集中，那么很可能到了某一时间点，大量的缓存就会同时过期，于是对应这些数据的请求全部落到了后面的数据库上，从而造成系统崩溃。这个问题解决起来也不难，那就是避免缓存集中写入的时间，如果无法避免，就使用一个范围随机数来均匀地分散过期时间，从而打散缓存过期对系统造成的压力。</span></span></span> 
</div> <h3 class="se-b6f511b4" data-slate-type="heading" data-slate-object="block" data-key="540"><span 
data-slate-object="text" data-key="541"><span data-slate-leaf="true" data-offset-key="541:0" 
data-first-offset="true"><span data-slate-string="true">3. 缓存容量失控</span></span></span></h3> 
<div class="se-f90e54a8 " data-slate-type="paragraph" data-slate-object="block" data-key="542"> 
<span data-slate-object="text" data-key="543"><span data-slate-leaf="true" data-offset-key="543:0" 
data-first-offset="true"><span data-slate-string="true">刚工作不久的时候，我参与做过这样一个系统，用户的行为需要被记录到数据库里，但是每条记录发生的时候都写一次数据库的话开销就太大了，于是有同事设计了一个链表：</span></span></span> 
</div> <div class="se-9da77304" data-slate-type="list" data-slate-object="block" data-key="544"> 
<div class="se-080f6421 se-ffff0472" data-slate-type="list-line" data-slate-object="block" 
data-key="545"> <span data-slate-object="text" data-key="546"><span data-slate-leaf="true" 
data-offset-key="546:0" data-first-offset="true"><span data-slate-string="true">用户的行为首先会被即时记录到内存链表里面去；</span></span></span> 
</div> <div class="se-b6faff5c se-ac709d85" data-slate-type="list-line" data-slate-object="block" 
data-key="547"> <span data-slate-object="text" data-key="548"><span data-slate-leaf="true" 
data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true">每 10 分钟从链表往数据库里面集中写一次数据，然后清空链表内的数据。</span></span></span> 
</div> </div> <div class="se-855234de " data-slate-type="paragraph" data-slate-object="block" 
data-key="549"> <span data-slate-object="text" data-key="550"><span data-slate-leaf="true" 
data-offset-key="550:0" data-first-offset="true"><span data-slate-string="true">看起来这就像是我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="551" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="552"><span data-slate-leaf="true" data-offset-key="552:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span data-slate-string="true"> 中讲到的 Write-Back 模式，看起来也确实可以实现需求。可是，上线没多久系统就挂掉了。那么，这样的设计有什么问题呢？</span></span></span> 
</div> <div class="se-bb8b0c5e" data-slate-type="list" data-slate-object="block" data-key="554"> 
<div class="se-ebfcb7b1 se-5b31d4d8" data-slate-type="list-line" data-slate-object="block" 
data-key="555"> <span data-slate-object="text" data-key="556"><span data-slate-leaf="true" 
data-offset-key="556:0" data-first-offset="true"><span data-slate-string="true">清空链表数据是使用时间条件触发的任务来完成，</span></span></span><span 
data-slate-object="text" data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" 
data-first-offset="true"><span class="se-ec6e618f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过时间因素来限制空间大小，远不如通过队列长度来限制空间大小来得可靠。</span></span></span></span><span 
data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">换句话说，如果这 10 分钟内事件暴增，链表就很容易变得非常大。</span></span></span><span 
data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span class="se-6e7d5498" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这个变化范围取决于请求的上限，而不是在缓存系统自己的掌控中。</span></span></span></span> </div> 
<div class="se-4867a211 se-62bd3403" data-slate-type="list-line" data-slate-object="block" 
data-key="560"> <span data-slate-object="text" data-key="561"><span data-slate-leaf="true" 
data-offset-key="561:0" data-first-offset="true"><span data-slate-string="true">清空链表的任务，如果在执行的过程中出现了异常，甚至仅仅是处理速度受到阻塞，那就会直接导致链表数据无法得到清空，甚至越积越多。实际上，</span></span></span><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span class="se-85810b88" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">链表清空数据并写入数据库是一个耗时的异步行为，这是另一个受控性较差的点。</span></span></span></span><span 
data-slate-object="text" data-key="563"><span data-slate-leaf="true" data-offset-key="563:0" 
data-first-offset="true"><span data-slate-string="true">我们在使用异步系统批量写入数据的时候，一定要考虑这个潜在的危险。</span></span></span> 
</div> </div> <div class="se-320dc631 " data-slate-type="paragraph" data-slate-object="block" 
data-key="564"> <span data-slate-object="text" data-key="565"><span data-slate-leaf="true" 
data-offset-key="565:0" data-first-offset="true"><span data-slate-string="true">这些问题当然在明确的情况下可以得到规避，但是毫无疑问，这样的设计充满了潜在的危险。事实上，最终这样的问题也确实发生了，二者相加导致的结果是链表巨大，撑死了整个系统，OOM，系统失去响应。</span></span></span> 
</div> <div class="se-786b0c0d " data-slate-type="paragraph" data-slate-object="block" data-key="566"> 
<span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true">因此，我们对于缓存容量的控制，最好是基于缓存容量本身来直接控制，但是考虑到某些编程语言的自身限制，比如 
Java，从内存消耗的角度来实现不方便，那么就可以通过基于队列的长度来替代实现。</span></span></span> </div> <h3 class="se-399415cc" 
data-slate-type="heading" data-slate-object="block" data-key="568"><span data-slate-object="text" 
data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span 
data-slate-string="true">4. LRU 的致命缺陷</span></span></span></h3> <div class="se-6e202f23 " data-slate-type="paragraph" 
data-slate-object="block" data-key="570"> <span data-slate-object="text" data-key="571"><span 
data-slate-leaf="true" data-offset-key="571:0" data-first-offset="true"><span data-slate-string="true">LRU 
指的是 Least Recently Used，最少最近使用算法。这是缓存队列维护的最常见算法，原理是：维护一个限定最大容量的队列，队列头部总是放置最近访问的元素（包括新加入的元素），而在超过容量限制时总是从队尾淘汰元素。</span></span></span> 
</div> <div class="se-353f359d " data-slate-type="paragraph" data-slate-object="block" data-key="572"> 
<span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">我们可以用这样一张图，来解释 LRU 的工作原理：</span></span></span> 
</div> <div class="se-67c8603a" data-slate-type="image" data-slate-object="block" data-key="574"> 
<img class="se-e1115e7d" src="https://static001.geekbang.org/resource/image/a4/1a/a4866b19d2718b8ed679615292bf501a.png"> 
</div> <div class="se-2798b40b " data-slate-type="paragraph" data-slate-object="block" data-key="575"> 
<span data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">假设用这个缓存的 LRU 队列来存储城市信息，且队列容量只有 2。</span></span></span> 
</div> <div class="se-ad37302f" data-slate-type="list" data-slate-object="block" data-key="577"> 
<div class="se-6b399a3b se-61485049" data-slate-type="list-line" data-slate-object="block" 
data-key="578"> <span data-slate-object="text" data-key="579"><span data-slate-leaf="true" 
data-offset-key="579:0" data-first-offset="true"><span data-slate-string="true">第一步，用户访问上海信息，上海节点被加入队列；</span></span></span> 
</div> <div class="se-f8e4158e se-259d6fc1" data-slate-type="list-line" data-slate-object="block" 
data-key="580"> <span data-slate-object="text" data-key="581"><span data-slate-leaf="true" 
data-offset-key="581:0" data-first-offset="true"><span data-slate-string="true">第二步，用户访问北京信息，北京节点从队列头部加入，上海相应地被往尾部推；</span></span></span> 
</div> <div class="se-d51aa63f se-9b12d452" data-slate-type="list-line" data-slate-object="block" 
data-key="582"> <span data-slate-object="text" data-key="583"><span data-slate-leaf="true" 
data-offset-key="583:0" data-first-offset="true"><span data-slate-string="true">第三步，用户又访问上海信息，上海被挪到头部；</span></span></span> 
</div> <div class="se-1be9e885 se-80f4dd0c" data-slate-type="list-line" data-slate-object="block" 
data-key="584"> <span data-slate-object="text" data-key="585"><span data-slate-leaf="true" 
data-offset-key="585:0" data-first-offset="true"><span data-slate-string="true">第四步，用户访问天津信息，从头部加入队列后，队列长度超出容量 
2，因此从尾部将北京挤出缓存队列。</span></span></span> </div> </div> <div class="se-5817de03 " data-slate-type="paragraph" 
data-slate-object="block" data-key="586"> <span data-slate-object="text" data-key="587"><span 
data-slate-leaf="true" data-offset-key="587:0" data-first-offset="true"><span data-slate-string="true">这看起来是个很完美的缓存淘汰算法，在队列较长时，总是能保证最近访问的数据位于队列的头部，而在需要从缓存中淘汰数据时，总是能从尾部淘汰最不常用的那一个。但是，如果用户有意无意地访问一些错误信息，就会破坏掉这个 
LRU 队列中最近访问数据的真实性。</span></span></span> </div> <div class="se-069060db " data-slate-type="paragraph" 
data-slate-object="block" data-key="588"> <span data-slate-object="text" data-key="589"><span 
data-slate-leaf="true" data-offset-key="589:0" data-first-offset="true"><span data-slate-string="true">我曾经在实际项目中遇到过这样一个问题，由于搜索引擎的多个并行爬虫在短时间内访问网站并抓取一些冷门页面，这时候这个 
LRU 队列中就存储了相关的冷门数据信息。接着网站活动开启的时间到了，用户量很快就上来了，这时候大量的数据访问全部穿透缓存，导致数据库压力剧增，网站响应时间一下就飙升到了告警线之上。</span></span></span> 
</div> <div class="se-fdfc3134 " data-slate-type="paragraph" data-slate-object="block" data-key="590"> 
<span data-slate-object="text" data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" 
data-first-offset="true"><span data-slate-string="true">既然这个问题已经很明确了，那么解决就不是难事了。有多种算法可以作为 LRU 
的改进方案，比如 LRU-K。就是主缓存队列排的是“第 K 次访问的元素”，也就是说，如果访问次数小于 K，则在另外的一个“低级”队列中维护，这样就保证了只有到达一定的访问下限才会被送到主 
LRU 队列中。</span></span></span> </div> <div class="se-7fccdb2d " data-slate-type="paragraph" 
data-slate-object="block" data-key="592"> <span data-slate-object="text" data-key="593"><span 
data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span data-slate-string="true">这种方法保证了偶然的页面访问不会影响网站在 
LRU 队列中应有的数据分布。再进一步优化，可以将两级队列变成更多级，或者是将低级队列的策略变成 FIFO（2Q 算法）等等，但原理是不变的。</span></span></span> 
</div> <h2 class="se-c02eab50" data-slate-type="heading" data-slate-object="block" data-key="594"><span 
data-slate-object="text" data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" 
data-first-offset="true"><span data-slate-string="true">缓存框架</span></span></span></h2> <div 
class="se-e6ab057f " data-slate-type="paragraph" data-slate-object="block" data-key="596"> 
<span data-slate-object="text" data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" 
data-first-offset="true"><span data-slate-string="true">鉴于缓存的普遍性，缓存框架也可以说是百花齐放。如果你在大型 Web 项目中工作过，你很可能已经用过某一个缓存框架了。下面我就针对缓存框架的两个方面进行讲解，一方面是集成方式，另一方面是核心要素。希望这部分内容，可以帮助你在考察新的缓存框架的时候，心里能有个大致可以参照的谱。</span></span></span> 
</div> <h3 class="se-b041406b" data-slate-type="heading" data-slate-object="block" data-key="598"><span 
data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">集成方式</span></span></span></h3> <div 
class="se-582d2e93 " data-slate-type="paragraph" data-slate-object="block" data-key="600"> 
<span data-slate-object="text" data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲我介绍了 Web 应用 MVC 的三层都可以集成缓存能力，下面我们来进一步思考这部分内容。缓存功能具体怎样整合集成到 
Web 应用中，每一种方式都意味着一个切入点。我认为归纳一下，通常包含了下面这样几种方式。</span></span></span> </div> <div class="se-880d8090 
" data-slate-type="paragraph" data-slate-object="block" data-key="602"> <span data-slate-object="text" 
data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" data-first-offset="true"><span 
class="se-248722ce" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">方式 
1：编程方式</span></span></span></span> </div> <div class="se-713c95fb " data-slate-type="paragraph" 
data-slate-object="block" data-key="604"> <span data-slate-object="text" data-key="605"><span 
data-slate-leaf="true" data-offset-key="605:0" data-first-offset="true"><span data-slate-string="true">这种是最常见的方式，使用编程的方式来获取缓存数据。这种方式比较灵活，对于代码往往以 
Cache-Aside 模式应用。我们以 Java 世界应用最广泛的缓存框架 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="606" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="607"><span 
data-slate-leaf="true" data-offset-key="607:0" data-first-offset="true"><span data-slate-string="true">Ehcache</span></span></span></a><span 
data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true"> 为例，示例代码片段如下：</span></span></span> 
</div> <div class="se-42242a1e se-bbeaf21c" data-slate-type="pre" data-slate-object="block" 
data-key="609" data-code-language="javascript"> <div class="se-6c5f334d se-0306c567"> <span></span> 
</div> <div class="se-a9476fab"> <div class="se-fc1b3c6b se-fefb94b5" data-code-line-number="1"></div> 
<div class="se-fc1b3c6b se-fefb94b5" data-code-line-number="2"></div> <div class="se-fc1b3c6b 
se-fefb94b5" data-code-line-number="3"></div> </div> <div class="se-1830a510 ps ps--active-x"> 
<div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="610"> <span data-slate-object="text" data-key="611"><span data-slate-leaf="true" 
data-offset-key="611:0" data-first-offset="true"><span data-slate-string="true">Cache&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="611:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4701006268" data-annotation-type="annotation"><span data-slate-string="true">String</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:2"><span data-slate-string="true">, City&gt; cityCache 
= cacheManager.createCache(</span></span><span data-slate-leaf="true" data-offset-key="611:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_5699188979" 
data-annotation-type="annotation"><span data-slate-string="true">"cityCache"</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:4"><span data-slate-string="true">, CacheConfigurationBuilder.newCacheConfigurationBuilder(</span></span><span 
data-slate-leaf="true" data-offset-key="611:5"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4930205820" data-annotation-type="annotation"><span data-slate-string="true">String</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:6"><span data-slate-string="true">.class, City.class, 
resourcePools));</span></span></span> </div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="612"> <span data-slate-object="text" data-key="613"><span 
data-slate-leaf="true" data-offset-key="613:0" data-first-offset="true"><span data-slate-string="true">cityCache.put(</span></span><span 
data-slate-leaf="true" data-offset-key="613:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3173154120" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="613:2"><span data-slate-string="true">, beijingInfo); 
</span></span></span> </div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="614"> <span data-slate-object="text" data-key="615"><span 
data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span data-slate-string="true">City 
beijing = cityCache.get(</span></span><span data-slate-leaf="true" data-offset-key="615:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4342276602" 
data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="615:2"><span data-slate-string="true">); </span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 102px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-44a1760e " data-slate-type="paragraph" data-slate-object="block" 
data-key="616"> <span data-slate-object="text" data-key="617"><span data-slate-leaf="true" 
data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">这里建立了一个城市的缓存，key 
为城市名称，value 为城市对象，存取操作和对普通 Map 的操作相比，没有区别。</span></span></span> </div> <div class="se-60836476 
" data-slate-type="paragraph" data-slate-object="block" data-key="618"> <span data-slate-object="text" 
data-key="619"><span data-slate-leaf="true" data-offset-key="619:0" data-first-offset="true"><span 
class="se-d60c2ebc" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">方式 
2：方法注解</span></span></span></span> </div> <div class="se-058af6fd " data-slate-type="paragraph" 
data-slate-object="block" data-key="620"> <span data-slate-object="text" data-key="621"><span 
data-slate-leaf="true" data-offset-key="621:0" data-first-offset="true"><span data-slate-string="true">这种方式的好处在于，可以对方法的调用保持透明，不需要使用单独的缓存代码去分散对业务逻辑的专注。且看下面的例子：</span></span></span> 
</div> <div class="se-4a8e179c se-57faf502" data-slate-type="pre" data-slate-object="block" 
data-key="622" data-code-language="java"> <div class="se-1ca54c1d se-dd0426d4"> <span></span> 
</div> <div class="se-895ce8b4"> <div class="se-41f9fce8 se-718b5b6c" data-code-line-number="1"></div> 
<div class="se-41f9fce8 se-718b5b6c" data-code-line-number="2"></div> </div> <div class="se-f6dea544 
ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="623"> <span data-slate-object="text" data-key="624"><span data-slate-leaf="true" 
data-offset-key="624:0" data-first-offset="true"><span class=" gkhl-meta" data-slate-object="annotation" 
data-annotation-key="gkann_7633637594" data-annotation-type="annotation"><span data-slate-string="true">@Cacheable</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:1"><span data-slate-string="true">(value=</span></span><span 
data-slate-leaf="true" data-offset-key="624:2"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4753262157" data-annotation-type="annotation"><span data-slate-string="true">"getCity"</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:3"><span data-slate-string="true">, key=</span></span><span 
data-slate-leaf="true" data-offset-key="624:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5602210957" data-annotation-type="annotation"><span data-slate-string="true">"#name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:5"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="625"> <span data-slate-object="text" data-key="626"><span data-slate-leaf="true" 
data-offset-key="626:0" data-first-offset="true"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1235719998" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8314112978" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span data-slate-string="true"> City </span></span></span><span 
data-slate-leaf="true" data-offset-key="626:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1235719998" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_7936762179" data-annotation-type="annotation"><span 
data-slate-string="true">getCity</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_0658794183" data-annotation-type="annotation"><span data-slate-string="true">(String 
name)</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="626:5"><span data-slate-string="true">{ ... }</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-39fd8a28 " data-slate-type="paragraph" data-slate-object="block" data-key="627"> 
<span data-slate-object="text" data-key="628"><span data-slate-leaf="true" data-offset-key="628:0" 
data-first-offset="true"><span data-slate-string="true">这种方式下，同名、同参数方法的再次调用，就可以命中缓存而直接返回。</span></span></span> 
</div> <div class="se-d310d5d0 " data-slate-type="paragraph" data-slate-object="block" data-key="629"> 
<span data-slate-object="text" data-key="630"><span data-slate-leaf="true" data-offset-key="630:0" 
data-first-offset="true"><span class="se-b6d31ba7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">方式 3：配置文件的注入</span></span></span></span> </div> <div class="se-1f88b548 
" data-slate-type="paragraph" data-slate-object="block" data-key="631"> <span data-slate-object="text" 
data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" data-first-offset="true"><span 
data-slate-string="true">这种也比较常见，比如 MyBatis 在 mapper 标签中可以指定 cache 标签，通过这种方式就可以把选定的缓存框架注入到这个持久层框架中。对于指定映射的数据，再次访问时会优先从缓存中查找，这种应用方式就是前一讲我们提到的缓存应用模式中的 
Read/Write-Through 模式。</span></span></span> </div> <div class="se-c57679a2 se-ba9cfb71" data-slate-type="pre" 
data-slate-object="block" data-key="633" data-code-language="typescript"> <div class="se-093ba919 
se-d2898589"> <span></span> </div> <div class="se-dc8ac4c8"> <div class="se-569bf298 se-c3766934" 
data-code-line-number="1"></div> <div class="se-569bf298 se-c3766934" data-code-line-number="2"></div> 
<div class="se-569bf298 se-c3766934" data-code-line-number="3"></div> <div class="se-569bf298 
se-c3766934" data-code-line-number="4"></div> </div> <div class="se-1e0d8d15 ps ps--active-x"> 
<div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="634"> <span data-slate-object="text" data-key="635"><span data-slate-leaf="true" 
data-offset-key="635:0" data-first-offset="true"><span data-slate-string="true">&lt;mapper 
</span></span><span data-slate-leaf="true" data-offset-key="635:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7574695929" data-annotation-type="annotation"><span 
data-slate-string="true">namespace</span></span></span><span data-slate-leaf="true" data-offset-key="635:2"><span 
data-slate-string="true">=</span></span><span data-slate-leaf="true" data-offset-key="635:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_0949638508" 
data-annotation-type="annotation"><span data-slate-string="true">"..."</span></span></span><span 
data-slate-leaf="true" data-offset-key="635:4"><span data-slate-string="true"> &gt;</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="636"> <span data-slate-object="text" data-key="637"><span data-slate-leaf="true" 
data-offset-key="637:0" data-first-offset="true"><span data-slate-string="true"> &lt;cache 
</span></span><span data-slate-leaf="true" data-offset-key="637:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6307441529" data-annotation-type="annotation"><span 
data-slate-string="true">type</span></span></span><span data-slate-leaf="true" data-offset-key="637:2"><span 
data-slate-string="true">=</span></span><span data-slate-leaf="true" data-offset-key="637:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4011911921" 
data-annotation-type="annotation"><span data-slate-string="true">"org.mybatis.caches.ehcache.EhcacheCache"</span></span></span><span 
data-slate-leaf="true" data-offset-key="637:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="638"> <span data-slate-object="text" data-key="639"><span data-slate-leaf="true" 
data-offset-key="639:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="640"> <span data-slate-object="text" data-key="641"><span data-slate-leaf="true" 
data-offset-key="641:0" data-first-offset="true"><span data-slate-string="true">&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="641:1"><span class=" gkhl-regexp" data-slate-object="annotation" 
data-annotation-key="gkann_3486216477" data-annotation-type="annotation"><span data-slate-string="true">/mapper&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 300px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-712861c8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="642"> <span data-slate-object="text" data-key="643"><span data-slate-leaf="true" 
data-offset-key="643:0" data-first-offset="true"><span class="se-a08f0792" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">方式 4：Web 容器的 Filter</span></span></span></span> 
</div> <div class="se-a4bcba21 " data-slate-type="paragraph" data-slate-object="block" data-key="644"> 
<span data-slate-object="text" data-key="645"><span data-slate-leaf="true" data-offset-key="645:0" 
data-first-offset="true"><span data-slate-string="true">在 Ehcache 2 中，可以配置 net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter 
这样一个 filter 到 Tomcat 的 web.xml 中，再配合 filter 的映射匹配参数和初始化参数，就可以实现整个请求的过滤功能。</span></span></span> 
</div> <div class="se-f0b1c5c1 " data-slate-type="paragraph" data-slate-object="block" data-key="646"> 
<span data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">在 Ehcache 3 中，这个类被取消了，因为它的业务性过于具体，不符合 
Ehcache 的设计原则。但是，你依然可以在 filter 里面，以前面提到的编程方式很容易地实现对于完整请求的缓存。如果你对这里提到的 filter 感到陌生，可以回看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="648" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="649"><span data-slate-leaf="true" data-offset-key="649:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="650"><span data-slate-leaf="true" data-offset-key="650:0" 
data-first-offset="true"><span data-slate-string="true"> 中的“Tomcat 中配置过滤器”这部分内容。</span></span></span> 
</div> <div class="se-bf0b97b6 " data-slate-type="paragraph" data-slate-object="block" data-key="651"> 
<span data-slate-object="text" data-key="652"><span data-slate-leaf="true" data-offset-key="652:0" 
data-first-offset="true"><span class="se-9ddded09" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">方式 5：页面模板中的 Cache 标签</span></span></span></span> </div> <div class="se-9ac32159 
" data-slate-type="paragraph" data-slate-object="block" data-key="653"> <span data-slate-object="text" 
data-key="654"><span data-slate-leaf="true" data-offset-key="654:0" data-first-offset="true"><span 
data-slate-string="true">这种方式相对比较少见，有一些页面模板支持 Cache 标签或表达式语法（例如 Django 中，它被称为 Template Fragment 
Caching），在标签属性或语法参数中可以指定缓存的时间和条件，标签内部的 HTML 将被缓存起来，以避免在每次模板渲染时都去执行其中的逻辑。</span></span></span> 
</div> <h3 class="se-2dc2ee82" data-slate-type="heading" data-slate-object="block" data-key="655"><span 
data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">核心要素</span></span></span></h3> <div 
class="se-7dafa467 " data-slate-type="paragraph" data-slate-object="block" data-key="657"> 
<span data-slate-object="text" data-key="658"><span data-slate-leaf="true" data-offset-key="658:0" 
data-first-offset="true"><span data-slate-string="true">一个缓存框架，拥有的特性和要素可以说五花八门，可是，有一些是真正的“核心”，在缺少了以后，就很难再称之为一个“缓存框架”了。那么，有哪些要素可以称之为缓存框架的核心呢？我认为，它至少包括这样几点。</span></span></span> 
</div> <div class="se-f1b25418 " data-slate-type="paragraph" data-slate-object="block" data-key="659"> 
<span data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span class="se-aa7e3f79" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要素 1：缓存数据的生命周期管理</span></span></span></span> </div> <div class="se-a8280910 
" data-slate-type="paragraph" data-slate-object="block" data-key="661"> <span data-slate-object="text" 
data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" data-first-offset="true"><span 
data-slate-string="true">缓存框架不只提供了一个简单的容器，还提供了使容器中的数据进行变动的能力，比如数据可以创建、更新、移动以及淘汰。且看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="663" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="664"><span data-slate-leaf="true" data-offset-key="664:0" 
data-first-offset="true"><span data-slate-string="true">Ehcache 官网</span></span></span></a><span 
data-slate-object="text" data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" 
data-first-offset="true"><span data-slate-string="true">上的这张示意图：</span></span></span> </div> 
<div class="se-cf67d2f2" data-slate-type="image" data-slate-object="block" data-key="666"> 
<img class="se-c45de47d" src="https://static001.geekbang.org/resource/image/f5/b9/f521239d2fc5a17715e4d432400f5eb9.jpg"> 
</div> <div class="se-a211d674 " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">整个容器是分层的，从上到下分别为 L1 Heap、L1 BigMemory、L2 
Heap、L2 BigMemory 和 L2 Disk，级别依次降低。这里面定义了几种不同的行为，来反映数据的流动：</span></span></span> </div> <div 
class="se-e2321550" data-slate-type="list" data-slate-object="block" data-key="669"> <div class="se-835520cb 
se-0616393a" data-slate-type="list-line" data-slate-object="block" data-key="670"> <span data-slate-object="text" 
data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" data-first-offset="true"><span 
data-slate-string="true">Flush，右侧黄色的箭头，数据从高层向低层移动；</span></span></span> </div> <div class="se-affebbe3 
se-492a81df" data-slate-type="list-line" data-slate-object="block" data-key="672"> <span data-slate-object="text" 
data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" data-first-offset="true"><span 
data-slate-string="true">Fault，左侧绿色箭头，数据从低层拷贝到高层，但不删除；</span></span></span> </div> <div class="se-f912e877 
se-28566baa" data-slate-type="list-line" data-slate-object="block" data-key="674"> <span data-slate-object="text" 
data-key="675"><span data-slate-leaf="true" data-offset-key="675:0" data-first-offset="true"><span 
data-slate-string="true">Eviction，下方红色箭头，数据永久淘汰出缓存数据容器；</span></span></span> </div> <div class="se-c21ebc4c 
se-68bd404b" data-slate-type="list-line" data-slate-object="block" data-key="676"> <span data-slate-object="text" 
data-key="677"><span data-slate-leaf="true" data-offset-key="677:0" data-first-offset="true"><span 
data-slate-string="true">Expiration，上方烟灰色图案，数据过期了，意味着可以被 flushed 或者 evicted，但是考虑到性能，不一定立即执行这个操作；</span></span></span> 
</div> <div class="se-fe5f4e35 se-3377e86b" data-slate-type="list-line" data-slate-object="block" 
data-key="678"> <span data-slate-object="text" data-key="679"><span data-slate-leaf="true" 
data-offset-key="679:0" data-first-offset="true"><span data-slate-string="true">Pinning，右上角蓝色图案，数据被强制钉在某一层，不受流动规则控制。</span></span></span> 
</div> </div> <div class="se-62b222fb " data-slate-type="paragraph" data-slate-object="block" 
data-key="680"> <span data-slate-object="text" data-key="681"><span data-slate-leaf="true" 
data-offset-key="681:0" data-first-offset="true"><span class="se-cf8a9ef0" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">要素 2：数据变动规则</span></span></span></span> 
</div> <div class="se-7cf9087d " data-slate-type="paragraph" data-slate-object="block" data-key="682"> 
<span data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">上面这些基本数据变动的“行为”，是属于系统侧的定义，只有它们，缓存系统是无法工作的。我们必须有规则，执行规则，才会触发上面的不同行为，引起数据真正的变动。</span></span></span> 
</div> <div class="se-b3b00efc " data-slate-type="paragraph" data-slate-object="block" data-key="684"> 
<span data-slate-object="text" data-key="685"><span data-slate-leaf="true" data-offset-key="685:0" 
data-first-offset="true"><span data-slate-string="true">比如说，当一个热点数据因为最近没有访问而从 L1 Heap 挤出去的时候，Flush 
行为发生了；在 L2 Disk 上的数据一直没有被访问，超过了期限，淘汰出容器。这样，这些缓存数据变动的具体行为就得到了解释，而这正是由我们预先定义好的“规则”所决定的（这里的算法不一定只是缓存队列的淘汰算法，正如你所见，淘汰可以只是多个数据变动行为中的一个而已）。</span></span></span> 
</div> <div class="se-dca58098 " data-slate-type="paragraph" data-slate-object="block" data-key="686"> 
<span data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span class="se-d666fdec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要素 3：核心 API</span></span></span></span> </div> <div class="se-bfbceb6f 
" data-slate-type="paragraph" data-slate-object="block" data-key="688"> <span data-slate-object="text" 
data-key="689"><span data-slate-leaf="true" data-offset-key="689:0" data-first-offset="true"><span 
data-slate-string="true">这里本质上反映的是缓存框架实现的时候，核心代码结构的设计。当我们把这类的代码结构设计进一步上升到规范层面，它们就可以被定义成接口，即允许不同的缓存框架可以实现同样的设计，在 
Java 中，这个东西有一个官方 JSR 的版本 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="690" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="691"><span 
data-slate-leaf="true" data-offset-key="691:0" data-first-offset="true"><span data-slate-string="true">JSR-107</span></span></span></a><span 
data-slate-object="text" data-key="692"><span data-slate-leaf="true" data-offset-key="692:0" 
data-first-offset="true"><span data-slate-string="true">。它定义了 CachingProvider、CacheManager、Cache、Cache.Entry 
等几个接口。</span></span></span> </div> <div class="se-39e6349c " data-slate-type="paragraph" data-slate-object="block" 
data-key="693"> <span data-slate-object="text" data-key="694"><span data-slate-leaf="true" 
data-offset-key="694:0" data-first-offset="true"><span class="se-2aa2723d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">要素 4：用户侧 API</span></span></span></span> 
</div> <div class="se-3e5f003a " data-slate-type="paragraph" data-slate-object="block" data-key="695"> 
<span data-slate-object="text" data-key="696"><span data-slate-leaf="true" data-offset-key="696:0" 
data-first-offset="true"><span data-slate-string="true">这是指暴露给用户访问缓存的接口，比如常见的向缓存内放置一条数据的接口，或者从缓存内取出一条数据的接口。值得一提的是，我们通常见到的用户 
API 都是 Map-like 的结构，即众所周知的 key-value 形式，但其实缓存框架完全可以支持其它的形式，这取决于数据访问的方式，因此这并不是一个绝对的限制。</span></span></span> 
</div> <h2 class="se-7588ddda" data-slate-type="heading" data-slate-object="block" data-key="697"><span 
data-slate-object="text" data-key="698"><span data-slate-leaf="true" data-offset-key="698:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-1291d320 " data-slate-type="paragraph" data-slate-object="block" data-key="699"> 
<span data-slate-object="text" data-key="700"><span data-slate-leaf="true" data-offset-key="700:0" 
data-first-offset="true"><span data-slate-string="true">今天我们结合实际案例学习了缓存使用中的一些常见的“坑”，并了解了千变万化的缓存框架中一些共性的东西。希望你能够重点体会和理解缓存使用中的问题，即这把双刃剑中向着程序员和系统自己的那一刃，绕开那些已经有人踩过的坑。毕竟，失败的故事总是比成功的故事更有总结的价值。</span></span></span> 
</div> <div class="se-8d1e85c9 " data-slate-type="paragraph" data-slate-object="block" data-key="701"> 
<span data-slate-object="text" data-key="702"><span data-slate-leaf="true" data-offset-key="702:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提两个问题，请你思考：</span></span></span> 
</div> <div class="se-72887698" data-slate-type="list" data-slate-object="block" data-key="703"> 
<div class="se-df5bd2ff se-e6c2330c" data-slate-type="list-line" data-slate-object="block" 
data-key="704"> <span data-slate-object="text" data-key="705"><span data-slate-leaf="true" 
data-offset-key="705:0" data-first-offset="true"><span data-slate-string="true">在你的项目中，是否使用到了缓存，在使用的过程中，是否遇到过什么问题，能否跟我们大家分享一下呢？</span></span></span> 
</div> <div class="se-4fab9b2f se-9f4e380b" data-slate-type="list-line" data-slate-object="block" 
data-key="706"> <span data-slate-object="text" data-key="707"><span data-slate-leaf="true" 
data-offset-key="707:0" data-first-offset="true"><span data-slate-string="true">缓存框架我介绍了几个核心要素，但是，一个缓存框架还存在着许多的“重要特性”。那么，根据你的经验和理解，你觉得它们还有哪些呢？</span></span></span> 
</div> </div> <div class="se-7685cf2f " data-slate-type="paragraph" data-slate-object="block" 
data-key="708"> <span data-slate-object="text" data-key="709"><span data-slate-leaf="true" 
data-offset-key="709:0" data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里，对于缓存，你还有什么感悟，欢迎在留言区和我聊一聊。</span></span></span> 
</div> <h2 class="se-2093c15c" data-slate-type="heading" data-slate-object="block" data-key="710"><span 
data-slate-object="text" data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-7abb6e6c" data-slate-type="list" data-slate-object="block" data-key="712"> <div class="se-3b5d4f70 
se-28f7bc43" data-slate-type="list-line" data-slate-object="block" data-key="713"> <span data-slate-object="text" 
data-key="714"><span data-slate-leaf="true" data-offset-key="714:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了布隆过滤器（Bloom Filter），它基于概率，用来判断存在性的数据结构，它的时间和空间复杂度往往远远低于一般的存在性判别算法，它对于“不存在”判断的正确率是 
100%，但对于“存在”的判断存在错误的可能。想了解其具体设计原理，</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="715" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="716"><span 
data-slate-leaf="true" data-offset-key="716:0" data-first-offset="true"><span data-slate-string="true">Bloom 
Filters by Example</span></span></span></a><span data-slate-object="text" data-key="717"><span 
data-slate-leaf="true" data-offset-key="717:0" data-first-offset="true"><span data-slate-string="true"> 
这篇文章是一个很好的开始。</span></span></span> </div> <div class="se-58267ab3 se-4163217d" data-slate-type="list-line" 
data-slate-object="block" data-key="718"> <span data-slate-object="text" data-key="719"><span 
data-slate-leaf="true" data-offset-key="719:0" data-first-offset="true"><span data-slate-string="true">文中提到了 
Ehcache 和 Spring 整合后，就可以使用注解的方式来建立方法缓存，如果你想进一步了解具体的配置方式，可以参见 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="720" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" data-first-offset="true"><span 
data-slate-string="true">Spring Caching and Ehcache example</span></span></span></a><span data-slate-object="text" 
data-key="722"><span data-slate-leaf="true" data-offset-key="722:0" data-first-offset="true"><span 
data-slate-string="true"> 这篇文章。</span></span></span> </div> <div class="se-2822c04d se-0c86677f" 
data-slate-type="list-line" data-slate-object="block" data-key="723"> <span data-slate-object="text" 
data-key="724"><span data-slate-leaf="true" data-offset-key="724:0" data-first-offset="true"><span 
data-slate-string="true">对于 JSR-107，如果你对文中介绍的核心 API 感兴趣的话，请移步 GitHub 上的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="725" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="726"><span data-slate-leaf="true" data-offset-key="726:0" 
data-first-offset="true"><span data-slate-string="true">jsr107spec 项目</span></span></span></a><span 
data-slate-object="text" data-key="727"><span data-slate-leaf="true" data-offset-key="727:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-fb776b3a" data-slate-type="image" data-slate-object="block" data-key="728"> 
<img class="se-1476a23a" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.065 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=25 
 {executed in 1 msec}
2020-11-19 11:15:29.065 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:15:29.068 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="496" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-4e6b6fbd " data-slate-type="paragraph" data-slate-object="block" data-key="497"> 
<span data-slate-object="text" data-key="498"><span data-slate-leaf="true" data-offset-key="498:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-197cd812 " data-slate-type="paragraph" data-slate-object="block" data-key="499"> 
<span data-slate-object="text" data-key="500"><span data-slate-leaf="true" data-offset-key="500:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲中，我们介绍了缓存的本质和应用模式。今天我们继续讨论缓存，这一讲会结合一些实际项目，谈一谈缓存的使用会有哪些问题，以及缓存框架的一些通用性的东西。</span></span></span> 
</div> <h2 class="se-55507434" data-slate-type="heading" data-slate-object="block" data-key="501"><span 
data-slate-object="text" data-key="502"><span data-slate-leaf="true" data-offset-key="502:0" 
data-first-offset="true"><span data-slate-string="true">缓存使用的问题</span></span></span></h2> <div 
class="se-d68753c3 " data-slate-type="paragraph" data-slate-object="block" data-key="503"> 
<span data-slate-object="text" data-key="504"><span data-slate-leaf="true" data-offset-key="504:0" 
data-first-offset="true"><span data-slate-string="true">既然说缓存是“双刃剑”，那我们就必须要谈论它的另一刃——缓存使用可能带来的问题。</span></span></span> 
</div> <h3 class="se-ade78fde" data-slate-type="heading" data-slate-object="block" data-key="505"><span 
data-slate-object="text" data-key="506"><span data-slate-leaf="true" data-offset-key="506:0" 
data-first-offset="true"><span data-slate-string="true">1. 缓存穿透</span></span></span></h3> <div 
class="se-8b50adbd " data-slate-type="paragraph" data-slate-object="block" data-key="507"> 
<span data-slate-object="text" data-key="508"><span data-slate-leaf="true" data-offset-key="508:0" 
data-first-offset="true"><span class="se-dbf10812" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">缓存穿透，指的是在某些情况下，大量对于同一个数据的访问，经过了缓存屏障，但是缓存却未能起到应有的保护作用。</span></span></span></span><span 
data-slate-object="text" data-key="509"><span data-slate-leaf="true" data-offset-key="509:0" 
data-first-offset="true"><span data-slate-string="true">举例来说，对某一个 key 的查询，如果数据库里没有这个数据，那么缓存中也没有数据的存放，每次请求到来都会去查询数据库，缓存根本起不到应有的作用。</span></span></span> 
</div> <div class="se-7dacca59 " data-slate-type="paragraph" data-slate-object="block" data-key="510"> 
<span data-slate-object="text" data-key="511"><span data-slate-leaf="true" data-offset-key="511:0" 
data-first-offset="true"><span data-slate-string="true">当然，这个问题也不难解决，比方说我们可以在缓存中对这个 key 存放一个空结果，毕竟“没有结果”也是结果，也是需要缓存起来的。还有一种缓解方法是使用</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="512" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="513"><span data-slate-leaf="true" data-offset-key="513:0" 
data-first-offset="true"><span data-slate-string="true">布隆过滤器</span></span></span></a><span 
data-slate-object="text" data-key="514"><span data-slate-leaf="true" data-offset-key="514:0" 
data-first-offset="true"><span data-slate-string="true">等数据结构，在数据库查询之前，预先过滤掉某些不存在的结果。</span></span></span> 
</div> <div class="se-fd119fbb " data-slate-type="paragraph" data-slate-object="block" data-key="515"> 
<span data-slate-object="text" data-key="516"><span data-slate-leaf="true" data-offset-key="516:0" 
data-first-offset="true"><span data-slate-string="true">还有一种特殊情况也会造成缓存穿透的严重后果。一般的缓存策略下，往往需要先发生一次缓存命中失败，接着从实际存储（比如数据库）中得到结果，再回填到内存缓存中。但是，如果这个数据库查询过程比较慢，大量同一数据的请求像雨点一样几乎同时到来，就会全部穿透缓存，一并落到了数据库上，而那个时候最早的那个请求引发的缓存回填甚至都还没有发生，在这种情况下数据库直接就挂掉了，虽然缓存的机制本身看起来并没有任何问题。</span></span></span> 
</div> <div class="se-c313c166 " data-slate-type="paragraph" data-slate-object="block" data-key="517"> 
<span data-slate-object="text" data-key="518"><span data-slate-leaf="true" data-offset-key="518:0" 
data-first-offset="true"><span data-slate-string="true">这种问题在某些时间窗口敏感的高并发系统中可能出现，解决方法有这样两种。</span></span></span> 
</div> <div class="se-3bf0a790" data-slate-type="list" data-slate-object="block" data-key="519"> 
<div class="se-821b09ab se-c79147b9" data-slate-type="list-line" data-slate-object="block" 
data-key="520"> <span data-slate-object="text" data-key="521"><span data-slate-leaf="true" 
data-offset-key="521:0" data-first-offset="true"><span data-slate-string="true">一种是以流量控制的方式，限制对于同一数据的访问，必须等到前一个完成以后，下一个才能进行，即如果缓存失效而引发的数据库查询正在进行，其它请求就得老老实实地等着。这种方法通用性好，但这个等待机制可能较为复杂，且有可能影响用户体验。</span></span></span> 
</div> <div class="se-ad2caf74 se-cfa83d24" data-slate-type="list-line" data-slate-object="block" 
data-key="522"> <span data-slate-object="text" data-key="523"><span data-slate-leaf="true" 
data-offset-key="523:0" data-first-offset="true"><span data-slate-string="true">另一种方法是缓存预热，在大批量请求到来以前，先主动将该缓存填充好。这种方法操作简单高效，但局限性是需要提前知道哪些数据可能引发缓存穿透的问题。</span></span></span> 
</div> </div> <h3 class="se-17f5898c" data-slate-type="heading" data-slate-object="block" data-key="524"><span 
data-slate-object="text" data-key="525"><span data-slate-leaf="true" data-offset-key="525:0" 
data-first-offset="true"><span data-slate-string="true">2. 缓存雪崩</span></span></span></h3> <div 
class="se-9fed5e40 " data-slate-type="paragraph" data-slate-object="block" data-key="526"> 
<span data-slate-object="text" data-key="527"><span data-slate-leaf="true" data-offset-key="527:0" 
data-first-offset="true"><span class="se-6205568c" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">原本起屏障作用的缓存，如果在一定的时间段内，对于大量的请求访问失效，即失去了屏障作用，造成它后方的系统压力过大，引起系统过载、宕机等问题，就叫做缓存雪崩。</span></span></span></span> 
</div> <div class="se-c0f9f410 " data-slate-type="paragraph" data-slate-object="block" data-key="528"> 
<span data-slate-object="text" data-key="529"><span data-slate-leaf="true" data-offset-key="529:0" 
data-first-offset="true"><span data-slate-string="true">我以前在 Amazon 工作的时候，有个著名的内部分享，介绍了 Amazon 
曾经发生的“六大灾难”，其中一大就是缓存雪崩。这个问题发生的时间已经是好多年前了，具体是这样的：有一次 Amazon 机房突然断电，在恢复的时候把网页服务器都通上了电，这时候缓存服务几乎还没有缓存数据，缓存命中率几乎为零，于是大量的请求冲向数据库，直接把数据库冲垮了。外在的表现就是，断电导致网站无法提供服务，短期内访问恢复，随后又丧失服务能力。</span></span></span> 
</div> <div class="se-0bf4fe26 " data-slate-type="paragraph" data-slate-object="block" data-key="530"> 
<span data-slate-object="text" data-key="531"><span data-slate-leaf="true" data-offset-key="531:0" 
data-first-offset="true"><span data-slate-string="true">事实上，我们也总能看到很多技术报告里面写：平均的缓存命中率能够达到百分之九十多，可以飙到多少多少的 
TPS，为此可以节约多少多少硬件成本。初看这样的设计真不错，但是很容易忽视的一点是：这样的数据是建立在足够长的时间以及足够多的统计数据的基础之上的，但是在单个时间段内，由于缓存雪崩效应，缓存命中率可以低到难以承受的地步，导致底层的数据服务直接被冲垮。</span></span></span> 
</div> <div class="se-d4143444 " data-slate-type="paragraph" data-slate-object="block" data-key="532"> 
<span data-slate-object="text" data-key="533"><span data-slate-leaf="true" data-offset-key="533:0" 
data-first-offset="true"><span data-slate-string="true">对于</span></span></span><span data-slate-object="text" 
data-key="534"><span data-slate-leaf="true" data-offset-key="534:0" data-first-offset="true"><span 
class="se-c100d04f" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">这种类型的雪崩，最常见的解决方法无非还是限流、预热两种：</span></span></span></span><span 
data-slate-object="text" data-key="535"><span data-slate-leaf="true" data-offset-key="535:0" 
data-first-offset="true"><span data-slate-string="true">前者保证了请求大量落到数据库的时候，系统只接纳能够承载的数量；而后者则在请求访问前，先主动地往内存中加载一定的热点数据，这样请求到来的时候，缓存不是空的，已经具有一定的保护能力了。</span></span></span> 
</div> <div class="se-91a806ef " data-slate-type="paragraph" data-slate-object="block" data-key="536"> 
<span data-slate-object="text" data-key="537"><span data-slate-leaf="true" data-offset-key="537:0" 
data-first-offset="true"><span data-slate-string="true">好，我们再回到 Amazon 那个问题，当时的解决方法就是我们刚刚讲的第一种——限流。当时整个系统对于单台机器的限流已经做得比较好了，后来工程师一台一台逐步启动，每启动一台机器，就等一会，等到缓存数据填充并稳定以后，再启动下一台，这样最多也就是单台机器的所有请求全部发生了穿透，这个数量就小得多了，数据库也是可以正常负载的。</span></span></span> 
</div> <div class="se-76fbeca7 " data-slate-type="paragraph" data-slate-object="block" data-key="538"> 
<span data-slate-object="text" data-key="539"><span data-slate-leaf="true" data-offset-key="539:0" 
data-first-offset="true"><span data-slate-string="true">另外一个常见的缓存雪崩场景是：缓存数据通常都有过期时间的，如果缓存加载的时间比较集中，那么很可能到了某一时间点，大量的缓存就会同时过期，于是对应这些数据的请求全部落到了后面的数据库上，从而造成系统崩溃。这个问题解决起来也不难，那就是避免缓存集中写入的时间，如果无法避免，就使用一个范围随机数来均匀地分散过期时间，从而打散缓存过期对系统造成的压力。</span></span></span> 
</div> <h3 class="se-b6f511b4" data-slate-type="heading" data-slate-object="block" data-key="540"><span 
data-slate-object="text" data-key="541"><span data-slate-leaf="true" data-offset-key="541:0" 
data-first-offset="true"><span data-slate-string="true">3. 缓存容量失控</span></span></span></h3> 
<div class="se-f90e54a8 " data-slate-type="paragraph" data-slate-object="block" data-key="542"> 
<span data-slate-object="text" data-key="543"><span data-slate-leaf="true" data-offset-key="543:0" 
data-first-offset="true"><span data-slate-string="true">刚工作不久的时候，我参与做过这样一个系统，用户的行为需要被记录到数据库里，但是每条记录发生的时候都写一次数据库的话开销就太大了，于是有同事设计了一个链表：</span></span></span> 
</div> <div class="se-9da77304" data-slate-type="list" data-slate-object="block" data-key="544"> 
<div class="se-080f6421 se-ffff0472" data-slate-type="list-line" data-slate-object="block" 
data-key="545"> <span data-slate-object="text" data-key="546"><span data-slate-leaf="true" 
data-offset-key="546:0" data-first-offset="true"><span data-slate-string="true">用户的行为首先会被即时记录到内存链表里面去；</span></span></span> 
</div> <div class="se-b6faff5c se-ac709d85" data-slate-type="list-line" data-slate-object="block" 
data-key="547"> <span data-slate-object="text" data-key="548"><span data-slate-leaf="true" 
data-offset-key="548:0" data-first-offset="true"><span data-slate-string="true">每 10 分钟从链表往数据库里面集中写一次数据，然后清空链表内的数据。</span></span></span> 
</div> </div> <div class="se-855234de " data-slate-type="paragraph" data-slate-object="block" 
data-key="549"> <span data-slate-object="text" data-key="550"><span data-slate-leaf="true" 
data-offset-key="550:0" data-first-offset="true"><span data-slate-string="true">看起来这就像是我们在 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="551" class="se-654b04e9 
se-f2d6d068"><span data-slate-object="text" data-key="552"><span data-slate-leaf="true" data-offset-key="552:0" 
data-first-offset="true"><span data-slate-string="true">[第 21 讲]</span></span></span></a><span 
data-slate-object="text" data-key="553"><span data-slate-leaf="true" data-offset-key="553:0" 
data-first-offset="true"><span data-slate-string="true"> 中讲到的 Write-Back 模式，看起来也确实可以实现需求。可是，上线没多久系统就挂掉了。那么，这样的设计有什么问题呢？</span></span></span> 
</div> <div class="se-bb8b0c5e" data-slate-type="list" data-slate-object="block" data-key="554"> 
<div class="se-ebfcb7b1 se-5b31d4d8" data-slate-type="list-line" data-slate-object="block" 
data-key="555"> <span data-slate-object="text" data-key="556"><span data-slate-leaf="true" 
data-offset-key="556:0" data-first-offset="true"><span data-slate-string="true">清空链表数据是使用时间条件触发的任务来完成，</span></span></span><span 
data-slate-object="text" data-key="557"><span data-slate-leaf="true" data-offset-key="557:0" 
data-first-offset="true"><span class="se-ec6e618f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过时间因素来限制空间大小，远不如通过队列长度来限制空间大小来得可靠。</span></span></span></span><span 
data-slate-object="text" data-key="558"><span data-slate-leaf="true" data-offset-key="558:0" 
data-first-offset="true"><span data-slate-string="true">换句话说，如果这 10 分钟内事件暴增，链表就很容易变得非常大。</span></span></span><span 
data-slate-object="text" data-key="559"><span data-slate-leaf="true" data-offset-key="559:0" 
data-first-offset="true"><span class="se-6e7d5498" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这个变化范围取决于请求的上限，而不是在缓存系统自己的掌控中。</span></span></span></span> </div> 
<div class="se-4867a211 se-62bd3403" data-slate-type="list-line" data-slate-object="block" 
data-key="560"> <span data-slate-object="text" data-key="561"><span data-slate-leaf="true" 
data-offset-key="561:0" data-first-offset="true"><span data-slate-string="true">清空链表的任务，如果在执行的过程中出现了异常，甚至仅仅是处理速度受到阻塞，那就会直接导致链表数据无法得到清空，甚至越积越多。实际上，</span></span></span><span 
data-slate-object="text" data-key="562"><span data-slate-leaf="true" data-offset-key="562:0" 
data-first-offset="true"><span class="se-85810b88" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">链表清空数据并写入数据库是一个耗时的异步行为，这是另一个受控性较差的点。</span></span></span></span><span 
data-slate-object="text" data-key="563"><span data-slate-leaf="true" data-offset-key="563:0" 
data-first-offset="true"><span data-slate-string="true">我们在使用异步系统批量写入数据的时候，一定要考虑这个潜在的危险。</span></span></span> 
</div> </div> <div class="se-320dc631 " data-slate-type="paragraph" data-slate-object="block" 
data-key="564"> <span data-slate-object="text" data-key="565"><span data-slate-leaf="true" 
data-offset-key="565:0" data-first-offset="true"><span data-slate-string="true">这些问题当然在明确的情况下可以得到规避，但是毫无疑问，这样的设计充满了潜在的危险。事实上，最终这样的问题也确实发生了，二者相加导致的结果是链表巨大，撑死了整个系统，OOM，系统失去响应。</span></span></span> 
</div> <div class="se-786b0c0d " data-slate-type="paragraph" data-slate-object="block" data-key="566"> 
<span data-slate-object="text" data-key="567"><span data-slate-leaf="true" data-offset-key="567:0" 
data-first-offset="true"><span data-slate-string="true">因此，我们对于缓存容量的控制，最好是基于缓存容量本身来直接控制，但是考虑到某些编程语言的自身限制，比如 
Java，从内存消耗的角度来实现不方便，那么就可以通过基于队列的长度来替代实现。</span></span></span> </div> <h3 class="se-399415cc" 
data-slate-type="heading" data-slate-object="block" data-key="568"><span data-slate-object="text" 
data-key="569"><span data-slate-leaf="true" data-offset-key="569:0" data-first-offset="true"><span 
data-slate-string="true">4. LRU 的致命缺陷</span></span></span></h3> <div class="se-6e202f23 " data-slate-type="paragraph" 
data-slate-object="block" data-key="570"> <span data-slate-object="text" data-key="571"><span 
data-slate-leaf="true" data-offset-key="571:0" data-first-offset="true"><span data-slate-string="true">LRU 
指的是 Least Recently Used，最少最近使用算法。这是缓存队列维护的最常见算法，原理是：维护一个限定最大容量的队列，队列头部总是放置最近访问的元素（包括新加入的元素），而在超过容量限制时总是从队尾淘汰元素。</span></span></span> 
</div> <div class="se-353f359d " data-slate-type="paragraph" data-slate-object="block" data-key="572"> 
<span data-slate-object="text" data-key="573"><span data-slate-leaf="true" data-offset-key="573:0" 
data-first-offset="true"><span data-slate-string="true">我们可以用这样一张图，来解释 LRU 的工作原理：</span></span></span> 
</div> <div class="se-67c8603a" data-slate-type="image" data-slate-object="block" data-key="574"> 
<img class="se-e1115e7d" src="https://static001.geekbang.org/resource/image/a4/1a/a4866b19d2718b8ed679615292bf501a.png"> 
</div> <div class="se-2798b40b " data-slate-type="paragraph" data-slate-object="block" data-key="575"> 
<span data-slate-object="text" data-key="576"><span data-slate-leaf="true" data-offset-key="576:0" 
data-first-offset="true"><span data-slate-string="true">假设用这个缓存的 LRU 队列来存储城市信息，且队列容量只有 2。</span></span></span> 
</div> <div class="se-ad37302f" data-slate-type="list" data-slate-object="block" data-key="577"> 
<div class="se-6b399a3b se-61485049" data-slate-type="list-line" data-slate-object="block" 
data-key="578"> <span data-slate-object="text" data-key="579"><span data-slate-leaf="true" 
data-offset-key="579:0" data-first-offset="true"><span data-slate-string="true">第一步，用户访问上海信息，上海节点被加入队列；</span></span></span> 
</div> <div class="se-f8e4158e se-259d6fc1" data-slate-type="list-line" data-slate-object="block" 
data-key="580"> <span data-slate-object="text" data-key="581"><span data-slate-leaf="true" 
data-offset-key="581:0" data-first-offset="true"><span data-slate-string="true">第二步，用户访问北京信息，北京节点从队列头部加入，上海相应地被往尾部推；</span></span></span> 
</div> <div class="se-d51aa63f se-9b12d452" data-slate-type="list-line" data-slate-object="block" 
data-key="582"> <span data-slate-object="text" data-key="583"><span data-slate-leaf="true" 
data-offset-key="583:0" data-first-offset="true"><span data-slate-string="true">第三步，用户又访问上海信息，上海被挪到头部；</span></span></span> 
</div> <div class="se-1be9e885 se-80f4dd0c" data-slate-type="list-line" data-slate-object="block" 
data-key="584"> <span data-slate-object="text" data-key="585"><span data-slate-leaf="true" 
data-offset-key="585:0" data-first-offset="true"><span data-slate-string="true">第四步，用户访问天津信息，从头部加入队列后，队列长度超出容量 
2，因此从尾部将北京挤出缓存队列。</span></span></span> </div> </div> <div class="se-5817de03 " data-slate-type="paragraph" 
data-slate-object="block" data-key="586"> <span data-slate-object="text" data-key="587"><span 
data-slate-leaf="true" data-offset-key="587:0" data-first-offset="true"><span data-slate-string="true">这看起来是个很完美的缓存淘汰算法，在队列较长时，总是能保证最近访问的数据位于队列的头部，而在需要从缓存中淘汰数据时，总是能从尾部淘汰最不常用的那一个。但是，如果用户有意无意地访问一些错误信息，就会破坏掉这个 
LRU 队列中最近访问数据的真实性。</span></span></span> </div> <div class="se-069060db " data-slate-type="paragraph" 
data-slate-object="block" data-key="588"> <span data-slate-object="text" data-key="589"><span 
data-slate-leaf="true" data-offset-key="589:0" data-first-offset="true"><span data-slate-string="true">我曾经在实际项目中遇到过这样一个问题，由于搜索引擎的多个并行爬虫在短时间内访问网站并抓取一些冷门页面，这时候这个 
LRU 队列中就存储了相关的冷门数据信息。接着网站活动开启的时间到了，用户量很快就上来了，这时候大量的数据访问全部穿透缓存，导致数据库压力剧增，网站响应时间一下就飙升到了告警线之上。</span></span></span> 
</div> <div class="se-fdfc3134 " data-slate-type="paragraph" data-slate-object="block" data-key="590"> 
<span data-slate-object="text" data-key="591"><span data-slate-leaf="true" data-offset-key="591:0" 
data-first-offset="true"><span data-slate-string="true">既然这个问题已经很明确了，那么解决就不是难事了。有多种算法可以作为 LRU 
的改进方案，比如 LRU-K。就是主缓存队列排的是“第 K 次访问的元素”，也就是说，如果访问次数小于 K，则在另外的一个“低级”队列中维护，这样就保证了只有到达一定的访问下限才会被送到主 
LRU 队列中。</span></span></span> </div> <div class="se-7fccdb2d " data-slate-type="paragraph" 
data-slate-object="block" data-key="592"> <span data-slate-object="text" data-key="593"><span 
data-slate-leaf="true" data-offset-key="593:0" data-first-offset="true"><span data-slate-string="true">这种方法保证了偶然的页面访问不会影响网站在 
LRU 队列中应有的数据分布。再进一步优化，可以将两级队列变成更多级，或者是将低级队列的策略变成 FIFO（2Q 算法）等等，但原理是不变的。</span></span></span> 
</div> <h2 class="se-c02eab50" data-slate-type="heading" data-slate-object="block" data-key="594"><span 
data-slate-object="text" data-key="595"><span data-slate-leaf="true" data-offset-key="595:0" 
data-first-offset="true"><span data-slate-string="true">缓存框架</span></span></span></h2> <div 
class="se-e6ab057f " data-slate-type="paragraph" data-slate-object="block" data-key="596"> 
<span data-slate-object="text" data-key="597"><span data-slate-leaf="true" data-offset-key="597:0" 
data-first-offset="true"><span data-slate-string="true">鉴于缓存的普遍性，缓存框架也可以说是百花齐放。如果你在大型 Web 项目中工作过，你很可能已经用过某一个缓存框架了。下面我就针对缓存框架的两个方面进行讲解，一方面是集成方式，另一方面是核心要素。希望这部分内容，可以帮助你在考察新的缓存框架的时候，心里能有个大致可以参照的谱。</span></span></span> 
</div> <h3 class="se-b041406b" data-slate-type="heading" data-slate-object="block" data-key="598"><span 
data-slate-object="text" data-key="599"><span data-slate-leaf="true" data-offset-key="599:0" 
data-first-offset="true"><span data-slate-string="true">集成方式</span></span></span></h3> <div 
class="se-582d2e93 " data-slate-type="paragraph" data-slate-object="block" data-key="600"> 
<span data-slate-object="text" data-key="601"><span data-slate-leaf="true" data-offset-key="601:0" 
data-first-offset="true"><span data-slate-string="true">在上一讲我介绍了 Web 应用 MVC 的三层都可以集成缓存能力，下面我们来进一步思考这部分内容。缓存功能具体怎样整合集成到 
Web 应用中，每一种方式都意味着一个切入点。我认为归纳一下，通常包含了下面这样几种方式。</span></span></span> </div> <div class="se-880d8090 
" data-slate-type="paragraph" data-slate-object="block" data-key="602"> <span data-slate-object="text" 
data-key="603"><span data-slate-leaf="true" data-offset-key="603:0" data-first-offset="true"><span 
class="se-248722ce" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">方式 
1：编程方式</span></span></span></span> </div> <div class="se-713c95fb " data-slate-type="paragraph" 
data-slate-object="block" data-key="604"> <span data-slate-object="text" data-key="605"><span 
data-slate-leaf="true" data-offset-key="605:0" data-first-offset="true"><span data-slate-string="true">这种是最常见的方式，使用编程的方式来获取缓存数据。这种方式比较灵活，对于代码往往以 
Cache-Aside 模式应用。我们以 Java 世界应用最广泛的缓存框架 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="606" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="607"><span 
data-slate-leaf="true" data-offset-key="607:0" data-first-offset="true"><span data-slate-string="true">Ehcache</span></span></span></a><span 
data-slate-object="text" data-key="608"><span data-slate-leaf="true" data-offset-key="608:0" 
data-first-offset="true"><span data-slate-string="true"> 为例，示例代码片段如下：</span></span></span> 
</div> <div class="se-42242a1e se-bbeaf21c" data-slate-type="pre" data-slate-object="block" 
data-key="609" data-code-language="javascript"> <div class="se-6c5f334d se-0306c567"> <span></span> 
</div> <div class="se-a9476fab"> <div class="se-fc1b3c6b se-fefb94b5" data-code-line-number="1"></div> 
<div class="se-fc1b3c6b se-fefb94b5" data-code-line-number="2"></div> <div class="se-fc1b3c6b 
se-fefb94b5" data-code-line-number="3"></div> </div> <div class="se-1830a510 ps ps--active-x"> 
<div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="610"> <span data-slate-object="text" data-key="611"><span data-slate-leaf="true" 
data-offset-key="611:0" data-first-offset="true"><span data-slate-string="true">Cache&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="611:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4701006268" data-annotation-type="annotation"><span data-slate-string="true">String</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:2"><span data-slate-string="true">, City&gt; cityCache 
= cacheManager.createCache(</span></span><span data-slate-leaf="true" data-offset-key="611:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_5699188979" 
data-annotation-type="annotation"><span data-slate-string="true">"cityCache"</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:4"><span data-slate-string="true">, CacheConfigurationBuilder.newCacheConfigurationBuilder(</span></span><span 
data-slate-leaf="true" data-offset-key="611:5"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4930205820" data-annotation-type="annotation"><span data-slate-string="true">String</span></span></span><span 
data-slate-leaf="true" data-offset-key="611:6"><span data-slate-string="true">.class, City.class, 
resourcePools));</span></span></span> </div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="612"> <span data-slate-object="text" data-key="613"><span 
data-slate-leaf="true" data-offset-key="613:0" data-first-offset="true"><span data-slate-string="true">cityCache.put(</span></span><span 
data-slate-leaf="true" data-offset-key="613:1"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3173154120" data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="613:2"><span data-slate-string="true">, beijingInfo); 
</span></span></span> </div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" 
data-slate-object="block" data-key="614"> <span data-slate-object="text" data-key="615"><span 
data-slate-leaf="true" data-offset-key="615:0" data-first-offset="true"><span data-slate-string="true">City 
beijing = cityCache.get(</span></span><span data-slate-leaf="true" data-offset-key="615:1"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4342276602" 
data-annotation-type="annotation"><span data-slate-string="true">"Beijing"</span></span></span><span 
data-slate-leaf="true" data-offset-key="615:2"><span data-slate-string="true">); </span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 102px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-44a1760e " data-slate-type="paragraph" data-slate-object="block" 
data-key="616"> <span data-slate-object="text" data-key="617"><span data-slate-leaf="true" 
data-offset-key="617:0" data-first-offset="true"><span data-slate-string="true">这里建立了一个城市的缓存，key 
为城市名称，value 为城市对象，存取操作和对普通 Map 的操作相比，没有区别。</span></span></span> </div> <div class="se-60836476 
" data-slate-type="paragraph" data-slate-object="block" data-key="618"> <span data-slate-object="text" 
data-key="619"><span data-slate-leaf="true" data-offset-key="619:0" data-first-offset="true"><span 
class="se-d60c2ebc" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">方式 
2：方法注解</span></span></span></span> </div> <div class="se-058af6fd " data-slate-type="paragraph" 
data-slate-object="block" data-key="620"> <span data-slate-object="text" data-key="621"><span 
data-slate-leaf="true" data-offset-key="621:0" data-first-offset="true"><span data-slate-string="true">这种方式的好处在于，可以对方法的调用保持透明，不需要使用单独的缓存代码去分散对业务逻辑的专注。且看下面的例子：</span></span></span> 
</div> <div class="se-4a8e179c se-57faf502" data-slate-type="pre" data-slate-object="block" 
data-key="622" data-code-language="java"> <div class="se-1ca54c1d se-dd0426d4"> <span></span> 
</div> <div class="se-895ce8b4"> <div class="se-41f9fce8 se-718b5b6c" data-code-line-number="1"></div> 
<div class="se-41f9fce8 se-718b5b6c" data-code-line-number="2"></div> </div> <div class="se-f6dea544 
ps"> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="623"> <span data-slate-object="text" data-key="624"><span data-slate-leaf="true" 
data-offset-key="624:0" data-first-offset="true"><span class=" gkhl-meta" data-slate-object="annotation" 
data-annotation-key="gkann_7633637594" data-annotation-type="annotation"><span data-slate-string="true">@Cacheable</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:1"><span data-slate-string="true">(value=</span></span><span 
data-slate-leaf="true" data-offset-key="624:2"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_4753262157" data-annotation-type="annotation"><span data-slate-string="true">"getCity"</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:3"><span data-slate-string="true">, key=</span></span><span 
data-slate-leaf="true" data-offset-key="624:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_5602210957" data-annotation-type="annotation"><span data-slate-string="true">"#name"</span></span></span><span 
data-slate-leaf="true" data-offset-key="624:5"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="625"> <span data-slate-object="text" data-key="626"><span data-slate-leaf="true" 
data-offset-key="626:0" data-first-offset="true"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1235719998" data-annotation-type="annotation"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8314112978" data-annotation-type="annotation"><span 
data-slate-string="true">public</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span data-slate-string="true"> City </span></span></span><span 
data-slate-leaf="true" data-offset-key="626:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1235719998" data-annotation-type="annotation"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_7936762179" data-annotation-type="annotation"><span 
data-slate-string="true">getCity</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_0658794183" data-annotation-type="annotation"><span data-slate-string="true">(String 
name)</span></span></span></span><span data-slate-leaf="true" data-offset-key="626:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1235719998" 
data-annotation-type="annotation"><span data-slate-string="true"> </span></span></span><span 
data-slate-leaf="true" data-offset-key="626:5"><span data-slate-string="true">{ ... }</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-39fd8a28 " data-slate-type="paragraph" data-slate-object="block" data-key="627"> 
<span data-slate-object="text" data-key="628"><span data-slate-leaf="true" data-offset-key="628:0" 
data-first-offset="true"><span data-slate-string="true">这种方式下，同名、同参数方法的再次调用，就可以命中缓存而直接返回。</span></span></span> 
</div> <div class="se-d310d5d0 " data-slate-type="paragraph" data-slate-object="block" data-key="629"> 
<span data-slate-object="text" data-key="630"><span data-slate-leaf="true" data-offset-key="630:0" 
data-first-offset="true"><span class="se-b6d31ba7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">方式 3：配置文件的注入</span></span></span></span> </div> <div class="se-1f88b548 
" data-slate-type="paragraph" data-slate-object="block" data-key="631"> <span data-slate-object="text" 
data-key="632"><span data-slate-leaf="true" data-offset-key="632:0" data-first-offset="true"><span 
data-slate-string="true">这种也比较常见，比如 MyBatis 在 mapper 标签中可以指定 cache 标签，通过这种方式就可以把选定的缓存框架注入到这个持久层框架中。对于指定映射的数据，再次访问时会优先从缓存中查找，这种应用方式就是前一讲我们提到的缓存应用模式中的 
Read/Write-Through 模式。</span></span></span> </div> <div class="se-c57679a2 se-ba9cfb71" data-slate-type="pre" 
data-slate-object="block" data-key="633" data-code-language="typescript"> <div class="se-093ba919 
se-d2898589"> <span></span> </div> <div class="se-dc8ac4c8"> <div class="se-569bf298 se-c3766934" 
data-code-line-number="1"></div> <div class="se-569bf298 se-c3766934" data-code-line-number="2"></div> 
<div class="se-569bf298 se-c3766934" data-code-line-number="3"></div> <div class="se-569bf298 
se-c3766934" data-code-line-number="4"></div> </div> <div class="se-1e0d8d15 ps ps--active-x"> 
<div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="634"> <span data-slate-object="text" data-key="635"><span data-slate-leaf="true" 
data-offset-key="635:0" data-first-offset="true"><span data-slate-string="true">&lt;mapper 
</span></span><span data-slate-leaf="true" data-offset-key="635:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7574695929" data-annotation-type="annotation"><span 
data-slate-string="true">namespace</span></span></span><span data-slate-leaf="true" data-offset-key="635:2"><span 
data-slate-string="true">=</span></span><span data-slate-leaf="true" data-offset-key="635:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_0949638508" 
data-annotation-type="annotation"><span data-slate-string="true">"..."</span></span></span><span 
data-slate-leaf="true" data-offset-key="635:4"><span data-slate-string="true"> &gt;</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="636"> <span data-slate-object="text" data-key="637"><span data-slate-leaf="true" 
data-offset-key="637:0" data-first-offset="true"><span data-slate-string="true"> &lt;cache 
</span></span><span data-slate-leaf="true" data-offset-key="637:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_6307441529" data-annotation-type="annotation"><span 
data-slate-string="true">type</span></span></span><span data-slate-leaf="true" data-offset-key="637:2"><span 
data-slate-string="true">=</span></span><span data-slate-leaf="true" data-offset-key="637:3"><span 
class=" gkhl-string" data-slate-object="annotation" data-annotation-key="gkann_4011911921" 
data-annotation-type="annotation"><span data-slate-string="true">"org.mybatis.caches.ehcache.EhcacheCache"</span></span></span><span 
data-slate-leaf="true" data-offset-key="637:4"><span data-slate-string="true">/&gt;</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="638"> <span data-slate-object="text" data-key="639"><span data-slate-leaf="true" 
data-offset-key="639:0" data-first-offset="true"><span data-slate-string="true"> ...</span></span></span> 
</div> <div class="se-7a1105a5 se-fe18eba5" data-slate-type="code-line" data-slate-object="block" 
data-key="640"> <span data-slate-object="text" data-key="641"><span data-slate-leaf="true" 
data-offset-key="641:0" data-first-offset="true"><span data-slate-string="true">&lt;</span></span><span 
data-slate-leaf="true" data-offset-key="641:1"><span class=" gkhl-regexp" data-slate-object="annotation" 
data-annotation-key="gkann_3486216477" data-annotation-type="annotation"><span data-slate-string="true">/mapper&gt;</span></span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 300px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-712861c8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="642"> <span data-slate-object="text" data-key="643"><span data-slate-leaf="true" 
data-offset-key="643:0" data-first-offset="true"><span class="se-a08f0792" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">方式 4：Web 容器的 Filter</span></span></span></span> 
</div> <div class="se-a4bcba21 " data-slate-type="paragraph" data-slate-object="block" data-key="644"> 
<span data-slate-object="text" data-key="645"><span data-slate-leaf="true" data-offset-key="645:0" 
data-first-offset="true"><span data-slate-string="true">在 Ehcache 2 中，可以配置 net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter 
这样一个 filter 到 Tomcat 的 web.xml 中，再配合 filter 的映射匹配参数和初始化参数，就可以实现整个请求的过滤功能。</span></span></span> 
</div> <div class="se-f0b1c5c1 " data-slate-type="paragraph" data-slate-object="block" data-key="646"> 
<span data-slate-object="text" data-key="647"><span data-slate-leaf="true" data-offset-key="647:0" 
data-first-offset="true"><span data-slate-string="true">在 Ehcache 3 中，这个类被取消了，因为它的业务性过于具体，不符合 
Ehcache 的设计原则。但是，你依然可以在 filter 里面，以前面提到的编程方式很容易地实现对于完整请求的缓存。如果你对这里提到的 filter 感到陌生，可以回看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="648" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="649"><span data-slate-leaf="true" data-offset-key="649:0" 
data-first-offset="true"><span data-slate-string="true">[第 12 讲]</span></span></span></a><span 
data-slate-object="text" data-key="650"><span data-slate-leaf="true" data-offset-key="650:0" 
data-first-offset="true"><span data-slate-string="true"> 中的“Tomcat 中配置过滤器”这部分内容。</span></span></span> 
</div> <div class="se-bf0b97b6 " data-slate-type="paragraph" data-slate-object="block" data-key="651"> 
<span data-slate-object="text" data-key="652"><span data-slate-leaf="true" data-offset-key="652:0" 
data-first-offset="true"><span class="se-9ddded09" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">方式 5：页面模板中的 Cache 标签</span></span></span></span> </div> <div class="se-9ac32159 
" data-slate-type="paragraph" data-slate-object="block" data-key="653"> <span data-slate-object="text" 
data-key="654"><span data-slate-leaf="true" data-offset-key="654:0" data-first-offset="true"><span 
data-slate-string="true">这种方式相对比较少见，有一些页面模板支持 Cache 标签或表达式语法（例如 Django 中，它被称为 Template Fragment 
Caching），在标签属性或语法参数中可以指定缓存的时间和条件，标签内部的 HTML 将被缓存起来，以避免在每次模板渲染时都去执行其中的逻辑。</span></span></span> 
</div> <h3 class="se-2dc2ee82" data-slate-type="heading" data-slate-object="block" data-key="655"><span 
data-slate-object="text" data-key="656"><span data-slate-leaf="true" data-offset-key="656:0" 
data-first-offset="true"><span data-slate-string="true">核心要素</span></span></span></h3> <div 
class="se-7dafa467 " data-slate-type="paragraph" data-slate-object="block" data-key="657"> 
<span data-slate-object="text" data-key="658"><span data-slate-leaf="true" data-offset-key="658:0" 
data-first-offset="true"><span data-slate-string="true">一个缓存框架，拥有的特性和要素可以说五花八门，可是，有一些是真正的“核心”，在缺少了以后，就很难再称之为一个“缓存框架”了。那么，有哪些要素可以称之为缓存框架的核心呢？我认为，它至少包括这样几点。</span></span></span> 
</div> <div class="se-f1b25418 " data-slate-type="paragraph" data-slate-object="block" data-key="659"> 
<span data-slate-object="text" data-key="660"><span data-slate-leaf="true" data-offset-key="660:0" 
data-first-offset="true"><span class="se-aa7e3f79" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要素 1：缓存数据的生命周期管理</span></span></span></span> </div> <div class="se-a8280910 
" data-slate-type="paragraph" data-slate-object="block" data-key="661"> <span data-slate-object="text" 
data-key="662"><span data-slate-leaf="true" data-offset-key="662:0" data-first-offset="true"><span 
data-slate-string="true">缓存框架不只提供了一个简单的容器，还提供了使容器中的数据进行变动的能力，比如数据可以创建、更新、移动以及淘汰。且看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="663" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="664"><span data-slate-leaf="true" data-offset-key="664:0" 
data-first-offset="true"><span data-slate-string="true">Ehcache 官网</span></span></span></a><span 
data-slate-object="text" data-key="665"><span data-slate-leaf="true" data-offset-key="665:0" 
data-first-offset="true"><span data-slate-string="true">上的这张示意图：</span></span></span> </div> 
<div class="se-cf67d2f2" data-slate-type="image" data-slate-object="block" data-key="666"> 
<img class="se-c45de47d" src="https://static001.geekbang.org/resource/image/f5/b9/f521239d2fc5a17715e4d432400f5eb9.jpg"> 
</div> <div class="se-a211d674 " data-slate-type="paragraph" data-slate-object="block" data-key="667"> 
<span data-slate-object="text" data-key="668"><span data-slate-leaf="true" data-offset-key="668:0" 
data-first-offset="true"><span data-slate-string="true">整个容器是分层的，从上到下分别为 L1 Heap、L1 BigMemory、L2 
Heap、L2 BigMemory 和 L2 Disk，级别依次降低。这里面定义了几种不同的行为，来反映数据的流动：</span></span></span> </div> <div 
class="se-e2321550" data-slate-type="list" data-slate-object="block" data-key="669"> <div class="se-835520cb 
se-0616393a" data-slate-type="list-line" data-slate-object="block" data-key="670"> <span data-slate-object="text" 
data-key="671"><span data-slate-leaf="true" data-offset-key="671:0" data-first-offset="true"><span 
data-slate-string="true">Flush，右侧黄色的箭头，数据从高层向低层移动；</span></span></span> </div> <div class="se-affebbe3 
se-492a81df" data-slate-type="list-line" data-slate-object="block" data-key="672"> <span data-slate-object="text" 
data-key="673"><span data-slate-leaf="true" data-offset-key="673:0" data-first-offset="true"><span 
data-slate-string="true">Fault，左侧绿色箭头，数据从低层拷贝到高层，但不删除；</span></span></span> </div> <div class="se-f912e877 
se-28566baa" data-slate-type="list-line" data-slate-object="block" data-key="674"> <span data-slate-object="text" 
data-key="675"><span data-slate-leaf="true" data-offset-key="675:0" data-first-offset="true"><span 
data-slate-string="true">Eviction，下方红色箭头，数据永久淘汰出缓存数据容器；</span></span></span> </div> <div class="se-c21ebc4c 
se-68bd404b" data-slate-type="list-line" data-slate-object="block" data-key="676"> <span data-slate-object="text" 
data-key="677"><span data-slate-leaf="true" data-offset-key="677:0" data-first-offset="true"><span 
data-slate-string="true">Expiration，上方烟灰色图案，数据过期了，意味着可以被 flushed 或者 evicted，但是考虑到性能，不一定立即执行这个操作；</span></span></span> 
</div> <div class="se-fe5f4e35 se-3377e86b" data-slate-type="list-line" data-slate-object="block" 
data-key="678"> <span data-slate-object="text" data-key="679"><span data-slate-leaf="true" 
data-offset-key="679:0" data-first-offset="true"><span data-slate-string="true">Pinning，右上角蓝色图案，数据被强制钉在某一层，不受流动规则控制。</span></span></span> 
</div> </div> <div class="se-62b222fb " data-slate-type="paragraph" data-slate-object="block" 
data-key="680"> <span data-slate-object="text" data-key="681"><span data-slate-leaf="true" 
data-offset-key="681:0" data-first-offset="true"><span class="se-cf8a9ef0" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">要素 2：数据变动规则</span></span></span></span> 
</div> <div class="se-7cf9087d " data-slate-type="paragraph" data-slate-object="block" data-key="682"> 
<span data-slate-object="text" data-key="683"><span data-slate-leaf="true" data-offset-key="683:0" 
data-first-offset="true"><span data-slate-string="true">上面这些基本数据变动的“行为”，是属于系统侧的定义，只有它们，缓存系统是无法工作的。我们必须有规则，执行规则，才会触发上面的不同行为，引起数据真正的变动。</span></span></span> 
</div> <div class="se-b3b00efc " data-slate-type="paragraph" data-slate-object="block" data-key="684"> 
<span data-slate-object="text" data-key="685"><span data-slate-leaf="true" data-offset-key="685:0" 
data-first-offset="true"><span data-slate-string="true">比如说，当一个热点数据因为最近没有访问而从 L1 Heap 挤出去的时候，Flush 
行为发生了；在 L2 Disk 上的数据一直没有被访问，超过了期限，淘汰出容器。这样，这些缓存数据变动的具体行为就得到了解释，而这正是由我们预先定义好的“规则”所决定的（这里的算法不一定只是缓存队列的淘汰算法，正如你所见，淘汰可以只是多个数据变动行为中的一个而已）。</span></span></span> 
</div> <div class="se-dca58098 " data-slate-type="paragraph" data-slate-object="block" data-key="686"> 
<span data-slate-object="text" data-key="687"><span data-slate-leaf="true" data-offset-key="687:0" 
data-first-offset="true"><span class="se-d666fdec" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">要素 3：核心 API</span></span></span></span> </div> <div class="se-bfbceb6f 
" data-slate-type="paragraph" data-slate-object="block" data-key="688"> <span data-slate-object="text" 
data-key="689"><span data-slate-leaf="true" data-offset-key="689:0" data-first-offset="true"><span 
data-slate-string="true">这里本质上反映的是缓存框架实现的时候，核心代码结构的设计。当我们把这类的代码结构设计进一步上升到规范层面，它们就可以被定义成接口，即允许不同的缓存框架可以实现同样的设计，在 
Java 中，这个东西有一个官方 JSR 的版本 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="690" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="691"><span 
data-slate-leaf="true" data-offset-key="691:0" data-first-offset="true"><span data-slate-string="true">JSR-107</span></span></span></a><span 
data-slate-object="text" data-key="692"><span data-slate-leaf="true" data-offset-key="692:0" 
data-first-offset="true"><span data-slate-string="true">。它定义了 CachingProvider、CacheManager、Cache、Cache.Entry 
等几个接口。</span></span></span> </div> <div class="se-39e6349c " data-slate-type="paragraph" data-slate-object="block" 
data-key="693"> <span data-slate-object="text" data-key="694"><span data-slate-leaf="true" 
data-offset-key="694:0" data-first-offset="true"><span class="se-2aa2723d" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">要素 4：用户侧 API</span></span></span></span> 
</div> <div class="se-3e5f003a " data-slate-type="paragraph" data-slate-object="block" data-key="695"> 
<span data-slate-object="text" data-key="696"><span data-slate-leaf="true" data-offset-key="696:0" 
data-first-offset="true"><span data-slate-string="true">这是指暴露给用户访问缓存的接口，比如常见的向缓存内放置一条数据的接口，或者从缓存内取出一条数据的接口。值得一提的是，我们通常见到的用户 
API 都是 Map-like 的结构，即众所周知的 key-value 形式，但其实缓存框架完全可以支持其它的形式，这取决于数据访问的方式，因此这并不是一个绝对的限制。</span></span></span> 
</div> <h2 class="se-7588ddda" data-slate-type="heading" data-slate-object="block" data-key="697"><span 
data-slate-object="text" data-key="698"><span data-slate-leaf="true" data-offset-key="698:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-1291d320 " data-slate-type="paragraph" data-slate-object="block" data-key="699"> 
<span data-slate-object="text" data-key="700"><span data-slate-leaf="true" data-offset-key="700:0" 
data-first-offset="true"><span data-slate-string="true">今天我们结合实际案例学习了缓存使用中的一些常见的“坑”，并了解了千变万化的缓存框架中一些共性的东西。希望你能够重点体会和理解缓存使用中的问题，即这把双刃剑中向着程序员和系统自己的那一刃，绕开那些已经有人踩过的坑。毕竟，失败的故事总是比成功的故事更有总结的价值。</span></span></span> 
</div> <div class="se-8d1e85c9 " data-slate-type="paragraph" data-slate-object="block" data-key="701"> 
<span data-slate-object="text" data-key="702"><span data-slate-leaf="true" data-offset-key="702:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提两个问题，请你思考：</span></span></span> 
</div> <div class="se-72887698" data-slate-type="list" data-slate-object="block" data-key="703"> 
<div class="se-df5bd2ff se-e6c2330c" data-slate-type="list-line" data-slate-object="block" 
data-key="704"> <span data-slate-object="text" data-key="705"><span data-slate-leaf="true" 
data-offset-key="705:0" data-first-offset="true"><span data-slate-string="true">在你的项目中，是否使用到了缓存，在使用的过程中，是否遇到过什么问题，能否跟我们大家分享一下呢？</span></span></span> 
</div> <div class="se-4fab9b2f se-9f4e380b" data-slate-type="list-line" data-slate-object="block" 
data-key="706"> <span data-slate-object="text" data-key="707"><span data-slate-leaf="true" 
data-offset-key="707:0" data-first-offset="true"><span data-slate-string="true">缓存框架我介绍了几个核心要素，但是，一个缓存框架还存在着许多的“重要特性”。那么，根据你的经验和理解，你觉得它们还有哪些呢？</span></span></span> 
</div> </div> <div class="se-7685cf2f " data-slate-type="paragraph" data-slate-object="block" 
data-key="708"> <span data-slate-object="text" data-key="709"><span data-slate-leaf="true" 
data-offset-key="709:0" data-first-offset="true"><span data-slate-string="true">好，今天的内容就到这里，对于缓存，你还有什么感悟，欢迎在留言区和我聊一聊。</span></span></span> 
</div> <h2 class="se-2093c15c" data-slate-type="heading" data-slate-object="block" data-key="710"><span 
data-slate-object="text" data-key="711"><span data-slate-leaf="true" data-offset-key="711:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-7abb6e6c" data-slate-type="list" data-slate-object="block" data-key="712"> <div class="se-3b5d4f70 
se-28f7bc43" data-slate-type="list-line" data-slate-object="block" data-key="713"> <span data-slate-object="text" 
data-key="714"><span data-slate-leaf="true" data-offset-key="714:0" data-first-offset="true"><span 
data-slate-string="true">文中提到了布隆过滤器（Bloom Filter），它基于概率，用来判断存在性的数据结构，它的时间和空间复杂度往往远远低于一般的存在性判别算法，它对于“不存在”判断的正确率是 
100%，但对于“存在”的判断存在错误的可能。想了解其具体设计原理，</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="715" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" data-key="716"><span 
data-slate-leaf="true" data-offset-key="716:0" data-first-offset="true"><span data-slate-string="true">Bloom 
Filters by Example</span></span></span></a><span data-slate-object="text" data-key="717"><span 
data-slate-leaf="true" data-offset-key="717:0" data-first-offset="true"><span data-slate-string="true"> 
这篇文章是一个很好的开始。</span></span></span> </div> <div class="se-58267ab3 se-4163217d" data-slate-type="list-line" 
data-slate-object="block" data-key="718"> <span data-slate-object="text" data-key="719"><span 
data-slate-leaf="true" data-offset-key="719:0" data-first-offset="true"><span data-slate-string="true">文中提到了 
Ehcache 和 Spring 整合后，就可以使用注解的方式来建立方法缓存，如果你想进一步了解具体的配置方式，可以参见 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="720" class="se-654b04e9 se-f2d6d068"><span data-slate-object="text" 
data-key="721"><span data-slate-leaf="true" data-offset-key="721:0" data-first-offset="true"><span 
data-slate-string="true">Spring Caching and Ehcache example</span></span></span></a><span data-slate-object="text" 
data-key="722"><span data-slate-leaf="true" data-offset-key="722:0" data-first-offset="true"><span 
data-slate-string="true"> 这篇文章。</span></span></span> </div> <div class="se-2822c04d se-0c86677f" 
data-slate-type="list-line" data-slate-object="block" data-key="723"> <span data-slate-object="text" 
data-key="724"><span data-slate-leaf="true" data-offset-key="724:0" data-first-offset="true"><span 
data-slate-string="true">对于 JSR-107，如果你对文中介绍的核心 API 感兴趣的话，请移步 GitHub 上的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="725" class="se-654b04e9 se-f2d6d068"><span 
data-slate-object="text" data-key="726"><span data-slate-leaf="true" data-offset-key="726:0" 
data-first-offset="true"><span data-slate-string="true">jsr107spec 项目</span></span></span></a><span 
data-slate-object="text" data-key="727"><span data-slate-leaf="true" data-offset-key="727:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> </div> 
<div class="se-fb776b3a" data-slate-type="image" data-slate-object="block" data-key="728"> 
<img class="se-1476a23a" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 1 msec}
2020-11-19 11:15:29.074 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=25 
 {executed in 0 msec}
2020-11-19 11:15:29.075 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:15:29.075 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=25 
 {executed in 0 msec}
2020-11-19 11:15:29.076 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:15:29.077 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755729, 1605755729, 1, 'zh-hans', 0, 1, 1, 
0, '22丨赫赫有名的双刃剑：缓存（下）', 1, 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.080 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=25 
 {executed in 0 msec}
2020-11-19 11:15:29.081 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:15:29.082 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755729, 1605755729, 1, 'zh-hans', 0, 
1, 1, 0, '22丨赫赫有名的双刃剑：缓存（下）', 'book', 1, 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.086 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.086 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:15:29.087 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.087 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:15:29.088 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c6a2e4b23573ccb296843ac6da7b810e?bkt=en-24c643f198a62f88a7b2111891f0e21cc16c5da46115a300cb034c9ed97ab615d8561ce2ab541896&fid=3757516097-778750-658278565330102&time=1605755727&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-cAcZtUBLXumTyhEqCrzhVwdcz7A%3D&to=92&size=16818309&sta_dx=16818309&sta_cs=3417&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854447&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16818309&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ce5939f61d8ef13cfbc2fc27b89bb3143636b5794e0323736d0b0cb7c71aa6429f123c6fb3431963&sl=76480590&expires=8h&rt=pr&r=273217824&mlogid=7502160875026971374&vbdid=2247232042&fin=22%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502160875026971374&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=b2375bf93e10fe695fd3b722954e745098d1f5365361dab4&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=22%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.092 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.093 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:15:29.094 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/c6a2e4b23573ccb296843ac6da7b810e?bkt=en-24c643f198a62f88a7b2111891f0e21cc16c5da46115a300cb034c9ed97ab615d8561ce2ab541896&fid=3757516097-778750-658278565330102&time=1605755727&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-cAcZtUBLXumTyhEqCrzhVwdcz7A%3D&to=92&size=16818309&sta_dx=16818309&sta_cs=3417&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572854447&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=16818309&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-ce5939f61d8ef13cfbc2fc27b89bb3143636b5794e0323736d0b0cb7c71aa6429f123c6fb3431963&sl=76480590&expires=8h&rt=pr&r=273217824&mlogid=7502160875026971374&vbdid=2247232042&fin=22%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8B%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502160875026971374&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=b2375bf93e10fe695fd3b722954e745098d1f5365361dab4&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=22%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8B%EF%BC%89.m4a', 
25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.097 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.098 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:15:29.098 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.099 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:15:29.100 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-30 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 其实缓存的使用各种中间件存储使用：它已经比过去廉价多了。整改中间件存储都离不开缓存的使用。 <br>&nbsp;&nbsp;&nbsp;&nbsp;简单的说，过去数据库的缓存设置的偏小，现在的设置值完全不同了；毕竟直接重新查询结果集的代价比从缓存池要大许多。数据库之上的各种库几乎都没有离开cache的使用：框架既是优化同样是束缚；用了框架你的创造力就局限了，在此之上想提升性能的空间就少了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;可能个人算是一路转型走过来：不是特别喜欢用框架；对于开发的要求同样是，能不用框架就不用框架；用框架则真正提升和改变的空间就小了束缚了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缓存个人觉得还好吧：关键是设计的合理性、合理的分布式设计；如何压力的均衡。其实软硬件充分合理发挥效率优势扬长避短：断电最好的方式就是灾备；当一系列防患于未然做好-其实还好。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/16/38c07a04.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>_CountingStars</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-30 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 布隆过滤器老师说反了吧！不存在准确率100 存在准确率不是100 它说没有见过你 就是一定没有见过你 它说见过你 其实可能没有见过你 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 感谢提醒。对，说不存在是一定的；说存在是不一定的。已经知会编辑修正。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.104 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.104 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:15:29.105 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<a>leslie</a> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-30 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 其实缓存的使用各种中间件存储使用：它已经比过去廉价多了。整改中间件存储都离不开缓存的使用。 <br>&nbsp;&nbsp;&nbsp;&nbsp;简单的说，过去数据库的缓存设置的偏小，现在的设置值完全不同了；毕竟直接重新查询结果集的代价比从缓存池要大许多。数据库之上的各种库几乎都没有离开cache的使用：框架既是优化同样是束缚；用了框架你的创造力就局限了，在此之上想提升性能的空间就少了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;可能个人算是一路转型走过来：不是特别喜欢用框架；对于开发的要求同样是，能不用框架就不用框架；用框架则真正提升和改变的空间就小了束缚了。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缓存个人觉得还好吧：关键是设计的合理性、合理的分布式设计；如何压力的均衡。其实软硬件充分合理发挥效率优势扬长避短：断电最好的方式就是灾备；当一系列防患于未然做好-其实还好。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 👍</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/0f/7c/16/38c07a04.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <a>_CountingStars</a> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-30 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 布隆过滤器老师说反了吧！不存在准确率100 存在准确率不是100 它说没有见过你 就是一定没有见过你 它说见过你 其实可能没有见过你 </div> 
<div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 感谢提醒。对，说不存在是一定的；说存在是不一定的。已经知会编辑修正。</p> </div> <div class="_1w8H0ktn_0 
_2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> </div> <div 
class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> </div> 
</div> </div></li>', 0, 'full_html', 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.109 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.109 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:15:29.110 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.110 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:15:29.111 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 25, 'https://static001.geekbang.org/resource/image/65/0b/65044085da7679d386d169656b891d0b.jpg', 
25) 
 {executed in 0 msec}
2020-11-19 11:15:29.115 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.115 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:15:29.116 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 25, 'https://static001.geekbang.org/resource/image/65/0b/65044085da7679d386d169656b891d0b.jpg', 
25) 
 {executed in 0 msec}
2020-11-19 11:15:29.120 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.120 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:15:29.121 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:15:29.125 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=25 
 {executed in 0 msec}
2020-11-19 11:15:29.126 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:15:29.127 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 25, 25) 
 {executed in 0 msec}
2020-11-19 11:16:19.024 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='542075583501571' 
 {executed in 0 msec}
2020-11-19 11:16:19.024 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.025 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755779, 1) 
 {executed in 0 msec}
2020-11-19 11:16:19.025 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755779, 1) 
 {executed in 0 msec}
2020-11-19 11:16:19.026 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|26            |
|--------------|

2020-11-19 11:16:19.034 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '3c7110d1-5f2f-42f6-8435-12857288d858', 
26) 
 {executed in 0 msec}
2020-11-19 11:16:19.034 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '3c7110d1-5f2f-42f6-8435-12857288d858', 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.035 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|26            |
|--------------|

2020-11-19 11:16:19.039 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=26, revision_default=1, revision_timestamp=1605755779, 
revision_uid=1 where vid=26 
 {executed in 0 msec}
2020-11-19 11:16:19.044 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.044 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.046 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '542075583501571', 'zh-hans', 26, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.049 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.050 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.053 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '542075583501571', 'zh-hans', 26, 26) 
 {executed in 2 msec}
2020-11-19 11:16:19.059 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=26 
 {executed in 0 msec}
2020-11-19 11:16:19.060 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:16:19.061 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=26 
 {executed in 0 msec}
2020-11-19 11:16:19.061 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:16:19.063 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 19, 26, 0, 0, 19, 0, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.068 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.069 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.070 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.070 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.074 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2599" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-712480dd " data-slate-type="paragraph" data-slate-object="block" 
data-key="2600"> <span data-slate-object="text" data-key="2601"><span data-slate-leaf="true" 
data-offset-key="2601:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-d3abdef5 " data-slate-type="paragraph" data-slate-object="block" data-key="2602"> 
<span data-slate-object="text" data-key="2603"><span data-slate-leaf="true" data-offset-key="2603:0" 
data-first-offset="true"><span data-slate-string="true">从今天开始，我们将继续在基于 Web 的全栈技术上深挖，本章我们介绍持久层。缓存是全栈开发中非常重要的一环，因此我把它放到了数据持久化系列的开篇。</span></span></span> 
</div> <div class="se-933241a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2604"> 
<span data-slate-object="text" data-key="2605"><span data-slate-leaf="true" data-offset-key="2605:0" 
data-first-offset="true"><span data-slate-string="true">缓存使用好了，会是一把无比锋利的宝剑，特别对于性能的提升往往是立竿见影的；但使用不好就会严重影响系统运行，甚至因为数据一致性问题造成严重的数据错误。这一讲，我将为你介绍缓存的本质以及缓存的应用模式。</span></span></span> 
</div> <h2 class="se-97054351" data-slate-type="heading" data-slate-object="block" data-key="2606"><span 
data-slate-object="text" data-key="2607"><span data-slate-leaf="true" data-offset-key="2607:0" 
data-first-offset="true"><span data-slate-string="true">缓存的本质</span></span></span></h2> <div 
class="se-2f411e15 " data-slate-type="paragraph" data-slate-object="block" data-key="2608"> 
<span data-slate-object="text" data-key="2609"><span data-slate-leaf="true" data-offset-key="2609:0" 
data-first-offset="true"><span data-slate-string="true">工作中，我们可能每周都会谈到缓存，我们见过各种各样的缓存实现，网上也有各种各样的解释和定义。可是，你觉得，到底什么是缓存呢？</span></span></span> 
</div> <div class="se-f8a28ae4 " data-slate-type="paragraph" data-slate-object="block" data-key="2610"> 
<span data-slate-object="text" data-key="2611"><span data-slate-leaf="true" data-offset-key="2611:0" 
data-first-offset="true"><span data-slate-string="true">我认为，缓存，简单说就是为了节约对原始资源重复获取的开销，而将结果数据副本存放起来以供获取的方式。</span></span></span> 
</div> <div class="se-04e4e261 " data-slate-type="paragraph" data-slate-object="block" data-key="2612"> 
<span data-slate-object="text" data-key="2613"><span data-slate-leaf="true" data-offset-key="2613:0" 
data-first-offset="true"><span class="se-7a0f0904" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">首先，缓存往往针对的是“资源”。</span></span></span></span><span data-slate-object="text" 
data-key="2614"><span data-slate-leaf="true" data-offset-key="2614:0" data-first-offset="true"><span 
data-slate-string="true">我们前面已经多次提到过，当某一个操作是“幂等”的和“安全”的（如果不记得的话请重看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2615" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2616"><span data-slate-leaf="true" data-offset-key="2616:0" 
data-first-offset="true"><span data-slate-string="true">[第 04 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2617"><span data-slate-leaf="true" data-offset-key="2617:0" 
data-first-offset="true"><span data-slate-string="true">），那么这样的操作就可以被抽象为对“资源”的获取操作，那么它才可以考虑被缓存。有些操作不幂等、不安全，比如银行转账，改变了目标对象的状态，自然就难以被缓存。</span></span></span> 
</div> <div class="se-8a42db12 " data-slate-type="paragraph" data-slate-object="block" data-key="2618"> 
<span data-slate-object="text" data-key="2619"><span data-slate-leaf="true" data-offset-key="2619:0" 
data-first-offset="true"><span class="se-fec6305f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次，缓存数据必须是“重复”获取的。</span></span></span></span><span data-slate-object="text" 
data-key="2620"><span data-slate-leaf="true" data-offset-key="2620:0" data-first-offset="true"><span 
data-slate-string="true">缓存能生效的本质是空间换时间。也就是说，将曾经出现过的数据以占据缓存空间的方式存放下来，在下一次的访问时直接返回，从而节约了通过原始流程访问数据的时间。有时候，某些资源的获取行为本身是幂等的和安全的，但实际应用上却不会“重复”获取，那么这样的资源是无法被设计成真正的缓存的。我们把一批数据获取中，通过缓存获得数据的次数，除以总的次数，得到的结果，叫做缓存的命中率。</span></span></span> 
</div> <div class="se-ec123def " data-slate-type="paragraph" data-slate-object="block" data-key="2621"> 
<span data-slate-object="text" data-key="2622"><span data-slate-leaf="true" data-offset-key="2622:0" 
data-first-offset="true"><span class="se-b735b646" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再次，缓存是为了解决“开销”的问题。</span></span></span></span><span data-slate-object="text" 
data-key="2623"><span data-slate-leaf="true" data-offset-key="2623:0" data-first-offset="true"><span 
data-slate-string="true">这个开销，可不只有时间的开销。虽然我们在很多情况下讲的开销，确实都是在时间维度上的，但它还可以是 CPU、网络、I/O 等一切资源。例如我们有时在 
Web 服务中增加一层缓存，是为了避免了对原始资源获取的时候，对数据库资源调用的开销。</span></span></span> </div> <div class="se-47645ff3 
" data-slate-type="paragraph" data-slate-object="block" data-key="2624"> <span data-slate-object="text" 
data-key="2625"><span data-slate-leaf="true" data-offset-key="2625:0" data-first-offset="true"><span 
class="se-d998a21e" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">最后，缓存的存取其实不一定是“更快”的。</span></span></span></span><span 
data-slate-object="text" data-key="2626"><span data-slate-leaf="true" data-offset-key="2626:0" 
data-first-offset="true"><span data-slate-string="true">有些程序员朋友对缓存访问总有一个比原始资源访问“更快”的概念，但这是不确切的。那不快，还要缓存干什么呢？别急，请往下看。</span></span></span> 
</div> <div class="se-36200d8f " data-slate-type="paragraph" data-slate-object="block" data-key="2627"> 
<span data-slate-object="text" data-key="2628"><span data-slate-leaf="true" data-offset-key="2628:0" 
data-first-offset="true"><span data-slate-string="true">针对上面说的对“开销”的节约，你可以想象，每一种开销都能够成为缓存使用的动机。但其中，</span></span></span><span 
data-slate-object="text" data-key="2629"><span data-slate-leaf="true" data-offset-key="2629:0" 
data-first-offset="true"><span class="se-8f31fda1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">有两个使用动机最为常见，一个是 latency，延迟</span></span></span></span><span data-slate-object="text" 
data-key="2630"><span data-slate-leaf="true" data-offset-key="2630:0" data-first-offset="true"><span 
data-slate-string="true">，即追求更低的延迟，这也是“更快”这个印象的由来；</span></span></span><span data-slate-object="text" 
data-key="2631"><span data-slate-leaf="true" data-offset-key="2631:0" data-first-offset="true"><span 
class="se-3a823442" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">另一个使用动机，是 
throughput，吞吐量</span></span></span></span><span data-slate-object="text" data-key="2632"><span 
data-slate-leaf="true" data-offset-key="2632:0" data-first-offset="true"><span data-slate-string="true">，即追求更高的吞吐量。这个事实存在，也很常见，但是却较少人提及，且看下面的例子。</span></span></span> 
</div> <div class="se-2e5750b6 " data-slate-type="paragraph" data-slate-object="block" data-key="2633"> 
<span data-slate-object="text" data-key="2634"><span data-slate-leaf="true" data-offset-key="2634:0" 
data-first-offset="true"><span data-slate-string="true">比如某个系统，数据在关系数据库中存放，获取速度很快，但是还在 S3 这个分布式文件系统上存放有数据副本，它的访问速度在该系统中要低于数据库的访问速度。某些请求量大的下游系统，会去 
S3 获取数据，这样就缓和了前一条提到的数据库“开销”问题，但数据获取的速度却降下来了。这里 S3 存放的数据，也可以成为很有意义的缓存，即便它的存取其实是更慢的。这种情况下，S3 
并没有改善延迟，但提供了额外的吞吐量，符合上面提到的第二个使用动机。</span></span></span> </div> <div class="se-741daccf " data-slate-type="paragraph" 
data-slate-object="block" data-key="2635"> <span data-slate-object="text" data-key="2636"><span 
data-slate-leaf="true" data-offset-key="2636:0" data-first-offset="true"><span data-slate-string="true">另外，即便我们平时谈论的缓存“更快”访问的场景，</span></span></span><span 
data-slate-object="text" data-key="2637"><span data-slate-leaf="true" data-offset-key="2637:0" 
data-first-offset="true"><span class="se-db354487" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这个“快”也是相对而言的，在不同系统中同一对象会发生角色的变化。</span></span></span></span><span 
data-slate-object="text" data-key="2638"><span data-slate-leaf="true" data-offset-key="2638:0" 
data-first-offset="true"><span data-slate-string="true">例如，CPU 的多级高速缓存，就是内存访问的“缓存”；而内存虽然较 CPU 
存取较慢，但比磁盘快得多，因此它可以被用作磁盘的“缓存”介质。</span></span></span> </div> <h2 class="se-ede4ceec" data-slate-type="heading" 
data-slate-object="block" data-key="2639"><span data-slate-object="text" data-key="2640"><span 
data-slate-leaf="true" data-offset-key="2640:0" data-first-offset="true"><span data-slate-string="true">缓存无处不在</span></span></span></h2> 
<div class="se-fb927394 " data-slate-type="paragraph" data-slate-object="block" data-key="2641"> 
<span data-slate-object="text" data-key="2642"><span data-slate-leaf="true" data-offset-key="2642:0" 
data-first-offset="true"><span data-slate-string="true">曾经有一个很经典的问题，讲的大致是当浏览器地址栏中，输入 URL（比如极客时间 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2643" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2644"><span data-slate-leaf="true" data-offset-key="2644:0" 
data-first-offset="true"><span data-slate-string="true">https://time.geekbang.org/</span></span></span></a><span 
data-slate-object="text" data-key="2645"><span data-slate-leaf="true" data-offset-key="2645:0" 
data-first-offset="true"><span data-slate-string="true">）按下回车，之后的几秒钟时间里，到底发生了什么。我们今天还来谈论这件事情，但是从一个特别的角度——缓存的角度来审视它。</span></span></span> 
</div> <div class="se-1182a9ee " data-slate-type="paragraph" data-slate-object="block" data-key="2646"> 
<span data-slate-object="text" data-key="2647"><span data-slate-leaf="true" data-offset-key="2647:0" 
data-first-offset="true"><span data-slate-string="true">对于地址栏中输入的域名，浏览器需要搞清楚它代表的 IP 地址，才能进行访问。过程如下：</span></span></span> 
</div> <div class="se-c40323a4" data-slate-type="list" data-slate-object="block" data-key="2648"> 
<div class="se-c9102975 se-05b2581d" data-slate-type="list-line" data-slate-object="block" 
data-key="2649"> <span data-slate-object="text" data-key="2650"><span data-slate-leaf="true" 
data-offset-key="2650:0" data-first-offset="true"><span data-slate-string="true">它会先查询浏览器内部的“域名 
-IP”缓存，如果你曾经使用该浏览器访问过这个域名，这里很可能留有曾经的映射缓存；</span></span></span> </div> <div class="se-358b640c 
se-de8e50be" data-slate-type="list-line" data-slate-object="block" data-key="2651"> <span data-slate-object="text" 
data-key="2652"><span data-slate-leaf="true" data-offset-key="2652:0" data-first-offset="true"><span 
data-slate-string="true">如果没有，会查询操作系统是否存在这个缓存，例如在 Mac 中，我们可以通过修改 /etc/hosts 文件来自定义这个域名到 IP 
的映射缓存；</span></span></span> </div> <div class="se-8dc95ace se-86e5c67f" data-slate-type="list-line" 
data-slate-object="block" data-key="2653"> <span data-slate-object="text" data-key="2654"><span 
data-slate-leaf="true" data-offset-key="2654:0" data-first-offset="true"><span data-slate-string="true">如果还没有，就会查询域名服务器（DNS，Domain 
Name System），得到对应的 IP 和可缓存时间。</span></span></span> </div> </div> <div class="se-465bdec8 " 
data-slate-type="paragraph" data-slate-object="block" data-key="2655"> <span data-slate-object="text" 
data-key="2656"><span data-slate-leaf="true" data-offset-key="2656:0" data-first-offset="true"><span 
data-slate-string="true">Linux 或 Mac 系统中，你可以使用 dig 命令来查询：</span></span></span> </div> <div 
class="se-0e56152a se-3fb9c408" data-slate-type="pre" data-slate-object="block" data-key="2657"> 
<div class="se-243158b5 se-19cef6ed"> <span></span> </div> <div class="se-6184bda6"> <div class="se-edbe1cc0 
se-7307479d" data-code-line-number="1"></div> </div> <div class="se-cf2212e3 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="2658"> <span data-slate-object="text" 
data-key="2659"><span data-slate-leaf="true" data-offset-key="2659:0" data-first-offset="true"><span 
data-slate-string="true">dig time.geekbang.org</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-ec2f283e 
" data-slate-type="paragraph" data-slate-object="block" data-key="2660"> <span data-slate-object="text" 
data-key="2661"><span data-slate-leaf="true" data-offset-key="2661:0" data-first-offset="true"><span 
data-slate-string="true">得到的信息中包含：</span></span></span> </div> <div class="se-dab99680 se-f96d14cd" 
data-slate-type="pre" data-slate-object="block" data-key="2662"> <div class="se-93b0306c se-cbef1261"> 
<span></span> </div> <div class="se-5f1f85e5"> <div class="se-b27e9a49 se-2883fa85" data-code-line-number="1"></div> 
</div> <div class="se-48c6cab4 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="2663"> <span data-slate-object="text" data-key="2664"><span 
data-slate-leaf="true" data-offset-key="2664:0" data-first-offset="true"><span data-slate-string="true">time.geekbang.org. 
600 IN A 39.106.233.176</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; 
bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-4566f57f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2665"> <span data-slate-object="text" data-key="2666"><span 
data-slate-leaf="true" data-offset-key="2666:0" data-first-offset="true"><span data-slate-string="true">这是说这个 
IP 地址就是极客时间对应的地址，可以被缓存 600 秒。</span></span></span> </div> <div class="se-5b2b1c12 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2667"> <span data-slate-object="text" data-key="2668"><span 
data-slate-leaf="true" data-offset-key="2668:0" data-first-offset="true"><span data-slate-string="true">当请求抵达服务端，在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2669" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2670"><span data-slate-leaf="true" data-offset-key="2670:0" 
data-first-offset="true"><span data-slate-string="true">反向代理</span></span></span></a><span 
data-slate-object="text" data-key="2671"><span data-slate-leaf="true" data-offset-key="2671:0" 
data-first-offset="true"><span data-slate-string="true">中也是可以进行缓存配置的，比如我们曾经在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2672" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2673"><span data-slate-leaf="true" data-offset-key="2673:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2674"><span data-slate-leaf="true" data-offset-key="2674:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍过服务端包含 SSI 的方式来加载母页面上的一些静态内容。</span></span></span> 
</div> <div class="se-000882c5 " data-slate-type="paragraph" data-slate-object="block" data-key="2675"> 
<span data-slate-object="text" data-key="2676"><span data-slate-leaf="true" data-offset-key="2676:0" 
data-first-offset="true"><span data-slate-string="true">接着，请求终于抵达服务端的代码逻辑了，对于一个采用 MVC 架构的应用来说，MVC 
的各层都是可以应用缓存模式的。</span></span></span> </div> <div class="se-952bfef5" data-slate-type="list" 
data-slate-object="block" data-key="2677"> <div class="se-feb1053e se-be5f5cf6" data-slate-type="list-line" 
data-slate-object="block" data-key="2678"> <span data-slate-object="text" data-key="2679"><span 
data-slate-leaf="true" data-offset-key="2679:0" data-first-offset="true"><span data-slate-string="true">对于 
Controller 层来说，我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2680" class="se-575a6467 se-198d4f97"><span data-slate-object="text" data-key="2681"><span 
data-slate-leaf="true" data-offset-key="2681:0" data-first-offset="true"><span data-slate-string="true">[第 
12 讲]</span></span></span></a><span data-slate-object="text" data-key="2682"><span data-slate-leaf="true" 
data-offset-key="2682:0" data-first-offset="true"><span data-slate-string="true"> 中曾经介绍过拦截过滤器，而拦截过滤器中，我们就是可以配置缓存来过滤服务的，即满足某些要求的可缓存请求，我们可以直接通过过滤器返回缓存结果，而不执行后面的逻辑，我们在下一讲会学到具体怎样配置。</span></span></span> 
</div> <div class="se-7bfbb626 se-f1274ec4" data-slate-type="list-line" data-slate-object="block" 
data-key="2683"> <span data-slate-object="text" data-key="2684"><span data-slate-leaf="true" 
data-offset-key="2684:0" data-first-offset="true"><span data-slate-string="true">对于 Model 层来说，几乎所有的数据库 
ORM 框架都提供了缓存能力，对于贫血模型的系统，在 DAO 上方的 Service 层基于其暴露的 API 应用缓存，也是一种非常常见的形式。</span></span></span> 
</div> <div class="se-9a66b5ba se-9cfd26f8" data-slate-type="list-line" data-slate-object="block" 
data-key="2685"> <span data-slate-object="text" data-key="2686"><span data-slate-leaf="true" 
data-offset-key="2686:0" data-first-offset="true"><span data-slate-string="true">对于 View 层，很多页面模板都支持缓存标签，页面中的部分内容，不需要每次都执行渲染操作（这个开销很可能不止渲染本身，还包括需要调用模型层的接口而造成显著的系统开销），而可以直接从缓存中获取渲染后的数据并返回。</span></span></span> 
</div> </div> <div class="se-ca07f8f8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2687"> <span data-slate-object="text" data-key="2688"><span data-slate-leaf="true" 
data-offset-key="2688:0" data-first-offset="true"><span data-slate-string="true">当母页面 HTML 
返回了浏览器，还需要加载页面上需要的大量资源，包括 CSS、JavaScript、图像等等，都是可以通过读取浏览器内的缓存，而避免一个新的 HTTP 请求的开销的。通过服务端设置返回 
HTTP 响应的 Cache-Control 头，就可以很容易做到这一点。例如：</span></span></span> </div> <div class="se-2ca5c76a 
se-c2c4fc87" data-slate-type="pre" data-slate-object="block" data-key="2689" data-code-language="sql"> 
<div class="se-dfea76ad se-fe9bb90c"> <span></span> </div> <div class="se-55149b4f"> <div class="se-d973647e 
se-6c55bdbe" data-code-line-number="1"></div> </div> <div class="se-31c7b7e2 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="2690"> <span data-slate-object="text" 
data-key="2691"><span data-slate-leaf="true" data-offset-key="2691:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6332694420" 
data-annotation-type="annotation"><span data-slate-string="true">Cache</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:1"><span data-slate-string="true">-Control: </span></span><span 
data-slate-leaf="true" data-offset-key="2691:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1002504279" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2691:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2145091004" data-annotation-type="annotation"><span data-slate-string="true">max</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:5"><span data-slate-string="true">-age=</span></span><span 
data-slate-leaf="true" data-offset-key="2691:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7207250449" data-annotation-type="annotation"><span data-slate-string="true">84600</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-232e0185 " data-slate-type="paragraph" data-slate-object="block" data-key="2692"> 
<span data-slate-object="text" data-key="2693"><span data-slate-leaf="true" data-offset-key="2693:0" 
data-first-offset="true"><span data-slate-string="true">上面这个请求头就是说，这个响应中的数据是“公有”的，可以被任意级节点（包括代理节点等等）缓存最多 
84600 秒。</span></span></span> </div> <div class="se-da21cc7d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2694"> <span data-slate-object="text" data-key="2695"><span 
data-slate-leaf="true" data-offset-key="2695:0" data-first-offset="true"><span data-slate-string="true">即便某资源无法被缓存，必须发起单独的 
HTTP 请求去获取这样的资源，也可以通过 CDN 的方式，去较近的资源服务器获取，而这样的资源服务器，对于分布式网络远端的中心节点来说，就是它的缓存。</span></span></span> 
</div> <div class="se-3962fb37 " data-slate-type="paragraph" data-slate-object="block" data-key="2696"> 
<span data-slate-object="text" data-key="2697"><span data-slate-leaf="true" data-offset-key="2697:0" 
data-first-offset="true"><span data-slate-string="true">你看，对于这样的一个过程，居然有那么多的缓存在默默地工作，为你的网上冲浪保驾护航。如果继续往细了说，这个过程中你会看到更多的缓存技术应用，但我们就此打住吧，这些例子已经足够说明缓存应用的广泛度和重要性了。</span></span></span> 
</div> <h2 class="se-f87ea07c" data-slate-type="heading" data-slate-object="block" data-key="2698"><span 
data-slate-object="text" data-key="2699"><span data-slate-leaf="true" data-offset-key="2699:0" 
data-first-offset="true"><span data-slate-string="true">缓存应用模式</span></span></span></h2> <div 
class="se-4c7d25d5 " data-slate-type="paragraph" data-slate-object="block" data-key="2700"> 
<span data-slate-object="text" data-key="2701"><span data-slate-leaf="true" data-offset-key="2701:0" 
data-first-offset="true"><span data-slate-string="true">在 Web 应用中，缓存的应用是有一些模式的，而我们可以归纳出这些模式以比较的方式来学习，了解其优劣，从而在实际业务中可以合理地使用它们。</span></span></span> 
</div> <h3 class="se-e7e3f53f" data-slate-type="heading" data-slate-object="block" data-key="2702"><span 
data-slate-object="text" data-key="2703"><span data-slate-leaf="true" data-offset-key="2703:0" 
data-first-offset="true"><span data-slate-string="true">1. Cache-Aside</span></span></span></h3> 
<div class="se-31cfb799 " data-slate-type="paragraph" data-slate-object="block" data-key="2704"> 
<span data-slate-object="text" data-key="2705"><span data-slate-leaf="true" data-offset-key="2705:0" 
data-first-offset="true"><span data-slate-string="true">这是最常见的一种缓存应用模式，整个过程也很好理解。</span></span></span> 
</div> <div class="se-10bc37ee " data-slate-type="paragraph" data-slate-object="block" data-key="2706"> 
<span data-slate-object="text" data-key="2707"><span data-slate-leaf="true" data-offset-key="2707:0" 
data-first-offset="true"><span data-slate-string="true">数据获取策略：</span></span></span> </div> 
<div class="se-a8610046" data-slate-type="list" data-slate-object="block" data-key="2708"> 
<div class="se-b5c6782c se-5f90e8e4" data-slate-type="list-line" data-slate-object="block" 
data-key="2709"> <span data-slate-object="text" data-key="2710"><span data-slate-leaf="true" 
data-offset-key="2710:0" data-first-offset="true"><span data-slate-string="true">应用先去查看缓存是否有所需数据；</span></span></span> 
</div> <div class="se-f1970c18 se-5828fb7b" data-slate-type="list-line" data-slate-object="block" 
data-key="2711"> <span data-slate-object="text" data-key="2712"><span data-slate-leaf="true" 
data-offset-key="2712:0" data-first-offset="true"><span data-slate-string="true">如果有，应用直接将缓存数据返回给请求方；</span></span></span> 
</div> <div class="se-60383f7d se-d6294ea2" data-slate-type="list-line" data-slate-object="block" 
data-key="2713"> <span data-slate-object="text" data-key="2714"><span data-slate-leaf="true" 
data-offset-key="2714:0" data-first-offset="true"><span data-slate-string="true">如果没有，应用执行原始逻辑，例如查询数据库得到结果数据；</span></span></span> 
</div> <div class="se-cd2503b2 se-cc42a1fc" data-slate-type="list-line" data-slate-object="block" 
data-key="2715"> <span data-slate-object="text" data-key="2716"><span data-slate-leaf="true" 
data-offset-key="2716:0" data-first-offset="true"><span data-slate-string="true">应用将结果数据写入缓存。</span></span></span> 
</div> </div> <div class="se-6cb014ff" data-slate-type="image" data-slate-object="block" data-key="2717"> 
<img class="se-b76b31d3" src="https://static001.geekbang.org/resource/image/6c/f2/6c2bb8131481c5b931275f734a393bf2.png"> 
</div> <div class="se-12ec91f7 " data-slate-type="paragraph" data-slate-object="block" data-key="2718"> 
<span data-slate-object="text" data-key="2719"><span data-slate-leaf="true" data-offset-key="2719:0" 
data-first-offset="true"><span data-slate-string="true">我们见到的多数缓存，例如前面提到的拦截过滤器中的缓存，基本上都是按照这种方式来配置和使用的。</span></span></span> 
</div> <div class="se-a60c98db " data-slate-type="paragraph" data-slate-object="block" data-key="2720"> 
<span data-slate-object="text" data-key="2721"><span data-slate-leaf="true" data-offset-key="2721:0" 
data-first-offset="true"><span data-slate-string="true">数据读取的异常情形：</span></span></span> </div> 
<div class="se-01a1cdfb" data-slate-type="list" data-slate-object="block" data-key="2722"> 
<div class="se-209366b1 se-1d5cfce5" data-slate-type="list-line" data-slate-object="block" 
data-key="2723"> <span data-slate-object="text" data-key="2724"><span data-slate-leaf="true" 
data-offset-key="2724:0" data-first-offset="true"><span data-slate-string="true">如果数据库读取异常，直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-1d5add41 se-40e38970" data-slate-type="list-line" data-slate-object="block" 
data-key="2725"> <span data-slate-object="text" data-key="2726"><span data-slate-leaf="true" 
data-offset-key="2726:0" data-first-offset="true"><span data-slate-string="true">如果数据库读取成功，但是缓存写入失败，那么下一次同一数据的访问还将继续尝试写入，因此这时也没有不一致的情况发生。</span></span></span> 
</div> </div> <div class="se-46d4bdbf " data-slate-type="paragraph" data-slate-object="block" 
data-key="2727"> <span data-slate-object="text" data-key="2728"><span data-slate-leaf="true" 
data-offset-key="2728:0" data-first-offset="true"><span data-slate-string="true">可见，这两种异常情形都是“安全”的。</span></span></span> 
</div> <div class="se-263db476 " data-slate-type="paragraph" data-slate-object="block" data-key="2729"> 
<span data-slate-object="text" data-key="2730"><span data-slate-leaf="true" data-offset-key="2730:0" 
data-first-offset="true"><span data-slate-string="true">数据更新策略：</span></span></span> </div> 
<div class="se-355cf1a2" data-slate-type="list" data-slate-object="block" data-key="2731"> 
<div class="se-ccdaca8e se-3aaa2b51" data-slate-type="list-line" data-slate-object="block" 
data-key="2732"> <span data-slate-object="text" data-key="2733"><span data-slate-leaf="true" 
data-offset-key="2733:0" data-first-offset="true"><span data-slate-string="true">应用先更新数据库；</span></span></span> 
</div> <div class="se-1d102954 se-aba10489" data-slate-type="list-line" data-slate-object="block" 
data-key="2734"> <span data-slate-object="text" data-key="2735"><span data-slate-leaf="true" 
data-offset-key="2735:0" data-first-offset="true"><span data-slate-string="true">应用再令缓存失效。</span></span></span> 
</div> </div> <div class="se-3904f7a8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2736"> <span data-slate-object="text" data-key="2737"><span data-slate-leaf="true" 
data-offset-key="2737:0" data-first-offset="true"><span data-slate-string="true">这里，避免踩坑的关键点有两个：</span></span></span> 
</div> <div class="se-1440d17d " data-slate-type="paragraph" data-slate-object="block" data-key="2738"> 
<span data-slate-object="text" data-key="2739"><span data-slate-leaf="true" data-offset-key="2739:0" 
data-first-offset="true"><span data-slate-string="true">数据更新的这个策略，通常来说，最重要的一点是</span></span></span><span 
data-slate-object="text" data-key="2740"><span data-slate-leaf="true" data-offset-key="2740:0" 
data-first-offset="true"><span class="se-b6761799" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">必须先更新数据库，而不是先令缓存失效</span></span></span></span><span data-slate-object="text" 
data-key="2741"><span data-slate-leaf="true" data-offset-key="2741:0" data-first-offset="true"><span 
data-slate-string="true">，即这个顺序不能倒过来。原因在于，如果先令缓存失效，那么在数据库更新成功前，如果有另外一个请求访问了缓存，发现缓存数据库已经失效，于是就会按照数据获取策略，从数据库中使用这个已经陈旧的数值去更新缓存中的数据，这就导致这个过期的数据会长期存在于缓存中，最终导致数据不一致的严重问题。</span></span></span> 
</div> <div class="se-edb82a60 " data-slate-type="paragraph" data-slate-object="block" data-key="2742"> 
<span data-slate-object="text" data-key="2743"><span data-slate-leaf="true" data-offset-key="2743:0" 
data-first-offset="true"><span data-slate-string="true">这里我画了一张图，可以帮你理解，如果先令缓存失效，再更新数据库，为什么会导致问题：</span></span></span> 
</div> <div class="se-7d39f004" data-slate-type="image" data-slate-object="block" data-key="2744"> 
<img class="se-d26fcf57" src="https://static001.geekbang.org/resource/image/83/b8/837a288bc5cb4ad7c478a37dcce6d4b8.png"> 
</div> <div class="se-974fd5a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2745"> 
<span data-slate-object="text" data-key="2746"><span data-slate-leaf="true" data-offset-key="2746:0" 
data-first-offset="true"><span data-slate-string="true">第二个关键点是，</span></span></span><span 
data-slate-object="text" data-key="2747"><span data-slate-leaf="true" data-offset-key="2747:0" 
data-first-offset="true"><span class="se-fabfffbe" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据库更新以后，需要令缓存失效，而不是更新缓存为数据库的最新值。</span></span></span></span><span 
data-slate-object="text" data-key="2748"><span data-slate-leaf="true" data-offset-key="2748:0" 
data-first-offset="true"><span data-slate-string="true">为什么呢？你想一下，如果两个几乎同时发出的请求分别要更新数据库中的值为 
A 和 B，如果结果是 B 的更新晚于 A，那么数据库中的最终值是 B。但是，如果在数据库更新后去更新缓存，而不是令缓存失效，那么缓存中的数据就有可能是 A，而不是 B。因为数据库虽然是“更新为 
A”在“更新为 B”之前发生，但如果不做特殊的跨存储系统的事务控制，缓存的更新顺序就未必会遵从“A 先于 B”这个规则，这就会导致这个缓存中的数据会是一个长期错误的值 A。</span></span></span> 
</div> <div class="se-42a20f1e " data-slate-type="paragraph" data-slate-object="block" data-key="2749"> 
<span data-slate-object="text" data-key="2750"><span data-slate-leaf="true" data-offset-key="2750:0" 
data-first-offset="true"><span data-slate-string="true">这张图可以帮你理解，如果是更新缓存为数据库最新值，而不是令缓存失效，为什么会产生问题：</span></span></span> 
</div> <div class="se-afc08d01" data-slate-type="image" data-slate-object="block" data-key="2751"> 
<img class="se-5477cdcc" src="https://static001.geekbang.org/resource/image/59/fb/597af9e088dccf6d1d1c3718cdb708fb.jpeg"> 
</div> <div class="se-e2ce3296 " data-slate-type="paragraph" data-slate-object="block" data-key="2752"> 
<span data-slate-object="text" data-key="2753"><span data-slate-leaf="true" data-offset-key="2753:0" 
data-first-offset="true"><span data-slate-string="true">如果是令缓存失效，这个问题就消失了。因为 B 是后写入数据库的，那么在 
B 写入数据库以后，无论是写入 B 的请求让缓存失效，还是并发的竞争情形下写入 A 的请求让缓存失效，缓存反正都是失效了。那么下一次的访问就会从数据库中取得最新的值，并写入缓存，这个值就一定是 
B。</span></span></span> </div> <div class="se-3b03986e " data-slate-type="paragraph" data-slate-object="block" 
data-key="2754"> <span data-slate-object="text" data-key="2755"><span data-slate-leaf="true" 
data-offset-key="2755:0" data-first-offset="true"><span data-slate-string="true">这两个关键点非常重要，而且不当使用引起的错误还非常常见，希望你可以完全理解它们。在我参与过的项目中，在这两个关键点上出错的系统我都见过（在这两点做到的情况下，其实还有一个理论上极小概率的情况下依然会出现数据错误，但是这个概率如此之小，以至于一般的系统设计当中都会直接将它忽略，但是你依然可以考虑一下它是什么）。</span></span></span> 
</div> <div class="se-531c636e " data-slate-type="paragraph" data-slate-object="block" data-key="2756"> 
<span data-slate-object="text" data-key="2757"><span data-slate-leaf="true" data-offset-key="2757:0" 
data-first-offset="true"><span data-slate-string="true">数据更新的异常情形：</span></span></span> </div> 
<div class="se-99b28bc6" data-slate-type="list" data-slate-object="block" data-key="2758"> 
<div class="se-60581faf se-f13b2e54" data-slate-type="list-line" data-slate-object="block" 
data-key="2759"> <span data-slate-object="text" data-key="2760"><span data-slate-leaf="true" 
data-offset-key="2760:0" data-first-offset="true"><span data-slate-string="true">如果数据库操作失败，那么直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-fe84609d se-9ba934b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2761"> <span data-slate-object="text" data-key="2762"><span data-slate-leaf="true" 
data-offset-key="2762:0" data-first-offset="true"><span data-slate-string="true">如果数据库操作成功，但是缓存失效操作失败，这个问题很难发生，但一旦发生就会非常麻烦，缓存中的数据是过期数据，需要特殊处理来纠正。</span></span></span> 
</div> </div> <h3 class="se-51726fca" data-slate-type="heading" data-slate-object="block" data-key="2763"><span 
data-slate-object="text" data-key="2764"><span data-slate-leaf="true" data-offset-key="2764:0" 
data-first-offset="true"><span data-slate-string="true">2. Read-Through</span></span></span></h3> 
<div class="se-02be8885 " data-slate-type="paragraph" data-slate-object="block" data-key="2765"> 
<span data-slate-object="text" data-key="2766"><span data-slate-leaf="true" data-offset-key="2766:0" 
data-first-offset="true"><span data-slate-string="true">这种情况下缓存系统彻底变成了它身后数据库的代理，二者成为了一个整体，应用的请求访问只能看到缓存的返回数据，而数据库系统对它是透明的。</span></span></span> 
</div> <div class="se-294bb6c5" data-slate-type="image" data-slate-object="block" data-key="2767"> 
<img class="se-cc6174aa" src="https://static001.geekbang.org/resource/image/12/fa/124961b9e43e50f2a833b8563f47f0fa.png"> 
</div> <div class="se-f57c89d7 " data-slate-type="paragraph" data-slate-object="block" data-key="2768"> 
<span data-slate-object="text" data-key="2769"><span data-slate-leaf="true" data-offset-key="2769:0" 
data-first-offset="true"><span data-slate-string="true">有的框架提供的内置缓存，例如一些 ORM 框架，就是按这种 Read-Through 
和 Write-Through 来实现的。</span></span></span> </div> <div class="se-eebb99b7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2770"> <span data-slate-object="text" data-key="2771"><span 
data-slate-leaf="true" data-offset-key="2771:0" data-first-offset="true"><span data-slate-string="true">数据获取策略：</span></span></span> 
</div> <div class="se-fcb4cc41" data-slate-type="list" data-slate-object="block" data-key="2772"> 
<div class="se-49f68ed1 se-8e7dee6e" data-slate-type="list-line" data-slate-object="block" 
data-key="2773"> <span data-slate-object="text" data-key="2774"><span data-slate-leaf="true" 
data-offset-key="2774:0" data-first-offset="true"><span data-slate-string="true">应用向缓存要求数据；</span></span></span> 
</div> <div class="se-9e7e0bd4 se-e10ea3cd" data-slate-type="list-line" data-slate-object="block" 
data-key="2775"> <span data-slate-object="text" data-key="2776"><span data-slate-leaf="true" 
data-offset-key="2776:0" data-first-offset="true"><span data-slate-string="true">如果缓存中有数据，返回给应用，应用再将数据返回；</span></span></span> 
</div> <div class="se-408ad004 se-2fb956a7" data-slate-type="list-line" data-slate-object="block" 
data-key="2777"> <span data-slate-object="text" data-key="2778"><span data-slate-leaf="true" 
data-offset-key="2778:0" data-first-offset="true"><span data-slate-string="true">如果没有，缓存查询数据库，并将结果写入自己；</span></span></span> 
</div> <div class="se-4c6b613b se-79c7387f" data-slate-type="list-line" data-slate-object="block" 
data-key="2779"> <span data-slate-object="text" data-key="2780"><span data-slate-leaf="true" 
data-offset-key="2780:0" data-first-offset="true"><span data-slate-string="true">缓存将数据返回给应用。</span></span></span> 
</div> </div> <div class="se-c697c3b3 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2781"> <span data-slate-object="text" data-key="2782"><span data-slate-leaf="true" 
data-offset-key="2782:0" data-first-offset="true"><span data-slate-string="true">数据读取异常的情况分析和 
Cache-Aside 类似，没有数据不一致的情况发生。</span></span></span> </div> <h3 class="se-a79ec822" data-slate-type="heading" 
data-slate-object="block" data-key="2783"><span data-slate-object="text" data-key="2784"><span 
data-slate-leaf="true" data-offset-key="2784:0" data-first-offset="true"><span data-slate-string="true">3. 
Write-Through</span></span></span></h3> <div class="se-a34a5b28 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2785"> <span data-slate-object="text" data-key="2786"><span 
data-slate-leaf="true" data-offset-key="2786:0" data-first-offset="true"><span data-slate-string="true">和 
Read-Through 类似，图示同上，但 Write-Through 是用来处理数据更新的场景。</span></span></span> </div> <div class="se-7cd62dc8 
" data-slate-type="paragraph" data-slate-object="block" data-key="2787"> <span data-slate-object="text" 
data-key="2788"><span data-slate-leaf="true" data-offset-key="2788:0" data-first-offset="true"><span 
data-slate-string="true">数据更新策略：</span></span></span> </div> <div class="se-978b8a36" data-slate-type="list" 
data-slate-object="block" data-key="2789"> <div class="se-bc869365 se-df2e364f" data-slate-type="list-line" 
data-slate-object="block" data-key="2790"> <span data-slate-object="text" data-key="2791"><span 
data-slate-leaf="true" data-offset-key="2791:0" data-first-offset="true"><span data-slate-string="true">应用要求缓存更新数据；</span></span></span> 
</div> <div class="se-939d2b63 se-5f5e5b14" data-slate-type="list-line" data-slate-object="block" 
data-key="2792"> <span data-slate-object="text" data-key="2793"><span data-slate-leaf="true" 
data-offset-key="2793:0" data-first-offset="true"><span data-slate-string="true">如果缓存中有对应数据，先更新该数据；</span></span></span> 
</div> <div class="se-12b1ae3d se-012a245f" data-slate-type="list-line" data-slate-object="block" 
data-key="2794"> <span data-slate-object="text" data-key="2795"><span data-slate-leaf="true" 
data-offset-key="2795:0" data-first-offset="true"><span data-slate-string="true">缓存再更新数据库中的数据；</span></span></span> 
</div> <div class="se-60718129 se-eac837dd" data-slate-type="list-line" data-slate-object="block" 
data-key="2796"> <span data-slate-object="text" data-key="2797"><span data-slate-leaf="true" 
data-offset-key="2797:0" data-first-offset="true"><span data-slate-string="true">缓存告知应用更新完成。</span></span></span> 
</div> </div> <div class="se-dbbef951 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2798"> <span data-slate-object="text" data-key="2799"><span data-slate-leaf="true" 
data-offset-key="2799:0" data-first-offset="true"><span data-slate-string="true">这里的一个关键点是，</span></span></span><span 
data-slate-object="text" data-key="2800"><span data-slate-leaf="true" data-offset-key="2800:0" 
data-first-offset="true"><span class="se-c05d78f0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">缓存系统需要自己内部保证并发场景下，缓存更新的顺序要和数据库更新的顺序一致。</span></span></span></span><span 
data-slate-object="text" data-key="2801"><span data-slate-leaf="true" data-offset-key="2801:0" 
data-first-offset="true"><span data-slate-string="true">比如说，两个请求分别要把数据更新为 A 和 B，那么如果 B 后写入数据库，缓存中最后的结果也必须是 
B。这个一致性可以用乐观锁等方式来保证。</span></span></span> </div> <div class="se-7048be6d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2802"> <span data-slate-object="text" data-key="2803"><span 
data-slate-leaf="true" data-offset-key="2803:0" data-first-offset="true"><span data-slate-string="true">数据更新的异常情形：</span></span></span> 
</div> <div class="se-11a831df" data-slate-type="list" data-slate-object="block" data-key="2804"> 
<div class="se-ddc6bedb se-15589535" data-slate-type="list-line" data-slate-object="block" 
data-key="2805"> <span data-slate-object="text" data-key="2806"><span data-slate-leaf="true" 
data-offset-key="2806:0" data-first-offset="true"><span data-slate-string="true">如果缓存更新失败，直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-746fa857 se-471b70ba" data-slate-type="list-line" data-slate-object="block" 
data-key="2807"> <span data-slate-object="text" data-key="2808"><span data-slate-leaf="true" 
data-offset-key="2808:0" data-first-offset="true"><span data-slate-string="true">如果缓存更新成功，数据库更新失败，这种情况下需要回滚缓存中的更新，或者干脆从缓存中删除该数据。</span></span></span> 
</div> </div> <div class="se-2cb3d8e0 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2809"> <span data-slate-object="text" data-key="2810"><span data-slate-leaf="true" 
data-offset-key="2810:0" data-first-offset="true"><span data-slate-string="true">还有一种和 Write-Through 
非常类似的数据更新模式，叫做 Write-Around。它们的区别在于 Write-Through 需要更新缓存和数据库，而 Write-Around 只更新数据库（缓存的更新完全留给读操作）。</span></span></span> 
</div> <h3 class="se-7b4aeb9e" data-slate-type="heading" data-slate-object="block" data-key="2811"><span 
data-slate-object="text" data-key="2812"><span data-slate-leaf="true" data-offset-key="2812:0" 
data-first-offset="true"><span data-slate-string="true">4. Write-Back</span></span></span></h3> 
<div class="se-e7c8e0f2 " data-slate-type="paragraph" data-slate-object="block" data-key="2813"> 
<span data-slate-object="text" data-key="2814"><span data-slate-leaf="true" data-offset-key="2814:0" 
data-first-offset="true"><span data-slate-string="true">对于 Write-Back 模式来说，更新操作发生的时候，数据写入缓存之后就立即返回了，而数据库的更新异步完成。这种模式在一些分布式系统中很常见。</span></span></span> 
</div> <div class="se-a976f31d " data-slate-type="paragraph" data-slate-object="block" data-key="2815"> 
<span data-slate-object="text" data-key="2816"><span data-slate-leaf="true" data-offset-key="2816:0" 
data-first-offset="true"><span data-slate-string="true">这种方式带来的最大好处是拥有最大的请求吞吐量，并且操作非常迅速，数据库的更新甚至可以批量进行，因而拥有杰出的更新效率以及稳定的速率，这个缓存就像是一个写入的缓冲，可以平滑访问尖峰。另外，对于存在数据库短时间无法访问的问题，它也能够很好地处理。</span></span></span> 
</div> <div class="se-3a477ec9 " data-slate-type="paragraph" data-slate-object="block" data-key="2817"> 
<span data-slate-object="text" data-key="2818"><span data-slate-leaf="true" data-offset-key="2818:0" 
data-first-offset="true"><span data-slate-string="true">但是它的弊端也很明显，异步更新一定会存在着不可避免的一致性问题，并且也存在着数据丢失的风险（数据写入缓存但还未入库时，如果宕机了，那么这些数据就丢失了）。</span></span></span> 
</div> <h2 class="se-c111990a" data-slate-type="heading" data-slate-object="block" data-key="2819"><span 
data-slate-object="text" data-key="2820"><span data-slate-leaf="true" data-offset-key="2820:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-e4459076 " data-slate-type="paragraph" data-slate-object="block" data-key="2821"> 
<span data-slate-object="text" data-key="2822"><span data-slate-leaf="true" data-offset-key="2822:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了缓存的本质、应用，仔细比较了几种常见的应用模式。在理解缓存本质的基础上，Cache-Aside 
模式是缓存应用模式中的重点，在我们实际系统的设计和实现中，它是最为常用的那一个。希望这些缓存的知识可以帮到你！</span></span></span> </div> <div class="se-4a6db58d 
" data-slate-type="paragraph" data-slate-object="block" data-key="2823"> <span data-slate-object="text" 
data-key="2824"><span data-slate-leaf="true" data-offset-key="2824:0" data-first-offset="true"><span 
data-slate-string="true">现在我来提两个问题，检验一下今天的学习成果吧。</span></span></span> </div> <div class="se-4429ab03" 
data-slate-type="list" data-slate-object="block" data-key="2825"> <div class="se-05418a49 se-3ec60db5" 
data-slate-type="list-line" data-slate-object="block" data-key="2826"> <span data-slate-object="text" 
data-key="2827"><span data-slate-leaf="true" data-offset-key="2827:0" data-first-offset="true"><span 
data-slate-string="true">在你参与的项目中，是否应用到了缓存，属于哪一个应用模式，能否举例说明呢？</span></span></span> </div> <div 
class="se-5bb04ebc se-8dcf7930" data-slate-type="list-line" data-slate-object="block" data-key="2828"> 
<span data-slate-object="text" data-key="2829"><span data-slate-leaf="true" data-offset-key="2829:0" 
data-first-offset="true"><span data-slate-string="true">这一讲提到了几种缓存应用模式，你能否说出 Cache-Aside 和 
Write-Back 这两种模式各有什么优劣，它们都适应怎样的实际场景呢？</span></span></span> </div> </div> <div class="se-ba6a9622 
" data-slate-type="paragraph" data-slate-object="block" data-key="2830"> <span data-slate-object="text" 
data-key="2831"><span data-slate-leaf="true" data-offset-key="2831:0" data-first-offset="true"><span 
data-slate-string="true">看到最后，你可能会想，不是说双刃剑吗？杀敌的那一刃已经介绍了，可自伤的那一刃呢？别急，我们下一讲就会讲到缓存使用中的坑，以期有效避免缓存使用过程中的问题。今天的内容就到这里，欢迎你和我讨论。</span></span></span> 
</div> <h2 class="se-a6de7401" data-slate-type="heading" data-slate-object="block" data-key="2832"><span 
data-slate-object="text" data-key="2833"><span data-slate-leaf="true" data-offset-key="2833:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-97cdc5c5" data-slate-type="list" data-slate-object="block" data-key="2834"> <div 
class="se-bbe835b8 se-d8663bea" data-slate-type="list-line" data-slate-object="block" data-key="2835"> 
<span data-slate-object="text" data-key="2836"><span data-slate-leaf="true" data-offset-key="2836:0" 
data-first-offset="true"><span data-slate-string="true">文中提到使用 dig 命令来查询 DNS 返回的 IP 地址，想了解更完整的原理，可以参阅 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2837" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2838"><span data-slate-leaf="true" data-offset-key="2838:0" 
data-first-offset="true"><span data-slate-string="true">DNS 原理入门</span></span></span></a><span 
data-slate-object="text" data-key="2839"><span data-slate-leaf="true" data-offset-key="2839:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-4472f849 se-a68d2b10" data-slate-type="list-line" data-slate-object="block" data-key="2840"> 
<span data-slate-object="text" data-key="2841"><span data-slate-leaf="true" data-offset-key="2841:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 HTTP 响应中的缓存设置头，请参阅 MDN 的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2842" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2843"><span data-slate-leaf="true" data-offset-key="2843:0" 
data-first-offset="true"><span data-slate-string="true">HTTP 缓存</span></span></span></a><span 
data-slate-object="text" data-key="2844"><span data-slate-leaf="true" data-offset-key="2844:0" 
data-first-offset="true"><span data-slate-string="true">一节以获得更为细致的讲解。</span></span></span> 
</div> <div class="se-1267d067 se-b4e396aa" data-slate-type="list-line" data-slate-object="block" 
data-key="2845"> <span data-slate-object="text" data-key="2846"><span data-slate-leaf="true" 
data-offset-key="2846:0" data-first-offset="true"><span data-slate-string="true">文中提到了乐观锁，不清楚的话，你可以阅读这个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2847" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2848"><span data-slate-leaf="true" data-offset-key="2848:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="2849"><span data-slate-leaf="true" data-offset-key="2849:0" data-first-offset="true"><span 
data-slate-string="true">，以及这篇</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2850" class="se-575a6467 se-198d4f97"><span data-slate-object="text" data-key="2851"><span 
data-slate-leaf="true" data-offset-key="2851:0" data-first-offset="true"><span data-slate-string="true">文章</span></span></span></a><span 
data-slate-object="text" data-key="2852"><span data-slate-leaf="true" data-offset-key="2852:0" 
data-first-offset="true"><span data-slate-string="true">以进一步理解。</span></span></span> </div> 
</div> <div class="se-b1901568" data-slate-type="image" data-slate-object="block" data-key="2853"> 
<img class="se-9fb43f19" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.078 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.078 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.082 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2599" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-712480dd " data-slate-type="paragraph" data-slate-object="block" data-key="2600"> 
<span data-slate-object="text" data-key="2601"><span data-slate-leaf="true" data-offset-key="2601:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-d3abdef5 " data-slate-type="paragraph" data-slate-object="block" data-key="2602"> 
<span data-slate-object="text" data-key="2603"><span data-slate-leaf="true" data-offset-key="2603:0" 
data-first-offset="true"><span data-slate-string="true">从今天开始，我们将继续在基于 Web 的全栈技术上深挖，本章我们介绍持久层。缓存是全栈开发中非常重要的一环，因此我把它放到了数据持久化系列的开篇。</span></span></span> 
</div> <div class="se-933241a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2604"> 
<span data-slate-object="text" data-key="2605"><span data-slate-leaf="true" data-offset-key="2605:0" 
data-first-offset="true"><span data-slate-string="true">缓存使用好了，会是一把无比锋利的宝剑，特别对于性能的提升往往是立竿见影的；但使用不好就会严重影响系统运行，甚至因为数据一致性问题造成严重的数据错误。这一讲，我将为你介绍缓存的本质以及缓存的应用模式。</span></span></span> 
</div> <h2 class="se-97054351" data-slate-type="heading" data-slate-object="block" data-key="2606"><span 
data-slate-object="text" data-key="2607"><span data-slate-leaf="true" data-offset-key="2607:0" 
data-first-offset="true"><span data-slate-string="true">缓存的本质</span></span></span></h2> <div 
class="se-2f411e15 " data-slate-type="paragraph" data-slate-object="block" data-key="2608"> 
<span data-slate-object="text" data-key="2609"><span data-slate-leaf="true" data-offset-key="2609:0" 
data-first-offset="true"><span data-slate-string="true">工作中，我们可能每周都会谈到缓存，我们见过各种各样的缓存实现，网上也有各种各样的解释和定义。可是，你觉得，到底什么是缓存呢？</span></span></span> 
</div> <div class="se-f8a28ae4 " data-slate-type="paragraph" data-slate-object="block" data-key="2610"> 
<span data-slate-object="text" data-key="2611"><span data-slate-leaf="true" data-offset-key="2611:0" 
data-first-offset="true"><span data-slate-string="true">我认为，缓存，简单说就是为了节约对原始资源重复获取的开销，而将结果数据副本存放起来以供获取的方式。</span></span></span> 
</div> <div class="se-04e4e261 " data-slate-type="paragraph" data-slate-object="block" data-key="2612"> 
<span data-slate-object="text" data-key="2613"><span data-slate-leaf="true" data-offset-key="2613:0" 
data-first-offset="true"><span class="se-7a0f0904" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">首先，缓存往往针对的是“资源”。</span></span></span></span><span data-slate-object="text" 
data-key="2614"><span data-slate-leaf="true" data-offset-key="2614:0" data-first-offset="true"><span 
data-slate-string="true">我们前面已经多次提到过，当某一个操作是“幂等”的和“安全”的（如果不记得的话请重看 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2615" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2616"><span data-slate-leaf="true" data-offset-key="2616:0" 
data-first-offset="true"><span data-slate-string="true">[第 04 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2617"><span data-slate-leaf="true" data-offset-key="2617:0" 
data-first-offset="true"><span data-slate-string="true">），那么这样的操作就可以被抽象为对“资源”的获取操作，那么它才可以考虑被缓存。有些操作不幂等、不安全，比如银行转账，改变了目标对象的状态，自然就难以被缓存。</span></span></span> 
</div> <div class="se-8a42db12 " data-slate-type="paragraph" data-slate-object="block" data-key="2618"> 
<span data-slate-object="text" data-key="2619"><span data-slate-leaf="true" data-offset-key="2619:0" 
data-first-offset="true"><span class="se-fec6305f" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">其次，缓存数据必须是“重复”获取的。</span></span></span></span><span data-slate-object="text" 
data-key="2620"><span data-slate-leaf="true" data-offset-key="2620:0" data-first-offset="true"><span 
data-slate-string="true">缓存能生效的本质是空间换时间。也就是说，将曾经出现过的数据以占据缓存空间的方式存放下来，在下一次的访问时直接返回，从而节约了通过原始流程访问数据的时间。有时候，某些资源的获取行为本身是幂等的和安全的，但实际应用上却不会“重复”获取，那么这样的资源是无法被设计成真正的缓存的。我们把一批数据获取中，通过缓存获得数据的次数，除以总的次数，得到的结果，叫做缓存的命中率。</span></span></span> 
</div> <div class="se-ec123def " data-slate-type="paragraph" data-slate-object="block" data-key="2621"> 
<span data-slate-object="text" data-key="2622"><span data-slate-leaf="true" data-offset-key="2622:0" 
data-first-offset="true"><span class="se-b735b646" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">再次，缓存是为了解决“开销”的问题。</span></span></span></span><span data-slate-object="text" 
data-key="2623"><span data-slate-leaf="true" data-offset-key="2623:0" data-first-offset="true"><span 
data-slate-string="true">这个开销，可不只有时间的开销。虽然我们在很多情况下讲的开销，确实都是在时间维度上的，但它还可以是 CPU、网络、I/O 等一切资源。例如我们有时在 
Web 服务中增加一层缓存，是为了避免了对原始资源获取的时候，对数据库资源调用的开销。</span></span></span> </div> <div class="se-47645ff3 
" data-slate-type="paragraph" data-slate-object="block" data-key="2624"> <span data-slate-object="text" 
data-key="2625"><span data-slate-leaf="true" data-offset-key="2625:0" data-first-offset="true"><span 
class="se-d998a21e" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">最后，缓存的存取其实不一定是“更快”的。</span></span></span></span><span 
data-slate-object="text" data-key="2626"><span data-slate-leaf="true" data-offset-key="2626:0" 
data-first-offset="true"><span data-slate-string="true">有些程序员朋友对缓存访问总有一个比原始资源访问“更快”的概念，但这是不确切的。那不快，还要缓存干什么呢？别急，请往下看。</span></span></span> 
</div> <div class="se-36200d8f " data-slate-type="paragraph" data-slate-object="block" data-key="2627"> 
<span data-slate-object="text" data-key="2628"><span data-slate-leaf="true" data-offset-key="2628:0" 
data-first-offset="true"><span data-slate-string="true">针对上面说的对“开销”的节约，你可以想象，每一种开销都能够成为缓存使用的动机。但其中，</span></span></span><span 
data-slate-object="text" data-key="2629"><span data-slate-leaf="true" data-offset-key="2629:0" 
data-first-offset="true"><span class="se-8f31fda1" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">有两个使用动机最为常见，一个是 latency，延迟</span></span></span></span><span data-slate-object="text" 
data-key="2630"><span data-slate-leaf="true" data-offset-key="2630:0" data-first-offset="true"><span 
data-slate-string="true">，即追求更低的延迟，这也是“更快”这个印象的由来；</span></span></span><span data-slate-object="text" 
data-key="2631"><span data-slate-leaf="true" data-offset-key="2631:0" data-first-offset="true"><span 
class="se-3a823442" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">另一个使用动机，是 
throughput，吞吐量</span></span></span></span><span data-slate-object="text" data-key="2632"><span 
data-slate-leaf="true" data-offset-key="2632:0" data-first-offset="true"><span data-slate-string="true">，即追求更高的吞吐量。这个事实存在，也很常见，但是却较少人提及，且看下面的例子。</span></span></span> 
</div> <div class="se-2e5750b6 " data-slate-type="paragraph" data-slate-object="block" data-key="2633"> 
<span data-slate-object="text" data-key="2634"><span data-slate-leaf="true" data-offset-key="2634:0" 
data-first-offset="true"><span data-slate-string="true">比如某个系统，数据在关系数据库中存放，获取速度很快，但是还在 S3 这个分布式文件系统上存放有数据副本，它的访问速度在该系统中要低于数据库的访问速度。某些请求量大的下游系统，会去 
S3 获取数据，这样就缓和了前一条提到的数据库“开销”问题，但数据获取的速度却降下来了。这里 S3 存放的数据，也可以成为很有意义的缓存，即便它的存取其实是更慢的。这种情况下，S3 
并没有改善延迟，但提供了额外的吞吐量，符合上面提到的第二个使用动机。</span></span></span> </div> <div class="se-741daccf " data-slate-type="paragraph" 
data-slate-object="block" data-key="2635"> <span data-slate-object="text" data-key="2636"><span 
data-slate-leaf="true" data-offset-key="2636:0" data-first-offset="true"><span data-slate-string="true">另外，即便我们平时谈论的缓存“更快”访问的场景，</span></span></span><span 
data-slate-object="text" data-key="2637"><span data-slate-leaf="true" data-offset-key="2637:0" 
data-first-offset="true"><span class="se-db354487" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">这个“快”也是相对而言的，在不同系统中同一对象会发生角色的变化。</span></span></span></span><span 
data-slate-object="text" data-key="2638"><span data-slate-leaf="true" data-offset-key="2638:0" 
data-first-offset="true"><span data-slate-string="true">例如，CPU 的多级高速缓存，就是内存访问的“缓存”；而内存虽然较 CPU 
存取较慢，但比磁盘快得多，因此它可以被用作磁盘的“缓存”介质。</span></span></span> </div> <h2 class="se-ede4ceec" data-slate-type="heading" 
data-slate-object="block" data-key="2639"><span data-slate-object="text" data-key="2640"><span 
data-slate-leaf="true" data-offset-key="2640:0" data-first-offset="true"><span data-slate-string="true">缓存无处不在</span></span></span></h2> 
<div class="se-fb927394 " data-slate-type="paragraph" data-slate-object="block" data-key="2641"> 
<span data-slate-object="text" data-key="2642"><span data-slate-leaf="true" data-offset-key="2642:0" 
data-first-offset="true"><span data-slate-string="true">曾经有一个很经典的问题，讲的大致是当浏览器地址栏中，输入 URL（比如极客时间 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2643" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2644"><span data-slate-leaf="true" data-offset-key="2644:0" 
data-first-offset="true"><span data-slate-string="true">https://time.geekbang.org/</span></span></span></a><span 
data-slate-object="text" data-key="2645"><span data-slate-leaf="true" data-offset-key="2645:0" 
data-first-offset="true"><span data-slate-string="true">）按下回车，之后的几秒钟时间里，到底发生了什么。我们今天还来谈论这件事情，但是从一个特别的角度——缓存的角度来审视它。</span></span></span> 
</div> <div class="se-1182a9ee " data-slate-type="paragraph" data-slate-object="block" data-key="2646"> 
<span data-slate-object="text" data-key="2647"><span data-slate-leaf="true" data-offset-key="2647:0" 
data-first-offset="true"><span data-slate-string="true">对于地址栏中输入的域名，浏览器需要搞清楚它代表的 IP 地址，才能进行访问。过程如下：</span></span></span> 
</div> <div class="se-c40323a4" data-slate-type="list" data-slate-object="block" data-key="2648"> 
<div class="se-c9102975 se-05b2581d" data-slate-type="list-line" data-slate-object="block" 
data-key="2649"> <span data-slate-object="text" data-key="2650"><span data-slate-leaf="true" 
data-offset-key="2650:0" data-first-offset="true"><span data-slate-string="true">它会先查询浏览器内部的“域名 
-IP”缓存，如果你曾经使用该浏览器访问过这个域名，这里很可能留有曾经的映射缓存；</span></span></span> </div> <div class="se-358b640c 
se-de8e50be" data-slate-type="list-line" data-slate-object="block" data-key="2651"> <span data-slate-object="text" 
data-key="2652"><span data-slate-leaf="true" data-offset-key="2652:0" data-first-offset="true"><span 
data-slate-string="true">如果没有，会查询操作系统是否存在这个缓存，例如在 Mac 中，我们可以通过修改 /etc/hosts 文件来自定义这个域名到 IP 
的映射缓存；</span></span></span> </div> <div class="se-8dc95ace se-86e5c67f" data-slate-type="list-line" 
data-slate-object="block" data-key="2653"> <span data-slate-object="text" data-key="2654"><span 
data-slate-leaf="true" data-offset-key="2654:0" data-first-offset="true"><span data-slate-string="true">如果还没有，就会查询域名服务器（DNS，Domain 
Name System），得到对应的 IP 和可缓存时间。</span></span></span> </div> </div> <div class="se-465bdec8 " 
data-slate-type="paragraph" data-slate-object="block" data-key="2655"> <span data-slate-object="text" 
data-key="2656"><span data-slate-leaf="true" data-offset-key="2656:0" data-first-offset="true"><span 
data-slate-string="true">Linux 或 Mac 系统中，你可以使用 dig 命令来查询：</span></span></span> </div> <div 
class="se-0e56152a se-3fb9c408" data-slate-type="pre" data-slate-object="block" data-key="2657"> 
<div class="se-243158b5 se-19cef6ed"> <span></span> </div> <div class="se-6184bda6"> <div class="se-edbe1cc0 
se-7307479d" data-code-line-number="1"></div> </div> <div class="se-cf2212e3 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="2658"> <span data-slate-object="text" 
data-key="2659"><span data-slate-leaf="true" data-offset-key="2659:0" data-first-offset="true"><span 
data-slate-string="true">dig time.geekbang.org</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-ec2f283e 
" data-slate-type="paragraph" data-slate-object="block" data-key="2660"> <span data-slate-object="text" 
data-key="2661"><span data-slate-leaf="true" data-offset-key="2661:0" data-first-offset="true"><span 
data-slate-string="true">得到的信息中包含：</span></span></span> </div> <div class="se-dab99680 se-f96d14cd" 
data-slate-type="pre" data-slate-object="block" data-key="2662"> <div class="se-93b0306c se-cbef1261"> 
<span></span> </div> <div class="se-5f1f85e5"> <div class="se-b27e9a49 se-2883fa85" data-code-line-number="1"></div> 
</div> <div class="se-48c6cab4 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="2663"> <span data-slate-object="text" data-key="2664"><span 
data-slate-leaf="true" data-offset-key="2664:0" data-first-offset="true"><span data-slate-string="true">time.geekbang.org. 
600 IN A 39.106.233.176</span></span></span> </div> <div class="ps__rail-x" style="left: 0px; 
bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-4566f57f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2665"> <span data-slate-object="text" data-key="2666"><span 
data-slate-leaf="true" data-offset-key="2666:0" data-first-offset="true"><span data-slate-string="true">这是说这个 
IP 地址就是极客时间对应的地址，可以被缓存 600 秒。</span></span></span> </div> <div class="se-5b2b1c12 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2667"> <span data-slate-object="text" data-key="2668"><span 
data-slate-leaf="true" data-offset-key="2668:0" data-first-offset="true"><span data-slate-string="true">当请求抵达服务端，在</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2669" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2670"><span data-slate-leaf="true" data-offset-key="2670:0" 
data-first-offset="true"><span data-slate-string="true">反向代理</span></span></span></a><span 
data-slate-object="text" data-key="2671"><span data-slate-leaf="true" data-offset-key="2671:0" 
data-first-offset="true"><span data-slate-string="true">中也是可以进行缓存配置的，比如我们曾经在 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2672" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2673"><span data-slate-leaf="true" data-offset-key="2673:0" 
data-first-offset="true"><span data-slate-string="true">[第 09 讲]</span></span></span></a><span 
data-slate-object="text" data-key="2674"><span data-slate-leaf="true" data-offset-key="2674:0" 
data-first-offset="true"><span data-slate-string="true"> 中介绍过服务端包含 SSI 的方式来加载母页面上的一些静态内容。</span></span></span> 
</div> <div class="se-000882c5 " data-slate-type="paragraph" data-slate-object="block" data-key="2675"> 
<span data-slate-object="text" data-key="2676"><span data-slate-leaf="true" data-offset-key="2676:0" 
data-first-offset="true"><span data-slate-string="true">接着，请求终于抵达服务端的代码逻辑了，对于一个采用 MVC 架构的应用来说，MVC 
的各层都是可以应用缓存模式的。</span></span></span> </div> <div class="se-952bfef5" data-slate-type="list" 
data-slate-object="block" data-key="2677"> <div class="se-feb1053e se-be5f5cf6" data-slate-type="list-line" 
data-slate-object="block" data-key="2678"> <span data-slate-object="text" data-key="2679"><span 
data-slate-leaf="true" data-offset-key="2679:0" data-first-offset="true"><span data-slate-string="true">对于 
Controller 层来说，我们在 </span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2680" class="se-575a6467 se-198d4f97"><span data-slate-object="text" data-key="2681"><span 
data-slate-leaf="true" data-offset-key="2681:0" data-first-offset="true"><span data-slate-string="true">[第 
12 讲]</span></span></span></a><span data-slate-object="text" data-key="2682"><span data-slate-leaf="true" 
data-offset-key="2682:0" data-first-offset="true"><span data-slate-string="true"> 中曾经介绍过拦截过滤器，而拦截过滤器中，我们就是可以配置缓存来过滤服务的，即满足某些要求的可缓存请求，我们可以直接通过过滤器返回缓存结果，而不执行后面的逻辑，我们在下一讲会学到具体怎样配置。</span></span></span> 
</div> <div class="se-7bfbb626 se-f1274ec4" data-slate-type="list-line" data-slate-object="block" 
data-key="2683"> <span data-slate-object="text" data-key="2684"><span data-slate-leaf="true" 
data-offset-key="2684:0" data-first-offset="true"><span data-slate-string="true">对于 Model 层来说，几乎所有的数据库 
ORM 框架都提供了缓存能力，对于贫血模型的系统，在 DAO 上方的 Service 层基于其暴露的 API 应用缓存，也是一种非常常见的形式。</span></span></span> 
</div> <div class="se-9a66b5ba se-9cfd26f8" data-slate-type="list-line" data-slate-object="block" 
data-key="2685"> <span data-slate-object="text" data-key="2686"><span data-slate-leaf="true" 
data-offset-key="2686:0" data-first-offset="true"><span data-slate-string="true">对于 View 层，很多页面模板都支持缓存标签，页面中的部分内容，不需要每次都执行渲染操作（这个开销很可能不止渲染本身，还包括需要调用模型层的接口而造成显著的系统开销），而可以直接从缓存中获取渲染后的数据并返回。</span></span></span> 
</div> </div> <div class="se-ca07f8f8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2687"> <span data-slate-object="text" data-key="2688"><span data-slate-leaf="true" 
data-offset-key="2688:0" data-first-offset="true"><span data-slate-string="true">当母页面 HTML 
返回了浏览器，还需要加载页面上需要的大量资源，包括 CSS、JavaScript、图像等等，都是可以通过读取浏览器内的缓存，而避免一个新的 HTTP 请求的开销的。通过服务端设置返回 
HTTP 响应的 Cache-Control 头，就可以很容易做到这一点。例如：</span></span></span> </div> <div class="se-2ca5c76a 
se-c2c4fc87" data-slate-type="pre" data-slate-object="block" data-key="2689" data-code-language="sql"> 
<div class="se-dfea76ad se-fe9bb90c"> <span></span> </div> <div class="se-55149b4f"> <div class="se-d973647e 
se-6c55bdbe" data-code-line-number="1"></div> </div> <div class="se-31c7b7e2 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="2690"> <span data-slate-object="text" 
data-key="2691"><span data-slate-leaf="true" data-offset-key="2691:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6332694420" 
data-annotation-type="annotation"><span data-slate-string="true">Cache</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:1"><span data-slate-string="true">-Control: </span></span><span 
data-slate-leaf="true" data-offset-key="2691:2"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1002504279" data-annotation-type="annotation"><span data-slate-string="true">public</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:3"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="2691:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2145091004" data-annotation-type="annotation"><span data-slate-string="true">max</span></span></span><span 
data-slate-leaf="true" data-offset-key="2691:5"><span data-slate-string="true">-age=</span></span><span 
data-slate-leaf="true" data-offset-key="2691:6"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7207250449" data-annotation-type="annotation"><span data-slate-string="true">84600</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-232e0185 " data-slate-type="paragraph" data-slate-object="block" data-key="2692"> 
<span data-slate-object="text" data-key="2693"><span data-slate-leaf="true" data-offset-key="2693:0" 
data-first-offset="true"><span data-slate-string="true">上面这个请求头就是说，这个响应中的数据是“公有”的，可以被任意级节点（包括代理节点等等）缓存最多 
84600 秒。</span></span></span> </div> <div class="se-da21cc7d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2694"> <span data-slate-object="text" data-key="2695"><span 
data-slate-leaf="true" data-offset-key="2695:0" data-first-offset="true"><span data-slate-string="true">即便某资源无法被缓存，必须发起单独的 
HTTP 请求去获取这样的资源，也可以通过 CDN 的方式，去较近的资源服务器获取，而这样的资源服务器，对于分布式网络远端的中心节点来说，就是它的缓存。</span></span></span> 
</div> <div class="se-3962fb37 " data-slate-type="paragraph" data-slate-object="block" data-key="2696"> 
<span data-slate-object="text" data-key="2697"><span data-slate-leaf="true" data-offset-key="2697:0" 
data-first-offset="true"><span data-slate-string="true">你看，对于这样的一个过程，居然有那么多的缓存在默默地工作，为你的网上冲浪保驾护航。如果继续往细了说，这个过程中你会看到更多的缓存技术应用，但我们就此打住吧，这些例子已经足够说明缓存应用的广泛度和重要性了。</span></span></span> 
</div> <h2 class="se-f87ea07c" data-slate-type="heading" data-slate-object="block" data-key="2698"><span 
data-slate-object="text" data-key="2699"><span data-slate-leaf="true" data-offset-key="2699:0" 
data-first-offset="true"><span data-slate-string="true">缓存应用模式</span></span></span></h2> <div 
class="se-4c7d25d5 " data-slate-type="paragraph" data-slate-object="block" data-key="2700"> 
<span data-slate-object="text" data-key="2701"><span data-slate-leaf="true" data-offset-key="2701:0" 
data-first-offset="true"><span data-slate-string="true">在 Web 应用中，缓存的应用是有一些模式的，而我们可以归纳出这些模式以比较的方式来学习，了解其优劣，从而在实际业务中可以合理地使用它们。</span></span></span> 
</div> <h3 class="se-e7e3f53f" data-slate-type="heading" data-slate-object="block" data-key="2702"><span 
data-slate-object="text" data-key="2703"><span data-slate-leaf="true" data-offset-key="2703:0" 
data-first-offset="true"><span data-slate-string="true">1. Cache-Aside</span></span></span></h3> 
<div class="se-31cfb799 " data-slate-type="paragraph" data-slate-object="block" data-key="2704"> 
<span data-slate-object="text" data-key="2705"><span data-slate-leaf="true" data-offset-key="2705:0" 
data-first-offset="true"><span data-slate-string="true">这是最常见的一种缓存应用模式，整个过程也很好理解。</span></span></span> 
</div> <div class="se-10bc37ee " data-slate-type="paragraph" data-slate-object="block" data-key="2706"> 
<span data-slate-object="text" data-key="2707"><span data-slate-leaf="true" data-offset-key="2707:0" 
data-first-offset="true"><span data-slate-string="true">数据获取策略：</span></span></span> </div> 
<div class="se-a8610046" data-slate-type="list" data-slate-object="block" data-key="2708"> 
<div class="se-b5c6782c se-5f90e8e4" data-slate-type="list-line" data-slate-object="block" 
data-key="2709"> <span data-slate-object="text" data-key="2710"><span data-slate-leaf="true" 
data-offset-key="2710:0" data-first-offset="true"><span data-slate-string="true">应用先去查看缓存是否有所需数据；</span></span></span> 
</div> <div class="se-f1970c18 se-5828fb7b" data-slate-type="list-line" data-slate-object="block" 
data-key="2711"> <span data-slate-object="text" data-key="2712"><span data-slate-leaf="true" 
data-offset-key="2712:0" data-first-offset="true"><span data-slate-string="true">如果有，应用直接将缓存数据返回给请求方；</span></span></span> 
</div> <div class="se-60383f7d se-d6294ea2" data-slate-type="list-line" data-slate-object="block" 
data-key="2713"> <span data-slate-object="text" data-key="2714"><span data-slate-leaf="true" 
data-offset-key="2714:0" data-first-offset="true"><span data-slate-string="true">如果没有，应用执行原始逻辑，例如查询数据库得到结果数据；</span></span></span> 
</div> <div class="se-cd2503b2 se-cc42a1fc" data-slate-type="list-line" data-slate-object="block" 
data-key="2715"> <span data-slate-object="text" data-key="2716"><span data-slate-leaf="true" 
data-offset-key="2716:0" data-first-offset="true"><span data-slate-string="true">应用将结果数据写入缓存。</span></span></span> 
</div> </div> <div class="se-6cb014ff" data-slate-type="image" data-slate-object="block" data-key="2717"> 
<img class="se-b76b31d3" src="https://static001.geekbang.org/resource/image/6c/f2/6c2bb8131481c5b931275f734a393bf2.png"> 
</div> <div class="se-12ec91f7 " data-slate-type="paragraph" data-slate-object="block" data-key="2718"> 
<span data-slate-object="text" data-key="2719"><span data-slate-leaf="true" data-offset-key="2719:0" 
data-first-offset="true"><span data-slate-string="true">我们见到的多数缓存，例如前面提到的拦截过滤器中的缓存，基本上都是按照这种方式来配置和使用的。</span></span></span> 
</div> <div class="se-a60c98db " data-slate-type="paragraph" data-slate-object="block" data-key="2720"> 
<span data-slate-object="text" data-key="2721"><span data-slate-leaf="true" data-offset-key="2721:0" 
data-first-offset="true"><span data-slate-string="true">数据读取的异常情形：</span></span></span> </div> 
<div class="se-01a1cdfb" data-slate-type="list" data-slate-object="block" data-key="2722"> 
<div class="se-209366b1 se-1d5cfce5" data-slate-type="list-line" data-slate-object="block" 
data-key="2723"> <span data-slate-object="text" data-key="2724"><span data-slate-leaf="true" 
data-offset-key="2724:0" data-first-offset="true"><span data-slate-string="true">如果数据库读取异常，直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-1d5add41 se-40e38970" data-slate-type="list-line" data-slate-object="block" 
data-key="2725"> <span data-slate-object="text" data-key="2726"><span data-slate-leaf="true" 
data-offset-key="2726:0" data-first-offset="true"><span data-slate-string="true">如果数据库读取成功，但是缓存写入失败，那么下一次同一数据的访问还将继续尝试写入，因此这时也没有不一致的情况发生。</span></span></span> 
</div> </div> <div class="se-46d4bdbf " data-slate-type="paragraph" data-slate-object="block" 
data-key="2727"> <span data-slate-object="text" data-key="2728"><span data-slate-leaf="true" 
data-offset-key="2728:0" data-first-offset="true"><span data-slate-string="true">可见，这两种异常情形都是“安全”的。</span></span></span> 
</div> <div class="se-263db476 " data-slate-type="paragraph" data-slate-object="block" data-key="2729"> 
<span data-slate-object="text" data-key="2730"><span data-slate-leaf="true" data-offset-key="2730:0" 
data-first-offset="true"><span data-slate-string="true">数据更新策略：</span></span></span> </div> 
<div class="se-355cf1a2" data-slate-type="list" data-slate-object="block" data-key="2731"> 
<div class="se-ccdaca8e se-3aaa2b51" data-slate-type="list-line" data-slate-object="block" 
data-key="2732"> <span data-slate-object="text" data-key="2733"><span data-slate-leaf="true" 
data-offset-key="2733:0" data-first-offset="true"><span data-slate-string="true">应用先更新数据库；</span></span></span> 
</div> <div class="se-1d102954 se-aba10489" data-slate-type="list-line" data-slate-object="block" 
data-key="2734"> <span data-slate-object="text" data-key="2735"><span data-slate-leaf="true" 
data-offset-key="2735:0" data-first-offset="true"><span data-slate-string="true">应用再令缓存失效。</span></span></span> 
</div> </div> <div class="se-3904f7a8 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2736"> <span data-slate-object="text" data-key="2737"><span data-slate-leaf="true" 
data-offset-key="2737:0" data-first-offset="true"><span data-slate-string="true">这里，避免踩坑的关键点有两个：</span></span></span> 
</div> <div class="se-1440d17d " data-slate-type="paragraph" data-slate-object="block" data-key="2738"> 
<span data-slate-object="text" data-key="2739"><span data-slate-leaf="true" data-offset-key="2739:0" 
data-first-offset="true"><span data-slate-string="true">数据更新的这个策略，通常来说，最重要的一点是</span></span></span><span 
data-slate-object="text" data-key="2740"><span data-slate-leaf="true" data-offset-key="2740:0" 
data-first-offset="true"><span class="se-b6761799" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">必须先更新数据库，而不是先令缓存失效</span></span></span></span><span data-slate-object="text" 
data-key="2741"><span data-slate-leaf="true" data-offset-key="2741:0" data-first-offset="true"><span 
data-slate-string="true">，即这个顺序不能倒过来。原因在于，如果先令缓存失效，那么在数据库更新成功前，如果有另外一个请求访问了缓存，发现缓存数据库已经失效，于是就会按照数据获取策略，从数据库中使用这个已经陈旧的数值去更新缓存中的数据，这就导致这个过期的数据会长期存在于缓存中，最终导致数据不一致的严重问题。</span></span></span> 
</div> <div class="se-edb82a60 " data-slate-type="paragraph" data-slate-object="block" data-key="2742"> 
<span data-slate-object="text" data-key="2743"><span data-slate-leaf="true" data-offset-key="2743:0" 
data-first-offset="true"><span data-slate-string="true">这里我画了一张图，可以帮你理解，如果先令缓存失效，再更新数据库，为什么会导致问题：</span></span></span> 
</div> <div class="se-7d39f004" data-slate-type="image" data-slate-object="block" data-key="2744"> 
<img class="se-d26fcf57" src="https://static001.geekbang.org/resource/image/83/b8/837a288bc5cb4ad7c478a37dcce6d4b8.png"> 
</div> <div class="se-974fd5a2 " data-slate-type="paragraph" data-slate-object="block" data-key="2745"> 
<span data-slate-object="text" data-key="2746"><span data-slate-leaf="true" data-offset-key="2746:0" 
data-first-offset="true"><span data-slate-string="true">第二个关键点是，</span></span></span><span 
data-slate-object="text" data-key="2747"><span data-slate-leaf="true" data-offset-key="2747:0" 
data-first-offset="true"><span class="se-fabfffbe" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">数据库更新以后，需要令缓存失效，而不是更新缓存为数据库的最新值。</span></span></span></span><span 
data-slate-object="text" data-key="2748"><span data-slate-leaf="true" data-offset-key="2748:0" 
data-first-offset="true"><span data-slate-string="true">为什么呢？你想一下，如果两个几乎同时发出的请求分别要更新数据库中的值为 
A 和 B，如果结果是 B 的更新晚于 A，那么数据库中的最终值是 B。但是，如果在数据库更新后去更新缓存，而不是令缓存失效，那么缓存中的数据就有可能是 A，而不是 B。因为数据库虽然是“更新为 
A”在“更新为 B”之前发生，但如果不做特殊的跨存储系统的事务控制，缓存的更新顺序就未必会遵从“A 先于 B”这个规则，这就会导致这个缓存中的数据会是一个长期错误的值 A。</span></span></span> 
</div> <div class="se-42a20f1e " data-slate-type="paragraph" data-slate-object="block" data-key="2749"> 
<span data-slate-object="text" data-key="2750"><span data-slate-leaf="true" data-offset-key="2750:0" 
data-first-offset="true"><span data-slate-string="true">这张图可以帮你理解，如果是更新缓存为数据库最新值，而不是令缓存失效，为什么会产生问题：</span></span></span> 
</div> <div class="se-afc08d01" data-slate-type="image" data-slate-object="block" data-key="2751"> 
<img class="se-5477cdcc" src="https://static001.geekbang.org/resource/image/59/fb/597af9e088dccf6d1d1c3718cdb708fb.jpeg"> 
</div> <div class="se-e2ce3296 " data-slate-type="paragraph" data-slate-object="block" data-key="2752"> 
<span data-slate-object="text" data-key="2753"><span data-slate-leaf="true" data-offset-key="2753:0" 
data-first-offset="true"><span data-slate-string="true">如果是令缓存失效，这个问题就消失了。因为 B 是后写入数据库的，那么在 
B 写入数据库以后，无论是写入 B 的请求让缓存失效，还是并发的竞争情形下写入 A 的请求让缓存失效，缓存反正都是失效了。那么下一次的访问就会从数据库中取得最新的值，并写入缓存，这个值就一定是 
B。</span></span></span> </div> <div class="se-3b03986e " data-slate-type="paragraph" data-slate-object="block" 
data-key="2754"> <span data-slate-object="text" data-key="2755"><span data-slate-leaf="true" 
data-offset-key="2755:0" data-first-offset="true"><span data-slate-string="true">这两个关键点非常重要，而且不当使用引起的错误还非常常见，希望你可以完全理解它们。在我参与过的项目中，在这两个关键点上出错的系统我都见过（在这两点做到的情况下，其实还有一个理论上极小概率的情况下依然会出现数据错误，但是这个概率如此之小，以至于一般的系统设计当中都会直接将它忽略，但是你依然可以考虑一下它是什么）。</span></span></span> 
</div> <div class="se-531c636e " data-slate-type="paragraph" data-slate-object="block" data-key="2756"> 
<span data-slate-object="text" data-key="2757"><span data-slate-leaf="true" data-offset-key="2757:0" 
data-first-offset="true"><span data-slate-string="true">数据更新的异常情形：</span></span></span> </div> 
<div class="se-99b28bc6" data-slate-type="list" data-slate-object="block" data-key="2758"> 
<div class="se-60581faf se-f13b2e54" data-slate-type="list-line" data-slate-object="block" 
data-key="2759"> <span data-slate-object="text" data-key="2760"><span data-slate-leaf="true" 
data-offset-key="2760:0" data-first-offset="true"><span data-slate-string="true">如果数据库操作失败，那么直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-fe84609d se-9ba934b1" data-slate-type="list-line" data-slate-object="block" 
data-key="2761"> <span data-slate-object="text" data-key="2762"><span data-slate-leaf="true" 
data-offset-key="2762:0" data-first-offset="true"><span data-slate-string="true">如果数据库操作成功，但是缓存失效操作失败，这个问题很难发生，但一旦发生就会非常麻烦，缓存中的数据是过期数据，需要特殊处理来纠正。</span></span></span> 
</div> </div> <h3 class="se-51726fca" data-slate-type="heading" data-slate-object="block" data-key="2763"><span 
data-slate-object="text" data-key="2764"><span data-slate-leaf="true" data-offset-key="2764:0" 
data-first-offset="true"><span data-slate-string="true">2. Read-Through</span></span></span></h3> 
<div class="se-02be8885 " data-slate-type="paragraph" data-slate-object="block" data-key="2765"> 
<span data-slate-object="text" data-key="2766"><span data-slate-leaf="true" data-offset-key="2766:0" 
data-first-offset="true"><span data-slate-string="true">这种情况下缓存系统彻底变成了它身后数据库的代理，二者成为了一个整体，应用的请求访问只能看到缓存的返回数据，而数据库系统对它是透明的。</span></span></span> 
</div> <div class="se-294bb6c5" data-slate-type="image" data-slate-object="block" data-key="2767"> 
<img class="se-cc6174aa" src="https://static001.geekbang.org/resource/image/12/fa/124961b9e43e50f2a833b8563f47f0fa.png"> 
</div> <div class="se-f57c89d7 " data-slate-type="paragraph" data-slate-object="block" data-key="2768"> 
<span data-slate-object="text" data-key="2769"><span data-slate-leaf="true" data-offset-key="2769:0" 
data-first-offset="true"><span data-slate-string="true">有的框架提供的内置缓存，例如一些 ORM 框架，就是按这种 Read-Through 
和 Write-Through 来实现的。</span></span></span> </div> <div class="se-eebb99b7 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2770"> <span data-slate-object="text" data-key="2771"><span 
data-slate-leaf="true" data-offset-key="2771:0" data-first-offset="true"><span data-slate-string="true">数据获取策略：</span></span></span> 
</div> <div class="se-fcb4cc41" data-slate-type="list" data-slate-object="block" data-key="2772"> 
<div class="se-49f68ed1 se-8e7dee6e" data-slate-type="list-line" data-slate-object="block" 
data-key="2773"> <span data-slate-object="text" data-key="2774"><span data-slate-leaf="true" 
data-offset-key="2774:0" data-first-offset="true"><span data-slate-string="true">应用向缓存要求数据；</span></span></span> 
</div> <div class="se-9e7e0bd4 se-e10ea3cd" data-slate-type="list-line" data-slate-object="block" 
data-key="2775"> <span data-slate-object="text" data-key="2776"><span data-slate-leaf="true" 
data-offset-key="2776:0" data-first-offset="true"><span data-slate-string="true">如果缓存中有数据，返回给应用，应用再将数据返回；</span></span></span> 
</div> <div class="se-408ad004 se-2fb956a7" data-slate-type="list-line" data-slate-object="block" 
data-key="2777"> <span data-slate-object="text" data-key="2778"><span data-slate-leaf="true" 
data-offset-key="2778:0" data-first-offset="true"><span data-slate-string="true">如果没有，缓存查询数据库，并将结果写入自己；</span></span></span> 
</div> <div class="se-4c6b613b se-79c7387f" data-slate-type="list-line" data-slate-object="block" 
data-key="2779"> <span data-slate-object="text" data-key="2780"><span data-slate-leaf="true" 
data-offset-key="2780:0" data-first-offset="true"><span data-slate-string="true">缓存将数据返回给应用。</span></span></span> 
</div> </div> <div class="se-c697c3b3 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2781"> <span data-slate-object="text" data-key="2782"><span data-slate-leaf="true" 
data-offset-key="2782:0" data-first-offset="true"><span data-slate-string="true">数据读取异常的情况分析和 
Cache-Aside 类似，没有数据不一致的情况发生。</span></span></span> </div> <h3 class="se-a79ec822" data-slate-type="heading" 
data-slate-object="block" data-key="2783"><span data-slate-object="text" data-key="2784"><span 
data-slate-leaf="true" data-offset-key="2784:0" data-first-offset="true"><span data-slate-string="true">3. 
Write-Through</span></span></span></h3> <div class="se-a34a5b28 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2785"> <span data-slate-object="text" data-key="2786"><span 
data-slate-leaf="true" data-offset-key="2786:0" data-first-offset="true"><span data-slate-string="true">和 
Read-Through 类似，图示同上，但 Write-Through 是用来处理数据更新的场景。</span></span></span> </div> <div class="se-7cd62dc8 
" data-slate-type="paragraph" data-slate-object="block" data-key="2787"> <span data-slate-object="text" 
data-key="2788"><span data-slate-leaf="true" data-offset-key="2788:0" data-first-offset="true"><span 
data-slate-string="true">数据更新策略：</span></span></span> </div> <div class="se-978b8a36" data-slate-type="list" 
data-slate-object="block" data-key="2789"> <div class="se-bc869365 se-df2e364f" data-slate-type="list-line" 
data-slate-object="block" data-key="2790"> <span data-slate-object="text" data-key="2791"><span 
data-slate-leaf="true" data-offset-key="2791:0" data-first-offset="true"><span data-slate-string="true">应用要求缓存更新数据；</span></span></span> 
</div> <div class="se-939d2b63 se-5f5e5b14" data-slate-type="list-line" data-slate-object="block" 
data-key="2792"> <span data-slate-object="text" data-key="2793"><span data-slate-leaf="true" 
data-offset-key="2793:0" data-first-offset="true"><span data-slate-string="true">如果缓存中有对应数据，先更新该数据；</span></span></span> 
</div> <div class="se-12b1ae3d se-012a245f" data-slate-type="list-line" data-slate-object="block" 
data-key="2794"> <span data-slate-object="text" data-key="2795"><span data-slate-leaf="true" 
data-offset-key="2795:0" data-first-offset="true"><span data-slate-string="true">缓存再更新数据库中的数据；</span></span></span> 
</div> <div class="se-60718129 se-eac837dd" data-slate-type="list-line" data-slate-object="block" 
data-key="2796"> <span data-slate-object="text" data-key="2797"><span data-slate-leaf="true" 
data-offset-key="2797:0" data-first-offset="true"><span data-slate-string="true">缓存告知应用更新完成。</span></span></span> 
</div> </div> <div class="se-dbbef951 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2798"> <span data-slate-object="text" data-key="2799"><span data-slate-leaf="true" 
data-offset-key="2799:0" data-first-offset="true"><span data-slate-string="true">这里的一个关键点是，</span></span></span><span 
data-slate-object="text" data-key="2800"><span data-slate-leaf="true" data-offset-key="2800:0" 
data-first-offset="true"><span class="se-c05d78f0" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">缓存系统需要自己内部保证并发场景下，缓存更新的顺序要和数据库更新的顺序一致。</span></span></span></span><span 
data-slate-object="text" data-key="2801"><span data-slate-leaf="true" data-offset-key="2801:0" 
data-first-offset="true"><span data-slate-string="true">比如说，两个请求分别要把数据更新为 A 和 B，那么如果 B 后写入数据库，缓存中最后的结果也必须是 
B。这个一致性可以用乐观锁等方式来保证。</span></span></span> </div> <div class="se-7048be6d " data-slate-type="paragraph" 
data-slate-object="block" data-key="2802"> <span data-slate-object="text" data-key="2803"><span 
data-slate-leaf="true" data-offset-key="2803:0" data-first-offset="true"><span data-slate-string="true">数据更新的异常情形：</span></span></span> 
</div> <div class="se-11a831df" data-slate-type="list" data-slate-object="block" data-key="2804"> 
<div class="se-ddc6bedb se-15589535" data-slate-type="list-line" data-slate-object="block" 
data-key="2805"> <span data-slate-object="text" data-key="2806"><span data-slate-leaf="true" 
data-offset-key="2806:0" data-first-offset="true"><span data-slate-string="true">如果缓存更新失败，直接返回失败，没有数据不一致的情况发生；</span></span></span> 
</div> <div class="se-746fa857 se-471b70ba" data-slate-type="list-line" data-slate-object="block" 
data-key="2807"> <span data-slate-object="text" data-key="2808"><span data-slate-leaf="true" 
data-offset-key="2808:0" data-first-offset="true"><span data-slate-string="true">如果缓存更新成功，数据库更新失败，这种情况下需要回滚缓存中的更新，或者干脆从缓存中删除该数据。</span></span></span> 
</div> </div> <div class="se-2cb3d8e0 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2809"> <span data-slate-object="text" data-key="2810"><span data-slate-leaf="true" 
data-offset-key="2810:0" data-first-offset="true"><span data-slate-string="true">还有一种和 Write-Through 
非常类似的数据更新模式，叫做 Write-Around。它们的区别在于 Write-Through 需要更新缓存和数据库，而 Write-Around 只更新数据库（缓存的更新完全留给读操作）。</span></span></span> 
</div> <h3 class="se-7b4aeb9e" data-slate-type="heading" data-slate-object="block" data-key="2811"><span 
data-slate-object="text" data-key="2812"><span data-slate-leaf="true" data-offset-key="2812:0" 
data-first-offset="true"><span data-slate-string="true">4. Write-Back</span></span></span></h3> 
<div class="se-e7c8e0f2 " data-slate-type="paragraph" data-slate-object="block" data-key="2813"> 
<span data-slate-object="text" data-key="2814"><span data-slate-leaf="true" data-offset-key="2814:0" 
data-first-offset="true"><span data-slate-string="true">对于 Write-Back 模式来说，更新操作发生的时候，数据写入缓存之后就立即返回了，而数据库的更新异步完成。这种模式在一些分布式系统中很常见。</span></span></span> 
</div> <div class="se-a976f31d " data-slate-type="paragraph" data-slate-object="block" data-key="2815"> 
<span data-slate-object="text" data-key="2816"><span data-slate-leaf="true" data-offset-key="2816:0" 
data-first-offset="true"><span data-slate-string="true">这种方式带来的最大好处是拥有最大的请求吞吐量，并且操作非常迅速，数据库的更新甚至可以批量进行，因而拥有杰出的更新效率以及稳定的速率，这个缓存就像是一个写入的缓冲，可以平滑访问尖峰。另外，对于存在数据库短时间无法访问的问题，它也能够很好地处理。</span></span></span> 
</div> <div class="se-3a477ec9 " data-slate-type="paragraph" data-slate-object="block" data-key="2817"> 
<span data-slate-object="text" data-key="2818"><span data-slate-leaf="true" data-offset-key="2818:0" 
data-first-offset="true"><span data-slate-string="true">但是它的弊端也很明显，异步更新一定会存在着不可避免的一致性问题，并且也存在着数据丢失的风险（数据写入缓存但还未入库时，如果宕机了，那么这些数据就丢失了）。</span></span></span> 
</div> <h2 class="se-c111990a" data-slate-type="heading" data-slate-object="block" data-key="2819"><span 
data-slate-object="text" data-key="2820"><span data-slate-leaf="true" data-offset-key="2820:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-e4459076 " data-slate-type="paragraph" data-slate-object="block" data-key="2821"> 
<span data-slate-object="text" data-key="2822"><span data-slate-leaf="true" data-offset-key="2822:0" 
data-first-offset="true"><span data-slate-string="true">今天我们学习了缓存的本质、应用，仔细比较了几种常见的应用模式。在理解缓存本质的基础上，Cache-Aside 
模式是缓存应用模式中的重点，在我们实际系统的设计和实现中，它是最为常用的那一个。希望这些缓存的知识可以帮到你！</span></span></span> </div> <div class="se-4a6db58d 
" data-slate-type="paragraph" data-slate-object="block" data-key="2823"> <span data-slate-object="text" 
data-key="2824"><span data-slate-leaf="true" data-offset-key="2824:0" data-first-offset="true"><span 
data-slate-string="true">现在我来提两个问题，检验一下今天的学习成果吧。</span></span></span> </div> <div class="se-4429ab03" 
data-slate-type="list" data-slate-object="block" data-key="2825"> <div class="se-05418a49 se-3ec60db5" 
data-slate-type="list-line" data-slate-object="block" data-key="2826"> <span data-slate-object="text" 
data-key="2827"><span data-slate-leaf="true" data-offset-key="2827:0" data-first-offset="true"><span 
data-slate-string="true">在你参与的项目中，是否应用到了缓存，属于哪一个应用模式，能否举例说明呢？</span></span></span> </div> <div 
class="se-5bb04ebc se-8dcf7930" data-slate-type="list-line" data-slate-object="block" data-key="2828"> 
<span data-slate-object="text" data-key="2829"><span data-slate-leaf="true" data-offset-key="2829:0" 
data-first-offset="true"><span data-slate-string="true">这一讲提到了几种缓存应用模式，你能否说出 Cache-Aside 和 
Write-Back 这两种模式各有什么优劣，它们都适应怎样的实际场景呢？</span></span></span> </div> </div> <div class="se-ba6a9622 
" data-slate-type="paragraph" data-slate-object="block" data-key="2830"> <span data-slate-object="text" 
data-key="2831"><span data-slate-leaf="true" data-offset-key="2831:0" data-first-offset="true"><span 
data-slate-string="true">看到最后，你可能会想，不是说双刃剑吗？杀敌的那一刃已经介绍了，可自伤的那一刃呢？别急，我们下一讲就会讲到缓存使用中的坑，以期有效避免缓存使用过程中的问题。今天的内容就到这里，欢迎你和我讨论。</span></span></span> 
</div> <h2 class="se-a6de7401" data-slate-type="heading" data-slate-object="block" data-key="2832"><span 
data-slate-object="text" data-key="2833"><span data-slate-leaf="true" data-offset-key="2833:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-97cdc5c5" data-slate-type="list" data-slate-object="block" data-key="2834"> <div 
class="se-bbe835b8 se-d8663bea" data-slate-type="list-line" data-slate-object="block" data-key="2835"> 
<span data-slate-object="text" data-key="2836"><span data-slate-leaf="true" data-offset-key="2836:0" 
data-first-offset="true"><span data-slate-string="true">文中提到使用 dig 命令来查询 DNS 返回的 IP 地址，想了解更完整的原理，可以参阅 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2837" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2838"><span data-slate-leaf="true" data-offset-key="2838:0" 
data-first-offset="true"><span data-slate-string="true">DNS 原理入门</span></span></span></a><span 
data-slate-object="text" data-key="2839"><span data-slate-leaf="true" data-offset-key="2839:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-4472f849 se-a68d2b10" data-slate-type="list-line" data-slate-object="block" data-key="2840"> 
<span data-slate-object="text" data-key="2841"><span data-slate-leaf="true" data-offset-key="2841:0" 
data-first-offset="true"><span data-slate-string="true">文中提到了 HTTP 响应中的缓存设置头，请参阅 MDN 的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2842" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2843"><span data-slate-leaf="true" data-offset-key="2843:0" 
data-first-offset="true"><span data-slate-string="true">HTTP 缓存</span></span></span></a><span 
data-slate-object="text" data-key="2844"><span data-slate-leaf="true" data-offset-key="2844:0" 
data-first-offset="true"><span data-slate-string="true">一节以获得更为细致的讲解。</span></span></span> 
</div> <div class="se-1267d067 se-b4e396aa" data-slate-type="list-line" data-slate-object="block" 
data-key="2845"> <span data-slate-object="text" data-key="2846"><span data-slate-leaf="true" 
data-offset-key="2846:0" data-first-offset="true"><span data-slate-string="true">文中提到了乐观锁，不清楚的话，你可以阅读这个</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2847" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2848"><span data-slate-leaf="true" data-offset-key="2848:0" 
data-first-offset="true"><span data-slate-string="true">词条</span></span></span></a><span data-slate-object="text" 
data-key="2849"><span data-slate-leaf="true" data-offset-key="2849:0" data-first-offset="true"><span 
data-slate-string="true">，以及这篇</span></span></span><a data-slate-type="link" data-slate-object="inline" 
data-key="2850" class="se-575a6467 se-198d4f97"><span data-slate-object="text" data-key="2851"><span 
data-slate-leaf="true" data-offset-key="2851:0" data-first-offset="true"><span data-slate-string="true">文章</span></span></span></a><span 
data-slate-object="text" data-key="2852"><span data-slate-leaf="true" data-offset-key="2852:0" 
data-first-offset="true"><span data-slate-string="true">以进一步理解。</span></span></span> </div> 
</div> <div class="se-b1901568" data-slate-type="image" data-slate-object="block" data-key="2853"> 
<img class="se-9fb43f19" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.089 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=26 
 {executed in 0 msec}
2020-11-19 11:16:19.090 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:16:19.091 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=26 
 {executed in 1 msec}
2020-11-19 11:16:19.091 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:16:19.093 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755779, 1605755779, 1, 'zh-hans', 0, 1, 1, 
0, '21丨赫赫有名的双刃剑：缓存（上）', 1, 26, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.097 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=26 
 {executed in 0 msec}
2020-11-19 11:16:19.098 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:16:19.099 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755779, 1605755779, 1, 'zh-hans', 0, 
1, 1, 0, '21丨赫赫有名的双刃剑：缓存（上）', 'book', 1, 26, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.104 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.105 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.106 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.106 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.108 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/061751bd30c399c8de4b71fc4d9ca616?bkt=en-24c643f198a62f88e0edc6a51db527684d86e5e4e703026a3eace855322647c5a2c6f2490a3b7907&fid=3757516097-778750-831686546964127&time=1605755777&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bfZ704JB7SWC8Q%2B60nzy%2FwTP2Mo%3D&to=92&size=14653274&sta_dx=14653274&sta_cs=3489&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250756&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14653274&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-41827cecd1dc1f2acb438602e4b7fe7c63edf5af6d4252250750106801d14b9ff12fc32026f652f4&sl=76480590&expires=8h&rt=pr&r=836580756&mlogid=7502174370075126185&vbdid=2247232042&fin=21%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502174370075126185&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5eee304bbb22b9c294d142071450f18a0f718bb2160934133639323619ab123a&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=21%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.114 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.115 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.117 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/061751bd30c399c8de4b71fc4d9ca616?bkt=en-24c643f198a62f88e0edc6a51db527684d86e5e4e703026a3eace855322647c5a2c6f2490a3b7907&fid=3757516097-778750-831686546964127&time=1605755777&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-bfZ704JB7SWC8Q%2B60nzy%2FwTP2Mo%3D&to=92&size=14653274&sta_dx=14653274&sta_cs=3489&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250756&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=14653274&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-41827cecd1dc1f2acb438602e4b7fe7c63edf5af6d4252250750106801d14b9ff12fc32026f652f4&sl=76480590&expires=8h&rt=pr&r=836580756&mlogid=7502174370075126185&vbdid=2247232042&fin=21%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8A%EF%BC%89.m4a&bflag=92,34-92&rtype=1&dp-logid=7502174370075126185&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=5eee304bbb22b9c294d142071450f18a0f718bb2160934133639323619ab123a&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=21%E4%B8%A8%E8%B5%AB%E8%B5%AB%E6%9C%89%E5%90%8D%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9A%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%8A%EF%BC%89.m4a', 
26, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.125 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.125 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.126 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.127 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.128 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>leslie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-28 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 数据写入缓存故而这就是日志的问题啊：现在其实许多数据库模型同样宕机就OVER，纠其根本原因还是许多的不严谨；日志是灾难恢复的主要手段。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据库内部查询同样是先看缓存是否有，没有再去重新查找；毕竟缓存速度&gt;内存&gt;磁盘。异步最大的难题是是事务性：这块非关系型数据库处理的都不好。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span>2</span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 0 msec}
2020-11-19 11:16:19.134 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.135 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.137 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>leslie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-28 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 数据写入缓存故而这就是日志的问题啊：现在其实许多数据库模型同样宕机就OVER，纠其根本原因还是许多的不严谨；日志是灾难恢复的主要手段。 
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据库内部查询同样是先看缓存是否有，没有再去重新查找；毕竟缓存速度&gt;内存&gt;磁盘。异步最大的难题是是事务性：这块非关系型数据库处理的都不好。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span>2</span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.142 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.142 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.143 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.143 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.145 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 26, 'https://static001.geekbang.org/resource/image/63/b9/63dce4ef811e883e12ef900c2b1304b9.jpg', 
26) 
 {executed in 1 msec}
2020-11-19 11:16:19.151 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=26 
 {executed in 0 msec}
2020-11-19 11:16:19.151 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.153 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 26, 'https://static001.geekbang.org/resource/image/63/b9/63dce4ef811e883e12ef900c2b1304b9.jpg', 
26) 
 {executed in 0 msec}
2020-11-19 11:16:19.158 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.158 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:16:19.160 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.163 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=26 
 {executed in 1 msec}
2020-11-19 11:16:19.163 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:16:19.165 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 26, 26) 
 {executed in 1 msec}
2020-11-19 11:16:19.168 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='192679791777784' 
 {executed in 0 msec}
2020-11-19 11:16:19.168 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.169 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755779, 1) 
 {executed in 0 msec}
2020-11-19 11:16:19.169 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755779, 1) 
 {executed in 0 msec}
2020-11-19 11:16:19.170 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|27            |
|--------------|

2020-11-19 11:16:19.173 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'b618c958-1117-4552-a6f6-21c5a3c3354c', 
27) 
 {executed in 0 msec}
2020-11-19 11:16:19.174 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'b618c958-1117-4552-a6f6-21c5a3c3354c', 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.174 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|27            |
|--------------|

2020-11-19 11:16:19.178 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=27, revision_default=1, revision_timestamp=1605755779, 
revision_uid=1 where vid=27 
 {executed in 0 msec}
2020-11-19 11:16:19.181 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.182 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.183 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '192679791777784', 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.187 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.187 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:16:19.189 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '192679791777784', 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.193 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=27 
 {executed in 0 msec}
2020-11-19 11:16:19.193 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:16:19.195 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=27 
 {executed in 1 msec}
2020-11-19 11:16:19.195 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:16:19.198 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
2, 1, 1, 27, 0, 0, 0, 1, 0, 27) 
 {executed in 1 msec}
2020-11-19 11:16:19.202 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.203 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.204 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.205 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.207 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.210 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.211 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:16:19.212 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('', '', 'book', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.215 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=27 
 {executed in 0 msec}
2020-11-19 11:16:19.216 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:16:19.217 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=27 
 {executed in 0 msec}
2020-11-19 11:16:19.218 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:16:19.219 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755779, 1605755779, 1, 'zh-hans', 0, 1, 1, 
0, '03丨第三章 从后端到前端 (7讲)', 1, 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.223 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=27 
 {executed in 1 msec}
2020-11-19 11:16:19.223 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:16:19.225 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755779, 1605755779, 1, 'zh-hans', 0, 
1, 1, 0, '03丨第三章 从后端到前端 (7讲)', 'book', 1, 27, 27) 
 {executed in 1 msec}
2020-11-19 11:16:19.228 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.229 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.229 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.230 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.232 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', '', 27, 27) 
 {executed in 1 msec}
2020-11-19 11:16:19.239 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.240 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:16:19.241 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', '', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.246 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.246 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.247 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.248 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.251 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 1 msec}
2020-11-19 11:16:19.256 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.256 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:16:19.259 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '', 0, 'full_html', 'zh-hans', 27, 27) 
 {executed in 1 msec}
2020-11-19 11:16:19.266 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.266 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.268 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.268 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.270 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 27, '', 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.276 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.277 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:16:19.278 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 27, '', 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.283 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=27 
 {executed in 1 msec}
2020-11-19 11:16:19.284 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:16:19.286 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:16:19.292 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=27 
 {executed in 0 msec}
2020-11-19 11:16:19.293 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:16:19.294 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 27, 27) 
 {executed in 0 msec}
2020-11-19 11:17:03.638 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='480581201852510' 
 {executed in 0 msec}
2020-11-19 11:17:03.638 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:03.639 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755823, 1) 
 {executed in 0 msec}
2020-11-19 11:17:03.639 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755823, 1) 
 {executed in 0 msec}
2020-11-19 11:17:03.640 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|28            |
|--------------|

2020-11-19 11:17:03.648 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', '7110e99f-88a1-4f07-a47f-e260185ea517', 
28) 
 {executed in 0 msec}
2020-11-19 11:17:03.648 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', '7110e99f-88a1-4f07-a47f-e260185ea517', 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.648 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|28            |
|--------------|

2020-11-19 11:17:03.654 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=28, revision_default=1, revision_timestamp=1605755823, 
revision_uid=1 where vid=28 
 {executed in 1 msec}
2020-11-19 11:17:03.658 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.658 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:03.659 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '480581201852510', 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.665 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.666 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:03.667 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '480581201852510', 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.671 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=28 
 {executed in 0 msec}
2020-11-19 11:17:03.671 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:17:03.672 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=28 
 {executed in 0 msec}
2020-11-19 11:17:03.672 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:17:03.673 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 27, 28, 0, 0, 27, 0, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.677 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.677 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:03.678 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.679 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:03.682 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="2130" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-f041e793 " data-slate-type="paragraph" data-slate-object="block" 
data-key="2131"> <span data-slate-object="text" data-key="2132"><span data-slate-leaf="true" 
data-offset-key="2132:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。又到了一个章节的末尾，相对轻松的特别放送时间。</span></span></span> 
</div> <div class="se-7a6e2c7f " data-slate-type="paragraph" data-slate-object="block" data-key="2133"> 
<span data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">从技术的角度上看，和相对偏“硬”的常规内容不同，特别放送部分，我一般倾向于介绍一些较“软”的其他内容。第一章的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2135" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">[特别放送]</span></span></span></a><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span data-slate-string="true"> 我介绍了北美大厂工程师的面试流程，第二章的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2138" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2139"><span data-slate-leaf="true" data-offset-key="2139:0" 
data-first-offset="true"><span data-slate-string="true">[特别放送]</span></span></span></a><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true"> 我们讨论了学习的方法。那第三章的特别放送，也就是你正在阅读的这一讲，我想结合我自己的经历，谈一谈全栈团队的角色构成。</span></span></span> 
</div> <div class="se-d2dac0d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2141"> 
<span data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">这些团队的角色构成可以说各有春秋，但是和以往直接进行优劣比较的方式不同，</span></span></span><span 
data-slate-object="text" data-key="2143"><span data-slate-leaf="true" data-offset-key="2143:0" 
data-first-offset="true"><span class="se-8c0e9ddd" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">今天我想换个形式，在这一讲的分享中，我将尽量保持中立和平和，而将有态度和有观点的思考留给你。</span></span></span></span> 
</div> <div class="se-a05bb5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="2144"> 
<span data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span data-slate-string="true">我们整个专栏都在讲基于 Web 的全栈工程师，相应的，这里我提到的角色构成是针对“全栈团队”的。但它并非指一群全栈工程师所组成的团队，而是说，一个团队具备较多方面、较多层次的技能，联合协作去解决某一个具体领域的问题。</span></span></span> 
</div> <div class="se-07e2f6e4 " data-slate-type="paragraph" data-slate-object="block" data-key="2146"> 
<span data-slate-object="text" data-key="2147"><span data-slate-leaf="true" data-offset-key="2147:0" 
data-first-offset="true"><span data-slate-string="true">就我的工作经历而言，我其实在不少团队中待过，团队有大有小，既有国内的公司，也有北美的公司。而其中的几个大的项目，呆过的几个大的团队都可以认为是全栈团队。</span></span></span> 
</div> <h2 class="se-f49cbc37" data-slate-type="heading" data-slate-object="block" data-key="2148"><span 
data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span data-slate-string="true">华为</span></span></span></h2> <div class="se-29b0d32e 
" data-slate-type="paragraph" data-slate-object="block" data-key="2150"> <span data-slate-object="text" 
data-key="2151"><span data-slate-leaf="true" data-offset-key="2151:0" data-first-offset="true"><span 
data-slate-string="true">在华为的时候，我曾经作为某大型门户网站产品的初创团队成员，在其基线团队中呆了几年。你可能听说过，像华为这样的公司做产品，具备的最大优势就是“全面”，一般的公司可能着重于从某一个用户痛点，聚焦于某一个较窄范围内的问题解决办法，而华为具备足够的人力和财力去打造一个全渠道的完整体系的解决方案。</span></span></span> 
</div> <div class="se-984b8fb9 " data-slate-type="paragraph" data-slate-object="block" data-key="2152"> 
<span data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">整个产品团队后来分为基线团队和定制团队两部分，前者着重于打造具备基础功能的产品，是产品交付的基础；而定制团队有多个，将基线版本根据不同的业务需求定制化，包括功能的裁剪和添加，以及针对业务的专项优化，卖到不同的国家和不同的市场中去。</span></span></span> 
</div> <div class="se-bc967b87 " data-slate-type="paragraph" data-slate-object="block" data-key="2154"> 
<span data-slate-object="text" data-key="2155"><span data-slate-leaf="true" data-offset-key="2155:0" 
data-first-offset="true"><span data-slate-string="true">当时，我们的基线产品研发团队中，有这样几个核心角色。</span></span></span> 
</div> <div class="se-53812b59 " data-slate-type="paragraph" data-slate-object="block" data-key="2156"> 
<span data-slate-object="text" data-key="2157"><span data-slate-leaf="true" data-offset-key="2157:0" 
data-first-offset="true"><span class="se-d5dcecae" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">项目经理</span></span></span></span><span data-slate-object="text" data-key="2158"><span 
data-slate-leaf="true" data-offset-key="2158:0" data-first-offset="true"><span data-slate-string="true">，项目总负责人，这个角色是不断在换的。项目经理当然是跟着项目走的，我们交付一个版本的时间在一个多月左右，那么每个版本都可以指定不同的项目经理。这个角色和</span></span></span><span 
data-slate-object="text" data-key="2159"><span data-slate-leaf="true" data-offset-key="2159:0" 
data-first-offset="true"><span class="se-5e464488" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">团队经理</span></span></span></span><span data-slate-object="text" data-key="2160"><span 
data-slate-leaf="true" data-offset-key="2160:0" data-first-offset="true"><span data-slate-string="true">（Team 
Leader）是不一样的，当然，理论上可以兼任。有时，团队经理也往往在不同的项目里面兼任项目经理。基层的项目经理一般都是程序员出身，也可能参与编码，但是不管参不参与编码，往往都会在产品的技术决策上有相当大的影响力。要说一个团队中最累的角色，可能就是项目经理了。我记得当时项目到了最紧张疯狂的时候，如今的 
996 看起来根本就是不必言说的浮云，我的项目经理一周七天有三天是睡在公司的。</span></span></span> </div> <div class="se-1caa14bf 
" data-slate-type="paragraph" data-slate-object="block" data-key="2161"> <span data-slate-object="text" 
data-key="2162"><span data-slate-leaf="true" data-offset-key="2162:0" data-first-offset="true"><span 
class="se-e86e1be1" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">SE</span></span></span></span><span 
data-slate-object="text" data-key="2163"><span data-slate-leaf="true" data-offset-key="2163:0" 
data-first-offset="true"><span data-slate-string="true">（System Engineer，系统工程师），实际角色相当于现在大多数公司的产品经理。这个角色负责从市场部门承接需求，然后做“系统性设计”。当然，这个系统多数指的是业务系统，也就是说，他们多数时候不关心技术层面的实现，但是业务流程精通得很。SE 
的出身可以说是鱼龙混杂，有工程师，有测试，甚至有一线运维人员，毕业生是不能担任 SE 这个角色的，这个职位要求有一定的工作经验，因此他们大多是工作一定年头后转过来的。一个项目一般只有一个 
SE，但是一些重点项目，或者规模较大的项目，可以有多个，比如我们当时的项目，一开始安排了 3 个 SE，在数周的“封闭会议”后，整个解决方案大的业务和技术框架就定下来了。同在基层，不同的公司中不同角色的“地位”是有差异的。比如在腾讯，产品经理相对话语权更大；在 
Google，工程师更占主导；而在华为，市场部门是老大，研发体系相对要弱势一些，SE 则是二者沟通的桥梁。</span></span></span> </div> <div class="se-3724acb6 
" data-slate-type="paragraph" data-slate-object="block" data-key="2164"> <span data-slate-object="text" 
data-key="2165"><span data-slate-leaf="true" data-offset-key="2165:0" data-first-offset="true"><span 
class="se-243b57e4" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">测试</span></span></span></span><span 
data-slate-object="text" data-key="2166"><span data-slate-leaf="true" data-offset-key="2166:0" 
data-first-offset="true"><span data-slate-string="true">，早些年华为的测试和开发是从组织架构上完全分开的，后来开发和测试也在逐渐融合，但也远不像互联网公司那样两个角色合一，而每天开发和测试之间的沟通协调，甚至争辩斗嘴就是我们的“日常”，团队氛围可以说颇为融洽。软件版本从开发手里转交到测试手里（所谓“转测试”），这个过程对于基线版本的工程师来说，其实就相当于版本发布了，是整个研发过程中的一件大事。流程上它需要经过测试团队提供的 
checklist 来验证并确保没有严重问题，否则版本将被打回。但事实上要保证这个并不是一件容易的事，因此为了反复修复和验证 checklist 上面的检查项，转测试当天一般要拖很久，多半都需要通宵。当时，作为门户网站，测试人员和开发人员的比例一般说是 
1:2 到 1:3，而且基本上测试的角色在这个体系中相对受轻视，测试活动一般都是黑盒的，多数也没有太多的技术含量。</span></span></span> </div> <div 
class="se-fd98a077 " data-slate-type="paragraph" data-slate-object="block" data-key="2167"> 
<span data-slate-object="text" data-key="2168"><span data-slate-leaf="true" data-offset-key="2168:0" 
data-first-offset="true"><span class="se-327f72c6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">架构师</span></span></span></span><span data-slate-object="text" data-key="2169"><span 
data-slate-leaf="true" data-offset-key="2169:0" data-first-offset="true"><span data-slate-string="true">，大致可分为平台架构师和解决方案架构师，我们当时合作的是后者。这个角色就像是幕后高手一样，一般不出现。只是在一些非常重大的项目上，最先跳出来挥斥方遒，带领一帮 
SE 搞定架构设计。架构师的经验阅历和技术功底都是相当靠谱的，但是几个月之后，包括架构维护的时间他就消失了。</span></span></span> </div> <div class="se-e01edbdc 
" data-slate-type="paragraph" data-slate-object="block" data-key="2170"> <span data-slate-object="text" 
data-key="2171"><span data-slate-leaf="true" data-offset-key="2171:0" data-first-offset="true"><span 
data-slate-string="true">用户体验，特别是界面设计方面，有这样几个角色协同合作：</span></span></span><span data-slate-object="text" 
data-key="2172"><span data-slate-leaf="true" data-offset-key="2172:0" data-first-offset="true"><span 
class="se-d5fc55fb" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">UCD 
工程师</span></span></span></span><span data-slate-object="text" data-key="2173"><span data-slate-leaf="true" 
data-offset-key="2173:0" data-first-offset="true"><span data-slate-string="true">，和用户沟通相对紧密，主导产品的界面设计和使用设计，然后把设计方案（多数是 
PPT 一类的文档）交给</span></span></span><span data-slate-object="text" data-key="2174"><span data-slate-leaf="true" 
data-offset-key="2174:0" data-first-offset="true"><span class="se-f702dbf3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">负责设计的美工</span></span></span></span><span 
data-slate-object="text" data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" 
data-first-offset="true"><span data-slate-string="true">；而负责设计的美工，将方案落实到 Photoshop 的 psd 设计文件中，再交给另一波</span></span></span><span 
data-slate-object="text" data-key="2176"><span data-slate-leaf="true" data-offset-key="2176:0" 
data-first-offset="true"><span class="se-3cf95ad6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">负责快速原型的美工</span></span></span></span><span data-slate-object="text" 
data-key="2177"><span data-slate-leaf="true" data-offset-key="2177:0" data-first-offset="true"><span 
data-slate-string="true">；而这一波美工会将设计落实成一个 HTML 的快速原型，交到最终负责开发的工程师手里。</span></span></span> </div> 
<div class="se-ed458a83 " data-slate-type="paragraph" data-slate-object="block" data-key="2178"> 
<span data-slate-object="text" data-key="2179"><span data-slate-leaf="true" data-offset-key="2179:0" 
data-first-offset="true"><span class="se-b9d5399a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">QA</span></span></span></span><span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">，这个质量保证的角色命名上其实有点奇怪，因为他们不做测试，而是专门监管流程质量，既包括研发流程，也做一些代码静态分析的工作，总的来说算是一份闲差。他们平时不出现，出现也不检查架构，不检查设计，而是要检查项目的各种工具指标，比如什么测试覆盖率、圈复杂度、代码重复率等等。显然，很多工程师都不喜欢这些束手束脚的东西。</span></span></span> 
</div> <div class="se-fcd61c47 " data-slate-type="paragraph" data-slate-object="block" data-key="2181"> 
<span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" data-offset-key="2182:0" 
data-first-offset="true"><span data-slate-string="true">最后，也是人数最多的，那就是</span></span></span><span 
data-slate-object="text" data-key="2183"><span data-slate-leaf="true" data-offset-key="2183:0" 
data-first-offset="true"><span class="se-c1ee8065" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">开发</span></span></span></span><span data-slate-object="text" data-key="2184"><span 
data-slate-leaf="true" data-offset-key="2184:0" data-first-offset="true"><span data-slate-string="true">，也就是程序员，这是整个研发体系的大军。前面已经提到了，需求总是从 
SE 那里来的，如果是项目内部改进的需求，也需要开发出文档，再汇总到 SE 的需求列表里面去。绝大部分时间里，大家的任务都是按功能特性划分，而不是按照软件层次划分的，也就是说从工作应用的 
Web 技术栈上看，确实是真正的“全栈”。作为基线版本的开发，我们不需要管上线之后的事情，因为有专门的运维人员第一时间来处理，而那些解决不了的问题和软件上的 bug 到了定制版本的研发团队那里，也多半被消化掉了，只有少数的具备共性的问题，才会送到基线版本的研发团队手里。</span></span></span> 
</div> <h2 class="se-8ee2adcb" data-slate-type="heading" data-slate-object="block" data-key="2185"><span 
data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">Amazon</span></span></span></h2> <div 
class="se-859433a9 " data-slate-type="paragraph" data-slate-object="block" data-key="2187"> 
<span data-slate-object="text" data-key="2188"><span data-slate-leaf="true" data-offset-key="2188:0" 
data-first-offset="true"><span data-slate-string="true">在亚马逊，我经历了两个比较大的全栈团队，一个是销量预测团队，一个是成本和利润计算的团队。</span></span></span> 
</div> <div class="se-d67a8467 " data-slate-type="paragraph" data-slate-object="block" data-key="2189"> 
<span data-slate-object="text" data-key="2190"><span data-slate-leaf="true" data-offset-key="2190:0" 
data-first-offset="true"><span data-slate-string="true">这两个团队中，前者的核心就是为亚马逊所有的商品预测销量，后者则是计算成本和利润，二者的实时性都比较高，数据量也都比较大，它们的技术栈类似，涉及机器学习、大数据处理、分布式任务管理、数据可视化等等，从整体看明显也是一个全栈团队，且角色构成也是较为丰富的。</span></span></span> 
</div> <div class="se-cbd57915 " data-slate-type="paragraph" data-slate-object="block" data-key="2191"> 
<span data-slate-object="text" data-key="2192"><span data-slate-leaf="true" data-offset-key="2192:0" 
data-first-offset="true"><span data-slate-string="true">团队经理的角色依然存在，对于每一个小团队来说，经理就是 </span></span></span><span 
data-slate-object="text" data-key="2193"><span data-slate-leaf="true" data-offset-key="2193:0" 
data-first-offset="true"><span class="se-3788223d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Dev Manager</span></span></span></span><span data-slate-object="text" 
data-key="2194"><span data-slate-leaf="true" data-offset-key="2194:0" data-first-offset="true"><span 
data-slate-string="true">，多数是软件工程师出身。只要不是跨团队的大项目，一般规模的项目都由 Dev Manager 牵头负责，小项目则由资深的工程师自己牵头负责。因此，项目经理这个角色，其实并不经常提起。</span></span></span> 
</div> <div class="se-5570e988 " data-slate-type="paragraph" data-slate-object="block" data-key="2195"> 
<span data-slate-object="text" data-key="2196"><span data-slate-leaf="true" data-offset-key="2196:0" 
data-first-offset="true"><span class="se-abf3f843" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">TPM</span></span></span></span><span data-slate-object="text" data-key="2197"><span 
data-slate-leaf="true" data-offset-key="2197:0" data-first-offset="true"><span data-slate-string="true">（Technical 
Project Manager）担任起了产品经理的角色，负责业务需求的分析、设计和跟踪。如果项目是跨团队的，那么项目会有专职 TPM 来负责团队之间的协调。这个角色需要对业务非常熟悉，而技术层面要求不高。因为大团队是偏向于数据处理的，因此 
TPM 如果有技术背景更好，但是那样的人才会非常难找。我知道某些公司要求这样的角色也有软件工程师背景，但是就我所经历的公司和我所了解的绝大多数公司的情况，并不是这样的。</span></span></span> 
</div> <div class="se-50dc8cf6 " data-slate-type="paragraph" data-slate-object="block" data-key="2198"> 
<span data-slate-object="text" data-key="2199"><span data-slate-leaf="true" data-offset-key="2199:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，这两个团队都没有设 QA 的职位。</span></span></span><span 
data-slate-object="text" data-key="2200"><span data-slate-leaf="true" data-offset-key="2200:0" 
data-first-offset="true"><span class="se-9e1a1406" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">QA</span></span></span></span><span data-slate-object="text" data-key="2201"><span 
data-slate-leaf="true" data-offset-key="2201:0" data-first-offset="true"><span data-slate-string="true"> 
其实就是专职的测试，不过这样的角色在亚马逊的大多数团队中基本消失了。说基本消失，是因为绝大多数团队中，负责开发的工程师就把自己团队的产品测试工作给承包了，因此并不设立单独的测试岗位。当然，对于直接面向互联网和大众的产品，特别是包含复杂 
UI 的产品，还能看到少量专职的测试工程师的存在，来负责部分专门的测试工作，当然，这一职位，很多时候是外包出去的。</span></span></span> </div> <div 
class="se-2fe6c3b5 " data-slate-type="paragraph" data-slate-object="block" data-key="2202"> 
<span data-slate-object="text" data-key="2203"><span data-slate-leaf="true" data-offset-key="2203:0" 
data-first-offset="true"><span class="se-2bf85c50" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">SDE</span></span></span></span><span data-slate-object="text" data-key="2204"><span 
data-slate-leaf="true" data-offset-key="2204:0" data-first-offset="true"><span data-slate-string="true">，全称是 
Software Development Engineer，是主力军，也是粘合剂，不只是在技术层面上看是全栈的，就做的工作的类型上看也是（即从需求澄清、功能分解、任务跟踪，到开发、测试、部署、维护，全部都是开发人员做的，这点和华为的经历有所不同）。当然，对于工程层面的项目设计，也是有经验的工程师主导的，这个和前面说得差不多。在亚马逊有句对 
SDE 戏谑的解释叫做“Someone Does Everything”。而所有的最小的团队，每个团队一般只有几个人，“Pizza Team”的称呼就是这么来的，就是说，团队的人用两张披萨就能喂饱，如果团队规模扩张到了超过 
Pizza Team 的程度，就要拆分。</span></span></span> </div> <div class="se-ca87ff69 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2205"> <span data-slate-object="text" data-key="2206"><span 
data-slate-leaf="true" data-offset-key="2206:0" data-first-offset="true"><span data-slate-string="true">有时候，当前端工作的需求量特别大，团队就会规划招一个和 
SDE 类似的特殊角色——WDE。</span></span></span><span data-slate-object="text" data-key="2207"><span 
data-slate-leaf="true" data-offset-key="2207:0" data-first-offset="true"><span class="se-02932979" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">WDE</span></span></span></span><span 
data-slate-object="text" data-key="2208"><span data-slate-leaf="true" data-offset-key="2208:0" 
data-first-offset="true"><span data-slate-string="true"> 就是 Web Development Engineer，有点像国内的“前端工程师”的角色了。也就是说，亚马逊只有 
SDE 和 WDE，没有“后端工程师”这样的角色定位。说实话，这个角色设置得有些奇怪，在公司内部也颇受争议，争议的部分主要在于，这个角色的工程师应该怎样考察，衡量的标准在哪里。哪些方面必须比一般的 
SDE 要求高可能好说，比如前端的工程能力，但是可以允许在哪些方面比一般的 SDE 低却不好说。而且从高级别的工程师比例来看，和 SDE 比起来，WDE 的发展往往容易受到挤压和限制。</span></span></span> 
</div> <div class="se-2268bc20 " data-slate-type="paragraph" data-slate-object="block" data-key="2209"> 
<span data-slate-object="text" data-key="2210"><span data-slate-leaf="true" data-offset-key="2210:0" 
data-first-offset="true"><span data-slate-string="true">因为我所在的两个团队都是偏重数据的团队，因此其中还有许多 </span></span></span><span 
data-slate-object="text" data-key="2211"><span data-slate-leaf="true" data-offset-key="2211:0" 
data-first-offset="true"><span class="se-633fbea3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Data Analyst</span></span></span></span><span data-slate-object="text" 
data-key="2212"><span data-slate-leaf="true" data-offset-key="2212:0" data-first-offset="true"><span 
data-slate-string="true">，也就是数据分析师，他们和软件工程师的比例大致是 1:3，擅长和数据打交道，SQL 用得滚瓜烂熟，需要经常扎到数据堆里调查业务问题。这里面有一个很有意思的事情是，他们使用的很多工具，都是需要 
SDE 来开发维护的，有时候 SDE 工作过于繁忙，来不及处理这样的问题，他们就被迫“Dev 化”，自己尝试去解决本该由 SDE 来处理的工具问题。</span></span></span> 
</div> <div class="se-846ae181 " data-slate-type="paragraph" data-slate-object="block" data-key="2213"> 
<span data-slate-object="text" data-key="2214"><span data-slate-leaf="true" data-offset-key="2214:0" 
data-first-offset="true"><span data-slate-string="true">另外，经常和数据打交道的还有一类人数不多的角色，叫做 </span></span></span><span 
data-slate-object="text" data-key="2215"><span data-slate-leaf="true" data-offset-key="2215:0" 
data-first-offset="true"><span class="se-cfa833fb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Data Scientist</span></span></span></span><span data-slate-object="text" 
data-key="2216"><span data-slate-leaf="true" data-offset-key="2216:0" data-first-offset="true"><span 
data-slate-string="true">，有一种戏谑的说法是“Data Scientist is Data Analyst in California”，这足见二者在技术能力和工作范畴上有一定的相似度。但是 
Data Scientist 更多地要涉足机器学习，要基于数据建立起合适的模型，因此他们都有相当的专业背景。在我待过的那个销量预测团队中，预测的模型最开始就是他们建立起来并逐步调优的。</span></span></span> 
</div> <div class="se-bb050466 " data-slate-type="paragraph" data-slate-object="block" data-key="2217"> 
<span data-slate-object="text" data-key="2218"><span data-slate-leaf="true" data-offset-key="2218:0" 
data-first-offset="true"><span data-slate-string="true">接着是 </span></span></span><span data-slate-object="text" 
data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" data-first-offset="true"><span 
class="se-08aa1861" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Program 
Manager</span></span></span></span><span data-slate-object="text" data-key="2220"><span data-slate-leaf="true" 
data-offset-key="2220:0" data-first-offset="true"><span data-slate-string="true">，这个角色定位本身比较模糊，而我的观察是，他们很擅长和用户打交道，需要接触并回答用户的问题。和 
TPM 不同的是，他们很少负责用户需求。这样的职位不多，但是用户提的问题多了，沟通的活儿多了，就需要这样的角色来分担压力。在同等用户量的情况下，东西做得越好，越容易使用，这样的角色就越是不需要的；而越是做得烂的产品，或者说是不成熟的产品，才越是需要有人不断地去回答问题。</span></span></span> 
</div> <div class="se-3487c5ef " data-slate-type="paragraph" data-slate-object="block" data-key="2221"> 
<span data-slate-object="text" data-key="2222"><span data-slate-leaf="true" data-offset-key="2222:0" 
data-first-offset="true"><span class="se-c7e97f40" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Supporting Engineer</span></span></span></span><span data-slate-object="text" 
data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" data-first-offset="true"><span 
data-slate-string="true">，这几乎可以说就是个苦差事，他们做的其实就是运维（Ops）的活儿。事实上，多数的团队中，SDE 把测试的活儿都干了，也把大部分运维的活都给干了，通过运维的痛苦来反哺开发。有句话叫做“吃自己的狗食”（Eat 
Your Own Dog Food），就是说，SDE 自己开发埋的坑，自己不好好测试漏掉的坑，就要自己在 oncall 的时候半夜爬起来响应，并痛苦地解决线上问题。因此让 SDE 来运维肯定是首选，但是某些团队由于业务量等等的原因，SDE 
干不过来，特别是在非工作时间发生问题的时候，于是支持工程师这样的角色就应运而生了。因为不同时差和低人力成本的关系，有一些这样的角色包给印度团队去做了。当然，也有很多团队，SDE 就在轮流干这样的活儿，其实也没有差别了，只是明面上的职位名称不同而已。你可以联想一下 
AWS 如今的规模，这样的运维需求其实还是非常巨大的。当然，一般来说，在同等业务规模的情况下，产品做得越好，支持工程师的需求量就应该越少。</span></span></span> 
</div> <h2 class="se-238026df" data-slate-type="heading" data-slate-object="block" data-key="2224"><span 
data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">Oracle</span></span></span></h2> <div 
class="se-9c8abe5e " data-slate-type="paragraph" data-slate-object="block" data-key="2226"> 
<span data-slate-object="text" data-key="2227"><span data-slate-leaf="true" data-offset-key="2227:0" 
data-first-offset="true"><span data-slate-string="true">如今我呆的 OCI 的团队，依然是一个全栈团队，它的主要角色类型其实也差不太多。但是由于团队普遍比较新，一些以往需要其他专职角色干的活儿，目前还是由 
SDE 来完成的。</span></span></span> </div> <div class="se-4da4333f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2228"> <span data-slate-object="text" data-key="2229"><span 
data-slate-leaf="true" data-offset-key="2229:0" data-first-offset="true"><span data-slate-string="true">这就是今天的全部内容，你对这些角色有什么看法？在你所经历的团队中，人员的角色构成又是怎样的呢？不妨分享一下吧。</span></span></span> 
</div> <div class="se-bd54326f" data-slate-type="image" data-slate-object="block" data-key="2230"> 
<img class="se-be687bac" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 2 msec}
2020-11-19 11:17:03.686 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 11:17:03.686 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:03.690 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="2130" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-f041e793 " data-slate-type="paragraph" data-slate-object="block" data-key="2131"> 
<span data-slate-object="text" data-key="2132"><span data-slate-leaf="true" data-offset-key="2132:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。又到了一个章节的末尾，相对轻松的特别放送时间。</span></span></span> 
</div> <div class="se-7a6e2c7f " data-slate-type="paragraph" data-slate-object="block" data-key="2133"> 
<span data-slate-object="text" data-key="2134"><span data-slate-leaf="true" data-offset-key="2134:0" 
data-first-offset="true"><span data-slate-string="true">从技术的角度上看，和相对偏“硬”的常规内容不同，特别放送部分，我一般倾向于介绍一些较“软”的其他内容。第一章的 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="2135" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="2136"><span data-slate-leaf="true" data-offset-key="2136:0" 
data-first-offset="true"><span data-slate-string="true">[特别放送]</span></span></span></a><span 
data-slate-object="text" data-key="2137"><span data-slate-leaf="true" data-offset-key="2137:0" 
data-first-offset="true"><span data-slate-string="true"> 我介绍了北美大厂工程师的面试流程，第二章的 </span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="2138" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="2139"><span data-slate-leaf="true" data-offset-key="2139:0" 
data-first-offset="true"><span data-slate-string="true">[特别放送]</span></span></span></a><span 
data-slate-object="text" data-key="2140"><span data-slate-leaf="true" data-offset-key="2140:0" 
data-first-offset="true"><span data-slate-string="true"> 我们讨论了学习的方法。那第三章的特别放送，也就是你正在阅读的这一讲，我想结合我自己的经历，谈一谈全栈团队的角色构成。</span></span></span> 
</div> <div class="se-d2dac0d8 " data-slate-type="paragraph" data-slate-object="block" data-key="2141"> 
<span data-slate-object="text" data-key="2142"><span data-slate-leaf="true" data-offset-key="2142:0" 
data-first-offset="true"><span data-slate-string="true">这些团队的角色构成可以说各有春秋，但是和以往直接进行优劣比较的方式不同，</span></span></span><span 
data-slate-object="text" data-key="2143"><span data-slate-leaf="true" data-offset-key="2143:0" 
data-first-offset="true"><span class="se-8c0e9ddd" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">今天我想换个形式，在这一讲的分享中，我将尽量保持中立和平和，而将有态度和有观点的思考留给你。</span></span></span></span> 
</div> <div class="se-a05bb5b8 " data-slate-type="paragraph" data-slate-object="block" data-key="2144"> 
<span data-slate-object="text" data-key="2145"><span data-slate-leaf="true" data-offset-key="2145:0" 
data-first-offset="true"><span data-slate-string="true">我们整个专栏都在讲基于 Web 的全栈工程师，相应的，这里我提到的角色构成是针对“全栈团队”的。但它并非指一群全栈工程师所组成的团队，而是说，一个团队具备较多方面、较多层次的技能，联合协作去解决某一个具体领域的问题。</span></span></span> 
</div> <div class="se-07e2f6e4 " data-slate-type="paragraph" data-slate-object="block" data-key="2146"> 
<span data-slate-object="text" data-key="2147"><span data-slate-leaf="true" data-offset-key="2147:0" 
data-first-offset="true"><span data-slate-string="true">就我的工作经历而言，我其实在不少团队中待过，团队有大有小，既有国内的公司，也有北美的公司。而其中的几个大的项目，呆过的几个大的团队都可以认为是全栈团队。</span></span></span> 
</div> <h2 class="se-f49cbc37" data-slate-type="heading" data-slate-object="block" data-key="2148"><span 
data-slate-object="text" data-key="2149"><span data-slate-leaf="true" data-offset-key="2149:0" 
data-first-offset="true"><span data-slate-string="true">华为</span></span></span></h2> <div class="se-29b0d32e 
" data-slate-type="paragraph" data-slate-object="block" data-key="2150"> <span data-slate-object="text" 
data-key="2151"><span data-slate-leaf="true" data-offset-key="2151:0" data-first-offset="true"><span 
data-slate-string="true">在华为的时候，我曾经作为某大型门户网站产品的初创团队成员，在其基线团队中呆了几年。你可能听说过，像华为这样的公司做产品，具备的最大优势就是“全面”，一般的公司可能着重于从某一个用户痛点，聚焦于某一个较窄范围内的问题解决办法，而华为具备足够的人力和财力去打造一个全渠道的完整体系的解决方案。</span></span></span> 
</div> <div class="se-984b8fb9 " data-slate-type="paragraph" data-slate-object="block" data-key="2152"> 
<span data-slate-object="text" data-key="2153"><span data-slate-leaf="true" data-offset-key="2153:0" 
data-first-offset="true"><span data-slate-string="true">整个产品团队后来分为基线团队和定制团队两部分，前者着重于打造具备基础功能的产品，是产品交付的基础；而定制团队有多个，将基线版本根据不同的业务需求定制化，包括功能的裁剪和添加，以及针对业务的专项优化，卖到不同的国家和不同的市场中去。</span></span></span> 
</div> <div class="se-bc967b87 " data-slate-type="paragraph" data-slate-object="block" data-key="2154"> 
<span data-slate-object="text" data-key="2155"><span data-slate-leaf="true" data-offset-key="2155:0" 
data-first-offset="true"><span data-slate-string="true">当时，我们的基线产品研发团队中，有这样几个核心角色。</span></span></span> 
</div> <div class="se-53812b59 " data-slate-type="paragraph" data-slate-object="block" data-key="2156"> 
<span data-slate-object="text" data-key="2157"><span data-slate-leaf="true" data-offset-key="2157:0" 
data-first-offset="true"><span class="se-d5dcecae" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">项目经理</span></span></span></span><span data-slate-object="text" data-key="2158"><span 
data-slate-leaf="true" data-offset-key="2158:0" data-first-offset="true"><span data-slate-string="true">，项目总负责人，这个角色是不断在换的。项目经理当然是跟着项目走的，我们交付一个版本的时间在一个多月左右，那么每个版本都可以指定不同的项目经理。这个角色和</span></span></span><span 
data-slate-object="text" data-key="2159"><span data-slate-leaf="true" data-offset-key="2159:0" 
data-first-offset="true"><span class="se-5e464488" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">团队经理</span></span></span></span><span data-slate-object="text" data-key="2160"><span 
data-slate-leaf="true" data-offset-key="2160:0" data-first-offset="true"><span data-slate-string="true">（Team 
Leader）是不一样的，当然，理论上可以兼任。有时，团队经理也往往在不同的项目里面兼任项目经理。基层的项目经理一般都是程序员出身，也可能参与编码，但是不管参不参与编码，往往都会在产品的技术决策上有相当大的影响力。要说一个团队中最累的角色，可能就是项目经理了。我记得当时项目到了最紧张疯狂的时候，如今的 
996 看起来根本就是不必言说的浮云，我的项目经理一周七天有三天是睡在公司的。</span></span></span> </div> <div class="se-1caa14bf 
" data-slate-type="paragraph" data-slate-object="block" data-key="2161"> <span data-slate-object="text" 
data-key="2162"><span data-slate-leaf="true" data-offset-key="2162:0" data-first-offset="true"><span 
class="se-e86e1be1" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">SE</span></span></span></span><span 
data-slate-object="text" data-key="2163"><span data-slate-leaf="true" data-offset-key="2163:0" 
data-first-offset="true"><span data-slate-string="true">（System Engineer，系统工程师），实际角色相当于现在大多数公司的产品经理。这个角色负责从市场部门承接需求，然后做“系统性设计”。当然，这个系统多数指的是业务系统，也就是说，他们多数时候不关心技术层面的实现，但是业务流程精通得很。SE 
的出身可以说是鱼龙混杂，有工程师，有测试，甚至有一线运维人员，毕业生是不能担任 SE 这个角色的，这个职位要求有一定的工作经验，因此他们大多是工作一定年头后转过来的。一个项目一般只有一个 
SE，但是一些重点项目，或者规模较大的项目，可以有多个，比如我们当时的项目，一开始安排了 3 个 SE，在数周的“封闭会议”后，整个解决方案大的业务和技术框架就定下来了。同在基层，不同的公司中不同角色的“地位”是有差异的。比如在腾讯，产品经理相对话语权更大；在 
Google，工程师更占主导；而在华为，市场部门是老大，研发体系相对要弱势一些，SE 则是二者沟通的桥梁。</span></span></span> </div> <div class="se-3724acb6 
" data-slate-type="paragraph" data-slate-object="block" data-key="2164"> <span data-slate-object="text" 
data-key="2165"><span data-slate-leaf="true" data-offset-key="2165:0" data-first-offset="true"><span 
class="se-243b57e4" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">测试</span></span></span></span><span 
data-slate-object="text" data-key="2166"><span data-slate-leaf="true" data-offset-key="2166:0" 
data-first-offset="true"><span data-slate-string="true">，早些年华为的测试和开发是从组织架构上完全分开的，后来开发和测试也在逐渐融合，但也远不像互联网公司那样两个角色合一，而每天开发和测试之间的沟通协调，甚至争辩斗嘴就是我们的“日常”，团队氛围可以说颇为融洽。软件版本从开发手里转交到测试手里（所谓“转测试”），这个过程对于基线版本的工程师来说，其实就相当于版本发布了，是整个研发过程中的一件大事。流程上它需要经过测试团队提供的 
checklist 来验证并确保没有严重问题，否则版本将被打回。但事实上要保证这个并不是一件容易的事，因此为了反复修复和验证 checklist 上面的检查项，转测试当天一般要拖很久，多半都需要通宵。当时，作为门户网站，测试人员和开发人员的比例一般说是 
1:2 到 1:3，而且基本上测试的角色在这个体系中相对受轻视，测试活动一般都是黑盒的，多数也没有太多的技术含量。</span></span></span> </div> <div 
class="se-fd98a077 " data-slate-type="paragraph" data-slate-object="block" data-key="2167"> 
<span data-slate-object="text" data-key="2168"><span data-slate-leaf="true" data-offset-key="2168:0" 
data-first-offset="true"><span class="se-327f72c6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">架构师</span></span></span></span><span data-slate-object="text" data-key="2169"><span 
data-slate-leaf="true" data-offset-key="2169:0" data-first-offset="true"><span data-slate-string="true">，大致可分为平台架构师和解决方案架构师，我们当时合作的是后者。这个角色就像是幕后高手一样，一般不出现。只是在一些非常重大的项目上，最先跳出来挥斥方遒，带领一帮 
SE 搞定架构设计。架构师的经验阅历和技术功底都是相当靠谱的，但是几个月之后，包括架构维护的时间他就消失了。</span></span></span> </div> <div class="se-e01edbdc 
" data-slate-type="paragraph" data-slate-object="block" data-key="2170"> <span data-slate-object="text" 
data-key="2171"><span data-slate-leaf="true" data-offset-key="2171:0" data-first-offset="true"><span 
data-slate-string="true">用户体验，特别是界面设计方面，有这样几个角色协同合作：</span></span></span><span data-slate-object="text" 
data-key="2172"><span data-slate-leaf="true" data-offset-key="2172:0" data-first-offset="true"><span 
class="se-d5fc55fb" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">UCD 
工程师</span></span></span></span><span data-slate-object="text" data-key="2173"><span data-slate-leaf="true" 
data-offset-key="2173:0" data-first-offset="true"><span data-slate-string="true">，和用户沟通相对紧密，主导产品的界面设计和使用设计，然后把设计方案（多数是 
PPT 一类的文档）交给</span></span></span><span data-slate-object="text" data-key="2174"><span data-slate-leaf="true" 
data-offset-key="2174:0" data-first-offset="true"><span class="se-f702dbf3" data-slate-type="bold" 
data-slate-object="mark"><span data-slate-string="true">负责设计的美工</span></span></span></span><span 
data-slate-object="text" data-key="2175"><span data-slate-leaf="true" data-offset-key="2175:0" 
data-first-offset="true"><span data-slate-string="true">；而负责设计的美工，将方案落实到 Photoshop 的 psd 设计文件中，再交给另一波</span></span></span><span 
data-slate-object="text" data-key="2176"><span data-slate-leaf="true" data-offset-key="2176:0" 
data-first-offset="true"><span class="se-3cf95ad6" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">负责快速原型的美工</span></span></span></span><span data-slate-object="text" 
data-key="2177"><span data-slate-leaf="true" data-offset-key="2177:0" data-first-offset="true"><span 
data-slate-string="true">；而这一波美工会将设计落实成一个 HTML 的快速原型，交到最终负责开发的工程师手里。</span></span></span> </div> 
<div class="se-ed458a83 " data-slate-type="paragraph" data-slate-object="block" data-key="2178"> 
<span data-slate-object="text" data-key="2179"><span data-slate-leaf="true" data-offset-key="2179:0" 
data-first-offset="true"><span class="se-b9d5399a" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">QA</span></span></span></span><span data-slate-object="text" data-key="2180"><span 
data-slate-leaf="true" data-offset-key="2180:0" data-first-offset="true"><span data-slate-string="true">，这个质量保证的角色命名上其实有点奇怪，因为他们不做测试，而是专门监管流程质量，既包括研发流程，也做一些代码静态分析的工作，总的来说算是一份闲差。他们平时不出现，出现也不检查架构，不检查设计，而是要检查项目的各种工具指标，比如什么测试覆盖率、圈复杂度、代码重复率等等。显然，很多工程师都不喜欢这些束手束脚的东西。</span></span></span> 
</div> <div class="se-fcd61c47 " data-slate-type="paragraph" data-slate-object="block" data-key="2181"> 
<span data-slate-object="text" data-key="2182"><span data-slate-leaf="true" data-offset-key="2182:0" 
data-first-offset="true"><span data-slate-string="true">最后，也是人数最多的，那就是</span></span></span><span 
data-slate-object="text" data-key="2183"><span data-slate-leaf="true" data-offset-key="2183:0" 
data-first-offset="true"><span class="se-c1ee8065" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">开发</span></span></span></span><span data-slate-object="text" data-key="2184"><span 
data-slate-leaf="true" data-offset-key="2184:0" data-first-offset="true"><span data-slate-string="true">，也就是程序员，这是整个研发体系的大军。前面已经提到了，需求总是从 
SE 那里来的，如果是项目内部改进的需求，也需要开发出文档，再汇总到 SE 的需求列表里面去。绝大部分时间里，大家的任务都是按功能特性划分，而不是按照软件层次划分的，也就是说从工作应用的 
Web 技术栈上看，确实是真正的“全栈”。作为基线版本的开发，我们不需要管上线之后的事情，因为有专门的运维人员第一时间来处理，而那些解决不了的问题和软件上的 bug 到了定制版本的研发团队那里，也多半被消化掉了，只有少数的具备共性的问题，才会送到基线版本的研发团队手里。</span></span></span> 
</div> <h2 class="se-8ee2adcb" data-slate-type="heading" data-slate-object="block" data-key="2185"><span 
data-slate-object="text" data-key="2186"><span data-slate-leaf="true" data-offset-key="2186:0" 
data-first-offset="true"><span data-slate-string="true">Amazon</span></span></span></h2> <div 
class="se-859433a9 " data-slate-type="paragraph" data-slate-object="block" data-key="2187"> 
<span data-slate-object="text" data-key="2188"><span data-slate-leaf="true" data-offset-key="2188:0" 
data-first-offset="true"><span data-slate-string="true">在亚马逊，我经历了两个比较大的全栈团队，一个是销量预测团队，一个是成本和利润计算的团队。</span></span></span> 
</div> <div class="se-d67a8467 " data-slate-type="paragraph" data-slate-object="block" data-key="2189"> 
<span data-slate-object="text" data-key="2190"><span data-slate-leaf="true" data-offset-key="2190:0" 
data-first-offset="true"><span data-slate-string="true">这两个团队中，前者的核心就是为亚马逊所有的商品预测销量，后者则是计算成本和利润，二者的实时性都比较高，数据量也都比较大，它们的技术栈类似，涉及机器学习、大数据处理、分布式任务管理、数据可视化等等，从整体看明显也是一个全栈团队，且角色构成也是较为丰富的。</span></span></span> 
</div> <div class="se-cbd57915 " data-slate-type="paragraph" data-slate-object="block" data-key="2191"> 
<span data-slate-object="text" data-key="2192"><span data-slate-leaf="true" data-offset-key="2192:0" 
data-first-offset="true"><span data-slate-string="true">团队经理的角色依然存在，对于每一个小团队来说，经理就是 </span></span></span><span 
data-slate-object="text" data-key="2193"><span data-slate-leaf="true" data-offset-key="2193:0" 
data-first-offset="true"><span class="se-3788223d" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Dev Manager</span></span></span></span><span data-slate-object="text" 
data-key="2194"><span data-slate-leaf="true" data-offset-key="2194:0" data-first-offset="true"><span 
data-slate-string="true">，多数是软件工程师出身。只要不是跨团队的大项目，一般规模的项目都由 Dev Manager 牵头负责，小项目则由资深的工程师自己牵头负责。因此，项目经理这个角色，其实并不经常提起。</span></span></span> 
</div> <div class="se-5570e988 " data-slate-type="paragraph" data-slate-object="block" data-key="2195"> 
<span data-slate-object="text" data-key="2196"><span data-slate-leaf="true" data-offset-key="2196:0" 
data-first-offset="true"><span class="se-abf3f843" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">TPM</span></span></span></span><span data-slate-object="text" data-key="2197"><span 
data-slate-leaf="true" data-offset-key="2197:0" data-first-offset="true"><span data-slate-string="true">（Technical 
Project Manager）担任起了产品经理的角色，负责业务需求的分析、设计和跟踪。如果项目是跨团队的，那么项目会有专职 TPM 来负责团队之间的协调。这个角色需要对业务非常熟悉，而技术层面要求不高。因为大团队是偏向于数据处理的，因此 
TPM 如果有技术背景更好，但是那样的人才会非常难找。我知道某些公司要求这样的角色也有软件工程师背景，但是就我所经历的公司和我所了解的绝大多数公司的情况，并不是这样的。</span></span></span> 
</div> <div class="se-50dc8cf6 " data-slate-type="paragraph" data-slate-object="block" data-key="2198"> 
<span data-slate-object="text" data-key="2199"><span data-slate-leaf="true" data-offset-key="2199:0" 
data-first-offset="true"><span data-slate-string="true">值得一提的是，这两个团队都没有设 QA 的职位。</span></span></span><span 
data-slate-object="text" data-key="2200"><span data-slate-leaf="true" data-offset-key="2200:0" 
data-first-offset="true"><span class="se-9e1a1406" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">QA</span></span></span></span><span data-slate-object="text" data-key="2201"><span 
data-slate-leaf="true" data-offset-key="2201:0" data-first-offset="true"><span data-slate-string="true"> 
其实就是专职的测试，不过这样的角色在亚马逊的大多数团队中基本消失了。说基本消失，是因为绝大多数团队中，负责开发的工程师就把自己团队的产品测试工作给承包了，因此并不设立单独的测试岗位。当然，对于直接面向互联网和大众的产品，特别是包含复杂 
UI 的产品，还能看到少量专职的测试工程师的存在，来负责部分专门的测试工作，当然，这一职位，很多时候是外包出去的。</span></span></span> </div> <div 
class="se-2fe6c3b5 " data-slate-type="paragraph" data-slate-object="block" data-key="2202"> 
<span data-slate-object="text" data-key="2203"><span data-slate-leaf="true" data-offset-key="2203:0" 
data-first-offset="true"><span class="se-2bf85c50" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">SDE</span></span></span></span><span data-slate-object="text" data-key="2204"><span 
data-slate-leaf="true" data-offset-key="2204:0" data-first-offset="true"><span data-slate-string="true">，全称是 
Software Development Engineer，是主力军，也是粘合剂，不只是在技术层面上看是全栈的，就做的工作的类型上看也是（即从需求澄清、功能分解、任务跟踪，到开发、测试、部署、维护，全部都是开发人员做的，这点和华为的经历有所不同）。当然，对于工程层面的项目设计，也是有经验的工程师主导的，这个和前面说得差不多。在亚马逊有句对 
SDE 戏谑的解释叫做“Someone Does Everything”。而所有的最小的团队，每个团队一般只有几个人，“Pizza Team”的称呼就是这么来的，就是说，团队的人用两张披萨就能喂饱，如果团队规模扩张到了超过 
Pizza Team 的程度，就要拆分。</span></span></span> </div> <div class="se-ca87ff69 " data-slate-type="paragraph" 
data-slate-object="block" data-key="2205"> <span data-slate-object="text" data-key="2206"><span 
data-slate-leaf="true" data-offset-key="2206:0" data-first-offset="true"><span data-slate-string="true">有时候，当前端工作的需求量特别大，团队就会规划招一个和 
SDE 类似的特殊角色——WDE。</span></span></span><span data-slate-object="text" data-key="2207"><span 
data-slate-leaf="true" data-offset-key="2207:0" data-first-offset="true"><span class="se-02932979" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">WDE</span></span></span></span><span 
data-slate-object="text" data-key="2208"><span data-slate-leaf="true" data-offset-key="2208:0" 
data-first-offset="true"><span data-slate-string="true"> 就是 Web Development Engineer，有点像国内的“前端工程师”的角色了。也就是说，亚马逊只有 
SDE 和 WDE，没有“后端工程师”这样的角色定位。说实话，这个角色设置得有些奇怪，在公司内部也颇受争议，争议的部分主要在于，这个角色的工程师应该怎样考察，衡量的标准在哪里。哪些方面必须比一般的 
SDE 要求高可能好说，比如前端的工程能力，但是可以允许在哪些方面比一般的 SDE 低却不好说。而且从高级别的工程师比例来看，和 SDE 比起来，WDE 的发展往往容易受到挤压和限制。</span></span></span> 
</div> <div class="se-2268bc20 " data-slate-type="paragraph" data-slate-object="block" data-key="2209"> 
<span data-slate-object="text" data-key="2210"><span data-slate-leaf="true" data-offset-key="2210:0" 
data-first-offset="true"><span data-slate-string="true">因为我所在的两个团队都是偏重数据的团队，因此其中还有许多 </span></span></span><span 
data-slate-object="text" data-key="2211"><span data-slate-leaf="true" data-offset-key="2211:0" 
data-first-offset="true"><span class="se-633fbea3" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Data Analyst</span></span></span></span><span data-slate-object="text" 
data-key="2212"><span data-slate-leaf="true" data-offset-key="2212:0" data-first-offset="true"><span 
data-slate-string="true">，也就是数据分析师，他们和软件工程师的比例大致是 1:3，擅长和数据打交道，SQL 用得滚瓜烂熟，需要经常扎到数据堆里调查业务问题。这里面有一个很有意思的事情是，他们使用的很多工具，都是需要 
SDE 来开发维护的，有时候 SDE 工作过于繁忙，来不及处理这样的问题，他们就被迫“Dev 化”，自己尝试去解决本该由 SDE 来处理的工具问题。</span></span></span> 
</div> <div class="se-846ae181 " data-slate-type="paragraph" data-slate-object="block" data-key="2213"> 
<span data-slate-object="text" data-key="2214"><span data-slate-leaf="true" data-offset-key="2214:0" 
data-first-offset="true"><span data-slate-string="true">另外，经常和数据打交道的还有一类人数不多的角色，叫做 </span></span></span><span 
data-slate-object="text" data-key="2215"><span data-slate-leaf="true" data-offset-key="2215:0" 
data-first-offset="true"><span class="se-cfa833fb" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Data Scientist</span></span></span></span><span data-slate-object="text" 
data-key="2216"><span data-slate-leaf="true" data-offset-key="2216:0" data-first-offset="true"><span 
data-slate-string="true">，有一种戏谑的说法是“Data Scientist is Data Analyst in California”，这足见二者在技术能力和工作范畴上有一定的相似度。但是 
Data Scientist 更多地要涉足机器学习，要基于数据建立起合适的模型，因此他们都有相当的专业背景。在我待过的那个销量预测团队中，预测的模型最开始就是他们建立起来并逐步调优的。</span></span></span> 
</div> <div class="se-bb050466 " data-slate-type="paragraph" data-slate-object="block" data-key="2217"> 
<span data-slate-object="text" data-key="2218"><span data-slate-leaf="true" data-offset-key="2218:0" 
data-first-offset="true"><span data-slate-string="true">接着是 </span></span></span><span data-slate-object="text" 
data-key="2219"><span data-slate-leaf="true" data-offset-key="2219:0" data-first-offset="true"><span 
class="se-08aa1861" data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Program 
Manager</span></span></span></span><span data-slate-object="text" data-key="2220"><span data-slate-leaf="true" 
data-offset-key="2220:0" data-first-offset="true"><span data-slate-string="true">，这个角色定位本身比较模糊，而我的观察是，他们很擅长和用户打交道，需要接触并回答用户的问题。和 
TPM 不同的是，他们很少负责用户需求。这样的职位不多，但是用户提的问题多了，沟通的活儿多了，就需要这样的角色来分担压力。在同等用户量的情况下，东西做得越好，越容易使用，这样的角色就越是不需要的；而越是做得烂的产品，或者说是不成熟的产品，才越是需要有人不断地去回答问题。</span></span></span> 
</div> <div class="se-3487c5ef " data-slate-type="paragraph" data-slate-object="block" data-key="2221"> 
<span data-slate-object="text" data-key="2222"><span data-slate-leaf="true" data-offset-key="2222:0" 
data-first-offset="true"><span class="se-c7e97f40" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">Supporting Engineer</span></span></span></span><span data-slate-object="text" 
data-key="2223"><span data-slate-leaf="true" data-offset-key="2223:0" data-first-offset="true"><span 
data-slate-string="true">，这几乎可以说就是个苦差事，他们做的其实就是运维（Ops）的活儿。事实上，多数的团队中，SDE 把测试的活儿都干了，也把大部分运维的活都给干了，通过运维的痛苦来反哺开发。有句话叫做“吃自己的狗食”（Eat 
Your Own Dog Food），就是说，SDE 自己开发埋的坑，自己不好好测试漏掉的坑，就要自己在 oncall 的时候半夜爬起来响应，并痛苦地解决线上问题。因此让 SDE 来运维肯定是首选，但是某些团队由于业务量等等的原因，SDE 
干不过来，特别是在非工作时间发生问题的时候，于是支持工程师这样的角色就应运而生了。因为不同时差和低人力成本的关系，有一些这样的角色包给印度团队去做了。当然，也有很多团队，SDE 就在轮流干这样的活儿，其实也没有差别了，只是明面上的职位名称不同而已。你可以联想一下 
AWS 如今的规模，这样的运维需求其实还是非常巨大的。当然，一般来说，在同等业务规模的情况下，产品做得越好，支持工程师的需求量就应该越少。</span></span></span> 
</div> <h2 class="se-238026df" data-slate-type="heading" data-slate-object="block" data-key="2224"><span 
data-slate-object="text" data-key="2225"><span data-slate-leaf="true" data-offset-key="2225:0" 
data-first-offset="true"><span data-slate-string="true">Oracle</span></span></span></h2> <div 
class="se-9c8abe5e " data-slate-type="paragraph" data-slate-object="block" data-key="2226"> 
<span data-slate-object="text" data-key="2227"><span data-slate-leaf="true" data-offset-key="2227:0" 
data-first-offset="true"><span data-slate-string="true">如今我呆的 OCI 的团队，依然是一个全栈团队，它的主要角色类型其实也差不太多。但是由于团队普遍比较新，一些以往需要其他专职角色干的活儿，目前还是由 
SDE 来完成的。</span></span></span> </div> <div class="se-4da4333f " data-slate-type="paragraph" 
data-slate-object="block" data-key="2228"> <span data-slate-object="text" data-key="2229"><span 
data-slate-leaf="true" data-offset-key="2229:0" data-first-offset="true"><span data-slate-string="true">这就是今天的全部内容，你对这些角色有什么看法？在你所经历的团队中，人员的角色构成又是怎样的呢？不妨分享一下吧。</span></span></span> 
</div> <div class="se-bd54326f" data-slate-type="image" data-slate-object="block" data-key="2230"> 
<img class="se-be687bac" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 3 msec}
2020-11-19 11:17:03.693 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=28 
 {executed in 0 msec}
2020-11-19 11:17:03.694 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:17:03.694 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=28 
 {executed in 0 msec}
2020-11-19 11:17:03.695 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:17:03.696 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755823, 1605755823, 1, 'zh-hans', 0, 1, 1, 
0, '20丨特别放送：全栈团队的角色构成', 1, 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.699 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=28 
 {executed in 0 msec}
2020-11-19 11:17:03.699 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:17:03.700 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755823, 1605755823, 1, 'zh-hans', 0, 
1, 1, 0, '20丨特别放送：全栈团队的角色构成', 'book', 1, 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.703 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.703 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:03.704 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.704 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:03.705 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/475c753f193297b95195c3dbf43cb3bf?bkt=en-2e2b5030dd6ff037173273e38ce1572d7519338feb78d7ce10cd0f5739d419b581a3ecd418894fd9&fid=3757516097-778750-383783754792404&time=1605755822&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-PtRA4KBuWINCUY5gLbChjXIedVM%3D&to=92&size=13680477&sta_dx=13680477&sta_cs=3477&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250751&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13680477&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-7fd2477734f3135986ed358418a2d21f30f16a9779e96cf379c3d9b4aa688abf53921ecee694789d&sl=76480590&expires=8h&rt=pr&r=790152918&mlogid=7502186308220215813&vbdid=2247232042&fin=20%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E5%85%A8%E6%A0%88%E5%9B%A2%E9%98%9F%E7%9A%84%E8%A7%92%E8%89%B2%E6%9E%84%E6%88%90.m4a&bflag=92,34-92&rtype=1&dp-logid=7502186308220215813&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f54250ac002b6151d5e8543ef83a2a39cd32c4&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=20%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E5%85%A8%E6%A0%88%E5%9B%A2%E9%98%9F%E7%9A%84%E8%A7%92%E8%89%B2%E6%9E%84%E6%88%90.m4a', 
28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.708 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.708 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:03.709 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/475c753f193297b95195c3dbf43cb3bf?bkt=en-2e2b5030dd6ff037173273e38ce1572d7519338feb78d7ce10cd0f5739d419b581a3ecd418894fd9&fid=3757516097-778750-383783754792404&time=1605755822&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-PtRA4KBuWINCUY5gLbChjXIedVM%3D&to=92&size=13680477&sta_dx=13680477&sta_cs=3477&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250751&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=13680477&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-7fd2477734f3135986ed358418a2d21f30f16a9779e96cf379c3d9b4aa688abf53921ecee694789d&sl=76480590&expires=8h&rt=pr&r=790152918&mlogid=7502186308220215813&vbdid=2247232042&fin=20%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E5%85%A8%E6%A0%88%E5%9B%A2%E9%98%9F%E7%9A%84%E8%A7%92%E8%89%B2%E6%9E%84%E6%88%90.m4a&bflag=92,34-92&rtype=1&dp-logid=7502186308220215813&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=90e00819b6f54250ac002b6151d5e8543ef83a2a39cd32c4&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=20%E4%B8%A8%E7%89%B9%E5%88%AB%E6%94%BE%E9%80%81%EF%BC%9A%E5%85%A8%E6%A0%88%E5%9B%A2%E9%98%9F%E7%9A%84%E8%A7%92%E8%89%B2%E6%9E%84%E6%88%90.m4a', 
28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.712 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.713 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:03.713 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.714 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:03.715 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>leslie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-25 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 不过现在的OPS有时其实是要自己写或者改造监控工具的：可能现在的OPS仅仅是以某项为主其它为辅。自己在目前的Team算是DBA&amp;&amp;OPS,不过相关的监控工具要自己写或者对开源产品做二次开发，网络自己常规的同样懂；只能说是以DB为主其它为辅而已。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.718 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.718 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:03.719 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>leslie</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-25 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0"> 不过现在的OPS有时其实是要自己写或者改造监控工具的：可能现在的OPS仅仅是以某项为主其它为辅。自己在目前的Team算是DBA&amp;&amp;OPS,不过相关的监控工具要自己写或者对开源产品做二次开发，网络自己常规的同样懂；只能说是以DB为主其它为辅而已。 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <!----> <div 
class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.722 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.722 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:03.723 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.723 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:03.724 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 28, 'https://static001.geekbang.org/resource/image/c2/5b/c2ce7aecce15903fc175cfe82c00d65b.jpg', 
28) 
 {executed in 0 msec}
2020-11-19 11:17:03.727 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=28 
 {executed in 1 msec}
2020-11-19 11:17:03.727 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:03.728 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 28, 'https://static001.geekbang.org/resource/image/c2/5b/c2ce7aecce15903fc175cfe82c00d65b.jpg', 
28) 
 {executed in 0 msec}
2020-11-19 11:17:03.731 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.731 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:17:03.732 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:03.735 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=28 
 {executed in 0 msec}
2020-11-19 11:17:03.735 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:17:03.736 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 28, 28) 
 {executed in 0 msec}
2020-11-19 11:17:52.217 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_, bookfieldf0_.bundle as bundle2_6_, bookfieldf0_.delta 
as delta3_6_, bookfieldf0_.field_fsid_value as field_fs4_6_, bookfieldf0_.langcode as langcode5_6_, 
bookfieldf0_.revision_id as revision6_6_ from node__field_fsid bookfieldf0_ where bookfieldf0_.field_fsid_value='148350454363806' 
 {executed in 1 msec}
2020-11-19 11:17:52.218 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:52.220 INFO  jdbc.sqltiming Line:373 - insert into node_revision (langcode, nid, revision_default, revision_timestamp, revision_uid) 
values ('zh-hans', 0, 1, 1605755872, 1) 
 {executed in 1 msec}
2020-11-19 11:17:52.221 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node_revision (langcode, nid, revision_default, revision_timestamp, 
revision_uid) values ('zh-hans', 0, 1, 1605755872, 1) 
 {executed in 0 msec}
2020-11-19 11:17:52.221 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|29            |
|--------------|

2020-11-19 11:17:52.228 INFO  jdbc.sqltiming Line:373 - insert into node (langcode, type, uuid, vid) values ('zh-hans', 'book', 'ddb38bd8-d63e-49d8-927d-f09c03289d8c', 
29) 
 {executed in 1 msec}
2020-11-19 11:17:52.228 INFO  jdbc.sqltiming Line:373 - getGeneratedKeys on query: insert into node (langcode, type, uuid, vid) values ('zh-hans', 
'book', 'ddb38bd8-d63e-49d8-927d-f09c03289d8c', 29) 
 {executed in 0 msec}
2020-11-19 11:17:52.229 INFO  jdbc.resultsettable Line:610 - 
|--------------|
|generated_key |
|--------------|
|29            |
|--------------|

2020-11-19 11:17:52.235 INFO  jdbc.sqltiming Line:373 - update node_revision set langcode='zh-hans', nid=29, revision_default=1, revision_timestamp=1605755872, 
revision_uid=1 where vid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.240 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_6_0_, bookfieldf0_.bundle as bundle2_6_0_, bookfieldf0_.delta 
as delta3_6_0_, bookfieldf0_.field_fsid_value as field_fs4_6_0_, bookfieldf0_.langcode as langcode5_6_0_, 
bookfieldf0_.revision_id as revision6_6_0_ from node__field_fsid bookfieldf0_ where bookfieldf0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.240 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:52.243 INFO  jdbc.sqltiming Line:373 - insert into node__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, entity_id) 
values ('book', 0, '148350454363806', 'zh-hans', 29, 29) 
 {executed in 1 msec}
2020-11-19 11:17:52.252 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_15_0_, nodefieldf0_.bundle as bundle2_15_0_, nodefieldf0_.delta 
as delta3_15_0_, nodefieldf0_.field_fsid_value as field_fs4_15_0_, nodefieldf0_.langcode as 
langcode5_15_0_, nodefieldf0_.revision_id as revision6_15_0_ from node_revision__field_fsid 
nodefieldf0_ where nodefieldf0_.entity_id=29 
 {executed in 3 msec}
2020-11-19 11:17:52.252 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------|---------|------------|
|entity_id |bundle |delta |field_fsid_value |langcode |revision_id |
|----------|-------|------|-----------------|---------|------------|
|----------|-------|------|-----------------|---------|------------|

2020-11-19 11:17:52.254 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fsid (bundle, delta, field_fsid_value, langcode, revision_id, 
entity_id) values ('book', 0, '148350454363806', 'zh-hans', 29, 29) 
 {executed in 0 msec}
2020-11-19 11:17:52.261 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_, bookentity0_.bid as bid2_1_, bookentity0_.depth as depth3_1_, 
bookentity0_.has_children as has_chil4_1_, bookentity0_.p1 as p5_1_, bookentity0_.p2 as p6_1_, 
bookentity0_.p3 as p7_1_, bookentity0_.p4 as p8_1_, bookentity0_.p5 as p9_1_, bookentity0_.pid 
as pid10_1_, bookentity0_.weight as weight11_1_ from book bookentity0_ where bookentity0_.nid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.262 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:17:52.263 INFO  jdbc.sqltiming Line:373 - select bookentity0_.nid as nid1_1_0_, bookentity0_.bid as bid2_1_0_, bookentity0_.depth as 
depth3_1_0_, bookentity0_.has_children as has_chil4_1_0_, bookentity0_.p1 as p5_1_0_, bookentity0_.p2 
as p6_1_0_, bookentity0_.p3 as p7_1_0_, bookentity0_.p4 as p8_1_0_, bookentity0_.p5 as p9_1_0_, 
bookentity0_.pid as pid10_1_0_, bookentity0_.weight as weight11_1_0_ from book bookentity0_ 
where bookentity0_.nid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.263 INFO  jdbc.resultsettable Line:610 - 
|----|----|------|-------------|---|---|---|---|---|----|-------|
|nid |bid |depth |has_children |p1 |p2 |p3 |p4 |p5 |pid |weight |
|----|----|------|-------------|---|---|---|---|---|----|-------|
|----|----|------|-------------|---|---|---|---|---|----|-------|

2020-11-19 11:17:52.265 INFO  jdbc.sqltiming Line:373 - insert into book (bid, depth, has_children, p1, p2, p3, p4, p5, pid, weight, nid) values (1, 
3, 0, 1, 27, 29, 0, 0, 27, 0, 29) 
 {executed in 1 msec}
2020-11-19 11:17:52.269 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_, nodebodyen0_.body_value as body_val2_3_, nodebodyen0_.body_summary 
as body_sum3_3_, nodebodyen0_.bundle as bundle4_3_, nodebodyen0_.delta as delta5_3_, nodebodyen0_.body_format 
as body_for6_3_, nodebodyen0_.langcode as langcode7_3_, nodebodyen0_.revision_id as revision8_3_ 
from node__body nodebodyen0_ where nodebodyen0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 11:17:52.269 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:52.270 INFO  jdbc.sqltiming Line:373 - select nodebodyre0_.entity_id as entity_i1_12_0_, nodebodyre0_.body_value as body_val2_12_0_, 
nodebodyre0_.body_summary as body_sum3_12_0_, nodebodyre0_.bundle as bundle4_12_0_, nodebodyre0_.delta 
as delta5_12_0_, nodebodyre0_.body_format as body_for6_12_0_, nodebodyre0_.langcode as langcode7_12_0_, 
nodebodyre0_.revision_id as revision8_12_0_ from node_revision__body nodebodyre0_ where nodebodyre0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.271 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:52.282 INFO  jdbc.sqltiming Line:373 - insert into node_revision__body (body_value, body_summary, bundle, delta, body_format, langcode, 
revision_id, entity_id) values ('<div data-slate-editor="true" data-key="945" autocorrect="off" 
spellcheck="false" data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: 
break-word;"> <div class="se-de9c851f " data-slate-type="paragraph" data-slate-object="block" 
data-key="946"> <span data-slate-object="text" data-key="947"><span data-slate-leaf="true" 
data-offset-key="947:0" data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> 
</div> <div class="se-918b471e " data-slate-type="paragraph" data-slate-object="block" data-key="948"> 
<span data-slate-object="text" data-key="949"><span data-slate-leaf="true" data-offset-key="949:0" 
data-first-offset="true"><span data-slate-string="true">我们在本章伊始的 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="950" class="se-575a6467 se-198d4f97"><span data-slate-object="text" 
data-key="951"><span data-slate-leaf="true" data-offset-key="951:0" data-first-offset="true"><span 
data-slate-string="true">[第 14 讲]</span></span></span></a><span data-slate-object="text" data-key="952"><span 
data-slate-leaf="true" data-offset-key="952:0" data-first-offset="true"><span data-slate-string="true"> 
中初步学习了 JavaScript 的事件驱动模型，体会到了思维模式的转变，也建立起了异步编程的初步概念。在本章最后一讲，我们将深入异步编程，继续探讨其中的关键技术。</span></span></span> 
</div> <div class="se-55383120 " data-slate-type="paragraph" data-slate-object="block" data-key="953"> 
<span data-slate-object="text" data-key="954"><span data-slate-leaf="true" data-offset-key="954:0" 
data-first-offset="true"><span data-slate-string="true">异步编程就像是一个神秘的宝盒，看起来晶莹剔透，可一旦使用不当，就会是带来灾难的潘多拉盒子，状态混乱，难以维护。希望在这一讲之后，你可以了解更多的关于 
JavaScript 在异步编程方面的高级特性，从而习惯并写出可靠的异步代码。</span></span></span> </div> <h2 class="se-e7a79a27" 
data-slate-type="heading" data-slate-object="block" data-key="955"><span data-slate-object="text" 
data-key="956"><span data-slate-leaf="true" data-offset-key="956:0" data-first-offset="true"><span 
data-slate-string="true">1. 用 Promise 优化嵌套回调</span></span></span></h2> <div class="se-d54b5234 
" data-slate-type="paragraph" data-slate-object="block" data-key="957"> <span data-slate-object="text" 
data-key="958"><span data-slate-leaf="true" data-offset-key="958:0" data-first-offset="true"><span 
data-slate-string="true">假如我们需要写这样一段代码，来模拟一只小狗向前奔跑，它一共跑了 3 次，奔跑的距离分别为 1、2、3，每次奔跑都要花费 1 秒钟时间：</span></span></span> 
</div> <div class="se-67c417b3 se-a4272bdc" data-slate-type="pre" data-slate-object="block" 
data-key="959" data-code-language="javascript"> <div class="se-e589d2c5 se-03f91372"> <span></span> 
</div> <div class="se-5df4fb31"> <div class="se-39823e9f se-086df542" data-code-line-number="1"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="2"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="3"></div> <div class="se-39823e9f se-086df542" data-code-line-number="4"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="5"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="6"></div> <div class="se-39823e9f se-086df542" data-code-line-number="7"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="8"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="9"></div> <div class="se-39823e9f se-086df542" data-code-line-number="10"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="11"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="12"></div> <div class="se-39823e9f se-086df542" data-code-line-number="13"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="14"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="15"></div> <div class="se-39823e9f se-086df542" data-code-line-number="16"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="17"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="18"></div> </div> <div class="se-e25cb6d4 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="960"> <span data-slate-object="text" 
data-key="961"><span data-slate-leaf="true" data-offset-key="961:0" data-first-offset="true"><span 
data-slate-string="true">setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="962"> <span data-slate-object="text" 
data-key="963"><span data-slate-leaf="true" data-offset-key="963:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="963:1"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_7353051967" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6005259727" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="963:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6005259727" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="963:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="964"> <span data-slate-object="text" data-key="965"><span 
data-slate-leaf="true" data-offset-key="965:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="965:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_8644002412" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="965:2"><span 
data-slate-string="true">.log(</span></span><span data-slate-leaf="true" data-offset-key="965:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_1325559615" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="965:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="966"> <span data-slate-object="text" data-key="967"><span data-slate-leaf="true" 
data-offset-key="967:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="968"> <span data-slate-object="text" data-key="969"><span data-slate-leaf="true" 
data-offset-key="969:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="969:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0819417133" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_6277338948" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="969:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0819417133" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="969:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="970"> <span data-slate-object="text" data-key="971"><span data-slate-leaf="true" 
data-offset-key="971:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="971:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6676927967" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="971:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="971:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2213390099" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="971:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="972"> <span data-slate-object="text" data-key="973"><span data-slate-leaf="true" 
data-offset-key="973:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="974"> <span data-slate-object="text" data-key="975"><span data-slate-leaf="true" 
data-offset-key="975:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="975:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2421624262" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_4669058827" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="975:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2421624262" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="975:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="976"> <span data-slate-object="text" data-key="977"><span data-slate-leaf="true" 
data-offset-key="977:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="977:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8673553610" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="977:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="977:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5162212816" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="977:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="978"> <span data-slate-object="text" data-key="979"><span data-slate-leaf="true" 
data-offset-key="979:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="980"> <span data-slate-object="text" data-key="981"><span data-slate-leaf="true" 
data-offset-key="981:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="981:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8260756562" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="982"> <span data-slate-object="text" data-key="983"><span data-slate-leaf="true" 
data-offset-key="983:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="984"> <span data-slate-object="text" data-key="985"><span data-slate-leaf="true" 
data-offset-key="985:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="986"> <span data-slate-object="text" data-key="987"><span data-slate-leaf="true" 
data-offset-key="987:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="987:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9103397021" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="988"> <span data-slate-object="text" data-key="989"><span data-slate-leaf="true" 
data-offset-key="989:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="990"> <span data-slate-object="text" data-key="991"><span data-slate-leaf="true" 
data-offset-key="991:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="992"> <span data-slate-object="text" data-key="993"><span data-slate-leaf="true" 
data-offset-key="993:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="993:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1822995045" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="994"> <span data-slate-object="text" data-key="995"><span data-slate-leaf="true" 
data-offset-key="995:0" data-first-offset="true"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-266328b3 " data-slate-type="paragraph" data-slate-object="block" data-key="996"> 
<span data-slate-object="text" data-key="997"><span data-slate-leaf="true" data-offset-key="997:0" 
data-first-offset="true"><span data-slate-string="true">你看，我们用了 3 次 setTimeout，每次都接受两个参数，第一个参数是一个函数，用以打印当前跑的距离，以及递归调用奔跑逻辑，第二个参数用于模拟奔跑耗时 
1000 毫秒。这个问题其实代表了实际编程中一类很常见的 JavaScript 异步编程问题。例如，使用 Ajax 方式异步获取一个请求，在得到返回的结果后，再执行另一个 Ajax 
操作。</span></span></span> </div> <div class="se-38e95e83 " data-slate-type="paragraph" data-slate-object="block" 
data-key="998"> <span data-slate-object="text" data-key="999"><span data-slate-leaf="true" 
data-offset-key="999:0" data-first-offset="true"><span data-slate-string="true">现在，请你打开 Chrome 
开发者工具中的控制台，运行一下：</span></span></span> </div> <div class="se-dc4bf5c3 se-9acbca5c" data-slate-type="pre" 
data-slate-object="block" data-key="1000"> <div class="se-4b9bdab2 se-b77495b5"> <span></span> 
</div> <div class="se-89804381"> <div class="se-0d4287bb se-12957da0" data-code-line-number="1"></div> 
<div class="se-0d4287bb se-12957da0" data-code-line-number="2"></div> <div class="se-0d4287bb 
se-12957da0" data-code-line-number="3"></div> <div class="se-0d4287bb se-12957da0" data-code-line-number="4"></div> 
</div> <div class="se-88d3d8e1 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1001"> <span data-slate-object="text" data-key="1002"><span 
data-slate-leaf="true" data-offset-key="1002:0" data-first-offset="true"><span data-slate-string="true">3693</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1003"> <span data-slate-object="text" data-key="1004"><span data-slate-leaf="true" 
data-offset-key="1004:0" data-first-offset="true"><span data-slate-string="true">1</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1005"> <span data-slate-object="text" data-key="1006"><span data-slate-leaf="true" 
data-offset-key="1006:0" data-first-offset="true"><span data-slate-string="true">2</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1007"> <span data-slate-object="text" data-key="1008"><span data-slate-leaf="true" 
data-offset-key="1008:0" data-first-offset="true"><span data-slate-string="true">3</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-52dee717 " data-slate-type="paragraph" data-slate-object="block" data-key="1009"> 
<span data-slate-object="text" data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" 
data-first-offset="true"><span data-slate-string="true">第一行是 setTimeout 返回的句柄，由于控制台运行的关系，系统会把最后一行执行的返回值打印出来，因此它可以忽略。除此之外，结果恰如预期，每一行的打印都间隔了一秒，模拟了奔跑的效果。</span></span></span> 
</div> <div class="se-40e26bbb " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">但是，这个代码似乎不太“好看”啊，繁琐而且冗长，易理解性和可维护性显然不过关，代码的状态量在这种情况下很难预测和维护。就如同同步编程世界中常见的“</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1013" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="1014"><span data-slate-leaf="true" data-offset-key="1014:0" 
data-first-offset="true"><span data-slate-string="true">面条代码</span></span></span></a><span 
data-slate-object="text" data-key="1015"><span data-slate-leaf="true" data-offset-key="1015:0" 
data-first-offset="true"><span data-slate-string="true">（Spaghetti Code）”一样，这样“坏味道”的代码在异步编程的世界中其实也很常见，且也有个专有称呼——“金字塔厄运”（Pyramid 
of Doom，嵌套结构就像金字塔一样）。</span></span></span> </div> <div class="se-20280094 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1016"> <span data-slate-object="text" data-key="1017"><span 
data-slate-leaf="true" data-offset-key="1017:0" data-first-offset="true"><span data-slate-string="true">到这里，不知你会不会想，能不能把重复的逻辑抽取出来呢？具体说，就是这个 
setTimeout 方法相关的代码。于是，我们可以抽取公用逻辑，定义一个 run 方法，接受两个参数，一个是当前跑动距离，第二个是回调方法，用于当前跑完以后，触发下一次跑动的行为：</span></span></span> 
</div> <div class="se-d1d08a2a se-eb5bbcda" data-slate-type="pre" data-slate-object="block" 
data-key="1018" data-code-language="typescript"> <div class="se-4e18da44 se-115da660"> <span></span> 
</div> <div class="se-1565a0c7"> <div class="se-db86861e se-ae800546" data-code-line-number="1"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="2"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="3"></div> <div class="se-db86861e se-ae800546" data-code-line-number="4"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="5"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="6"></div> <div class="se-db86861e se-ae800546" data-code-line-number="7"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="8"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="9"></div> <div class="se-db86861e se-ae800546" data-code-line-number="10"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="11"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="12"></div> <div class="se-db86861e se-ae800546" data-code-line-number="13"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="14"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="15"></div> </div> <div class="se-ada9d1b3 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1019"> <span data-slate-object="text" 
data-key="1020"><span data-slate-leaf="true" data-offset-key="1020:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6392354210" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1020:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1020:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2074961370" data-annotation-type="annotation"><span data-slate-string="true">(steps, 
callback) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1020:3"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1021"> <span data-slate-object="text" 
data-key="1022"><span data-slate-leaf="true" data-offset-key="1022:0" data-first-offset="true"><span 
data-slate-string="true"> setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1023"> <span data-slate-object="text" 
data-key="1024"><span data-slate-leaf="true" data-offset-key="1024:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1024:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7190241106" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9008050723" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1024:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7190241106" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1024:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1025"> <span data-slate-object="text" data-key="1026"><span 
data-slate-leaf="true" data-offset-key="1026:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1026:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_5635068247" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1026:2"><span 
data-slate-string="true">.log(steps);</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1027"> <span data-slate-object="text" 
data-key="1028"><span data-slate-leaf="true" data-offset-key="1028:0" data-first-offset="true"><span 
data-slate-string="true"> callback();</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1029"> <span data-slate-object="text" 
data-key="1030"><span data-slate-leaf="true" data-offset-key="1030:0" data-first-offset="true"><span 
data-slate-string="true"> },</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1031"> <span data-slate-object="text" 
data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1032:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_2518066519" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1033"> <span data-slate-object="text" data-key="1034"><span data-slate-leaf="true" 
data-offset-key="1034:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1035"> <span data-slate-object="text" data-key="1036"><span data-slate-leaf="true" 
data-offset-key="1036:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1037"> <span data-slate-object="text" data-key="1038"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1039"> <span data-slate-object="text" 
data-key="1040"><span data-slate-leaf="true" data-offset-key="1040:0" data-first-offset="true"><span 
data-slate-string="true">run(</span></span><span data-slate-leaf="true" data-offset-key="1040:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3674064670" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1040:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1040:3"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3101218579" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0785478381" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1040:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0785478381" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1040:5"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1041"> <span data-slate-object="text" data-key="1042"><span data-slate-leaf="true" 
data-offset-key="1042:0" data-first-offset="true"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1042:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1435810281" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1042:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1042:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8111904872" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_3157348447" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1042:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8111904872" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1042:5"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1043"> <span data-slate-object="text" data-key="1044"><span data-slate-leaf="true" 
data-offset-key="1044:0" data-first-offset="true"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1044:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8286635061" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1044:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1044:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6075338238" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2138965928" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1044:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6075338238" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1044:5"><span data-slate-string="true"> {});</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1045"> <span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" 
data-offset-key="1046:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1047"> <span data-slate-object="text" data-key="1048"><span data-slate-leaf="true" 
data-offset-key="1048:0" data-first-offset="true"><span data-slate-string="true">});</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-78a42656 " data-slate-type="paragraph" data-slate-object="block" data-key="1049"> 
<span data-slate-object="text" data-key="1050"><span data-slate-leaf="true" data-offset-key="1050:0" 
data-first-offset="true"><span data-slate-string="true">嗯，代码确实清爽多了。可是，看着这嵌套的三个 run，我觉得这并没有从本质上解决问题，只是代码简短了些，嵌套调用依然存在。</span></span></span> 
</div> <div class="se-cfc0da38 " data-slate-type="paragraph" data-slate-object="block" data-key="1051"> 
<span data-slate-object="text" data-key="1052"><span data-slate-leaf="true" data-offset-key="1052:0" 
data-first-offset="true"><span data-slate-string="true">每当我们开始写这样反复嵌套回调的代码时，我们就应该警醒，我们是否在创造一个代码维护上的坑。那能不能使用某一种优雅的方式来解决这个问题呢？</span></span></span> 
</div> <div class="se-fea81a1f " data-slate-type="paragraph" data-slate-object="block" data-key="1053"> 
<span data-slate-object="text" data-key="1054"><span data-slate-leaf="true" data-offset-key="1054:0" 
data-first-offset="true"><span data-slate-string="true">有！它就是 Promise，并且从 ES6 开始，JavaScript 
原生支持，不再需要第三方的库或者自己实现的工具类了。</span></span></span> </div> <div class="se-4a9f1730 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1055"> <span data-slate-object="text" data-key="1056"><span 
data-slate-leaf="true" data-offset-key="1056:0" data-first-offset="true"><span class="se-b930256c" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Promise，就如同字面意思“承诺”一样，定义在当前，但行为发生于未来。</span></span></span></span><span 
data-slate-object="text" data-key="1057"><span data-slate-leaf="true" data-offset-key="1057:0" 
data-first-offset="true"><span data-slate-string="true">它的构造方法中接受一个函数（如果你对这种将函数作为参数的方式传入还不习惯，请回看 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1058" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1059"><span data-slate-leaf="true" data-offset-key="1059:0" 
data-first-offset="true"><span data-slate-string="true">[第 15 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1060"><span data-slate-leaf="true" data-offset-key="1060:0" 
data-first-offset="true"><span data-slate-string="true"> 对函数成为一等公民的介绍），并且这个函数接受 resolve 和 reject 
两个参数，前者在未来的执行成功时会被调用，后者在未来的执行失败时会被调用。</span></span></span> </div> <div class="se-fd21d256 se-45b0655f" 
data-slate-type="pre" data-slate-object="block" data-key="1061" data-code-language="javascript"> 
<div class="se-bd7406f4 se-669f0660"> <span></span> </div> <div class="se-2942757b"> <div class="se-d5a38553 
se-94834f39" data-code-line-number="1"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="2"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="3"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="4"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="5"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="6"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="7"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="8"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="9"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="10"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="11"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="12"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="13"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="14"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="15"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="16"></div> </div> <div class="se-f494ce82 ps ps--active-x"> 
<div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1062"> <span data-slate-object="text" data-key="1063"><span data-slate-leaf="true" 
data-offset-key="1063:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0545905166" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1063:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1063:2"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9200177053" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3217130575" data-annotation-type="annotation"><span 
data-slate-string="true">steps</span></span></span></span><span data-slate-leaf="true" data-offset-key="1063:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3217130575" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1063:4"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1064"> <span data-slate-object="text" data-key="1065"><span data-slate-leaf="true" 
data-offset-key="1065:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1065:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3200502665" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2410990330" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1065:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3200502665" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1065:3"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1066"> <span data-slate-object="text" data-key="1067"><span data-slate-leaf="true" 
data-offset-key="1067:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1067:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7412783137" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1067:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1067:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9613269008" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1067:4"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1067:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9160107726" data-annotation-type="annotation"><span data-slate-string="true">(resolve, 
reject) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1067:6"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1068"> <span data-slate-object="text" 
data-key="1069"><span data-slate-leaf="true" data-offset-key="1069:0" data-first-offset="true"><span 
data-slate-string="true"> setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1070"> <span data-slate-object="text" 
data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1071:1"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_9353625383" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1712153190" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1071:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1712153190" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1071:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1072"> <span data-slate-object="text" data-key="1073"><span 
data-slate-leaf="true" data-offset-key="1073:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1073:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_1480040991" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1073:2"><span 
data-slate-string="true">.log(steps);</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1074"> <span data-slate-object="text" 
data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" data-first-offset="true"><span 
data-slate-string="true"> resolve(); </span></span><span data-slate-leaf="true" data-offset-key="1075:1"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_8037285323" 
data-annotation-type="annotation"><span data-slate-string="true">// 一秒后的未来执行成功，需要调用</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1076"> <span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" 
data-offset-key="1077:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1078"> <span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" 
data-offset-key="1079:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1079:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7151980477" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1080"> <span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" 
data-offset-key="1081:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1082"> <span data-slate-object="text" data-key="1083"><span data-slate-leaf="true" 
data-offset-key="1083:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1084"> <span data-slate-object="text" data-key="1085"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1086"> <span data-slate-object="text" 
data-key="1087"><span data-slate-leaf="true" data-offset-key="1087:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8494141190" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1087:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1088"> <span data-slate-object="text" data-key="1089"><span data-slate-leaf="true" 
data-offset-key="1089:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1089:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9019550594" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1089:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1090"> <span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" 
data-offset-key="1091:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1091:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8528691892" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1091:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1092"> <span data-slate-object="text" data-key="1093"><span data-slate-leaf="true" 
data-offset-key="1093:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1093:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9918186853" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1093:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 348px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-efb479f1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1094"> <span data-slate-object="text" data-key="1095"><span data-slate-leaf="true" 
data-offset-key="1095:0" data-first-offset="true"><span data-slate-string="true">正如代码所示，这一次我们让 
run() 方法返回一个函数，这个函数执行的时候会返回一个 Promise 对象。这样，这个 Promise 对象，并不是在程序一开始就初始化的，而是在未来的某一时刻，前一步操作完成之后才会得到执行，这一点非常关键，并且这是一种</span></span></span><span 
data-slate-object="text" data-key="1096"><span data-slate-leaf="true" data-offset-key="1096:0" 
data-first-offset="true"><span class="se-dd090614" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过给原始代码添加函数包装的方式实现了这里的“定义、传递、但不执行”的要求。</span></span></span></span> 
</div> <div class="se-b20bcb33 " data-slate-type="paragraph" data-slate-object="block" data-key="1097"> 
<span data-slate-object="text" data-key="1098"><span data-slate-leaf="true" data-offset-key="1098:0" 
data-first-offset="true"><span data-slate-string="true">这样做就是把实际的执行逻辑使用一个临时函数包装起来再传递出去，以达到延迟对该逻辑求值的目的，这种方式有一个专有名字 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1099" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1100"><span data-slate-leaf="true" data-offset-key="1100:0" 
data-first-offset="true"><span data-slate-string="true">Thunk</span></span></span></a><span 
data-slate-object="text" data-key="1101"><span data-slate-leaf="true" data-offset-key="1101:0" 
data-first-offset="true"><span data-slate-string="true">，它是一种在 JavaScript 异步编程的世界中很常见的手段（JavaScript 
中有时 Thunk 特指用这种技术来将多参数函数包装成单参数函数，这种情况我们在此不讨论）。换言之，上面代码例子中的第二行，绝不可省略，一些刚开始学写异步编程的程序员朋友，就很容易犯这个错误。</span></span></span> 
</div> <div class="se-5e111351 " data-slate-type="paragraph" data-slate-object="block" data-key="1102"> 
<span data-slate-object="text" data-key="1103"><span data-slate-leaf="true" data-offset-key="1103:0" 
data-first-offset="true"><span data-slate-string="true">另外，这里我还使用了两个小技巧来简化代码：</span></span></span> 
</div> <div class="se-c0728e4a" data-slate-type="list" data-slate-object="block" data-key="1104"> 
<div class="se-ff0034c7 se-5d9cfe90" data-slate-type="list-line" data-slate-object="block" 
data-key="1105"> <span data-slate-object="text" data-key="1106"><span data-slate-leaf="true" 
data-offset-key="1106:0" data-first-offset="true"><span data-slate-string="true">一个是 () =&gt; 
{ return xxx; } 可以被简化为 () =&gt; xxx；</span></span></span> </div> <div class="se-3e716c39 se-13165323" 
data-slate-type="list-line" data-slate-object="block" data-key="1107"> <span data-slate-object="text" 
data-key="1108"><span data-slate-leaf="true" data-offset-key="1108:0" data-first-offset="true"><span 
data-slate-string="true">另一个是使用 Promise.resolve() 返回一个已经执行成功的空操作，从而将所有后续执行的 run 方法都可以以统一的形式放到调用链里面去。</span></span></span> 
</div> </div> <div class="se-f4e3e220 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1109"> <span data-slate-object="text" data-key="1110"><span data-slate-leaf="true" 
data-offset-key="1110:0" data-first-offset="true"><span data-slate-string="true">现在，使用 run() 
方法的代码调用已经格外地简单而清晰了。在 Promise 的帮助下，通过这种方式，用了几个 then 方法，实现了逻辑在前一步成功后的依次执行。于是，</span></span></span><span 
data-slate-object="text" data-key="1111"><span data-slate-leaf="true" data-offset-key="1111:0" 
data-first-offset="true"><span class="se-1da9d0e7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">嵌套的金字塔厄运消失了，变成了直观的链式调用</span></span></span></span><span data-slate-object="text" 
data-key="1112"><span data-slate-leaf="true" data-offset-key="1112:0" data-first-offset="true"><span 
data-slate-string="true">，这是异步编程中一个非常常见的优化。</span></span></span> </div> <div class="se-3ccf25d3 
" data-slate-type="paragraph" data-slate-object="block" data-key="1113"> <span data-slate-object="text" 
data-key="1114"><span data-slate-leaf="true" data-offset-key="1114:0" data-first-offset="true"><span 
data-slate-string="true">如果我们乘胜追击，进一步考虑，上面那个 run() 方法明显不够直观，能不能以某种方式优化调整一下？</span></span></span> 
</div> <div class="se-e01c3a1b " data-slate-type="paragraph" data-slate-object="block" data-key="1115"> 
<span data-slate-object="text" data-key="1116"><span data-slate-leaf="true" data-offset-key="1116:0" 
data-first-offset="true"><span data-slate-string="true">能！代码看起来复杂的原因是引入了 setTimeout，而我们使用 setTimeout 
只是为了“等一下”，来模拟小狗奔跑的过程。这个“等一下”的行为，实际是有普遍意义的。在 JavaScript 这样的非阻塞代码中，不可能通过代码的方式让代码实际执行的时候真的“等一下”，但是，我们却可以使用异步的方式让代码看起来像是执行了一个“等一下”的操作。我们定义：</span></span></span> 
</div> <div class="se-70131484 se-f72c2423" data-slate-type="pre" data-slate-object="block" 
data-key="1117" data-code-language="javascript"> <div class="se-9423e27f se-20b3058f"> <span></span> 
</div> <div class="se-49a484bd"> <div class="se-8e757f5d se-23d68118" data-code-line-number="1"></div> 
<div class="se-8e757f5d se-23d68118" data-code-line-number="2"></div> </div> <div class="se-35a6c1e2 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1118"> <span data-slate-object="text" data-key="1119"><span data-slate-leaf="true" 
data-offset-key="1119:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4619369538" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1119:1"><span data-slate-string="true"> wait = </span></span><span 
data-slate-leaf="true" data-offset-key="1119:2"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4074307273" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_2185470112" data-annotation-type="annotation"><span 
data-slate-string="true">ms</span></span></span></span><span data-slate-leaf="true" data-offset-key="1119:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2185470112" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1120"> <span data-slate-object="text" data-key="1121"><span data-slate-leaf="true" 
data-offset-key="1121:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1121:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6112658195" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1121:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4810199394" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:4"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1121:5"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_2514843526" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0903576290" data-annotation-type="annotation"><span 
data-slate-string="true">resolve</span></span></span></span><span data-slate-leaf="true" data-offset-key="1121:6"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0903576290" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:7"><span data-slate-string="true"> setTimeout(resolve, 
ms));</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 
0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 341px;"></div> </div> 
<div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-f726cc4a " data-slate-type="paragraph" 
data-slate-object="block" data-key="1122"> <span data-slate-object="text" data-key="1123"><span 
data-slate-leaf="true" data-offset-key="1123:0" data-first-offset="true"><span data-slate-string="true">有了 
wait 的铺垫，我们把原本奔跑的 setTimeout 使用更为直观的 wait 函数来替换，一下子就让 run 的实现清晰了很多：</span></span></span> </div> 
<div class="se-29fe20b6 se-4d0d1e58" data-slate-type="pre" data-slate-object="block" data-key="1124" 
data-code-language="javascript"> <div class="se-82978d01 se-87d4e4dd"> <span></span> </div> 
<div class="se-e146e66c"> <div class="se-ef405fbe se-16885931" data-code-line-number="1"></div> 
<div class="se-ef405fbe se-16885931" data-code-line-number="2"></div> </div> <div class="se-49101c2f 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1125"> <span data-slate-object="text" data-key="1126"><span data-slate-leaf="true" 
data-offset-key="1126:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7896487549" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1126:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1126:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6171932524" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_6582251349" data-annotation-type="annotation"><span 
data-slate-string="true">steps</span></span></span></span><span data-slate-leaf="true" data-offset-key="1126:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6171932524" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1126:4"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1127"> <span data-slate-object="text" data-key="1128"><span data-slate-leaf="true" 
data-offset-key="1128:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1128:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6607003934" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_8504743537" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1128:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6607003934" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:3"><span data-slate-string="true"> wait(</span></span><span 
data-slate-leaf="true" data-offset-key="1128:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4362746176" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:5"><span data-slate-string="true">).then(</span></span><span 
data-slate-leaf="true" data-offset-key="1128:6"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7497858799" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_4717584066" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1128:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7497858799" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:8"><span data-slate-string="true"> { </span></span><span 
data-slate-leaf="true" data-offset-key="1128:9"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0311085964" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:10"><span data-slate-string="true">.log(steps); 
});</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 
0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 310px;"></div> </div> 
<div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-df68fa4c " data-slate-type="paragraph" 
data-slate-object="block" data-key="1129"> <span data-slate-object="text" data-key="1130"><span 
data-slate-leaf="true" data-offset-key="1130:0" data-first-offset="true"><span data-slate-string="true">你看，这个例子，再加上前面的 
then 调用链的例子，你是否看出，</span></span></span><span data-slate-object="text" data-key="1131"><span 
data-slate-leaf="true" data-offset-key="1131:0" data-first-offset="true"><span class="se-c1278467" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">利用 Promise，我们似乎神奇地把“异步”代码变成“同步”的了</span></span></span></span><span 
data-slate-object="text" data-key="1132"><span data-slate-leaf="true" data-offset-key="1132:0" 
data-first-offset="true"><span data-slate-string="true">。其实，代码执行并没有真正地变成同步，但是代码却“看起来”像是同步代码，而同步和顺序执行的逻辑对于人的大脑更为友好。</span></span></span> 
</div> <div class="se-87c29a69 " data-slate-type="paragraph" data-slate-object="block" data-key="1133"> 
<span data-slate-object="text" data-key="1134"><span data-slate-leaf="true" data-offset-key="1134:0" 
data-first-offset="true"><span data-slate-string="true">经过这样的重构以后，再次执行刚才的 3 次奔跑调用，我们得到了一样的结果。</span></span></span> 
</div> <div class="se-28783c31 se-9a7994f7" data-slate-type="pre" data-slate-object="block" 
data-key="1135" data-code-language="javascript"> <div class="se-cbc80395 se-97c8b011"> <span></span> 
</div> <div class="se-28788c8d"> <div class="se-b6a31cd6 se-2db725af" data-code-line-number="1"></div> 
<div class="se-b6a31cd6 se-2db725af" data-code-line-number="2"></div> <div class="se-b6a31cd6 
se-2db725af" data-code-line-number="3"></div> <div class="se-b6a31cd6 se-2db725af" data-code-line-number="4"></div> 
</div> <div class="se-36013df4 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1136"> <span data-slate-object="text" data-key="1137"><span 
data-slate-leaf="true" data-offset-key="1137:0" data-first-offset="true"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_7909271555" data-annotation-type="annotation"><span 
data-slate-string="true">Promise</span></span></span><span data-slate-leaf="true" data-offset-key="1137:1"><span 
data-slate-string="true">.resolve()</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1138"> <span data-slate-object="text" 
data-key="1139"><span data-slate-leaf="true" data-offset-key="1139:0" data-first-offset="true"><span 
data-slate-string="true"> .then(run(</span></span><span data-slate-leaf="true" data-offset-key="1139:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4293824220" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1139:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1140"> <span data-slate-object="text" data-key="1141"><span data-slate-leaf="true" 
data-offset-key="1141:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1141:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0785158201" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1141:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1142"> <span data-slate-object="text" data-key="1143"><span data-slate-leaf="true" 
data-offset-key="1143:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1143:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9197837410" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1143:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-f5e3fa9b " data-slate-type="paragraph" data-slate-object="block" data-key="1144"> 
<span data-slate-object="text" data-key="1145"><span data-slate-leaf="true" data-offset-key="1145:0" 
data-first-offset="true"><span data-slate-string="true">嗯，看起来我们已经做到极致了，代码也已经很清楚了，大概没有办法再改写和优化了吧？不！其实我们还有继续操作的办法。也许我应该说，居然还有。</span></span></span> 
</div> <div class="se-dde9131f " data-slate-type="paragraph" data-slate-object="block" data-key="1146"> 
<span data-slate-object="text" data-key="1147"><span data-slate-leaf="true" data-offset-key="1147:0" 
data-first-offset="true"><span data-slate-string="true">在 ES7 中，async/await 的语法糖被引入。通过它，我们可以进一步优化代码的写法，让异步编程越来越像同步编程，也越来越接近人大脑自然的思维。</span></span></span> 
</div> <div class="se-33f95596" data-slate-type="list" data-slate-object="block" data-key="1148"> 
<div class="se-55678fc5 se-d8d6ccc3" data-slate-type="list-line" data-slate-object="block" 
data-key="1149"> <span data-slate-object="text" data-key="1150"><span data-slate-leaf="true" 
data-offset-key="1150:0" data-first-offset="true"><span data-slate-string="true">async 用于标记当前的函数为异步函数；</span></span></span> 
</div> <div class="se-d6b72ef9 se-46e53cb3" data-slate-type="list-line" data-slate-object="block" 
data-key="1151"> <span data-slate-object="text" data-key="1152"><span data-slate-leaf="true" 
data-offset-key="1152:0" data-first-offset="true"><span data-slate-string="true">await 用于表示它的后面要返回一个 
Promise 对象，在这个 Promise 对象得到异步结果以后，再继续往下执行。</span></span></span> </div> </div> <div class="se-f51d566f 
" data-slate-type="paragraph" data-slate-object="block" data-key="1153"> <span data-slate-object="text" 
data-key="1154"><span data-slate-leaf="true" data-offset-key="1154:0" data-first-offset="true"><span 
data-slate-string="true">考虑一下上面的 run 方法，现在我们可以把它改写成 async/await 的形式：</span></span></span> </div> 
<div class="se-7530f5be se-2ffa1233" data-slate-type="pre" data-slate-object="block" data-key="1155" 
data-code-language="javascript"> <div class="se-713b04d3 se-e27d8798"> <span></span> </div> 
<div class="se-79155ddd"> <div class="se-c458d794 se-448f3a85" data-code-line-number="1"></div> 
<div class="se-c458d794 se-448f3a85" data-code-line-number="2"></div> <div class="se-c458d794 
se-448f3a85" data-code-line-number="3"></div> <div class="se-c458d794 se-448f3a85" data-code-line-number="4"></div> 
</div> <div class="se-77c56e79 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1156"> <span data-slate-object="text" data-key="1157"><span 
data-slate-leaf="true" data-offset-key="1157:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8162190915" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1157:1"><span 
data-slate-string="true"> run = </span></span><span data-slate-leaf="true" data-offset-key="1157:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2325008393" 
data-annotation-type="annotation"><span data-slate-string="true">async</span></span></span><span 
data-slate-leaf="true" data-offset-key="1157:3"><span data-slate-string="true"> steps =&gt; 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1158"> <span data-slate-object="text" data-key="1159"><span 
data-slate-leaf="true" data-offset-key="1159:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1159:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4748890351" data-annotation-type="annotation"><span 
data-slate-string="true">await</span></span></span><span data-slate-leaf="true" data-offset-key="1159:2"><span 
data-slate-string="true"> wait(</span></span><span data-slate-leaf="true" data-offset-key="1159:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3428711748" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1159:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1160"> <span data-slate-object="text" data-key="1161"><span data-slate-leaf="true" 
data-offset-key="1161:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1161:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4196124604" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1161:2"><span data-slate-string="true">.log(steps);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1162"> <span data-slate-object="text" data-key="1163"><span data-slate-leaf="true" 
data-offset-key="1163:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-6e45b91b " data-slate-type="paragraph" data-slate-object="block" data-key="1164"> 
<span data-slate-object="text" data-key="1165"><span data-slate-leaf="true" data-offset-key="1165:0" 
data-first-offset="true"><span data-slate-string="true">你看，代码看起来就和同步的没有本质区别了，等待 1000 毫秒以后，打印 
steps。</span></span></span> </div> <div class="se-a1d69923 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1166"> <span data-slate-object="text" data-key="1167"><span data-slate-leaf="true" 
data-offset-key="1167:0" data-first-offset="true"><span data-slate-string="true">接着，如果我们执行下面的代码（如果你不是在 
Chrome 的控制台执行，你可以把下面三行代码放到任意一个 async 函数中去执行，效果是一样的）：</span></span></span> </div> <div class="se-029ceac0 
se-3ca7aa72" data-slate-type="pre" data-slate-object="block" data-key="1168" data-code-language="javascript"> 
<div class="se-0787c102 se-fd36ed7d"> <span></span> </div> <div class="se-3de65bf2"> <div class="se-a09c356b 
se-64f4e82b" data-code-line-number="1"></div> <div class="se-a09c356b se-64f4e82b" data-code-line-number="2"></div> 
<div class="se-a09c356b se-64f4e82b" data-code-line-number="3"></div> </div> <div class="se-6a5b7f68 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1169"> <span data-slate-object="text" data-key="1170"><span data-slate-leaf="true" 
data-offset-key="1170:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5752107505" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1170:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1170:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2905701303" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1170:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1171"> <span data-slate-object="text" data-key="1172"><span data-slate-leaf="true" 
data-offset-key="1172:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1851566046" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1172:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1172:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2426785699" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1172:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1173"> <span data-slate-object="text" data-key="1174"><span data-slate-leaf="true" 
data-offset-key="1174:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9098986010" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1174:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1174:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0606120410" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1174:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-4daa65a3 " data-slate-type="paragraph" data-slate-object="block" data-key="1175"> 
<span data-slate-object="text" data-key="1176"><span data-slate-leaf="true" data-offset-key="1176:0" 
data-first-offset="true"><span data-slate-string="true">我们得到了一样的结果。这段代码看起来也和顺序、同步执行的代码没有区别了，虽然，实际的运行依然是前面你看到的异步调用，这里的效果只是 
async/await 语法糖为程序员创造的一个美好的假象。</span></span></span> </div> <div class="se-0420fdcc " data-slate-type="paragraph" 
data-slate-object="block" data-key="1177"> <span data-slate-object="text" data-key="1178"><span 
data-slate-leaf="true" data-offset-key="1178:0" data-first-offset="true"><span data-slate-string="true">纵观这个小狗奔跑的问题，我们一步一步把晦涩难懂的嵌套回调代码，优化成了易读、易理解的“假同步”代码。聪明的程序员总在努力地创造各种工具，去</span></span></span><span 
data-slate-object="text" data-key="1179"><span data-slate-leaf="true" data-offset-key="1179:0" 
data-first-offset="true"><span class="se-3c364993" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">改善代码异步调用的表达能力，但是越是深入，就越能发现，最自然的表达，似乎来自于纯粹的同步代码。</span></span></span></span> 
</div> <h2 class="se-6eb352f6" data-slate-type="heading" data-slate-object="block" data-key="1180"><span 
data-slate-object="text" data-key="1181"><span data-slate-leaf="true" data-offset-key="1181:0" 
data-first-offset="true"><span data-slate-string="true">2. 用生成器来实现协程</span></span></span></h2> 
<div class="se-ac78bf68 " data-slate-type="paragraph" data-slate-object="block" data-key="1182"> 
<span data-slate-object="text" data-key="1183"><span data-slate-leaf="true" data-offset-key="1183:0" 
data-first-offset="true"><span class="se-3896b82b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">协程，Coroutine，简单说就是一种通用的协作式多任务的子程序，它通过任务执行的挂起与恢复，来实现任务之间的切换。</span></span></span></span> 
</div> <div class="se-1766d557 " data-slate-type="paragraph" data-slate-object="block" data-key="1184"> 
<span data-slate-object="text" data-key="1185"><span data-slate-leaf="true" data-offset-key="1185:0" 
data-first-offset="true"><span data-slate-string="true">这里提到的“协作式”，是一种多任务处理的模式，它和“抢占式”相对。如果是协作式，每个任务处理的逻辑必须主动放弃执行权（挂起），将继续执行的资源让出来给别的任务，直到重新获得继续执行的机会（恢复）；而抢占式则完全将任务调度交由第三方，比如操作系统，它可以直接剥夺当前执行任务的资源，分配给其它任务。</span></span></span> 
</div> <div class="se-99a9bf84 " data-slate-type="paragraph" data-slate-object="block" data-key="1186"> 
<span data-slate-object="text" data-key="1187"><span data-slate-leaf="true" data-offset-key="1187:0" 
data-first-offset="true"><span data-slate-string="true">我们知道，创建线程的开销比进程小，而协程通常完全是在同一个线程内完成的，连线程切换的代价都免去了，因此它在资源开销方面更有优势。</span></span></span> 
</div> <div class="se-262f650c " data-slate-type="paragraph" data-slate-object="block" data-key="1188"> 
<span data-slate-object="text" data-key="1189"><span data-slate-leaf="true" data-offset-key="1189:0" 
data-first-offset="true"><span data-slate-string="true">JavaScript 的协程是通过生成器来实现的，执行的主流程在生成器中可以以 
yield 为界，进行协作式的挂起和恢复操作，从而在外部函数和生成器内部逻辑之间跳转，而 JavaScript 引擎会负责管理上下文的切换。</span></span></span> 
</div> <div class="se-e4a9eae6 " data-slate-type="paragraph" data-slate-object="block" data-key="1190"> 
<span data-slate-object="text" data-key="1191"><span data-slate-leaf="true" data-offset-key="1191:0" 
data-first-offset="true"><span data-slate-string="true">首先我们来认识一下 JavaScript 和迭代有关的两个协议，它们是我们后面学习生成器的基础：</span></span></span> 
</div> <div class="se-3a128954" data-slate-type="list" data-slate-object="block" data-key="1192"> 
<div class="se-0e8b1b8f se-f3a0a678" data-slate-type="list-line" data-slate-object="block" 
data-key="1193"> <span data-slate-object="text" data-key="1194"><span data-slate-leaf="true" 
data-offset-key="1194:0" data-first-offset="true"><span data-slate-string="true">第一个是可迭代协议，它允许定义对象自己的迭代行为，比如哪些属性方法是可以被 
for 循环遍历到的；</span></span></span> </div> <div class="se-97e6e3b8 se-116ef020" data-slate-type="list-line" 
data-slate-object="block" data-key="1195"> <span data-slate-object="text" data-key="1196"><span 
data-slate-leaf="true" data-offset-key="1196:0" data-first-offset="true"><span data-slate-string="true">第二个是迭代器协议，它定义了一种标准的方法来依次产生序列的下一个值（next() 
方法），如果序列是有限长的，并且在所有的值都产生后，将有一个默认的返回值。</span></span></span> </div> </div> <div class="se-3455512e 
" data-slate-type="paragraph" data-slate-object="block" data-key="1197"> <span data-slate-object="text" 
data-key="1198"><span data-slate-leaf="true" data-offset-key="1198:0" data-first-offset="true"><span 
data-slate-string="true">接着我就可以介绍生成器（Generator）了。在 JavaScript 中，生成器对象是由生成器函数 function* 返回，且符合“可迭代协议”和“迭代器协议”两者。function* 
和 yield 关键字通常一起使用，yield 用来在生成器的 next() 方法执行时，标识生成器执行中断的位置，并将 yield 右侧表达式的值返回。见下面这个简单的例子：</span></span></span> 
</div> <div class="se-86d23a8e se-d80fcd9a" data-slate-type="pre" data-slate-object="block" 
data-key="1199" data-code-language="javascript"> <div class="se-0311b2e2 se-0950bd9e"> <span></span> 
</div> <div class="se-8ecff92b"> <div class="se-0e2847e1 se-787ae817" data-code-line-number="1"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="2"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="3"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="4"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="5"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="6"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="7"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="8"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="9"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="10"></div> 
</div> <div class="se-db4abe06 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1200"> <span data-slate-object="text" data-key="1201"><span 
data-slate-leaf="true" data-offset-key="1201:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7535307903" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2003900514" 
data-annotation-type="annotation"><span data-slate-string="true">function</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">* 
</span></span></span><span data-slate-leaf="true" data-offset-key="1201:2"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6799243523" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2003900514" 
data-annotation-type="annotation"><span data-slate-string="true">IdGenerator</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">(</span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">) 
</span></span></span><span data-slate-leaf="true" data-offset-key="1201:5"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1202"> <span data-slate-object="text" data-key="1203"><span data-slate-leaf="true" 
data-offset-key="1203:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1203:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5225099815" data-annotation-type="annotation"><span data-slate-string="true">let</span></span></span><span 
data-slate-leaf="true" data-offset-key="1203:2"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1203:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0588208211" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1203:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1204"> <span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" 
data-offset-key="1205:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1205:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9812223222" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1205:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1205:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2181934891" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1205:4"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1206"> <span data-slate-object="text" data-key="1207"><span data-slate-leaf="true" 
data-offset-key="1207:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1207:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2131296381" data-annotation-type="annotation"><span data-slate-string="true">yield</span></span></span><span 
data-slate-leaf="true" data-offset-key="1207:2"><span data-slate-string="true"> index++;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1208"> <span data-slate-object="text" data-key="1209"><span data-slate-leaf="true" 
data-offset-key="1209:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1210"> <span data-slate-object="text" data-key="1211"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1212"> <span data-slate-object="text" 
data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1941744486" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1213:1"><span data-slate-string="true"> idGenerator 
= IdGenerator();</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1214"> <span data-slate-object="text" data-key="1215"></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1216"> <span data-slate-object="text" data-key="1217"><span data-slate-leaf="true" 
data-offset-key="1217:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0178778302" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1217:1"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1218"> <span data-slate-object="text" data-key="1219"><span data-slate-leaf="true" 
data-offset-key="1219:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3391767104" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:1"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-835f8de2 " data-slate-type="paragraph" data-slate-object="block" data-key="1220"> 
<span data-slate-object="text" data-key="1221"><span data-slate-leaf="true" data-offset-key="1221:0" 
data-first-offset="true"><span data-slate-string="true">这是一个 id 顺序生成的生成器，初始 index 为 1，每次调用 
next() 来获取序列的下一个数值，并且 index 会自增 1。从代码中我们可以看到，这是一个无限的序列。</span></span></span> </div> <div class="se-ee13d845 
" data-slate-type="paragraph" data-slate-object="block" data-key="1222"> <span data-slate-object="text" 
data-key="1223"><span data-slate-leaf="true" data-offset-key="1223:0" data-first-offset="true"><span 
data-slate-string="true">执行上述代码，我们将得到：</span></span></span> </div> <div class="se-4646fb6a 
se-0ffc16dc" data-slate-type="pre" data-slate-object="block" data-key="1224" data-code-language="javascript"> 
<div class="se-45954f2b se-91ebf58d"> <span></span> </div> <div class="se-62eb709d"> <div class="se-59f189f6 
se-2814b374" data-code-line-number="1"></div> <div class="se-59f189f6 se-2814b374" data-code-line-number="2"></div> 
</div> <div class="se-e07a178e ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1225"> <span data-slate-object="text" data-key="1226"><span 
data-slate-leaf="true" data-offset-key="1226:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1226:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_1204536290" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1226:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5546314379" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1226:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_5792132267" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1226:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9976211593" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1227"> <span data-slate-object="text" data-key="1228"><span data-slate-leaf="true" 
data-offset-key="1228:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1228:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_3603328492" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1228:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5627280227" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1228:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2244837224" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1228:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3581411496" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ff861d19 " data-slate-type="paragraph" data-slate-object="block" data-key="1229"> 
<span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" data-offset-key="1230:0" 
data-first-offset="true"><span data-slate-string="true">每次返回的对象里面，value 的值就是生成的 id，而 done 的值表示这个序列是否结束。</span></span></span> 
</div> <div class="se-42b75396 " data-slate-type="paragraph" data-slate-object="block" data-key="1231"> 
<span data-slate-object="text" data-key="1232"><span data-slate-leaf="true" data-offset-key="1232:0" 
data-first-offset="true"><span data-slate-string="true">你看，以往我们说起遍历的时候，脑海里总会第一时间想起某个容器，某个数据集合，但是，有了生成器以后，我们就可以对更为复杂的逻辑进行迭代。</span></span></span> 
</div> <div class="se-3eb15a55 " data-slate-type="paragraph" data-slate-object="block" data-key="1233"> 
<span data-slate-object="text" data-key="1234"><span data-slate-leaf="true" data-offset-key="1234:0" 
data-first-offset="true"><span data-slate-string="true">生成器可不是只能往外返回，还能往里传值。具体说，yield 右侧的表达式会返回，但是在调用 
next() 方法时，入参会被替代掉 yield 及右侧的表达式而参与代码运算。我们将上面的例子小小地改动一下：</span></span></span> </div> <div class="se-0c6eb9ce 
se-9601412a" data-slate-type="pre" data-slate-object="block" data-key="1235" data-code-language="javascript"> 
<div class="se-a045d06b se-de7bc2dd"> <span></span> </div> <div class="se-bfffc3ab"> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="1"></div> <div class="se-e9130fc1 se-64fbe506" data-code-line-number="2"></div> 
<div class="se-e9130fc1 se-64fbe506" data-code-line-number="3"></div> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="4"></div> <div class="se-e9130fc1 se-64fbe506" data-code-line-number="5"></div> 
<div class="se-e9130fc1 se-64fbe506" data-code-line-number="6"></div> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="7"></div> </div> <div class="se-b3728522 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1236"> <span data-slate-object="text" 
data-key="1237"><span data-slate-leaf="true" data-offset-key="1237:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6084647414" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">function</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">* 
</span></span></span><span data-slate-leaf="true" data-offset-key="1237:2"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_9797523678" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1855795342" 
data-annotation-type="annotation"><span data-slate-string="true">IdGenerator</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">(</span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">) 
</span></span></span><span data-slate-leaf="true" data-offset-key="1237:5"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1238"> <span data-slate-object="text" data-key="1239"><span data-slate-leaf="true" 
data-offset-key="1239:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1239:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9560124698" data-annotation-type="annotation"><span data-slate-string="true">let</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:2"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1239:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1006779200" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:4"><span data-slate-string="true">, factor = </span></span><span 
data-slate-leaf="true" data-offset-key="1239:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0934319456" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:6"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1240"> <span data-slate-object="text" data-key="1241"><span data-slate-leaf="true" 
data-offset-key="1241:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1241:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1724100350" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1241:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1241:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3077609712" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1241:4"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1242"> <span data-slate-object="text" data-key="1243"><span data-slate-leaf="true" 
data-offset-key="1243:0" data-first-offset="true"><span data-slate-string="true"> factor = 
</span></span><span data-slate-leaf="true" data-offset-key="1243:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1953229977" data-annotation-type="annotation"><span 
data-slate-string="true">yield</span></span></span><span data-slate-leaf="true" data-offset-key="1243:2"><span 
data-slate-string="true"> index; </span></span><span data-slate-leaf="true" data-offset-key="1243:3"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_6285800636" 
data-annotation-type="annotation"><span data-slate-string="true">// 位置①</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1244"> <span data-slate-object="text" data-key="1245"><span data-slate-leaf="true" 
data-offset-key="1245:0" data-first-offset="true"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1245:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9845018003" data-annotation-type="annotation"><span data-slate-string="true">yield</span></span></span><span 
data-slate-leaf="true" data-offset-key="1245:2"><span data-slate-string="true"> factor * index; 
</span></span><span data-slate-leaf="true" data-offset-key="1245:3"><span class=" gkhl-comment" 
data-slate-object="annotation" data-annotation-key="gkann_1684292627" data-annotation-type="annotation"><span 
data-slate-string="true">// 位置②</span></span></span></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1246"> <span data-slate-object="text" 
data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1248"> <span data-slate-object="text" 
data-key="1249"><span data-slate-leaf="true" data-offset-key="1249:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-b93c498d " data-slate-type="paragraph" 
data-slate-object="block" data-key="1250"> <span data-slate-object="text" data-key="1251"><span 
data-slate-leaf="true" data-offset-key="1251:0" data-first-offset="true"><span data-slate-string="true">好，这是生成器的定义，其调用代码如下：</span></span></span> 
</div> <div class="se-95d742b0 se-044f5384" data-slate-type="pre" data-slate-object="block" 
data-key="1252" data-code-language="javascript"> <div class="se-af326d89 se-95f04212"> <span></span> 
</div> <div class="se-e4805b13"> <div class="se-f5b046c2 se-372728c5" data-code-line-number="1"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="2"></div> <div class="se-f5b046c2 
se-372728c5" data-code-line-number="3"></div> <div class="se-f5b046c2 se-372728c5" data-code-line-number="4"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="5"></div> <div class="se-f5b046c2 
se-372728c5" data-code-line-number="6"></div> <div class="se-f5b046c2 se-372728c5" data-code-line-number="7"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="8"></div> </div> <div class="se-81eca853 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1253"> <span data-slate-object="text" data-key="1254"><span data-slate-leaf="true" 
data-offset-key="1254:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1826291068" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1254:1"><span data-slate-string="true"> calculate = 
</span></span><span data-slate-leaf="true" data-offset-key="1254:2"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0434511682" data-annotation-type="annotation"><span 
data-slate-string="true">(idGenerator) =&gt;</span></span></span><span data-slate-leaf="true" 
data-offset-key="1254:3"><span data-slate-string="true"> {</span></span></span> </div> <div 
class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1255"> 
<span data-slate-object="text" data-key="1256"><span data-slate-leaf="true" data-offset-key="1256:0" 
data-first-offset="true"><span data-slate-string="true"> </span></span><span data-slate-leaf="true" 
data-offset-key="1256:1"><span class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8895513513" 
data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1256:2"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1257"> <span data-slate-object="text" data-key="1258"><span data-slate-leaf="true" 
data-offset-key="1258:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1258:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3820273321" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1258:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1258:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6303350745" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1258:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1259"> <span data-slate-object="text" data-key="1260"><span data-slate-leaf="true" 
data-offset-key="1260:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1260:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4832449257" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1260:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1260:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7796697742" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1260:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1261"> <span data-slate-object="text" data-key="1262"><span data-slate-leaf="true" 
data-offset-key="1262:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1262:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_2809394623" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1262:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1262:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8786325613" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1262:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1263"> <span data-slate-object="text" data-key="1264"><span data-slate-leaf="true" 
data-offset-key="1264:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1265"> <span data-slate-object="text" data-key="1266"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1267"> <span data-slate-object="text" 
data-key="1268"><span data-slate-leaf="true" data-offset-key="1268:0" data-first-offset="true"><span 
data-slate-string="true">calculate(IdGenerator());</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-7e2fbdd5 
" data-slate-type="paragraph" data-slate-object="block" data-key="1269"> <span data-slate-object="text" 
data-key="1270"><span data-slate-leaf="true" data-offset-key="1270:0" data-first-offset="true"><span 
data-slate-string="true">在往下阅读以前，你能不能先想一想，这个 calculate 方法的调用，会产生怎样的输出？</span></span></span> 
</div> <div class="se-9607c70a " data-slate-type="paragraph" data-slate-object="block" data-key="1271"> 
<span data-slate-object="text" data-key="1272"><span data-slate-leaf="true" data-offset-key="1272:0" 
data-first-offset="true"><span data-slate-string="true">好，我来解释一下整个过程。现在这个 id 生成器每个循环节可以通过 yield 
返回两次，我把上述执行步骤解释一下（为了便于说明代码位置，在生成器代码中我标记了“位置①”和“位置②”，请对应起来查看）：</span></span></span> </div> <div 
class="se-980dfea5" data-slate-type="list" data-slate-object="block" data-key="1273"> <div 
class="se-135c61cf se-99b56484" data-slate-type="list-line" data-slate-object="block" data-key="1274"> 
<span data-slate-object="text" data-key="1275"><span data-slate-leaf="true" data-offset-key="1275:0" 
data-first-offset="true"><span data-slate-string="true">调用 next()，位置①的 yield 右侧的 index 返回，因此值为 
1；</span></span></span> </div> <div class="se-2d358674 se-34a2b010" data-slate-type="list-line" 
data-slate-object="block" data-key="1276"> <span data-slate-object="text" data-key="1277"><span 
data-slate-leaf="true" data-offset-key="1277:0" data-first-offset="true"><span data-slate-string="true">调用 
next(1)，实参为 1，它被赋值给位置①的 factor，参与位置②的 yield 右侧的表达式计算，得到 1；</span></span></span> </div> <div 
class="se-d1857aae se-11fe9cbb" data-slate-type="list-line" data-slate-object="block" data-key="1278"> 
<span data-slate-object="text" data-key="1279"><span data-slate-leaf="true" data-offset-key="1279:0" 
data-first-offset="true"><span data-slate-string="true">调用 next(2)，实参为 2，它被赋值给位置②的 index，由于 
while 循环的关系，位置①的 yield 右侧的 index 返回，因此得到 2；</span></span></span> </div> <div class="se-75f559f8 
se-4891d14a" data-slate-type="list-line" data-slate-object="block" data-key="1280"> <span data-slate-object="text" 
data-key="1281"><span data-slate-leaf="true" data-offset-key="1281:0" data-first-offset="true"><span 
data-slate-string="true">调用 next(3)，实参为 3，它被赋值给位置①的 factor，参与位置②的 yield 右侧的表达式计算，3 * 2 得到 6。</span></span></span> 
</div> </div> <div class="se-7c714327 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1282"> <span data-slate-object="text" data-key="1283"><span data-slate-leaf="true" 
data-offset-key="1283:0" data-first-offset="true"><span data-slate-string="true">使用图来表示，就是这样子：</span></span></span> 
</div> <div class="se-e94254da" data-slate-type="image" data-slate-object="block" data-key="1284"> 
<img class="se-e1fab112" src="https://static001.geekbang.org/resource/image/66/49/66e19715cc976a6870f73e2a8d34bb49.png"> 
</div> <div class="se-8beb5692 " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span data-slate-string="true">从图中你应该可以理解，通过生成器来实现 JavaScript 协程的原理了。本质上来说，</span></span></span><span 
data-slate-object="text" data-key="1287"><span data-slate-leaf="true" data-offset-key="1287:0" 
data-first-offset="true"><span class="se-d2967cac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">生成器将一个完整的方法执行通过 yield 拆分成了多个部分，并且每个部分都可以有输入输出，整个过程就是一个简单的状态机。</span></span></span></span><span 
data-slate-object="text" data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" 
data-first-offset="true"><span data-slate-string="true">它和其它函数一起，以反复挂起和恢复的方式一段一段地将任务完成。</span></span></span> 
</div> <div class="se-e6b7f87f " data-slate-type="paragraph" data-slate-object="block" data-key="1289"> 
<span data-slate-object="text" data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" 
data-first-offset="true"><span data-slate-string="true">最后，结果输出如下：</span></span></span> </div> 
<div class="se-2bf92e42 se-53fc0dff" data-slate-type="pre" data-slate-object="block" data-key="1291" 
data-code-language="javascript"> <div class="se-bc5cef3d se-356067a5"> <span></span> </div> 
<div class="se-24fcc0f3"> <div class="se-7ce4ca45 se-0ad48629" data-code-line-number="1"></div> 
<div class="se-7ce4ca45 se-0ad48629" data-code-line-number="2"></div> <div class="se-7ce4ca45 
se-0ad48629" data-code-line-number="3"></div> <div class="se-7ce4ca45 se-0ad48629" data-code-line-number="4"></div> 
</div> <div class="se-c28cc524 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1292"> <span data-slate-object="text" data-key="1293"><span 
data-slate-leaf="true" data-offset-key="1293:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1293:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_4919845897" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1293:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1767741956" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1293:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2743294966" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1293:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_8017917802" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1294"> <span data-slate-object="text" data-key="1295"><span data-slate-leaf="true" 
data-offset-key="1295:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1295:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_1769380532" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1295:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8082706270" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1295:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7829919276" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1295:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_6115454174" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1296"> <span data-slate-object="text" data-key="1297"><span data-slate-leaf="true" 
data-offset-key="1297:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1297:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2100333419" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1297:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1111674953" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1297:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7240390673" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1297:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3184054834" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1298"> <span data-slate-object="text" data-key="1299"><span data-slate-leaf="true" 
data-offset-key="1299:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1299:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7913365467" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1299:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8554899038" data-annotation-type="annotation"><span data-slate-string="true">6</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1299:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_6712821288" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1299:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2032369505" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h2 class="se-b04b945f" data-slate-type="heading" data-slate-object="block" data-key="1300"><span 
data-slate-object="text" data-key="1301"><span data-slate-leaf="true" data-offset-key="1301:0" 
data-first-offset="true"><span data-slate-string="true">3. 异步错误处理</span></span></span></h2> 
<div class="se-148b2b75 " data-slate-type="paragraph" data-slate-object="block" data-key="1302"> 
<span data-slate-object="text" data-key="1303"><span data-slate-leaf="true" data-offset-key="1303:0" 
data-first-offset="true"><span data-slate-string="true">错误处理是所有编程范型都必须要考虑的问题，在使用 JavaScript 
进行异步编程时，也不例外。你可能会有这样一个疑问，如果我们不做特殊处理，会怎样呢？且看下面的代码，我先定义一个必定会失败的方法：</span></span></span> </div> 
<div class="se-08c6c7ed se-bf2b8d8b" data-slate-type="pre" data-slate-object="block" data-key="1304" 
data-code-language="javascript"> <div class="se-ef7661e7 se-daefc692"> <span></span> </div> 
<div class="se-bf73de00"> <div class="se-e82ac032 se-01b05c1f" data-code-line-number="1"></div> 
<div class="se-e82ac032 se-01b05c1f" data-code-line-number="2"></div> <div class="se-e82ac032 
se-01b05c1f" data-code-line-number="3"></div> <div class="se-e82ac032 se-01b05c1f" data-code-line-number="4"></div> 
<div class="se-e82ac032 se-01b05c1f" data-code-line-number="5"></div> </div> <div class="se-4baec05a 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1305"> <span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" 
data-offset-key="1306:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5416515812" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1306:1"><span data-slate-string="true"> fail = </span></span><span 
data-slate-leaf="true" data-offset-key="1306:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1518121735" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2707843071" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1306:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1518121735" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1306:4"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1307"> <span data-slate-object="text" data-key="1308"><span data-slate-leaf="true" 
data-offset-key="1308:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span><span 
data-slate-leaf="true" data-offset-key="1308:1"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3340674849" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_7737245373" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1308:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7737245373" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1308:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1309"> <span data-slate-object="text" data-key="1310"><span data-slate-leaf="true" 
data-offset-key="1310:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4715187949" data-annotation-type="annotation"><span data-slate-string="true">throw</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3631310140" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:5"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_1132352711" data-annotation-type="annotation"><span data-slate-string="true">Error</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:6"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1310:7"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0715414183" data-annotation-type="annotation"><span data-slate-string="true">"fail"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:8"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1311"> <span data-slate-object="text" data-key="1312"><span data-slate-leaf="true" 
data-offset-key="1312:0" data-first-offset="true"><span data-slate-string="true"> }, </span></span><span 
data-slate-leaf="true" data-offset-key="1312:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4499799613" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1312:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1313"> <span data-slate-object="text" data-key="1314"><span data-slate-leaf="true" 
data-offset-key="1314:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-3e123e39 " data-slate-type="paragraph" data-slate-object="block" data-key="1315"> 
<span data-slate-object="text" data-key="1316"><span data-slate-leaf="true" data-offset-key="1316:0" 
data-first-offset="true"><span data-slate-string="true">然后调用一下：</span></span></span> </div> 
<div class="se-bcbdb139 se-eb7c24f7" data-slate-type="pre" data-slate-object="block" data-key="1317" 
data-code-language="javascript"> <div class="se-cb399f35 se-c6e166d9"> <span></span> </div> 
<div class="se-73c561d4"> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="1"></div> 
<div class="se-32a97cdd se-d3f22fc8" data-code-line-number="2"></div> <div class="se-32a97cdd 
se-d3f22fc8" data-code-line-number="3"></div> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="4"></div> 
<div class="se-32a97cdd se-d3f22fc8" data-code-line-number="5"></div> <div class="se-32a97cdd 
se-d3f22fc8" data-code-line-number="6"></div> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="7"></div> 
</div> <div class="se-2f089fac ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1318"> <span data-slate-object="text" data-key="1319"><span 
data-slate-leaf="true" data-offset-key="1319:0" data-first-offset="true"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_5606270653" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1319:1"><span 
data-slate-string="true">.log(</span></span><span data-slate-leaf="true" data-offset-key="1319:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_2518414352" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1319:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1320"> <span data-slate-object="text" data-key="1321"><span data-slate-leaf="true" 
data-offset-key="1321:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2613265418" data-annotation-type="annotation"><span data-slate-string="true">try</span></span></span><span 
data-slate-leaf="true" data-offset-key="1321:1"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1322"> <span data-slate-object="text" data-key="1323"><span data-slate-leaf="true" 
data-offset-key="1323:0" data-first-offset="true"><span data-slate-string="true"> fail();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1324"> <span data-slate-object="text" data-key="1325"><span data-slate-leaf="true" 
data-offset-key="1325:0" data-first-offset="true"><span data-slate-string="true">} </span></span><span 
data-slate-leaf="true" data-offset-key="1325:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4029722912" data-annotation-type="annotation"><span data-slate-string="true">catch</span></span></span><span 
data-slate-leaf="true" data-offset-key="1325:2"><span data-slate-string="true"> (e) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1326"> <span data-slate-object="text" data-key="1327"><span data-slate-leaf="true" 
data-offset-key="1327:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1327:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9307474226" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1327:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="1327:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7068124660" data-annotation-type="annotation"><span data-slate-string="true">"captured"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1327:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1328"> <span data-slate-object="text" data-key="1329"><span data-slate-leaf="true" 
data-offset-key="1329:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1330"> <span data-slate-object="text" data-key="1331"><span data-slate-leaf="true" 
data-offset-key="1331:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0444142940" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1331:1"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="1331:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8960732316" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1331:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-64c01be5 " data-slate-type="paragraph" data-slate-object="block" data-key="1332"> 
<span data-slate-object="text" data-key="1333"><span data-slate-leaf="true" data-offset-key="1333:0" 
data-first-offset="true"><span data-slate-string="true">在 Chrome 开发者工具的控制台中执行一下，我们将看到 1 和 2 
的输出，并在 1 秒钟之后，获得一个“Uncaught Error”的错误打印，注意观察这个错误的堆栈：</span></span></span> </div> <div class="se-0ee32bd3 
se-701f09c3" data-slate-type="pre" data-slate-object="block" data-key="1334" data-code-language="javascript"> 
<div class="se-66ac9904 se-44a8a055"> <span></span> </div> <div class="se-bc45ada1"> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="1"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="2"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="3"></div> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="4"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="5"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="6"></div> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="7"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="8"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="9"></div> </div> <div class="se-5ccdab2e 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1335"> <span data-slate-object="text" data-key="1336"><span data-slate-leaf="true" 
data-offset-key="1336:0" data-first-offset="true"><span data-slate-string="true">Uncaught </span></span><span 
data-slate-leaf="true" data-offset-key="1336:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3672214154" data-annotation-type="annotation"><span data-slate-string="true">Error</span></span></span><span 
data-slate-leaf="true" data-offset-key="1336:2"><span data-slate-string="true">: fail</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1337"> <span data-slate-object="text" data-key="1338"><span data-slate-leaf="true" 
data-offset-key="1338:0" data-first-offset="true"><span data-slate-string="true"> at &lt;anonymous&gt;:</span></span><span 
data-slate-leaf="true" data-offset-key="1338:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8322847981" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1338:2"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1338:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1373062960" data-annotation-type="annotation"><span data-slate-string="true">11</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1339"> <span data-slate-object="text" data-key="1340"><span data-slate-leaf="true" 
data-offset-key="1340:0" data-first-offset="true"><span data-slate-string="true"> at e (lizard-service-vendor</span></span><span 
data-slate-leaf="true" data-offset-key="1340:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7127880245" data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1340:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1340:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6909719505" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1340:4"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1341"> <span data-slate-object="text" data-key="1342"><span data-slate-leaf="true" 
data-offset-key="1342:0" data-first-offset="true"><span data-slate-string="true"> (anonymous) 
@ VM261:</span></span><span data-slate-leaf="true" data-offset-key="1342:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_0556024067" data-annotation-type="annotation"><span 
data-slate-string="true">3</span></span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1343"> <span data-slate-object="text" 
data-key="1344"><span data-slate-leaf="true" data-offset-key="1344:0" data-first-offset="true"><span 
data-slate-string="true"> e @ lizard-service-vendor</span></span><span data-slate-leaf="true" 
data-offset-key="1344:1"><span class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_7591640184" 
data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1344:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1344:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5701455617" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1345"> <span data-slate-object="text" data-key="1346"><span data-slate-leaf="true" 
data-offset-key="1346:0" data-first-offset="true"><span data-slate-string="true"> setTimeout 
(</span></span><span data-slate-leaf="true" data-offset-key="1346:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0602471535" data-annotation-type="annotation"><span 
data-slate-string="true">async</span></span></span><span data-slate-leaf="true" data-offset-key="1346:2"><span 
data-slate-string="true">) </span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1347"> <span data-slate-object="text" 
data-key="1348"><span data-slate-leaf="true" data-offset-key="1348:0" data-first-offset="true"><span 
data-slate-string="true"> (anonymous) @ lizard-service-vendor</span></span><span data-slate-leaf="true" 
data-offset-key="1348:1"><span class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0905174663" 
data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1348:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1348:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1982455167" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1349"> <span data-slate-object="text" data-key="1350"><span data-slate-leaf="true" 
data-offset-key="1350:0" data-first-offset="true"><span data-slate-string="true"> fail @ VM261:</span></span><span 
data-slate-leaf="true" data-offset-key="1350:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5281780323" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1351"> <span data-slate-object="text" data-key="1352"><span data-slate-leaf="true" 
data-offset-key="1352:0" data-first-offset="true"><span data-slate-string="true"> (anonymous) 
@ VM296:</span></span><span data-slate-leaf="true" data-offset-key="1352:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_8829726625" data-annotation-type="annotation"><span 
data-slate-string="true">3</span></span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
322px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-2de3a5ac 
" data-slate-type="paragraph" data-slate-object="block" data-key="1353"> <span data-slate-object="text" 
data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" data-first-offset="true"><span 
data-slate-string="true">我们看到了其中的 setTimeout (async) 这样的字样，表示着这是一个异步调用抛出的堆栈，但是，“captured” 这样的字样也并未打印，因为母方法 
fail() 本身的原始顺序执行并没有失败，这个异常的抛出是在回调行为里发生的。</span></span></span> </div> <div class="se-bf51e5a7 
" data-slate-type="paragraph" data-slate-object="block" data-key="1355"> <span data-slate-object="text" 
data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" data-first-offset="true"><span 
data-slate-string="true">从上面的例子可以看出，对于异步编程来说，我们需要使用一种更好的机制来捕获并处理可能发生的异常。</span></span></span> 
</div> <h3 class="se-11ed78dd" data-slate-type="heading" data-slate-object="block" data-key="1357"><span 
data-slate-object="text" data-key="1358"><span data-slate-leaf="true" data-offset-key="1358:0" 
data-first-offset="true"><span data-slate-string="true">Promise 的异常处理</span></span></span></h3> 
<div class="se-e719c28b " data-slate-type="paragraph" data-slate-object="block" data-key="1359"> 
<span data-slate-object="text" data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" 
data-first-offset="true"><span data-slate-string="true">还记得上面介绍的 Promise 吗？它除了支持 resolve 回调以外，还支持 
reject 回调，前者用于表示异步调用顺利结束，而后者则表示有异常发生，中断调用链并将异常抛出：</span></span></span> </div> <div class="se-42d12284 
se-0e9eb857" data-slate-type="pre" data-slate-object="block" data-key="1361" data-code-language="javascript"> 
<div class="se-f7a602cd se-0655e2f9"> <span></span> </div> <div class="se-f0823e92"> <div class="se-058f8bd5 
se-9dee3ff7" data-code-line-number="1"></div> <div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="2"></div> 
<div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="3"></div> <div class="se-058f8bd5 
se-9dee3ff7" data-code-line-number="4"></div> <div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="5"></div> 
</div> <div class="se-be4b4f7d ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1362"> <span data-slate-object="text" data-key="1363"><span 
data-slate-leaf="true" data-offset-key="1363:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2595503562" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1363:1"><span 
data-slate-string="true"> exe = </span></span><span data-slate-leaf="true" data-offset-key="1363:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3832856560" 
data-annotation-type="annotation"><span data-slate-string="true">(flag) =&gt;</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1364"> <span data-slate-object="text" data-key="1365"><span data-slate-leaf="true" 
data-offset-key="1365:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:1"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8671137293" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0859119913" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0859119913" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2463143520" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:6"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6821618312" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:7"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1365:8"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9892309378" data-annotation-type="annotation"><span data-slate-string="true">(resolve, 
reject) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1365:9"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1366"> <span data-slate-object="text" 
data-key="1367"><span data-slate-leaf="true" data-offset-key="1367:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1367:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8589255122" 
data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:2"><span data-slate-string="true">.log(flag);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1368"> <span data-slate-object="text" data-key="1369"><span data-slate-leaf="true" 
data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9664258819" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_1611498641" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1369:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_9664258819" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:3"><span data-slate-string="true"> { flag ? resolve(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3179494293" data-annotation-type="annotation"><span data-slate-string="true">"yes"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:5"><span data-slate-string="true">) : reject(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:6"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3447292088" data-annotation-type="annotation"><span data-slate-string="true">"no"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:7"><span data-slate-string="true">); }, </span></span><span 
data-slate-leaf="true" data-offset-key="1369:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6253978863" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:9"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 244px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-dc418192 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1372"> <span data-slate-object="text" data-key="1373"><span data-slate-leaf="true" 
data-offset-key="1373:0" data-first-offset="true"><span data-slate-string="true">上面的代码中，flag 
参数用来控制流程是顺利执行还是发生错误。在错误发生的时候，no 字符串会被传递给 reject 函数，进一步传递给调用链：</span></span></span> </div> <div 
class="se-5b028af9 se-81af5c05" data-slate-type="pre" data-slate-object="block" data-key="1374" 
data-code-language="javascript"> <div class="se-adc1c3ad se-02bc2c79"> <span></span> </div> 
<div class="se-0155b8bd"> <div class="se-ff8adefc se-3267d4fa" data-code-line-number="1"></div> 
<div class="se-ff8adefc se-3267d4fa" data-code-line-number="2"></div> <div class="se-ff8adefc 
se-3267d4fa" data-code-line-number="3"></div> </div> <div class="se-ad618752 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1375"> <span data-slate-object="text" 
data-key="1376"><span data-slate-leaf="true" data-offset-key="1376:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_5461422269" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1376:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1377"> <span data-slate-object="text" data-key="1378"><span data-slate-leaf="true" 
data-offset-key="1378:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1378:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2792478022" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1378:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1379"> <span data-slate-object="text" data-key="1380"><span data-slate-leaf="true" 
data-offset-key="1380:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1380:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9909557376" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1380:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ace9215d " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">你看，上面的调用链，在执行的时候，第二行就传入了参数 false，它就已经失败了，异常抛出了，因此第三行的 
exe 实际没有得到执行，你会看到这样的执行结果：</span></span></span> </div> <div class="se-16c99102 se-92b63674" 
data-slate-type="pre" data-slate-object="block" data-key="1383" data-code-language="javascript"> 
<div class="se-70d29c30 se-08727e49"> <span></span> </div> <div class="se-249bf4a1"> <div class="se-c3152071 
se-cd8fb9f3" data-code-line-number="1"></div> <div class="se-c3152071 se-cd8fb9f3" data-code-line-number="2"></div> 
</div> <div class="se-e06654d5 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1384"> <span data-slate-object="text" data-key="1385"><span 
data-slate-leaf="true" data-offset-key="1385:0" data-first-offset="true"><span class=" gkhl-literal" 
data-slate-object="annotation" data-annotation-key="gkann_4171589961" data-annotation-type="annotation"><span 
data-slate-string="true">false</span></span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1386"> <span data-slate-object="text" 
data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" data-first-offset="true"><span 
data-slate-string="true">Uncaught (</span></span><span data-slate-leaf="true" data-offset-key="1387:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5903339014" 
data-annotation-type="annotation"><span data-slate-string="true">in</span></span></span><span 
data-slate-leaf="true" data-offset-key="1387:2"><span data-slate-string="true"> promise) no</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-1d466d2e " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">这就说明，通过这种方式，调用链被中断了，下一个正常逻辑 exe(true) 
没有被执行。</span></span></span> </div> <div class="se-e008f813 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">但是，有时候我们需要捕获错误，而继续执行后面的逻辑，该怎样做？这种情况下我们就要在调用链中使用 
catch 了：</span></span></span> </div> <div class="se-938bcda1 se-597e71a4" data-slate-type="pre" 
data-slate-object="block" data-key="1392" data-code-language="javascript"> <div class="se-369c3745 
se-e336de0b"> <span></span> </div> <div class="se-d550786e"> <div class="se-42fd20f7 se-43d43512" 
data-code-line-number="1"></div> <div class="se-42fd20f7 se-43d43512" data-code-line-number="2"></div> 
<div class="se-42fd20f7 se-43d43512" data-code-line-number="3"></div> <div class="se-42fd20f7 
se-43d43512" data-code-line-number="4"></div> </div> <div class="se-8edbabd0 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1393"> <span data-slate-object="text" 
data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_0003316717" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1394:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1395"> <span data-slate-object="text" data-key="1396"><span data-slate-leaf="true" 
data-offset-key="1396:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1396:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3059855851" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1396:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1397"> <span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" 
data-offset-key="1398:0" data-first-offset="true"><span data-slate-string="true"> .catch(</span></span><span 
data-slate-leaf="true" data-offset-key="1398:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2068708000" data-annotation-type="annotation"><span data-slate-string="true">(info) 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1398:2"><span data-slate-string="true"> 
{ </span></span><span data-slate-leaf="true" data-offset-key="1398:3"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_3120588495" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1398:4"><span 
data-slate-string="true">.log(info); })</span></span></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1399"> <span data-slate-object="text" 
data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span 
data-slate-string="true"> .then(exe(</span></span><span data-slate-leaf="true" data-offset-key="1400:1"><span 
class=" gkhl-literal" data-slate-object="annotation" data-annotation-key="gkann_2453111858" 
data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1400:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d8dab81d " data-slate-type="paragraph" data-slate-object="block" data-key="1401"> 
<span data-slate-object="text" data-key="1402"><span data-slate-leaf="true" data-offset-key="1402:0" 
data-first-offset="true"><span data-slate-string="true">这种方式下，异常信息被捕获并打印，而调用链的下一步，也就是第四行的 exe(true) 
可以继续被执行。我们将看到这样的输出：</span></span></span> </div> <div class="se-c7a6f5f6 se-66400864" data-slate-type="pre" 
data-slate-object="block" data-key="1403" data-code-language="javascript"> <div class="se-f0fa4f4c 
se-84360f1b"> <span></span> </div> <div class="se-05ac56df"> <div class="se-38b26a4c se-af110fdc" 
data-code-line-number="1"></div> <div class="se-38b26a4c se-af110fdc" data-code-line-number="2"></div> 
<div class="se-38b26a4c se-af110fdc" data-code-line-number="3"></div> </div> <div class="se-8b421205 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1404"> <span data-slate-object="text" data-key="1405"><span data-slate-leaf="true" 
data-offset-key="1405:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9617535232" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true">no</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_7978071526" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h3 class="se-32950068" data-slate-type="heading" data-slate-object="block" data-key="1410"><span 
data-slate-object="text" data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" 
data-first-offset="true"><span data-slate-string="true">async/await 下的异常处理</span></span></span></h3> 
<div class="se-ee79c571 " data-slate-type="paragraph" data-slate-object="block" data-key="1412"> 
<span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" data-offset-key="1413:0" 
data-first-offset="true"><span data-slate-string="true">利用 async/await 的语法糖，我们可以像处理同步代码的异常一样，来处理异步代码：</span></span></span> 
</div> <div class="se-8df1d4ad se-d7b3c0e8" data-slate-type="pre" data-slate-object="block" 
data-key="1414" data-code-language="javascript"> <div class="se-bed490e8 se-94368dba"> <span></span> 
</div> <div class="se-909699ea"> <div class="se-bcc7b57a se-639df5de" data-code-line-number="1"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="2"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="3"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="4"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="5"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="6"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="7"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="8"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="9"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="10"></div> 
</div> <div class="se-d901a833 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_3301333789" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1416:1"><span 
data-slate-string="true"> run = </span></span><span data-slate-leaf="true" data-offset-key="1416:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7039609931" 
data-annotation-type="annotation"><span data-slate-string="true">async</span></span></span><span 
data-slate-leaf="true" data-offset-key="1416:3"><span data-slate-string="true"> () =&gt; {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1417"> <span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" 
data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1418:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7267804858" data-annotation-type="annotation"><span data-slate-string="true">try</span></span></span><span 
data-slate-leaf="true" data-offset-key="1418:2"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1419"> <span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" 
data-offset-key="1420:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1420:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2142305760" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1420:2"><span data-slate-string="true"> exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1420:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_5444946379" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1420:4"><span data-slate-string="true">)();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1421"> <span data-slate-object="text" data-key="1422"><span data-slate-leaf="true" 
data-offset-key="1422:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1422:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0650681508" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1422:2"><span data-slate-string="true"> exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1422:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_1275559070" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1422:4"><span data-slate-string="true">)();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1423"> <span data-slate-object="text" data-key="1424"><span data-slate-leaf="true" 
data-offset-key="1424:0" data-first-offset="true"><span data-slate-string="true"> } </span></span><span 
data-slate-leaf="true" data-offset-key="1424:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1296657525" data-annotation-type="annotation"><span data-slate-string="true">catch</span></span></span><span 
data-slate-leaf="true" data-offset-key="1424:2"><span data-slate-string="true"> (e) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1425"> <span data-slate-object="text" data-key="1426"><span data-slate-leaf="true" 
data-offset-key="1426:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1426:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6287897376" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1426:2"><span data-slate-string="true">.log(e);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1427"> <span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1429"> <span data-slate-object="text" data-key="1430"><span data-slate-leaf="true" 
data-offset-key="1430:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1431"> <span data-slate-object="text" data-key="1432"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1433"> <span data-slate-object="text" 
data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" data-first-offset="true"><span 
data-slate-string="true">run();</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-1ba84f0f " data-slate-type="paragraph" 
data-slate-object="block" data-key="1435"> <span data-slate-object="text" data-key="1436"><span 
data-slate-leaf="true" data-offset-key="1436:0" data-first-offset="true"><span data-slate-string="true">简单说明一下 
，定义一个异步方法 run，由于 await 后面需要直接跟 Promise 对象，因此我们通过额外的一个方法调用符号 () 把原有的 exe 方法内部的 Thunk 包装拆掉，即执行 
exe(false)() 或 exe(true)() 返回的就是 Promise 对象。在 try 块之后，我们使用 catch 来捕捉。运行代码，我们得到了这样的输出：</span></span></span> 
</div> <div class="se-746a946e se-1e3e4715" data-slate-type="pre" data-slate-object="block" 
data-key="1437" data-code-language="javascript"> <div class="se-bbbe79a5 se-0aadddad"> <span></span> 
</div> <div class="se-02e88e4f"> <div class="se-ab080ae2 se-f7e91bd2" data-code-line-number="1"></div> 
<div class="se-ab080ae2 se-f7e91bd2" data-code-line-number="2"></div> </div> <div class="se-96e082b9 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_8414202509" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1440"> <span data-slate-object="text" data-key="1441"><span data-slate-leaf="true" 
data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">no</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-39d2c2e4 " data-slate-type="paragraph" data-slate-object="block" data-key="1442"> 
<span data-slate-object="text" data-key="1443"><span data-slate-leaf="true" data-offset-key="1443:0" 
data-first-offset="true"><span data-slate-string="true">这个 false 就是 exe 方法对入参的输出，而这个 no 就是 
setTimeout 方法 reject 的回调返回，它通过异常捕获并最终在 catch 块中输出。就像我们所认识的同步代码一样，第四行的 exe(true) 并未得到执行。</span></span></span> 
</div> <h2 class="se-d55ac0e4" data-slate-type="heading" data-slate-object="block" data-key="1444"><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-b8170ee3 " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">今天我们结合实例学习了 JavaScript 异步编程的一些方法，包括使用 
Promise 或 async/await 来改善异步代码，使用生成器来实现协程，以及怎样进行异步错误处理等等。其中，Promise 相关的使用是需要重点理解的内容，因为它的应用性非常普遍。</span></span></span> 
</div> <div class="se-5875745f " data-slate-type="paragraph" data-slate-object="block" data-key="1448"> 
<span data-slate-object="text" data-key="1449"><span data-slate-leaf="true" data-offset-key="1449:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提两个问题：</span></span></span> </div> 
<div class="se-506d4355" data-slate-type="list" data-slate-object="block" data-key="1450"> 
<div class="se-861fae2f se-b7c6cc3d" data-slate-type="list-line" data-slate-object="block" 
data-key="1451"> <span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" 
data-offset-key="1452:0" data-first-offset="true"><span data-slate-string="true">在你的项目中，是否使用过 
JavaScript 异步编程，都使用了和异步编程有关的哪些技术呢？</span></span></span> </div> <div class="se-83fc4714 se-f1810f9e" 
data-slate-type="list-line" data-slate-object="block" data-key="1453"> <span data-slate-object="text" 
data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" data-first-offset="true"><span 
data-slate-string="true">ES6 和 ES7 引入了很多 JavaScript 的高级特性和语法糖，包括这一讲提到的部分。有程序员朋友认为，这些在项目中的应用，反而给编程人员的阅读和理解造成了困扰，增加了学习曲线，还不如不用它们，写“简单”的 
JavaScript 语法。对此，你怎么看？</span></span></span> </div> </div> <div class="se-9ced7841 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1455"> <span data-slate-object="text" data-key="1456"><span 
data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span data-slate-string="true">在本章我们学习了基于 
Web 的全栈技术中，前端相关的部分，希望这些内容能够帮到你，在前端这块土地上成长为更好的工程师。同时，在这一章我们学到了很多套路和方法，请回想一下，并在未来的工作中慢慢应用和体会，它们都是可以应用到软件其它领域的设计和编码上的。在第四章，我们会将目光往后移，去了解了解持久化的世界，希望现在的你依然充满干劲！</span></span></span> 
</div> <h2 class="se-99d16281" data-slate-type="heading" data-slate-object="block" data-key="1457"><span 
data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-e819e4e5" data-slate-type="list" data-slate-object="block" data-key="1459"> <div 
class="se-4a32981f se-9e180f8b" data-slate-type="list-line" data-slate-object="block" data-key="1460"> 
<span data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span data-slate-string="true">对于今天学习的 Promise，你可以在 MDN 的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1462" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="1463"><span data-slate-leaf="true" data-offset-key="1463:0" 
data-first-offset="true"><span data-slate-string="true">使用 Promise</span></span></span></a><span 
data-slate-object="text" data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" 
data-first-offset="true"><span data-slate-string="true"> 一文中读到更为详尽的介绍；第二个是生成器，生成器实际上功能很强大，它甚至可以嵌套使用，你也可以参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">MDN 的示例教程</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-f24cb913 se-275d6afe" data-slate-type="list-line" data-slate-object="block" data-key="1468"> 
<span data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">如果你想快速浏览 ES6 新带来的 JavaScript 高级特性，我推荐你浏览 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1470" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1471"><span data-slate-leaf="true" data-offset-key="1471:0" 
data-first-offset="true"><span data-slate-string="true">ECMAScript 6 入门</span></span></span></a><span 
data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">，从中挑选你感兴趣的内容阅读。</span></span></span> 
</div> <div class="se-0528fbfe se-031ecf0f" data-slate-type="list-line" data-slate-object="block" 
data-key="1473"> <a data-slate-type="link" data-slate-object="inline" data-key="1474" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" data-offset-key="1475:0" 
data-first-offset="true"><span data-slate-string="true">Async-Await ≈ Generators + Promises</span></span></span></a><span 
data-slate-object="text" data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" 
data-first-offset="true"><span data-slate-string="true"> 这篇文章介绍了生成器、Promise 和 async/await 之间的关系，读完你就能明白“为什么我们说 
async/await 是生成器和 Promise 的语法糖”，感兴趣的朋友可以阅读，想阅读中文版的可以参见</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1477" class="se-575a6467 se-198d4f97"><span data-slate-object="text" 
data-key="1478"><span data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span 
data-slate-string="true">这个翻译</span></span></span></a><span data-slate-object="text" data-key="1479"><span 
data-slate-leaf="true" data-offset-key="1479:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> </div> <div class="se-c3a6fda3" data-slate-type="image" data-slate-object="block" data-key="1480"> 
<img class="se-7e51f27a" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 4 msec}
2020-11-19 11:17:52.292 INFO  jdbc.sqltiming Line:373 - select nodebodyen0_.entity_id as entity_i1_3_0_, nodebodyen0_.body_value as body_val2_3_0_, 
nodebodyen0_.body_summary as body_sum3_3_0_, nodebodyen0_.bundle as bundle4_3_0_, nodebodyen0_.delta 
as delta5_3_0_, nodebodyen0_.body_format as body_for6_3_0_, nodebodyen0_.langcode as langcode7_3_0_, 
nodebodyen0_.revision_id as revision8_3_0_ from node__body nodebodyen0_ where nodebodyen0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 11:17:52.292 INFO  jdbc.resultsettable Line:610 - 
|----------|-----------|-------------|-------|------|------------|---------|------------|
|entity_id |body_value |body_summary |bundle |delta |body_format |langcode |revision_id |
|----------|-----------|-------------|-------|------|------------|---------|------------|
|----------|-----------|-------------|-------|------|------------|---------|------------|

2020-11-19 11:17:52.304 INFO  jdbc.sqltiming Line:373 - insert into node__body (body_value, body_summary, bundle, delta, body_format, langcode, revision_id, 
entity_id) values ('<div data-slate-editor="true" data-key="945" autocorrect="off" spellcheck="false" 
data-gramm="false" style="outline: none; white-space: pre-wrap; overflow-wrap: break-word;"> 
<div class="se-de9c851f " data-slate-type="paragraph" data-slate-object="block" data-key="946"> 
<span data-slate-object="text" data-key="947"><span data-slate-leaf="true" data-offset-key="947:0" 
data-first-offset="true"><span data-slate-string="true">你好，我是四火。</span></span></span> </div> 
<div class="se-918b471e " data-slate-type="paragraph" data-slate-object="block" data-key="948"> 
<span data-slate-object="text" data-key="949"><span data-slate-leaf="true" data-offset-key="949:0" 
data-first-offset="true"><span data-slate-string="true">我们在本章伊始的 </span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="950" class="se-575a6467 se-198d4f97"><span data-slate-object="text" 
data-key="951"><span data-slate-leaf="true" data-offset-key="951:0" data-first-offset="true"><span 
data-slate-string="true">[第 14 讲]</span></span></span></a><span data-slate-object="text" data-key="952"><span 
data-slate-leaf="true" data-offset-key="952:0" data-first-offset="true"><span data-slate-string="true"> 
中初步学习了 JavaScript 的事件驱动模型，体会到了思维模式的转变，也建立起了异步编程的初步概念。在本章最后一讲，我们将深入异步编程，继续探讨其中的关键技术。</span></span></span> 
</div> <div class="se-55383120 " data-slate-type="paragraph" data-slate-object="block" data-key="953"> 
<span data-slate-object="text" data-key="954"><span data-slate-leaf="true" data-offset-key="954:0" 
data-first-offset="true"><span data-slate-string="true">异步编程就像是一个神秘的宝盒，看起来晶莹剔透，可一旦使用不当，就会是带来灾难的潘多拉盒子，状态混乱，难以维护。希望在这一讲之后，你可以了解更多的关于 
JavaScript 在异步编程方面的高级特性，从而习惯并写出可靠的异步代码。</span></span></span> </div> <h2 class="se-e7a79a27" 
data-slate-type="heading" data-slate-object="block" data-key="955"><span data-slate-object="text" 
data-key="956"><span data-slate-leaf="true" data-offset-key="956:0" data-first-offset="true"><span 
data-slate-string="true">1. 用 Promise 优化嵌套回调</span></span></span></h2> <div class="se-d54b5234 
" data-slate-type="paragraph" data-slate-object="block" data-key="957"> <span data-slate-object="text" 
data-key="958"><span data-slate-leaf="true" data-offset-key="958:0" data-first-offset="true"><span 
data-slate-string="true">假如我们需要写这样一段代码，来模拟一只小狗向前奔跑，它一共跑了 3 次，奔跑的距离分别为 1、2、3，每次奔跑都要花费 1 秒钟时间：</span></span></span> 
</div> <div class="se-67c417b3 se-a4272bdc" data-slate-type="pre" data-slate-object="block" 
data-key="959" data-code-language="javascript"> <div class="se-e589d2c5 se-03f91372"> <span></span> 
</div> <div class="se-5df4fb31"> <div class="se-39823e9f se-086df542" data-code-line-number="1"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="2"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="3"></div> <div class="se-39823e9f se-086df542" data-code-line-number="4"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="5"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="6"></div> <div class="se-39823e9f se-086df542" data-code-line-number="7"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="8"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="9"></div> <div class="se-39823e9f se-086df542" data-code-line-number="10"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="11"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="12"></div> <div class="se-39823e9f se-086df542" data-code-line-number="13"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="14"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="15"></div> <div class="se-39823e9f se-086df542" data-code-line-number="16"></div> 
<div class="se-39823e9f se-086df542" data-code-line-number="17"></div> <div class="se-39823e9f 
se-086df542" data-code-line-number="18"></div> </div> <div class="se-e25cb6d4 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="960"> <span data-slate-object="text" 
data-key="961"><span data-slate-leaf="true" data-offset-key="961:0" data-first-offset="true"><span 
data-slate-string="true">setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="962"> <span data-slate-object="text" 
data-key="963"><span data-slate-leaf="true" data-offset-key="963:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="963:1"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_7353051967" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6005259727" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="963:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6005259727" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="963:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="964"> <span data-slate-object="text" data-key="965"><span 
data-slate-leaf="true" data-offset-key="965:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="965:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_8644002412" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="965:2"><span 
data-slate-string="true">.log(</span></span><span data-slate-leaf="true" data-offset-key="965:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_1325559615" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="965:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="966"> <span data-slate-object="text" data-key="967"><span data-slate-leaf="true" 
data-offset-key="967:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="968"> <span data-slate-object="text" data-key="969"><span data-slate-leaf="true" 
data-offset-key="969:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="969:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_0819417133" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_6277338948" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="969:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0819417133" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="969:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="970"> <span data-slate-object="text" data-key="971"><span data-slate-leaf="true" 
data-offset-key="971:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="971:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6676927967" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="971:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="971:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2213390099" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="971:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="972"> <span data-slate-object="text" data-key="973"><span data-slate-leaf="true" 
data-offset-key="973:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="974"> <span data-slate-object="text" data-key="975"><span data-slate-leaf="true" 
data-offset-key="975:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="975:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2421624262" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_4669058827" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="975:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2421624262" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="975:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="976"> <span data-slate-object="text" data-key="977"><span data-slate-leaf="true" 
data-offset-key="977:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="977:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_8673553610" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="977:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="977:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5162212816" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="977:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="978"> <span data-slate-object="text" data-key="979"><span data-slate-leaf="true" 
data-offset-key="979:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="980"> <span data-slate-object="text" data-key="981"><span data-slate-leaf="true" 
data-offset-key="981:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="981:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8260756562" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="982"> <span data-slate-object="text" data-key="983"><span data-slate-leaf="true" 
data-offset-key="983:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="984"> <span data-slate-object="text" data-key="985"><span data-slate-leaf="true" 
data-offset-key="985:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="986"> <span data-slate-object="text" data-key="987"><span data-slate-leaf="true" 
data-offset-key="987:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="987:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9103397021" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="988"> <span data-slate-object="text" data-key="989"><span data-slate-leaf="true" 
data-offset-key="989:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="990"> <span data-slate-object="text" data-key="991"><span data-slate-leaf="true" 
data-offset-key="991:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="992"> <span data-slate-object="text" data-key="993"><span data-slate-leaf="true" 
data-offset-key="993:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="993:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1822995045" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="994"> <span data-slate-object="text" data-key="995"><span data-slate-leaf="true" 
data-offset-key="995:0" data-first-offset="true"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-266328b3 " data-slate-type="paragraph" data-slate-object="block" data-key="996"> 
<span data-slate-object="text" data-key="997"><span data-slate-leaf="true" data-offset-key="997:0" 
data-first-offset="true"><span data-slate-string="true">你看，我们用了 3 次 setTimeout，每次都接受两个参数，第一个参数是一个函数，用以打印当前跑的距离，以及递归调用奔跑逻辑，第二个参数用于模拟奔跑耗时 
1000 毫秒。这个问题其实代表了实际编程中一类很常见的 JavaScript 异步编程问题。例如，使用 Ajax 方式异步获取一个请求，在得到返回的结果后，再执行另一个 Ajax 
操作。</span></span></span> </div> <div class="se-38e95e83 " data-slate-type="paragraph" data-slate-object="block" 
data-key="998"> <span data-slate-object="text" data-key="999"><span data-slate-leaf="true" 
data-offset-key="999:0" data-first-offset="true"><span data-slate-string="true">现在，请你打开 Chrome 
开发者工具中的控制台，运行一下：</span></span></span> </div> <div class="se-dc4bf5c3 se-9acbca5c" data-slate-type="pre" 
data-slate-object="block" data-key="1000"> <div class="se-4b9bdab2 se-b77495b5"> <span></span> 
</div> <div class="se-89804381"> <div class="se-0d4287bb se-12957da0" data-code-line-number="1"></div> 
<div class="se-0d4287bb se-12957da0" data-code-line-number="2"></div> <div class="se-0d4287bb 
se-12957da0" data-code-line-number="3"></div> <div class="se-0d4287bb se-12957da0" data-code-line-number="4"></div> 
</div> <div class="se-88d3d8e1 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1001"> <span data-slate-object="text" data-key="1002"><span 
data-slate-leaf="true" data-offset-key="1002:0" data-first-offset="true"><span data-slate-string="true">3693</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1003"> <span data-slate-object="text" data-key="1004"><span data-slate-leaf="true" 
data-offset-key="1004:0" data-first-offset="true"><span data-slate-string="true">1</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1005"> <span data-slate-object="text" data-key="1006"><span data-slate-leaf="true" 
data-offset-key="1006:0" data-first-offset="true"><span data-slate-string="true">2</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1007"> <span data-slate-object="text" data-key="1008"><span data-slate-leaf="true" 
data-offset-key="1008:0" data-first-offset="true"><span data-slate-string="true">3</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-52dee717 " data-slate-type="paragraph" data-slate-object="block" data-key="1009"> 
<span data-slate-object="text" data-key="1010"><span data-slate-leaf="true" data-offset-key="1010:0" 
data-first-offset="true"><span data-slate-string="true">第一行是 setTimeout 返回的句柄，由于控制台运行的关系，系统会把最后一行执行的返回值打印出来，因此它可以忽略。除此之外，结果恰如预期，每一行的打印都间隔了一秒，模拟了奔跑的效果。</span></span></span> 
</div> <div class="se-40e26bbb " data-slate-type="paragraph" data-slate-object="block" data-key="1011"> 
<span data-slate-object="text" data-key="1012"><span data-slate-leaf="true" data-offset-key="1012:0" 
data-first-offset="true"><span data-slate-string="true">但是，这个代码似乎不太“好看”啊，繁琐而且冗长，易理解性和可维护性显然不过关，代码的状态量在这种情况下很难预测和维护。就如同同步编程世界中常见的“</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1013" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="1014"><span data-slate-leaf="true" data-offset-key="1014:0" 
data-first-offset="true"><span data-slate-string="true">面条代码</span></span></span></a><span 
data-slate-object="text" data-key="1015"><span data-slate-leaf="true" data-offset-key="1015:0" 
data-first-offset="true"><span data-slate-string="true">（Spaghetti Code）”一样，这样“坏味道”的代码在异步编程的世界中其实也很常见，且也有个专有称呼——“金字塔厄运”（Pyramid 
of Doom，嵌套结构就像金字塔一样）。</span></span></span> </div> <div class="se-20280094 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1016"> <span data-slate-object="text" data-key="1017"><span 
data-slate-leaf="true" data-offset-key="1017:0" data-first-offset="true"><span data-slate-string="true">到这里，不知你会不会想，能不能把重复的逻辑抽取出来呢？具体说，就是这个 
setTimeout 方法相关的代码。于是，我们可以抽取公用逻辑，定义一个 run 方法，接受两个参数，一个是当前跑动距离，第二个是回调方法，用于当前跑完以后，触发下一次跑动的行为：</span></span></span> 
</div> <div class="se-d1d08a2a se-eb5bbcda" data-slate-type="pre" data-slate-object="block" 
data-key="1018" data-code-language="typescript"> <div class="se-4e18da44 se-115da660"> <span></span> 
</div> <div class="se-1565a0c7"> <div class="se-db86861e se-ae800546" data-code-line-number="1"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="2"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="3"></div> <div class="se-db86861e se-ae800546" data-code-line-number="4"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="5"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="6"></div> <div class="se-db86861e se-ae800546" data-code-line-number="7"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="8"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="9"></div> <div class="se-db86861e se-ae800546" data-code-line-number="10"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="11"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="12"></div> <div class="se-db86861e se-ae800546" data-code-line-number="13"></div> 
<div class="se-db86861e se-ae800546" data-code-line-number="14"></div> <div class="se-db86861e 
se-ae800546" data-code-line-number="15"></div> </div> <div class="se-ada9d1b3 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1019"> <span data-slate-object="text" 
data-key="1020"><span data-slate-leaf="true" data-offset-key="1020:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6392354210" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1020:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1020:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2074961370" data-annotation-type="annotation"><span data-slate-string="true">(steps, 
callback) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1020:3"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1021"> <span data-slate-object="text" 
data-key="1022"><span data-slate-leaf="true" data-offset-key="1022:0" data-first-offset="true"><span 
data-slate-string="true"> setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1023"> <span data-slate-object="text" 
data-key="1024"><span data-slate-leaf="true" data-offset-key="1024:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1024:1"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7190241106" 
data-annotation-type="annotation"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9008050723" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1024:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7190241106" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1024:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1025"> <span data-slate-object="text" data-key="1026"><span 
data-slate-leaf="true" data-offset-key="1026:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1026:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_5635068247" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1026:2"><span 
data-slate-string="true">.log(steps);</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1027"> <span data-slate-object="text" 
data-key="1028"><span data-slate-leaf="true" data-offset-key="1028:0" data-first-offset="true"><span 
data-slate-string="true"> callback();</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1029"> <span data-slate-object="text" 
data-key="1030"><span data-slate-leaf="true" data-offset-key="1030:0" data-first-offset="true"><span 
data-slate-string="true"> },</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1031"> <span data-slate-object="text" 
data-key="1032"><span data-slate-leaf="true" data-offset-key="1032:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1032:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_2518066519" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1033"> <span data-slate-object="text" data-key="1034"><span data-slate-leaf="true" 
data-offset-key="1034:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1035"> <span data-slate-object="text" data-key="1036"><span data-slate-leaf="true" 
data-offset-key="1036:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1037"> <span data-slate-object="text" data-key="1038"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1039"> <span data-slate-object="text" 
data-key="1040"><span data-slate-leaf="true" data-offset-key="1040:0" data-first-offset="true"><span 
data-slate-string="true">run(</span></span><span data-slate-leaf="true" data-offset-key="1040:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3674064670" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1040:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1040:3"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3101218579" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0785478381" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1040:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0785478381" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1040:5"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1041"> <span data-slate-object="text" data-key="1042"><span data-slate-leaf="true" 
data-offset-key="1042:0" data-first-offset="true"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1042:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1435810281" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1042:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1042:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_8111904872" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_3157348447" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1042:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_8111904872" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1042:5"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1043"> <span data-slate-object="text" data-key="1044"><span data-slate-leaf="true" 
data-offset-key="1044:0" data-first-offset="true"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1044:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8286635061" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1044:2"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1044:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6075338238" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2138965928" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1044:4"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6075338238" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1044:5"><span data-slate-string="true"> {});</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1045"> <span data-slate-object="text" data-key="1046"><span data-slate-leaf="true" 
data-offset-key="1046:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1047"> <span data-slate-object="text" data-key="1048"><span data-slate-leaf="true" 
data-offset-key="1048:0" data-first-offset="true"><span data-slate-string="true">});</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-78a42656 " data-slate-type="paragraph" data-slate-object="block" data-key="1049"> 
<span data-slate-object="text" data-key="1050"><span data-slate-leaf="true" data-offset-key="1050:0" 
data-first-offset="true"><span data-slate-string="true">嗯，代码确实清爽多了。可是，看着这嵌套的三个 run，我觉得这并没有从本质上解决问题，只是代码简短了些，嵌套调用依然存在。</span></span></span> 
</div> <div class="se-cfc0da38 " data-slate-type="paragraph" data-slate-object="block" data-key="1051"> 
<span data-slate-object="text" data-key="1052"><span data-slate-leaf="true" data-offset-key="1052:0" 
data-first-offset="true"><span data-slate-string="true">每当我们开始写这样反复嵌套回调的代码时，我们就应该警醒，我们是否在创造一个代码维护上的坑。那能不能使用某一种优雅的方式来解决这个问题呢？</span></span></span> 
</div> <div class="se-fea81a1f " data-slate-type="paragraph" data-slate-object="block" data-key="1053"> 
<span data-slate-object="text" data-key="1054"><span data-slate-leaf="true" data-offset-key="1054:0" 
data-first-offset="true"><span data-slate-string="true">有！它就是 Promise，并且从 ES6 开始，JavaScript 
原生支持，不再需要第三方的库或者自己实现的工具类了。</span></span></span> </div> <div class="se-4a9f1730 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1055"> <span data-slate-object="text" data-key="1056"><span 
data-slate-leaf="true" data-offset-key="1056:0" data-first-offset="true"><span class="se-b930256c" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">Promise，就如同字面意思“承诺”一样，定义在当前，但行为发生于未来。</span></span></span></span><span 
data-slate-object="text" data-key="1057"><span data-slate-leaf="true" data-offset-key="1057:0" 
data-first-offset="true"><span data-slate-string="true">它的构造方法中接受一个函数（如果你对这种将函数作为参数的方式传入还不习惯，请回看 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1058" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1059"><span data-slate-leaf="true" data-offset-key="1059:0" 
data-first-offset="true"><span data-slate-string="true">[第 15 讲]</span></span></span></a><span 
data-slate-object="text" data-key="1060"><span data-slate-leaf="true" data-offset-key="1060:0" 
data-first-offset="true"><span data-slate-string="true"> 对函数成为一等公民的介绍），并且这个函数接受 resolve 和 reject 
两个参数，前者在未来的执行成功时会被调用，后者在未来的执行失败时会被调用。</span></span></span> </div> <div class="se-fd21d256 se-45b0655f" 
data-slate-type="pre" data-slate-object="block" data-key="1061" data-code-language="javascript"> 
<div class="se-bd7406f4 se-669f0660"> <span></span> </div> <div class="se-2942757b"> <div class="se-d5a38553 
se-94834f39" data-code-line-number="1"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="2"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="3"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="4"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="5"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="6"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="7"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="8"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="9"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="10"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="11"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="12"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="13"></div> <div class="se-d5a38553 se-94834f39" data-code-line-number="14"></div> 
<div class="se-d5a38553 se-94834f39" data-code-line-number="15"></div> <div class="se-d5a38553 
se-94834f39" data-code-line-number="16"></div> </div> <div class="se-f494ce82 ps ps--active-x"> 
<div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1062"> <span data-slate-object="text" data-key="1063"><span data-slate-leaf="true" 
data-offset-key="1063:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0545905166" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1063:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1063:2"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_9200177053" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_3217130575" data-annotation-type="annotation"><span 
data-slate-string="true">steps</span></span></span></span><span data-slate-leaf="true" data-offset-key="1063:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3217130575" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1063:4"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1064"> <span data-slate-object="text" data-key="1065"><span data-slate-leaf="true" 
data-offset-key="1065:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1065:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_3200502665" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2410990330" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1065:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3200502665" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1065:3"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1066"> <span data-slate-object="text" data-key="1067"><span data-slate-leaf="true" 
data-offset-key="1067:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1067:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7412783137" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1067:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1067:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9613269008" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1067:4"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1067:5"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9160107726" data-annotation-type="annotation"><span data-slate-string="true">(resolve, 
reject) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1067:6"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1068"> <span data-slate-object="text" 
data-key="1069"><span data-slate-leaf="true" data-offset-key="1069:0" data-first-offset="true"><span 
data-slate-string="true"> setTimeout(</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1070"> <span data-slate-object="text" 
data-key="1071"><span data-slate-leaf="true" data-offset-key="1071:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1071:1"><span 
class=" gkhl-params" data-slate-object="annotation" data-annotation-key="gkann_9353625383" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1712153190" data-annotation-type="annotation"><span data-slate-string="true">()</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1071:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1712153190" data-annotation-type="annotation"><span data-slate-string="true"> 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1071:3"><span data-slate-string="true"> 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1072"> <span data-slate-object="text" data-key="1073"><span 
data-slate-leaf="true" data-offset-key="1073:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1073:1"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_1480040991" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1073:2"><span 
data-slate-string="true">.log(steps);</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1074"> <span data-slate-object="text" 
data-key="1075"><span data-slate-leaf="true" data-offset-key="1075:0" data-first-offset="true"><span 
data-slate-string="true"> resolve(); </span></span><span data-slate-leaf="true" data-offset-key="1075:1"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_8037285323" 
data-annotation-type="annotation"><span data-slate-string="true">// 一秒后的未来执行成功，需要调用</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1076"> <span data-slate-object="text" data-key="1077"><span data-slate-leaf="true" 
data-offset-key="1077:0" data-first-offset="true"><span data-slate-string="true"> },</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1078"> <span data-slate-object="text" data-key="1079"><span data-slate-leaf="true" 
data-offset-key="1079:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1079:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7151980477" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1080"> <span data-slate-object="text" data-key="1081"><span data-slate-leaf="true" 
data-offset-key="1081:0" data-first-offset="true"><span data-slate-string="true"> );</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1082"> <span data-slate-object="text" data-key="1083"><span data-slate-leaf="true" 
data-offset-key="1083:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1084"> <span data-slate-object="text" data-key="1085"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1086"> <span data-slate-object="text" 
data-key="1087"><span data-slate-leaf="true" data-offset-key="1087:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8494141190" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1087:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1088"> <span data-slate-object="text" data-key="1089"><span data-slate-leaf="true" 
data-offset-key="1089:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1089:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9019550594" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1089:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1090"> <span data-slate-object="text" data-key="1091"><span data-slate-leaf="true" 
data-offset-key="1091:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1091:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8528691892" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1091:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1092"> <span data-slate-object="text" data-key="1093"><span data-slate-leaf="true" 
data-offset-key="1093:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1093:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9918186853" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1093:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 348px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-efb479f1 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1094"> <span data-slate-object="text" data-key="1095"><span data-slate-leaf="true" 
data-offset-key="1095:0" data-first-offset="true"><span data-slate-string="true">正如代码所示，这一次我们让 
run() 方法返回一个函数，这个函数执行的时候会返回一个 Promise 对象。这样，这个 Promise 对象，并不是在程序一开始就初始化的，而是在未来的某一时刻，前一步操作完成之后才会得到执行，这一点非常关键，并且这是一种</span></span></span><span 
data-slate-object="text" data-key="1096"><span data-slate-leaf="true" data-offset-key="1096:0" 
data-first-offset="true"><span class="se-dd090614" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">通过给原始代码添加函数包装的方式实现了这里的“定义、传递、但不执行”的要求。</span></span></span></span> 
</div> <div class="se-b20bcb33 " data-slate-type="paragraph" data-slate-object="block" data-key="1097"> 
<span data-slate-object="text" data-key="1098"><span data-slate-leaf="true" data-offset-key="1098:0" 
data-first-offset="true"><span data-slate-string="true">这样做就是把实际的执行逻辑使用一个临时函数包装起来再传递出去，以达到延迟对该逻辑求值的目的，这种方式有一个专有名字 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1099" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1100"><span data-slate-leaf="true" data-offset-key="1100:0" 
data-first-offset="true"><span data-slate-string="true">Thunk</span></span></span></a><span 
data-slate-object="text" data-key="1101"><span data-slate-leaf="true" data-offset-key="1101:0" 
data-first-offset="true"><span data-slate-string="true">，它是一种在 JavaScript 异步编程的世界中很常见的手段（JavaScript 
中有时 Thunk 特指用这种技术来将多参数函数包装成单参数函数，这种情况我们在此不讨论）。换言之，上面代码例子中的第二行，绝不可省略，一些刚开始学写异步编程的程序员朋友，就很容易犯这个错误。</span></span></span> 
</div> <div class="se-5e111351 " data-slate-type="paragraph" data-slate-object="block" data-key="1102"> 
<span data-slate-object="text" data-key="1103"><span data-slate-leaf="true" data-offset-key="1103:0" 
data-first-offset="true"><span data-slate-string="true">另外，这里我还使用了两个小技巧来简化代码：</span></span></span> 
</div> <div class="se-c0728e4a" data-slate-type="list" data-slate-object="block" data-key="1104"> 
<div class="se-ff0034c7 se-5d9cfe90" data-slate-type="list-line" data-slate-object="block" 
data-key="1105"> <span data-slate-object="text" data-key="1106"><span data-slate-leaf="true" 
data-offset-key="1106:0" data-first-offset="true"><span data-slate-string="true">一个是 () =&gt; 
{ return xxx; } 可以被简化为 () =&gt; xxx；</span></span></span> </div> <div class="se-3e716c39 se-13165323" 
data-slate-type="list-line" data-slate-object="block" data-key="1107"> <span data-slate-object="text" 
data-key="1108"><span data-slate-leaf="true" data-offset-key="1108:0" data-first-offset="true"><span 
data-slate-string="true">另一个是使用 Promise.resolve() 返回一个已经执行成功的空操作，从而将所有后续执行的 run 方法都可以以统一的形式放到调用链里面去。</span></span></span> 
</div> </div> <div class="se-f4e3e220 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1109"> <span data-slate-object="text" data-key="1110"><span data-slate-leaf="true" 
data-offset-key="1110:0" data-first-offset="true"><span data-slate-string="true">现在，使用 run() 
方法的代码调用已经格外地简单而清晰了。在 Promise 的帮助下，通过这种方式，用了几个 then 方法，实现了逻辑在前一步成功后的依次执行。于是，</span></span></span><span 
data-slate-object="text" data-key="1111"><span data-slate-leaf="true" data-offset-key="1111:0" 
data-first-offset="true"><span class="se-1da9d0e7" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">嵌套的金字塔厄运消失了，变成了直观的链式调用</span></span></span></span><span data-slate-object="text" 
data-key="1112"><span data-slate-leaf="true" data-offset-key="1112:0" data-first-offset="true"><span 
data-slate-string="true">，这是异步编程中一个非常常见的优化。</span></span></span> </div> <div class="se-3ccf25d3 
" data-slate-type="paragraph" data-slate-object="block" data-key="1113"> <span data-slate-object="text" 
data-key="1114"><span data-slate-leaf="true" data-offset-key="1114:0" data-first-offset="true"><span 
data-slate-string="true">如果我们乘胜追击，进一步考虑，上面那个 run() 方法明显不够直观，能不能以某种方式优化调整一下？</span></span></span> 
</div> <div class="se-e01c3a1b " data-slate-type="paragraph" data-slate-object="block" data-key="1115"> 
<span data-slate-object="text" data-key="1116"><span data-slate-leaf="true" data-offset-key="1116:0" 
data-first-offset="true"><span data-slate-string="true">能！代码看起来复杂的原因是引入了 setTimeout，而我们使用 setTimeout 
只是为了“等一下”，来模拟小狗奔跑的过程。这个“等一下”的行为，实际是有普遍意义的。在 JavaScript 这样的非阻塞代码中，不可能通过代码的方式让代码实际执行的时候真的“等一下”，但是，我们却可以使用异步的方式让代码看起来像是执行了一个“等一下”的操作。我们定义：</span></span></span> 
</div> <div class="se-70131484 se-f72c2423" data-slate-type="pre" data-slate-object="block" 
data-key="1117" data-code-language="javascript"> <div class="se-9423e27f se-20b3058f"> <span></span> 
</div> <div class="se-49a484bd"> <div class="se-8e757f5d se-23d68118" data-code-line-number="1"></div> 
<div class="se-8e757f5d se-23d68118" data-code-line-number="2"></div> </div> <div class="se-35a6c1e2 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1118"> <span data-slate-object="text" data-key="1119"><span data-slate-leaf="true" 
data-offset-key="1119:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4619369538" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1119:1"><span data-slate-string="true"> wait = </span></span><span 
data-slate-leaf="true" data-offset-key="1119:2"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_4074307273" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_2185470112" data-annotation-type="annotation"><span 
data-slate-string="true">ms</span></span></span></span><span data-slate-leaf="true" data-offset-key="1119:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2185470112" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1120"> <span data-slate-object="text" data-key="1121"><span data-slate-leaf="true" 
data-offset-key="1121:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1121:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_6112658195" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1121:3"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4810199394" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:4"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1121:5"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_2514843526" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0903576290" data-annotation-type="annotation"><span 
data-slate-string="true">resolve</span></span></span></span><span data-slate-leaf="true" data-offset-key="1121:6"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0903576290" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1121:7"><span data-slate-string="true"> setTimeout(resolve, 
ms));</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 
0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 341px;"></div> </div> 
<div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-f726cc4a " data-slate-type="paragraph" 
data-slate-object="block" data-key="1122"> <span data-slate-object="text" data-key="1123"><span 
data-slate-leaf="true" data-offset-key="1123:0" data-first-offset="true"><span data-slate-string="true">有了 
wait 的铺垫，我们把原本奔跑的 setTimeout 使用更为直观的 wait 函数来替换，一下子就让 run 的实现清晰了很多：</span></span></span> </div> 
<div class="se-29fe20b6 se-4d0d1e58" data-slate-type="pre" data-slate-object="block" data-key="1124" 
data-code-language="javascript"> <div class="se-82978d01 se-87d4e4dd"> <span></span> </div> 
<div class="se-e146e66c"> <div class="se-ef405fbe se-16885931" data-code-line-number="1"></div> 
<div class="se-ef405fbe se-16885931" data-code-line-number="2"></div> </div> <div class="se-49101c2f 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1125"> <span data-slate-object="text" data-key="1126"><span data-slate-leaf="true" 
data-offset-key="1126:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7896487549" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1126:1"><span data-slate-string="true"> run = </span></span><span 
data-slate-leaf="true" data-offset-key="1126:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6171932524" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_6582251349" data-annotation-type="annotation"><span 
data-slate-string="true">steps</span></span></span></span><span data-slate-leaf="true" data-offset-key="1126:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6171932524" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1126:4"><span data-slate-string="true"> </span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1127"> <span data-slate-object="text" data-key="1128"><span data-slate-leaf="true" 
data-offset-key="1128:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1128:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_6607003934" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_8504743537" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1128:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_6607003934" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:3"><span data-slate-string="true"> wait(</span></span><span 
data-slate-leaf="true" data-offset-key="1128:4"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4362746176" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:5"><span data-slate-string="true">).then(</span></span><span 
data-slate-leaf="true" data-offset-key="1128:6"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_7497858799" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_4717584066" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1128:7"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7497858799" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:8"><span data-slate-string="true"> { </span></span><span 
data-slate-leaf="true" data-offset-key="1128:9"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0311085964" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1128:10"><span data-slate-string="true">.log(steps); 
});</span></span></span> </div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 
0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 310px;"></div> </div> 
<div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-df68fa4c " data-slate-type="paragraph" 
data-slate-object="block" data-key="1129"> <span data-slate-object="text" data-key="1130"><span 
data-slate-leaf="true" data-offset-key="1130:0" data-first-offset="true"><span data-slate-string="true">你看，这个例子，再加上前面的 
then 调用链的例子，你是否看出，</span></span></span><span data-slate-object="text" data-key="1131"><span 
data-slate-leaf="true" data-offset-key="1131:0" data-first-offset="true"><span class="se-c1278467" 
data-slate-type="bold" data-slate-object="mark"><span data-slate-string="true">利用 Promise，我们似乎神奇地把“异步”代码变成“同步”的了</span></span></span></span><span 
data-slate-object="text" data-key="1132"><span data-slate-leaf="true" data-offset-key="1132:0" 
data-first-offset="true"><span data-slate-string="true">。其实，代码执行并没有真正地变成同步，但是代码却“看起来”像是同步代码，而同步和顺序执行的逻辑对于人的大脑更为友好。</span></span></span> 
</div> <div class="se-87c29a69 " data-slate-type="paragraph" data-slate-object="block" data-key="1133"> 
<span data-slate-object="text" data-key="1134"><span data-slate-leaf="true" data-offset-key="1134:0" 
data-first-offset="true"><span data-slate-string="true">经过这样的重构以后，再次执行刚才的 3 次奔跑调用，我们得到了一样的结果。</span></span></span> 
</div> <div class="se-28783c31 se-9a7994f7" data-slate-type="pre" data-slate-object="block" 
data-key="1135" data-code-language="javascript"> <div class="se-cbc80395 se-97c8b011"> <span></span> 
</div> <div class="se-28788c8d"> <div class="se-b6a31cd6 se-2db725af" data-code-line-number="1"></div> 
<div class="se-b6a31cd6 se-2db725af" data-code-line-number="2"></div> <div class="se-b6a31cd6 
se-2db725af" data-code-line-number="3"></div> <div class="se-b6a31cd6 se-2db725af" data-code-line-number="4"></div> 
</div> <div class="se-36013df4 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1136"> <span data-slate-object="text" data-key="1137"><span 
data-slate-leaf="true" data-offset-key="1137:0" data-first-offset="true"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_7909271555" data-annotation-type="annotation"><span 
data-slate-string="true">Promise</span></span></span><span data-slate-leaf="true" data-offset-key="1137:1"><span 
data-slate-string="true">.resolve()</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1138"> <span data-slate-object="text" 
data-key="1139"><span data-slate-leaf="true" data-offset-key="1139:0" data-first-offset="true"><span 
data-slate-string="true"> .then(run(</span></span><span data-slate-leaf="true" data-offset-key="1139:1"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_4293824220" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1139:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1140"> <span data-slate-object="text" data-key="1141"><span data-slate-leaf="true" 
data-offset-key="1141:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1141:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0785158201" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1141:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1142"> <span data-slate-object="text" data-key="1143"><span data-slate-leaf="true" 
data-offset-key="1143:0" data-first-offset="true"><span data-slate-string="true"> .then(run(</span></span><span 
data-slate-leaf="true" data-offset-key="1143:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_9197837410" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1143:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-f5e3fa9b " data-slate-type="paragraph" data-slate-object="block" data-key="1144"> 
<span data-slate-object="text" data-key="1145"><span data-slate-leaf="true" data-offset-key="1145:0" 
data-first-offset="true"><span data-slate-string="true">嗯，看起来我们已经做到极致了，代码也已经很清楚了，大概没有办法再改写和优化了吧？不！其实我们还有继续操作的办法。也许我应该说，居然还有。</span></span></span> 
</div> <div class="se-dde9131f " data-slate-type="paragraph" data-slate-object="block" data-key="1146"> 
<span data-slate-object="text" data-key="1147"><span data-slate-leaf="true" data-offset-key="1147:0" 
data-first-offset="true"><span data-slate-string="true">在 ES7 中，async/await 的语法糖被引入。通过它，我们可以进一步优化代码的写法，让异步编程越来越像同步编程，也越来越接近人大脑自然的思维。</span></span></span> 
</div> <div class="se-33f95596" data-slate-type="list" data-slate-object="block" data-key="1148"> 
<div class="se-55678fc5 se-d8d6ccc3" data-slate-type="list-line" data-slate-object="block" 
data-key="1149"> <span data-slate-object="text" data-key="1150"><span data-slate-leaf="true" 
data-offset-key="1150:0" data-first-offset="true"><span data-slate-string="true">async 用于标记当前的函数为异步函数；</span></span></span> 
</div> <div class="se-d6b72ef9 se-46e53cb3" data-slate-type="list-line" data-slate-object="block" 
data-key="1151"> <span data-slate-object="text" data-key="1152"><span data-slate-leaf="true" 
data-offset-key="1152:0" data-first-offset="true"><span data-slate-string="true">await 用于表示它的后面要返回一个 
Promise 对象，在这个 Promise 对象得到异步结果以后，再继续往下执行。</span></span></span> </div> </div> <div class="se-f51d566f 
" data-slate-type="paragraph" data-slate-object="block" data-key="1153"> <span data-slate-object="text" 
data-key="1154"><span data-slate-leaf="true" data-offset-key="1154:0" data-first-offset="true"><span 
data-slate-string="true">考虑一下上面的 run 方法，现在我们可以把它改写成 async/await 的形式：</span></span></span> </div> 
<div class="se-7530f5be se-2ffa1233" data-slate-type="pre" data-slate-object="block" data-key="1155" 
data-code-language="javascript"> <div class="se-713b04d3 se-e27d8798"> <span></span> </div> 
<div class="se-79155ddd"> <div class="se-c458d794 se-448f3a85" data-code-line-number="1"></div> 
<div class="se-c458d794 se-448f3a85" data-code-line-number="2"></div> <div class="se-c458d794 
se-448f3a85" data-code-line-number="3"></div> <div class="se-c458d794 se-448f3a85" data-code-line-number="4"></div> 
</div> <div class="se-77c56e79 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1156"> <span data-slate-object="text" data-key="1157"><span 
data-slate-leaf="true" data-offset-key="1157:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_8162190915" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1157:1"><span 
data-slate-string="true"> run = </span></span><span data-slate-leaf="true" data-offset-key="1157:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_2325008393" 
data-annotation-type="annotation"><span data-slate-string="true">async</span></span></span><span 
data-slate-leaf="true" data-offset-key="1157:3"><span data-slate-string="true"> steps =&gt; 
{</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1158"> <span data-slate-object="text" data-key="1159"><span 
data-slate-leaf="true" data-offset-key="1159:0" data-first-offset="true"><span data-slate-string="true"> 
</span></span><span data-slate-leaf="true" data-offset-key="1159:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_4748890351" data-annotation-type="annotation"><span 
data-slate-string="true">await</span></span></span><span data-slate-leaf="true" data-offset-key="1159:2"><span 
data-slate-string="true"> wait(</span></span><span data-slate-leaf="true" data-offset-key="1159:3"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_3428711748" 
data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1159:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1160"> <span data-slate-object="text" data-key="1161"><span data-slate-leaf="true" 
data-offset-key="1161:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1161:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4196124604" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1161:2"><span data-slate-string="true">.log(steps);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1162"> <span data-slate-object="text" data-key="1163"><span data-slate-leaf="true" 
data-offset-key="1163:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-6e45b91b " data-slate-type="paragraph" data-slate-object="block" data-key="1164"> 
<span data-slate-object="text" data-key="1165"><span data-slate-leaf="true" data-offset-key="1165:0" 
data-first-offset="true"><span data-slate-string="true">你看，代码看起来就和同步的没有本质区别了，等待 1000 毫秒以后，打印 
steps。</span></span></span> </div> <div class="se-a1d69923 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1166"> <span data-slate-object="text" data-key="1167"><span data-slate-leaf="true" 
data-offset-key="1167:0" data-first-offset="true"><span data-slate-string="true">接着，如果我们执行下面的代码（如果你不是在 
Chrome 的控制台执行，你可以把下面三行代码放到任意一个 async 函数中去执行，效果是一样的）：</span></span></span> </div> <div class="se-029ceac0 
se-3ca7aa72" data-slate-type="pre" data-slate-object="block" data-key="1168" data-code-language="javascript"> 
<div class="se-0787c102 se-fd36ed7d"> <span></span> </div> <div class="se-3de65bf2"> <div class="se-a09c356b 
se-64f4e82b" data-code-line-number="1"></div> <div class="se-a09c356b se-64f4e82b" data-code-line-number="2"></div> 
<div class="se-a09c356b se-64f4e82b" data-code-line-number="3"></div> </div> <div class="se-6a5b7f68 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1169"> <span data-slate-object="text" data-key="1170"><span data-slate-leaf="true" 
data-offset-key="1170:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5752107505" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1170:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1170:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2905701303" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1170:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1171"> <span data-slate-object="text" data-key="1172"><span data-slate-leaf="true" 
data-offset-key="1172:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1851566046" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1172:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1172:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_2426785699" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1172:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1173"> <span data-slate-object="text" data-key="1174"><span data-slate-leaf="true" 
data-offset-key="1174:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9098986010" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1174:1"><span data-slate-string="true"> run(</span></span><span 
data-slate-leaf="true" data-offset-key="1174:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0606120410" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1174:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-4daa65a3 " data-slate-type="paragraph" data-slate-object="block" data-key="1175"> 
<span data-slate-object="text" data-key="1176"><span data-slate-leaf="true" data-offset-key="1176:0" 
data-first-offset="true"><span data-slate-string="true">我们得到了一样的结果。这段代码看起来也和顺序、同步执行的代码没有区别了，虽然，实际的运行依然是前面你看到的异步调用，这里的效果只是 
async/await 语法糖为程序员创造的一个美好的假象。</span></span></span> </div> <div class="se-0420fdcc " data-slate-type="paragraph" 
data-slate-object="block" data-key="1177"> <span data-slate-object="text" data-key="1178"><span 
data-slate-leaf="true" data-offset-key="1178:0" data-first-offset="true"><span data-slate-string="true">纵观这个小狗奔跑的问题，我们一步一步把晦涩难懂的嵌套回调代码，优化成了易读、易理解的“假同步”代码。聪明的程序员总在努力地创造各种工具，去</span></span></span><span 
data-slate-object="text" data-key="1179"><span data-slate-leaf="true" data-offset-key="1179:0" 
data-first-offset="true"><span class="se-3c364993" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">改善代码异步调用的表达能力，但是越是深入，就越能发现，最自然的表达，似乎来自于纯粹的同步代码。</span></span></span></span> 
</div> <h2 class="se-6eb352f6" data-slate-type="heading" data-slate-object="block" data-key="1180"><span 
data-slate-object="text" data-key="1181"><span data-slate-leaf="true" data-offset-key="1181:0" 
data-first-offset="true"><span data-slate-string="true">2. 用生成器来实现协程</span></span></span></h2> 
<div class="se-ac78bf68 " data-slate-type="paragraph" data-slate-object="block" data-key="1182"> 
<span data-slate-object="text" data-key="1183"><span data-slate-leaf="true" data-offset-key="1183:0" 
data-first-offset="true"><span class="se-3896b82b" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">协程，Coroutine，简单说就是一种通用的协作式多任务的子程序，它通过任务执行的挂起与恢复，来实现任务之间的切换。</span></span></span></span> 
</div> <div class="se-1766d557 " data-slate-type="paragraph" data-slate-object="block" data-key="1184"> 
<span data-slate-object="text" data-key="1185"><span data-slate-leaf="true" data-offset-key="1185:0" 
data-first-offset="true"><span data-slate-string="true">这里提到的“协作式”，是一种多任务处理的模式，它和“抢占式”相对。如果是协作式，每个任务处理的逻辑必须主动放弃执行权（挂起），将继续执行的资源让出来给别的任务，直到重新获得继续执行的机会（恢复）；而抢占式则完全将任务调度交由第三方，比如操作系统，它可以直接剥夺当前执行任务的资源，分配给其它任务。</span></span></span> 
</div> <div class="se-99a9bf84 " data-slate-type="paragraph" data-slate-object="block" data-key="1186"> 
<span data-slate-object="text" data-key="1187"><span data-slate-leaf="true" data-offset-key="1187:0" 
data-first-offset="true"><span data-slate-string="true">我们知道，创建线程的开销比进程小，而协程通常完全是在同一个线程内完成的，连线程切换的代价都免去了，因此它在资源开销方面更有优势。</span></span></span> 
</div> <div class="se-262f650c " data-slate-type="paragraph" data-slate-object="block" data-key="1188"> 
<span data-slate-object="text" data-key="1189"><span data-slate-leaf="true" data-offset-key="1189:0" 
data-first-offset="true"><span data-slate-string="true">JavaScript 的协程是通过生成器来实现的，执行的主流程在生成器中可以以 
yield 为界，进行协作式的挂起和恢复操作，从而在外部函数和生成器内部逻辑之间跳转，而 JavaScript 引擎会负责管理上下文的切换。</span></span></span> 
</div> <div class="se-e4a9eae6 " data-slate-type="paragraph" data-slate-object="block" data-key="1190"> 
<span data-slate-object="text" data-key="1191"><span data-slate-leaf="true" data-offset-key="1191:0" 
data-first-offset="true"><span data-slate-string="true">首先我们来认识一下 JavaScript 和迭代有关的两个协议，它们是我们后面学习生成器的基础：</span></span></span> 
</div> <div class="se-3a128954" data-slate-type="list" data-slate-object="block" data-key="1192"> 
<div class="se-0e8b1b8f se-f3a0a678" data-slate-type="list-line" data-slate-object="block" 
data-key="1193"> <span data-slate-object="text" data-key="1194"><span data-slate-leaf="true" 
data-offset-key="1194:0" data-first-offset="true"><span data-slate-string="true">第一个是可迭代协议，它允许定义对象自己的迭代行为，比如哪些属性方法是可以被 
for 循环遍历到的；</span></span></span> </div> <div class="se-97e6e3b8 se-116ef020" data-slate-type="list-line" 
data-slate-object="block" data-key="1195"> <span data-slate-object="text" data-key="1196"><span 
data-slate-leaf="true" data-offset-key="1196:0" data-first-offset="true"><span data-slate-string="true">第二个是迭代器协议，它定义了一种标准的方法来依次产生序列的下一个值（next() 
方法），如果序列是有限长的，并且在所有的值都产生后，将有一个默认的返回值。</span></span></span> </div> </div> <div class="se-3455512e 
" data-slate-type="paragraph" data-slate-object="block" data-key="1197"> <span data-slate-object="text" 
data-key="1198"><span data-slate-leaf="true" data-offset-key="1198:0" data-first-offset="true"><span 
data-slate-string="true">接着我就可以介绍生成器（Generator）了。在 JavaScript 中，生成器对象是由生成器函数 function* 返回，且符合“可迭代协议”和“迭代器协议”两者。function* 
和 yield 关键字通常一起使用，yield 用来在生成器的 next() 方法执行时，标识生成器执行中断的位置，并将 yield 右侧表达式的值返回。见下面这个简单的例子：</span></span></span> 
</div> <div class="se-86d23a8e se-d80fcd9a" data-slate-type="pre" data-slate-object="block" 
data-key="1199" data-code-language="javascript"> <div class="se-0311b2e2 se-0950bd9e"> <span></span> 
</div> <div class="se-8ecff92b"> <div class="se-0e2847e1 se-787ae817" data-code-line-number="1"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="2"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="3"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="4"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="5"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="6"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="7"></div> 
<div class="se-0e2847e1 se-787ae817" data-code-line-number="8"></div> <div class="se-0e2847e1 
se-787ae817" data-code-line-number="9"></div> <div class="se-0e2847e1 se-787ae817" data-code-line-number="10"></div> 
</div> <div class="se-db4abe06 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1200"> <span data-slate-object="text" data-key="1201"><span 
data-slate-leaf="true" data-offset-key="1201:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_7535307903" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2003900514" 
data-annotation-type="annotation"><span data-slate-string="true">function</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">* 
</span></span></span><span data-slate-leaf="true" data-offset-key="1201:2"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_6799243523" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_2003900514" 
data-annotation-type="annotation"><span data-slate-string="true">IdGenerator</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">(</span></span></span><span 
data-slate-leaf="true" data-offset-key="1201:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2003900514" data-annotation-type="annotation"><span data-slate-string="true">) 
</span></span></span><span data-slate-leaf="true" data-offset-key="1201:5"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1202"> <span data-slate-object="text" data-key="1203"><span data-slate-leaf="true" 
data-offset-key="1203:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1203:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5225099815" data-annotation-type="annotation"><span data-slate-string="true">let</span></span></span><span 
data-slate-leaf="true" data-offset-key="1203:2"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1203:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0588208211" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1203:4"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1204"> <span data-slate-object="text" data-key="1205"><span data-slate-leaf="true" 
data-offset-key="1205:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1205:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9812223222" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1205:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1205:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2181934891" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1205:4"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1206"> <span data-slate-object="text" data-key="1207"><span data-slate-leaf="true" 
data-offset-key="1207:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1207:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2131296381" data-annotation-type="annotation"><span data-slate-string="true">yield</span></span></span><span 
data-slate-leaf="true" data-offset-key="1207:2"><span data-slate-string="true"> index++;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1208"> <span data-slate-object="text" data-key="1209"><span data-slate-leaf="true" 
data-offset-key="1209:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1210"> <span data-slate-object="text" data-key="1211"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1212"> <span data-slate-object="text" 
data-key="1213"><span data-slate-leaf="true" data-offset-key="1213:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_1941744486" 
data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1213:1"><span data-slate-string="true"> idGenerator 
= IdGenerator();</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1214"> <span data-slate-object="text" data-key="1215"></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1216"> <span data-slate-object="text" data-key="1217"><span data-slate-leaf="true" 
data-offset-key="1217:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0178778302" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1217:1"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1218"> <span data-slate-object="text" data-key="1219"><span data-slate-leaf="true" 
data-offset-key="1219:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3391767104" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1219:1"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-835f8de2 " data-slate-type="paragraph" data-slate-object="block" data-key="1220"> 
<span data-slate-object="text" data-key="1221"><span data-slate-leaf="true" data-offset-key="1221:0" 
data-first-offset="true"><span data-slate-string="true">这是一个 id 顺序生成的生成器，初始 index 为 1，每次调用 
next() 来获取序列的下一个数值，并且 index 会自增 1。从代码中我们可以看到，这是一个无限的序列。</span></span></span> </div> <div class="se-ee13d845 
" data-slate-type="paragraph" data-slate-object="block" data-key="1222"> <span data-slate-object="text" 
data-key="1223"><span data-slate-leaf="true" data-offset-key="1223:0" data-first-offset="true"><span 
data-slate-string="true">执行上述代码，我们将得到：</span></span></span> </div> <div class="se-4646fb6a 
se-0ffc16dc" data-slate-type="pre" data-slate-object="block" data-key="1224" data-code-language="javascript"> 
<div class="se-45954f2b se-91ebf58d"> <span></span> </div> <div class="se-62eb709d"> <div class="se-59f189f6 
se-2814b374" data-code-line-number="1"></div> <div class="se-59f189f6 se-2814b374" data-code-line-number="2"></div> 
</div> <div class="se-e07a178e ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1225"> <span data-slate-object="text" data-key="1226"><span 
data-slate-leaf="true" data-offset-key="1226:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1226:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_1204536290" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1226:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5546314379" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1226:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_5792132267" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1226:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9976211593" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1226:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1227"> <span data-slate-object="text" data-key="1228"><span data-slate-leaf="true" 
data-offset-key="1228:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1228:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_3603328492" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1228:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5627280227" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1228:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2244837224" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1228:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3581411496" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1228:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ff861d19 " data-slate-type="paragraph" data-slate-object="block" data-key="1229"> 
<span data-slate-object="text" data-key="1230"><span data-slate-leaf="true" data-offset-key="1230:0" 
data-first-offset="true"><span data-slate-string="true">每次返回的对象里面，value 的值就是生成的 id，而 done 的值表示这个序列是否结束。</span></span></span> 
</div> <div class="se-42b75396 " data-slate-type="paragraph" data-slate-object="block" data-key="1231"> 
<span data-slate-object="text" data-key="1232"><span data-slate-leaf="true" data-offset-key="1232:0" 
data-first-offset="true"><span data-slate-string="true">你看，以往我们说起遍历的时候，脑海里总会第一时间想起某个容器，某个数据集合，但是，有了生成器以后，我们就可以对更为复杂的逻辑进行迭代。</span></span></span> 
</div> <div class="se-3eb15a55 " data-slate-type="paragraph" data-slate-object="block" data-key="1233"> 
<span data-slate-object="text" data-key="1234"><span data-slate-leaf="true" data-offset-key="1234:0" 
data-first-offset="true"><span data-slate-string="true">生成器可不是只能往外返回，还能往里传值。具体说，yield 右侧的表达式会返回，但是在调用 
next() 方法时，入参会被替代掉 yield 及右侧的表达式而参与代码运算。我们将上面的例子小小地改动一下：</span></span></span> </div> <div class="se-0c6eb9ce 
se-9601412a" data-slate-type="pre" data-slate-object="block" data-key="1235" data-code-language="javascript"> 
<div class="se-a045d06b se-de7bc2dd"> <span></span> </div> <div class="se-bfffc3ab"> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="1"></div> <div class="se-e9130fc1 se-64fbe506" data-code-line-number="2"></div> 
<div class="se-e9130fc1 se-64fbe506" data-code-line-number="3"></div> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="4"></div> <div class="se-e9130fc1 se-64fbe506" data-code-line-number="5"></div> 
<div class="se-e9130fc1 se-64fbe506" data-code-line-number="6"></div> <div class="se-e9130fc1 
se-64fbe506" data-code-line-number="7"></div> </div> <div class="se-b3728522 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1236"> <span data-slate-object="text" 
data-key="1237"><span data-slate-leaf="true" data-offset-key="1237:0" data-first-offset="true"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_6084647414" 
data-annotation-type="annotation"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">function</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">* 
</span></span></span><span data-slate-leaf="true" data-offset-key="1237:2"><span class=" gkhl-title" 
data-slate-object="annotation" data-annotation-key="gkann_9797523678" data-annotation-type="annotation"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1855795342" 
data-annotation-type="annotation"><span data-slate-string="true">IdGenerator</span></span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:3"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">(</span></span></span><span 
data-slate-leaf="true" data-offset-key="1237:4"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1855795342" data-annotation-type="annotation"><span data-slate-string="true">) 
</span></span></span><span data-slate-leaf="true" data-offset-key="1237:5"><span data-slate-string="true">{</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1238"> <span data-slate-object="text" data-key="1239"><span data-slate-leaf="true" 
data-offset-key="1239:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1239:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9560124698" data-annotation-type="annotation"><span data-slate-string="true">let</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:2"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1239:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1006779200" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:4"><span data-slate-string="true">, factor = </span></span><span 
data-slate-leaf="true" data-offset-key="1239:5"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_0934319456" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1239:6"><span data-slate-string="true">;</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1240"> <span data-slate-object="text" data-key="1241"><span data-slate-leaf="true" 
data-offset-key="1241:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1241:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1724100350" data-annotation-type="annotation"><span data-slate-string="true">while</span></span></span><span 
data-slate-leaf="true" data-offset-key="1241:2"><span data-slate-string="true"> (</span></span><span 
data-slate-leaf="true" data-offset-key="1241:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3077609712" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1241:4"><span data-slate-string="true">) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1242"> <span data-slate-object="text" data-key="1243"><span data-slate-leaf="true" 
data-offset-key="1243:0" data-first-offset="true"><span data-slate-string="true"> factor = 
</span></span><span data-slate-leaf="true" data-offset-key="1243:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_1953229977" data-annotation-type="annotation"><span 
data-slate-string="true">yield</span></span></span><span data-slate-leaf="true" data-offset-key="1243:2"><span 
data-slate-string="true"> index; </span></span><span data-slate-leaf="true" data-offset-key="1243:3"><span 
class=" gkhl-comment" data-slate-object="annotation" data-annotation-key="gkann_6285800636" 
data-annotation-type="annotation"><span data-slate-string="true">// 位置①</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1244"> <span data-slate-object="text" data-key="1245"><span data-slate-leaf="true" 
data-offset-key="1245:0" data-first-offset="true"><span data-slate-string="true"> index = </span></span><span 
data-slate-leaf="true" data-offset-key="1245:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_9845018003" data-annotation-type="annotation"><span data-slate-string="true">yield</span></span></span><span 
data-slate-leaf="true" data-offset-key="1245:2"><span data-slate-string="true"> factor * index; 
</span></span><span data-slate-leaf="true" data-offset-key="1245:3"><span class=" gkhl-comment" 
data-slate-object="annotation" data-annotation-key="gkann_1684292627" data-annotation-type="annotation"><span 
data-slate-string="true">// 位置②</span></span></span></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1246"> <span data-slate-object="text" 
data-key="1247"><span data-slate-leaf="true" data-offset-key="1247:0" data-first-offset="true"><span 
data-slate-string="true"> }</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1248"> <span data-slate-object="text" 
data-key="1249"><span data-slate-leaf="true" data-offset-key="1249:0" data-first-offset="true"><span 
data-slate-string="true">}</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-b93c498d " data-slate-type="paragraph" 
data-slate-object="block" data-key="1250"> <span data-slate-object="text" data-key="1251"><span 
data-slate-leaf="true" data-offset-key="1251:0" data-first-offset="true"><span data-slate-string="true">好，这是生成器的定义，其调用代码如下：</span></span></span> 
</div> <div class="se-95d742b0 se-044f5384" data-slate-type="pre" data-slate-object="block" 
data-key="1252" data-code-language="javascript"> <div class="se-af326d89 se-95f04212"> <span></span> 
</div> <div class="se-e4805b13"> <div class="se-f5b046c2 se-372728c5" data-code-line-number="1"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="2"></div> <div class="se-f5b046c2 
se-372728c5" data-code-line-number="3"></div> <div class="se-f5b046c2 se-372728c5" data-code-line-number="4"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="5"></div> <div class="se-f5b046c2 
se-372728c5" data-code-line-number="6"></div> <div class="se-f5b046c2 se-372728c5" data-code-line-number="7"></div> 
<div class="se-f5b046c2 se-372728c5" data-code-line-number="8"></div> </div> <div class="se-81eca853 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1253"> <span data-slate-object="text" data-key="1254"><span data-slate-leaf="true" 
data-offset-key="1254:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1826291068" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1254:1"><span data-slate-string="true"> calculate = 
</span></span><span data-slate-leaf="true" data-offset-key="1254:2"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0434511682" data-annotation-type="annotation"><span 
data-slate-string="true">(idGenerator) =&gt;</span></span></span><span data-slate-leaf="true" 
data-offset-key="1254:3"><span data-slate-string="true"> {</span></span></span> </div> <div 
class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1255"> 
<span data-slate-object="text" data-key="1256"><span data-slate-leaf="true" data-offset-key="1256:0" 
data-first-offset="true"><span data-slate-string="true"> </span></span><span data-slate-leaf="true" 
data-offset-key="1256:1"><span class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8895513513" 
data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1256:2"><span data-slate-string="true">.log(idGenerator.next());</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1257"> <span data-slate-object="text" data-key="1258"><span data-slate-leaf="true" 
data-offset-key="1258:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1258:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3820273321" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1258:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1258:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6303350745" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1258:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1259"> <span data-slate-object="text" data-key="1260"><span data-slate-leaf="true" 
data-offset-key="1260:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1260:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_4832449257" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1260:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1260:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7796697742" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1260:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1261"> <span data-slate-object="text" data-key="1262"><span data-slate-leaf="true" 
data-offset-key="1262:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1262:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_2809394623" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1262:2"><span data-slate-string="true">.log(idGenerator.next(</span></span><span 
data-slate-leaf="true" data-offset-key="1262:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8786325613" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1262:4"><span data-slate-string="true">));</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1263"> <span data-slate-object="text" data-key="1264"><span data-slate-leaf="true" 
data-offset-key="1264:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1265"> <span data-slate-object="text" data-key="1266"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1267"> <span data-slate-object="text" 
data-key="1268"><span data-slate-leaf="true" data-offset-key="1268:0" data-first-offset="true"><span 
data-slate-string="true">calculate(IdGenerator());</span></span></span> </div> <div class="ps__rail-x" 
style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-7e2fbdd5 
" data-slate-type="paragraph" data-slate-object="block" data-key="1269"> <span data-slate-object="text" 
data-key="1270"><span data-slate-leaf="true" data-offset-key="1270:0" data-first-offset="true"><span 
data-slate-string="true">在往下阅读以前，你能不能先想一想，这个 calculate 方法的调用，会产生怎样的输出？</span></span></span> 
</div> <div class="se-9607c70a " data-slate-type="paragraph" data-slate-object="block" data-key="1271"> 
<span data-slate-object="text" data-key="1272"><span data-slate-leaf="true" data-offset-key="1272:0" 
data-first-offset="true"><span data-slate-string="true">好，我来解释一下整个过程。现在这个 id 生成器每个循环节可以通过 yield 
返回两次，我把上述执行步骤解释一下（为了便于说明代码位置，在生成器代码中我标记了“位置①”和“位置②”，请对应起来查看）：</span></span></span> </div> <div 
class="se-980dfea5" data-slate-type="list" data-slate-object="block" data-key="1273"> <div 
class="se-135c61cf se-99b56484" data-slate-type="list-line" data-slate-object="block" data-key="1274"> 
<span data-slate-object="text" data-key="1275"><span data-slate-leaf="true" data-offset-key="1275:0" 
data-first-offset="true"><span data-slate-string="true">调用 next()，位置①的 yield 右侧的 index 返回，因此值为 
1；</span></span></span> </div> <div class="se-2d358674 se-34a2b010" data-slate-type="list-line" 
data-slate-object="block" data-key="1276"> <span data-slate-object="text" data-key="1277"><span 
data-slate-leaf="true" data-offset-key="1277:0" data-first-offset="true"><span data-slate-string="true">调用 
next(1)，实参为 1，它被赋值给位置①的 factor，参与位置②的 yield 右侧的表达式计算，得到 1；</span></span></span> </div> <div 
class="se-d1857aae se-11fe9cbb" data-slate-type="list-line" data-slate-object="block" data-key="1278"> 
<span data-slate-object="text" data-key="1279"><span data-slate-leaf="true" data-offset-key="1279:0" 
data-first-offset="true"><span data-slate-string="true">调用 next(2)，实参为 2，它被赋值给位置②的 index，由于 
while 循环的关系，位置①的 yield 右侧的 index 返回，因此得到 2；</span></span></span> </div> <div class="se-75f559f8 
se-4891d14a" data-slate-type="list-line" data-slate-object="block" data-key="1280"> <span data-slate-object="text" 
data-key="1281"><span data-slate-leaf="true" data-offset-key="1281:0" data-first-offset="true"><span 
data-slate-string="true">调用 next(3)，实参为 3，它被赋值给位置①的 factor，参与位置②的 yield 右侧的表达式计算，3 * 2 得到 6。</span></span></span> 
</div> </div> <div class="se-7c714327 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1282"> <span data-slate-object="text" data-key="1283"><span data-slate-leaf="true" 
data-offset-key="1283:0" data-first-offset="true"><span data-slate-string="true">使用图来表示，就是这样子：</span></span></span> 
</div> <div class="se-e94254da" data-slate-type="image" data-slate-object="block" data-key="1284"> 
<img class="se-e1fab112" src="https://static001.geekbang.org/resource/image/66/49/66e19715cc976a6870f73e2a8d34bb49.png"> 
</div> <div class="se-8beb5692 " data-slate-type="paragraph" data-slate-object="block" data-key="1285"> 
<span data-slate-object="text" data-key="1286"><span data-slate-leaf="true" data-offset-key="1286:0" 
data-first-offset="true"><span data-slate-string="true">从图中你应该可以理解，通过生成器来实现 JavaScript 协程的原理了。本质上来说，</span></span></span><span 
data-slate-object="text" data-key="1287"><span data-slate-leaf="true" data-offset-key="1287:0" 
data-first-offset="true"><span class="se-d2967cac" data-slate-type="bold" data-slate-object="mark"><span 
data-slate-string="true">生成器将一个完整的方法执行通过 yield 拆分成了多个部分，并且每个部分都可以有输入输出，整个过程就是一个简单的状态机。</span></span></span></span><span 
data-slate-object="text" data-key="1288"><span data-slate-leaf="true" data-offset-key="1288:0" 
data-first-offset="true"><span data-slate-string="true">它和其它函数一起，以反复挂起和恢复的方式一段一段地将任务完成。</span></span></span> 
</div> <div class="se-e6b7f87f " data-slate-type="paragraph" data-slate-object="block" data-key="1289"> 
<span data-slate-object="text" data-key="1290"><span data-slate-leaf="true" data-offset-key="1290:0" 
data-first-offset="true"><span data-slate-string="true">最后，结果输出如下：</span></span></span> </div> 
<div class="se-2bf92e42 se-53fc0dff" data-slate-type="pre" data-slate-object="block" data-key="1291" 
data-code-language="javascript"> <div class="se-bc5cef3d se-356067a5"> <span></span> </div> 
<div class="se-24fcc0f3"> <div class="se-7ce4ca45 se-0ad48629" data-code-line-number="1"></div> 
<div class="se-7ce4ca45 se-0ad48629" data-code-line-number="2"></div> <div class="se-7ce4ca45 
se-0ad48629" data-code-line-number="3"></div> <div class="se-7ce4ca45 se-0ad48629" data-code-line-number="4"></div> 
</div> <div class="se-c28cc524 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1292"> <span data-slate-object="text" data-key="1293"><span 
data-slate-leaf="true" data-offset-key="1293:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1293:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_4919845897" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1293:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1767741956" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1293:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2743294966" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1293:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_8017917802" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1293:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1294"> <span data-slate-object="text" data-key="1295"><span data-slate-leaf="true" 
data-offset-key="1295:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1295:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_1769380532" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1295:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8082706270" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1295:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7829919276" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1295:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_6115454174" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1295:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1296"> <span data-slate-object="text" data-key="1297"><span data-slate-leaf="true" 
data-offset-key="1297:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1297:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_2100333419" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1297:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1111674953" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1297:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7240390673" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1297:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3184054834" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1297:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1298"> <span data-slate-object="text" data-key="1299"><span data-slate-leaf="true" 
data-offset-key="1299:0" data-first-offset="true"><span data-slate-string="true">{</span></span><span 
data-slate-leaf="true" data-offset-key="1299:1"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_7913365467" data-annotation-type="annotation"><span data-slate-string="true">value</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:2"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1299:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8554899038" data-annotation-type="annotation"><span data-slate-string="true">6</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:4"><span data-slate-string="true">, </span></span><span 
data-slate-leaf="true" data-offset-key="1299:5"><span class=" gkhl-attr" data-slate-object="annotation" 
data-annotation-key="gkann_6712821288" data-annotation-type="annotation"><span data-slate-string="true">done</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:6"><span data-slate-string="true">: </span></span><span 
data-slate-leaf="true" data-offset-key="1299:7"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2032369505" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1299:8"><span data-slate-string="true">}</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h2 class="se-b04b945f" data-slate-type="heading" data-slate-object="block" data-key="1300"><span 
data-slate-object="text" data-key="1301"><span data-slate-leaf="true" data-offset-key="1301:0" 
data-first-offset="true"><span data-slate-string="true">3. 异步错误处理</span></span></span></h2> 
<div class="se-148b2b75 " data-slate-type="paragraph" data-slate-object="block" data-key="1302"> 
<span data-slate-object="text" data-key="1303"><span data-slate-leaf="true" data-offset-key="1303:0" 
data-first-offset="true"><span data-slate-string="true">错误处理是所有编程范型都必须要考虑的问题，在使用 JavaScript 
进行异步编程时，也不例外。你可能会有这样一个疑问，如果我们不做特殊处理，会怎样呢？且看下面的代码，我先定义一个必定会失败的方法：</span></span></span> </div> 
<div class="se-08c6c7ed se-bf2b8d8b" data-slate-type="pre" data-slate-object="block" data-key="1304" 
data-code-language="javascript"> <div class="se-ef7661e7 se-daefc692"> <span></span> </div> 
<div class="se-bf73de00"> <div class="se-e82ac032 se-01b05c1f" data-code-line-number="1"></div> 
<div class="se-e82ac032 se-01b05c1f" data-code-line-number="2"></div> <div class="se-e82ac032 
se-01b05c1f" data-code-line-number="3"></div> <div class="se-e82ac032 se-01b05c1f" data-code-line-number="4"></div> 
<div class="se-e82ac032 se-01b05c1f" data-code-line-number="5"></div> </div> <div class="se-4baec05a 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1305"> <span data-slate-object="text" data-key="1306"><span data-slate-leaf="true" 
data-offset-key="1306:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_5416515812" data-annotation-type="annotation"><span data-slate-string="true">var</span></span></span><span 
data-slate-leaf="true" data-offset-key="1306:1"><span data-slate-string="true"> fail = </span></span><span 
data-slate-leaf="true" data-offset-key="1306:2"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_1518121735" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_2707843071" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1306:3"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_1518121735" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1306:4"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1307"> <span data-slate-object="text" data-key="1308"><span data-slate-leaf="true" 
data-offset-key="1308:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span><span 
data-slate-leaf="true" data-offset-key="1308:1"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_3340674849" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_7737245373" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1308:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_7737245373" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1308:3"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1309"> <span data-slate-object="text" data-key="1310"><span data-slate-leaf="true" 
data-offset-key="1310:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4715187949" data-annotation-type="annotation"><span data-slate-string="true">throw</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:2"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:3"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_3631310140" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:4"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1310:5"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_1132352711" data-annotation-type="annotation"><span data-slate-string="true">Error</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:6"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1310:7"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_0715414183" data-annotation-type="annotation"><span data-slate-string="true">"fail"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1310:8"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1311"> <span data-slate-object="text" data-key="1312"><span data-slate-leaf="true" 
data-offset-key="1312:0" data-first-offset="true"><span data-slate-string="true"> }, </span></span><span 
data-slate-leaf="true" data-offset-key="1312:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_4499799613" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1312:2"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1313"> <span data-slate-object="text" data-key="1314"><span data-slate-leaf="true" 
data-offset-key="1314:0" data-first-offset="true"><span data-slate-string="true">};</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-3e123e39 " data-slate-type="paragraph" data-slate-object="block" data-key="1315"> 
<span data-slate-object="text" data-key="1316"><span data-slate-leaf="true" data-offset-key="1316:0" 
data-first-offset="true"><span data-slate-string="true">然后调用一下：</span></span></span> </div> 
<div class="se-bcbdb139 se-eb7c24f7" data-slate-type="pre" data-slate-object="block" data-key="1317" 
data-code-language="javascript"> <div class="se-cb399f35 se-c6e166d9"> <span></span> </div> 
<div class="se-73c561d4"> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="1"></div> 
<div class="se-32a97cdd se-d3f22fc8" data-code-line-number="2"></div> <div class="se-32a97cdd 
se-d3f22fc8" data-code-line-number="3"></div> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="4"></div> 
<div class="se-32a97cdd se-d3f22fc8" data-code-line-number="5"></div> <div class="se-32a97cdd 
se-d3f22fc8" data-code-line-number="6"></div> <div class="se-32a97cdd se-d3f22fc8" data-code-line-number="7"></div> 
</div> <div class="se-2f089fac ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1318"> <span data-slate-object="text" data-key="1319"><span 
data-slate-leaf="true" data-offset-key="1319:0" data-first-offset="true"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_5606270653" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1319:1"><span 
data-slate-string="true">.log(</span></span><span data-slate-leaf="true" data-offset-key="1319:2"><span 
class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_2518414352" 
data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1319:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1320"> <span data-slate-object="text" data-key="1321"><span data-slate-leaf="true" 
data-offset-key="1321:0" data-first-offset="true"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2613265418" data-annotation-type="annotation"><span data-slate-string="true">try</span></span></span><span 
data-slate-leaf="true" data-offset-key="1321:1"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1322"> <span data-slate-object="text" data-key="1323"><span data-slate-leaf="true" 
data-offset-key="1323:0" data-first-offset="true"><span data-slate-string="true"> fail();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1324"> <span data-slate-object="text" data-key="1325"><span data-slate-leaf="true" 
data-offset-key="1325:0" data-first-offset="true"><span data-slate-string="true">} </span></span><span 
data-slate-leaf="true" data-offset-key="1325:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_4029722912" data-annotation-type="annotation"><span data-slate-string="true">catch</span></span></span><span 
data-slate-leaf="true" data-offset-key="1325:2"><span data-slate-string="true"> (e) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1326"> <span data-slate-object="text" data-key="1327"><span data-slate-leaf="true" 
data-offset-key="1327:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1327:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_9307474226" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1327:2"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="1327:3"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_7068124660" data-annotation-type="annotation"><span data-slate-string="true">"captured"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1327:4"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1328"> <span data-slate-object="text" data-key="1329"><span data-slate-leaf="true" 
data-offset-key="1329:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1330"> <span data-slate-object="text" data-key="1331"><span data-slate-leaf="true" 
data-offset-key="1331:0" data-first-offset="true"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_0444142940" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1331:1"><span data-slate-string="true">.log(</span></span><span 
data-slate-leaf="true" data-offset-key="1331:2"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8960732316" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1331:3"><span data-slate-string="true">);</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-64c01be5 " data-slate-type="paragraph" data-slate-object="block" data-key="1332"> 
<span data-slate-object="text" data-key="1333"><span data-slate-leaf="true" data-offset-key="1333:0" 
data-first-offset="true"><span data-slate-string="true">在 Chrome 开发者工具的控制台中执行一下，我们将看到 1 和 2 
的输出，并在 1 秒钟之后，获得一个“Uncaught Error”的错误打印，注意观察这个错误的堆栈：</span></span></span> </div> <div class="se-0ee32bd3 
se-701f09c3" data-slate-type="pre" data-slate-object="block" data-key="1334" data-code-language="javascript"> 
<div class="se-66ac9904 se-44a8a055"> <span></span> </div> <div class="se-bc45ada1"> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="1"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="2"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="3"></div> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="4"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="5"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="6"></div> <div class="se-616bd679 
se-a1ca3e42" data-code-line-number="7"></div> <div class="se-616bd679 se-a1ca3e42" data-code-line-number="8"></div> 
<div class="se-616bd679 se-a1ca3e42" data-code-line-number="9"></div> </div> <div class="se-5ccdab2e 
ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1335"> <span data-slate-object="text" data-key="1336"><span data-slate-leaf="true" 
data-offset-key="1336:0" data-first-offset="true"><span data-slate-string="true">Uncaught </span></span><span 
data-slate-leaf="true" data-offset-key="1336:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_3672214154" data-annotation-type="annotation"><span data-slate-string="true">Error</span></span></span><span 
data-slate-leaf="true" data-offset-key="1336:2"><span data-slate-string="true">: fail</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1337"> <span data-slate-object="text" data-key="1338"><span data-slate-leaf="true" 
data-offset-key="1338:0" data-first-offset="true"><span data-slate-string="true"> at &lt;anonymous&gt;:</span></span><span 
data-slate-leaf="true" data-offset-key="1338:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_8322847981" data-annotation-type="annotation"><span data-slate-string="true">3</span></span></span><span 
data-slate-leaf="true" data-offset-key="1338:2"><span data-slate-string="true">:</span></span><span 
data-slate-leaf="true" data-offset-key="1338:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1373062960" data-annotation-type="annotation"><span data-slate-string="true">11</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1339"> <span data-slate-object="text" data-key="1340"><span data-slate-leaf="true" 
data-offset-key="1340:0" data-first-offset="true"><span data-slate-string="true"> at e (lizard-service-vendor</span></span><span 
data-slate-leaf="true" data-offset-key="1340:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_7127880245" data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1340:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1340:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6909719505" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span><span 
data-slate-leaf="true" data-offset-key="1340:4"><span data-slate-string="true">)</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1341"> <span data-slate-object="text" data-key="1342"><span data-slate-leaf="true" 
data-offset-key="1342:0" data-first-offset="true"><span data-slate-string="true"> (anonymous) 
@ VM261:</span></span><span data-slate-leaf="true" data-offset-key="1342:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_0556024067" data-annotation-type="annotation"><span 
data-slate-string="true">3</span></span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1343"> <span data-slate-object="text" 
data-key="1344"><span data-slate-leaf="true" data-offset-key="1344:0" data-first-offset="true"><span 
data-slate-string="true"> e @ lizard-service-vendor</span></span><span data-slate-leaf="true" 
data-offset-key="1344:1"><span class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_7591640184" 
data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1344:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1344:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5701455617" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1345"> <span data-slate-object="text" data-key="1346"><span data-slate-leaf="true" 
data-offset-key="1346:0" data-first-offset="true"><span data-slate-string="true"> setTimeout 
(</span></span><span data-slate-leaf="true" data-offset-key="1346:1"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_0602471535" data-annotation-type="annotation"><span 
data-slate-string="true">async</span></span></span><span data-slate-leaf="true" data-offset-key="1346:2"><span 
data-slate-string="true">) </span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1347"> <span data-slate-object="text" 
data-key="1348"><span data-slate-leaf="true" data-offset-key="1348:0" data-first-offset="true"><span 
data-slate-string="true"> (anonymous) @ lizard-service-vendor</span></span><span data-slate-leaf="true" 
data-offset-key="1348:1"><span class=" gkhl-number" data-slate-object="annotation" data-annotation-key="gkann_0905174663" 
data-annotation-type="annotation"><span data-slate-string="true">.2</span></span></span><span 
data-slate-leaf="true" data-offset-key="1348:2"><span data-slate-string="true">b011077.js:</span></span><span 
data-slate-leaf="true" data-offset-key="1348:3"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_1982455167" data-annotation-type="annotation"><span data-slate-string="true">1</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1349"> <span data-slate-object="text" data-key="1350"><span data-slate-leaf="true" 
data-offset-key="1350:0" data-first-offset="true"><span data-slate-string="true"> fail @ VM261:</span></span><span 
data-slate-leaf="true" data-offset-key="1350:1"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_5281780323" data-annotation-type="annotation"><span data-slate-string="true">2</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1351"> <span data-slate-object="text" data-key="1352"><span data-slate-leaf="true" 
data-offset-key="1352:0" data-first-offset="true"><span data-slate-string="true"> (anonymous) 
@ VM296:</span></span><span data-slate-leaf="true" data-offset-key="1352:1"><span class=" gkhl-number" 
data-slate-object="annotation" data-annotation-key="gkann_8829726625" data-annotation-type="annotation"><span 
data-slate-string="true">3</span></span></span></span> </div> <div class="ps__rail-x" style="width: 
365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 
322px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" 
tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-2de3a5ac 
" data-slate-type="paragraph" data-slate-object="block" data-key="1353"> <span data-slate-object="text" 
data-key="1354"><span data-slate-leaf="true" data-offset-key="1354:0" data-first-offset="true"><span 
data-slate-string="true">我们看到了其中的 setTimeout (async) 这样的字样，表示着这是一个异步调用抛出的堆栈，但是，“captured” 这样的字样也并未打印，因为母方法 
fail() 本身的原始顺序执行并没有失败，这个异常的抛出是在回调行为里发生的。</span></span></span> </div> <div class="se-bf51e5a7 
" data-slate-type="paragraph" data-slate-object="block" data-key="1355"> <span data-slate-object="text" 
data-key="1356"><span data-slate-leaf="true" data-offset-key="1356:0" data-first-offset="true"><span 
data-slate-string="true">从上面的例子可以看出，对于异步编程来说，我们需要使用一种更好的机制来捕获并处理可能发生的异常。</span></span></span> 
</div> <h3 class="se-11ed78dd" data-slate-type="heading" data-slate-object="block" data-key="1357"><span 
data-slate-object="text" data-key="1358"><span data-slate-leaf="true" data-offset-key="1358:0" 
data-first-offset="true"><span data-slate-string="true">Promise 的异常处理</span></span></span></h3> 
<div class="se-e719c28b " data-slate-type="paragraph" data-slate-object="block" data-key="1359"> 
<span data-slate-object="text" data-key="1360"><span data-slate-leaf="true" data-offset-key="1360:0" 
data-first-offset="true"><span data-slate-string="true">还记得上面介绍的 Promise 吗？它除了支持 resolve 回调以外，还支持 
reject 回调，前者用于表示异步调用顺利结束，而后者则表示有异常发生，中断调用链并将异常抛出：</span></span></span> </div> <div class="se-42d12284 
se-0e9eb857" data-slate-type="pre" data-slate-object="block" data-key="1361" data-code-language="javascript"> 
<div class="se-f7a602cd se-0655e2f9"> <span></span> </div> <div class="se-f0823e92"> <div class="se-058f8bd5 
se-9dee3ff7" data-code-line-number="1"></div> <div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="2"></div> 
<div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="3"></div> <div class="se-058f8bd5 
se-9dee3ff7" data-code-line-number="4"></div> <div class="se-058f8bd5 se-9dee3ff7" data-code-line-number="5"></div> 
</div> <div class="se-be4b4f7d ps ps--active-x"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1362"> <span data-slate-object="text" data-key="1363"><span 
data-slate-leaf="true" data-offset-key="1363:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_2595503562" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1363:1"><span 
data-slate-string="true"> exe = </span></span><span data-slate-leaf="true" data-offset-key="1363:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_3832856560" 
data-annotation-type="annotation"><span data-slate-string="true">(flag) =&gt;</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1364"> <span data-slate-object="text" data-key="1365"><span data-slate-leaf="true" 
data-offset-key="1365:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:1"><span class=" gkhl-params" data-slate-object="annotation" 
data-annotation-key="gkann_8671137293" data-annotation-type="annotation"><span class=" gkhl-function" 
data-slate-object="annotation" data-annotation-key="gkann_0859119913" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1365:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_0859119913" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:3"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:4"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2463143520" data-annotation-type="annotation"><span data-slate-string="true">new</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:5"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1365:6"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6821618312" data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1365:7"><span data-slate-string="true">(</span></span><span 
data-slate-leaf="true" data-offset-key="1365:8"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9892309378" data-annotation-type="annotation"><span data-slate-string="true">(resolve, 
reject) =&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1365:9"><span 
data-slate-string="true"> {</span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1366"> <span data-slate-object="text" 
data-key="1367"><span data-slate-leaf="true" data-offset-key="1367:0" data-first-offset="true"><span 
data-slate-string="true"> </span></span><span data-slate-leaf="true" data-offset-key="1367:1"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_8589255122" 
data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1367:2"><span data-slate-string="true">.log(flag);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1368"> <span data-slate-object="text" data-key="1369"><span data-slate-leaf="true" 
data-offset-key="1369:0" data-first-offset="true"><span data-slate-string="true"> setTimeout(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_9664258819" data-annotation-type="annotation"><span class=" gkhl-params" 
data-slate-object="annotation" data-annotation-key="gkann_1611498641" data-annotation-type="annotation"><span 
data-slate-string="true">()</span></span></span></span><span data-slate-leaf="true" data-offset-key="1369:2"><span 
class=" gkhl-function" data-slate-object="annotation" data-annotation-key="gkann_9664258819" 
data-annotation-type="annotation"><span data-slate-string="true"> =&gt;</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:3"><span data-slate-string="true"> { flag ? resolve(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:4"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3179494293" data-annotation-type="annotation"><span data-slate-string="true">"yes"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:5"><span data-slate-string="true">) : reject(</span></span><span 
data-slate-leaf="true" data-offset-key="1369:6"><span class=" gkhl-string" data-slate-object="annotation" 
data-annotation-key="gkann_3447292088" data-annotation-type="annotation"><span data-slate-string="true">"no"</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:7"><span data-slate-string="true">); }, </span></span><span 
data-slate-leaf="true" data-offset-key="1369:8"><span class=" gkhl-number" data-slate-object="annotation" 
data-annotation-key="gkann_6253978863" data-annotation-type="annotation"><span data-slate-string="true">1000</span></span></span><span 
data-slate-leaf="true" data-offset-key="1369:9"><span data-slate-string="true">);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1370"> <span data-slate-object="text" data-key="1371"><span data-slate-leaf="true" 
data-offset-key="1371:0" data-first-offset="true"><span data-slate-string="true"> });</span></span></span> 
</div> <div class="ps__rail-x" style="width: 365px; left: 0px; bottom: 0px;"> <div class="ps__thumb-x" 
tabindex="0" style="left: 0px; width: 244px;"></div> </div> <div class="ps__rail-y" style="top: 
0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> 
</div> </div> </div> <div class="se-dc418192 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1372"> <span data-slate-object="text" data-key="1373"><span data-slate-leaf="true" 
data-offset-key="1373:0" data-first-offset="true"><span data-slate-string="true">上面的代码中，flag 
参数用来控制流程是顺利执行还是发生错误。在错误发生的时候，no 字符串会被传递给 reject 函数，进一步传递给调用链：</span></span></span> </div> <div 
class="se-5b028af9 se-81af5c05" data-slate-type="pre" data-slate-object="block" data-key="1374" 
data-code-language="javascript"> <div class="se-adc1c3ad se-02bc2c79"> <span></span> </div> 
<div class="se-0155b8bd"> <div class="se-ff8adefc se-3267d4fa" data-code-line-number="1"></div> 
<div class="se-ff8adefc se-3267d4fa" data-code-line-number="2"></div> <div class="se-ff8adefc 
se-3267d4fa" data-code-line-number="3"></div> </div> <div class="se-ad618752 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1375"> <span data-slate-object="text" 
data-key="1376"><span data-slate-leaf="true" data-offset-key="1376:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_5461422269" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1376:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1377"> <span data-slate-object="text" data-key="1378"><span data-slate-leaf="true" 
data-offset-key="1378:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1378:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_2792478022" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1378:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1379"> <span data-slate-object="text" data-key="1380"><span data-slate-leaf="true" 
data-offset-key="1380:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1380:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9909557376" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1380:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-ace9215d " data-slate-type="paragraph" data-slate-object="block" data-key="1381"> 
<span data-slate-object="text" data-key="1382"><span data-slate-leaf="true" data-offset-key="1382:0" 
data-first-offset="true"><span data-slate-string="true">你看，上面的调用链，在执行的时候，第二行就传入了参数 false，它就已经失败了，异常抛出了，因此第三行的 
exe 实际没有得到执行，你会看到这样的执行结果：</span></span></span> </div> <div class="se-16c99102 se-92b63674" 
data-slate-type="pre" data-slate-object="block" data-key="1383" data-code-language="javascript"> 
<div class="se-70d29c30 se-08727e49"> <span></span> </div> <div class="se-249bf4a1"> <div class="se-c3152071 
se-cd8fb9f3" data-code-line-number="1"></div> <div class="se-c3152071 se-cd8fb9f3" data-code-line-number="2"></div> 
</div> <div class="se-e06654d5 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1384"> <span data-slate-object="text" data-key="1385"><span 
data-slate-leaf="true" data-offset-key="1385:0" data-first-offset="true"><span class=" gkhl-literal" 
data-slate-object="annotation" data-annotation-key="gkann_4171589961" data-annotation-type="annotation"><span 
data-slate-string="true">false</span></span></span></span> </div> <div class="se-fc4d3ee9 se-c55a3fba" 
data-slate-type="code-line" data-slate-object="block" data-key="1386"> <span data-slate-object="text" 
data-key="1387"><span data-slate-leaf="true" data-offset-key="1387:0" data-first-offset="true"><span 
data-slate-string="true">Uncaught (</span></span><span data-slate-leaf="true" data-offset-key="1387:1"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_5903339014" 
data-annotation-type="annotation"><span data-slate-string="true">in</span></span></span><span 
data-slate-leaf="true" data-offset-key="1387:2"><span data-slate-string="true"> promise) no</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-1d466d2e " data-slate-type="paragraph" data-slate-object="block" data-key="1388"> 
<span data-slate-object="text" data-key="1389"><span data-slate-leaf="true" data-offset-key="1389:0" 
data-first-offset="true"><span data-slate-string="true">这就说明，通过这种方式，调用链被中断了，下一个正常逻辑 exe(true) 
没有被执行。</span></span></span> </div> <div class="se-e008f813 " data-slate-type="paragraph" data-slate-object="block" 
data-key="1390"> <span data-slate-object="text" data-key="1391"><span data-slate-leaf="true" 
data-offset-key="1391:0" data-first-offset="true"><span data-slate-string="true">但是，有时候我们需要捕获错误，而继续执行后面的逻辑，该怎样做？这种情况下我们就要在调用链中使用 
catch 了：</span></span></span> </div> <div class="se-938bcda1 se-597e71a4" data-slate-type="pre" 
data-slate-object="block" data-key="1392" data-code-language="javascript"> <div class="se-369c3745 
se-e336de0b"> <span></span> </div> <div class="se-d550786e"> <div class="se-42fd20f7 se-43d43512" 
data-code-line-number="1"></div> <div class="se-42fd20f7 se-43d43512" data-code-line-number="2"></div> 
<div class="se-42fd20f7 se-43d43512" data-code-line-number="3"></div> <div class="se-42fd20f7 
se-43d43512" data-code-line-number="4"></div> </div> <div class="se-8edbabd0 ps"> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1393"> <span data-slate-object="text" 
data-key="1394"><span data-slate-leaf="true" data-offset-key="1394:0" data-first-offset="true"><span 
class=" gkhl-built_in" data-slate-object="annotation" data-annotation-key="gkann_0003316717" 
data-annotation-type="annotation"><span data-slate-string="true">Promise</span></span></span><span 
data-slate-leaf="true" data-offset-key="1394:1"><span data-slate-string="true">.resolve()</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1395"> <span data-slate-object="text" data-key="1396"><span data-slate-leaf="true" 
data-offset-key="1396:0" data-first-offset="true"><span data-slate-string="true"> .then(exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1396:1"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_3059855851" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1396:2"><span data-slate-string="true">))</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1397"> <span data-slate-object="text" data-key="1398"><span data-slate-leaf="true" 
data-offset-key="1398:0" data-first-offset="true"><span data-slate-string="true"> .catch(</span></span><span 
data-slate-leaf="true" data-offset-key="1398:1"><span class=" gkhl-function" data-slate-object="annotation" 
data-annotation-key="gkann_2068708000" data-annotation-type="annotation"><span data-slate-string="true">(info) 
=&gt;</span></span></span><span data-slate-leaf="true" data-offset-key="1398:2"><span data-slate-string="true"> 
{ </span></span><span data-slate-leaf="true" data-offset-key="1398:3"><span class=" gkhl-built_in" 
data-slate-object="annotation" data-annotation-key="gkann_3120588495" data-annotation-type="annotation"><span 
data-slate-string="true">console</span></span></span><span data-slate-leaf="true" data-offset-key="1398:4"><span 
data-slate-string="true">.log(info); })</span></span></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1399"> <span data-slate-object="text" 
data-key="1400"><span data-slate-leaf="true" data-offset-key="1400:0" data-first-offset="true"><span 
data-slate-string="true"> .then(exe(</span></span><span data-slate-leaf="true" data-offset-key="1400:1"><span 
class=" gkhl-literal" data-slate-object="annotation" data-annotation-key="gkann_2453111858" 
data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1400:2"><span data-slate-string="true">));</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-d8dab81d " data-slate-type="paragraph" data-slate-object="block" data-key="1401"> 
<span data-slate-object="text" data-key="1402"><span data-slate-leaf="true" data-offset-key="1402:0" 
data-first-offset="true"><span data-slate-string="true">这种方式下，异常信息被捕获并打印，而调用链的下一步，也就是第四行的 exe(true) 
可以继续被执行。我们将看到这样的输出：</span></span></span> </div> <div class="se-c7a6f5f6 se-66400864" data-slate-type="pre" 
data-slate-object="block" data-key="1403" data-code-language="javascript"> <div class="se-f0fa4f4c 
se-84360f1b"> <span></span> </div> <div class="se-05ac56df"> <div class="se-38b26a4c se-af110fdc" 
data-code-line-number="1"></div> <div class="se-38b26a4c se-af110fdc" data-code-line-number="2"></div> 
<div class="se-38b26a4c se-af110fdc" data-code-line-number="3"></div> </div> <div class="se-8b421205 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1404"> <span data-slate-object="text" data-key="1405"><span data-slate-leaf="true" 
data-offset-key="1405:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_9617535232" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1406"> <span data-slate-object="text" data-key="1407"><span data-slate-leaf="true" 
data-offset-key="1407:0" data-first-offset="true"><span data-slate-string="true">no</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1408"> <span data-slate-object="text" data-key="1409"><span data-slate-leaf="true" 
data-offset-key="1409:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_7978071526" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <h3 class="se-32950068" data-slate-type="heading" data-slate-object="block" data-key="1410"><span 
data-slate-object="text" data-key="1411"><span data-slate-leaf="true" data-offset-key="1411:0" 
data-first-offset="true"><span data-slate-string="true">async/await 下的异常处理</span></span></span></h3> 
<div class="se-ee79c571 " data-slate-type="paragraph" data-slate-object="block" data-key="1412"> 
<span data-slate-object="text" data-key="1413"><span data-slate-leaf="true" data-offset-key="1413:0" 
data-first-offset="true"><span data-slate-string="true">利用 async/await 的语法糖，我们可以像处理同步代码的异常一样，来处理异步代码：</span></span></span> 
</div> <div class="se-8df1d4ad se-d7b3c0e8" data-slate-type="pre" data-slate-object="block" 
data-key="1414" data-code-language="javascript"> <div class="se-bed490e8 se-94368dba"> <span></span> 
</div> <div class="se-909699ea"> <div class="se-bcc7b57a se-639df5de" data-code-line-number="1"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="2"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="3"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="4"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="5"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="6"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="7"></div> 
<div class="se-bcc7b57a se-639df5de" data-code-line-number="8"></div> <div class="se-bcc7b57a 
se-639df5de" data-code-line-number="9"></div> <div class="se-bcc7b57a se-639df5de" data-code-line-number="10"></div> 
</div> <div class="se-d901a833 ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" 
data-slate-object="block" data-key="1415"> <span data-slate-object="text" data-key="1416"><span 
data-slate-leaf="true" data-offset-key="1416:0" data-first-offset="true"><span class=" gkhl-keyword" 
data-slate-object="annotation" data-annotation-key="gkann_3301333789" data-annotation-type="annotation"><span 
data-slate-string="true">var</span></span></span><span data-slate-leaf="true" data-offset-key="1416:1"><span 
data-slate-string="true"> run = </span></span><span data-slate-leaf="true" data-offset-key="1416:2"><span 
class=" gkhl-keyword" data-slate-object="annotation" data-annotation-key="gkann_7039609931" 
data-annotation-type="annotation"><span data-slate-string="true">async</span></span></span><span 
data-slate-leaf="true" data-offset-key="1416:3"><span data-slate-string="true"> () =&gt; {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1417"> <span data-slate-object="text" data-key="1418"><span data-slate-leaf="true" 
data-offset-key="1418:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1418:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_7267804858" data-annotation-type="annotation"><span data-slate-string="true">try</span></span></span><span 
data-slate-leaf="true" data-offset-key="1418:2"><span data-slate-string="true"> {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1419"> <span data-slate-object="text" data-key="1420"><span data-slate-leaf="true" 
data-offset-key="1420:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1420:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_2142305760" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1420:2"><span data-slate-string="true"> exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1420:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_5444946379" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span><span 
data-slate-leaf="true" data-offset-key="1420:4"><span data-slate-string="true">)();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1421"> <span data-slate-object="text" data-key="1422"><span data-slate-leaf="true" 
data-offset-key="1422:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1422:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_0650681508" data-annotation-type="annotation"><span data-slate-string="true">await</span></span></span><span 
data-slate-leaf="true" data-offset-key="1422:2"><span data-slate-string="true"> exe(</span></span><span 
data-slate-leaf="true" data-offset-key="1422:3"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_1275559070" data-annotation-type="annotation"><span data-slate-string="true">true</span></span></span><span 
data-slate-leaf="true" data-offset-key="1422:4"><span data-slate-string="true">)();</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1423"> <span data-slate-object="text" data-key="1424"><span data-slate-leaf="true" 
data-offset-key="1424:0" data-first-offset="true"><span data-slate-string="true"> } </span></span><span 
data-slate-leaf="true" data-offset-key="1424:1"><span class=" gkhl-keyword" data-slate-object="annotation" 
data-annotation-key="gkann_1296657525" data-annotation-type="annotation"><span data-slate-string="true">catch</span></span></span><span 
data-slate-leaf="true" data-offset-key="1424:2"><span data-slate-string="true"> (e) {</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1425"> <span data-slate-object="text" data-key="1426"><span data-slate-leaf="true" 
data-offset-key="1426:0" data-first-offset="true"><span data-slate-string="true"> </span></span><span 
data-slate-leaf="true" data-offset-key="1426:1"><span class=" gkhl-built_in" data-slate-object="annotation" 
data-annotation-key="gkann_6287897376" data-annotation-type="annotation"><span data-slate-string="true">console</span></span></span><span 
data-slate-leaf="true" data-offset-key="1426:2"><span data-slate-string="true">.log(e);</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1427"> <span data-slate-object="text" data-key="1428"><span data-slate-leaf="true" 
data-offset-key="1428:0" data-first-offset="true"><span data-slate-string="true"> }</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1429"> <span data-slate-object="text" data-key="1430"><span data-slate-leaf="true" 
data-offset-key="1430:0" data-first-offset="true"><span data-slate-string="true">}</span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1431"> <span data-slate-object="text" data-key="1432"></span> </div> <div class="se-fc4d3ee9 
se-c55a3fba" data-slate-type="code-line" data-slate-object="block" data-key="1433"> <span data-slate-object="text" 
data-key="1434"><span data-slate-leaf="true" data-offset-key="1434:0" data-first-offset="true"><span 
data-slate-string="true">run();</span></span></span> </div> <div class="ps__rail-x" style="left: 
0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div> 
</div> <div class="ps__rail-y" style="top: 0px; right: 0px;"> <div class="ps__thumb-y" tabindex="0" 
style="top: 0px; height: 0px;"></div> </div> </div> </div> <div class="se-1ba84f0f " data-slate-type="paragraph" 
data-slate-object="block" data-key="1435"> <span data-slate-object="text" data-key="1436"><span 
data-slate-leaf="true" data-offset-key="1436:0" data-first-offset="true"><span data-slate-string="true">简单说明一下 
，定义一个异步方法 run，由于 await 后面需要直接跟 Promise 对象，因此我们通过额外的一个方法调用符号 () 把原有的 exe 方法内部的 Thunk 包装拆掉，即执行 
exe(false)() 或 exe(true)() 返回的就是 Promise 对象。在 try 块之后，我们使用 catch 来捕捉。运行代码，我们得到了这样的输出：</span></span></span> 
</div> <div class="se-746a946e se-1e3e4715" data-slate-type="pre" data-slate-object="block" 
data-key="1437" data-code-language="javascript"> <div class="se-bbbe79a5 se-0aadddad"> <span></span> 
</div> <div class="se-02e88e4f"> <div class="se-ab080ae2 se-f7e91bd2" data-code-line-number="1"></div> 
<div class="se-ab080ae2 se-f7e91bd2" data-code-line-number="2"></div> </div> <div class="se-96e082b9 
ps"> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1438"> <span data-slate-object="text" data-key="1439"><span data-slate-leaf="true" 
data-offset-key="1439:0" data-first-offset="true"><span class=" gkhl-literal" data-slate-object="annotation" 
data-annotation-key="gkann_8414202509" data-annotation-type="annotation"><span data-slate-string="true">false</span></span></span></span> 
</div> <div class="se-fc4d3ee9 se-c55a3fba" data-slate-type="code-line" data-slate-object="block" 
data-key="1440"> <span data-slate-object="text" data-key="1441"><span data-slate-leaf="true" 
data-offset-key="1441:0" data-first-offset="true"><span data-slate-string="true">no</span></span></span> 
</div> <div class="ps__rail-x" style="left: 0px; bottom: 0px;"> <div class="ps__thumb-x" tabindex="0" 
style="left: 0px; width: 0px;"></div> </div> <div class="ps__rail-y" style="top: 0px; right: 
0px;"> <div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 0px;"></div> </div> </div> 
</div> <div class="se-39d2c2e4 " data-slate-type="paragraph" data-slate-object="block" data-key="1442"> 
<span data-slate-object="text" data-key="1443"><span data-slate-leaf="true" data-offset-key="1443:0" 
data-first-offset="true"><span data-slate-string="true">这个 false 就是 exe 方法对入参的输出，而这个 no 就是 
setTimeout 方法 reject 的回调返回，它通过异常捕获并最终在 catch 块中输出。就像我们所认识的同步代码一样，第四行的 exe(true) 并未得到执行。</span></span></span> 
</div> <h2 class="se-d55ac0e4" data-slate-type="heading" data-slate-object="block" data-key="1444"><span 
data-slate-object="text" data-key="1445"><span data-slate-leaf="true" data-offset-key="1445:0" 
data-first-offset="true"><span data-slate-string="true">总结思考</span></span></span></h2> <div 
class="se-b8170ee3 " data-slate-type="paragraph" data-slate-object="block" data-key="1446"> 
<span data-slate-object="text" data-key="1447"><span data-slate-leaf="true" data-offset-key="1447:0" 
data-first-offset="true"><span data-slate-string="true">今天我们结合实例学习了 JavaScript 异步编程的一些方法，包括使用 
Promise 或 async/await 来改善异步代码，使用生成器来实现协程，以及怎样进行异步错误处理等等。其中，Promise 相关的使用是需要重点理解的内容，因为它的应用性非常普遍。</span></span></span> 
</div> <div class="se-5875745f " data-slate-type="paragraph" data-slate-object="block" data-key="1448"> 
<span data-slate-object="text" data-key="1449"><span data-slate-leaf="true" data-offset-key="1449:0" 
data-first-offset="true"><span data-slate-string="true">现在，我来提两个问题：</span></span></span> </div> 
<div class="se-506d4355" data-slate-type="list" data-slate-object="block" data-key="1450"> 
<div class="se-861fae2f se-b7c6cc3d" data-slate-type="list-line" data-slate-object="block" 
data-key="1451"> <span data-slate-object="text" data-key="1452"><span data-slate-leaf="true" 
data-offset-key="1452:0" data-first-offset="true"><span data-slate-string="true">在你的项目中，是否使用过 
JavaScript 异步编程，都使用了和异步编程有关的哪些技术呢？</span></span></span> </div> <div class="se-83fc4714 se-f1810f9e" 
data-slate-type="list-line" data-slate-object="block" data-key="1453"> <span data-slate-object="text" 
data-key="1454"><span data-slate-leaf="true" data-offset-key="1454:0" data-first-offset="true"><span 
data-slate-string="true">ES6 和 ES7 引入了很多 JavaScript 的高级特性和语法糖，包括这一讲提到的部分。有程序员朋友认为，这些在项目中的应用，反而给编程人员的阅读和理解造成了困扰，增加了学习曲线，还不如不用它们，写“简单”的 
JavaScript 语法。对此，你怎么看？</span></span></span> </div> </div> <div class="se-9ced7841 " data-slate-type="paragraph" 
data-slate-object="block" data-key="1455"> <span data-slate-object="text" data-key="1456"><span 
data-slate-leaf="true" data-offset-key="1456:0" data-first-offset="true"><span data-slate-string="true">在本章我们学习了基于 
Web 的全栈技术中，前端相关的部分，希望这些内容能够帮到你，在前端这块土地上成长为更好的工程师。同时，在这一章我们学到了很多套路和方法，请回想一下，并在未来的工作中慢慢应用和体会，它们都是可以应用到软件其它领域的设计和编码上的。在第四章，我们会将目光往后移，去了解了解持久化的世界，希望现在的你依然充满干劲！</span></span></span> 
</div> <h2 class="se-99d16281" data-slate-type="heading" data-slate-object="block" data-key="1457"><span 
data-slate-object="text" data-key="1458"><span data-slate-leaf="true" data-offset-key="1458:0" 
data-first-offset="true"><span data-slate-string="true">扩展阅读</span></span></span></h2> <div 
class="se-e819e4e5" data-slate-type="list" data-slate-object="block" data-key="1459"> <div 
class="se-4a32981f se-9e180f8b" data-slate-type="list-line" data-slate-object="block" data-key="1460"> 
<span data-slate-object="text" data-key="1461"><span data-slate-leaf="true" data-offset-key="1461:0" 
data-first-offset="true"><span data-slate-string="true">对于今天学习的 Promise，你可以在 MDN 的</span></span></span><a 
data-slate-type="link" data-slate-object="inline" data-key="1462" class="se-575a6467 se-198d4f97"><span 
data-slate-object="text" data-key="1463"><span data-slate-leaf="true" data-offset-key="1463:0" 
data-first-offset="true"><span data-slate-string="true">使用 Promise</span></span></span></a><span 
data-slate-object="text" data-key="1464"><span data-slate-leaf="true" data-offset-key="1464:0" 
data-first-offset="true"><span data-slate-string="true"> 一文中读到更为详尽的介绍；第二个是生成器，生成器实际上功能很强大，它甚至可以嵌套使用，你也可以参见 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1465" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1466"><span data-slate-leaf="true" data-offset-key="1466:0" 
data-first-offset="true"><span data-slate-string="true">MDN 的示例教程</span></span></span></a><span 
data-slate-object="text" data-key="1467"><span data-slate-leaf="true" data-offset-key="1467:0" 
data-first-offset="true"><span data-slate-string="true">。</span></span></span> </div> <div 
class="se-f24cb913 se-275d6afe" data-slate-type="list-line" data-slate-object="block" data-key="1468"> 
<span data-slate-object="text" data-key="1469"><span data-slate-leaf="true" data-offset-key="1469:0" 
data-first-offset="true"><span data-slate-string="true">如果你想快速浏览 ES6 新带来的 JavaScript 高级特性，我推荐你浏览 
</span></span></span><a data-slate-type="link" data-slate-object="inline" data-key="1470" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1471"><span data-slate-leaf="true" data-offset-key="1471:0" 
data-first-offset="true"><span data-slate-string="true">ECMAScript 6 入门</span></span></span></a><span 
data-slate-object="text" data-key="1472"><span data-slate-leaf="true" data-offset-key="1472:0" 
data-first-offset="true"><span data-slate-string="true">，从中挑选你感兴趣的内容阅读。</span></span></span> 
</div> <div class="se-0528fbfe se-031ecf0f" data-slate-type="list-line" data-slate-object="block" 
data-key="1473"> <a data-slate-type="link" data-slate-object="inline" data-key="1474" class="se-575a6467 
se-198d4f97"><span data-slate-object="text" data-key="1475"><span data-slate-leaf="true" data-offset-key="1475:0" 
data-first-offset="true"><span data-slate-string="true">Async-Await ≈ Generators + Promises</span></span></span></a><span 
data-slate-object="text" data-key="1476"><span data-slate-leaf="true" data-offset-key="1476:0" 
data-first-offset="true"><span data-slate-string="true"> 这篇文章介绍了生成器、Promise 和 async/await 之间的关系，读完你就能明白“为什么我们说 
async/await 是生成器和 Promise 的语法糖”，感兴趣的朋友可以阅读，想阅读中文版的可以参见</span></span></span><a data-slate-type="link" 
data-slate-object="inline" data-key="1477" class="se-575a6467 se-198d4f97"><span data-slate-object="text" 
data-key="1478"><span data-slate-leaf="true" data-offset-key="1478:0" data-first-offset="true"><span 
data-slate-string="true">这个翻译</span></span></span></a><span data-slate-object="text" data-key="1479"><span 
data-slate-leaf="true" data-offset-key="1479:0" data-first-offset="true"><span data-slate-string="true">。</span></span></span> 
</div> </div> <div class="se-c3a6fda3" data-slate-type="image" data-slate-object="block" data-key="1480"> 
<img class="se-7e51f27a" src="https://static001.geekbang.org/resource/image/11/8b/1181246bbd51ce348d5729696d1dc28b.jpg"> 
</div> </div>', '', 'book', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 5 msec}
2020-11-19 11:17:52.311 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_, nodefiledd0_.changed as changed2_9_, nodefiledd0_.created 
as created3_9_, nodefiledd0_.default_langcode as default_4_9_, nodefiledd0_.langcode as langcode5_9_, 
nodefiledd0_.promote as promote6_9_, nodefiledd0_.revision_translation_affected as revision7_9_, 
nodefiledd0_.status as status8_9_, nodefiledd0_.sticky as sticky9_9_, nodefiledd0_.title as 
title10_9_, nodefiledd0_.type as type11_9_, nodefiledd0_.uid as uid12_9_, nodefiledd0_.vid 
as vid13_9_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.312 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:17:52.313 INFO  jdbc.sqltiming Line:373 - select nodefieldr0_.nid as nid1_10_0_, nodefieldr0_.changed as changed2_10_0_, nodefieldr0_.created 
as created3_10_0_, nodefieldr0_.default_langcode as default_4_10_0_, nodefieldr0_.langcode 
as langcode5_10_0_, nodefieldr0_.promote as promote6_10_0_, nodefieldr0_.revision_translation_affected 
as revision7_10_0_, nodefieldr0_.status as status8_10_0_, nodefieldr0_.sticky as sticky9_10_0_, 
nodefieldr0_.title as title10_10_0_, nodefieldr0_.uid as uid11_10_0_, nodefieldr0_.vid as vid12_10_0_ 
from node_field_revision nodefieldr0_ where nodefieldr0_.nid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.313 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|----|----|

2020-11-19 11:17:52.315 INFO  jdbc.sqltiming Line:373 - insert into node_field_revision (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, uid, vid, nid) values (1605755872, 1605755872, 1, 'zh-hans', 0, 1, 1, 
0, '19丨打开潘多拉盒子：JavaScript异步编程', 1, 29, 29) 
 {executed in 0 msec}
2020-11-19 11:17:52.318 INFO  jdbc.sqltiming Line:373 - select nodefiledd0_.nid as nid1_9_0_, nodefiledd0_.changed as changed2_9_0_, nodefiledd0_.created 
as created3_9_0_, nodefiledd0_.default_langcode as default_4_9_0_, nodefiledd0_.langcode as 
langcode5_9_0_, nodefiledd0_.promote as promote6_9_0_, nodefiledd0_.revision_translation_affected 
as revision7_9_0_, nodefiledd0_.status as status8_9_0_, nodefiledd0_.sticky as sticky9_9_0_, 
nodefiledd0_.title as title10_9_0_, nodefiledd0_.type as type11_9_0_, nodefiledd0_.uid as uid12_9_0_, 
nodefiledd0_.vid as vid13_9_0_ from node_field_data nodefiledd0_ where nodefiledd0_.nid=29 
 {executed in 0 msec}
2020-11-19 11:17:52.318 INFO  jdbc.resultsettable Line:610 - 
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|nid |changed |created |default_langcode |langcode |promote |revision_translation_affected |status |sticky |title |type |uid |vid |
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|
|----|--------|--------|-----------------|---------|--------|------------------------------|-------|-------|------|-----|----|----|

2020-11-19 11:17:52.322 INFO  jdbc.sqltiming Line:373 - insert into node_field_data (changed, created, default_langcode, langcode, promote, revision_translation_affected, 
status, sticky, title, type, uid, vid, nid) values (1605755872, 1605755872, 1, 'zh-hans', 0, 
1, 1, 0, '19丨打开潘多拉盒子：JavaScript异步编程', 'book', 1, 29, 29) 
 {executed in 2 msec}
2020-11-19 11:17:52.324 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_, bookfieldm0_.bundle as bundle2_7_, bookfieldm0_.delta 
as delta3_7_, bookfieldm0_.langcode as langcode4_7_, bookfieldm0_.field_media_value as field_me5_7_, 
bookfieldm0_.revision_id as revision6_7_ from node__field_media bookfieldm0_ where bookfieldm0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.325 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:52.326 INFO  jdbc.sqltiming Line:373 - select bookfieldm0_.entity_id as entity_i1_7_0_, bookfieldm0_.bundle as bundle2_7_0_, bookfieldm0_.delta 
as delta3_7_0_, bookfieldm0_.langcode as langcode4_7_0_, bookfieldm0_.field_media_value as 
field_me5_7_0_, bookfieldm0_.revision_id as revision6_7_0_ from node__field_media bookfieldm0_ 
where bookfieldm0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.326 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:52.328 INFO  jdbc.sqltiming Line:373 - insert into node__field_media (bundle, delta, langcode, field_media_value, revision_id, entity_id) 
values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/53bfca0d3baee50b0ba712863e3c693a?bkt=en-d3a65691252603d31d1a169bc22165b52914eb5f43adf46e8a79937ef59b643e25b980353f86e167&fid=3757516097-778750-337304310443835&time=1605755870&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-wg1WUgPeVr2KZYA6eNIAlF95abg%3D&to=92&size=17230281&sta_dx=17230281&sta_cs=3481&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250751&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=17230281&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-cce54a4b6e00d83cf075f8b73f2fe9f10ad7c2b31bb929dd8912da7a896e54044f61f7e4df052d1e&sl=76480590&expires=8h&rt=pr&r=373099427&mlogid=7502199375178637011&vbdid=2247232042&fin=19%E4%B8%A8%E6%89%93%E5%BC%80%E6%BD%98%E5%A4%9A%E6%8B%89%E7%9B%92%E5%AD%90%EF%BC%9AJavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.m4a&bflag=92,34-92&rtype=1&dp-logid=7502199375178637011&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=26fa64dbec28822466a6f1e24c58fb5b8b23d8dbb98cc945305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=19%E4%B8%A8%E6%89%93%E5%BC%80%E6%BD%98%E5%A4%9A%E6%8B%89%E7%9B%92%E5%AD%90%EF%BC%9AJavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.m4a', 
29, 29) 
 {executed in 1 msec}
2020-11-19 11:17:52.331 INFO  jdbc.sqltiming Line:373 - select nodefieldm0_.entity_id as entity_i1_16_0_, nodefieldm0_.bundle as bundle2_16_0_, nodefieldm0_.delta 
as delta3_16_0_, nodefieldm0_.langcode as langcode4_16_0_, nodefieldm0_.field_media_value as 
field_me5_16_0_, nodefieldm0_.revision_id as revision6_16_0_ from node_revision__field_media 
nodefieldm0_ where nodefieldm0_.entity_id=29 
 {executed in 1 msec}
2020-11-19 11:17:52.332 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------------|------------|
|entity_id |bundle |delta |langcode |field_media_value |revision_id |
|----------|-------|------|---------|------------------|------------|
|----------|-------|------|---------|------------------|------------|

2020-11-19 11:17:52.333 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_media (bundle, delta, langcode, field_media_value, revision_id, 
entity_id) values ('book', 0, 'zh-hans', 'https://qdall01.baidupcs.com/file/53bfca0d3baee50b0ba712863e3c693a?bkt=en-d3a65691252603d31d1a169bc22165b52914eb5f43adf46e8a79937ef59b643e25b980353f86e167&fid=3757516097-778750-337304310443835&time=1605755870&sign=FDTAXUGERLQlBHSKfWqir-DCb740ccc5511e5e8fedcff06b081203-wg1WUgPeVr2KZYA6eNIAlF95abg%3D&to=92&size=17230281&sta_dx=17230281&sta_cs=3481&sta_ft=m4a&sta_ct=7&sta_mt=0&fm2=MH%2CYangquan%2CAnywhere%2C%2Cshanghai%2Cct&ctime=1572250751&mtime=1605754778&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=17230281&vuk=3757516097&iv=0&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-cce54a4b6e00d83cf075f8b73f2fe9f10ad7c2b31bb929dd8912da7a896e54044f61f7e4df052d1e&sl=76480590&expires=8h&rt=pr&r=373099427&mlogid=7502199375178637011&vbdid=2247232042&fin=19%E4%B8%A8%E6%89%93%E5%BC%80%E6%BD%98%E5%A4%9A%E6%8B%89%E7%9B%92%E5%AD%90%EF%BC%9AJavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.m4a&bflag=92,34-92&rtype=1&dp-logid=7502199375178637011&dp-callid=0.1.1&hps=1&tsl=80&csl=80&fsl=-1&csign=yVzLQPCt4DblfMLqd2BCjd2RnqQ%3D&so=0&ut=6&uter=0&serv=0&uc=1458616558&ti=26fa64dbec28822466a6f1e24c58fb5b8b23d8dbb98cc945305a5e1275657320&hflag=30&adg=c_15d187590626c675056c89c8026cfc17&reqlabel=778750_l_1bf9445f27094ab64c9f1cb0bdf7ccfa_-1_dd2c452b8e51a0c74130d7cf32c48a2d&ibp=1&by=themis&filename=19%E4%B8%A8%E6%89%93%E5%BC%80%E6%BD%98%E5%A4%9A%E6%8B%89%E7%9B%92%E5%AD%90%EF%BC%9AJavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.m4a', 
29, 29) 
 {executed in 0 msec}
2020-11-19 11:17:52.336 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_, bookfieldc0_.bundle as bundle2_4_, bookfieldc0_.field_comment_value 
as field_co3_4_, bookfieldc0_.delta as delta4_4_, bookfieldc0_.field_comment_format as field_co5_4_, 
bookfieldc0_.langcode as langcode6_4_, bookfieldc0_.revision_id as revision7_4_ from node__field_comment 
bookfieldc0_ where bookfieldc0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.336 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:52.337 INFO  jdbc.sqltiming Line:373 - select bookfieldc0_.entity_id as entity_i1_4_0_, bookfieldc0_.bundle as bundle2_4_0_, bookfieldc0_.field_comment_value 
as field_co3_4_0_, bookfieldc0_.delta as delta4_4_0_, bookfieldc0_.field_comment_format as 
field_co5_4_0_, bookfieldc0_.langcode as langcode6_4_0_, bookfieldc0_.revision_id as revision7_4_0_ 
from node__field_comment bookfieldc0_ where bookfieldc0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.337 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:52.341 INFO  jdbc.sqltiming Line:373 - insert into node__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/d8/6f/22e5ec55.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>零维</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-28 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师，如何使用 promise 和 generator 模拟出 await 的返回值呢？ <br>如果用 async/awiat: 
<br>&nbsp;const res = await ajax(); <br>变成 yield 是: <br>&nbsp;&nbsp;const res = yield ajaxWrap(); 
<br> <br>res 是怎么用 ajaxWrap 里面出来的呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>靠人品去赢</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-25 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个promise“异步”变“同步”，就是让异步代码看起来像同步一样，刚看第一遍没看明白，还有就是箭头函数，箭头多了，我就不能第一时间看明白，看来还是用得少。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 用得少是一个方面，本来 JavaScript 
如果书写的时候不注意结构和组织的话，确实容易写出难懂的代码</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>tt</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-23 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 老师，JavaScript和Python确实太像了，尤其是异步函数、生成器以及协程的部分。 <br> <br>那么，对于小规模的团队，JavaScript+Python或者JavaScript+node.js的组合是不是比JavaScript+java在开发速度上更有优势呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这个问题不太好回答，我也没有足够的统计数据。据我个人的经历，Python 开发效率确实是要比 Java 高出不少</p> </div> 
<div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 3 msec}
2020-11-19 11:17:52.345 INFO  jdbc.sqltiming Line:373 - select nodefieldc0_.entity_id as entity_i1_13_0_, nodefieldc0_.bundle as bundle2_13_0_, nodefieldc0_.field_comment_value 
as field_co3_13_0_, nodefieldc0_.delta as delta4_13_0_, nodefieldc0_.field_comment_format as 
field_co5_13_0_, nodefieldc0_.langcode as langcode6_13_0_, nodefieldc0_.revision_id as revision7_13_0_ 
from node_revision__field_comment nodefieldc0_ where nodefieldc0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.346 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|--------------------|------|---------------------|---------|------------|
|entity_id |bundle |field_comment_value |delta |field_comment_format |langcode |revision_id |
|----------|-------|--------------------|------|---------------------|---------|------------|
|----------|-------|--------------------|------|---------------------|---------|------------|

2020-11-19 11:17:52.351 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_comment (bundle, field_comment_value, delta, field_comment_format, 
langcode, revision_id, entity_id) values ('book', '<li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/12/d8/6f/22e5ec55.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>零维</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-28 </div> </div> <!----> </div> 
<div> <div class="_3M6kV3zb_0"> 老师，如何使用 promise 和 generator 模拟出 await 的返回值呢？ <br>如果用 async/awiat: 
<br>&nbsp;const res = await ajax(); <br>变成 yield 是: <br>&nbsp;&nbsp;const res = yield ajaxWrap(); 
<br> <br>res 是怎么用 ajaxWrap 里面出来的呢？ </div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> 
</div> <!----> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> 
<span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> 
</div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img src="https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg" 
class="_2273kGdT_0"> <div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> 
<span>靠人品去赢</span> <!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-25 </div> </div> <!----> 
</div> <div> <div class="_3M6kV3zb_0 _3D2NkqD6_0"> 这个promise“异步”变“同步”，就是让异步代码看起来像同步一样，刚看第一遍没看明白，还有就是箭头函数，箭头多了，我就不能第一时间看明白，看来还是用得少。 
</div> <!----> <div class="_2xNIY4NG_0"> <p class="_33BLbmw4_0">作者回复: 用得少是一个方面，本来 JavaScript 
如果书写的时候不注意结构和组织的话，确实容易写出难懂的代码</p> </div> <div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> 
<i class="iconfont"></i> <span></span> </div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> 
<span class=""></span> </div> <!----> </div> </div> </div></li> <li class="reJj6Thl_0"><img 
src="https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg" class="_2273kGdT_0"> 
<div class="_2CG0SquK_0"> <div class="_304R4gla_0"> <div> <div class="_18Dng5rT_0"> <span>tt</span> 
<!----> </div> <div class="_1H1Z49Dr_0"> 2019-10-23 </div> </div> <!----> </div> <div> <div 
class="_3M6kV3zb_0"> 老师，JavaScript和Python确实太像了，尤其是异步函数、生成器以及协程的部分。 <br> <br>那么，对于小规模的团队，JavaScript+Python或者JavaScript+node.js的组合是不是比JavaScript+java在开发速度上更有优势呢？ 
</div> <div class="_2r3UB1GX_0"> <span>展开</span><i class="iconfont"></i> </div> <div class="_2xNIY4NG_0"> 
<p class="_33BLbmw4_0">作者回复: 这个问题不太好回答，我也没有足够的统计数据。据我个人的经历，Python 开发效率确实是要比 Java 高出不少</p> </div> 
<div class="_1w8H0ktn_0 _2A421P4G_0"> <div class="_2jsFl-X0_0"> <i class="iconfont"></i> <span></span> 
</div> <div class="_2P4B1Hdm_0"> <i class="iconfont"></i> <span class=""></span> </div> <!----> 
</div> </div> </div></li>', 0, 'full_html', 'zh-hans', 29, 29) 
 {executed in 4 msec}
2020-11-19 11:17:52.354 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_, bookfieldt0_.bundle as bundle2_8_, bookfieldt0_.delta 
as delta3_8_, bookfieldt0_.langcode as langcode4_8_, bookfieldt0_.revision_id as revision5_8_, 
bookfieldt0_.field_thumb_value as field_th6_8_ from node__field_thumb bookfieldt0_ where bookfieldt0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.354 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:52.355 INFO  jdbc.sqltiming Line:373 - select bookfieldt0_.entity_id as entity_i1_8_0_, bookfieldt0_.bundle as bundle2_8_0_, bookfieldt0_.delta 
as delta3_8_0_, bookfieldt0_.langcode as langcode4_8_0_, bookfieldt0_.revision_id as revision5_8_0_, 
bookfieldt0_.field_thumb_value as field_th6_8_0_ from node__field_thumb bookfieldt0_ where 
bookfieldt0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.355 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:52.357 INFO  jdbc.sqltiming Line:373 - insert into node__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, entity_id) 
values ('book', 0, 'zh-hans', 29, 'https://static001.geekbang.org/resource/image/c7/b3/c7d0336787d0611f36eaee775a22d7b3.jpg', 
29) 
 {executed in 0 msec}
2020-11-19 11:17:52.360 INFO  jdbc.sqltiming Line:373 - select nodefieldt0_.entity_id as entity_i1_17_0_, nodefieldt0_.bundle as bundle2_17_0_, nodefieldt0_.delta 
as delta3_17_0_, nodefieldt0_.langcode as langcode4_17_0_, nodefieldt0_.revision_id as revision5_17_0_, 
nodefieldt0_.field_thumb_value as field_th6_17_0_ from node_revision__field_thumb nodefieldt0_ 
where nodefieldt0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.361 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|---------|------------|------------------|
|entity_id |bundle |delta |langcode |revision_id |field_thumb_value |
|----------|-------|------|---------|------------|------------------|
|----------|-------|------|---------|------------|------------------|

2020-11-19 11:17:52.362 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_thumb (bundle, delta, langcode, revision_id, field_thumb_value, 
entity_id) values ('book', 0, 'zh-hans', 29, 'https://static001.geekbang.org/resource/image/c7/b3/c7d0336787d0611f36eaee775a22d7b3.jpg', 
29) 
 {executed in 0 msec}
2020-11-19 11:17:52.365 INFO  jdbc.sqltiming Line:373 - select bookfieldf0_.entity_id as entity_i1_5_0_, bookfieldf0_.bundle as bundle2_5_0_, bookfieldf0_.delta 
as delta3_5_0_, bookfieldf0_.field_fenlei_target_id as field_fe4_5_0_, bookfieldf0_.langcode 
as langcode5_5_0_, bookfieldf0_.revision_id as revision6_5_0_ from node__field_fenlei bookfieldf0_ 
where bookfieldf0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.365 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:17:52.367 INFO  jdbc.sqltiming Line:373 - insert into node__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 29, 29) 
 {executed in 1 msec}
2020-11-19 11:17:52.370 INFO  jdbc.sqltiming Line:373 - select nodefieldf0_.entity_id as entity_i1_14_0_, nodefieldf0_.bundle as bundle2_14_0_, nodefieldf0_.delta 
as delta3_14_0_, nodefieldf0_.field_fenlei_target_id as field_fe4_14_0_, nodefieldf0_.langcode 
as langcode5_14_0_, nodefieldf0_.revision_id as revision6_14_0_ from node_revision__field_fenlei 
nodefieldf0_ where nodefieldf0_.entity_id=29 
 {executed in 0 msec}
2020-11-19 11:17:52.371 INFO  jdbc.resultsettable Line:610 - 
|----------|-------|------|-----------------------|---------|------------|
|entity_id |bundle |delta |field_fenlei_target_id |langcode |revision_id |
|----------|-------|------|-----------------------|---------|------------|
|----------|-------|------|-----------------------|---------|------------|

2020-11-19 11:17:52.373 INFO  jdbc.sqltiming Line:373 - insert into node_revision__field_fenlei (bundle, delta, field_fenlei_target_id, langcode, revision_id, 
entity_id) values ('book', 0, 1, 'zh-hans', 29, 29) 
 {executed in 1 msec}
